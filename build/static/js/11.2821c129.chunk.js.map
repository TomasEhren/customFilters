{"version":3,"sources":["utils/formatter.js","utils/htmlForFeature.js","components/layers/PopAggLayer.js","components/layers/PopulationLayer.js","components/layers/CountiesLayer.js","data/sources/popAggSource.js","data/sources/populationSource.js","data/sources/countiesSource.js","components/widgets/CustomCategoryWidget.js","components/widgets/useWidgetFilterValues.js","components/views/Filters.js"],"names":["DEFAULT_LOCALE","currencyFormatter","value","_value","parseLogicalOperation","prefix","operation","Intl","NumberFormat","maximumFractionDigits","minimumFractionDigits","notation","compactDisplay","format","numberFormatter","isNaN","match","RegExp","exec","Number","Error","FORMATTER_TYPES","Object","freeze","CURRENCY","NUMBER","formatterFunctions","formatted","DEFAULT_FORMATTER","type","columns","htmlForFeature","title","feature","formatter","includeColumns","showColumnName","propertyNames","keys","properties","supportedTypes","values","includes","length","isArrayOfStrings","column","available","join","isFormatterValid","includedColumnsAreValid","html","name","generateHtml","propertyName","formatterFunction","v","concat","Array","isArray","every","String","POP_AGG_LAYER_ID","PopAggLayer","popAggLayer","useSelector","state","carto","layers","source","selectSourceById","cartoLayerProps","useCartoLayerProps","CartoLayer","id","getFillColor","pointRadiusMinPixels","getLineColor","lineWidthMinPixels","pickable","visible","onHover","info","object","style","POPULATION_LAYER_ID","layerConfig","legend","PopulationLayer","populationLayer","dispatch","useDispatch","parameters","blendFunc","GL","SRC_ALPHA","DST_ALPHA","blendEquation","FUNC_ADD","onDataLoad","data","updateLayer","layerAttributes","COUNTIES_LAYER_ID","CountiesLayer","countiesLayer","MAP_TYPES","TILESET","connection","TABLE","EMPTY_ARRAY","CustomCategoryWidget","props","dataSource","operationColumn","labels","animation","filterable","searchable","onError","wrapperProps","noDataAlertProps","otherSources","isSourceReady","map","e","selectAreFeaturesReadyForSource","useState","categoryData","setCategoryData","isLoading","setIsLoading","filters","useSourceFilters","selectedCategories","useMemo","filter","owner","useWidgetFilterValues","FilterTypes","IN","useEffect","getCategories","then","catch","error","handleSelectedCategoriesChange","useCallback","categories","addFilter","forEach","removeFilter","onSelectedCategoriesChange","defaultProps","useStyles","makeStyles","Filters","classes","addSource","populationSource","addLayer","removeLayer","removeSource","countiesSource","popAggSource","Grid","container","direction","className","item","AggregationTypes","SUM","Math","round","console","COUNT"],"mappings":"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","file":"static/js/11.2821c129.chunk.js","sourcesContent":["// int-numberformat dependencies (support for ios v13)\nimport '@formatjs/intl-locale/polyfill';\nimport '@formatjs/intl-getcanonicallocales/polyfill';\n\n// int-pluralrules dependencies (support for ios v12)\nimport '@formatjs/intl-pluralrules/polyfill';\nimport '@formatjs/intl-pluralrules/locale-data/en';\n\n/*\n  Note: `notation` & `compactDisplay` properties are not supported yet by Safari.\n  Those require the use of a polyfill: https://www.npmjs.com/package/@formatjs/intl-numberformat\n*/\nimport '@formatjs/intl-numberformat/polyfill';\nimport '@formatjs/intl-numberformat/locale-data/en';\n\nconst DEFAULT_LOCALE = 'en-US';\nconst CIRCLE_SVG = `<svg width=\"10px\" height=\"10px\" fill=\"#47db99\" viewBox=\"0 0 10 10\" xmlns=\"http://www.w3.org/2000/svg\">\n  <circle cx=\"5\" cy=\"5\" r=\"5\"/>\n</svg>`;\n\nexport const currencyFormatter = (value) => {\n  const _value = parseLogicalOperation(value);\n  return {\n    prefix: `${_value.operation} $`,\n    value: Intl.NumberFormat(DEFAULT_LOCALE, {\n      maximumFractionDigits: 2,\n      minimumFractionDigits: 2,\n      notation: 'compact',\n      compactDisplay: 'short',\n    }).format(_value.value),\n  };\n};\n\nexport const numberFormatter = (value) => {\n  const _value = parseLogicalOperation(value);\n  return (\n    _value.operation +\n    Intl.NumberFormat(DEFAULT_LOCALE, {\n      maximumFractionDigits: 1,\n      minimumFractionDigits: 0,\n      notation: 'compact',\n      compactDisplay: 'short',\n    }).format(_value.value)\n  );\n};\n\nexport const intervalsFormatter = (value, dataIndex, ticks) => {\n  const _value = numberFormatter(value);\n  if (!ticks || dataIndex === undefined) return _value;\n  const intervals = moneyInterval(dataIndex, ticks);\n  return `${intervals} <br/> ${CIRCLE_SVG} ${_value}`;\n};\n\nconst parseLogicalOperation = (value) => {\n  if (!isNaN(value)) return { value, operation: '' };\n\n  try {\n    // To allow formatting even values after a comparison operator\n    const numberWithComparisonOperators = /([<>]=?)[^$]?(\\d+)/gm; // eg. < 2, <2, >= 3\n    const regExp = new RegExp(numberWithComparisonOperators);\n    const match = regExp.exec(value);\n\n    let operation;\n    if (match) {\n      operation = match[1];\n      value = Number(match[2]);\n    }\n\n    return isNaN(value) ? { value: 0, operation: '' } : { value, operation };\n  } catch {\n    throw new Error(`You are using a numberFormatter on a not valid value: ${value}`);\n  }\n};\n\nconst moneyInterval = (dataIndex, ticks) => {\n  const isFirst = dataIndex === 0;\n  try {\n    if (isFirst || dataIndex === ticks.length) {\n      const comparison = isFirst ? '<' : '≥';\n      const formattedValue = isFirst\n        ? currencyFormatter(ticks[dataIndex])\n        : currencyFormatter(ticks[dataIndex - 1]);\n      return `${comparison} ${formattedValue.prefix}${formattedValue.value}`;\n    } else {\n      dataIndex = dataIndex - 1;\n      const prevTick = currencyFormatter(ticks[dataIndex]);\n      const nextTick = currencyFormatter(ticks[dataIndex + 1]);\n      return `${prevTick.prefix}${prevTick.value} — ${nextTick.prefix}${nextTick.value}`;\n    }\n  } catch {\n    throw new Error(\n      `You are using an \"intervalsFormatter\" on a not valid index: ${dataIndex} & for the ticks ${ticks}`\n    );\n  }\n};\n","import { currencyFormatter, numberFormatter } from 'utils/formatter';\n\nconst FORMATTER_TYPES = Object.freeze({\n  CURRENCY: 'currency',\n  NUMBER: 'number',\n});\n\nconst formatterFunctions = {\n  [FORMATTER_TYPES.CURRENCY](value) {\n    const formatted = currencyFormatter(value);\n    return `${formatted.prefix}${formatted.value}`;\n  },\n  [FORMATTER_TYPES.NUMBER](value) {\n    return numberFormatter(value);\n  },\n};\n\nconst DEFAULT_FORMATTER = {\n  type: '',\n  columns: [],\n};\n\nexport default function htmlForFeature({\n  title,\n  feature,\n  formatter = DEFAULT_FORMATTER,\n  includeColumns = '*',\n  showColumnName = true,\n}) {\n  if (!feature) {\n    throw new Error(`htmlForFeature needs \"info.object\" information`);\n  }\n\n  const propertyNames = Object.keys(feature.properties);\n\n  if (\n    formatter?.type &&\n    formatter?.columns &&\n    !isFormatterValid(propertyNames, formatter)\n  ) {\n    return;\n  }\n\n  if (!includedColumnsAreValid(propertyNames, includeColumns)) {\n    return;\n  }\n\n  let html = '';\n\n  if (title) {\n    html = `<h3 style=\"margin: 0\"><strong>${title}</strong></h3>`;\n  }\n\n  for (const name of propertyNames) {\n    if (\n      name !== 'layerName' &&\n      (includeColumns.includes(name) || includeColumns === '*')\n    ) {\n      if (formatter?.columns.includes(name)) {\n        const formatterFunction = formatterFunctions[formatter.type];\n        html = generateHtml(feature, name, showColumnName, html, formatterFunction);\n      } else {\n        html = generateHtml(feature, name, showColumnName, html);\n      }\n    }\n  }\n\n  return html;\n}\n\nfunction generateHtml(\n  feature,\n  propertyName,\n  showColumnName,\n  html,\n  formatterFunction = (v) => v\n) {\n  return html.concat(\n    `${showColumnName ? `<strong>${propertyName}</strong>: ` : ''}${formatterFunction(\n      feature.properties[propertyName]\n    )}<br/>`\n  );\n}\n\nfunction isFormatterValid(properties, formatter) {\n  const supportedTypes = Object.values(FORMATTER_TYPES);\n\n  if (!supportedTypes.includes(formatter.type)) {\n    throw new Error(\n      `\"${formatter.type}\" is not supported as formatter, use one of \"${supportedTypes}\"`\n    );\n  }\n\n  if (!formatter.columns || formatter.columns.length === 0) return true;\n\n  if (!isArrayOfStrings(formatter.columns)) {\n    throw new Error(`\"formatter.columns\" property needs to be an array of strings`);\n  }\n\n  for (const column of formatter.columns) {\n    if (!properties.includes(column)) {\n      const available = properties.join(', ');\n      throw new Error(\n        `\"formatted.columns\" includes '${column}' but it was not found!. Available cols are [${available}]`\n      );\n    }\n  }\n\n  return true;\n}\n\nfunction includedColumnsAreValid(properties, includeColumns) {\n  if (includeColumns === '*') {\n    return true;\n  }\n\n  if (!isArrayOfStrings(includeColumns)) {\n    throw new Error(\n      `\"includeColumns\" property needs to be an array of existing feature columns or \"*\"`\n    );\n  }\n\n  if (isArrayOfStrings(includeColumns)) {\n    for (const column of includeColumns) {\n      if (!properties.includes(column)) {\n        throw new Error('colums set in \"includeColumns\" should exist in picked feature');\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction isArrayOfStrings(value) {\n  return Array.isArray(value) && value.length && value.every(String);\n}\n","import { useSelector } from 'react-redux';\nimport { CartoLayer } from '@deck.gl/carto';\nimport { selectSourceById } from '@carto/react-redux';\nimport { useCartoLayerProps } from '@carto/react-api';\nimport htmlForFeature from 'utils/htmlForFeature';\n\nexport const POP_AGG_LAYER_ID = 'popAggLayer';\n\nexport default function PopAggLayer() {\n  const { popAggLayer } = useSelector((state) => state.carto.layers);\n  const source = useSelector((state) => selectSourceById(state, popAggLayer?.source));\n  const cartoLayerProps = useCartoLayerProps({ source });\n\n  if (popAggLayer && source) {\n    return new CartoLayer({\n      ...cartoLayerProps,\n      id: POP_AGG_LAYER_ID,\n      getFillColor: [241, 109, 122],\n      pointRadiusMinPixels: 2,\n      getLineColor: [255, 0, 0],\n      lineWidthMinPixels: 1,\n      pickable: true,\n      visible: false,\n      onHover: (info) => {\n        if (info?.object) {\n          info.object = {\n            html: htmlForFeature({ feature: info.object }),\n            style: {},\n          };\n        }\n      },\n    });\n  }\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { CartoLayer } from '@deck.gl/carto';\nimport { selectSourceById, updateLayer } from '@carto/react-redux';\nimport { useCartoLayerProps } from '@carto/react-api';\nimport htmlForFeature from 'utils/htmlForFeature';\nimport GL from '@luma.gl/constants';\n\nexport const POPULATION_LAYER_ID = 'populationLayer';\nconst layerConfig = {\n  title: 'Population',\n  visible: true,\n  legend: {},\n};\n\nexport default function PopulationLayer() {\n  const { populationLayer } = useSelector((state) => state.carto.layers);\n  const source = useSelector((state) => selectSourceById(state, populationLayer?.source));\n  const cartoLayerProps = useCartoLayerProps({ source });\n  const dispatch = useDispatch();\n\n  if (populationLayer && source) {\n    return new CartoLayer({\n      ...cartoLayerProps,\n      id: POPULATION_LAYER_ID,\n      getFillColor: [217, 219, 94],\n      pointRadiusMinPixels: 0.8,\n      getLineColor: [0, 0, 0],\n      lineWidthMinPixels: 1,\n      pickable: true,\n      parameters: {\n        blendFunc: [GL.SRC_ALPHA, GL.DST_ALPHA],\n        blendEquation: GL.FUNC_ADD,\n      },\n      visible: populationLayer.visible,\n      onDataLoad: (data) => {\n        dispatch(\n          updateLayer({\n            id: POPULATION_LAYER_ID,\n            layerAttributes: { ...layerConfig },\n          })\n        );\n        cartoLayerProps.onDataLoad(data);\n      },\n      onHover: (info) => {\n        if (info?.object) {\n          info.object = {\n            html: htmlForFeature({ feature: info.object }),\n            style: {},\n          };\n        }\n      },\n    });\n  }\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { CartoLayer } from '@deck.gl/carto';\nimport { selectSourceById, updateLayer } from '@carto/react-redux';\nimport { useCartoLayerProps } from '@carto/react-api';\nimport htmlForFeature from 'utils/htmlForFeature';\n\nexport const COUNTIES_LAYER_ID = 'countiesLayer';\n\nconst layerConfig = {\n  title: 'Counties',\n  visible: true,\n  legend: {},\n};\n\nexport default function CountiesLayer() {\n  const { countiesLayer } = useSelector((state) => state.carto.layers);\n  const source = useSelector((state) => selectSourceById(state, countiesLayer?.source));\n  const cartoLayerProps = useCartoLayerProps({ source });\n  const dispatch = useDispatch();\n\n  if (countiesLayer && source) {\n    return new CartoLayer({\n      ...cartoLayerProps,\n      id: COUNTIES_LAYER_ID,\n      getFillColor: [195, 199, 198, 0],\n      pointRadiusMinPixels: 1,\n      getLineColor: [195, 199, 198],\n      lineWidthMinPixels: 0.3,\n      pickable: true,\n      visible: countiesLayer.visible,\n      onDataLoad: (data) => {\n        dispatch(\n          updateLayer({\n            id: COUNTIES_LAYER_ID,\n            layerAttributes: { ...layerConfig },\n          })\n        );\n        cartoLayerProps.onDataLoad(data);\n      },\n      onHover: (info) => {\n        if (info?.object) {\n          info.object = {\n            html: htmlForFeature({ feature: info.object }),\n            style: {},\n          };\n        }\n      },\n    });\n  }\n}\n","import { MAP_TYPES } from '@deck.gl/carto';\n\nconst POP_AGG_SOURCE_ID = 'popAggSource';\n\n/***************\n -- popAgg layer was created from query:\n\nDROP TABLE IF EXISTS `cartodb-gcp-solutions-eng-team.tomas_data.usa_pop_agg_tileset`;\nCALL `carto-un`.carto.CREATE_POINT_AGGREGATION_TILESET(\n  R'''(\n    SELECT state, county, points as geom FROM `cartodb-gcp-solutions-eng-team.tomas_data.usa_pop` \n  )''',\n  '`cartodb-gcp-solutions-eng-team.tomas_data.usa_pop_agg_tileset`',\n  R'''\n    {\n      \"zoom_min\": 3,\n      \"zoom_max\": 8,\n      \"aggregation_type\": \"quadkey\",\n      \"aggregation_resolution\": 7,\n      \"aggregation_placement\": \"cell-centroid\",\n      \"properties\":{\n        \"aggregated_total\": {\n          \"formula\":\"count(*)\",\n          \"type\":\"Number\"\n        },\n        \"state\": {\n            \"formula\":\"APPROX_TOP_COUNT(state, 1)[OFFSET(0)].value\",\n            \"type\":\"String\"\n        },\n        \"county\": {\n            \"formula\":\"APPROX_TOP_COUNT(county, 1)[OFFSET(0)].value\",\n            \"type\":\"String\"\n        }\n      }\n    }\n  ''');\n ***************/\n\nconst source = {\n  id: POP_AGG_SOURCE_ID,\n  type: MAP_TYPES.TILESET,\n  connection: 'tehren',\n  data: `cartodb-gcp-solutions-eng-team.tomas_data.usa_pop_agg_tileset`,\n};\n\nexport default source;\n","import { MAP_TYPES } from '@deck.gl/carto';\n\nconst POPULATION_SOURCE_ID = 'populationSource';\n\n/****************\n -- population layer was created from query:\n\n  CREATE OR REPLACE TABLE `cartodb-gcp-solutions-eng-team.tomas_data.usa_pop` AS \n  WITH blocks AS (\n    SELECT \n      d.total_pop, \n      g.state_name AS state,\n      g.county_name AS county,\n      g.blockgroup_geom\n    FROM `bigquery-public-data.geo_census_blockgroups.us_blockgroups_national` AS g\n    INNER JOIN `bigquery-public-data.census_bureau_acs.blockgroup_2018_5yr` AS d ON g.geo_id = d.geo_id\n  ),\n  point_lists AS (\n    SELECT \n      state,\n      county,\n      `carto-un`.carto.ST_GENERATEPOINTS(blockgroup_geom, CAST(total_pop AS INT64)) AS points\n    FROM blocks\n  )\n\n****************/\n\nconst source = {\n  id: POPULATION_SOURCE_ID,\n  type: MAP_TYPES.TILESET,\n  connection: 'tehren',\n  data: `cartodb-gcp-solutions-eng-team.tomas_data.usa_pop_tileset`,\n};\n\nexport default source;\n","import { MAP_TYPES } from '@deck.gl/carto';\n\nconst COUNTIES_SOURCE_ID = 'countiesSource';\n\n/****************\n -- counties layer was created from query:\n  CREATE OR REPLACE TABLE `cartodb-gcp-solutions-eng-team.tomas_data.usa_counties` AS\n  SELECT \n    state_name AS state,\n    county_name AS county,\n    SUM(d.total_pop) AS pop,\n    ST_SIMPLIFY(ST_UNION_AGG(blockgroup_geom), 200) as geom\n  FROM `bigquery-public-data.geo_census_blockgroups.us_blockgroups_national` AS g\n  INNER JOIN `bigquery-public-data.census_bureau_acs.blockgroup_2018_5yr` AS d ON g.geo_id = d.geo_id\n  GROUP BY 1, 2\n ****************/\n\nconst source = {\n  id: COUNTIES_SOURCE_ID,\n  type: MAP_TYPES.TABLE,\n  connection: 'tehren',\n  data: `cartodb-gcp-solutions-eng-team.tomas_data.usa_counties`,\n};\n\nexport default source;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { addFilter, removeFilter } from '@carto/react-redux';\nimport { WrapperWidgetUI, CategoryWidgetUI, NoDataAlert } from '@carto/react-ui';\nimport { _FilterTypes as FilterTypes, AggregationTypes } from '@carto/react-core';\nimport { getCategories } from '@carto/react-widgets';\nimport { useSourceFilters } from '@carto/react-widgets';\nimport { selectAreFeaturesReadyForSource } from '@carto/react-redux/';\nimport { useWidgetFilterValues } from './useWidgetFilterValues';\n\nconst EMPTY_ARRAY = [];\n\n/**\n * Renders a <CustomCategoryWidget /> component\n * @param  {object} props\n * @param  {string} props.id - ID for the widget instance.\n * @param  {string} props.title - Title to show in the widget header.\n * @param  {string} props.dataSource - ID of the data source to get the data from.\n * @param  {string} props.column - Name of the data source's column to get the data from.\n * @param  {string} [props.operationColumn] - Name of the data source's column to operate with. If not defined it will default to the one defined in `column`.\n * @param  {string} props.operation - Operation to apply to the operationColumn. Must be one of those defined in `AggregationTypes` object.\n * @param  {Function} [props.formatter] - Function to format each value returned.\n * @param  {Object} [props.labels] - Overwrite category labels.\n * @param  {boolean} [props.animation] - Enable/disable widget animations on data updates. Enabled by default.\n * @param  {boolean} [props.filterable] - Enable/disable widget filtering capabilities. Enabled by default.\n * @param  {boolean} [props.searchable] - Enable/disable widget searching capabilities. Enabled by default.\n * @param  {Function} [props.onError] - Function to handle error messages from the widget.\n * @param  {Object} [props.wrapperProps] - Extra props to pass to [WrapperWidgetUI](https://storybook-react.carto.com/?path=/docs/widgets-wrapperwidgetui--default)\n * @param  {Object} [props.noDataAlertProps] - Extra props to pass to [NoDataAlert]()\n * @param {Array} [props.otherSources] - Extra sources to filter based on the main source.\n */\nfunction CustomCategoryWidget(props) {\n  const {\n    id,\n    title,\n    dataSource,\n    column,\n    operationColumn,\n    operation,\n    formatter,\n    labels,\n    animation,\n    filterable,\n    searchable,\n    onError,\n    wrapperProps,\n    noDataAlertProps,\n    otherSources,\n  } = props;\n  const dispatch = useDispatch();\n  const isSourceReady = useSelector((state) => {\n    const sources = [...otherSources.map((e) => e.id), dataSource];\n    const areSourcesReady = sources.map((e) => selectAreFeaturesReadyForSource(state, e));\n    return areSourcesReady.every((v) => v === true);\n  });\n\n  const [categoryData, setCategoryData] = useState([]);\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  const filters = useSourceFilters({ dataSource, id });\n  const selectedCategories =\n    useWidgetFilterValues({ dataSource, id, column, type: FilterTypes.IN }) ||\n    EMPTY_ARRAY;\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    if (isSourceReady) {\n      getCategories({\n        column,\n        operationColumn,\n        operation,\n        filters,\n        dataSource,\n      })\n        .then((data) => {\n          if (data) {\n            setIsLoading(false);\n            setCategoryData(data);\n          }\n        })\n        .catch((error) => {\n          setIsLoading(false);\n          if (onError) onError(error);\n        });\n    }\n  }, [\n    id,\n    column,\n    operationColumn,\n    operation,\n    filters,\n    dataSource,\n    setIsLoading,\n    onError,\n    isSourceReady,\n  ]);\n\n  const handleSelectedCategoriesChange = useCallback(\n    (categories) => {\n      if (categories && categories.length) {\n        dispatch(\n          addFilter({\n            id: dataSource,\n            column,\n            type: FilterTypes.IN,\n            values: categories,\n            owner: id,\n          })\n        );\n        otherSources.forEach((e) => {\n          dispatch(\n            addFilter({\n              id: e.id,\n              column: e.column,\n              type: FilterTypes.IN,\n              values: categories,\n              owner: id,\n            })\n          );\n        });\n      } else {\n        dispatch(\n          removeFilter({\n            id: dataSource,\n            column,\n          })\n        );\n        otherSources.forEach((e) => {\n          dispatch(\n            removeFilter({\n              id: e.id,\n              column: e.column,\n            })\n          );\n        });\n      }\n    },\n    [column, dataSource, id, dispatch]\n  );\n\n  return (\n    <WrapperWidgetUI title={title} isLoading={isLoading} {...wrapperProps}>\n      {categoryData.length || isLoading ? (\n        <CategoryWidgetUI\n          data={categoryData}\n          formatter={formatter}\n          labels={labels}\n          selectedCategories={selectedCategories}\n          onSelectedCategoriesChange={handleSelectedCategoriesChange}\n          animation={animation}\n          filterable={filterable}\n          searchable={searchable}\n        />\n      ) : (\n        <NoDataAlert {...noDataAlertProps} />\n      )}\n    </WrapperWidgetUI>\n  );\n}\n\nCustomCategoryWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  dataSource: PropTypes.string.isRequired,\n  column: PropTypes.string.isRequired,\n  operationColumn: PropTypes.string,\n  operation: PropTypes.oneOf(Object.values(AggregationTypes)).isRequired,\n  formatter: PropTypes.func,\n  labels: PropTypes.object,\n  animation: PropTypes.bool,\n  filterable: PropTypes.bool,\n  searchable: PropTypes.bool,\n  onError: PropTypes.func,\n  wrapperProps: PropTypes.object,\n  noDataAlertProps: PropTypes.object,\n};\n\nCustomCategoryWidget.defaultProps = {\n  labels: {},\n  animation: true,\n  filterable: true,\n  searchable: true,\n  wrapperProps: {},\n  noDataAlertProps: {},\n};\n\nexport default CustomCategoryWidget;\n","import { selectSourceById } from '@carto/react-redux/';\nimport { useSelector } from 'react-redux';\nimport { useMemo } from 'react';\n\n/**\n * Obtain widget's filter values.\n *\n * @param  {object} props\n * @param  {string} props.dataSource - ID of the source to get the filters from.\n * @param  {string} props.id - ID of the widget that applied the filter.\n * @param  {string} props.column - name of column of this widget.\n * @param  {string} props.type - type of filter\n */\nexport function useWidgetFilterValues({ dataSource, id, column, type }) {\n  const { filters } = useSelector((state) => selectSourceById(state, dataSource) || {});\n\n  return useMemo(() => {\n    const filter = filters?.[column]?.[type];\n    if (!filter || filter.owner !== id) {\n      return null;\n    }\n    return filter.values;\n  }, [filters, column, type, id]);\n}\n","import { useEffect } from 'react';\nimport popAggSource from 'data/sources/popAggSource';\nimport { POP_AGG_LAYER_ID } from 'components/layers/PopAggLayer';\nimport populationSource from 'data/sources/populationSource';\nimport { POPULATION_LAYER_ID } from 'components/layers/PopulationLayer';\nimport countiesSource from 'data/sources/countiesSource';\nimport { COUNTIES_LAYER_ID } from 'components/layers/CountiesLayer';\nimport { useDispatch } from 'react-redux';\nimport { addLayer, removeLayer, addSource, removeSource } from '@carto/react-redux';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid } from '@material-ui/core';\n\n//import { CategoryWidget } from '@carto/react-widgets';\nimport { AggregationTypes } from '@carto/react-core';\n\nimport CustomCategoryWidget from 'components/widgets/CustomCategoryWidget';\nimport { FormulaWidget } from '@carto/react-widgets';\n\nconst useStyles = makeStyles(() => ({\n  filters: {},\n}));\n\nexport default function Filters() {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n\n  useEffect(() => {\n    dispatch(addSource(populationSource));\n\n    dispatch(\n      addLayer({\n        id: POPULATION_LAYER_ID,\n        source: populationSource.id,\n      })\n    );\n\n    return () => {\n      dispatch(removeLayer(POPULATION_LAYER_ID));\n      dispatch(removeSource(populationSource.id));\n    };\n  }, [dispatch]);\n\n  useEffect(() => {\n    dispatch(addSource(countiesSource));\n\n    dispatch(\n      addLayer({\n        id: COUNTIES_LAYER_ID,\n        source: countiesSource.id,\n      })\n    );\n\n    return () => {\n      dispatch(removeLayer(COUNTIES_LAYER_ID));\n      dispatch(removeSource(countiesSource.id));\n    };\n  }, [dispatch]);\n\n  useEffect(() => {\n    dispatch(addSource(popAggSource));\n\n    dispatch(\n      addLayer({\n        id: POP_AGG_LAYER_ID,\n        source: popAggSource.id,\n      })\n    );\n\n    return () => {\n      dispatch(removeLayer(POP_AGG_LAYER_ID));\n      dispatch(removeSource(popAggSource.id));\n    };\n  }, [dispatch]);\n\n  // [hygen] Add useEffect\n  const CustomFormatter = (value) => {\n    const formatted =\n      value > 1e6\n        ? `${Math.round(value / 1e6, 2)} M`\n        : value > 1e3\n        ? `${Math.round(value / 1e3, 2)} k`\n        : `${value}`;\n    return formatted;\n  };\n  return (\n    <Grid container direction='column' className={classes.filters}>\n      <Grid item>\n        <FormulaWidget\n          id='totPop'\n          title='Total Population'\n          dataSource={popAggSource.id}\n          column='aggregated_total'\n          operation={AggregationTypes.SUM}\n          formatter={(v) => CustomFormatter(v)}\n          onError={console.error}\n        />\n        <CustomCategoryWidget\n          id='stateCategory'\n          title='State Name'\n          dataSource={countiesSource.id}\n          column='state'\n          operation={AggregationTypes.COUNT}\n          onError={console.error}\n          otherSources={[\n            { id: populationSource.id, column: 'state' },\n            { id: popAggSource.id, column: 'state' },\n          ]}\n        />\n        <CustomCategoryWidget\n          id='countyCategory'\n          title='County Name'\n          dataSource={countiesSource.id}\n          column='county'\n          operation={AggregationTypes.COUNT}\n          onError={console.error}\n          otherSources={[\n            { id: populationSource.id, column: 'county' },\n            { id: popAggSource.id, column: 'county' },\n          ]}\n        />\n      </Grid>\n    </Grid>\n  );\n}\n"],"sourceRoot":""}