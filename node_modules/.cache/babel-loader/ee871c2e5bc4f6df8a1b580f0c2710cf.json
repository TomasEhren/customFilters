{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nlet _Symbol$toStringTag, _Symbol$toStringTag2, _Symbol$toStringTag3, _Symbol$toStringTag4, _Symbol$toStringTag5, _Symbol$toStringTag6, _Symbol$toStringTag7, _Symbol$toStringTag8;\n\nimport { Type } from './enum';\nexport { Type } from './enum';\nexport class DataType {\n  static isNull(x) {\n    return x && x.typeId === Type.Null;\n  }\n\n  static isInt(x) {\n    return x && x.typeId === Type.Int;\n  }\n\n  static isFloat(x) {\n    return x && x.typeId === Type.Float;\n  }\n\n  static isBinary(x) {\n    return x && x.typeId === Type.Binary;\n  }\n\n  static isUtf8(x) {\n    return x && x.typeId === Type.Utf8;\n  }\n\n  static isBool(x) {\n    return x && x.typeId === Type.Bool;\n  }\n\n  static isDecimal(x) {\n    return x && x.typeId === Type.Decimal;\n  }\n\n  static isDate(x) {\n    return x && x.typeId === Type.Date;\n  }\n\n  static isTime(x) {\n    return x && x.typeId === Type.Time;\n  }\n\n  static isTimestamp(x) {\n    return x && x.typeId === Type.Timestamp;\n  }\n\n  static isInterval(x) {\n    return x && x.typeId === Type.Interval;\n  }\n\n  static isList(x) {\n    return x && x.typeId === Type.List;\n  }\n\n  static isStruct(x) {\n    return x && x.typeId === Type.Struct;\n  }\n\n  static isUnion(x) {\n    return x && x.typeId === Type.Union;\n  }\n\n  static isFixedSizeBinary(x) {\n    return x && x.typeId === Type.FixedSizeBinary;\n  }\n\n  static isFixedSizeList(x) {\n    return x && x.typeId === Type.FixedSizeList;\n  }\n\n  static isMap(x) {\n    return x && x.typeId === Type.Map;\n  }\n\n  static isDictionary(x) {\n    return x && x.typeId === Type.Dictionary;\n  }\n\n  get typeId() {\n    return Type.NONE;\n  }\n\n  compareTo(other) {\n    return this === other;\n  }\n\n}\nexport class Null extends DataType {\n  get typeId() {\n    return Type.Null;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Null';\n  }\n\n  toString() {\n    return 'Null';\n  }\n\n}\nexport class Bool extends DataType {\n  get typeId() {\n    return Type.Bool;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Bool';\n  }\n\n  toString() {\n    return 'Bool';\n  }\n\n}\n_Symbol$toStringTag = Symbol.toStringTag;\nexport class Int extends DataType {\n  constructor(isSigned, bitWidth) {\n    super();\n\n    _defineProperty(this, \"isSigned\", void 0);\n\n    _defineProperty(this, \"bitWidth\", void 0);\n\n    this.isSigned = isSigned;\n    this.bitWidth = bitWidth;\n  }\n\n  get typeId() {\n    return Type.Int;\n  }\n\n  get [_Symbol$toStringTag]() {\n    return 'Int';\n  }\n\n  toString() {\n    return \"\".concat(this.isSigned ? 'I' : 'Ui', \"nt\").concat(this.bitWidth);\n  }\n\n}\nexport class Int8 extends Int {\n  constructor() {\n    super(true, 8);\n  }\n\n}\nexport class Int16 extends Int {\n  constructor() {\n    super(true, 16);\n  }\n\n}\nexport class Int32 extends Int {\n  constructor() {\n    super(true, 32);\n  }\n\n}\nexport class Int64 extends Int {\n  constructor() {\n    super(true, 64);\n  }\n\n}\nexport class Uint8 extends Int {\n  constructor() {\n    super(false, 8);\n  }\n\n}\nexport class Uint16 extends Int {\n  constructor() {\n    super(false, 16);\n  }\n\n}\nexport class Uint32 extends Int {\n  constructor() {\n    super(false, 32);\n  }\n\n}\nexport class Uint64 extends Int {\n  constructor() {\n    super(false, 64);\n  }\n\n}\nconst Precision = {\n  HALF: 16,\n  SINGLE: 32,\n  DOUBLE: 64\n};\n_Symbol$toStringTag2 = Symbol.toStringTag;\nexport class Float extends DataType {\n  constructor(precision) {\n    super();\n\n    _defineProperty(this, \"precision\", void 0);\n\n    this.precision = precision;\n  }\n\n  get typeId() {\n    return Type.Float;\n  }\n\n  get [_Symbol$toStringTag2]() {\n    return 'Float';\n  }\n\n  toString() {\n    return \"Float\".concat(this.precision);\n  }\n\n}\nexport class Float16 extends Float {\n  constructor() {\n    super(Precision.HALF);\n  }\n\n}\nexport class Float32 extends Float {\n  constructor() {\n    super(Precision.SINGLE);\n  }\n\n}\nexport class Float64 extends Float {\n  constructor() {\n    super(Precision.DOUBLE);\n  }\n\n}\nexport class Binary extends DataType {\n  constructor() {\n    super();\n  }\n\n  get typeId() {\n    return Type.Binary;\n  }\n\n  toString() {\n    return 'Binary';\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Binary';\n  }\n\n}\nexport class Utf8 extends DataType {\n  get typeId() {\n    return Type.Utf8;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Utf8';\n  }\n\n  toString() {\n    return 'Utf8';\n  }\n\n}\nconst DateUnit = {\n  DAY: 0,\n  MILLISECOND: 1\n};\n_Symbol$toStringTag3 = Symbol.toStringTag;\nexport class Date extends DataType {\n  constructor(unit) {\n    super();\n\n    _defineProperty(this, \"unit\", void 0);\n\n    this.unit = unit;\n  }\n\n  get typeId() {\n    return Type.Date;\n  }\n\n  get [_Symbol$toStringTag3]() {\n    return 'Date';\n  }\n\n  toString() {\n    return \"Date\".concat((this.unit + 1) * 32, \"<\").concat(DateUnit[this.unit], \">\");\n  }\n\n}\nexport class DateDay extends Date {\n  constructor() {\n    super(DateUnit.DAY);\n  }\n\n}\nexport class DateMillisecond extends Date {\n  constructor() {\n    super(DateUnit.MILLISECOND);\n  }\n\n}\nconst TimeUnit = {\n  SECOND: 1,\n  MILLISECOND: 1e3,\n  MICROSECOND: 1e6,\n  NANOSECOND: 1e9\n};\n_Symbol$toStringTag4 = Symbol.toStringTag;\nexport class Time extends DataType {\n  constructor(unit, bitWidth) {\n    super();\n\n    _defineProperty(this, \"unit\", void 0);\n\n    _defineProperty(this, \"bitWidth\", void 0);\n\n    this.unit = unit;\n    this.bitWidth = bitWidth;\n  }\n\n  get typeId() {\n    return Type.Time;\n  }\n\n  toString() {\n    return \"Time\".concat(this.bitWidth, \"<\").concat(TimeUnit[this.unit], \">\");\n  }\n\n  get [_Symbol$toStringTag4]() {\n    return 'Time';\n  }\n\n}\nexport class TimeSecond extends Time {\n  constructor() {\n    super(TimeUnit.SECOND, 32);\n  }\n\n}\nexport class TimeMillisecond extends Time {\n  constructor() {\n    super(TimeUnit.MILLISECOND, 32);\n  }\n\n}\n_Symbol$toStringTag5 = Symbol.toStringTag;\nexport class Timestamp extends DataType {\n  constructor(unit) {\n    let timezone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    super();\n\n    _defineProperty(this, \"unit\", void 0);\n\n    _defineProperty(this, \"timezone\", void 0);\n\n    this.unit = unit;\n    this.timezone = timezone;\n  }\n\n  get typeId() {\n    return Type.Timestamp;\n  }\n\n  get [_Symbol$toStringTag5]() {\n    return 'Timestamp';\n  }\n\n  toString() {\n    return \"Timestamp<\".concat(TimeUnit[this.unit]).concat(this.timezone ? \", \".concat(this.timezone) : '', \">\");\n  }\n\n}\nexport class TimestampSecond extends Timestamp {\n  constructor() {\n    let timezone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    super(TimeUnit.SECOND, timezone);\n  }\n\n}\nexport class TimestampMillisecond extends Timestamp {\n  constructor() {\n    let timezone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    super(TimeUnit.MILLISECOND, timezone);\n  }\n\n}\nexport class TimestampMicrosecond extends Timestamp {\n  constructor() {\n    let timezone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    super(TimeUnit.MICROSECOND, timezone);\n  }\n\n}\nexport class TimestampNanosecond extends Timestamp {\n  constructor() {\n    let timezone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    super(TimeUnit.NANOSECOND, timezone);\n  }\n\n}\nconst IntervalUnit = {\n  DAY_TIME: 0,\n  YEAR_MONTH: 1\n};\n_Symbol$toStringTag6 = Symbol.toStringTag;\nexport class Interval extends DataType {\n  constructor(unit) {\n    super();\n\n    _defineProperty(this, \"unit\", void 0);\n\n    this.unit = unit;\n  }\n\n  get typeId() {\n    return Type.Interval;\n  }\n\n  get [_Symbol$toStringTag6]() {\n    return 'Interval';\n  }\n\n  toString() {\n    return \"Interval<\".concat(IntervalUnit[this.unit], \">\");\n  }\n\n}\nexport class IntervalDayTime extends Interval {\n  constructor() {\n    super(IntervalUnit.DAY_TIME);\n  }\n\n}\nexport class IntervalYearMonth extends Interval {\n  constructor() {\n    super(IntervalUnit.YEAR_MONTH);\n  }\n\n}\n_Symbol$toStringTag7 = Symbol.toStringTag;\nexport class FixedSizeList extends DataType {\n  constructor(listSize, child) {\n    super();\n\n    _defineProperty(this, \"listSize\", void 0);\n\n    _defineProperty(this, \"children\", void 0);\n\n    this.listSize = listSize;\n    this.children = [child];\n  }\n\n  get typeId() {\n    return Type.FixedSizeList;\n  }\n\n  get valueType() {\n    return this.children[0].type;\n  }\n\n  get valueField() {\n    return this.children[0];\n  }\n\n  get [_Symbol$toStringTag7]() {\n    return 'FixedSizeList';\n  }\n\n  toString() {\n    return \"FixedSizeList[\".concat(this.listSize, \"]<\").concat(this.valueType, \">\");\n  }\n\n}\n_Symbol$toStringTag8 = Symbol.toStringTag;\nexport class Struct extends DataType {\n  constructor(children) {\n    super();\n\n    _defineProperty(this, \"children\", void 0);\n\n    this.children = children;\n  }\n\n  get typeId() {\n    return Type.Struct;\n  }\n\n  toString() {\n    return \"Struct<{\".concat(this.children.map(f => \"\".concat(f.name, \":\").concat(f.type)).join(', '), \"}>\");\n  }\n\n  get [_Symbol$toStringTag8]() {\n    return 'Struct';\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Type","DataType","isNull","x","typeId","Null","isInt","Int","isFloat","Float","isBinary","Binary","isUtf8","Utf8","isBool","Bool","isDecimal","Decimal","isDate","Date","isTime","Time","isTimestamp","Timestamp","isInterval","Interval","isList","List","isStruct","Struct","isUnion","Union","isFixedSizeBinary","FixedSizeBinary","isFixedSizeList","FixedSizeList","isMap","Map","isDictionary","Dictionary","NONE","compareTo","other","Symbol","toStringTag","toString","constructor","isSigned","bitWidth","_defineProperty","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint32","Uint64","Precision","HALF","SINGLE","DOUBLE","precision","Float16","Float32","Float64","DateUnit","DAY","MILLISECOND","unit","DateDay","DateMillisecond","TimeUnit","SECOND","MICROSECOND","NANOSECOND","TimeSecond","TimeMillisecond","timezone","TimestampSecond","TimestampMillisecond","TimestampMicrosecond","TimestampNanosecond","IntervalUnit","DAY_TIME","YEAR_MONTH","IntervalDayTime","IntervalYearMonth","listSize","child","children","valueType","type","valueField","map","f","name","join"],"sources":["../../../../../src/lib/schema/impl/type.ts"],"sourcesContent":["// This code is adapted from ArrowJS https://github.com/apache/arrow\n// under Apache license http://www.apache.org/licenses/LICENSE-2.0\n\nimport {Type} from './enum';\n\nimport Field from './field';\n\nexport {Type} from './enum';\n\nexport type TypedIntArray =\n  | Int8Array\n  | Uint8Array\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Int32Array\n  | Uint32Array\n  | Uint8ClampedArray;\n\nexport type TypedFloatArray = Float32Array | Float64Array;\n\nexport type TypedArray = TypedIntArray | TypedFloatArray;\n\nexport type AnyArrayType = Array<any> | TypedIntArray | TypedFloatArray;\n\nexport class DataType {\n  static isNull(x: any): boolean {\n    return x && x.typeId === Type.Null;\n  }\n  static isInt(x: any): boolean {\n    return x && x.typeId === Type.Int;\n  }\n  static isFloat(x: any): boolean {\n    return x && x.typeId === Type.Float;\n  }\n  static isBinary(x: any): boolean {\n    return x && x.typeId === Type.Binary;\n  }\n  static isUtf8(x: any): boolean {\n    return x && x.typeId === Type.Utf8;\n  }\n  static isBool(x: any): boolean {\n    return x && x.typeId === Type.Bool;\n  }\n  static isDecimal(x: any): boolean {\n    return x && x.typeId === Type.Decimal;\n  }\n  static isDate(x: any): boolean {\n    return x && x.typeId === Type.Date;\n  }\n  static isTime(x: any): boolean {\n    return x && x.typeId === Type.Time;\n  }\n  static isTimestamp(x: any): boolean {\n    return x && x.typeId === Type.Timestamp;\n  }\n  static isInterval(x: any): boolean {\n    return x && x.typeId === Type.Interval;\n  }\n  static isList(x: any): boolean {\n    return x && x.typeId === Type.List;\n  }\n  static isStruct(x: any): boolean {\n    return x && x.typeId === Type.Struct;\n  }\n  static isUnion(x: any): boolean {\n    return x && x.typeId === Type.Union;\n  }\n  static isFixedSizeBinary(x: any): boolean {\n    return x && x.typeId === Type.FixedSizeBinary;\n  }\n  static isFixedSizeList(x: any): boolean {\n    return x && x.typeId === Type.FixedSizeList;\n  }\n  static isMap(x: any): boolean {\n    return x && x.typeId === Type.Map;\n  }\n  static isDictionary(x: any): boolean {\n    return x && x.typeId === Type.Dictionary;\n  }\n\n  get typeId(): Type {\n    return Type.NONE;\n  }\n\n  // get ArrayType(): AnyArrayType {\n  //   return Int8Array;\n  // }\n\n  // get ArrayType() { return Array; }\n  compareTo(other: DataType): boolean {\n    // TODO\n    return this === other; // comparer.visit(this, other);\n  }\n}\n\n// NULL\n\nexport class Null extends DataType {\n  get typeId(): Type {\n    return Type.Null;\n  }\n  get [Symbol.toStringTag](): string {\n    return 'Null';\n  }\n  toString(): string {\n    return 'Null';\n  }\n}\n\n// BOOLEANS\n\nexport class Bool extends DataType {\n  get typeId(): Type {\n    return Type.Bool;\n  }\n  // get ArrayType() {\n  //   return Uint8Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Bool';\n  }\n  toString(): string {\n    return 'Bool';\n  }\n}\n\n// INTS\n\nexport class Int extends DataType {\n  readonly isSigned: boolean;\n  readonly bitWidth: number;\n  constructor(isSigned, bitWidth) {\n    super();\n    this.isSigned = isSigned;\n    this.bitWidth = bitWidth;\n  }\n  get typeId(): Type {\n    return Type.Int;\n  }\n  // get ArrayType() {\n  //   switch (this.bitWidth) {\n  //     case 8:\n  //       return this.isSigned ? Int8Array : Uint8Array;\n  //     case 16:\n  //       return this.isSigned ? Int16Array : Uint16Array;\n  //     case 32:\n  //       return this.isSigned ? Int32Array : Uint32Array;\n  //     case 64:\n  //       return this.isSigned ? Int32Array : Uint32Array;\n  //     default:\n  //       throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n  //   }\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Int';\n  }\n  toString(): string {\n    return `${this.isSigned ? 'I' : 'Ui'}nt${this.bitWidth}`;\n  }\n}\n\nexport class Int8 extends Int {\n  constructor() {\n    super(true, 8);\n  }\n}\nexport class Int16 extends Int {\n  constructor() {\n    super(true, 16);\n  }\n}\nexport class Int32 extends Int {\n  constructor() {\n    super(true, 32);\n  }\n}\nexport class Int64 extends Int {\n  constructor() {\n    super(true, 64);\n  }\n}\nexport class Uint8 extends Int {\n  constructor() {\n    super(false, 8);\n  }\n}\nexport class Uint16 extends Int {\n  constructor() {\n    super(false, 16);\n  }\n}\nexport class Uint32 extends Int {\n  constructor() {\n    super(false, 32);\n  }\n}\nexport class Uint64 extends Int {\n  constructor() {\n    super(false, 64);\n  }\n}\n\n// FLOATS\n\nconst Precision = {\n  HALF: 16,\n  SINGLE: 32,\n  DOUBLE: 64\n};\n\nexport class Float extends DataType {\n  readonly precision: number;\n  constructor(precision) {\n    super();\n    this.precision = precision;\n  }\n  get typeId(): Type {\n    return Type.Float;\n  }\n  // get ArrayType() {\n  //   switch (this.precision) {\n  //     case Precision.HALF:\n  //       return Uint16Array;\n  //     case Precision.SINGLE:\n  //       return Float32Array;\n  //     case Precision.DOUBLE:\n  //       return Float64Array;\n  //     default:\n  //       throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n  //   }\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Float';\n  }\n  toString(): string {\n    return `Float${this.precision}`;\n  }\n}\n\nexport class Float16 extends Float {\n  constructor() {\n    super(Precision.HALF);\n  }\n}\nexport class Float32 extends Float {\n  constructor() {\n    super(Precision.SINGLE);\n  }\n}\nexport class Float64 extends Float {\n  constructor() {\n    super(Precision.DOUBLE);\n  }\n}\n\nexport class Binary extends DataType {\n  constructor() {\n    super();\n  }\n  get typeId() {\n    return Type.Binary;\n  }\n  toString() {\n    return 'Binary';\n  }\n  get [Symbol.toStringTag]() {\n    return 'Binary';\n  }\n}\n\n// STRINGS\n\nexport class Utf8 extends DataType {\n  get typeId(): Type {\n    return Type.Utf8;\n  }\n  // get ArrayType() {\n  //   return Uint8Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Utf8';\n  }\n  toString(): string {\n    return 'Utf8';\n  }\n}\n\n// DATES, TIMES AND INTERVALS\n\nconst DateUnit = {\n  DAY: 0,\n  MILLISECOND: 1\n};\n\nexport class Date extends DataType {\n  readonly unit: number;\n  constructor(unit) {\n    super();\n    this.unit = unit;\n  }\n  get typeId(): Type {\n    return Type.Date;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Date';\n  }\n  toString(): string {\n    return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`;\n  }\n}\n\nexport class DateDay extends Date {\n  constructor() {\n    super(DateUnit.DAY);\n  }\n}\nexport class DateMillisecond extends Date {\n  constructor() {\n    super(DateUnit.MILLISECOND);\n  }\n}\n\nconst TimeUnit = {\n  SECOND: 1,\n  MILLISECOND: 1e3,\n  MICROSECOND: 1e6,\n  NANOSECOND: 1e9\n};\n\nexport class Time extends DataType {\n  readonly unit: any;\n  readonly bitWidth: number;\n\n  constructor(unit: any, bitWidth: number) {\n    super();\n    this.unit = unit;\n    this.bitWidth = bitWidth;\n  }\n  get typeId(): Type {\n    return Type.Time;\n  }\n  toString(): string {\n    return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`;\n  }\n  get [Symbol.toStringTag](): string {\n    return 'Time';\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n}\n\nexport class TimeSecond extends Time {\n  constructor() {\n    super(TimeUnit.SECOND, 32);\n  }\n}\nexport class TimeMillisecond extends Time {\n  constructor() {\n    super(TimeUnit.MILLISECOND, 32);\n  }\n}\n// export class TimeMicrosecond extends Time { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n// export class TimeNanosecond extends Time { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\nexport class Timestamp extends DataType {\n  readonly unit: any;\n  readonly timezone: any;\n\n  constructor(unit: any, timezone = null) {\n    super();\n    this.unit = unit;\n    this.timezone = timezone;\n  }\n  get typeId(): Type {\n    return Type.Timestamp;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Timestamp';\n  }\n  toString(): string {\n    return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ''}>`;\n  }\n}\n\nexport class TimestampSecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.SECOND, timezone);\n  }\n}\nexport class TimestampMillisecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.MILLISECOND, timezone);\n  }\n}\nexport class TimestampMicrosecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.MICROSECOND, timezone);\n  }\n}\nexport class TimestampNanosecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.NANOSECOND, timezone);\n  }\n}\n\nconst IntervalUnit = {\n  DAY_TIME: 0,\n  YEAR_MONTH: 1\n};\n\nexport class Interval extends DataType {\n  readonly unit: number;\n  constructor(unit: number) {\n    super();\n    this.unit = unit;\n  }\n  get typeId(): Type {\n    return Type.Interval;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Interval';\n  }\n  toString(): string {\n    return `Interval<${IntervalUnit[this.unit]}>`;\n  }\n}\n\nexport class IntervalDayTime extends Interval {\n  constructor() {\n    super(IntervalUnit.DAY_TIME);\n  }\n}\nexport class IntervalYearMonth extends Interval {\n  constructor() {\n    super(IntervalUnit.YEAR_MONTH);\n  }\n}\n\nexport class FixedSizeList extends DataType {\n  readonly listSize: number;\n  readonly children: Field[];\n\n  constructor(listSize: number, child: Field) {\n    super();\n    this.listSize = listSize;\n    this.children = [child];\n  }\n  get typeId(): Type {\n    return Type.FixedSizeList;\n  }\n  get valueType() {\n    return this.children[0].type;\n  }\n  get valueField() {\n    return this.children[0];\n  }\n  // get ArrayType() {\n  //   return this.valueType.ArrayType;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'FixedSizeList';\n  }\n  toString(): string {\n    return `FixedSizeList[${this.listSize}]<${this.valueType}>`;\n  }\n}\n\nexport class Struct extends DataType {\n  public readonly children: Field[];\n\n  constructor(children: Field[]) {\n    super();\n    this.children = children;\n  }\n\n  public get typeId() {\n    return Type.Struct;\n  }\n  public toString() {\n    return `Struct<{${this.children.map((f) => `${f.name}:${f.type}`).join(', ')}}>`;\n  }\n  get [Symbol.toStringTag](): string {\n    return 'Struct';\n  }\n}\n"]},"metadata":{},"sourceType":"module"}