{"ast":null,"code":"import _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { assert, validateWorkerVersion } from '@loaders.gl/worker-utils';\nimport { parseWithWorker, canParseWithWorker } from '@loaders.gl/loader-utils';\nimport { isLoaderObject } from '../loader-utils/normalize-loader';\nimport { normalizeOptions } from '../loader-utils/option-utils';\nimport { getArrayBufferOrStringFromData } from '../loader-utils/get-data';\nimport { getLoaderContext, getLoadersFromContext } from '../loader-utils/loader-context';\nimport { getResourceUrlAndType } from '../utils/resource-utils';\nimport { selectLoader } from './select-loader';\nexport function parse(_x, _x2, _x3, _x4) {\n  return _parse.apply(this, arguments);\n}\n\nfunction _parse() {\n  _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, loaders, options, context) {\n    var _getResourceUrlAndTyp, url, typedLoaders, candidateLoaders, loader;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            assert(!context || typeof context === 'object');\n\n            if (loaders && !Array.isArray(loaders) && !isLoaderObject(loaders)) {\n              context = undefined;\n              options = loaders;\n              loaders = undefined;\n            }\n\n            _context.next = 4;\n            return data;\n\n          case 4:\n            data = _context.sent;\n            options = options || {};\n            _getResourceUrlAndTyp = getResourceUrlAndType(data), url = _getResourceUrlAndTyp.url;\n            typedLoaders = loaders;\n            candidateLoaders = getLoadersFromContext(typedLoaders, context);\n            _context.next = 11;\n            return selectLoader(data, candidateLoaders, options);\n\n          case 11:\n            loader = _context.sent;\n\n            if (loader) {\n              _context.next = 14;\n              break;\n            }\n\n            return _context.abrupt(\"return\", null);\n\n          case 14:\n            options = normalizeOptions(options, loader, candidateLoaders, url);\n            context = getLoaderContext({\n              url: url,\n              parse: parse,\n              loaders: candidateLoaders\n            }, options, context);\n            _context.next = 18;\n            return parseWithLoader(loader, data, options, context);\n\n          case 18:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parse.apply(this, arguments);\n}\n\nfunction parseWithLoader(_x5, _x6, _x7, _x8) {\n  return _parseWithLoader.apply(this, arguments);\n}\n\nfunction _parseWithLoader() {\n  _parseWithLoader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(loader, data, options, context) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            validateWorkerVersion(loader);\n            _context2.next = 3;\n            return getArrayBufferOrStringFromData(data, loader, options);\n\n          case 3:\n            data = _context2.sent;\n\n            if (!(loader.parseTextSync && typeof data === 'string')) {\n              _context2.next = 7;\n              break;\n            }\n\n            options.dataType = 'text';\n            return _context2.abrupt(\"return\", loader.parseTextSync(data, options, context, loader));\n\n          case 7:\n            if (!canParseWithWorker(loader, options)) {\n              _context2.next = 11;\n              break;\n            }\n\n            _context2.next = 10;\n            return parseWithWorker(loader, data, options, context, parse);\n\n          case 10:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 11:\n            if (!(loader.parseText && typeof data === 'string')) {\n              _context2.next = 15;\n              break;\n            }\n\n            _context2.next = 14;\n            return loader.parseText(data, options, context, loader);\n\n          case 14:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 15:\n            if (!loader.parse) {\n              _context2.next = 19;\n              break;\n            }\n\n            _context2.next = 18;\n            return loader.parse(data, options, context, loader);\n\n          case 18:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 19:\n            assert(!loader.parseSync);\n            throw new Error(\"\".concat(loader.id, \" loader - no parser found and worker is disabled\"));\n\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _parseWithLoader.apply(this, arguments);\n}","map":{"version":3,"mappings":"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","names":["assert","validateWorkerVersion","parseWithWorker","canParseWithWorker","isLoaderObject","normalizeOptions","getArrayBufferOrStringFromData","getLoaderContext","getLoadersFromContext","getResourceUrlAndType","selectLoader","parse","data","loaders","options","context","Array","isArray","undefined","url","typedLoaders","candidateLoaders","loader","parseWithLoader","parseTextSync","dataType","parseText","parseSync","Error","id"],"sources":["../../../../src/lib/api/parse.ts"],"sourcesContent":["import type {DataType, Loader, LoaderContext, LoaderOptions} from '@loaders.gl/loader-utils';\nimport {assert, validateWorkerVersion} from '@loaders.gl/worker-utils';\nimport {parseWithWorker, canParseWithWorker} from '@loaders.gl/loader-utils';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {normalizeOptions} from '../loader-utils/option-utils';\nimport {getArrayBufferOrStringFromData} from '../loader-utils/get-data';\nimport {getLoaderContext, getLoadersFromContext} from '../loader-utils/loader-context';\nimport {getResourceUrlAndType} from '../utils/resource-utils';\nimport {selectLoader} from './select-loader';\n\n/**\n * Parses `data` using a specified loader\n * @param data\n * @param loaders\n * @param options\n * @param context\n */\nexport async function parse(\n  data: DataType | Promise<DataType>,\n  loaders?: Loader | Loader[] | LoaderOptions,\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<any> {\n  assert(!context || typeof context === 'object'); // parse no longer accepts final url\n\n  // Signature: parse(data, options, context | url)\n  // Uses registered loaders\n  if (loaders && !Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined; // context not supported in short signature\n    options = loaders as LoaderOptions;\n    loaders = undefined;\n  }\n\n  data = await data; // Resolve any promise\n  options = options || {};\n\n  // Extract a url for auto detection\n  const {url} = getResourceUrlAndType(data);\n\n  // Chooses a loader (and normalizes it)\n  // Also use any loaders in the context, new loaders take priority\n  const typedLoaders = loaders as Loader | Loader[] | undefined;\n  const candidateLoaders = getLoadersFromContext(typedLoaders, context);\n  // todo hacky type cast\n  const loader = await selectLoader(data as ArrayBuffer, candidateLoaders, options);\n  // Note: if no loader was found, if so just return null\n  if (!loader) {\n    return null;\n  }\n\n  // Normalize options\n  options = normalizeOptions(options, loader, candidateLoaders, url);\n\n  // Get a context (if already present, will be unchanged)\n  context = getLoaderContext({url, parse, loaders: candidateLoaders}, options, context);\n\n  return await parseWithLoader(loader, data, options, context);\n}\n\n// TODO: support progress and abort\n// TODO - should accept loader.parseAsyncIterator and concatenate.\nasync function parseWithLoader(loader, data, options, context) {\n  validateWorkerVersion(loader);\n\n  data = await getArrayBufferOrStringFromData(data, loader, options);\n\n  // First check for synchronous text parser, wrap results in promises\n  if (loader.parseTextSync && typeof data === 'string') {\n    options.dataType = 'text';\n    return loader.parseTextSync(data, options, context, loader);\n  }\n\n  // If we have a workerUrl and the loader can parse the given options efficiently in a worker\n  if (canParseWithWorker(loader, options)) {\n    return await parseWithWorker(loader, data, options, context, parse);\n  }\n\n  // Check for asynchronous parser\n  if (loader.parseText && typeof data === 'string') {\n    return await loader.parseText(data, options, context, loader);\n  }\n\n  if (loader.parse) {\n    return await loader.parse(data, options, context, loader);\n  }\n\n  // This should not happen, all sync loaders should also offer `parse` function\n  assert(!loader.parseSync);\n\n  // TBD - If asynchronous parser not available, return null\n  throw new Error(`${loader.id} loader - no parser found and worker is disabled`);\n}\n"]},"metadata":{},"sourceType":"module"}