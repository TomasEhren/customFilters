{"ast":null,"code":"import { useSelector } from 'react-redux';\nimport { CartoLayer } from '@deck.gl/carto';\nimport { selectSourceById } from '@carto/react-redux';\nimport { useCartoLayerProps } from '@carto/react-api';\nimport htmlForFeature from 'utils/htmlForFeature';\nexport const POPULATION_LAYER_ID = 'populationLayer';\nexport default function PopulationLayer() {\n  const {\n    populationLayer\n  } = useSelector(state => state.carto.layers);\n  const source = useSelector(state => selectSourceById(state, populationLayer === null || populationLayer === void 0 ? void 0 : populationLayer.source));\n  const cartoLayerProps = useCartoLayerProps({\n    source\n  });\n\n  if (populationLayer && source) {\n    return new CartoLayer({ ...cartoLayerProps,\n      id: POPULATION_LAYER_ID,\n      getFillColor: [241, 109, 122],\n      pointRadiusMinPixels: 2,\n      getLineColor: [255, 0, 0],\n      lineWidthMinPixels: 1,\n      pickable: true,\n      onHover: info => {\n        if (info !== null && info !== void 0 && info.object) {\n          info.object = {\n            html: htmlForFeature({\n              feature: info.object\n            }),\n            style: {}\n          };\n        }\n      }\n    });\n  }\n}","map":{"version":3,"names":["useSelector","CartoLayer","selectSourceById","useCartoLayerProps","htmlForFeature","POPULATION_LAYER_ID","PopulationLayer","populationLayer","state","carto","layers","source","cartoLayerProps","id","getFillColor","pointRadiusMinPixels","getLineColor","lineWidthMinPixels","pickable","onHover","info","object","html","feature","style"],"sources":["/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/src/components/layers/PopulationLayer.js"],"sourcesContent":["import { useSelector } from 'react-redux';\nimport { CartoLayer } from '@deck.gl/carto';\nimport { selectSourceById } from '@carto/react-redux';\nimport { useCartoLayerProps } from '@carto/react-api';\nimport htmlForFeature from 'utils/htmlForFeature';\n\nexport const POPULATION_LAYER_ID = 'populationLayer';\n\nexport default function PopulationLayer() {\n  const { populationLayer } = useSelector((state) => state.carto.layers);\n  const source = useSelector((state) => selectSourceById(state, populationLayer?.source));\n  const cartoLayerProps = useCartoLayerProps({ source });\n\n  if (populationLayer && source) {\n    return new CartoLayer({\n      ...cartoLayerProps,\n      id: POPULATION_LAYER_ID,\n      getFillColor: [241, 109, 122],\n      pointRadiusMinPixels: 2,\n      getLineColor: [255, 0, 0],\n      lineWidthMinPixels: 1,\n      pickable: true,\n      onHover: (info) => {\n        if (info?.object) {\n          info.object = {\n            html: htmlForFeature({ feature: info.object }),\n            style: {},\n          };\n        }\n      },\n    });\n  }\n}\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AAEA,OAAO,MAAMC,mBAAmB,GAAG,iBAA5B;AAEP,eAAe,SAASC,eAAT,GAA2B;EACxC,MAAM;IAAEC;EAAF,IAAsBP,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYC,MAAxB,CAAvC;EACA,MAAMC,MAAM,GAAGX,WAAW,CAAEQ,KAAD,IAAWN,gBAAgB,CAACM,KAAD,EAAQD,eAAR,aAAQA,eAAR,uBAAQA,eAAe,CAAEI,MAAzB,CAA5B,CAA1B;EACA,MAAMC,eAAe,GAAGT,kBAAkB,CAAC;IAAEQ;EAAF,CAAD,CAA1C;;EAEA,IAAIJ,eAAe,IAAII,MAAvB,EAA+B;IAC7B,OAAO,IAAIV,UAAJ,CAAe,EACpB,GAAGW,eADiB;MAEpBC,EAAE,EAAER,mBAFgB;MAGpBS,YAAY,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAHM;MAIpBC,oBAAoB,EAAE,CAJF;MAKpBC,YAAY,EAAE,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT,CALM;MAMpBC,kBAAkB,EAAE,CANA;MAOpBC,QAAQ,EAAE,IAPU;MAQpBC,OAAO,EAAGC,IAAD,IAAU;QACjB,IAAIA,IAAJ,aAAIA,IAAJ,eAAIA,IAAI,CAAEC,MAAV,EAAkB;UAChBD,IAAI,CAACC,MAAL,GAAc;YACZC,IAAI,EAAElB,cAAc,CAAC;cAAEmB,OAAO,EAAEH,IAAI,CAACC;YAAhB,CAAD,CADR;YAEZG,KAAK,EAAE;UAFK,CAAd;QAID;MACF;IAfmB,CAAf,CAAP;EAiBD;AACF"},"metadata":{},"sourceType":"module"}