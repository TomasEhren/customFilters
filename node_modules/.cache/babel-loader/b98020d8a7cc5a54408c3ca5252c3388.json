{"ast":null,"code":"import { assert } from '../env-utils/assert';\nvar workerURLCache = new Map();\nexport function getLoadableWorkerURL(props) {\n  assert(props.source && !props.url || !props.source && props.url);\n  var workerURL = workerURLCache.get(props.source || props.url);\n\n  if (!workerURL) {\n    if (props.url) {\n      workerURL = getLoadableWorkerURLFromURL(props.url);\n      workerURLCache.set(props.url, workerURL);\n    }\n\n    if (props.source) {\n      workerURL = getLoadableWorkerURLFromSource(props.source);\n      workerURLCache.set(props.source, workerURL);\n    }\n  }\n\n  assert(workerURL);\n  return workerURL;\n}\n\nfunction getLoadableWorkerURLFromURL(url) {\n  if (!url.startsWith('http')) {\n    return url;\n  }\n\n  var workerSource = buildScriptSource(url);\n  return getLoadableWorkerURLFromSource(workerSource);\n}\n\nfunction getLoadableWorkerURLFromSource(workerSource) {\n  var blob = new Blob([workerSource], {\n    type: 'application/javascript'\n  });\n  return URL.createObjectURL(blob);\n}\n\nfunction buildScriptSource(workerUrl) {\n  return \"try {\\n  importScripts('\".concat(workerUrl, \"');\\n} catch (error) {\\n  console.error(error);\\n  throw error;\\n}\");\n}","map":{"version":3,"mappings":"AAAA,SAAQA,MAAR,QAAqB,qBAArB;AAEA,IAAMC,cAAc,GAAG,IAAIC,GAAJ,EAAvB;AAWA,OAAO,SAASC,oBAAT,CAA8BC,KAA9B,EAAsE;EAC3EJ,MAAM,CAAEI,KAAK,CAACC,MAAND,IAAgB,CAACA,KAAK,CAACE,GAAvBF,IAAgC,CAACA,KAAK,CAACC,MAAP,IAAiBD,KAAK,CAACE,GAAzD,CAANN;EAEA,IAAIO,SAAS,GAAGN,cAAc,CAACO,GAAfP,CAAmBG,KAAK,CAACC,MAAND,IAAgBA,KAAK,CAACE,GAAzCL,CAAhB;;EACA,IAAI,CAACM,SAAL,EAAgB;IAEd,IAAIH,KAAK,CAACE,GAAV,EAAe;MACbC,SAAS,GAAGE,2BAA2B,CAACL,KAAK,CAACE,GAAP,CAAvCC;MACAN,cAAc,CAACS,GAAfT,CAAmBG,KAAK,CAACE,GAAzBL,EAA8BM,SAA9BN;IACD;;IAED,IAAIG,KAAK,CAACC,MAAV,EAAkB;MAChBE,SAAS,GAAGI,8BAA8B,CAACP,KAAK,CAACC,MAAP,CAA1CE;MACAN,cAAc,CAACS,GAAfT,CAAmBG,KAAK,CAACC,MAAzBJ,EAAiCM,SAAjCN;IACD;EACF;;EAEDD,MAAM,CAACO,SAAD,CAANP;EACA,OAAOO,SAAP;AACD;;AAOD,SAASE,2BAAT,CAAqCH,GAArC,EAA0D;EAExD,IAAI,CAACA,GAAG,CAACM,UAAJN,CAAe,MAAfA,CAAL,EAA6B;IAC3B,OAAOA,GAAP;EACD;;EAGD,IAAMO,YAAY,GAAGC,iBAAiB,CAACR,GAAD,CAAtC;EACA,OAAOK,8BAA8B,CAACE,YAAD,CAArC;AACD;;AAOD,SAASF,8BAAT,CAAwCE,YAAxC,EAAsE;EAGpE,IAAME,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACH,YAAD,CAAT,EAAyB;IAACI,IAAI,EAAE;EAAP,CAAzB,CAAb;EACA,OAAOC,GAAG,CAACC,eAAJD,CAAoBH,IAApBG,CAAP;AACD;;AAUD,SAASJ,iBAAT,CAA2BM,SAA3B,EAAsD;EACpD,yCAEiBA,SAFjB;AAOD","names":["assert","workerURLCache","Map","getLoadableWorkerURL","props","source","url","workerURL","get","getLoadableWorkerURLFromURL","set","getLoadableWorkerURLFromSource","startsWith","workerSource","buildScriptSource","blob","Blob","type","URL","createObjectURL","workerUrl"],"sources":["../../../../src/lib/worker-utils/get-loadable-worker-url.ts"],"sourcesContent":["import {assert} from '../env-utils/assert';\n\nconst workerURLCache = new Map();\n\n/**\n * Creates a loadable URL from worker source or URL\n * that can be used to create `Worker` instances.\n * Due to CORS issues it may be necessary to wrap a URL in a small importScripts\n * @param props\n * @param props.source Worker source\n * @param props.url Worker URL\n * @returns loadable url\n */\nexport function getLoadableWorkerURL(props: {source?: string; url?: string}) {\n  assert((props.source && !props.url) || (!props.source && props.url)); // Either source or url must be defined\n\n  let workerURL = workerURLCache.get(props.source || props.url);\n  if (!workerURL) {\n    // Differentiate worker urls from worker source code\n    if (props.url) {\n      workerURL = getLoadableWorkerURLFromURL(props.url);\n      workerURLCache.set(props.url, workerURL);\n    }\n\n    if (props.source) {\n      workerURL = getLoadableWorkerURLFromSource(props.source);\n      workerURLCache.set(props.source, workerURL);\n    }\n  }\n\n  assert(workerURL);\n  return workerURL;\n}\n\n/**\n * Build a loadable worker URL from worker URL\n * @param url\n * @returns loadable URL\n */\nfunction getLoadableWorkerURLFromURL(url: string): string {\n  // A local script url, we can use it to initialize a Worker directly\n  if (!url.startsWith('http')) {\n    return url;\n  }\n\n  // A remote script, we need to use `importScripts` to load from different origin\n  const workerSource = buildScriptSource(url);\n  return getLoadableWorkerURLFromSource(workerSource);\n}\n\n/**\n * Build a loadable worker URL from worker source\n * @param workerSource\n * @returns loadable url\n */\nfunction getLoadableWorkerURLFromSource(workerSource: string): string {\n  // NOTE: webworkify was previously used\n  // const blob = webworkify(workerSource, {bare: true});\n  const blob = new Blob([workerSource], {type: 'application/javascript'});\n  return URL.createObjectURL(blob);\n}\n\n/**\n * Per spec, worker cannot be initialized with a script from a different origin\n * However a local worker script can still import scripts from other origins,\n * so we simply build a wrapper script.\n *\n * @param workerUrl\n * @returns source\n */\nfunction buildScriptSource(workerUrl: string): string {\n  return `\\\ntry {\n  importScripts('${workerUrl}');\n} catch (error) {\n  console.error(error);\n  throw error;\n}`;\n}\n"]},"metadata":{},"sourceType":"module"}