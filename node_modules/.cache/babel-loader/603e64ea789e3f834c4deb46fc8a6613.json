{"ast":null,"code":"var _jsxFileName = \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/src/components/widgets/CustomCategoryWidget.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { addFilter, removeFilter } from '@carto/react-redux';\nimport { WrapperWidgetUI, CategoryWidgetUI, NoDataAlert } from '@carto/react-ui';\nimport { _FilterTypes as FilterTypes, AggregationTypes } from '@carto/react-core';\nimport { getCategories } from '@carto/react-widgets';\nimport { useSourceFilters } from '@carto/react-widgets';\nimport { selectAreFeaturesReadyForSource } from '@carto/react-redux/';\nimport { useWidgetFilterValues } from './useWidgetFilterValues';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EMPTY_ARRAY = [];\n/**\n * Renders a <CustomCategoryWidget /> component\n * @param  {object} props\n * @param  {string} props.id - ID for the widget instance.\n * @param  {string} props.title - Title to show in the widget header.\n * @param  {string} props.dataSource - ID of the data source to get the data from.\n * @param  {string} props.column - Name of the data source's column to get the data from.\n * @param  {string} [props.operationColumn] - Name of the data source's column to operate with. If not defined it will default to the one defined in `column`.\n * @param  {string} props.operation - Operation to apply to the operationColumn. Must be one of those defined in `AggregationTypes` object.\n * @param  {Function} [props.formatter] - Function to format each value returned.\n * @param  {Object} [props.labels] - Overwrite category labels.\n * @param  {boolean} [props.animation] - Enable/disable widget animations on data updates. Enabled by default.\n * @param  {boolean} [props.filterable] - Enable/disable widget filtering capabilities. Enabled by default.\n * @param  {boolean} [props.searchable] - Enable/disable widget searching capabilities. Enabled by default.\n * @param  {Function} [props.onError] - Function to handle error messages from the widget.\n * @param  {Object} [props.wrapperProps] - Extra props to pass to [WrapperWidgetUI](https://storybook-react.carto.com/?path=/docs/widgets-wrapperwidgetui--default)\n * @param  {Object} [props.noDataAlertProps] - Extra props to pass to [NoDataAlert]()\n * @param {Array} [props.otherSources] - Extra sources to filter based on the main source.\n */\n\nfunction CustomCategoryWidget(props) {\n  const {\n    id,\n    title,\n    dataSource,\n    column,\n    operationColumn,\n    operation,\n    formatter,\n    labels,\n    animation,\n    filterable,\n    searchable,\n    onError,\n    wrapperProps,\n    noDataAlertProps,\n    otherSources\n  } = props;\n  const dispatch = useDispatch();\n  const isSourceReady = useSelector(state => {\n    const sources = [...otherSources.map(e => e.id), dataSource];\n    const areSourcesReady = sources.map(e => selectAreFeaturesReadyForSource(state, e));\n    return areSourcesReady.every(v => v === true);\n  });\n  const [categoryData, setCategoryData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const filters = useSourceFilters({\n    dataSource,\n    id\n  });\n  const selectedCategories = useWidgetFilterValues({\n    dataSource,\n    id,\n    column,\n    type: FilterTypes.IN\n  }) || EMPTY_ARRAY;\n  useEffect(() => {\n    setIsLoading(true);\n\n    if (isSourceReady) {\n      getCategories({\n        column,\n        operationColumn,\n        operation,\n        filters,\n        dataSource\n      }).then(data => {\n        if (data) {\n          setIsLoading(false);\n          setCategoryData(data);\n        }\n      }).catch(error => {\n        setIsLoading(false);\n        if (onError) onError(error);\n      });\n    }\n  }, [id, column, operationColumn, operation, filters, dataSource, setIsLoading, onError, isSourceReady]);\n  const handleSelectedCategoriesChange = useCallback(categories => {\n    if (categories && categories.length) {\n      dispatch(addFilter({\n        id: dataSource,\n        column,\n        type: FilterTypes.IN,\n        values: categories,\n        owner: id\n      }));\n      otherSources.forEach(e => {\n        dispatch(addFilter({\n          id: e.id,\n          column: e.column,\n          type: FilterTypes.IN,\n          values: categories,\n          owner: id\n        }));\n      });\n    } else {\n      dispatch(removeFilter({\n        id: dataSource,\n        column\n      }));\n      otherSources.forEach(e => {\n        dispatch(removeFilter({\n          id: e.id,\n          column: e.column\n        }));\n      });\n    }\n  }, [column, dataSource, id, dispatch]);\n  return /*#__PURE__*/_jsxDEV(WrapperWidgetUI, {\n    title: title,\n    isLoading: isLoading,\n    ...wrapperProps,\n    children: categoryData.length || isLoading ? /*#__PURE__*/_jsxDEV(CategoryWidgetUI, {\n      data: categoryData,\n      formatter: formatter,\n      labels: labels,\n      selectedCategories: selectedCategories,\n      onSelectedCategoriesChange: handleSelectedCategoriesChange,\n      animation: animation,\n      filterable: filterable,\n      searchable: searchable\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(NoDataAlert, { ...noDataAlertProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n}\n\nCustomCategoryWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  dataSource: PropTypes.string.isRequired,\n  column: PropTypes.string.isRequired,\n  operationColumn: PropTypes.string,\n  operation: PropTypes.oneOf(Object.values(AggregationTypes)).isRequired,\n  formatter: PropTypes.func,\n  labels: PropTypes.object,\n  animation: PropTypes.bool,\n  filterable: PropTypes.bool,\n  searchable: PropTypes.bool,\n  onError: PropTypes.func,\n  wrapperProps: PropTypes.object,\n  noDataAlertProps: PropTypes.object\n};\nCustomCategoryWidget.defaultProps = {\n  labels: {},\n  animation: true,\n  filterable: true,\n  searchable: true,\n  wrapperProps: {},\n  noDataAlertProps: {}\n};\nexport default CustomCategoryWidget;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useSelector","useDispatch","PropTypes","addFilter","removeFilter","WrapperWidgetUI","CategoryWidgetUI","NoDataAlert","_FilterTypes","FilterTypes","AggregationTypes","getCategories","useSourceFilters","selectAreFeaturesReadyForSource","useWidgetFilterValues","EMPTY_ARRAY","CustomCategoryWidget","props","id","title","dataSource","column","operationColumn","operation","formatter","labels","animation","filterable","searchable","onError","wrapperProps","noDataAlertProps","otherSources","dispatch","isSourceReady","state","sources","map","e","areSourcesReady","every","v","categoryData","setCategoryData","isLoading","setIsLoading","filters","selectedCategories","type","IN","then","data","catch","error","handleSelectedCategoriesChange","categories","length","values","owner","forEach","propTypes","string","isRequired","oneOf","Object","func","object","bool","defaultProps"],"sources":["/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/src/components/widgets/CustomCategoryWidget.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { addFilter, removeFilter } from '@carto/react-redux';\nimport { WrapperWidgetUI, CategoryWidgetUI, NoDataAlert } from '@carto/react-ui';\nimport { _FilterTypes as FilterTypes, AggregationTypes } from '@carto/react-core';\nimport { getCategories } from '@carto/react-widgets';\nimport { useSourceFilters } from '@carto/react-widgets';\nimport { selectAreFeaturesReadyForSource } from '@carto/react-redux/';\nimport { useWidgetFilterValues } from './useWidgetFilterValues';\n\nconst EMPTY_ARRAY = [];\n\n/**\n * Renders a <CustomCategoryWidget /> component\n * @param  {object} props\n * @param  {string} props.id - ID for the widget instance.\n * @param  {string} props.title - Title to show in the widget header.\n * @param  {string} props.dataSource - ID of the data source to get the data from.\n * @param  {string} props.column - Name of the data source's column to get the data from.\n * @param  {string} [props.operationColumn] - Name of the data source's column to operate with. If not defined it will default to the one defined in `column`.\n * @param  {string} props.operation - Operation to apply to the operationColumn. Must be one of those defined in `AggregationTypes` object.\n * @param  {Function} [props.formatter] - Function to format each value returned.\n * @param  {Object} [props.labels] - Overwrite category labels.\n * @param  {boolean} [props.animation] - Enable/disable widget animations on data updates. Enabled by default.\n * @param  {boolean} [props.filterable] - Enable/disable widget filtering capabilities. Enabled by default.\n * @param  {boolean} [props.searchable] - Enable/disable widget searching capabilities. Enabled by default.\n * @param  {Function} [props.onError] - Function to handle error messages from the widget.\n * @param  {Object} [props.wrapperProps] - Extra props to pass to [WrapperWidgetUI](https://storybook-react.carto.com/?path=/docs/widgets-wrapperwidgetui--default)\n * @param  {Object} [props.noDataAlertProps] - Extra props to pass to [NoDataAlert]()\n * @param {Array} [props.otherSources] - Extra sources to filter based on the main source.\n */\nfunction CustomCategoryWidget(props) {\n  const {\n    id,\n    title,\n    dataSource,\n    column,\n    operationColumn,\n    operation,\n    formatter,\n    labels,\n    animation,\n    filterable,\n    searchable,\n    onError,\n    wrapperProps,\n    noDataAlertProps,\n    otherSources,\n  } = props;\n  const dispatch = useDispatch();\n  const isSourceReady = useSelector((state) => {\n    const sources = [...otherSources.map((e) => e.id), dataSource];\n    const areSourcesReady = sources.map((e) => selectAreFeaturesReadyForSource(state, e));\n    return areSourcesReady.every((v) => v === true);\n  });\n\n  const [categoryData, setCategoryData] = useState([]);\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  const filters = useSourceFilters({ dataSource, id });\n  const selectedCategories =\n    useWidgetFilterValues({ dataSource, id, column, type: FilterTypes.IN }) ||\n    EMPTY_ARRAY;\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    if (isSourceReady) {\n      getCategories({\n        column,\n        operationColumn,\n        operation,\n        filters,\n        dataSource,\n      })\n        .then((data) => {\n          if (data) {\n            setIsLoading(false);\n            setCategoryData(data);\n          }\n        })\n        .catch((error) => {\n          setIsLoading(false);\n          if (onError) onError(error);\n        });\n    }\n  }, [\n    id,\n    column,\n    operationColumn,\n    operation,\n    filters,\n    dataSource,\n    setIsLoading,\n    onError,\n    isSourceReady,\n  ]);\n\n  const handleSelectedCategoriesChange = useCallback(\n    (categories) => {\n      if (categories && categories.length) {\n        dispatch(\n          addFilter({\n            id: dataSource,\n            column,\n            type: FilterTypes.IN,\n            values: categories,\n            owner: id,\n          })\n        );\n        otherSources.forEach((e) => {\n          dispatch(\n            addFilter({\n              id: e.id,\n              column: e.column,\n              type: FilterTypes.IN,\n              values: categories,\n              owner: id,\n            })\n          );\n        });\n      } else {\n        dispatch(\n          removeFilter({\n            id: dataSource,\n            column,\n          })\n        );\n        otherSources.forEach((e) => {\n          dispatch(\n            removeFilter({\n              id: e.id,\n              column: e.column,\n            })\n          );\n        });\n      }\n    },\n    [column, dataSource, id, dispatch]\n  );\n\n  return (\n    <WrapperWidgetUI title={title} isLoading={isLoading} {...wrapperProps}>\n      {categoryData.length || isLoading ? (\n        <CategoryWidgetUI\n          data={categoryData}\n          formatter={formatter}\n          labels={labels}\n          selectedCategories={selectedCategories}\n          onSelectedCategoriesChange={handleSelectedCategoriesChange}\n          animation={animation}\n          filterable={filterable}\n          searchable={searchable}\n        />\n      ) : (\n        <NoDataAlert {...noDataAlertProps} />\n      )}\n    </WrapperWidgetUI>\n  );\n}\n\nCustomCategoryWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  dataSource: PropTypes.string.isRequired,\n  column: PropTypes.string.isRequired,\n  operationColumn: PropTypes.string,\n  operation: PropTypes.oneOf(Object.values(AggregationTypes)).isRequired,\n  formatter: PropTypes.func,\n  labels: PropTypes.object,\n  animation: PropTypes.bool,\n  filterable: PropTypes.bool,\n  searchable: PropTypes.bool,\n  onError: PropTypes.func,\n  wrapperProps: PropTypes.object,\n  noDataAlertProps: PropTypes.object,\n};\n\nCustomCategoryWidget.defaultProps = {\n  labels: {},\n  animation: true,\n  filterable: true,\n  searchable: true,\n  wrapperProps: {},\n  noDataAlertProps: {},\n};\n\nexport default CustomCategoryWidget;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}