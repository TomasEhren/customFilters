{"ast":null,"code":"import { Vector3, equals, assert } from '@math.gl/core';\nconst scratchPosition = new Vector3();\nconst scratchNormal = new Vector3();\nexport default class Plane {\n  constructor() {\n    let normal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0, 0, 1];\n    let distance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.normal = new Vector3();\n    this.distance = -0;\n    this.fromNormalDistance(normal, distance);\n  }\n\n  fromNormalDistance(normal, distance) {\n    assert(Number.isFinite(distance));\n    this.normal.from(normal).normalize();\n    this.distance = distance;\n    return this;\n  }\n\n  fromPointNormal(point, normal) {\n    point = scratchPosition.from(point);\n    this.normal.from(normal).normalize();\n    const distance = -this.normal.dot(point);\n    this.distance = distance;\n    return this;\n  }\n\n  fromCoefficients(a, b, c, d) {\n    this.normal.set(a, b, c);\n    assert(equals(this.normal.len(), 1));\n    this.distance = d;\n    return this;\n  }\n\n  clone(plane) {\n    return new Plane(this.normal, this.distance);\n  }\n\n  equals(right) {\n    return equals(this.distance, right.distance) && equals(this.normal, right.normal);\n  }\n\n  getPointDistance(point) {\n    return this.normal.dot(point) + this.distance;\n  }\n\n  transform(matrix4) {\n    const normal = scratchNormal.copy(this.normal).transformAsVector(matrix4).normalize();\n    const point = this.normal.scale(-this.distance).transform(matrix4);\n    return this.fromPointNormal(point, normal);\n  }\n\n  projectPointOntoPlane(point) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n    point = scratchPosition.from(point);\n    const pointDistance = this.getPointDistance(point);\n    const scaledNormal = scratchNormal.copy(this.normal).scale(pointDistance);\n    return point.subtract(scaledNormal).to(result);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Vector3","equals","assert","scratchPosition","scratchNormal","Plane","constructor","normal","distance","fromNormalDistance","Number","isFinite","from","normalize","fromPointNormal","point","dot","fromCoefficients","a","b","c","d","set","len","clone","plane","right","getPointDistance","transform","matrix4","copy","transformAsVector","scale","projectPointOntoPlane","result","pointDistance","scaledNormal","subtract","to"],"sources":["../../../src/lib/plane.js"],"sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/* eslint-disable */\nimport {Vector3, equals, assert} from '@math.gl/core';\n\nconst scratchPosition = new Vector3();\nconst scratchNormal = new Vector3();\n\n// A plane in Hessian Normal Form\nexport default class Plane {\n  constructor(normal = [0, 0, 1], distance = 0) {\n    this.normal = new Vector3();\n    this.distance = -0;\n    this.fromNormalDistance(normal, distance);\n  }\n\n  fromNormalDistance(normal, distance) {\n    assert(Number.isFinite(distance));\n    this.normal.from(normal).normalize();\n    this.distance = distance;\n    return this;\n  }\n\n  // Creates a plane from a normal and a point on the plane.\n  fromPointNormal(point, normal) {\n    point = scratchPosition.from(point);\n    this.normal.from(normal).normalize();\n    const distance = -this.normal.dot(point);\n    this.distance = distance;\n\n    return this;\n  }\n\n  // Creates a plane from the general equation\n  fromCoefficients(a, b, c, d) {\n    this.normal.set(a, b, c);\n    assert(equals(this.normal.len(), 1));\n    this.distance = d;\n    return this;\n  }\n\n  // Duplicates a Plane instance.\n  clone(plane) {\n    return new Plane(this.normal, this.distance);\n  }\n\n  // Compares the provided Planes by normal and distance\n  equals(right) {\n    return equals(this.distance, right.distance) && equals(this.normal, right.normal);\n  }\n\n  // Computes the signed shortest distance of a point to a plane.\n  // The sign of the distance determines which side of the plane the point is on.\n  getPointDistance(point) {\n    return this.normal.dot(point) + this.distance;\n  }\n\n  // Transforms the plane by the given transformation matrix.\n  transform(matrix4) {\n    const normal = scratchNormal.copy(this.normal).transformAsVector(matrix4).normalize();\n    const point = this.normal.scale(-this.distance).transform(matrix4);\n    return this.fromPointNormal(point, normal);\n  }\n\n  // Projects a point onto the plane.\n  projectPointOntoPlane(point, result = [0, 0, 0]) {\n    point = scratchPosition.from(point);\n    // projectedPoint = point - (normal.point + scale) * normal\n    const pointDistance = this.getPointDistance(point);\n    const scaledNormal = scratchNormal.copy(this.normal).scale(pointDistance);\n\n    return point.subtract(scaledNormal).to(result);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}