{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { assert } from '../env-utils/assert';\n\nvar WorkerJob = /*#__PURE__*/function () {\n  function WorkerJob(jobName, workerThread) {\n    var _this = this;\n\n    _classCallCheck(this, WorkerJob);\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"workerThread\", void 0);\n\n    _defineProperty(this, \"isRunning\", void 0);\n\n    _defineProperty(this, \"result\", void 0);\n\n    _defineProperty(this, \"_resolve\", void 0);\n\n    _defineProperty(this, \"_reject\", void 0);\n\n    this.name = jobName;\n    this.workerThread = workerThread;\n    this.isRunning = true;\n\n    this._resolve = function () {};\n\n    this._reject = function () {};\n\n    this.result = new Promise(function (resolve, reject) {\n      _this._resolve = resolve;\n      _this._reject = reject;\n    });\n  }\n\n  _createClass(WorkerJob, [{\n    key: \"postMessage\",\n    value: function postMessage(type, payload) {\n      this.workerThread.postMessage({\n        source: 'loaders.gl',\n        type: type,\n        payload: payload\n      });\n    }\n  }, {\n    key: \"done\",\n    value: function done(value) {\n      assert(this.isRunning);\n      this.isRunning = false;\n\n      this._resolve(value);\n    }\n  }, {\n    key: \"error\",\n    value: function error(_error) {\n      assert(this.isRunning);\n      this.isRunning = false;\n\n      this._reject(_error);\n    }\n  }]);\n\n  return WorkerJob;\n}();\n\nexport { WorkerJob as default };","map":{"version":3,"mappings":";;;AAEA,SAAQA,MAAR,QAAqB,qBAArB;;IAKqBC,S;EAUnBC,mBAAYC,OAAZD,EAA6BE,YAA7BF,EAAyD;IAAA;;IAAA;;IAAAG;;IAAAA;;IAAAA;;IAAAA;;IAAAA;;IAAAA;;IACvD,KAAKC,IAAL,GAAYH,OAAZ;IACA,KAAKC,YAAL,GAAoBA,YAApB;IACA,KAAKG,SAAL,GAAiB,IAAjB;;IACA,KAAKC,QAAL,GAAgB,YAAM,CAAtB;;IACA,KAAKC,OAAL,GAAe,YAAM,CAArB;;IACA,KAAKC,MAAL,GAAc,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;MAC7C,MAAKL,QAAL,GAAgBI,OAAhB;MACA,MAAKH,OAAL,GAAeI,MAAf;IAFY,EAAd;EAID;;;;WAMDC,qBAAYC,IAAZD,EAAqCE,OAArCF,EAA0E;MACxE,KAAKV,YAAL,CAAkBU,WAAlB,CAA8B;QAC5BG,MAAM,EAAE,YADoB;QAE5BF,IAF4B,EAE5BA,IAF4B;QAG5BC;MAH4B,CAA9B;IAKD;;;WAKDE,cAAKC,KAALD,EAAuB;MACrBlB,MAAM,CAAC,KAAKO,SAAN,CAANP;MACA,KAAKO,SAAL,GAAiB,KAAjB;;MACA,KAAKC,QAAL,CAAcW,KAAd;IACD;;;WAKDC,eAAMA,MAANA,EAA0B;MACxBpB,MAAM,CAAC,KAAKO,SAAN,CAANP;MACA,KAAKO,SAAL,GAAiB,KAAjB;;MACA,KAAKE,OAAL,CAAaW,MAAb;IACD;;;;;;SAlDkBnB,S","names":["assert","WorkerJob","constructor","jobName","workerThread","_defineProperty","name","isRunning","_resolve","_reject","result","Promise","resolve","reject","postMessage","type","payload","source","done","value","error"],"sources":["../../../../src/lib/worker-farm/worker-job.ts"],"sourcesContent":["import type {WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport WorkerThread from './worker-thread';\nimport {assert} from '../env-utils/assert';\n\n/**\n * Represents one Job handled by a WorkerPool or WorkerFarm\n */\nexport default class WorkerJob {\n  readonly name: string;\n  readonly workerThread: WorkerThread;\n  isRunning: boolean;\n  /** Promise that resolves when Job is done */\n  readonly result: Promise<any>;\n\n  private _resolve: (value: any) => void;\n  private _reject: (reason?: any) => void;\n\n  constructor(jobName: string, workerThread: WorkerThread) {\n    this.name = jobName;\n    this.workerThread = workerThread;\n    this.isRunning = true;\n    this._resolve = () => {};\n    this._reject = () => {};\n    this.result = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  /**\n   * Send a message to the job's worker thread\n   * @param data any data structure, ideally consisting mostly of transferrable objects\n   */\n  postMessage(type: WorkerMessageType, payload: WorkerMessagePayload): void {\n    this.workerThread.postMessage({\n      source: 'loaders.gl', // Lets worker ignore unrelated messages\n      type,\n      payload\n    });\n  }\n\n  /**\n   * Call to resolve the `result` Promise with the supplied value\n   */\n  done(value: any): void {\n    assert(this.isRunning);\n    this.isRunning = false;\n    this._resolve(value);\n  }\n\n  /**\n   * Call to reject the `result` Promise with the supplied error\n   */\n  error(error: Error): void {\n    assert(this.isRunning);\n    this.isRunning = false;\n    this._reject(error);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}