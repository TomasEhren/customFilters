{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DrawCircleFromCenterMode = void 0;\n\nvar _circle = _interopRequireDefault(require(\"@turf/circle\"));\n\nvar _distance = _interopRequireDefault(require(\"@turf/distance\"));\n\nvar _twoClickPolygonMode = require(\"./two-click-polygon-mode\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar DrawCircleFromCenterMode = /*#__PURE__*/function (_TwoClickPolygonMode) {\n  _inherits(DrawCircleFromCenterMode, _TwoClickPolygonMode);\n\n  var _super = _createSuper(DrawCircleFromCenterMode);\n\n  function DrawCircleFromCenterMode() {\n    _classCallCheck(this, DrawCircleFromCenterMode);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DrawCircleFromCenterMode, [{\n    key: \"getTwoClickPolygon\",\n    value: function getTwoClickPolygon(coord1, coord2, modeConfig) {\n      // Default turf value for circle is 64\n      var _ref = modeConfig || {},\n          _ref$steps = _ref.steps,\n          steps = _ref$steps === void 0 ? 64 : _ref$steps;\n\n      var options = {\n        steps: steps\n      };\n\n      if (steps < 4) {\n        console.warn(\"Minimum steps to draw a circle is 4 \"); // eslint-disable-line no-console,no-undef\n\n        options.steps = 4;\n      }\n\n      var radius = Math.max((0, _distance[\"default\"])(coord1, coord2), 0.001);\n      var geometry = (0, _circle[\"default\"])(coord1, radius, options);\n      geometry.properties = geometry.properties || {};\n      geometry.properties.shape = 'Circle';\n      return geometry;\n    }\n  }]);\n\n  return DrawCircleFromCenterMode;\n}(_twoClickPolygonMode.TwoClickPolygonMode);\n\nexports.DrawCircleFromCenterMode = DrawCircleFromCenterMode;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEaA,wB;;;;;;;;;;;;;uCACQC,QAAkBC,QAAkBC,YAAqC;MAC1F;MAD0F,WAEnEA,UAAU,IAAI,EAFqD;MAAA,sBAElFC,KAFkF;MAAA,IAElFA,KAFkF,2BAE1E,EAF0E;;MAG1F,IAAMC,OAAO,GAAG;QAAED,KAAK,EAALA;MAAF,CAAhB;;MAEA,IAAIA,KAAK,GAAG,CAAZ,EAAe;QACbE,OAAO,CAACC,IAARD,yCADa,CACyC;;QACtDD,OAAO,CAACD,KAARC,GAAgB,CAAhBA;MACD;;MAED,IAAMG,MAAM,GAAGC,IAAI,CAACC,GAALD,CAAS,0BAASR,MAAT,EAAiBC,MAAjB,CAATO,EAAmC,KAAnCA,CAAf;MACA,IAAME,QAAQ,GAAG,wBAAOV,MAAP,EAAeO,MAAf,EAAuBH,OAAvB,CAAjB;MAEAM,QAAQ,CAACC,UAATD,GAAsBA,QAAQ,CAACC,UAATD,IAAuB,EAA7CA;MACAA,QAAQ,CAACC,UAATD,CAAoBE,KAApBF,GAA4B,QAA5BA;MAEA,OAAOA,QAAP;IACD;;;;EAlB2CG,wC","names":["DrawCircleFromCenterMode","coord1","coord2","modeConfig","steps","options","console","warn","radius","Math","max","geometry","properties","shape","TwoClickPolygonMode"],"sources":["../../src/lib/draw-circle-from-center-mode.ts"],"sourcesContent":["import circle from '@turf/circle';\nimport distance from '@turf/distance';\nimport { Position, Polygon, FeatureOf } from '../geojson-types';\nimport { TwoClickPolygonMode } from './two-click-polygon-mode';\n\nexport class DrawCircleFromCenterMode extends TwoClickPolygonMode {\n  getTwoClickPolygon(coord1: Position, coord2: Position, modeConfig: any): FeatureOf<Polygon> {\n    // Default turf value for circle is 64\n    const { steps = 64 } = modeConfig || {};\n    const options = { steps };\n\n    if (steps < 4) {\n      console.warn(`Minimum steps to draw a circle is 4 `); // eslint-disable-line no-console,no-undef\n      options.steps = 4;\n    }\n\n    const radius = Math.max(distance(coord1, coord2), 0.001);\n    const geometry = circle(coord1, radius, options);\n\n    geometry.properties = geometry.properties || {};\n    geometry.properties.shape = 'Circle';\n\n    return geometry;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}