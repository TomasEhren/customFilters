{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Texture2D } from '@luma.gl/core';\nimport { equals } from '@math.gl/core';\nimport MaskPass from '../../passes/mask-pass';\nimport Effect from '../../lib/effect';\nimport { OPERATION } from '../../lib/constants';\nimport { getMaskBounds, getMaskViewport } from './utils';\nimport log from '../../utils/log';\n\nvar MaskEffect = /*#__PURE__*/function (_Effect) {\n  _inherits(MaskEffect, _Effect);\n\n  var _super = _createSuper(MaskEffect);\n\n  function MaskEffect(props) {\n    var _this;\n\n    _classCallCheck(this, MaskEffect);\n\n    _this = _super.call(this, props);\n    _this.dummyMaskMap = null;\n    _this.useInPicking = true;\n    _this.channels = [];\n    _this.masks = null;\n    return _this;\n  }\n\n  _createClass(MaskEffect, [{\n    key: \"preRender\",\n    value: function preRender(gl, _ref) {\n      var layers = _ref.layers,\n          layerFilter = _ref.layerFilter,\n          viewports = _ref.viewports,\n          onViewportActive = _ref.onViewportActive,\n          views = _ref.views;\n\n      if (!this.dummyMaskMap) {\n        this.dummyMaskMap = new Texture2D(gl, {\n          width: 1,\n          height: 1\n        });\n      }\n\n      var maskLayers = layers.filter(function (l) {\n        return l.props.operation === OPERATION.MASK && l.props.visible;\n      });\n\n      if (maskLayers.length === 0) {\n        this.masks = null;\n        this.channels.length = 0;\n        return;\n      }\n\n      this.masks = {};\n\n      if (!this.maskPass) {\n        this.maskPass = new MaskPass(gl, {\n          id: 'default-mask'\n        });\n        this.maskMap = this.maskPass.maskMap;\n      }\n\n      var channelMap = this._sortMaskChannels(maskLayers);\n\n      var viewport = viewports[0];\n      var viewportChanged = !this.lastViewport || !this.lastViewport.equals(viewport);\n\n      for (var maskId in channelMap) {\n        this._renderChannel(channelMap[maskId], {\n          layerFilter: layerFilter,\n          onViewportActive: onViewportActive,\n          views: views,\n          viewport: viewport,\n          viewportChanged: viewportChanged\n        });\n      }\n    }\n  }, {\n    key: \"_renderChannel\",\n    value: function _renderChannel(channelInfo, _ref2) {\n      var layerFilter = _ref2.layerFilter,\n          onViewportActive = _ref2.onViewportActive,\n          views = _ref2.views,\n          viewport = _ref2.viewport,\n          viewportChanged = _ref2.viewportChanged;\n      var oldChannelInfo = this.channels[channelInfo.index];\n      var maskChanged = channelInfo === oldChannelInfo || oldChannelInfo.layers.length !== channelInfo.layers.length || channelInfo.layerBounds.some(function (b, i) {\n        return b !== oldChannelInfo.layerBounds[i];\n      });\n      channelInfo.bounds = oldChannelInfo.bounds;\n      channelInfo.maskBounds = oldChannelInfo.maskBounds;\n      this.channels[channelInfo.index] = channelInfo;\n\n      if (maskChanged || viewportChanged) {\n        this.lastViewport = viewport;\n        channelInfo.bounds = getMaskBounds({\n          layers: channelInfo.layers,\n          viewport: viewport\n        });\n\n        if (maskChanged || !equals(channelInfo.bounds, oldChannelInfo.bounds)) {\n          var maskPass = this.maskPass,\n              maskMap = this.maskMap;\n          var maskViewport = getMaskViewport({\n            bounds: channelInfo.bounds,\n            viewport: viewport,\n            width: maskMap.width,\n            height: maskMap.height\n          });\n          channelInfo.maskBounds = maskViewport ? maskViewport.getBounds() : [0, 0, 1, 1];\n          maskPass.render({\n            channel: channelInfo.index,\n            layers: channelInfo.layers,\n            layerFilter: layerFilter,\n            viewports: maskViewport ? [maskViewport] : [],\n            onViewportActive: onViewportActive,\n            views: views,\n            moduleParameters: {\n              devicePixelRatio: 1\n            }\n          });\n        }\n      }\n\n      this.masks[channelInfo.id] = {\n        index: channelInfo.index,\n        bounds: channelInfo.maskBounds,\n        coordinateOrigin: channelInfo.coordinateOrigin,\n        coordinateSystem: channelInfo.coordinateSystem\n      };\n    }\n  }, {\n    key: \"_sortMaskChannels\",\n    value: function _sortMaskChannels(maskLayers) {\n      var _this2 = this;\n\n      var channelMap = {};\n      var channelCount = 0;\n\n      var _iterator = _createForOfIteratorHelper(maskLayers),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var layer = _step.value;\n          var id = layer.root.id;\n          var channelInfo = channelMap[id];\n\n          if (!channelInfo) {\n            if (++channelCount > 4) {\n              log.warn('Too many mask layers. The max supported is 4')();\n              return \"continue\";\n            }\n\n            channelInfo = {\n              id: id,\n              index: _this2.channels.findIndex(function (c) {\n                return (c === null || c === void 0 ? void 0 : c.id) === id;\n              }),\n              layers: [],\n              layerBounds: [],\n              coordinateOrigin: layer.root.props.coordinateOrigin,\n              coordinateSystem: layer.root.props.coordinateSystem\n            };\n            channelMap[id] = channelInfo;\n          }\n\n          channelInfo.layers.push(layer);\n          channelInfo.layerBounds.push(layer.getBounds());\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _ret = _loop();\n\n          if (_ret === \"continue\") continue;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      for (var i = 0; i < 4; i++) {\n        var channelInfo = this.channels[i];\n\n        if (!channelInfo || !(channelInfo.id in channelMap)) {\n          this.channels[i] = null;\n        }\n      }\n\n      for (var maskId in channelMap) {\n        var _channelInfo = channelMap[maskId];\n\n        if (_channelInfo.index < 0) {\n          _channelInfo.index = this.channels.findIndex(function (c) {\n            return !c;\n          });\n          this.channels[_channelInfo.index] = _channelInfo;\n        }\n      }\n\n      return channelMap;\n    }\n  }, {\n    key: \"getModuleParameters\",\n    value: function getModuleParameters() {\n      return {\n        maskMap: this.masks ? this.maskMap : this.dummyMaskMap,\n        maskChannels: this.masks\n      };\n    }\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      if (this.dummyMaskMap) {\n        this.dummyMaskMap.delete();\n        this.dummyMaskMap = null;\n      }\n\n      if (this.maskPass) {\n        this.maskPass.delete();\n        this.maskPass = null;\n        this.maskMap = null;\n      }\n\n      this.lastViewport = null;\n      this.masks = null;\n      this.channels.length = 0;\n    }\n  }]);\n\n  return MaskEffect;\n}(Effect);\n\nexport { MaskEffect as default };","map":{"version":3,"mappings":"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","names":["Texture2D","equals","MaskPass","Effect","OPERATION","getMaskBounds","getMaskViewport","log","MaskEffect","constructor","props","dummyMaskMap","useInPicking","channels","masks","preRender","gl","layers","layerFilter","viewports","onViewportActive","views","width","height","maskLayers","filter","l","operation","MASK","visible","length","maskPass","id","maskMap","channelMap","_sortMaskChannels","viewport","viewportChanged","lastViewport","maskId","_renderChannel","channelInfo","oldChannelInfo","index","maskChanged","layerBounds","some","b","i","bounds","maskBounds","maskViewport","getBounds","render","channel","moduleParameters","devicePixelRatio","coordinateOrigin","coordinateSystem","channelCount","layer","root","warn","findIndex","c","push","getModuleParameters","maskChannels","cleanup","delete"],"sources":["../../../../src/effects/mask/mask-effect.js"],"sourcesContent":["import {Texture2D} from '@luma.gl/core';\n// import {readPixelsToArray} from '@luma.gl/core';\nimport {equals} from '@math.gl/core';\nimport MaskPass from '../../passes/mask-pass';\nimport Effect from '../../lib/effect';\nimport {OPERATION} from '../../lib/constants';\nimport {getMaskBounds, getMaskViewport} from './utils';\nimport log from '../../utils/log';\n\n// Class to manage mask effect\nexport default class MaskEffect extends Effect {\n  constructor(props) {\n    super(props);\n    this.dummyMaskMap = null;\n    this.useInPicking = true;\n    this.channels = [];\n    this.masks = null;\n  }\n\n  preRender(gl, {layers, layerFilter, viewports, onViewportActive, views}) {\n    if (!this.dummyMaskMap) {\n      this.dummyMaskMap = new Texture2D(gl, {\n        width: 1,\n        height: 1\n      });\n    }\n\n    const maskLayers = layers.filter(l => l.props.operation === OPERATION.MASK && l.props.visible);\n    if (maskLayers.length === 0) {\n      this.masks = null;\n      this.channels.length = 0;\n      return;\n    }\n    this.masks = {};\n\n    if (!this.maskPass) {\n      this.maskPass = new MaskPass(gl, {id: 'default-mask'});\n      this.maskMap = this.maskPass.maskMap;\n    }\n\n    // Map layers to channels\n    const channelMap = this._sortMaskChannels(maskLayers);\n    // TODO - support multiple views\n    const viewport = viewports[0];\n    const viewportChanged = !this.lastViewport || !this.lastViewport.equals(viewport);\n\n    for (const maskId in channelMap) {\n      this._renderChannel(channelMap[maskId], {\n        layerFilter,\n        onViewportActive,\n        views,\n        viewport,\n        viewportChanged\n      });\n    }\n\n    // // Debug show FBO contents on screen\n    // const color = readPixelsToArray(this.maskMap);\n    // let canvas = document.getElementById('fbo-canvas');\n    // if (!canvas) {\n    //   canvas = document.createElement('canvas');\n    //   canvas.id = 'fbo-canvas';\n    //   canvas.width = this.maskMap.width;\n    //   canvas.height = this.maskMap.height;\n    //   canvas.style.zIndex = 100;\n    //   canvas.style.position = 'absolute';\n    //   canvas.style.right = 0;\n    //   canvas.style.border = 'blue 1px solid';\n    //   canvas.style.width = '256px';\n    //   canvas.style.transform = 'scaleY(-1)';\n    //   document.body.appendChild(canvas);\n    // }\n    // const ctx = canvas.getContext('2d');\n    // const imageData = ctx.createImageData(this.maskMap.width, this.maskMap.height);\n    // for (let i = 0; i < color.length; i += 4) {\n    //   imageData.data[i + 0] = color[i + 0];\n    //   imageData.data[i + 1] = color[i + 1];\n    //   imageData.data[i + 2] = color[i + 2];\n    //   imageData.data[i + 3] = color[i + 3] + 128;\n    // }\n    // ctx.putImageData(imageData, 0, 0);\n  }\n\n  _renderChannel(channelInfo, {layerFilter, onViewportActive, views, viewport, viewportChanged}) {\n    const oldChannelInfo = this.channels[channelInfo.index];\n    const maskChanged =\n      // If a channel is new\n      channelInfo === oldChannelInfo ||\n      // If sublayers have changed\n      oldChannelInfo.layers.length !== channelInfo.layers.length ||\n      // If a sublayer's positions have been updated, the cached bounds will change shallowly\n      channelInfo.layerBounds.some((b, i) => b !== oldChannelInfo.layerBounds[i]);\n\n    channelInfo.bounds = oldChannelInfo.bounds;\n    channelInfo.maskBounds = oldChannelInfo.maskBounds;\n    this.channels[channelInfo.index] = channelInfo;\n\n    if (maskChanged || viewportChanged) {\n      // Recalculate mask bounds\n      this.lastViewport = viewport;\n\n      channelInfo.bounds = getMaskBounds({layers: channelInfo.layers, viewport});\n\n      if (maskChanged || !equals(channelInfo.bounds, oldChannelInfo.bounds)) {\n        // Rerender mask FBO\n        const {maskPass, maskMap} = this;\n\n        const maskViewport = getMaskViewport({\n          bounds: channelInfo.bounds,\n          viewport,\n          width: maskMap.width,\n          height: maskMap.height\n        });\n\n        channelInfo.maskBounds = maskViewport ? maskViewport.getBounds() : [0, 0, 1, 1];\n\n        maskPass.render({\n          channel: channelInfo.index,\n          layers: channelInfo.layers,\n          layerFilter,\n          viewports: maskViewport ? [maskViewport] : [],\n          onViewportActive,\n          views,\n          moduleParameters: {\n            devicePixelRatio: 1\n          }\n        });\n      }\n    }\n\n    this.masks[channelInfo.id] = {\n      index: channelInfo.index,\n      bounds: channelInfo.maskBounds,\n      coordinateOrigin: channelInfo.coordinateOrigin,\n      coordinateSystem: channelInfo.coordinateSystem\n    };\n  }\n\n  /**\n   * Find a channel to render each mask into\n   * If a maskId already exists, diff and update the existing channel\n   * Otherwise replace a removed mask\n   * Otherwise create a new channel\n   */\n  _sortMaskChannels(maskLayers) {\n    const channelMap = {};\n    let channelCount = 0;\n    for (const layer of maskLayers) {\n      const {id} = layer.root;\n      let channelInfo = channelMap[id];\n      if (!channelInfo) {\n        if (++channelCount > 4) {\n          log.warn('Too many mask layers. The max supported is 4')();\n          continue; // eslint-disable-line no-continue\n        }\n        channelInfo = {\n          id,\n          index: this.channels.findIndex(c => c?.id === id),\n          layers: [],\n          layerBounds: [],\n          coordinateOrigin: layer.root.props.coordinateOrigin,\n          coordinateSystem: layer.root.props.coordinateSystem\n        };\n        channelMap[id] = channelInfo;\n      }\n      channelInfo.layers.push(layer);\n      channelInfo.layerBounds.push(layer.getBounds());\n    }\n\n    for (let i = 0; i < 4; i++) {\n      const channelInfo = this.channels[i];\n      if (!channelInfo || !(channelInfo.id in channelMap)) {\n        // The mask id at this channel no longer exists\n        this.channels[i] = null;\n      }\n    }\n\n    for (const maskId in channelMap) {\n      const channelInfo = channelMap[maskId];\n\n      if (channelInfo.index < 0) {\n        channelInfo.index = this.channels.findIndex(c => !c);\n        this.channels[channelInfo.index] = channelInfo;\n      }\n    }\n    return channelMap;\n  }\n\n  getModuleParameters() {\n    return {\n      maskMap: this.masks ? this.maskMap : this.dummyMaskMap,\n      maskChannels: this.masks\n    };\n  }\n\n  cleanup() {\n    if (this.dummyMaskMap) {\n      this.dummyMaskMap.delete();\n      this.dummyMaskMap = null;\n    }\n\n    if (this.maskPass) {\n      this.maskPass.delete();\n      this.maskPass = null;\n      this.maskMap = null;\n    }\n\n    this.lastViewport = null;\n    this.masks = null;\n    this.channels.length = 0;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}