{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as KHR_binary_glTF from '../extensions/KHR_binary_gltf';\nvar GLTF_ARRAYS = {\n  accessors: 'accessor',\n  animations: 'animation',\n  buffers: 'buffer',\n  bufferViews: 'bufferView',\n  images: 'image',\n  materials: 'material',\n  meshes: 'mesh',\n  nodes: 'node',\n  samplers: 'sampler',\n  scenes: 'scene',\n  skins: 'skin',\n  textures: 'texture'\n};\nvar GLTF_KEYS = {\n  accessor: 'accessors',\n  animations: 'animation',\n  buffer: 'buffers',\n  bufferView: 'bufferViews',\n  image: 'images',\n  material: 'materials',\n  mesh: 'meshes',\n  node: 'nodes',\n  sampler: 'samplers',\n  scene: 'scenes',\n  skin: 'skins',\n  texture: 'textures'\n};\n\nvar GLTFV1Normalizer = /*#__PURE__*/function () {\n  function GLTFV1Normalizer() {\n    _classCallCheck(this, GLTFV1Normalizer);\n\n    _defineProperty(this, \"idToIndexMap\", {\n      animations: {},\n      accessors: {},\n      buffers: {},\n      bufferViews: {},\n      images: {},\n      materials: {},\n      meshes: {},\n      nodes: {},\n      samplers: {},\n      scenes: {},\n      skins: {},\n      textures: {}\n    });\n\n    _defineProperty(this, \"json\", void 0);\n  }\n\n  _createClass(GLTFV1Normalizer, [{\n    key: \"normalize\",\n    value: function normalize(gltf, options) {\n      this.json = gltf.json;\n      var json = gltf.json;\n\n      switch (json.asset && json.asset.version) {\n        case '2.0':\n          return;\n\n        case undefined:\n        case '1.0':\n          break;\n\n        default:\n          console.warn(\"glTF: Unknown version \".concat(json.asset.version));\n          return;\n      }\n\n      if (!options.normalize) {\n        throw new Error('glTF v1 is not supported.');\n      }\n\n      console.warn('Converting glTF v1 to glTF v2 format. This is experimental and may fail.');\n\n      this._addAsset(json);\n\n      this._convertTopLevelObjectsToArrays(json);\n\n      KHR_binary_glTF.preprocess(gltf);\n\n      this._convertObjectIdsToArrayIndices(json);\n\n      this._updateObjects(json);\n\n      this._updateMaterial(json);\n    }\n  }, {\n    key: \"_addAsset\",\n    value: function _addAsset(json) {\n      json.asset = json.asset || {};\n      json.asset.version = '2.0';\n      json.asset.generator = json.asset.generator || 'Normalized to glTF 2.0 by loaders.gl';\n    }\n  }, {\n    key: \"_convertTopLevelObjectsToArrays\",\n    value: function _convertTopLevelObjectsToArrays(json) {\n      for (var arrayName in GLTF_ARRAYS) {\n        this._convertTopLevelObjectToArray(json, arrayName);\n      }\n    }\n  }, {\n    key: \"_convertTopLevelObjectToArray\",\n    value: function _convertTopLevelObjectToArray(json, mapName) {\n      var objectMap = json[mapName];\n\n      if (!objectMap || Array.isArray(objectMap)) {\n        return;\n      }\n\n      json[mapName] = [];\n\n      for (var id in objectMap) {\n        var object = objectMap[id];\n        object.id = object.id || id;\n        var index = json[mapName].length;\n        json[mapName].push(object);\n        this.idToIndexMap[mapName][id] = index;\n      }\n    }\n  }, {\n    key: \"_convertObjectIdsToArrayIndices\",\n    value: function _convertObjectIdsToArrayIndices(json) {\n      for (var arrayName in GLTF_ARRAYS) {\n        this._convertIdsToIndices(json, arrayName);\n      }\n\n      if ('scene' in json) {\n        json.scene = this._convertIdToIndex(json.scene, 'scene');\n      }\n\n      var _iterator = _createForOfIteratorHelper(json.textures),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var texture = _step.value;\n\n          this._convertTextureIds(texture);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(json.meshes),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var mesh = _step2.value;\n\n          this._convertMeshIds(mesh);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(json.nodes),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var node = _step3.value;\n\n          this._convertNodeIds(node);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      var _iterator4 = _createForOfIteratorHelper(json.scenes),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _node = _step4.value;\n\n          this._convertSceneIds(_node);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"_convertTextureIds\",\n    value: function _convertTextureIds(texture) {\n      if (texture.source) {\n        texture.source = this._convertIdToIndex(texture.source, 'image');\n      }\n    }\n  }, {\n    key: \"_convertMeshIds\",\n    value: function _convertMeshIds(mesh) {\n      var _iterator5 = _createForOfIteratorHelper(mesh.primitives),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var primitive = _step5.value;\n          var attributes = primitive.attributes,\n              indices = primitive.indices,\n              material = primitive.material;\n\n          for (var attributeName in attributes) {\n            attributes[attributeName] = this._convertIdToIndex(attributes[attributeName], 'accessor');\n          }\n\n          if (indices) {\n            primitive.indices = this._convertIdToIndex(indices, 'accessor');\n          }\n\n          if (material) {\n            primitive.material = this._convertIdToIndex(material, 'material');\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, {\n    key: \"_convertNodeIds\",\n    value: function _convertNodeIds(node) {\n      var _this = this;\n\n      if (node.children) {\n        node.children = node.children.map(function (child) {\n          return _this._convertIdToIndex(child, 'node');\n        });\n      }\n\n      if (node.meshes) {\n        node.meshes = node.meshes.map(function (mesh) {\n          return _this._convertIdToIndex(mesh, 'mesh');\n        });\n      }\n    }\n  }, {\n    key: \"_convertSceneIds\",\n    value: function _convertSceneIds(scene) {\n      var _this2 = this;\n\n      if (scene.nodes) {\n        scene.nodes = scene.nodes.map(function (node) {\n          return _this2._convertIdToIndex(node, 'node');\n        });\n      }\n    }\n  }, {\n    key: \"_convertIdsToIndices\",\n    value: function _convertIdsToIndices(json, topLevelArrayName) {\n      if (!json[topLevelArrayName]) {\n        console.warn(\"gltf v1: json doesn't contain attribute \".concat(topLevelArrayName));\n        json[topLevelArrayName] = [];\n      }\n\n      var _iterator6 = _createForOfIteratorHelper(json[topLevelArrayName]),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var object = _step6.value;\n\n          for (var key in object) {\n            var id = object[key];\n\n            var index = this._convertIdToIndex(id, key);\n\n            object[key] = index;\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: \"_convertIdToIndex\",\n    value: function _convertIdToIndex(id, key) {\n      var arrayName = GLTF_KEYS[key];\n\n      if (arrayName in this.idToIndexMap) {\n        var index = this.idToIndexMap[arrayName][id];\n\n        if (!Number.isFinite(index)) {\n          throw new Error(\"gltf v1: failed to resolve \".concat(key, \" with id \").concat(id));\n        }\n\n        return index;\n      }\n\n      return id;\n    }\n  }, {\n    key: \"_updateObjects\",\n    value: function _updateObjects(json) {\n      var _iterator7 = _createForOfIteratorHelper(this.json.buffers),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var buffer = _step7.value;\n          delete buffer.type;\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n    }\n  }, {\n    key: \"_updateMaterial\",\n    value: function _updateMaterial(json) {\n      var _iterator8 = _createForOfIteratorHelper(json.materials),\n          _step8;\n\n      try {\n        var _loop = function _loop() {\n          var material = _step8.value;\n          material.pbrMetallicRoughness = {\n            baseColorFactor: [1, 1, 1, 1],\n            metallicFactor: 1,\n            roughnessFactor: 1\n          };\n          var textureId = material.values && material.values.tex;\n          var textureIndex = json.textures.findIndex(function (texture) {\n            return texture.id === textureId;\n          });\n\n          if (textureIndex !== -1) {\n            material.pbrMetallicRoughness.baseColorTexture = {\n              index: textureIndex\n            };\n          }\n        };\n\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n  }]);\n\n  return GLTFV1Normalizer;\n}();\n\nexport function normalizeGLTFV1(gltf) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new GLTFV1Normalizer().normalize(gltf, options);\n}","map":{"version":3,"mappings":"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","names":["KHR_binary_glTF","GLTF_ARRAYS","accessors","animations","buffers","bufferViews","images","materials","meshes","nodes","samplers","scenes","skins","textures","GLTF_KEYS","accessor","buffer","bufferView","image","material","mesh","node","sampler","scene","skin","texture","GLTFV1Normalizer","_defineProperty","normalize","gltf","options","json","asset","version","undefined","console","warn","Error","_addAsset","_convertTopLevelObjectsToArrays","preprocess","_convertObjectIdsToArrayIndices","_updateObjects","_updateMaterial","generator","arrayName","_convertTopLevelObjectToArray","mapName","objectMap","Array","isArray","id","object","index","length","push","idToIndexMap","_convertIdsToIndices","_convertIdToIndex","_convertTextureIds","_convertMeshIds","_convertNodeIds","_convertSceneIds","source","primitives","primitive","attributes","indices","attributeName","children","map","child","topLevelArrayName","key","Number","isFinite","type","pbrMetallicRoughness","baseColorFactor","metallicFactor","roughnessFactor","textureId","values","tex","textureIndex","findIndex","baseColorTexture","normalizeGLTFV1"],"sources":["../../../../src/lib/api/normalize-gltf-v1.ts"],"sourcesContent":["/* eslint-disable camelcase */\nimport * as KHR_binary_glTF from '../extensions/KHR_binary_gltf';\n\n// Binary format changes (mainly implemented by GLBLoader)\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/1.0/Khronos/KHR_binary_glTF\n\n// JSON format changes:\n// https://github.com/khronosgroup/gltf/issues/605\n\n// - [x] Top-level JSON objects are arrays now\n// - [ ] Removed indirection from animation: sampler now refers directly to accessors, #712\n// - [ ] material.parameter.value and technique.parameter.value must be an array, #690\n// - [ ] Node can have only one mesh #821\n// - [ ] Added reqs on JSON encoding\n// - [ ] Added reqs on binary data alignment #802 (comment)\n\n// Additions:\n// - [ ] Added accessor.normalized, #691, #706\n// - [ ] Added glExtensionsUsed property and 5125 (UNSIGNED_INT) accessor.componentType value, #619\n// - [ ] Added extensionsRequired property, #720, #721\n// - [ ] Added \"STEP\" as valid animation.sampler.interpolation value, #712\n\n// Removals:\n// - [x] Removed buffer.type, #786, #629\n// - [ ] Removed revision number from profile.version, #709\n// - [ ] Removed technique.functions.scissor and removed 3089 (SCISSOR_TEST) as a valid value for technique.states.enable, #681\n// - [ ] Techniques, programs, and shaders were moved out to KHR_technique_webgl extension.\n\n// Other edits:\n// - [x] asset is now required, #642\n// - [ ] buffer.byteLength and bufferView.byteLength are now required, #560.\n// - [ ] accessor.min and accessor.max are now required, #593, and clarified that the JSON value and binary data must be the same, #628.\n// - [ ] Clarified animation.sampler and animation.channel restrictions, #712\n// - [ ] skin.inverseBindMatrices is now optional, #461.\n// - [ ] Attribute parameters can't have a value defined in the technique or parameter, #563 (comment).\n// - [ ] Only TEXCOORD and COLOR attribute semantics can be written in the form [semantic]_[set_index], #563 (comment).\n// - [ ] TEXCOORD and COLOR attribute semantics must be written in the form [semantic]_[set_index], e.g., just TEXCOORD should be TEXCOORD_0, and just COLOR should be COLOR_0, #649\n// - [ ] camera.perspective.aspectRatio and camera.perspective.yfov must now be > 0, not >= 0, #563 (comment).\n// - [ ] Application-specific parameter semantics must start with an underscore, e.g., _TEMPERATURE and _SIMULATION_TIME, #563 (comment).\n// - [ ] Properties in technique.parameters must be defined in technique.uniforms or technique.attributes,\n\n// #563 (comment).\n// - [ ] technique.parameter.count can only be defined when the semantic is JOINTMATRIX or an application-specific semantic is used. It can never be defined for attribute parameters; only uniforms, d2f6945\n// - [ ] technique.parameter.semantic is required when the parameter is an attribute, 28e113d\n// - [ ] Mesh-only models are allowed, e.g., without materials, #642\n// - [ ] Skeleton hierarchies (nodes containing jointName) must be separated from non-skeleton hierarchies., #647\n// - [ ] technique.states.functions.blendColor and technique.states.functions.depthRange parameters now must match WebGL function min/max, #707\n\nconst GLTF_ARRAYS = {\n  accessors: 'accessor',\n  animations: 'animation',\n  buffers: 'buffer',\n  bufferViews: 'bufferView',\n  images: 'image',\n  materials: 'material',\n  meshes: 'mesh',\n  nodes: 'node',\n  samplers: 'sampler',\n  scenes: 'scene',\n  skins: 'skin',\n  textures: 'texture'\n};\n\nconst GLTF_KEYS = {\n  accessor: 'accessors',\n  animations: 'animation',\n  buffer: 'buffers',\n  bufferView: 'bufferViews',\n  image: 'images',\n  material: 'materials',\n  mesh: 'meshes',\n  node: 'nodes',\n  sampler: 'samplers',\n  scene: 'scenes',\n  skin: 'skins',\n  texture: 'textures'\n};\n\n/**\n * Converts (normalizes) glTF v1 to v2\n */\nclass GLTFV1Normalizer {\n  idToIndexMap = {\n    animations: {},\n    accessors: {},\n    buffers: {},\n    bufferViews: {},\n    images: {},\n    materials: {},\n    meshes: {},\n    nodes: {},\n    samplers: {},\n    scenes: {},\n    skins: {},\n    textures: {}\n  };\n\n  json;\n\n  // constructor() {}\n\n  /**\n   * Convert (normalize) glTF < 2.0 to glTF 2.0\n   * @param gltf - object with json and binChunks\n   * @param options\n   * @param options normalize Whether to actually normalize\n   */\n  normalize(gltf, options) {\n    this.json = gltf.json;\n    const json = gltf.json;\n\n    // Check version\n    switch (json.asset && json.asset.version) {\n      // We are converting to v2 format. Return if there is nothing to do\n      case '2.0':\n        return;\n\n      // This class is written to convert 1.0\n      case undefined:\n      case '1.0':\n        break;\n\n      default:\n        // eslint-disable-next-line no-undef, no-console\n        console.warn(`glTF: Unknown version ${json.asset.version}`);\n        return;\n    }\n\n    if (!options.normalize) {\n      // We are still missing a few conversion tricks, remove once addressed\n      throw new Error('glTF v1 is not supported.');\n    }\n\n    // eslint-disable-next-line no-undef, no-console\n    console.warn('Converting glTF v1 to glTF v2 format. This is experimental and may fail.');\n\n    this._addAsset(json);\n\n    // In glTF2 top-level fields are Arrays not Object maps\n    this._convertTopLevelObjectsToArrays(json);\n\n    // Extract bufferView indices for images\n    // (this extension needs to be invoked early in the normalization process)\n    // TODO can this be handled by standard extension processing instead of called explicitly?\n    KHR_binary_glTF.preprocess(gltf);\n\n    // Convert object references from ids to indices\n    this._convertObjectIdsToArrayIndices(json);\n\n    this._updateObjects(json);\n\n    this._updateMaterial(json);\n  }\n\n  // asset is now required, #642 https://github.com/KhronosGroup/glTF/issues/639\n  _addAsset(json) {\n    json.asset = json.asset || {};\n    // We are normalizing to glTF v2, so change version to \"2.0\"\n    json.asset.version = '2.0';\n    json.asset.generator = json.asset.generator || 'Normalized to glTF 2.0 by loaders.gl';\n  }\n\n  _convertTopLevelObjectsToArrays(json) {\n    // TODO check that all arrays are covered\n    for (const arrayName in GLTF_ARRAYS) {\n      this._convertTopLevelObjectToArray(json, arrayName);\n    }\n  }\n\n  /** Convert one top level object to array */\n  _convertTopLevelObjectToArray(json, mapName) {\n    const objectMap = json[mapName];\n    if (!objectMap || Array.isArray(objectMap)) {\n      return;\n    }\n\n    // Rewrite the top-level field as an array\n    json[mapName] = [];\n    // Copy the map key into object.id\n    for (const id in objectMap) {\n      const object = objectMap[id];\n      object.id = object.id || id; // Mutates the loaded object\n      const index = json[mapName].length;\n      json[mapName].push(object);\n      this.idToIndexMap[mapName][id] = index;\n    }\n  }\n\n  /** Go through all objects in all top-level arrays and replace ids with indices */\n  _convertObjectIdsToArrayIndices(json) {\n    for (const arrayName in GLTF_ARRAYS) {\n      this._convertIdsToIndices(json, arrayName);\n    }\n    if ('scene' in json) {\n      json.scene = this._convertIdToIndex(json.scene, 'scene');\n    }\n\n    // Convert any index references that are not using array names\n\n    // texture.source (image)\n    for (const texture of json.textures) {\n      this._convertTextureIds(texture);\n    }\n    for (const mesh of json.meshes) {\n      this._convertMeshIds(mesh);\n    }\n    for (const node of json.nodes) {\n      this._convertNodeIds(node);\n    }\n    for (const node of json.scenes) {\n      this._convertSceneIds(node);\n    }\n  }\n\n  _convertTextureIds(texture) {\n    if (texture.source) {\n      texture.source = this._convertIdToIndex(texture.source, 'image');\n    }\n  }\n\n  _convertMeshIds(mesh) {\n    for (const primitive of mesh.primitives) {\n      const {attributes, indices, material} = primitive;\n      for (const attributeName in attributes) {\n        attributes[attributeName] = this._convertIdToIndex(attributes[attributeName], 'accessor');\n      }\n      if (indices) {\n        primitive.indices = this._convertIdToIndex(indices, 'accessor');\n      }\n      if (material) {\n        primitive.material = this._convertIdToIndex(material, 'material');\n      }\n    }\n  }\n\n  _convertNodeIds(node) {\n    if (node.children) {\n      node.children = node.children.map((child) => this._convertIdToIndex(child, 'node'));\n    }\n    if (node.meshes) {\n      node.meshes = node.meshes.map((mesh) => this._convertIdToIndex(mesh, 'mesh'));\n    }\n  }\n\n  _convertSceneIds(scene) {\n    if (scene.nodes) {\n      scene.nodes = scene.nodes.map((node) => this._convertIdToIndex(node, 'node'));\n    }\n  }\n\n  /** Go through all objects in a top-level array and replace ids with indices */\n  _convertIdsToIndices(json, topLevelArrayName) {\n    if (!json[topLevelArrayName]) {\n      console.warn(`gltf v1: json doesn't contain attribute ${topLevelArrayName}`); // eslint-disable-line no-console, no-undef\n      json[topLevelArrayName] = [];\n    }\n    for (const object of json[topLevelArrayName]) {\n      for (const key in object) {\n        const id = object[key];\n        const index = this._convertIdToIndex(id, key);\n        object[key] = index;\n      }\n    }\n  }\n\n  _convertIdToIndex(id, key) {\n    const arrayName = GLTF_KEYS[key];\n    if (arrayName in this.idToIndexMap) {\n      const index = this.idToIndexMap[arrayName][id];\n      if (!Number.isFinite(index)) {\n        throw new Error(`gltf v1: failed to resolve ${key} with id ${id}`);\n      }\n      return index;\n    }\n    return id;\n  }\n\n  /**\n   *\n   * @param {*} json\n   */\n  _updateObjects(json) {\n    for (const buffer of this.json.buffers) {\n      // - [x] Removed buffer.type, #786, #629\n      delete buffer.type;\n    }\n  }\n\n  /**\n   * Update material (set pbrMetallicRoughness)\n   * @param {*} json\n   */\n  _updateMaterial(json) {\n    for (const material of json.materials) {\n      material.pbrMetallicRoughness = {\n        baseColorFactor: [1, 1, 1, 1],\n        metallicFactor: 1,\n        roughnessFactor: 1\n      };\n\n      const textureId = material.values && material.values.tex;\n      const textureIndex = json.textures.findIndex((texture) => texture.id === textureId);\n      if (textureIndex !== -1) {\n        material.pbrMetallicRoughness.baseColorTexture = {index: textureIndex};\n      }\n    }\n  }\n}\n\nexport function normalizeGLTFV1(gltf, options = {}) {\n  return new GLTFV1Normalizer().normalize(gltf, options);\n}\n"]},"metadata":{},"sourceType":"module"}