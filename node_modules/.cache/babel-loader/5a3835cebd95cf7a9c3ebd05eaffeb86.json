{"ast":null,"code":"import _defineProperty from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { decomposeCompositeGLType } from '../webgl-utils/attribute-utils';\nimport { assert } from '../utils/assert';\nvar ERR_ARGUMENT = 'UniformBufferLayout illegal argument';\nvar GL_FLOAT = 0x1406;\nvar GL_INT = 0x1404;\nvar GL_UNSIGNED_INT = 0x1405;\n\nvar UniformBufferLayout = /*#__PURE__*/function () {\n  function UniformBufferLayout(layout) {\n    var _this$typedArray;\n\n    _classCallCheck(this, UniformBufferLayout);\n\n    this.layout = {};\n    this.size = 0;\n\n    for (var key in layout) {\n      this._addUniform(key, layout[key]);\n    }\n\n    this.size += (4 - this.size % 4) % 4;\n    var data = new Float32Array(this.size);\n    this.typedArray = (_this$typedArray = {}, _defineProperty(_this$typedArray, GL_FLOAT, data), _defineProperty(_this$typedArray, GL_INT, new Int32Array(data.buffer)), _defineProperty(_this$typedArray, GL_UNSIGNED_INT, new Uint32Array(data.buffer)), _this$typedArray);\n  }\n\n  _createClass(UniformBufferLayout, [{\n    key: \"getBytes\",\n    value: function getBytes() {\n      return this.size * 4;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this.typedArray[GL_FLOAT];\n    }\n  }, {\n    key: \"getSubData\",\n    value: function getSubData(index) {\n      var data;\n      var offset;\n\n      if (index === undefined) {\n        data = this.data;\n        offset = 0;\n      } else {\n        var begin = this.offsets[index];\n        var end = begin + this.sizes[index];\n        data = this.data.subarray(begin, end);\n        offset = begin * 4;\n      }\n\n      return {\n        data: data,\n        offset: offset\n      };\n    }\n  }, {\n    key: \"setUniforms\",\n    value: function setUniforms(values) {\n      for (var key in values) {\n        this._setValue(key, values[key]);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_setValue\",\n    value: function _setValue(key, value) {\n      var layout = this.layout[key];\n      assert(layout, 'UniformLayoutStd140 illegal argument');\n      var typedArray = this.typedArray[layout.type];\n\n      if (layout.size === 1) {\n        typedArray[layout.offset] = value;\n      } else {\n        typedArray.set(value, layout.offset);\n      }\n    }\n  }, {\n    key: \"_addUniform\",\n    value: function _addUniform(key, uniformType) {\n      var typeAndComponents = decomposeCompositeGLType(uniformType);\n      assert(typeAndComponents, ERR_ARGUMENT);\n      var type = typeAndComponents.type,\n          count = typeAndComponents.components;\n      this.size = this._alignTo(this.size, count);\n      var offset = this.size;\n      this.size += count;\n      this.layout[key] = {\n        type: type,\n        size: count,\n        offset: offset\n      };\n    }\n  }, {\n    key: \"_alignTo\",\n    value: function _alignTo(size, count) {\n      switch (count) {\n        case 1:\n          return size;\n\n        case 2:\n          return size + size % 2;\n\n        default:\n          return size + (4 - size % 4) % 4;\n      }\n    }\n  }]);\n\n  return UniformBufferLayout;\n}();\n\nexport { UniformBufferLayout as default };","map":{"version":3,"mappings":"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","names":["decomposeCompositeGLType","assert","ERR_ARGUMENT","GL_FLOAT","GL_INT","GL_UNSIGNED_INT","UniformBufferLayout","constructor","layout","size","key","_addUniform","data","Float32Array","typedArray","Int32Array","buffer","Uint32Array","getBytes","getData","getSubData","index","offset","undefined","begin","offsets","end","sizes","subarray","setUniforms","values","_setValue","value","type","set","uniformType","typeAndComponents","count","components","_alignTo"],"sources":["../../../src/classes/uniform-buffer-layout.js"],"sourcesContent":["// @ts-nocheck\n\n/* eslint-disable camelcase */\nimport {decomposeCompositeGLType} from '../webgl-utils/attribute-utils';\nimport {assert} from '../utils/assert';\n\nconst ERR_ARGUMENT = 'UniformBufferLayout illegal argument';\n\n// Local constants - these will \"collapse\" during minification\nconst GL_FLOAT = 0x1406;\nconst GL_INT = 0x1404;\nconst GL_UNSIGNED_INT = 0x1405;\n\n// Std140 layout for uniforms\nexport default class UniformBufferLayout {\n  constructor(layout) {\n    this.layout = {};\n    this.size = 0;\n\n    // Add layout (type, size and offset) definitions for each uniform in the layout\n    for (const key in layout) {\n      this._addUniform(key, layout[key]);\n    }\n\n    this.size += (4 - (this.size % 4)) % 4;\n\n    // Allocate three typed arrays pointing at same memory\n    const data = new Float32Array(this.size);\n    this.typedArray = {\n      [GL_FLOAT]: data,\n      [GL_INT]: new Int32Array(data.buffer),\n      [GL_UNSIGNED_INT]: new Uint32Array(data.buffer)\n    };\n  }\n\n  // Get number of bytes needed for buffer allocation\n  getBytes() {\n    return this.size * 4;\n  }\n\n  // Get the current data as Float32Array, for bufferSubData\n  getData() {\n    return this.typedArray[GL_FLOAT];\n  }\n\n  // Get offset and data for one object (for bufferSubData)\n  getSubData(index) {\n    let data;\n    let offset;\n    if (index === undefined) {\n      data = this.data;\n      offset = 0;\n    } else {\n      const begin = this.offsets[index];\n      const end = begin + this.sizes[index];\n      data = this.data.subarray(begin, end);\n      offset = begin * 4;\n    }\n    return {data, offset};\n  }\n\n  // Set a map of values\n  setUniforms(values) {\n    for (const key in values) {\n      this._setValue(key, values[key]);\n    }\n    return this;\n  }\n\n  _setValue(key, value) {\n    const layout = this.layout[key];\n    assert(layout, 'UniformLayoutStd140 illegal argument');\n    const typedArray = this.typedArray[layout.type];\n    if (layout.size === 1) {\n      // single value -> just set it\n      typedArray[layout.offset] = value;\n    } else {\n      // vector/matrix -> copy the supplied (typed) array, starting from offset\n      typedArray.set(value, layout.offset);\n    }\n  }\n\n  _addUniform(key, uniformType) {\n    const typeAndComponents = decomposeCompositeGLType(uniformType);\n    assert(typeAndComponents, ERR_ARGUMENT);\n    const {type, components: count} = typeAndComponents;\n\n    // First, align (bump) current offset to an even multiple of current object (1, 2, 4)\n    this.size = this._alignTo(this.size, count);\n    // Use the aligned size as the offset of the current uniform.\n    const offset = this.size;\n    // Then, add our object's padded size ((1, 2, multiple of 4) to the current offset\n    this.size += count;\n\n    this.layout[key] = {type, size: count, offset};\n  }\n\n  // Align offset to 1, 2 or 4 elements (4, 8 or 16 bytes)\n  _alignTo(size, count) {\n    switch (count) {\n      case 1:\n        return size; // Pad upwards to even multiple of 2\n      case 2:\n        return size + (size % 2); // Pad upwards to even multiple of 2\n      default:\n        return size + ((4 - (size % 4)) % 4); // Pad upwards to even multiple of 4\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}