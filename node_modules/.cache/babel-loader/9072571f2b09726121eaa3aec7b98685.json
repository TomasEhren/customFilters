{"ast":null,"code":"import _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport DRACOBuilder from './lib/draco-builder';\nimport { loadDracoEncoderModule } from './lib/draco-module-loader';\nimport { VERSION } from './lib/utils/version';\nvar DEFAULT_DRACO_OPTIONS = {\n  pointcloud: false,\n  attributeNameEntry: 'name'\n};\nexport var DracoWriter = {\n  name: 'DRACO',\n  id: 'draco',\n  module: 'draco',\n  version: VERSION,\n  extensions: ['drc'],\n  encode: encode,\n  options: {\n    draco: DEFAULT_DRACO_OPTIONS\n  }\n};\n\nfunction encode(_x) {\n  return _encode.apply(this, arguments);\n}\n\nfunction _encode() {\n  _encode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n    var options,\n        _yield$loadDracoEncod,\n        draco,\n        dracoBuilder,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            _context.next = 3;\n            return loadDracoEncoderModule(options);\n\n          case 3:\n            _yield$loadDracoEncod = _context.sent;\n            draco = _yield$loadDracoEncod.draco;\n            dracoBuilder = new DRACOBuilder(draco);\n            _context.prev = 6;\n            return _context.abrupt(\"return\", dracoBuilder.encodeSync(data, options.draco));\n\n          case 8:\n            _context.prev = 8;\n            dracoBuilder.destroy();\n            return _context.finish(8);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[6,, 8, 11]]);\n  }));\n  return _encode.apply(this, arguments);\n}","map":{"version":3,"mappings":";;AAGA,OAAOA,YAAP,MAAyB,qBAAzB;AACA,SAAQC,sBAAR,QAAqC,2BAArC;AACA,SAAQC,OAAR,QAAsB,qBAAtB;AAIA,IAAMC,qBAAqB,GAAG;EAC5BC,UAAU,EAAE,KADgB;EAE5BC,kBAAkB,EAAE;AAFQ,CAA9B;AAcA,OAAO,IAAMC,WAAmB,GAAG;EACjCC,IAAI,EAAE,OAD2B;EAEjCC,EAAE,EAAE,OAF6B;EAGjCC,MAAM,EAAE,OAHyB;EAIjCC,OAAO,EAAER,OAJwB;EAKjCS,UAAU,EAAE,CAAC,KAAD,CALqB;EAMjCC,MANiC,EAMjCA,MANiC;EAOjCC,OAAO,EAAE;IACPC,KAAK,EAAEX;EADA;AAPwB,CAA5B;;SAYQS,M;;;;;qEAAf,iBACEG,IADF;IAAA;IAAA;IAAA;IAAA;IAAA;;IAAA;MAAA;QAAA;UAAA;YAEEF,OAFF,2DAE0C,EAF1C;YAAA;YAAA,OAKwBZ,sBAAsB,CAACY,OAAD,CAL9C;;UAAA;YAAA;YAKSC,KALT,yBAKSA,KALT;YAMQE,YANR,GAMuB,IAAIhB,YAAJ,CAAiBc,KAAjB,CANvB;YAAA;YAAA,iCASWE,YAAY,CAACC,UAAbD,CAAwBD,IAAxBC,EAA8BH,OAAO,CAACC,KAAtCE,CATX;;UAAA;YAAA;YAWIA,YAAY,CAACE,OAAbF;YAXJ;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","names":["DRACOBuilder","loadDracoEncoderModule","VERSION","DEFAULT_DRACO_OPTIONS","pointcloud","attributeNameEntry","DracoWriter","name","id","module","version","extensions","encode","options","draco","data","dracoBuilder","encodeSync","destroy"],"sources":["../../src/draco-writer.ts"],"sourcesContent":["import type {Writer} from '@loaders.gl/loader-utils';\nimport type {DracoMesh} from './lib/draco-types';\nimport type {DracoBuildOptions} from './lib/draco-builder';\nimport DRACOBuilder from './lib/draco-builder';\nimport {loadDracoEncoderModule} from './lib/draco-module-loader';\nimport {VERSION} from './lib/utils/version';\n\nexport type DracoWriterOptions = DracoBuildOptions & {};\n\nconst DEFAULT_DRACO_OPTIONS = {\n  pointcloud: false, // Set to true if pointcloud (mode: 0, no indices)\n  attributeNameEntry: 'name'\n  // Draco Compression Parameters\n  // method: 'MESH_EDGEBREAKER_ENCODING',\n  // speed: [5, 5],\n  // quantization: {\n  //   POSITION: 10\n  // }\n};\n\n/**\n * Exporter for Draco3D compressed geometries\n */\nexport const DracoWriter: Writer = {\n  name: 'DRACO',\n  id: 'draco',\n  module: 'draco',\n  version: VERSION,\n  extensions: ['drc'],\n  encode,\n  options: {\n    draco: DEFAULT_DRACO_OPTIONS\n  }\n};\n\nasync function encode(\n  data: DracoMesh,\n  options: {draco?: DracoWriterOptions} = {}\n): Promise<ArrayBuffer> {\n  // Dynamically load draco\n  const {draco} = await loadDracoEncoderModule(options);\n  const dracoBuilder = new DRACOBuilder(draco);\n\n  try {\n    return dracoBuilder.encodeSync(data, options.draco);\n  } finally {\n    dracoBuilder.destroy();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}