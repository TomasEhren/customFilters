{"ast":null,"code":"import _defineProperty from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { log } from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport { AGGREGATION_OPERATION, getValueFunc } from '../utils/aggregation-operation-utils';\nimport ScreenGridCellLayer from './screen-grid-cell-layer';\nimport GridAggregationLayer from '../grid-aggregation-layer';\nimport { getFloatTexture } from '../utils/resource-utils.js';\n\nvar defaultProps = _objectSpread(_objectSpread({}, ScreenGridCellLayer.defaultProps), {}, {\n  getPosition: {\n    type: 'accessor',\n    value: function value(d) {\n      return d.position;\n    }\n  },\n  getWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  gpuAggregation: true,\n  aggregation: 'SUM'\n});\n\nvar POSITION_ATTRIBUTE_NAME = 'positions';\nvar DIMENSIONS = {\n  data: {\n    props: ['cellSizePixels']\n  },\n  weights: {\n    props: ['aggregation'],\n    accessors: ['getWeight']\n  }\n};\n\nvar ScreenGridLayer = /*#__PURE__*/function (_GridAggregationLayer) {\n  _inherits(ScreenGridLayer, _GridAggregationLayer);\n\n  var _super = _createSuper(ScreenGridLayer);\n\n  function ScreenGridLayer() {\n    _classCallCheck(this, ScreenGridLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ScreenGridLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var _attributeManager$add;\n\n      var gl = this.context.gl;\n\n      if (!ScreenGridCellLayer.isSupported(gl)) {\n        this.setState({\n          supported: false\n        });\n        log.error(\"ScreenGridLayer: \".concat(this.id, \" is not supported on this browser\"))();\n        return;\n      }\n\n      _get(_getPrototypeOf(ScreenGridLayer.prototype), \"initializeState\", this).call(this, {\n        dimensions: DIMENSIONS,\n        getCellSize: function getCellSize(props) {\n          return props.cellSizePixels;\n        }\n      });\n\n      var weights = {\n        count: {\n          size: 1,\n          operation: AGGREGATION_OPERATION.SUM,\n          needMax: true,\n          maxTexture: getFloatTexture(gl, {\n            id: \"\".concat(this.id, \"-max-texture\")\n          })\n        }\n      };\n      this.setState({\n        supported: true,\n        projectPoints: true,\n        weights: weights,\n        subLayerData: {\n          attributes: {}\n        },\n        maxTexture: weights.count.maxTexture,\n        positionAttributeName: 'positions',\n        posOffset: [0, 0],\n        translation: [1, -1]\n      });\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add((_attributeManager$add = {}, _defineProperty(_attributeManager$add, POSITION_ATTRIBUTE_NAME, {\n        size: 3,\n        accessor: 'getPosition',\n        type: 5130,\n        fp64: this.use64bitPositions()\n      }), _defineProperty(_attributeManager$add, \"count\", {\n        size: 3,\n        accessor: 'getWeight'\n      }), _attributeManager$add));\n    }\n  }, {\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref) {\n      var changeFlags = _ref.changeFlags;\n      return this.state.supported && changeFlags.somethingChanged;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      _get(_getPrototypeOf(ScreenGridLayer.prototype), \"updateState\", this).call(this, opts);\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      if (!this.state.supported) {\n        return [];\n      }\n\n      var _this$state = this.state,\n          maxTexture = _this$state.maxTexture,\n          numRow = _this$state.numRow,\n          numCol = _this$state.numCol,\n          weights = _this$state.weights;\n      var updateTriggers = this.props.updateTriggers;\n      var aggregationBuffer = weights.count.aggregationBuffer;\n      var CellLayerClass = this.getSubLayerClass('cells', ScreenGridCellLayer);\n      return new CellLayerClass(this.props, this.getSubLayerProps({\n        id: 'cell-layer',\n        updateTriggers: updateTriggers\n      }), {\n        data: {\n          attributes: {\n            instanceCounts: aggregationBuffer\n          }\n        },\n        maxTexture: maxTexture,\n        numInstances: numRow * numCol\n      });\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      _get(_getPrototypeOf(ScreenGridLayer.prototype), \"finalizeState\", this).call(this);\n\n      var _this$state2 = this.state,\n          aggregationBuffer = _this$state2.aggregationBuffer,\n          maxBuffer = _this$state2.maxBuffer,\n          maxTexture = _this$state2.maxTexture;\n      aggregationBuffer === null || aggregationBuffer === void 0 ? void 0 : aggregationBuffer.delete();\n      maxBuffer === null || maxBuffer === void 0 ? void 0 : maxBuffer.delete();\n      maxTexture === null || maxTexture === void 0 ? void 0 : maxTexture.delete();\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref2) {\n      var info = _ref2.info,\n          mode = _ref2.mode;\n      var index = info.index;\n\n      if (index >= 0) {\n        var _this$state3 = this.state,\n            gpuGridAggregator = _this$state3.gpuGridAggregator,\n            gpuAggregation = _this$state3.gpuAggregation,\n            weights = _this$state3.weights;\n        var aggregationResults = gpuAggregation ? gpuGridAggregator.getData('count') : weights.count;\n        info.object = GPUGridAggregator.getAggregationData(_objectSpread({\n          pixelIndex: index\n        }, aggregationResults));\n      }\n\n      return info;\n    }\n  }, {\n    key: \"updateResults\",\n    value: function updateResults(_ref3) {\n      var aggregationData = _ref3.aggregationData,\n          maxData = _ref3.maxData;\n      var count = this.state.weights.count;\n      count.aggregationData = aggregationData;\n      count.aggregationBuffer.setData({\n        data: aggregationData\n      });\n      count.maxData = maxData;\n      count.maxTexture.setImageData({\n        data: maxData\n      });\n    }\n  }, {\n    key: \"updateAggregationState\",\n    value: function updateAggregationState(opts) {\n      var cellSize = opts.props.cellSizePixels;\n      var cellSizeChanged = opts.oldProps.cellSizePixels !== cellSize;\n      var viewportChanged = opts.changeFlags.viewportChanged;\n      var gpuAggregation = opts.props.gpuAggregation;\n\n      if (this.state.gpuAggregation !== opts.props.gpuAggregation) {\n        if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.gl)) {\n          log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n          gpuAggregation = false;\n        }\n      }\n\n      var gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n      this.setState({\n        gpuAggregation: gpuAggregation\n      });\n      var positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n      var dimensions = this.state.dimensions;\n      var data = dimensions.data,\n          weights = dimensions.weights;\n      var aggregationDataDirty = positionsChanged || gpuAggregationChanged || viewportChanged || this.isAggregationDirty(opts, {\n        compareAll: gpuAggregation,\n        dimension: data\n      });\n      var aggregationWeightsDirty = this.isAggregationDirty(opts, {\n        dimension: weights\n      });\n      this.setState({\n        aggregationDataDirty: aggregationDataDirty,\n        aggregationWeightsDirty: aggregationWeightsDirty\n      });\n      var viewport = this.context.viewport;\n\n      if (viewportChanged || cellSizeChanged) {\n        var width = viewport.width,\n            height = viewport.height;\n        var numCol = Math.ceil(width / cellSize);\n        var numRow = Math.ceil(height / cellSize);\n        this.allocateResources(numRow, numCol);\n        this.setState({\n          scaling: [width / 2, -height / 2, 1],\n          gridOffset: {\n            xOffset: cellSize,\n            yOffset: cellSize\n          },\n          width: width,\n          height: height,\n          numCol: numCol,\n          numRow: numRow\n        });\n      }\n\n      if (aggregationWeightsDirty) {\n        this._updateAccessors(opts);\n      }\n\n      if (aggregationDataDirty || aggregationWeightsDirty) {\n        this._resetResults();\n      }\n    }\n  }, {\n    key: \"_updateAccessors\",\n    value: function _updateAccessors(opts) {\n      var _opts$props = opts.props,\n          getWeight = _opts$props.getWeight,\n          aggregation = _opts$props.aggregation,\n          data = _opts$props.data;\n      var count = this.state.weights.count;\n\n      if (count) {\n        count.getWeight = getWeight;\n        count.operation = AGGREGATION_OPERATION[aggregation];\n      }\n\n      this.setState({\n        getValue: getValueFunc(aggregation, getWeight, {\n          data: data\n        })\n      });\n    }\n  }, {\n    key: \"_resetResults\",\n    value: function _resetResults() {\n      var count = this.state.weights.count;\n\n      if (count) {\n        count.aggregationData = null;\n      }\n    }\n  }]);\n\n  return ScreenGridLayer;\n}(GridAggregationLayer);\n\nexport { ScreenGridLayer as default };\nScreenGridLayer.layerName = 'ScreenGridLayer';\nScreenGridLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["log","GPUGridAggregator","AGGREGATION_OPERATION","getValueFunc","ScreenGridCellLayer","GridAggregationLayer","getFloatTexture","defaultProps","getPosition","type","value","d","position","getWeight","gpuAggregation","aggregation","POSITION_ATTRIBUTE_NAME","DIMENSIONS","data","props","weights","accessors","ScreenGridLayer","initializeState","gl","context","isSupported","setState","supported","error","id","dimensions","getCellSize","cellSizePixels","count","size","operation","SUM","needMax","maxTexture","projectPoints","subLayerData","attributes","positionAttributeName","posOffset","translation","attributeManager","getAttributeManager","add","accessor","fp64","use64bitPositions","shouldUpdateState","changeFlags","state","somethingChanged","updateState","opts","renderLayers","numRow","numCol","updateTriggers","aggregationBuffer","CellLayerClass","getSubLayerClass","getSubLayerProps","instanceCounts","numInstances","finalizeState","maxBuffer","delete","getPickingInfo","info","mode","index","gpuGridAggregator","aggregationResults","getData","object","getAggregationData","pixelIndex","updateResults","aggregationData","maxData","setData","setImageData","updateAggregationState","cellSize","cellSizeChanged","oldProps","viewportChanged","warn","gpuAggregationChanged","positionsChanged","isAttributeChanged","aggregationDataDirty","isAggregationDirty","compareAll","dimension","aggregationWeightsDirty","viewport","width","height","Math","ceil","allocateResources","scaling","gridOffset","xOffset","yOffset","_updateAccessors","_resetResults","getValue","layerName"],"sources":["../../../src/screen-grid-layer/screen-grid-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION, getValueFunc} from '../utils/aggregation-operation-utils';\nimport ScreenGridCellLayer from './screen-grid-cell-layer';\nimport GridAggregationLayer from '../grid-aggregation-layer';\nimport {getFloatTexture} from '../utils/resource-utils.js';\n\nconst defaultProps = {\n  ...ScreenGridCellLayer.defaultProps,\n  getPosition: {type: 'accessor', value: d => d.position},\n  getWeight: {type: 'accessor', value: 1},\n\n  gpuAggregation: true,\n  aggregation: 'SUM'\n};\n\nconst POSITION_ATTRIBUTE_NAME = 'positions';\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSizePixels']\n  },\n  weights: {\n    props: ['aggregation'],\n    accessors: ['getWeight']\n  }\n};\n\nexport default class ScreenGridLayer extends GridAggregationLayer {\n  initializeState() {\n    const {gl} = this.context;\n    if (!ScreenGridCellLayer.isSupported(gl)) {\n      // max aggregated value is sampled from a float texture\n      this.setState({supported: false});\n      log.error(`ScreenGridLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    super.initializeState({\n      dimensions: DIMENSIONS,\n      getCellSize: props => props.cellSizePixels\n    });\n    const weights = {\n      count: {\n        size: 1,\n        operation: AGGREGATION_OPERATION.SUM,\n        needMax: true,\n        maxTexture: getFloatTexture(gl, {id: `${this.id}-max-texture`})\n      }\n    };\n    this.setState({\n      supported: true,\n      projectPoints: true, // aggregation in screen space\n      weights,\n      subLayerData: {attributes: {}},\n      maxTexture: weights.count.maxTexture,\n      positionAttributeName: 'positions',\n      posOffset: [0, 0],\n      translation: [1, -1]\n    });\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions()\n      },\n      // this attribute is used in gpu aggregation path only\n      count: {size: 3, accessor: 'getWeight'}\n    });\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return this.state.supported && changeFlags.somethingChanged;\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n  }\n\n  renderLayers() {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {maxTexture, numRow, numCol, weights} = this.state;\n    const {updateTriggers} = this.props;\n    const {aggregationBuffer} = weights.count;\n    const CellLayerClass = this.getSubLayerClass('cells', ScreenGridCellLayer);\n\n    return new CellLayerClass(\n      this.props,\n      this.getSubLayerProps({\n        id: 'cell-layer',\n        updateTriggers\n      }),\n      {\n        data: {attributes: {instanceCounts: aggregationBuffer}},\n        maxTexture,\n        numInstances: numRow * numCol\n      }\n    );\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    const {aggregationBuffer, maxBuffer, maxTexture} = this.state;\n\n    aggregationBuffer?.delete();\n    maxBuffer?.delete();\n    maxTexture?.delete();\n  }\n\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n    if (index >= 0) {\n      const {gpuGridAggregator, gpuAggregation, weights} = this.state;\n      // Get count aggregation results\n      const aggregationResults = gpuAggregation\n        ? gpuGridAggregator.getData('count')\n        : weights.count;\n\n      // Each instance (one cell) is aggregated into single pixel,\n      // Get current instance's aggregation details.\n      info.object = GPUGridAggregator.getAggregationData({\n        pixelIndex: index,\n        ...aggregationResults\n      });\n    }\n\n    return info;\n  }\n\n  // Aggregation Overrides\n\n  updateResults({aggregationData, maxData}) {\n    const {count} = this.state.weights;\n    count.aggregationData = aggregationData;\n    count.aggregationBuffer.setData({data: aggregationData});\n    count.maxData = maxData;\n    count.maxTexture.setImageData({data: maxData});\n  }\n\n  /* eslint-disable complexity, max-statements */\n  updateAggregationState(opts) {\n    const cellSize = opts.props.cellSizePixels;\n    const cellSizeChanged = opts.oldProps.cellSizePixels !== cellSize;\n    const {viewportChanged} = opts.changeFlags;\n    let gpuAggregation = opts.props.gpuAggregation;\n    if (this.state.gpuAggregation !== opts.props.gpuAggregation) {\n      if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.gl)) {\n        log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n        gpuAggregation = false;\n      }\n    }\n    const gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n    this.setState({\n      gpuAggregation\n    });\n\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n\n    const {dimensions} = this.state;\n    const {data, weights} = dimensions;\n    const aggregationDataDirty =\n      positionsChanged ||\n      gpuAggregationChanged ||\n      viewportChanged ||\n      this.isAggregationDirty(opts, {\n        compareAll: gpuAggregation, // check for all (including extentions props) when using gpu aggregation\n        dimension: data\n      });\n    const aggregationWeightsDirty = this.isAggregationDirty(opts, {dimension: weights});\n\n    this.setState({\n      aggregationDataDirty,\n      aggregationWeightsDirty\n    });\n\n    const {viewport} = this.context;\n\n    if (viewportChanged || cellSizeChanged) {\n      const {width, height} = viewport;\n      const numCol = Math.ceil(width / cellSize);\n      const numRow = Math.ceil(height / cellSize);\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        // transformation from clipspace to screen(pixel) space\n        scaling: [width / 2, -height / 2, 1],\n\n        gridOffset: {xOffset: cellSize, yOffset: cellSize},\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n\n    if (aggregationWeightsDirty) {\n      this._updateAccessors(opts);\n    }\n    if (aggregationDataDirty || aggregationWeightsDirty) {\n      this._resetResults();\n    }\n  }\n  /* eslint-enable complexity, max-statements */\n\n  // Private\n\n  _updateAccessors(opts) {\n    const {getWeight, aggregation, data} = opts.props;\n    const {count} = this.state.weights;\n    if (count) {\n      count.getWeight = getWeight;\n      count.operation = AGGREGATION_OPERATION[aggregation];\n    }\n    this.setState({getValue: getValueFunc(aggregation, getWeight, {data})});\n  }\n\n  _resetResults() {\n    const {count} = this.state.weights;\n    if (count) {\n      count.aggregationData = null;\n    }\n  }\n}\n\nScreenGridLayer.layerName = 'ScreenGridLayer';\nScreenGridLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}