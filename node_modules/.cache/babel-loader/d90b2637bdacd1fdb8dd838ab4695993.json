{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport GLTFScenegraph from '../api/gltf-scenegraph';\nvar KHR_BINARY_GLTF = 'KHR_binary_glTF';\nexport var name = KHR_BINARY_GLTF;\nexport function preprocess(gltfData) {\n  var gltfScenegraph = new GLTFScenegraph(gltfData);\n  var json = gltfScenegraph.json;\n\n  var _iterator = _createForOfIteratorHelper(json.images || []),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var image = _step.value;\n      var extension = gltfScenegraph.getObjectExtension(image, KHR_BINARY_GLTF);\n\n      if (extension) {\n        Object.assign(image, extension);\n      }\n\n      gltfScenegraph.removeObjectExtension(image, KHR_BINARY_GLTF);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (json.buffers && json.buffers[0]) {\n    delete json.buffers[0].uri;\n  }\n\n  gltfScenegraph.removeExtension(KHR_BINARY_GLTF);\n}","map":{"version":3,"mappings":";AAMA,OAAOA,cAAP,MAA2B,wBAA3B;AAEA,IAAMC,eAAe,GAAG,iBAAxB;AAGA,OAAO,IAAMC,IAAI,GAAGD,eAAb;AAEP,OAAO,SAASE,UAAT,CAAoBC,QAApB,EAAkD;EACvD,IAAMC,cAAc,GAAG,IAAIL,cAAJ,CAAmBI,QAAnB,CAAvB;EACA,IAAOE,IAAP,GAAeD,cAAf,CAAOC,IAAP;;EAFuD,2CASnCA,IAAI,CAACC,MAALD,IAAe,EAToB;EAAA;;EAAA;IASvD,oDAAuC;MAAA,IAA5BE,KAA4B;MACrC,IAAMC,SAAS,GAAGJ,cAAc,CAACK,kBAAfL,CAChBG,KADgBH,EAEhBJ,eAFgBI,CAAlB;;MAKA,IAAII,SAAJ,EAAe;QACbE,MAAM,CAACC,MAAPD,CAAcH,KAAdG,EAAqBF,SAArBE;MACD;;MACDN,cAAc,CAACQ,qBAAfR,CAAqCG,KAArCH,EAA4CJ,eAA5CI;IACD;EAnBsD;IAAA;EAAA;IAAA;EAAA;;EAyBvD,IAAIC,IAAI,CAACQ,OAALR,IAAgBA,IAAI,CAACQ,OAALR,CAAa,CAAbA,CAApB,EAAqC;IACnC,OAAOA,IAAI,CAACQ,OAALR,CAAa,CAAbA,EAAgBS,GAAvB;EACD;;EAGDV,cAAc,CAACW,eAAfX,CAA+BJ,eAA/BI;AACD","names":["GLTFScenegraph","KHR_BINARY_GLTF","name","preprocess","gltfData","gltfScenegraph","json","images","image","extension","getObjectExtension","Object","assign","removeObjectExtension","buffers","uri","removeExtension"],"sources":["../../../../src/lib/extensions/KHR_binary_gltf.ts"],"sourcesContent":["// GLTF 1.0 EXTENSION: KHR_binary_glTF\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/1.0/Khronos/KHR_binary_glTF\n/* eslint-disable camelcase */\n\nimport type {GLTF, GLTF_KHR_binary_glTF} from '../types/gltf-types';\n\nimport GLTFScenegraph from '../api/gltf-scenegraph';\n\nconst KHR_BINARY_GLTF = 'KHR_binary_glTF';\n\n/** Extension name */\nexport const name = KHR_BINARY_GLTF;\n\nexport function preprocess(gltfData: {json: GLTF}): void {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  // Note: json.buffers.binary_glTF also needs to be replaced\n  // This is currently done during gltf normalization\n\n  // Image and shader nodes can have the extension\n  // https://github.com/KhronosGroup/glTF/blob/master/extensions/1.0/Khronos/KHR_binary_glTF/schema/image.KHR_binary_glTF.schema.json\n  for (const image of json.images || []) {\n    const extension = gltfScenegraph.getObjectExtension<GLTF_KHR_binary_glTF>(\n      image,\n      KHR_BINARY_GLTF\n    );\n    // The data in the extension is valid as glTF 2.0 data inside the object, so just copy it in\n    if (extension) {\n      Object.assign(image, extension);\n    }\n    gltfScenegraph.removeObjectExtension(image, KHR_BINARY_GLTF);\n  }\n\n  // TODO shaders - At least traverse and throw error if used?\n  // https://github.com/KhronosGroup/glTF/blob/master/extensions/1.0/Khronos/KHR_binary_glTF/schema/shader.KHR_binary_glTF.schema.json\n\n  // glTF v1 one files have a partially formed URI field that is not expected in (and causes problems in) 2.0\n  if (json.buffers && json.buffers[0]) {\n    delete json.buffers[0].uri;\n  }\n\n  // Remove the top-level extension as it has now been removed from all nodes\n  gltfScenegraph.removeExtension(KHR_BINARY_GLTF);\n}\n\n// KHR_binary_gltf is a 1.0 extension that is supported natively by 2.0\n// export function encode() {\n//   throw new Error(KHR_BINARY_GLTF);\n// }\n"]},"metadata":{},"sourceType":"module"}