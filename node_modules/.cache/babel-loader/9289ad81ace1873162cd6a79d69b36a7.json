{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { assert } from '@loaders.gl/loader-utils';\nimport { ImageLoader, getImageSize } from '@loaders.gl/images';\nimport { generateUrl } from './generate-url';\nimport { deepLoad, shallowLoad } from './deep-load';\nexport function loadImageTexture(_x) {\n  return _loadImageTexture.apply(this, arguments);\n}\n\nfunction _loadImageTexture() {\n  _loadImageTexture = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(getUrl) {\n    var options,\n        imageUrls,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            _context.next = 3;\n            return getImageUrls(getUrl, options);\n\n          case 3:\n            imageUrls = _context.sent;\n            _context.next = 6;\n            return deepLoad(imageUrls, ImageLoader.parse, options);\n\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadImageTexture.apply(this, arguments);\n}\n\nexport function getImageUrls(_x2, _x3) {\n  return _getImageUrls.apply(this, arguments);\n}\n\nfunction _getImageUrls() {\n  _getImageUrls = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(getUrl, options) {\n    var urlOptions,\n        mipLevels,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            urlOptions = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n            mipLevels = options && options.image && options.image.mipLevels || 0;\n\n            if (!(mipLevels !== 0)) {\n              _context2.next = 8;\n              break;\n            }\n\n            _context2.next = 5;\n            return getMipmappedImageUrls(getUrl, mipLevels, options, urlOptions);\n\n          case 5:\n            _context2.t0 = _context2.sent;\n            _context2.next = 9;\n            break;\n\n          case 8:\n            _context2.t0 = generateUrl(getUrl, options, urlOptions);\n\n          case 9:\n            return _context2.abrupt(\"return\", _context2.t0);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getImageUrls.apply(this, arguments);\n}\n\nfunction getMipmappedImageUrls(_x4, _x5, _x6, _x7) {\n  return _getMipmappedImageUrls.apply(this, arguments);\n}\n\nfunction _getMipmappedImageUrls() {\n  _getMipmappedImageUrls = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(getUrl, mipLevels, options, urlOptions) {\n    var urls, url, image, _getImageSize, width, height, mipLevel, _url;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            urls = [];\n\n            if (!(mipLevels === 'auto')) {\n              _context3.next = 9;\n              break;\n            }\n\n            url = generateUrl(getUrl, options, _objectSpread(_objectSpread({}, urlOptions), {}, {\n              lod: 0\n            }));\n            _context3.next = 5;\n            return shallowLoad(url, ImageLoader.parse, options);\n\n          case 5:\n            image = _context3.sent;\n            _getImageSize = getImageSize(image), width = _getImageSize.width, height = _getImageSize.height;\n            mipLevels = getMipLevels({\n              width: width,\n              height: height\n            });\n            urls.push(url);\n\n          case 9:\n            assert(mipLevels > 0);\n\n            for (mipLevel = urls.length; mipLevel < mipLevels; ++mipLevel) {\n              _url = generateUrl(getUrl, options, _objectSpread(_objectSpread({}, urlOptions), {}, {\n                lod: mipLevel\n              }));\n              urls.push(_url);\n            }\n\n            return _context3.abrupt(\"return\", urls);\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getMipmappedImageUrls.apply(this, arguments);\n}\n\nexport function getMipLevels(size) {\n  return 1 + Math.floor(Math.log2(Math.max(size.width, size.height)));\n}","map":{"version":3,"mappings":";;;AAAA,SAAQA,MAAR,QAAqB,0BAArB;AACA,SAAQC,WAAR,EAAqBC,YAArB,QAAwC,oBAAxC;AAEA,SAAQC,WAAR,QAA0B,gBAA1B;AACA,SAAQC,QAAR,EAAkBC,WAAlB,QAAoC,aAApC;AAEA,gBAAsBC,gBAAtB;EAAA;AAAA;;;+EAAO,iBAAgCC,MAAhC;IAAA;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAAyDC,OAAzD,2DAAmE,EAAnE;YAAA;YAAA,OACmBC,YAAY,CAACF,MAAD,EAASC,OAAT,CAD/B;;UAAA;YACCE,SADD;YAAA;YAAA,OAEQN,QAAQ,CAACM,SAAD,EAAYT,WAAW,CAACU,KAAxB,EAA+BH,OAA/B,CAFhB;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAKP,gBAAsBC,YAAtB;EAAA;AAAA;;;2EAAO,kBACLF,MADK,EAELC,OAFK;IAAA;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAGLI,UAHK,8DAGoB,EAHpB;YAKCC,SALD,GAKcL,OAAO,IAAIA,OAAO,CAACM,KAAnBN,IAA4BA,OAAO,CAACM,KAARN,CAAcK,SAA1CL,IAAwD,CALtE;;YAAA,MAMEK,SAAS,KAAK,CANhB;cAAA;cAAA;YAAA;;YAAA;YAAA,OAOKE,qBAAqB,CAACR,MAAD,EAASM,SAAT,EAAoBL,OAApB,EAA6BI,UAA7B,CAP1B;;UAAA;YAAA;YAAA;YAAA;;UAAA;YAAA,eAQDT,WAAW,CAACI,MAAD,EAASC,OAAT,EAAkBI,UAAlB,CARV;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;SAWQG,qB;;;;;oFAAf,kBACER,MADF,EAEEM,SAFF,EAGEL,OAHF,EAIEI,UAJF;IAAA;;IAAA;MAAA;QAAA;UAAA;YAMQI,IANR,GAMyB,EANzB;;YAAA,MASMH,SAAS,KAAK,MATpB;cAAA;cAAA;YAAA;;YAUUI,GAVV,GAUgBd,WAAW,CAACI,MAAD,EAASC,OAAT,kCAAsBI,UAAtB;cAAkCM,GAAG,EAAE;YAAvC,GAV3B;YAAA;YAAA,OAWwBb,WAAW,CAACY,GAAD,EAAMhB,WAAW,CAACU,KAAlB,EAAyBH,OAAzB,CAXnC;;UAAA;YAWUM,KAXV;YAAA,gBAa4BZ,YAAY,CAACY,KAAD,CAbxC,EAaWK,KAbX,iBAaWA,KAbX,EAakBC,MAblB,iBAakBA,MAblB;YAcIP,SAAS,GAAGQ,YAAY,CAAC;cAACF,KAAD,EAACA,KAAD;cAAQC;YAAR,CAAD,CAAxBP;YAGAG,IAAI,CAACM,IAALN,CAAUC,GAAVD;;UAjBJ;YAqBEhB,MAAM,CAACa,SAAS,GAAG,CAAb,CAANb;;YAEA,KAASuB,QAAT,GAAoBP,IAAI,CAACQ,MAAzB,EAAiCD,QAAQ,GAAGV,SAA5C,EAAuD,EAAEU,QAAzD,EAAmE;cAC3DN,IAD2D,GACrDd,WAAW,CAACI,MAAD,EAASC,OAAT,kCAAsBI,UAAtB;gBAAkCM,GAAG,EAAEK;cAAvC,GAD0C;cAEjEP,IAAI,CAACM,IAALN,CAAUC,IAAVD;YACD;;YA1BH,kCA4BSA,IA5BT;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAgCA,OAAO,SAASK,YAAT,CAAsBI,IAAtB,EAAqE;EAC1E,OAAO,IAAIC,IAAI,CAACC,KAALD,CAAWA,IAAI,CAACE,IAALF,CAAUA,IAAI,CAACG,GAALH,CAASD,IAAI,CAACN,KAAdO,EAAqBD,IAAI,CAACL,MAA1BM,CAAVA,CAAXA,CAAX;AACD","names":["assert","ImageLoader","getImageSize","generateUrl","deepLoad","shallowLoad","loadImageTexture","getUrl","options","getImageUrls","imageUrls","parse","urlOptions","mipLevels","image","getMipmappedImageUrls","urls","url","lod","width","height","getMipLevels","push","mipLevel","length","size","Math","floor","log2","max"],"sources":["../../../../src/lib/texture-api/load-image.ts"],"sourcesContent":["import {assert} from '@loaders.gl/loader-utils';\nimport {ImageLoader, getImageSize} from '@loaders.gl/images';\nimport type {GetUrl, UrlOptions} from './texture-api-types';\nimport {generateUrl} from './generate-url';\nimport {deepLoad, shallowLoad} from './deep-load';\n\nexport async function loadImageTexture(getUrl: string | GetUrl, options = {}): Promise<any> {\n  const imageUrls = await getImageUrls(getUrl, options);\n  return await deepLoad(imageUrls, ImageLoader.parse, options);\n}\n\nexport async function getImageUrls(\n  getUrl: string | GetUrl,\n  options: any,\n  urlOptions: UrlOptions = {}\n): Promise<any> {\n  const mipLevels = (options && options.image && options.image.mipLevels) || 0;\n  return mipLevels !== 0\n    ? await getMipmappedImageUrls(getUrl, mipLevels, options, urlOptions)\n    : generateUrl(getUrl, options, urlOptions);\n}\n\nasync function getMipmappedImageUrls(\n  getUrl: string | GetUrl,\n  mipLevels: number | 'auto',\n  options: any,\n  urlOptions: UrlOptions\n): Promise<string[]> {\n  const urls: string[] = [];\n\n  // If no mip levels supplied, we need to load the level 0 image and calculate based on size\n  if (mipLevels === 'auto') {\n    const url = generateUrl(getUrl, options, {...urlOptions, lod: 0});\n    const image = await shallowLoad(url, ImageLoader.parse, options);\n\n    const {width, height} = getImageSize(image);\n    mipLevels = getMipLevels({width, height});\n\n    // TODO - push image and make `deepLoad` pass through non-url values, avoid loading twice?\n    urls.push(url);\n  }\n\n  // We now know how many mipLevels we need, remaining image urls can now be constructed\n  assert(mipLevels > 0);\n\n  for (let mipLevel = urls.length; mipLevel < mipLevels; ++mipLevel) {\n    const url = generateUrl(getUrl, options, {...urlOptions, lod: mipLevel});\n    urls.push(url);\n  }\n\n  return urls;\n}\n\n// Calculates number of mipmaps based on texture size (log2)\nexport function getMipLevels(size: {width: number; height: number}): number {\n  return 1 + Math.floor(Math.log2(Math.max(size.width, size.height)));\n}\n"]},"metadata":{},"sourceType":"module"}