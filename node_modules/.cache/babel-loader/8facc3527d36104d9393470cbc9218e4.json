{"ast":null,"code":"import { worldToLngLat } from './web-mercator-utils';\nimport { mod, log2 } from './math-utils';\nvar TILE_SIZE = 512;\nexport default function normalizeViewportProps(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      longitude = _ref.longitude,\n      latitude = _ref.latitude,\n      zoom = _ref.zoom,\n      _ref$pitch = _ref.pitch,\n      pitch = _ref$pitch === void 0 ? 0 : _ref$pitch,\n      _ref$bearing = _ref.bearing,\n      bearing = _ref$bearing === void 0 ? 0 : _ref$bearing;\n\n  if (longitude < -180 || longitude > 180) {\n    longitude = mod(longitude + 180, 360) - 180;\n  }\n\n  if (bearing < -180 || bearing > 180) {\n    bearing = mod(bearing + 180, 360) - 180;\n  }\n\n  var minZoom = log2(height / TILE_SIZE);\n\n  if (zoom <= minZoom) {\n    zoom = minZoom;\n    latitude = 0;\n  } else {\n    var halfHeightPixels = height / 2 / Math.pow(2, zoom);\n    var minLatitude = worldToLngLat([0, halfHeightPixels])[1];\n\n    if (latitude < minLatitude) {\n      latitude = minLatitude;\n    } else {\n      var maxLatitude = worldToLngLat([0, TILE_SIZE - halfHeightPixels])[1];\n\n      if (latitude > maxLatitude) {\n        latitude = maxLatitude;\n      }\n    }\n  }\n\n  return {\n    width: width,\n    height: height,\n    longitude: longitude,\n    latitude: latitude,\n    zoom: zoom,\n    pitch: pitch,\n    bearing: bearing\n  };\n}","map":{"version":3,"mappings":"AAAA,SAAQA,aAAR,QAA4B,sBAA5B;AACA,SAAQC,GAAR,EAAaC,IAAb,QAAwB,cAAxB;AAGA,IAAMC,SAAS,GAAG,GAAlB;AAIA,eAAe,SAASC,sBAAT,OAQZ;EAAA,IAPDC,KAOC,QAPDA,KAOC;EAAA,IANDC,MAMC,QANDA,MAMC;EAAA,IALDC,SAKC,QALDA,SAKC;EAAA,IAJDC,QAIC,QAJDA,QAIC;EAAA,IAHDC,IAGC,QAHDA,IAGC;EAAA,sBAFDC,KAEC;EAAA,IAFDA,KAEC,2BAFO,CAEP;EAAA,wBADDC,OACC;EAAA,IADDA,OACC,6BADS,CACT;;EAED,IAAIJ,SAAS,GAAG,CAAC,GAAbA,IAAoBA,SAAS,GAAG,GAApC,EAAyC;IACvCA,SAAS,GAAGN,GAAG,CAACM,SAAS,GAAG,GAAb,EAAkB,GAAlB,CAAHN,GAA4B,GAAxCM;EACD;;EACD,IAAII,OAAO,GAAG,CAAC,GAAXA,IAAkBA,OAAO,GAAG,GAAhC,EAAqC;IACnCA,OAAO,GAAGV,GAAG,CAACU,OAAO,GAAG,GAAX,EAAgB,GAAhB,CAAHV,GAA0B,GAApCU;EACD;;EAGD,IAAMC,OAAO,GAAGV,IAAI,CAACI,MAAM,GAAGH,SAAV,CAApB;;EACA,IAAIM,IAAI,IAAIG,OAAZ,EAAqB;IACnBH,IAAI,GAAGG,OAAPH;IACAD,QAAQ,GAAG,CAAXA;EAFF,OAGO;IAEL,IAAMK,gBAAgB,GAAGP,MAAM,GAAG,CAATA,GAAaQ,IAAI,CAACC,GAALD,CAAS,CAATA,EAAYL,IAAZK,CAAtC;IACA,IAAME,WAAW,GAAGhB,aAAa,CAAC,CAAC,CAAD,EAAIa,gBAAJ,CAAD,CAAbb,CAAqC,CAArCA,CAApB;;IACA,IAAIQ,QAAQ,GAAGQ,WAAf,EAA4B;MAC1BR,QAAQ,GAAGQ,WAAXR;IADF,OAEO;MACL,IAAMS,WAAW,GAAGjB,aAAa,CAAC,CAAC,CAAD,EAAIG,SAAS,GAAGU,gBAAhB,CAAD,CAAbb,CAAiD,CAAjDA,CAApB;;MACA,IAAIQ,QAAQ,GAAGS,WAAf,EAA4B;QAC1BT,QAAQ,GAAGS,WAAXT;MACD;IACF;EACF;;EAED,OAAO;IAACH,KAAD,EAACA,KAAD;IAAQC,MAAR,EAAQA,MAAR;IAAgBC,SAAhB,EAAgBA,SAAhB;IAA2BC,QAA3B,EAA2BA,QAA3B;IAAqCC,IAArC,EAAqCA,IAArC;IAA2CC,KAA3C,EAA2CA,KAA3C;IAAkDC;EAAlD,CAAP;AACD","names":["worldToLngLat","mod","log2","TILE_SIZE","normalizeViewportProps","width","height","longitude","latitude","zoom","pitch","bearing","minZoom","halfHeightPixels","Math","pow","minLatitude","maxLatitude"],"sources":["../../src/normalize-viewport-props.js"],"sourcesContent":["import {worldToLngLat} from './web-mercator-utils';\nimport {mod, log2} from './math-utils';\n\n// defined by mapbox-gl\nconst TILE_SIZE = 512;\n\n// Apply mathematical constraints to viewport props\n// eslint-disable-next-line complexity\nexport default function normalizeViewportProps({\n  width,\n  height,\n  longitude,\n  latitude,\n  zoom,\n  pitch = 0,\n  bearing = 0\n}) {\n  // Normalize degrees\n  if (longitude < -180 || longitude > 180) {\n    longitude = mod(longitude + 180, 360) - 180;\n  }\n  if (bearing < -180 || bearing > 180) {\n    bearing = mod(bearing + 180, 360) - 180;\n  }\n\n  // Constrain zoom and shift center at low zoom levels\n  const minZoom = log2(height / TILE_SIZE);\n  if (zoom <= minZoom) {\n    zoom = minZoom;\n    latitude = 0;\n  } else {\n    // Eliminate white space above and below the map\n    const halfHeightPixels = height / 2 / Math.pow(2, zoom);\n    const minLatitude = worldToLngLat([0, halfHeightPixels])[1];\n    if (latitude < minLatitude) {\n      latitude = minLatitude;\n    } else {\n      const maxLatitude = worldToLngLat([0, TILE_SIZE - halfHeightPixels])[1];\n      if (latitude > maxLatitude) {\n        latitude = maxLatitude;\n      }\n    }\n  }\n\n  return {width, height, longitude, latitude, zoom, pitch, bearing};\n}\n"]},"metadata":{},"sourceType":"module"}