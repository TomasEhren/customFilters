{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Transition from './transition';\nvar EPSILON = 1e-5;\n\nfunction updateSpringElement(prev, cur, dest, damping, stiffness) {\n  var velocity = cur - prev;\n  var delta = dest - cur;\n  var spring = delta * stiffness;\n  var damper = -velocity * damping;\n  return spring + damper + velocity + cur;\n}\n\nfunction updateSpring(prev, cur, dest, damping, stiffness) {\n  if (Array.isArray(dest)) {\n    var next = [];\n\n    for (var i = 0; i < dest.length; i++) {\n      next[i] = updateSpringElement(prev[i], cur[i], dest[i], damping, stiffness);\n    }\n\n    return next;\n  }\n\n  return updateSpringElement(prev, cur, dest, damping, stiffness);\n}\n\nfunction distance(value1, value2) {\n  if (Array.isArray(value1)) {\n    var distanceSquare = 0;\n\n    for (var i = 0; i < value1.length; i++) {\n      var d = value1[i] - value2[i];\n      distanceSquare += d * d;\n    }\n\n    return Math.sqrt(distanceSquare);\n  }\n\n  return Math.abs(value1 - value2);\n}\n\nvar CPUSpringTransition = /*#__PURE__*/function (_Transition) {\n  _inherits(CPUSpringTransition, _Transition);\n\n  var _super = _createSuper(CPUSpringTransition);\n\n  function CPUSpringTransition() {\n    _classCallCheck(this, CPUSpringTransition);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CPUSpringTransition, [{\n    key: \"value\",\n    get: function get() {\n      return this._currValue;\n    }\n  }, {\n    key: \"_onUpdate\",\n    value: function _onUpdate() {\n      var _this$settings = this.settings,\n          fromValue = _this$settings.fromValue,\n          toValue = _this$settings.toValue,\n          damping = _this$settings.damping,\n          stiffness = _this$settings.stiffness;\n\n      var _this$_prevValue = this._prevValue,\n          _prevValue = _this$_prevValue === void 0 ? fromValue : _this$_prevValue,\n          _this$_currValue = this._currValue,\n          _currValue = _this$_currValue === void 0 ? fromValue : _this$_currValue;\n\n      var nextValue = updateSpring(_prevValue, _currValue, toValue, damping, stiffness);\n      var delta = distance(nextValue, toValue);\n      var velocity = distance(nextValue, _currValue);\n\n      if (delta < EPSILON && velocity < EPSILON) {\n        nextValue = toValue;\n        this.end();\n      }\n\n      this._prevValue = _currValue;\n      this._currValue = nextValue;\n    }\n  }]);\n\n  return CPUSpringTransition;\n}(Transition);\n\nexport { CPUSpringTransition as default };","map":{"version":3,"mappings":";;;;AAAA,OAAOA,UAAP,MAAuB,cAAvB;AAEA,IAAMC,OAAO,GAAG,IAAhB;;AAUA,SAASC,mBAAT,CAA6BC,IAA7B,EAAmCC,GAAnC,EAAwCC,IAAxC,EAA8CC,OAA9C,EAAuDC,SAAvD,EAAkE;EAChE,IAAMC,QAAQ,GAAGJ,GAAG,GAAGD,IAAvB;EACA,IAAMM,KAAK,GAAGJ,IAAI,GAAGD,GAArB;EACA,IAAMM,MAAM,GAAGD,KAAK,GAAGF,SAAvB;EACA,IAAMI,MAAM,GAAG,CAACH,QAAD,GAAYF,OAA3B;EACA,OAAOI,MAAM,GAAGC,MAATD,GAAkBF,QAAlBE,GAA6BN,GAApC;AACD;;AAUD,SAASQ,YAAT,CAAsBT,IAAtB,EAA4BC,GAA5B,EAAiCC,IAAjC,EAAuCC,OAAvC,EAAgDC,SAAhD,EAA2D;EACzD,IAAIM,KAAK,CAACC,OAAND,CAAcR,IAAdQ,CAAJ,EAAyB;IACvB,IAAME,IAAI,GAAG,EAAb;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,IAAI,CAACY,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;MACpCD,IAAI,CAACC,CAAD,CAAJD,GAAUb,mBAAmB,CAACC,IAAI,CAACa,CAAD,CAAL,EAAUZ,GAAG,CAACY,CAAD,CAAb,EAAkBX,IAAI,CAACW,CAAD,CAAtB,EAA2BV,OAA3B,EAAoCC,SAApC,CAA7BQ;IACD;;IACD,OAAOA,IAAP;EACD;;EACD,OAAOb,mBAAmB,CAACC,IAAD,EAAOC,GAAP,EAAYC,IAAZ,EAAkBC,OAAlB,EAA2BC,SAA3B,CAA1B;AACD;;AAKD,SAASW,QAAT,CAAkBC,MAAlB,EAA0BC,MAA1B,EAAkC;EAChC,IAAIP,KAAK,CAACC,OAAND,CAAcM,MAAdN,CAAJ,EAA2B;IACzB,IAAIQ,cAAc,GAAG,CAArB;;IACA,KAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGG,MAAM,CAACF,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;MACtC,IAAMM,CAAC,GAAGH,MAAM,CAACH,CAAD,CAANG,GAAYC,MAAM,CAACJ,CAAD,CAA5B;MACAK,cAAc,IAAIC,CAAC,GAAGA,CAAtBD;IACD;;IACD,OAAOE,IAAI,CAACC,IAALD,CAAUF,cAAVE,CAAP;EACD;;EACD,OAAOA,IAAI,CAACE,GAALF,CAASJ,MAAM,GAAGC,MAAlBG,CAAP;AACD;;IAEoBG,mB;;;;;;;;;;;;;SACV,eAAG;MACV,OAAO,KAAKC,UAAZ;IACD;;;WAEDC,qBAAY;MAIV,qBAAiD,KAAKC,QAAtD;MAAA,IAAOC,SAAP,kBAAOA,SAAP;MAAA,IAAkBC,OAAlB,kBAAkBA,OAAlB;MAAA,IAA2BzB,OAA3B,kBAA2BA,OAA3B;MAAA,IAAoCC,SAApC,kBAAoCA,SAApC;;MACA,uBAAyD,IAAzD,CAAOyB,UAAP;MAAA,IAAOA,UAAP,iCAAoBF,SAApB;MAAA,uBAAyD,IAAzD,CAA+BH,UAA/B;MAAA,IAA+BA,UAA/B,iCAA4CG,SAA5C;;MACA,IAAIG,SAAS,GAAGrB,YAAY,CAACoB,UAAD,EAAaL,UAAb,EAAyBI,OAAzB,EAAkCzB,OAAlC,EAA2CC,SAA3C,CAA5B;MACA,IAAME,KAAK,GAAGS,QAAQ,CAACe,SAAD,EAAYF,OAAZ,CAAtB;MACA,IAAMvB,QAAQ,GAAGU,QAAQ,CAACe,SAAD,EAAYN,UAAZ,CAAzB;;MAEA,IAAIlB,KAAK,GAAGR,OAARQ,IAAmBD,QAAQ,GAAGP,OAAlC,EAA2C;QACzCgC,SAAS,GAAGF,OAAZE;QACA,KAAKC,GAAL;MACD;;MAED,KAAKF,UAAL,GAAkBL,UAAlB;MACA,KAAKA,UAAL,GAAkBM,SAAlB;IACD;;;;EAtB8CjC,U;;SAA5B0B,mB","names":["Transition","EPSILON","updateSpringElement","prev","cur","dest","damping","stiffness","velocity","delta","spring","damper","updateSpring","Array","isArray","next","i","length","distance","value1","value2","distanceSquare","d","Math","sqrt","abs","CPUSpringTransition","_currValue","_onUpdate","settings","fromValue","toValue","_prevValue","nextValue","end"],"sources":["../../../src/transitions/cpu-spring-transition.js"],"sourcesContent":["import Transition from './transition';\n\nconst EPSILON = 1e-5;\n\n/*\n * Calculate the next value in the spring transition\n * @param prev {Number} - previous value\n * @param cur {Number} - current value\n * @param dest {Number} - destination value\n * @param damping {Number}\n * @param stiffness {Number}\n */\nfunction updateSpringElement(prev, cur, dest, damping, stiffness) {\n  const velocity = cur - prev;\n  const delta = dest - cur;\n  const spring = delta * stiffness;\n  const damper = -velocity * damping;\n  return spring + damper + velocity + cur;\n}\n\n/*\n * Calculate the next value in the spring transition\n * @param prev {Number|Array} - previous value\n * @param cur {Number|Array} - current value\n * @param dest {Number|Array} - destination value\n * @param damping {Number}\n * @param stiffness {Number}\n */\nfunction updateSpring(prev, cur, dest, damping, stiffness) {\n  if (Array.isArray(dest)) {\n    const next = [];\n    for (let i = 0; i < dest.length; i++) {\n      next[i] = updateSpringElement(prev[i], cur[i], dest[i], damping, stiffness);\n    }\n    return next;\n  }\n  return updateSpringElement(prev, cur, dest, damping, stiffness);\n}\n\n/*\n * Calculate the distance between two numbers or two vectors\n */\nfunction distance(value1, value2) {\n  if (Array.isArray(value1)) {\n    let distanceSquare = 0;\n    for (let i = 0; i < value1.length; i++) {\n      const d = value1[i] - value2[i];\n      distanceSquare += d * d;\n    }\n    return Math.sqrt(distanceSquare);\n  }\n  return Math.abs(value1 - value2);\n}\n\nexport default class CPUSpringTransition extends Transition {\n  get value() {\n    return this._currValue;\n  }\n\n  _onUpdate() {\n    // TODO - use timeline\n    // const {time} = this;\n\n    const {fromValue, toValue, damping, stiffness} = this.settings;\n    const {_prevValue = fromValue, _currValue = fromValue} = this;\n    let nextValue = updateSpring(_prevValue, _currValue, toValue, damping, stiffness);\n    const delta = distance(nextValue, toValue);\n    const velocity = distance(nextValue, _currValue);\n\n    if (delta < EPSILON && velocity < EPSILON) {\n      nextValue = toValue;\n      this.end();\n    }\n\n    this._prevValue = _currValue;\n    this._currValue = nextValue;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}