{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DrawLineStringMode = void 0;\n\nvar _utils = require(\"../utils\");\n\nvar _geojsonEditMode = require(\"./geojson-edit-mode\");\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar DrawLineStringMode = /*#__PURE__*/function (_GeoJsonEditMode) {\n  _inherits(DrawLineStringMode, _GeoJsonEditMode);\n\n  var _super = _createSuper(DrawLineStringMode);\n\n  function DrawLineStringMode() {\n    _classCallCheck(this, DrawLineStringMode);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DrawLineStringMode, [{\n    key: \"handleClick\",\n    value: function handleClick(event, props) {\n      var picks = event.picks;\n      var clickedEditHandle = (0, _utils.getPickedEditHandle)(picks);\n      var positionAdded = false;\n\n      if (!clickedEditHandle) {\n        // Don't add another point right next to an existing one\n        this.addClickSequence(event);\n        positionAdded = true;\n      }\n\n      var clickSequence = this.getClickSequence();\n\n      if (clickSequence.length > 1 && clickedEditHandle && Array.isArray(clickedEditHandle.properties.positionIndexes) && clickedEditHandle.properties.positionIndexes[0] === clickSequence.length - 1) {\n        // They clicked the last point (or double-clicked), so add the LineString\n        var lineStringToAdd = {\n          type: 'LineString',\n          coordinates: _toConsumableArray(clickSequence)\n        };\n        this.resetClickSequence();\n        var editAction = this.getAddFeatureAction(lineStringToAdd, props.data);\n\n        if (editAction) {\n          props.onEdit(editAction);\n        }\n      } else if (positionAdded) {\n        // new tentative point\n        props.onEdit({\n          // data is the same\n          updatedData: props.data,\n          editType: 'addTentativePosition',\n          editContext: {\n            position: event.mapCoords\n          }\n        });\n      }\n    }\n  }, {\n    key: \"handleKeyUp\",\n    value: function handleKeyUp(event, props) {\n      var key = event.key;\n\n      if (key === 'Enter') {\n        var clickSequence = this.getClickSequence();\n\n        if (clickSequence.length > 1) {\n          var lineStringToAdd = {\n            type: 'LineString',\n            coordinates: _toConsumableArray(clickSequence)\n          };\n          this.resetClickSequence();\n          var editAction = this.getAddFeatureAction(lineStringToAdd, props.data);\n\n          if (editAction) {\n            props.onEdit(editAction);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"getGuides\",\n    value: function getGuides(props) {\n      var _guides$features;\n\n      var lastPointerMoveEvent = props.lastPointerMoveEvent;\n      var clickSequence = this.getClickSequence();\n      var lastCoords = lastPointerMoveEvent ? [lastPointerMoveEvent.mapCoords] : [];\n      var guides = {\n        type: 'FeatureCollection',\n        features: []\n      };\n      var tentativeFeature;\n\n      if (clickSequence.length > 0) {\n        tentativeFeature = {\n          type: 'Feature',\n          properties: {\n            guideType: 'tentative'\n          },\n          geometry: {\n            type: 'LineString',\n            coordinates: [].concat(_toConsumableArray(clickSequence), lastCoords)\n          }\n        };\n      }\n\n      if (tentativeFeature) {\n        guides.features.push(tentativeFeature);\n      }\n\n      var editHandles = clickSequence.map(function (clickedCoord, index) {\n        return {\n          type: 'Feature',\n          properties: {\n            guideType: 'editHandle',\n            editHandleType: 'existing',\n            featureIndex: -1,\n            positionIndexes: [index]\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: clickedCoord\n          }\n        };\n      });\n\n      (_guides$features = guides.features).push.apply(_guides$features, _toConsumableArray(editHandles)); // @ts-ignore\n\n\n      return guides;\n    }\n  }, {\n    key: \"handlePointerMove\",\n    value: function handlePointerMove(event, props) {\n      props.onUpdateCursor('cell');\n    }\n  }]);\n\n  return DrawLineStringMode;\n}(_geojsonEditMode.GeoJsonEditMode);\n\nexports.DrawLineStringMode = DrawLineStringMode;","map":{"version":3,"mappings":";;;;;;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEaA,kB;;;;;;;;;;;;;gCACCC,OAAmBC,OAAqC;MAAA,IAC1DC,KAD0D,GAChDF,KADgD,CAC1DE,KAD0D;MAElE,IAAMC,iBAAiB,GAAG,gCAAoBD,KAApB,CAA1B;MAEA,IAAIE,aAAa,GAAG,KAApB;;MACA,IAAI,CAACD,iBAAL,EAAwB;QACtB;QACA,KAAKE,gBAAL,CAAsBL,KAAtB;QACAI,aAAa,GAAG,IAAhBA;MACD;;MACD,IAAME,aAAa,GAAG,KAAKC,gBAAL,EAAtB;;MAEA,IACED,aAAa,CAACE,MAAdF,GAAuB,CAAvBA,IACAH,iBADAG,IAEAG,KAAK,CAACC,OAAND,CAAcN,iBAAiB,CAACQ,UAAlBR,CAA6BS,eAA3CH,CAFAH,IAGAH,iBAAiB,CAACQ,UAAlBR,CAA6BS,eAA7BT,CAA6C,CAA7CA,MAAoDG,aAAa,CAACE,MAAdF,GAAuB,CAJ7E,EAKE;QACA;QAEA,IAAMO,eAA2B,GAAG;UAClCC,IAAI,EAAE,YAD4B;UAElCC,WAAW,qBAAMT,aAAN;QAFuB,CAApC;QAKA,KAAKU,kBAAL;QAEA,IAAMC,UAAU,GAAG,KAAKC,mBAAL,CAAyBL,eAAzB,EAA0CZ,KAAK,CAACkB,IAAhD,CAAnB;;QACA,IAAIF,UAAJ,EAAgB;UACdhB,KAAK,CAACmB,MAANnB,CAAagB,UAAbhB;QACD;MAlBH,OAmBO,IAAIG,aAAJ,EAAmB;QACxB;QACAH,KAAK,CAACmB,MAANnB,CAAa;UACX;UACAoB,WAAW,EAAEpB,KAAK,CAACkB,IAFR;UAGXG,QAAQ,EAAE,sBAHC;UAIXC,WAAW,EAAE;YACXC,QAAQ,EAAExB,KAAK,CAACyB;UADL;QAJF,CAAbxB;MAQD;IACF;;;gCACWD,OAAsBC,OAAqC;MAAA,IAC7DyB,GAD6D,GACrD1B,KADqD,CAC7D0B,GAD6D;;MAErE,IAAIA,GAAG,KAAK,OAAZ,EAAqB;QACnB,IAAMpB,aAAa,GAAG,KAAKC,gBAAL,EAAtB;;QACA,IAAID,aAAa,CAACE,MAAdF,GAAuB,CAA3B,EAA8B;UAC5B,IAAMO,eAA2B,GAAG;YAClCC,IAAI,EAAE,YAD4B;YAElCC,WAAW,qBAAMT,aAAN;UAFuB,CAApC;UAIA,KAAKU,kBAAL;UACA,IAAMC,UAAU,GAAG,KAAKC,mBAAL,CAAyBL,eAAzB,EAA0CZ,KAAK,CAACkB,IAAhD,CAAnB;;UACA,IAAIF,UAAJ,EAAgB;YACdhB,KAAK,CAACmB,MAANnB,CAAagB,UAAbhB;UACD;QACF;MACF;IACF;;;8BACSA,OAA6D;MAAA;;MAAA,IAC7D0B,oBAD6D,GACpC1B,KADoC,CAC7D0B,oBAD6D;MAErE,IAAMrB,aAAa,GAAG,KAAKC,gBAAL,EAAtB;MAEA,IAAMqB,UAAU,GAAGD,oBAAoB,GAAG,CAACA,oBAAoB,CAACF,SAAtB,CAAH,GAAsC,EAA7E;MAEA,IAAMI,MAAM,GAAG;QACbf,IAAI,EAAE,mBADO;QAEbgB,QAAQ,EAAE;MAFG,CAAf;MAKA,IAAIC,gBAAJ;;MACA,IAAIzB,aAAa,CAACE,MAAdF,GAAuB,CAA3B,EAA8B;QAC5ByB,gBAAgB,GAAG;UACjBjB,IAAI,EAAE,SADW;UAEjBH,UAAU,EAAE;YACVqB,SAAS,EAAE;UADD,CAFK;UAKjBC,QAAQ,EAAE;YACRnB,IAAI,EAAE,YADE;YAERC,WAAW,+BAAMT,aAAN,GAAwBsB,UAAxB;UAFH;QALO,CAAnBG;MAUD;;MAED,IAAIA,gBAAJ,EAAsB;QACpBF,MAAM,CAACC,QAAPD,CAAgBK,IAAhBL,CAAqBE,gBAArBF;MACD;;MAED,IAAMM,WAAW,GAAG7B,aAAa,CAAC8B,GAAd9B,CAAkB,UAAC+B,YAAD,EAAeC,KAAf;QAAA,OAA0B;UAC9DxB,IAAI,EAAE,SADwD;UAE9DH,UAAU,EAAE;YACVqB,SAAS,EAAE,YADD;YAEVO,cAAc,EAAE,UAFN;YAGVC,YAAY,EAAE,CAAC,CAHL;YAIV5B,eAAe,EAAE,CAAC0B,KAAD;UAJP,CAFkD;UAQ9DL,QAAQ,EAAE;YACRnB,IAAI,EAAE,OADE;YAERC,WAAW,EAAEsB;UAFL;QARoD,CAA1B;MAAlB,EAApB;;MAcA,0BAAM,CAACP,QAAP,EAAgBI,IAAhB,4CAAwBC,WAAxB,GA3CqE,CA4CrE;;;MACA,OAAON,MAAP;IACD;;;sCAEiB7B,OAAyBC,OAAqC;MAC9EA,KAAK,CAACwC,cAANxC,CAAqB,MAArBA;IACD;;;;EA/GqCyC,gC","names":["DrawLineStringMode","event","props","picks","clickedEditHandle","positionAdded","addClickSequence","clickSequence","getClickSequence","length","Array","isArray","properties","positionIndexes","lineStringToAdd","type","coordinates","resetClickSequence","editAction","getAddFeatureAction","data","onEdit","updatedData","editType","editContext","position","mapCoords","key","lastPointerMoveEvent","lastCoords","guides","features","tentativeFeature","guideType","geometry","push","editHandles","map","clickedCoord","index","editHandleType","featureIndex","onUpdateCursor","GeoJsonEditMode"],"sources":["../../src/lib/draw-line-string-mode.ts"],"sourcesContent":["import { LineString, FeatureCollection } from '../geojson-types';\nimport { ClickEvent, PointerMoveEvent, ModeProps, GuideFeatureCollection } from '../types';\nimport { getPickedEditHandle } from '../utils';\nimport { GeoJsonEditMode } from './geojson-edit-mode';\n\nexport class DrawLineStringMode extends GeoJsonEditMode {\n  handleClick(event: ClickEvent, props: ModeProps<FeatureCollection>) {\n    const { picks } = event;\n    const clickedEditHandle = getPickedEditHandle(picks);\n\n    let positionAdded = false;\n    if (!clickedEditHandle) {\n      // Don't add another point right next to an existing one\n      this.addClickSequence(event);\n      positionAdded = true;\n    }\n    const clickSequence = this.getClickSequence();\n\n    if (\n      clickSequence.length > 1 &&\n      clickedEditHandle &&\n      Array.isArray(clickedEditHandle.properties.positionIndexes) &&\n      clickedEditHandle.properties.positionIndexes[0] === clickSequence.length - 1\n    ) {\n      // They clicked the last point (or double-clicked), so add the LineString\n\n      const lineStringToAdd: LineString = {\n        type: 'LineString',\n        coordinates: [...clickSequence],\n      };\n\n      this.resetClickSequence();\n\n      const editAction = this.getAddFeatureAction(lineStringToAdd, props.data);\n      if (editAction) {\n        props.onEdit(editAction);\n      }\n    } else if (positionAdded) {\n      // new tentative point\n      props.onEdit({\n        // data is the same\n        updatedData: props.data,\n        editType: 'addTentativePosition',\n        editContext: {\n          position: event.mapCoords,\n        },\n      });\n    }\n  }\n  handleKeyUp(event: KeyboardEvent, props: ModeProps<FeatureCollection>) {\n    const { key } = event;\n    if (key === 'Enter') {\n      const clickSequence = this.getClickSequence();\n      if (clickSequence.length > 1) {\n        const lineStringToAdd: LineString = {\n          type: 'LineString',\n          coordinates: [...clickSequence],\n        };\n        this.resetClickSequence();\n        const editAction = this.getAddFeatureAction(lineStringToAdd, props.data);\n        if (editAction) {\n          props.onEdit(editAction);\n        }\n      }\n    }\n  }\n  getGuides(props: ModeProps<FeatureCollection>): GuideFeatureCollection {\n    const { lastPointerMoveEvent } = props;\n    const clickSequence = this.getClickSequence();\n\n    const lastCoords = lastPointerMoveEvent ? [lastPointerMoveEvent.mapCoords] : [];\n\n    const guides = {\n      type: 'FeatureCollection',\n      features: [],\n    };\n\n    let tentativeFeature;\n    if (clickSequence.length > 0) {\n      tentativeFeature = {\n        type: 'Feature',\n        properties: {\n          guideType: 'tentative',\n        },\n        geometry: {\n          type: 'LineString',\n          coordinates: [...clickSequence, ...lastCoords],\n        },\n      };\n    }\n\n    if (tentativeFeature) {\n      guides.features.push(tentativeFeature);\n    }\n\n    const editHandles = clickSequence.map((clickedCoord, index) => ({\n      type: 'Feature',\n      properties: {\n        guideType: 'editHandle',\n        editHandleType: 'existing',\n        featureIndex: -1,\n        positionIndexes: [index],\n      },\n      geometry: {\n        type: 'Point',\n        coordinates: clickedCoord,\n      },\n    }));\n\n    guides.features.push(...editHandles);\n    // @ts-ignore\n    return guides;\n  }\n\n  handlePointerMove(event: PointerMoveEvent, props: ModeProps<FeatureCollection>) {\n    props.onUpdateCursor('cell');\n  }\n}\n"]},"metadata":{},"sourceType":"script"}