{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { deepEqual } from '../utils/deep-equal';\nexport default class LayerExtension {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _defineProperty(this, \"props\", void 0);\n\n    this.opts = opts;\n  }\n\n  equals(extension) {\n    if (this === extension) {\n      return true;\n    }\n\n    return this.constructor === extension.constructor && deepEqual(this.opts, extension.opts);\n  }\n\n  getShaders(extension) {\n    return null;\n  }\n\n  getSubLayerProps(extension) {\n    const {\n      defaultProps = {}\n    } = extension.constructor;\n    const newProps = {\n      updateTriggers: {}\n    };\n\n    for (const key in defaultProps) {\n      if (key in this.props) {\n        const propDef = defaultProps[key];\n        const propValue = this.props[key];\n        newProps[key] = propValue;\n\n        if (propDef && propDef.type === 'accessor') {\n          newProps.updateTriggers[key] = this.props.updateTriggers[key];\n\n          if (typeof propValue === 'function') {\n            newProps[key] = this.getSubLayerAccessor(propValue, true);\n          }\n        }\n      }\n    }\n\n    return newProps;\n  }\n\n  initializeState(context, extension) {}\n\n  updateState(params, extension) {}\n\n  draw(params, extension) {}\n\n  finalizeState(extension) {}\n\n}","map":{"version":3,"mappings":";AAmBA,SAAQA,SAAR,QAAwB,qBAAxB;AAEA,eAAe,MAAMC,cAAN,CAAqB;EAGlCC,WAAW,GAAY;IAAA,IAAXC,IAAW,uEAAJ,EAAI;;IAAAC;;IACrB,KAAKD,IAAL,GAAYA,IAAZ;EACD;;EAEDE,MAAM,CAACC,SAAD,EAAY;IAChB,IAAI,SAASA,SAAb,EAAwB;MACtB,OAAO,IAAP;IACD;;IAED,OAAO,KAAKJ,WAAL,KAAqBI,SAAS,CAACJ,WAA/B,IAA8CF,SAAS,CAAC,KAAKG,IAAN,EAAYG,SAAS,CAACH,IAAtB,CAA9D;EACD;;EAEDI,UAAU,CAACD,SAAD,EAAY;IACpB,OAAO,IAAP;EACD;;EAEDE,gBAAgB,CAACF,SAAD,EAAY;IAC1B,MAAM;MAACG,YAAY,GAAG;IAAhB,IAAsBH,SAAS,CAACJ,WAAtC;IACA,MAAMQ,QAAQ,GAAG;MACfC,cAAc,EAAE;IADD,CAAjB;;IAKA,KAAK,MAAMC,GAAX,IAAkBH,YAAlB,EAAgC;MAC9B,IAAIG,GAAG,IAAI,KAAKC,KAAhB,EAAuB;QACrB,MAAMC,OAAO,GAAGL,YAAY,CAACG,GAAD,CAA5B;QACA,MAAMG,SAAS,GAAG,KAAKF,KAAL,CAAWD,GAAX,CAAlB;QACAF,QAAQ,CAACE,GAAD,CAARF,GAAgBK,SAAhBL;;QACA,IAAII,OAAO,IAAIA,OAAO,CAACE,IAARF,KAAiB,UAAhC,EAA4C;UAC1CJ,QAAQ,CAACC,cAATD,CAAwBE,GAAxBF,IAA+B,KAAKG,KAAL,CAAWF,cAAX,CAA0BC,GAA1B,CAA/BF;;UACA,IAAI,OAAOK,SAAP,KAAqB,UAAzB,EAAqC;YAEnCL,QAAQ,CAACE,GAAD,CAARF,GAAgB,KAAKO,mBAAL,CAAyBF,SAAzB,EAAoC,IAApC,CAAhBL;UACD;QACF;MACF;IACF;;IAED,OAAOA,QAAP;EACD;;EAEDQ,eAAe,CAACC,OAAD,EAAUb,SAAV,EAAqB,CAAE;;EAEtCc,WAAW,CAACC,MAAD,EAASf,SAAT,EAAoB,CAAE;;EAEjCgB,IAAI,CAACD,MAAD,EAASf,SAAT,EAAoB,CAAE;;EAE1BiB,aAAa,CAACjB,SAAD,EAAY,CAAE;;AAlDO","names":["deepEqual","LayerExtension","constructor","opts","_defineProperty","equals","extension","getShaders","getSubLayerProps","defaultProps","newProps","updateTriggers","key","props","propDef","propValue","type","getSubLayerAccessor","initializeState","context","updateState","params","draw","finalizeState"],"sources":["../../../src/lib/layer-extension.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {deepEqual} from '../utils/deep-equal';\n\nexport default class LayerExtension {\n  props;\n\n  constructor(opts = {}) {\n    this.opts = opts;\n  }\n\n  equals(extension) {\n    if (this === extension) {\n      return true;\n    }\n\n    return this.constructor === extension.constructor && deepEqual(this.opts, extension.opts);\n  }\n\n  getShaders(extension) {\n    return null;\n  }\n\n  getSubLayerProps(extension) {\n    const {defaultProps = {}} = extension.constructor;\n    const newProps = {\n      updateTriggers: {}\n    };\n\n    /* eslint-disable max-depth */\n    for (const key in defaultProps) {\n      if (key in this.props) {\n        const propDef = defaultProps[key];\n        const propValue = this.props[key];\n        newProps[key] = propValue;\n        if (propDef && propDef.type === 'accessor') {\n          newProps.updateTriggers[key] = this.props.updateTriggers[key];\n          if (typeof propValue === 'function') {\n            // @ts-expect-error\n            newProps[key] = this.getSubLayerAccessor(propValue, true);\n          }\n        }\n      }\n    }\n    /* eslint-enable max-depth */\n    return newProps;\n  }\n\n  initializeState(context, extension) {}\n\n  updateState(params, extension) {}\n\n  draw(params, extension) {}\n\n  finalizeState(extension) {}\n}\n"]},"metadata":{},"sourceType":"module"}