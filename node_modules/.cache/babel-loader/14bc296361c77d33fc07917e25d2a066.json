{"ast":null,"code":"import { useSelector, useDispatch } from 'react-redux';\nimport { CartoLayer } from '@deck.gl/carto';\nimport { selectSourceById, updateLayer } from '@carto/react-redux';\nimport { useCartoLayerProps } from '@carto/react-api';\nimport htmlForFeature from 'utils/htmlForFeature';\nimport GL from '@luma.gl/constants';\nexport const POPULATION_LAYER_ID = 'populationLayer';\nconst layerConfig = {\n  title: 'Population',\n  visible: true,\n  legend: {}\n};\nexport default function PopulationLayer() {\n  const {\n    populationLayer\n  } = useSelector(state => state.carto.layers);\n  const source = useSelector(state => selectSourceById(state, populationLayer === null || populationLayer === void 0 ? void 0 : populationLayer.source));\n  const cartoLayerProps = useCartoLayerProps({\n    source\n  });\n  const dispatch = useDispatch();\n\n  if (populationLayer && source) {\n    return new CartoLayer({ ...cartoLayerProps,\n      id: POPULATION_LAYER_ID,\n      getFillColor: [217, 219, 94],\n      pointRadiusMinPixels: 0.8,\n      getLineColor: [0, 0, 0],\n      lineWidthMinPixels: 1,\n      pickable: true,\n      parameters: {\n        blendFunc: [GL.SRC_ALPHA, GL.DST_ALPHA],\n        blendEquation: GL.FUNC_ADD\n      },\n      visible: populationLayer.visible,\n      onDataLoad: data => {\n        dispatch(updateLayer({\n          id: MPRN_ALL_LAYER_ID,\n          layerAttributes: { ...layerConfig\n          }\n        }));\n      },\n      onHover: info => {\n        if (info !== null && info !== void 0 && info.object) {\n          info.object = {\n            html: htmlForFeature({\n              feature: info.object\n            }),\n            style: {}\n          };\n        }\n      }\n    });\n  }\n}","map":{"version":3,"names":["useSelector","useDispatch","CartoLayer","selectSourceById","updateLayer","useCartoLayerProps","htmlForFeature","GL","POPULATION_LAYER_ID","layerConfig","title","visible","legend","PopulationLayer","populationLayer","state","carto","layers","source","cartoLayerProps","dispatch","id","getFillColor","pointRadiusMinPixels","getLineColor","lineWidthMinPixels","pickable","parameters","blendFunc","SRC_ALPHA","DST_ALPHA","blendEquation","FUNC_ADD","onDataLoad","data","MPRN_ALL_LAYER_ID","layerAttributes","onHover","info","object","html","feature","style"],"sources":["/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/src/components/layers/PopulationLayer.js"],"sourcesContent":["import { useSelector, useDispatch } from 'react-redux';\nimport { CartoLayer } from '@deck.gl/carto';\nimport { selectSourceById, updateLayer } from '@carto/react-redux';\nimport { useCartoLayerProps } from '@carto/react-api';\nimport htmlForFeature from 'utils/htmlForFeature';\nimport GL from '@luma.gl/constants';\n\nexport const POPULATION_LAYER_ID = 'populationLayer';\n\nconst layerConfig = {\n  title: 'Population',\n  visible: true,\n  legend: {},\n};\n\nexport default function PopulationLayer() {\n  const { populationLayer } = useSelector((state) => state.carto.layers);\n  const source = useSelector((state) => selectSourceById(state, populationLayer?.source));\n  const cartoLayerProps = useCartoLayerProps({ source });\n  const dispatch = useDispatch();\n\n  if (populationLayer && source) {\n    return new CartoLayer({\n      ...cartoLayerProps,\n      id: POPULATION_LAYER_ID,\n      getFillColor: [217, 219, 94],\n      pointRadiusMinPixels: 0.8,\n      getLineColor: [0, 0, 0],\n      lineWidthMinPixels: 1,\n      pickable: true,\n      parameters: {\n        blendFunc: [GL.SRC_ALPHA, GL.DST_ALPHA],\n        blendEquation: GL.FUNC_ADD,\n      },\n      visible: populationLayer.visible,\n      onDataLoad: (data) => {\n        dispatch(\n          updateLayer({\n            id: MPRN_ALL_LAYER_ID,\n            layerAttributes: { ...layerConfig },\n          })\n        );\n      },\n      onHover: (info) => {\n        if (info?.object) {\n          info.object = {\n            html: htmlForFeature({ feature: info.object }),\n            style: {},\n          };\n        }\n      },\n    });\n  }\n}\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,oBAA9C;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,OAAOC,EAAP,MAAe,oBAAf;AAEA,OAAO,MAAMC,mBAAmB,GAAG,iBAA5B;AAEP,MAAMC,WAAW,GAAG;EAClBC,KAAK,EAAE,YADW;EAElBC,OAAO,EAAE,IAFS;EAGlBC,MAAM,EAAE;AAHU,CAApB;AAMA,eAAe,SAASC,eAAT,GAA2B;EACxC,MAAM;IAAEC;EAAF,IAAsBd,WAAW,CAAEe,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYC,MAAxB,CAAvC;EACA,MAAMC,MAAM,GAAGlB,WAAW,CAAEe,KAAD,IAAWZ,gBAAgB,CAACY,KAAD,EAAQD,eAAR,aAAQA,eAAR,uBAAQA,eAAe,CAAEI,MAAzB,CAA5B,CAA1B;EACA,MAAMC,eAAe,GAAGd,kBAAkB,CAAC;IAAEa;EAAF,CAAD,CAA1C;EACA,MAAME,QAAQ,GAAGnB,WAAW,EAA5B;;EAEA,IAAIa,eAAe,IAAII,MAAvB,EAA+B;IAC7B,OAAO,IAAIhB,UAAJ,CAAe,EACpB,GAAGiB,eADiB;MAEpBE,EAAE,EAAEb,mBAFgB;MAGpBc,YAAY,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,EAAX,CAHM;MAIpBC,oBAAoB,EAAE,GAJF;MAKpBC,YAAY,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALM;MAMpBC,kBAAkB,EAAE,CANA;MAOpBC,QAAQ,EAAE,IAPU;MAQpBC,UAAU,EAAE;QACVC,SAAS,EAAE,CAACrB,EAAE,CAACsB,SAAJ,EAAetB,EAAE,CAACuB,SAAlB,CADD;QAEVC,aAAa,EAAExB,EAAE,CAACyB;MAFR,CARQ;MAYpBrB,OAAO,EAAEG,eAAe,CAACH,OAZL;MAapBsB,UAAU,EAAGC,IAAD,IAAU;QACpBd,QAAQ,CACNhB,WAAW,CAAC;UACViB,EAAE,EAAEc,iBADM;UAEVC,eAAe,EAAE,EAAE,GAAG3B;UAAL;QAFP,CAAD,CADL,CAAR;MAMD,CApBmB;MAqBpB4B,OAAO,EAAGC,IAAD,IAAU;QACjB,IAAIA,IAAJ,aAAIA,IAAJ,eAAIA,IAAI,CAAEC,MAAV,EAAkB;UAChBD,IAAI,CAACC,MAAL,GAAc;YACZC,IAAI,EAAElC,cAAc,CAAC;cAAEmC,OAAO,EAAEH,IAAI,CAACC;YAAhB,CAAD,CADR;YAEZG,KAAK,EAAE;UAFK,CAAd;QAID;MACF;IA5BmB,CAAf,CAAP;EA8BD;AACF"},"metadata":{},"sourceType":"module"}