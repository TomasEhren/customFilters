{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { COORDINATE_SYSTEM, OPERATION } from './constants';\nimport AttributeManager from './attribute/attribute-manager';\nimport UniformTransitionManager from './uniform-transition-manager';\nimport { diffProps as _diffProps, validateProps as _validateProps } from '../lifecycle/props';\nimport { count } from '../utils/count';\nimport log from '../utils/log';\nimport debug from '../debug';\nimport { withParameters, setParameters } from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport memoize from '../utils/memoize';\nimport { mergeShaders } from '../utils/shader';\nimport { projectPosition as _projectPosition, getWorldPosition } from '../shaderlib/project/project-functions';\nimport typedArrayManager from '../utils/typed-array-manager';\nimport Component from '../lifecycle/component';\nimport LayerState from './layer-state';\nimport { worldToPixels } from '@math.gl/web-mercator';\nimport { load } from '@loaders.gl/core';\nvar TRACE_CHANGE_FLAG = 'layer.changeFlag';\nvar TRACE_INITIALIZE = 'layer.initialize';\nvar TRACE_UPDATE = 'layer.update';\nvar TRACE_FINALIZE = 'layer.finalize';\nvar TRACE_MATCHED = 'layer.matched';\nvar MAX_PICKING_COLOR_CACHE_SIZE = Math.pow(2, 24) - 1;\nvar EMPTY_ARRAY = Object.freeze([]);\nvar areViewportsEqual = memoize(function (_ref2) {\n  var oldViewport = _ref2.oldViewport,\n      viewport = _ref2.viewport;\n  return oldViewport.equals(viewport);\n});\nvar pickingColorCache = new Uint8ClampedArray(0);\nvar defaultProps = {\n  data: {\n    type: 'data',\n    value: EMPTY_ARRAY,\n    async: true\n  },\n  dataComparator: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  _dataDiff: {\n    type: 'function',\n    value: function value(data) {\n      return data && data.__diff;\n    },\n    compare: false,\n    optional: true\n  },\n  dataTransform: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onDataLoad: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onError: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  fetch: {\n    type: 'function',\n    value: function value(url, _ref3) {\n      var propName = _ref3.propName,\n          layer = _ref3.layer,\n          loaders = _ref3.loaders,\n          loadOptions = _ref3.loadOptions,\n          signal = _ref3.signal;\n      var resourceManager = layer.context.resourceManager;\n      loadOptions = loadOptions || layer.getLoadOptions();\n      loaders = loaders || layer.props.loaders;\n\n      if (signal) {\n        var _loadOptions;\n\n        loadOptions = _objectSpread(_objectSpread({}, loadOptions), {}, {\n          fetch: _objectSpread(_objectSpread({}, (_loadOptions = loadOptions) === null || _loadOptions === void 0 ? void 0 : _loadOptions.fetch), {}, {\n            signal: signal\n          })\n        });\n      }\n\n      var inResourceManager = resourceManager.contains(url);\n\n      if (!inResourceManager && !loadOptions) {\n        resourceManager.add({\n          resourceId: url,\n          data: load(url, loaders),\n          persistent: false\n        });\n        inResourceManager = true;\n      }\n\n      if (inResourceManager) {\n        return resourceManager.subscribe({\n          resourceId: url,\n          onChange: function onChange(data) {\n            return layer.internalState.reloadAsyncProp(propName, data);\n          },\n          consumerId: layer.id,\n          requestId: propName\n        });\n      }\n\n      return load(url, loaders, loadOptions);\n    },\n    compare: false\n  },\n  updateTriggers: {},\n  visible: true,\n  pickable: false,\n  opacity: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  operation: OPERATION.DRAW,\n  onHover: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onClick: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onDragStart: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onDrag: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onDragEnd: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n  coordinateOrigin: {\n    type: 'array',\n    value: [0, 0, 0],\n    compare: true\n  },\n  modelMatrix: {\n    type: 'array',\n    value: null,\n    compare: true,\n    optional: true\n  },\n  wrapLongitude: false,\n  positionFormat: 'XYZ',\n  colorFormat: 'RGBA',\n  parameters: {\n    type: 'object',\n    value: {},\n    optional: true,\n    compare: true\n  },\n  transitions: null,\n  extensions: [],\n  loaders: {\n    type: 'array',\n    value: [],\n    optional: true,\n    compare: true\n  },\n  getPolygonOffset: {\n    type: 'function',\n    value: function value(_ref4) {\n      var layerIndex = _ref4.layerIndex;\n      return [0, -layerIndex * 100];\n    },\n    compare: false\n  },\n  highlightedObjectIndex: null,\n  autoHighlight: false,\n  highlightColor: {\n    type: 'accessor',\n    value: [0, 0, 128, 128]\n  }\n};\n\nvar Layer = /*#__PURE__*/function (_Component) {\n  _inherits(Layer, _Component);\n\n  var _super = _createSuper(Layer);\n\n  function Layer() {\n    _classCallCheck(this, Layer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Layer, [{\n    key: \"toString\",\n    value: function toString() {\n      var className = this.constructor.layerName || this.constructor.name;\n      return \"\".concat(className, \"({id: '\").concat(this.props.id, \"'})\");\n    }\n  }, {\n    key: \"raiseError\",\n    value: function raiseError(error, message) {\n      var _this$props$onError, _this$props;\n\n      if (message) {\n        error.message = \"\".concat(message, \": \").concat(error.message);\n      }\n\n      if (!((_this$props$onError = (_this$props = this.props).onError) !== null && _this$props$onError !== void 0 && _this$props$onError.call(_this$props, error))) {\n        var _this$context, _this$context$onError;\n\n        (_this$context = this.context) === null || _this$context === void 0 ? void 0 : (_this$context$onError = _this$context.onError) === null || _this$context$onError === void 0 ? void 0 : _this$context$onError.call(_this$context, error, this);\n      }\n    }\n  }, {\n    key: \"setState\",\n    value: function setState(updateObject) {\n      this.setChangeFlags({\n        stateChanged: true\n      });\n      Object.assign(this.state, updateObject);\n      this.setNeedsRedraw();\n    }\n  }, {\n    key: \"setNeedsRedraw\",\n    value: function setNeedsRedraw() {\n      var redraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (this.internalState) {\n        this.internalState.needsRedraw = redraw;\n      }\n    }\n  }, {\n    key: \"setNeedsUpdate\",\n    value: function setNeedsUpdate() {\n      this.context.layerManager.setNeedsUpdate(String(this));\n      this.internalState.needsUpdate = true;\n    }\n  }, {\n    key: \"getNeedsRedraw\",\n    value: function getNeedsRedraw() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        clearRedrawFlags: false\n      };\n      return this._getNeedsRedraw(opts);\n    }\n  }, {\n    key: \"needsUpdate\",\n    value: function needsUpdate() {\n      return this.internalState.needsUpdate || this.hasUniformTransition() || this.shouldUpdateState(this._getUpdateParams());\n    }\n  }, {\n    key: \"hasUniformTransition\",\n    value: function hasUniformTransition() {\n      return this.internalState.uniformTransitions.active;\n    }\n  }, {\n    key: \"isLoaded\",\n    get: function get() {\n      return this.internalState && !this.internalState.isAsyncPropLoading();\n    }\n  }, {\n    key: \"wrapLongitude\",\n    get: function get() {\n      return this.props.wrapLongitude;\n    }\n  }, {\n    key: \"isPickable\",\n    value: function isPickable() {\n      return this.props.pickable && this.props.visible;\n    }\n  }, {\n    key: \"getModels\",\n    value: function getModels() {\n      return this.state && (this.state.models || (this.state.model ? [this.state.model] : []));\n    }\n  }, {\n    key: \"getAttributeManager\",\n    value: function getAttributeManager() {\n      return this.internalState && this.internalState.attributeManager;\n    }\n  }, {\n    key: \"getCurrentLayer\",\n    value: function getCurrentLayer() {\n      return this.internalState && this.internalState.layer;\n    }\n  }, {\n    key: \"getLoadOptions\",\n    value: function getLoadOptions() {\n      return this.props.loadOptions;\n    }\n  }, {\n    key: \"project\",\n    value: function project(xyz) {\n      var viewport = this.context.viewport;\n      var worldPosition = getWorldPosition(xyz, {\n        viewport: viewport,\n        modelMatrix: this.props.modelMatrix,\n        coordinateOrigin: this.props.coordinateOrigin,\n        coordinateSystem: this.props.coordinateSystem\n      });\n\n      var _worldToPixels = worldToPixels(worldPosition, viewport.pixelProjectionMatrix),\n          _worldToPixels2 = _slicedToArray(_worldToPixels, 3),\n          x = _worldToPixels2[0],\n          y = _worldToPixels2[1],\n          z = _worldToPixels2[2];\n\n      return xyz.length === 2 ? [x, y] : [x, y, z];\n    }\n  }, {\n    key: \"unproject\",\n    value: function unproject(xy) {\n      var viewport = this.context.viewport;\n      return viewport.unproject(xy);\n    }\n  }, {\n    key: \"projectPosition\",\n    value: function projectPosition(xyz, params) {\n      return _projectPosition(xyz, _objectSpread({\n        viewport: this.context.viewport,\n        modelMatrix: this.props.modelMatrix,\n        coordinateOrigin: this.props.coordinateOrigin,\n        coordinateSystem: this.props.coordinateSystem\n      }, params));\n    }\n  }, {\n    key: \"use64bitPositions\",\n    value: function use64bitPositions() {\n      var coordinateSystem = this.props.coordinateSystem;\n      return coordinateSystem === COORDINATE_SYSTEM.DEFAULT || coordinateSystem === COORDINATE_SYSTEM.LNGLAT || coordinateSystem === COORDINATE_SYSTEM.CARTESIAN;\n    }\n  }, {\n    key: \"onHover\",\n    value: function onHover(info, pickingEvent) {\n      if (this.props.onHover) {\n        return this.props.onHover(info, pickingEvent);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(info, pickingEvent) {\n      if (this.props.onClick) {\n        return this.props.onClick(info, pickingEvent);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"nullPickingColor\",\n    value: function nullPickingColor() {\n      return [0, 0, 0];\n    }\n  }, {\n    key: \"encodePickingColor\",\n    value: function encodePickingColor(i) {\n      var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      target[0] = i + 1 & 255;\n      target[1] = i + 1 >> 8 & 255;\n      target[2] = i + 1 >> 8 >> 8 & 255;\n      return target;\n    }\n  }, {\n    key: \"decodePickingColor\",\n    value: function decodePickingColor(color) {\n      assert(color instanceof Uint8Array);\n\n      var _color = _slicedToArray(color, 3),\n          i1 = _color[0],\n          i2 = _color[1],\n          i3 = _color[2];\n\n      var index = i1 + i2 * 256 + i3 * 65536 - 1;\n      return index;\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      throw new Error(\"Layer \".concat(this, \" has not defined initializeState\"));\n    }\n  }, {\n    key: \"getShaders\",\n    value: function getShaders(shaders) {\n      var _iterator = _createForOfIteratorHelper(this.props.extensions),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var extension = _step.value;\n          shaders = mergeShaders(shaders, extension.getShaders.call(this, extension));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return shaders;\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      var _ref;\n\n      var attributeManager = this.getAttributeManager();\n      if (!attributeManager) return null;\n      var _attributeManager$att = attributeManager.attributes,\n          positions = _attributeManager$att.positions,\n          instancePositions = _attributeManager$att.instancePositions;\n      return (_ref = positions || instancePositions) === null || _ref === void 0 ? void 0 : _ref.getBounds();\n    }\n  }, {\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref5) {\n      var oldProps = _ref5.oldProps,\n          props = _ref5.props,\n          context = _ref5.context,\n          changeFlags = _ref5.changeFlags;\n      return changeFlags.propsOrDataChanged;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref6) {\n      var oldProps = _ref6.oldProps,\n          props = _ref6.props,\n          context = _ref6.context,\n          changeFlags = _ref6.changeFlags;\n      var attributeManager = this.getAttributeManager();\n\n      if (changeFlags.dataChanged && attributeManager) {\n        var dataChanged = changeFlags.dataChanged;\n\n        if (Array.isArray(dataChanged)) {\n          var _iterator2 = _createForOfIteratorHelper(dataChanged),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var dataRange = _step2.value;\n              attributeManager.invalidateAll(dataRange);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        } else {\n          attributeManager.invalidateAll();\n        }\n      }\n\n      var neededPickingBuffer = Number.isInteger(oldProps.highlightedObjectIndex) || oldProps.pickable;\n      var needPickingBuffer = Number.isInteger(props.highlightedObjectIndex) || props.pickable;\n\n      if (neededPickingBuffer !== needPickingBuffer && attributeManager) {\n        var _attributeManager$att2 = attributeManager.attributes,\n            pickingColors = _attributeManager$att2.pickingColors,\n            instancePickingColors = _attributeManager$att2.instancePickingColors;\n        var pickingColorsAttribute = pickingColors || instancePickingColors;\n\n        if (pickingColorsAttribute) {\n          if (needPickingBuffer && pickingColorsAttribute.constant) {\n            pickingColorsAttribute.constant = false;\n            attributeManager.invalidate(pickingColorsAttribute.id);\n          }\n\n          if (!pickingColorsAttribute.value && !needPickingBuffer) {\n            pickingColorsAttribute.constant = true;\n            pickingColorsAttribute.value = [0, 0, 0];\n          }\n        }\n      }\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      var _iterator3 = _createForOfIteratorHelper(this.getModels()),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var model = _step3.value;\n          model.delete();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      var attributeManager = this.getAttributeManager();\n\n      if (attributeManager) {\n        attributeManager.finalize();\n      }\n\n      this.context.resourceManager.unsubscribe({\n        consumerId: this.id\n      });\n      this.internalState.uniformTransitions.clear();\n      this.internalState.finalize();\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(opts) {\n      var _iterator4 = _createForOfIteratorHelper(this.getModels()),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var model = _step4.value;\n          model.draw(opts);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref7) {\n      var info = _ref7.info,\n          mode = _ref7.mode;\n      var index = info.index;\n\n      if (index >= 0) {\n        if (Array.isArray(this.props.data)) {\n          info.object = this.props.data[index];\n        }\n      }\n\n      return info;\n    }\n  }, {\n    key: \"activateViewport\",\n    value: function activateViewport(viewport) {\n      var oldViewport = this.internalState.viewport;\n      this.internalState.viewport = viewport;\n\n      if (!oldViewport || !areViewportsEqual({\n        oldViewport: oldViewport,\n        viewport: viewport\n      })) {\n        this.setChangeFlags({\n          viewportChanged: true\n        });\n\n        if (this.isComposite) {\n          if (this.needsUpdate()) {\n            this.setNeedsUpdate();\n          }\n        } else {\n          this._update();\n        }\n      }\n    }\n  }, {\n    key: \"invalidateAttribute\",\n    value: function invalidateAttribute() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'all';\n      var diffReason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var attributeManager = this.getAttributeManager();\n\n      if (!attributeManager) {\n        return;\n      }\n\n      if (name === 'all') {\n        attributeManager.invalidateAll();\n      } else {\n        attributeManager.invalidate(name);\n      }\n    }\n  }, {\n    key: \"updateAttributes\",\n    value: function updateAttributes(changedAttributes) {\n      var _iterator5 = _createForOfIteratorHelper(this.getModels()),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var model = _step5.value;\n\n          this._setModelAttributes(model, changedAttributes);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, {\n    key: \"_updateAttributes\",\n    value: function _updateAttributes(props) {\n      var attributeManager = this.getAttributeManager();\n\n      if (!attributeManager) {\n        return;\n      }\n\n      var numInstances = this.getNumInstances(props);\n      var startIndices = this.getStartIndices(props);\n      attributeManager.update({\n        data: props.data,\n        numInstances: numInstances,\n        startIndices: startIndices,\n        props: props,\n        transitions: props.transitions,\n        buffers: props.data.attributes,\n        context: this,\n        ignoreUnknownAttributes: true\n      });\n      var changedAttributes = attributeManager.getChangedAttributes({\n        clearChangedFlags: true\n      });\n      this.updateAttributes(changedAttributes);\n    }\n  }, {\n    key: \"_updateAttributeTransition\",\n    value: function _updateAttributeTransition() {\n      var attributeManager = this.getAttributeManager();\n\n      if (attributeManager) {\n        attributeManager.updateTransition();\n      }\n    }\n  }, {\n    key: \"_updateUniformTransition\",\n    value: function _updateUniformTransition() {\n      var uniformTransitions = this.internalState.uniformTransitions;\n\n      if (uniformTransitions.active) {\n        var propsInTransition = uniformTransitions.update();\n        var props = Object.create(this.props);\n\n        for (var key in propsInTransition) {\n          Object.defineProperty(props, key, {\n            value: propsInTransition[key]\n          });\n        }\n\n        return props;\n      }\n\n      return this.props;\n    }\n  }, {\n    key: \"calculateInstancePickingColors\",\n    value: function calculateInstancePickingColors(attribute, _ref8) {\n      var numInstances = _ref8.numInstances;\n\n      if (attribute.constant) {\n        return;\n      }\n\n      var cacheSize = Math.floor(pickingColorCache.length / 3);\n      this.internalState.usesPickingColorCache = true;\n\n      if (cacheSize < numInstances) {\n        if (numInstances > MAX_PICKING_COLOR_CACHE_SIZE) {\n          log.warn('Layer has too many data objects. Picking might not be able to distinguish all objects.')();\n        }\n\n        pickingColorCache = typedArrayManager.allocate(pickingColorCache, numInstances, {\n          size: 3,\n          copy: true,\n          maxCount: Math.max(numInstances, MAX_PICKING_COLOR_CACHE_SIZE)\n        });\n        var newCacheSize = Math.floor(pickingColorCache.length / 3);\n        var pickingColor = [];\n\n        for (var i = cacheSize; i < newCacheSize; i++) {\n          this.encodePickingColor(i, pickingColor);\n          pickingColorCache[i * 3 + 0] = pickingColor[0];\n          pickingColorCache[i * 3 + 1] = pickingColor[1];\n          pickingColorCache[i * 3 + 2] = pickingColor[2];\n        }\n      }\n\n      attribute.value = pickingColorCache.subarray(0, numInstances * 3);\n    }\n  }, {\n    key: \"_setModelAttributes\",\n    value: function _setModelAttributes(model, changedAttributes) {\n      var attributeManager = this.getAttributeManager();\n      var excludeAttributes = model.userData.excludeAttributes || {};\n      var shaderAttributes = attributeManager.getShaderAttributes(changedAttributes, excludeAttributes);\n      model.setAttributes(shaderAttributes);\n    }\n  }, {\n    key: \"disablePickingIndex\",\n    value: function disablePickingIndex(objectIndex) {\n      this._disablePickingIndex(objectIndex);\n    }\n  }, {\n    key: \"_disablePickingIndex\",\n    value: function _disablePickingIndex(objectIndex) {\n      var _this$getAttributeMan = this.getAttributeManager().attributes,\n          pickingColors = _this$getAttributeMan.pickingColors,\n          instancePickingColors = _this$getAttributeMan.instancePickingColors;\n      var colors = pickingColors || instancePickingColors;\n      var start = colors.getVertexOffset(objectIndex);\n      var end = colors.getVertexOffset(objectIndex + 1);\n      colors.buffer.subData({\n        data: new Uint8Array(end - start),\n        offset: start\n      });\n    }\n  }, {\n    key: \"restorePickingColors\",\n    value: function restorePickingColors() {\n      var _this$getAttributeMan2 = this.getAttributeManager().attributes,\n          pickingColors = _this$getAttributeMan2.pickingColors,\n          instancePickingColors = _this$getAttributeMan2.instancePickingColors;\n      var colors = pickingColors || instancePickingColors;\n\n      if (this.internalState.usesPickingColorCache && colors.value.buffer !== pickingColorCache.buffer) {\n        colors.value = pickingColorCache.subarray(0, colors.value.length);\n      }\n\n      colors.updateSubBuffer({\n        startOffset: 0\n      });\n    }\n  }, {\n    key: \"getNumInstances\",\n    value: function getNumInstances(props) {\n      props = props || this.props;\n\n      if (props.numInstances !== undefined) {\n        return props.numInstances;\n      }\n\n      if (this.state && this.state.numInstances !== undefined) {\n        return this.state.numInstances;\n      }\n\n      return count(props.data);\n    }\n  }, {\n    key: \"getStartIndices\",\n    value: function getStartIndices(props) {\n      props = props || this.props;\n\n      if (props.startIndices !== undefined) {\n        return props.startIndices;\n      }\n\n      if (this.state && this.state.startIndices) {\n        return this.state.startIndices;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_initialize\",\n    value: function _initialize() {\n      debug(TRACE_INITIALIZE, this);\n\n      this._initState();\n\n      this.initializeState(this.context);\n\n      var _iterator6 = _createForOfIteratorHelper(this.props.extensions),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var extension = _step6.value;\n          extension.initializeState.call(this, this.context, extension);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      this.setChangeFlags({\n        dataChanged: true,\n        propsChanged: true,\n        viewportChanged: true,\n        extensionsChanged: true\n      });\n\n      this._updateState();\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      var stateNeedsUpdate = this.needsUpdate();\n      debug(TRACE_UPDATE, this, stateNeedsUpdate);\n\n      if (stateNeedsUpdate) {\n        this._updateState();\n      }\n    }\n  }, {\n    key: \"_updateState\",\n    value: function _updateState() {\n      var currentProps = this.props;\n      var currentViewport = this.context.viewport;\n\n      var propsInTransition = this._updateUniformTransition();\n\n      this.internalState.propsInTransition = propsInTransition;\n      this.context.viewport = this.internalState.viewport || currentViewport;\n      this.props = propsInTransition;\n\n      try {\n        var updateParams = this._getUpdateParams();\n\n        var oldModels = this.getModels();\n\n        if (this.context.gl) {\n          this.updateState(updateParams);\n        } else {\n          try {\n            this.updateState(updateParams);\n          } catch (error) {}\n        }\n\n        var _iterator7 = _createForOfIteratorHelper(this.props.extensions),\n            _step7;\n\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var extension = _step7.value;\n            extension.updateState.call(this, updateParams, extension);\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n\n        var modelChanged = this.getModels()[0] !== oldModels[0];\n\n        this._updateModules(updateParams, modelChanged);\n\n        if (this.isComposite) {\n          this._renderLayers(updateParams);\n        } else {\n          this.setNeedsRedraw();\n\n          this._updateAttributes(this.props);\n\n          if (this.state.model) {\n            this.state.model.setInstanceCount(this.getNumInstances());\n          }\n        }\n      } finally {\n        this.context.viewport = currentViewport;\n        this.props = currentProps;\n        this.clearChangeFlags();\n        this.internalState.needsUpdate = false;\n        this.internalState.resetOldProps();\n      }\n    }\n  }, {\n    key: \"_finalize\",\n    value: function _finalize() {\n      debug(TRACE_FINALIZE, this);\n      this.finalizeState(this.context);\n\n      var _iterator8 = _createForOfIteratorHelper(this.props.extensions),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var extension = _step8.value;\n          extension.finalizeState.call(this, extension);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n  }, {\n    key: \"drawLayer\",\n    value: function drawLayer(_ref9) {\n      var _this = this;\n\n      var _ref9$moduleParameter = _ref9.moduleParameters,\n          moduleParameters = _ref9$moduleParameter === void 0 ? null : _ref9$moduleParameter,\n          _ref9$uniforms = _ref9.uniforms,\n          uniforms = _ref9$uniforms === void 0 ? {} : _ref9$uniforms,\n          _ref9$parameters = _ref9.parameters,\n          parameters = _ref9$parameters === void 0 ? {} : _ref9$parameters;\n\n      this._updateAttributeTransition();\n\n      var currentProps = this.props;\n      this.props = this.internalState.propsInTransition || currentProps;\n      var opacity = this.props.opacity;\n      uniforms.opacity = Math.pow(opacity, 1 / 2.2);\n\n      try {\n        if (moduleParameters) {\n          this.setModuleParameters(moduleParameters);\n        }\n\n        var getPolygonOffset = this.props.getPolygonOffset;\n        var offsets = getPolygonOffset && getPolygonOffset(uniforms) || [0, 0];\n        setParameters(this.context.gl, {\n          polygonOffset: offsets\n        });\n        withParameters(this.context.gl, parameters, function () {\n          var opts = {\n            moduleParameters: moduleParameters,\n            uniforms: uniforms,\n            parameters: parameters,\n            context: _this.context\n          };\n\n          var _iterator9 = _createForOfIteratorHelper(_this.props.extensions),\n              _step9;\n\n          try {\n            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n              var extension = _step9.value;\n              extension.draw.call(_this, opts, extension);\n            }\n          } catch (err) {\n            _iterator9.e(err);\n          } finally {\n            _iterator9.f();\n          }\n\n          _this.draw(opts);\n        });\n      } finally {\n        this.props = currentProps;\n      }\n    }\n  }, {\n    key: \"getChangeFlags\",\n    value: function getChangeFlags() {\n      return this.internalState.changeFlags;\n    }\n  }, {\n    key: \"setChangeFlags\",\n    value: function setChangeFlags(flags) {\n      var changeFlags = this.internalState.changeFlags;\n\n      for (var key in flags) {\n        if (flags[key]) {\n          var flagChanged = false;\n\n          switch (key) {\n            case 'dataChanged':\n              if (Array.isArray(changeFlags[key])) {\n                changeFlags[key] = Array.isArray(flags[key]) ? changeFlags[key].concat(flags[key]) : flags[key];\n                flagChanged = true;\n              }\n\n            default:\n              if (!changeFlags[key]) {\n                changeFlags[key] = flags[key];\n                flagChanged = true;\n              }\n\n          }\n\n          if (flagChanged) {\n            debug(TRACE_CHANGE_FLAG, this, key, flags);\n          }\n        }\n      }\n\n      var propsOrDataChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged || changeFlags.propsChanged || changeFlags.extensionsChanged;\n      changeFlags.propsOrDataChanged = propsOrDataChanged;\n      changeFlags.somethingChanged = propsOrDataChanged || flags.viewportChanged || flags.stateChanged;\n    }\n  }, {\n    key: \"clearChangeFlags\",\n    value: function clearChangeFlags() {\n      this.internalState.changeFlags = {\n        dataChanged: false,\n        propsChanged: false,\n        updateTriggersChanged: false,\n        viewportChanged: false,\n        stateChanged: false,\n        extensionsChanged: false,\n        propsOrDataChanged: false,\n        somethingChanged: false\n      };\n    }\n  }, {\n    key: \"diffProps\",\n    value: function diffProps(newProps, oldProps) {\n      var changeFlags = _diffProps(newProps, oldProps);\n\n      if (changeFlags.updateTriggersChanged) {\n        for (var key in changeFlags.updateTriggersChanged) {\n          if (changeFlags.updateTriggersChanged[key]) {\n            this.invalidateAttribute(key);\n          }\n        }\n      }\n\n      if (changeFlags.transitionsChanged) {\n        for (var _key in changeFlags.transitionsChanged) {\n          this.internalState.uniformTransitions.add(_key, oldProps[_key], newProps[_key], newProps.transitions[_key]);\n        }\n      }\n\n      return this.setChangeFlags(changeFlags);\n    }\n  }, {\n    key: \"validateProps\",\n    value: function validateProps() {\n      _validateProps(this.props);\n    }\n  }, {\n    key: \"setModuleParameters\",\n    value: function setModuleParameters(moduleParameters) {\n      var _iterator10 = _createForOfIteratorHelper(this.getModels()),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var model = _step10.value;\n          model.updateModuleSettings(moduleParameters);\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n    }\n  }, {\n    key: \"updateAutoHighlight\",\n    value: function updateAutoHighlight(info) {\n      if (this.props.autoHighlight && !Number.isInteger(this.props.highlightedObjectIndex)) {\n        this._updateAutoHighlight(info);\n      }\n    }\n  }, {\n    key: \"_updateAutoHighlight\",\n    value: function _updateAutoHighlight(info) {\n      var pickingModuleParameters = {\n        pickingSelectedColor: info.picked ? info.color : null\n      };\n      var highlightColor = this.props.highlightColor;\n\n      if (info.picked && typeof highlightColor === 'function') {\n        pickingModuleParameters.pickingHighlightColor = highlightColor(info);\n      }\n\n      this.setModuleParameters(pickingModuleParameters);\n      this.setNeedsRedraw();\n    }\n  }, {\n    key: \"_updateModules\",\n    value: function _updateModules(_ref10, forceUpdate) {\n      var props = _ref10.props,\n          oldProps = _ref10.oldProps;\n      var autoHighlight = props.autoHighlight,\n          highlightedObjectIndex = props.highlightedObjectIndex,\n          highlightColor = props.highlightColor;\n\n      if (forceUpdate || oldProps.autoHighlight !== autoHighlight || oldProps.highlightedObjectIndex !== highlightedObjectIndex || oldProps.highlightColor !== highlightColor) {\n        var parameters = {};\n\n        if (!autoHighlight) {\n          parameters.pickingSelectedColor = null;\n        }\n\n        if (Array.isArray(highlightColor)) {\n          parameters.pickingHighlightColor = highlightColor;\n        }\n\n        if (Number.isInteger(highlightedObjectIndex)) {\n          parameters.pickingSelectedColor = highlightedObjectIndex >= 0 ? this.encodePickingColor(highlightedObjectIndex) : null;\n        }\n\n        this.setModuleParameters(parameters);\n      }\n    }\n  }, {\n    key: \"_getUpdateParams\",\n    value: function _getUpdateParams() {\n      return {\n        props: this.props,\n        oldProps: this.internalState.getOldProps(),\n        context: this.context,\n        changeFlags: this.internalState.changeFlags\n      };\n    }\n  }, {\n    key: \"_getNeedsRedraw\",\n    value: function _getNeedsRedraw(opts) {\n      if (!this.internalState) {\n        return false;\n      }\n\n      var redraw = false;\n      redraw = redraw || this.internalState.needsRedraw && this.id;\n      this.internalState.needsRedraw = this.internalState.needsRedraw && !opts.clearRedrawFlags;\n      var attributeManager = this.getAttributeManager();\n      var attributeManagerNeedsRedraw = attributeManager && attributeManager.getNeedsRedraw(opts);\n      redraw = redraw || attributeManagerNeedsRedraw;\n      return redraw;\n    }\n  }, {\n    key: \"_getAttributeManager\",\n    value: function _getAttributeManager() {\n      return new AttributeManager(this.context.gl, {\n        id: this.props.id,\n        stats: this.context.stats,\n        timeline: this.context.timeline\n      });\n    }\n  }, {\n    key: \"_initState\",\n    value: function _initState() {\n      assert(!this.internalState && !this.state);\n      assert(isFinite(this.props.coordinateSystem));\n\n      var attributeManager = this._getAttributeManager();\n\n      if (attributeManager) {\n        attributeManager.addInstanced({\n          instancePickingColors: {\n            type: 5121,\n            size: 3,\n            noAlloc: true,\n            update: this.calculateInstancePickingColors\n          }\n        });\n      }\n\n      this.internalState = new LayerState({\n        attributeManager: attributeManager,\n        layer: this\n      });\n      this.clearChangeFlags();\n      this.state = {};\n      Object.defineProperty(this.state, 'attributeManager', {\n        get: function get() {\n          log.deprecated('layer.state.attributeManager', 'layer.getAttributeManager()');\n          return attributeManager;\n        }\n      });\n      this.internalState.layer = this;\n      this.internalState.uniformTransitions = new UniformTransitionManager(this.context.timeline);\n      this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);\n      this.internalState.setAsyncProps(this.props);\n    }\n  }, {\n    key: \"_transferState\",\n    value: function _transferState(oldLayer) {\n      debug(TRACE_MATCHED, this, this === oldLayer);\n      var state = oldLayer.state,\n          internalState = oldLayer.internalState;\n\n      if (this === oldLayer) {\n        return;\n      }\n\n      this.internalState = internalState;\n      this.internalState.layer = this;\n      this.state = state;\n      this.internalState.setAsyncProps(this.props);\n      this.diffProps(this.props, this.internalState.getOldProps());\n    }\n  }, {\n    key: \"_onAsyncPropUpdated\",\n    value: function _onAsyncPropUpdated() {\n      this.diffProps(this.props, this.internalState.getOldProps());\n      this.setNeedsUpdate();\n    }\n  }]);\n\n  return Layer;\n}(Component);\n\nexport { Layer as default };\nLayer.layerName = 'Layer';\nLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["COORDINATE_SYSTEM","OPERATION","AttributeManager","UniformTransitionManager","diffProps","validateProps","count","log","debug","withParameters","setParameters","assert","memoize","mergeShaders","projectPosition","getWorldPosition","typedArrayManager","Component","LayerState","worldToPixels","load","TRACE_CHANGE_FLAG","TRACE_INITIALIZE","TRACE_UPDATE","TRACE_FINALIZE","TRACE_MATCHED","MAX_PICKING_COLOR_CACHE_SIZE","EMPTY_ARRAY","Object","freeze","areViewportsEqual","oldViewport","viewport","equals","pickingColorCache","Uint8ClampedArray","defaultProps","data","type","value","async","dataComparator","compare","optional","_dataDiff","__diff","dataTransform","onDataLoad","onError","fetch","url","propName","layer","loaders","loadOptions","signal","resourceManager","context","getLoadOptions","props","_loadOptions","inResourceManager","contains","add","resourceId","persistent","subscribe","onChange","internalState","reloadAsyncProp","consumerId","id","requestId","updateTriggers","visible","pickable","opacity","min","max","operation","DRAW","onHover","onClick","onDragStart","onDrag","onDragEnd","coordinateSystem","DEFAULT","coordinateOrigin","modelMatrix","wrapLongitude","positionFormat","colorFormat","parameters","transitions","extensions","getPolygonOffset","layerIndex","highlightedObjectIndex","autoHighlight","highlightColor","Layer","toString","className","constructor","layerName","name","raiseError","error","message","_this$props$onError","setState","updateObject","setChangeFlags","stateChanged","assign","state","setNeedsRedraw","redraw","needsRedraw","setNeedsUpdate","layerManager","String","needsUpdate","getNeedsRedraw","opts","clearRedrawFlags","_getNeedsRedraw","hasUniformTransition","shouldUpdateState","_getUpdateParams","uniformTransitions","active","isAsyncPropLoading","isPickable","getModels","models","model","getAttributeManager","attributeManager","getCurrentLayer","project","xyz","worldPosition","pixelProjectionMatrix","x","y","z","length","unproject","xy","params","use64bitPositions","LNGLAT","CARTESIAN","info","pickingEvent","nullPickingColor","encodePickingColor","i","target","decodePickingColor","color","Uint8Array","i1","i2","i3","index","initializeState","Error","getShaders","shaders","extension","call","getBounds","attributes","positions","instancePositions","_ref","oldProps","changeFlags","propsOrDataChanged","updateState","dataChanged","Array","isArray","dataRange","invalidateAll","neededPickingBuffer","Number","isInteger","needPickingBuffer","pickingColors","instancePickingColors","pickingColorsAttribute","constant","invalidate","finalizeState","delete","finalize","unsubscribe","clear","draw","getPickingInfo","mode","object","activateViewport","viewportChanged","isComposite","_update","invalidateAttribute","diffReason","updateAttributes","changedAttributes","_setModelAttributes","_updateAttributes","numInstances","getNumInstances","startIndices","getStartIndices","update","buffers","ignoreUnknownAttributes","getChangedAttributes","clearChangedFlags","_updateAttributeTransition","updateTransition","_updateUniformTransition","propsInTransition","create","key","defineProperty","calculateInstancePickingColors","attribute","cacheSize","Math","floor","usesPickingColorCache","warn","allocate","size","copy","maxCount","newCacheSize","pickingColor","subarray","excludeAttributes","userData","shaderAttributes","getShaderAttributes","setAttributes","disablePickingIndex","objectIndex","_disablePickingIndex","colors","start","getVertexOffset","end","buffer","subData","offset","restorePickingColors","updateSubBuffer","startOffset","undefined","_initialize","_initState","propsChanged","extensionsChanged","_updateState","stateNeedsUpdate","currentProps","currentViewport","updateParams","oldModels","gl","modelChanged","_updateModules","_renderLayers","setInstanceCount","clearChangeFlags","resetOldProps","_finalize","drawLayer","moduleParameters","uniforms","pow","setModuleParameters","offsets","polygonOffset","getChangeFlags","flags","flagChanged","concat","updateTriggersChanged","somethingChanged","newProps","transitionsChanged","updateModuleSettings","updateAutoHighlight","_updateAutoHighlight","pickingModuleParameters","pickingSelectedColor","picked","pickingHighlightColor","forceUpdate","getOldProps","attributeManagerNeedsRedraw","_getAttributeManager","stats","timeline","isFinite","addInstanced","noAlloc","get","deprecated","onAsyncPropUpdated","_onAsyncPropUpdated","bind","setAsyncProps","_transferState","oldLayer"],"sources":["../../../src/lib/layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable react/no-direct-mutation-state */\nimport {COORDINATE_SYSTEM, OPERATION} from './constants';\nimport AttributeManager from './attribute/attribute-manager';\nimport UniformTransitionManager from './uniform-transition-manager';\nimport {diffProps, validateProps} from '../lifecycle/props';\nimport {count} from '../utils/count';\nimport log from '../utils/log';\nimport debug from '../debug';\nimport GL from '@luma.gl/constants';\nimport {withParameters, setParameters} from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport memoize from '../utils/memoize';\nimport {mergeShaders} from '../utils/shader';\nimport {projectPosition, getWorldPosition} from '../shaderlib/project/project-functions';\nimport typedArrayManager from '../utils/typed-array-manager';\n\nimport Component from '../lifecycle/component';\nimport LayerState from './layer-state';\n\nimport {worldToPixels} from '@math.gl/web-mercator';\n\nimport {load} from '@loaders.gl/core';\n\nconst TRACE_CHANGE_FLAG = 'layer.changeFlag';\nconst TRACE_INITIALIZE = 'layer.initialize';\nconst TRACE_UPDATE = 'layer.update';\nconst TRACE_FINALIZE = 'layer.finalize';\nconst TRACE_MATCHED = 'layer.matched';\n\nconst MAX_PICKING_COLOR_CACHE_SIZE = 2 ** 24 - 1;\n\nconst EMPTY_ARRAY = Object.freeze([]);\n\n// Only compare the same two viewports once\nconst areViewportsEqual = memoize(({oldViewport, viewport}) => {\n  return oldViewport.equals(viewport);\n});\n\nlet pickingColorCache = new Uint8ClampedArray(0);\n\nconst defaultProps = {\n  // data: Special handling for null, see below\n  data: {type: 'data', value: EMPTY_ARRAY, async: true},\n  dataComparator: {type: 'function', value: null, compare: false, optional: true},\n  _dataDiff: {type: 'function', value: data => data && data.__diff, compare: false, optional: true},\n  dataTransform: {type: 'function', value: null, compare: false, optional: true},\n  onDataLoad: {type: 'function', value: null, compare: false, optional: true},\n  onError: {type: 'function', value: null, compare: false, optional: true},\n  fetch: {\n    type: 'function',\n    value: (url, {propName, layer, loaders, loadOptions, signal}) => {\n      const {resourceManager} = layer.context;\n      loadOptions = loadOptions || layer.getLoadOptions();\n      loaders = loaders || layer.props.loaders;\n      if (signal) {\n        loadOptions = {\n          ...loadOptions,\n          fetch: {\n            ...loadOptions?.fetch,\n            signal\n          }\n        };\n      }\n\n      let inResourceManager = resourceManager.contains(url);\n\n      if (!inResourceManager && !loadOptions) {\n        // If there is no layer-specific load options, then attempt to cache this resource in the data manager\n        resourceManager.add({resourceId: url, data: load(url, loaders), persistent: false});\n        inResourceManager = true;\n      }\n      if (inResourceManager) {\n        return resourceManager.subscribe({\n          resourceId: url,\n          onChange: data => layer.internalState.reloadAsyncProp(propName, data),\n          consumerId: layer.id,\n          requestId: propName\n        });\n      }\n\n      return load(url, loaders, loadOptions);\n    },\n    compare: false\n  },\n  updateTriggers: {}, // Update triggers: a core change detection mechanism in deck.gl\n\n  visible: true,\n  pickable: false,\n  opacity: {type: 'number', min: 0, max: 1, value: 1},\n  operation: OPERATION.DRAW,\n\n  onHover: {type: 'function', value: null, compare: false, optional: true},\n  onClick: {type: 'function', value: null, compare: false, optional: true},\n  onDragStart: {type: 'function', value: null, compare: false, optional: true},\n  onDrag: {type: 'function', value: null, compare: false, optional: true},\n  onDragEnd: {type: 'function', value: null, compare: false, optional: true},\n\n  coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n  coordinateOrigin: {type: 'array', value: [0, 0, 0], compare: true},\n  modelMatrix: {type: 'array', value: null, compare: true, optional: true},\n  wrapLongitude: false,\n  positionFormat: 'XYZ',\n  colorFormat: 'RGBA',\n\n  parameters: {type: 'object', value: {}, optional: true, compare: true},\n  transitions: null,\n  extensions: [],\n  loaders: {type: 'array', value: [], optional: true, compare: true},\n\n  // Offset depth based on layer index to avoid z-fighting.\n  // Negative values pull layer towards the camera\n  // https://www.opengl.org/archives/resources/faq/technical/polygonoffset.htm\n  getPolygonOffset: {\n    type: 'function',\n    value: ({layerIndex}) => [0, -layerIndex * 100],\n    compare: false\n  },\n\n  // Selection/Highlighting\n  highlightedObjectIndex: null,\n  autoHighlight: false,\n  highlightColor: {type: 'accessor', value: [0, 0, 128, 128]}\n};\n\nexport default class Layer extends Component {\n  toString() {\n    const className = this.constructor.layerName || this.constructor.name;\n    return `${className}({id: '${this.props.id}'})`;\n  }\n\n  raiseError(error, message) {\n    if (message) {\n      error.message = `${message}: ${error.message}`;\n    }\n    if (!this.props.onError?.(error)) {\n      this.context?.onError?.(error, this);\n    }\n  }\n\n  // Public API\n\n  // Updates selected state members and marks the object for redraw\n  setState(updateObject) {\n    this.setChangeFlags({stateChanged: true});\n    Object.assign(this.state, updateObject);\n    this.setNeedsRedraw();\n  }\n\n  // Sets the redraw flag for this layer, will trigger a redraw next animation frame\n  setNeedsRedraw(redraw = true) {\n    if (this.internalState) {\n      this.internalState.needsRedraw = redraw;\n    }\n  }\n\n  // This layer needs a deep update\n  setNeedsUpdate() {\n    this.context.layerManager.setNeedsUpdate(String(this));\n    this.internalState.needsUpdate = true;\n  }\n\n  // Checks state of attributes and model\n  getNeedsRedraw(opts = {clearRedrawFlags: false}) {\n    return this._getNeedsRedraw(opts);\n  }\n\n  // Checks if layer attributes needs updating\n  needsUpdate() {\n    // Call subclass lifecycle method\n    return (\n      this.internalState.needsUpdate ||\n      this.hasUniformTransition() ||\n      this.shouldUpdateState(this._getUpdateParams())\n    );\n    // End lifecycle method\n  }\n\n  hasUniformTransition() {\n    return this.internalState.uniformTransitions.active;\n  }\n\n  get isLoaded() {\n    return this.internalState && !this.internalState.isAsyncPropLoading();\n  }\n\n  get wrapLongitude() {\n    return this.props.wrapLongitude;\n  }\n\n  // Returns true if the layer is pickable and visible.\n  isPickable() {\n    return this.props.pickable && this.props.visible;\n  }\n\n  // Return an array of models used by this layer, can be overriden by layer subclass\n  getModels() {\n    return this.state && (this.state.models || (this.state.model ? [this.state.model] : []));\n  }\n\n  getAttributeManager() {\n    return this.internalState && this.internalState.attributeManager;\n  }\n\n  // Returns the most recent layer that matched to this state\n  // (When reacting to an async event, this layer may no longer be the latest)\n  getCurrentLayer() {\n    return this.internalState && this.internalState.layer;\n  }\n\n  // Returns the default parse options for async props\n  getLoadOptions() {\n    return this.props.loadOptions;\n  }\n\n  // PROJECTION METHODS\n\n  // Projects a point with current map state (lat, lon, zoom, pitch, bearing)\n  // From the current layer's coordinate system to screen\n  project(xyz) {\n    const {viewport} = this.context;\n    const worldPosition = getWorldPosition(xyz, {\n      viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem\n    });\n    const [x, y, z] = worldToPixels(worldPosition, viewport.pixelProjectionMatrix);\n    return xyz.length === 2 ? [x, y] : [x, y, z];\n  }\n\n  // Note: this does not reverse `project`.\n  // Always unprojects to the viewport's coordinate system\n  unproject(xy) {\n    const {viewport} = this.context;\n    return viewport.unproject(xy);\n  }\n\n  projectPosition(xyz, params) {\n    return projectPosition(xyz, {\n      viewport: this.context.viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem,\n      ...params\n    });\n  }\n\n  use64bitPositions() {\n    const {coordinateSystem} = this.props;\n    return (\n      coordinateSystem === COORDINATE_SYSTEM.DEFAULT ||\n      coordinateSystem === COORDINATE_SYSTEM.LNGLAT ||\n      coordinateSystem === COORDINATE_SYSTEM.CARTESIAN\n    );\n  }\n\n  // Event handling\n  onHover(info, pickingEvent) {\n    if (this.props.onHover) {\n      return this.props.onHover(info, pickingEvent);\n    }\n    return false;\n  }\n\n  onClick(info, pickingEvent) {\n    if (this.props.onClick) {\n      return this.props.onClick(info, pickingEvent);\n    }\n    return false;\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  // @return {Array} - a black color\n  nullPickingColor() {\n    return [0, 0, 0];\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  encodePickingColor(i, target = []) {\n    target[0] = (i + 1) & 255;\n    target[1] = ((i + 1) >> 8) & 255;\n    target[2] = (((i + 1) >> 8) >> 8) & 255;\n    return target;\n  }\n\n  // Returns the index corresponding to a picking color that doesn't match any subfeature\n  // @param {Uint8Array} color - color array to be decoded\n  // @return {Array} - the decoded picking color\n  decodePickingColor(color) {\n    assert(color instanceof Uint8Array);\n    const [i1, i2, i3] = color;\n    // 1 was added to seperate from no selection\n    const index = i1 + i2 * 256 + i3 * 65536 - 1;\n    return index;\n  }\n\n  // //////////////////////////////////////////////////\n  // LIFECYCLE METHODS, overridden by the layer subclasses\n\n  // Called once to set up the initial state\n  // App can create WebGL resources\n  initializeState() {\n    throw new Error(`Layer ${this} has not defined initializeState`);\n  }\n\n  getShaders(shaders) {\n    for (const extension of this.props.extensions) {\n      shaders = mergeShaders(shaders, extension.getShaders.call(this, extension));\n    }\n    return shaders;\n  }\n\n  // Default implementation\n  // Sublayers chould override this method to provide an accurate calculation of the bounds\n  getBounds() {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) return null;\n    const {positions, instancePositions} = attributeManager.attributes;\n    return (positions || instancePositions)?.getBounds();\n  }\n\n  // Let's layer control if updateState should be called\n  shouldUpdateState({oldProps, props, context, changeFlags}) {\n    return changeFlags.propsOrDataChanged;\n  }\n\n  // Default implementation, all attributes will be invalidated and updated\n  // when data changes\n  /* eslint-disable-next-line complexity */\n  updateState({oldProps, props, context, changeFlags}) {\n    const attributeManager = this.getAttributeManager();\n    if (changeFlags.dataChanged && attributeManager) {\n      const {dataChanged} = changeFlags;\n      if (Array.isArray(dataChanged)) {\n        // is partial update\n        for (const dataRange of dataChanged) {\n          attributeManager.invalidateAll(dataRange);\n        }\n      } else {\n        attributeManager.invalidateAll();\n      }\n    }\n\n    const neededPickingBuffer =\n      Number.isInteger(oldProps.highlightedObjectIndex) || oldProps.pickable;\n    const needPickingBuffer = Number.isInteger(props.highlightedObjectIndex) || props.pickable;\n    if (neededPickingBuffer !== needPickingBuffer && attributeManager) {\n      const {pickingColors, instancePickingColors} = attributeManager.attributes;\n      const pickingColorsAttribute = pickingColors || instancePickingColors;\n      if (pickingColorsAttribute) {\n        if (needPickingBuffer && pickingColorsAttribute.constant) {\n          pickingColorsAttribute.constant = false;\n          attributeManager.invalidate(pickingColorsAttribute.id);\n        }\n        if (!pickingColorsAttribute.value && !needPickingBuffer) {\n          pickingColorsAttribute.constant = true;\n          pickingColorsAttribute.value = [0, 0, 0];\n        }\n      }\n    }\n  }\n\n  // Called once when layer is no longer matched and state will be discarded\n  // App can destroy WebGL resources here\n  finalizeState() {\n    for (const model of this.getModels()) {\n      model.delete();\n    }\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.finalize();\n    }\n    this.context.resourceManager.unsubscribe({consumerId: this.id});\n    this.internalState.uniformTransitions.clear();\n    this.internalState.finalize();\n  }\n\n  // If state has a model, draw it with supplied uniforms\n  draw(opts) {\n    for (const model of this.getModels()) {\n      model.draw(opts);\n    }\n  }\n\n  // called to populate the info object that is passed to the event handler\n  // @return null to cancel event\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n\n    if (index >= 0) {\n      // If props.data is an indexable array, get the object\n      if (Array.isArray(this.props.data)) {\n        info.object = this.props.data[index];\n      }\n    }\n\n    return info;\n  }\n\n  // END LIFECYCLE METHODS\n  // //////////////////////////////////////////////////\n\n  // INTERNAL METHODS\n  activateViewport(viewport) {\n    const oldViewport = this.internalState.viewport;\n    this.internalState.viewport = viewport;\n\n    if (!oldViewport || !areViewportsEqual({oldViewport, viewport})) {\n      this.setChangeFlags({viewportChanged: true});\n\n      if (this.isComposite) {\n        if (this.needsUpdate()) {\n          // Composite layers may add/remove sublayers on viewport change\n          // Because we cannot change the layers list during a draw cycle, we don't want to update sublayers right away\n          // This will not call update immediately, but mark the layerManager as needs update on the next frame\n          this.setNeedsUpdate();\n        }\n      } else {\n        this._update();\n      }\n    }\n  }\n\n  // Default implementation of attribute invalidation, can be redefined\n  invalidateAttribute(name = 'all', diffReason = '') {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    if (name === 'all') {\n      attributeManager.invalidateAll();\n    } else {\n      attributeManager.invalidate(name);\n    }\n  }\n\n  updateAttributes(changedAttributes) {\n    for (const model of this.getModels()) {\n      this._setModelAttributes(model, changedAttributes);\n    }\n  }\n\n  // Calls attribute manager to update any WebGL attributes\n  _updateAttributes(props) {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    // Figure out data length\n    const numInstances = this.getNumInstances(props);\n    const startIndices = this.getStartIndices(props);\n\n    attributeManager.update({\n      data: props.data,\n      numInstances,\n      startIndices,\n      props,\n      transitions: props.transitions,\n      buffers: props.data.attributes,\n      context: this,\n      // Don't worry about non-attribute props\n      ignoreUnknownAttributes: true\n    });\n\n    const changedAttributes = attributeManager.getChangedAttributes({clearChangedFlags: true});\n    this.updateAttributes(changedAttributes);\n  }\n\n  // Update attribute transitions. This is called in drawLayer, no model updates required.\n  _updateAttributeTransition() {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.updateTransition();\n    }\n  }\n\n  // Update uniform (prop) transitions. This is called in updateState, may result in model updates.\n  _updateUniformTransition() {\n    const {uniformTransitions} = this.internalState;\n    if (uniformTransitions.active) {\n      // clone props\n      const propsInTransition = uniformTransitions.update();\n      const props = Object.create(this.props);\n      for (const key in propsInTransition) {\n        Object.defineProperty(props, key, {value: propsInTransition[key]});\n      }\n      return props;\n    }\n    return this.props;\n  }\n\n  calculateInstancePickingColors(attribute, {numInstances}) {\n    if (attribute.constant) {\n      return;\n    }\n\n    // calculateInstancePickingColors always generates the same sequence.\n    // pickingColorCache saves the largest generated sequence for reuse\n    const cacheSize = Math.floor(pickingColorCache.length / 3);\n\n    // Record when using the picking buffer cache, so that layers can always point at the most recently allocated cache\n    this.internalState.usesPickingColorCache = true;\n\n    if (cacheSize < numInstances) {\n      if (numInstances > MAX_PICKING_COLOR_CACHE_SIZE) {\n        log.warn(\n          'Layer has too many data objects. Picking might not be able to distinguish all objects.'\n        )();\n      }\n\n      pickingColorCache = typedArrayManager.allocate(pickingColorCache, numInstances, {\n        size: 3,\n        copy: true,\n        maxCount: Math.max(numInstances, MAX_PICKING_COLOR_CACHE_SIZE)\n      });\n\n      // If the attribute is larger than the cache, resize the cache and populate the missing chunk\n      const newCacheSize = Math.floor(pickingColorCache.length / 3);\n      const pickingColor = [];\n      for (let i = cacheSize; i < newCacheSize; i++) {\n        this.encodePickingColor(i, pickingColor);\n        pickingColorCache[i * 3 + 0] = pickingColor[0];\n        pickingColorCache[i * 3 + 1] = pickingColor[1];\n        pickingColorCache[i * 3 + 2] = pickingColor[2];\n      }\n    }\n\n    attribute.value = pickingColorCache.subarray(0, numInstances * 3);\n  }\n\n  _setModelAttributes(model, changedAttributes) {\n    const attributeManager = this.getAttributeManager();\n    const excludeAttributes = model.userData.excludeAttributes || {};\n    const shaderAttributes = attributeManager.getShaderAttributes(\n      changedAttributes,\n      excludeAttributes\n    );\n\n    model.setAttributes(shaderAttributes);\n  }\n\n  // Sets the picking color at the specified index to null picking color. Used for multi-depth picking.\n  // This method may be overriden by layer implementations\n  disablePickingIndex(objectIndex) {\n    this._disablePickingIndex(objectIndex);\n  }\n\n  _disablePickingIndex(objectIndex) {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n\n    const start = colors.getVertexOffset(objectIndex);\n    const end = colors.getVertexOffset(objectIndex + 1);\n\n    // Fill the sub buffer with 0s\n    colors.buffer.subData({\n      data: new Uint8Array(end - start),\n      offset: start // 1 byte per element\n    });\n  }\n\n  restorePickingColors() {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n    // The picking color cache may have been freed and then reallocated. This ensures we read from the currently allocated cache.\n    if (\n      this.internalState.usesPickingColorCache &&\n      colors.value.buffer !== pickingColorCache.buffer\n    ) {\n      colors.value = pickingColorCache.subarray(0, colors.value.length);\n    }\n    colors.updateSubBuffer({startOffset: 0});\n  }\n\n  // Deduces numer of instances. Intention is to support:\n  // - Explicit setting of numInstances\n  // - Auto-deduction for ES6 containers that define a size member\n  // - Auto-deduction for Classic Arrays via the built-in length attribute\n  // - Auto-deduction via arrays\n  getNumInstances(props) {\n    props = props || this.props;\n\n    // First Check if app has provided an explicit value\n    if (props.numInstances !== undefined) {\n      return props.numInstances;\n    }\n\n    // Second check if the layer has set its own value\n    if (this.state && this.state.numInstances !== undefined) {\n      return this.state.numInstances;\n    }\n\n    // Use container library to get a count for any ES6 container or object\n    return count(props.data);\n  }\n\n  // Buffer layout describes how many attribute values are packed for each data object\n  // The default (null) is one value each object.\n  // Some data formats (e.g. paths, polygons) have various length. Their buffer layout\n  //  is in the form of [L0, L1, L2, ...]\n  getStartIndices(props) {\n    props = props || this.props;\n\n    // First Check if startIndices is provided as an explicit value\n    if (props.startIndices !== undefined) {\n      return props.startIndices;\n    }\n\n    // Second check if the layer has set its own value\n    if (this.state && this.state.startIndices) {\n      return this.state.startIndices;\n    }\n\n    return null;\n  }\n\n  // LAYER MANAGER API\n  // Should only be called by the deck.gl LayerManager class\n\n  // Called by layer manager when a new layer is found\n  /* eslint-disable max-statements */\n  _initialize() {\n    debug(TRACE_INITIALIZE, this);\n\n    this._initState();\n\n    // Call subclass lifecycle methods\n    this.initializeState(this.context);\n    // Initialize extensions\n    for (const extension of this.props.extensions) {\n      extension.initializeState.call(this, this.context, extension);\n    }\n    // End subclass lifecycle methods\n\n    // initializeState callback tends to clear state\n    this.setChangeFlags({\n      dataChanged: true,\n      propsChanged: true,\n      viewportChanged: true,\n      extensionsChanged: true\n    });\n\n    this._updateState();\n  }\n\n  // Called by layer manager\n  // if this layer is new (not matched with an existing layer) oldProps will be empty object\n  _update() {\n    // Call subclass lifecycle method\n    const stateNeedsUpdate = this.needsUpdate();\n    // End lifecycle method\n    debug(TRACE_UPDATE, this, stateNeedsUpdate);\n\n    if (stateNeedsUpdate) {\n      this._updateState();\n    }\n  }\n\n  // Common code for _initialize and _update\n  _updateState() {\n    const currentProps = this.props;\n    const currentViewport = this.context.viewport;\n    const propsInTransition = this._updateUniformTransition();\n    this.internalState.propsInTransition = propsInTransition;\n    // Overwrite this.context.viewport during update to use the last activated viewport on this layer\n    // In multi-view applications, a layer may only be drawn in one of the views\n    // Which would make the \"active\" viewport different from the shared context\n    this.context.viewport = this.internalState.viewport || currentViewport;\n    // Overwrite this.props during update to use in-transition prop values\n    this.props = propsInTransition;\n\n    try {\n      const updateParams = this._getUpdateParams();\n      const oldModels = this.getModels();\n\n      // Safely call subclass lifecycle methods\n      if (this.context.gl) {\n        this.updateState(updateParams);\n      } else {\n        try {\n          this.updateState(updateParams);\n        } catch (error) {\n          // ignore error if gl context is missing\n        }\n      }\n      // Execute extension updates\n      for (const extension of this.props.extensions) {\n        extension.updateState.call(this, updateParams, extension);\n      }\n\n      const modelChanged = this.getModels()[0] !== oldModels[0];\n      this._updateModules(updateParams, modelChanged);\n      // End subclass lifecycle methods\n\n      if (this.isComposite) {\n        // Render or update previously rendered sublayers\n        this._renderLayers(updateParams);\n      } else {\n        this.setNeedsRedraw();\n        // Add any subclass attributes\n        this._updateAttributes(this.props);\n\n        // Note: Automatic instance count update only works for single layers\n        if (this.state.model) {\n          this.state.model.setInstanceCount(this.getNumInstances());\n        }\n      }\n    } finally {\n      // Restore shared context\n      this.context.viewport = currentViewport;\n      this.props = currentProps;\n      this.clearChangeFlags();\n      this.internalState.needsUpdate = false;\n      this.internalState.resetOldProps();\n    }\n  }\n  /* eslint-enable max-statements */\n\n  // Called by manager when layer is about to be disposed\n  // Note: not guaranteed to be called on application shutdown\n  _finalize() {\n    debug(TRACE_FINALIZE, this);\n\n    // Call subclass lifecycle method\n    this.finalizeState(this.context);\n    // Finalize extensions\n    for (const extension of this.props.extensions) {\n      extension.finalizeState.call(this, extension);\n    }\n  }\n\n  // Calculates uniforms\n  drawLayer({moduleParameters = null, uniforms = {}, parameters = {}}) {\n    this._updateAttributeTransition();\n\n    const currentProps = this.props;\n    // Overwrite this.props during redraw to use in-transition prop values\n    // `internalState.propsInTransition` could be missing if `updateState` failed\n    this.props = this.internalState.propsInTransition || currentProps;\n\n    const {opacity} = this.props;\n    // apply gamma to opacity to make it visually \"linear\"\n    uniforms.opacity = Math.pow(opacity, 1 / 2.2);\n\n    try {\n      // TODO/ib - hack move to luma Model.draw\n      if (moduleParameters) {\n        this.setModuleParameters(moduleParameters);\n      }\n\n      // Apply polygon offset to avoid z-fighting\n      // TODO - move to draw-layers\n      const {getPolygonOffset} = this.props;\n      const offsets = (getPolygonOffset && getPolygonOffset(uniforms)) || [0, 0];\n\n      setParameters(this.context.gl, {polygonOffset: offsets});\n\n      // Call subclass lifecycle method\n      withParameters(this.context.gl, parameters, () => {\n        const opts = {moduleParameters, uniforms, parameters, context: this.context};\n\n        // extensions\n        for (const extension of this.props.extensions) {\n          extension.draw.call(this, opts, extension);\n        }\n\n        this.draw(opts);\n      });\n    } finally {\n      this.props = currentProps;\n    }\n\n    // End lifecycle method\n  }\n\n  // Helper methods\n  getChangeFlags() {\n    return this.internalState.changeFlags;\n  }\n\n  // Dirty some change flags, will be handled by updateLayer\n  /* eslint-disable complexity */\n  setChangeFlags(flags) {\n    const {changeFlags} = this.internalState;\n\n    /* eslint-disable no-fallthrough, max-depth */\n    for (const key in flags) {\n      if (flags[key]) {\n        let flagChanged = false;\n        switch (key) {\n          case 'dataChanged':\n            // changeFlags.dataChanged may be `false`, a string (reason) or an array of ranges\n            if (Array.isArray(changeFlags[key])) {\n              changeFlags[key] = Array.isArray(flags[key])\n                ? changeFlags[key].concat(flags[key])\n                : flags[key];\n              flagChanged = true;\n            }\n\n          default:\n            if (!changeFlags[key]) {\n              changeFlags[key] = flags[key];\n              flagChanged = true;\n            }\n        }\n        if (flagChanged) {\n          debug(TRACE_CHANGE_FLAG, this, key, flags);\n        }\n      }\n    }\n    /* eslint-enable no-fallthrough, max-depth */\n\n    // Update composite flags\n    const propsOrDataChanged =\n      changeFlags.dataChanged ||\n      changeFlags.updateTriggersChanged ||\n      changeFlags.propsChanged ||\n      changeFlags.extensionsChanged;\n    changeFlags.propsOrDataChanged = propsOrDataChanged;\n    changeFlags.somethingChanged =\n      propsOrDataChanged || flags.viewportChanged || flags.stateChanged;\n  }\n  /* eslint-enable complexity */\n\n  // Clear all changeFlags, typically after an update\n  clearChangeFlags() {\n    this.internalState.changeFlags = {\n      // Primary changeFlags, can be strings stating reason for change\n      dataChanged: false,\n      propsChanged: false,\n      updateTriggersChanged: false,\n      viewportChanged: false,\n      stateChanged: false,\n      extensionsChanged: false,\n\n      // Derived changeFlags\n      propsOrDataChanged: false,\n      somethingChanged: false\n    };\n  }\n\n  // Compares the layers props with old props from a matched older layer\n  // and extracts change flags that describe what has change so that state\n  // can be update correctly with minimal effort\n  diffProps(newProps, oldProps) {\n    const changeFlags = diffProps(newProps, oldProps);\n\n    // iterate over changedTriggers\n    if (changeFlags.updateTriggersChanged) {\n      for (const key in changeFlags.updateTriggersChanged) {\n        if (changeFlags.updateTriggersChanged[key]) {\n          this.invalidateAttribute(key);\n        }\n      }\n    }\n\n    // trigger uniform transitions\n    if (changeFlags.transitionsChanged) {\n      for (const key in changeFlags.transitionsChanged) {\n        // prop changed and transition is enabled\n        this.internalState.uniformTransitions.add(\n          key,\n          oldProps[key],\n          newProps[key],\n          newProps.transitions[key]\n        );\n      }\n    }\n\n    return this.setChangeFlags(changeFlags);\n  }\n\n  // Called by layer manager to validate props (in development)\n  validateProps() {\n    validateProps(this.props);\n  }\n\n  setModuleParameters(moduleParameters) {\n    for (const model of this.getModels()) {\n      model.updateModuleSettings(moduleParameters);\n    }\n  }\n\n  updateAutoHighlight(info) {\n    if (this.props.autoHighlight && !Number.isInteger(this.props.highlightedObjectIndex)) {\n      this._updateAutoHighlight(info);\n    }\n  }\n\n  // May be overriden by classes\n  _updateAutoHighlight(info) {\n    const pickingModuleParameters = {\n      pickingSelectedColor: info.picked ? info.color : null\n    };\n    const {highlightColor} = this.props;\n    if (info.picked && typeof highlightColor === 'function') {\n      pickingModuleParameters.pickingHighlightColor = highlightColor(info);\n    }\n    this.setModuleParameters(pickingModuleParameters);\n    // setModuleParameters does not trigger redraw\n    this.setNeedsRedraw();\n  }\n\n  // PRIVATE METHODS\n  _updateModules({props, oldProps}, forceUpdate) {\n    // Picking module parameters\n    const {autoHighlight, highlightedObjectIndex, highlightColor} = props;\n    if (\n      forceUpdate ||\n      oldProps.autoHighlight !== autoHighlight ||\n      oldProps.highlightedObjectIndex !== highlightedObjectIndex ||\n      oldProps.highlightColor !== highlightColor\n    ) {\n      const parameters = {};\n      if (!autoHighlight) {\n        parameters.pickingSelectedColor = null;\n      }\n      if (Array.isArray(highlightColor)) {\n        parameters.pickingHighlightColor = highlightColor;\n      }\n\n      // highlightedObjectIndex will overwrite any settings from auto highlighting.\n      if (Number.isInteger(highlightedObjectIndex)) {\n        parameters.pickingSelectedColor =\n          highlightedObjectIndex >= 0 ? this.encodePickingColor(highlightedObjectIndex) : null;\n      }\n\n      this.setModuleParameters(parameters);\n    }\n  }\n\n  _getUpdateParams() {\n    return {\n      props: this.props,\n      oldProps: this.internalState.getOldProps(),\n      context: this.context,\n      changeFlags: this.internalState.changeFlags\n    };\n  }\n\n  // Checks state of attributes and model\n  _getNeedsRedraw(opts) {\n    // this method may be called by the render loop as soon a the layer\n    // has been created, so guard against uninitialized state\n    if (!this.internalState) {\n      return false;\n    }\n\n    let redraw = false;\n    redraw = redraw || (this.internalState.needsRedraw && this.id);\n    this.internalState.needsRedraw = this.internalState.needsRedraw && !opts.clearRedrawFlags;\n\n    // TODO - is attribute manager needed? - Model should be enough.\n    const attributeManager = this.getAttributeManager();\n    const attributeManagerNeedsRedraw = attributeManager && attributeManager.getNeedsRedraw(opts);\n    redraw = redraw || attributeManagerNeedsRedraw;\n\n    return redraw;\n  }\n\n  // Create new attribute manager\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats,\n      timeline: this.context.timeline\n    });\n  }\n\n  _initState() {\n    assert(!this.internalState && !this.state); // finalized layer cannot be reused\n    assert(isFinite(this.props.coordinateSystem)); // invalid coordinateSystem\n\n    const attributeManager = this._getAttributeManager();\n\n    if (attributeManager) {\n      // All instanced layers get instancePickingColors attribute by default\n      // Their shaders can use it to render a picking scene\n      // TODO - this slightly slows down non instanced layers\n      attributeManager.addInstanced({\n        instancePickingColors: {\n          type: GL.UNSIGNED_BYTE,\n          size: 3,\n          noAlloc: true,\n          update: this.calculateInstancePickingColors\n        }\n      });\n    }\n\n    this.internalState = new LayerState({\n      attributeManager,\n      layer: this\n    });\n    this.clearChangeFlags(); // populate this.internalState.changeFlags\n\n    this.state = {};\n    // for backwards compatibility with older layers\n    // TODO - remove in next release\n    /* eslint-disable accessor-pairs */\n    Object.defineProperty(this.state, 'attributeManager', {\n      get: () => {\n        log.deprecated('layer.state.attributeManager', 'layer.getAttributeManager()');\n        return attributeManager;\n      }\n    });\n    /* eslint-enable accessor-pairs */\n\n    this.internalState.layer = this;\n    this.internalState.uniformTransitions = new UniformTransitionManager(this.context.timeline);\n    this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n  }\n\n  // Called by layer manager to transfer state from an old layer\n  _transferState(oldLayer) {\n    debug(TRACE_MATCHED, this, this === oldLayer);\n\n    const {state, internalState} = oldLayer;\n\n    if (this === oldLayer) {\n      return;\n    }\n\n    // Move internalState\n    this.internalState = internalState;\n    this.internalState.layer = this;\n\n    // Move state\n    this.state = state;\n    // We keep the state ref on old layers to support async actions\n    // oldLayer.state = null;\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n\n    this.diffProps(this.props, this.internalState.getOldProps());\n  }\n\n  _onAsyncPropUpdated() {\n    this.diffProps(this.props, this.internalState.getOldProps());\n    this.setNeedsUpdate();\n  }\n}\n\nLayer.layerName = 'Layer';\nLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}