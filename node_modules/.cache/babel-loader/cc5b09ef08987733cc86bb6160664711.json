{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { CubeGeometry } from '@luma.gl/core';\nimport { UNIT } from '@deck.gl/core';\nimport ColumnLayer from './column-layer';\nvar defaultProps = {\n  cellSize: {\n    type: 'number',\n    min: 0,\n    value: 1000\n  },\n  offset: {\n    type: 'array',\n    min: 0,\n    value: [1, 1]\n  }\n};\n\nvar GridCellLayer = /*#__PURE__*/function (_ColumnLayer) {\n  _inherits(GridCellLayer, _ColumnLayer);\n\n  var _super = _createSuper(GridCellLayer);\n\n  function GridCellLayer() {\n    _classCallCheck(this, GridCellLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(GridCellLayer, [{\n    key: \"getGeometry\",\n    value: function getGeometry(diskResolution) {\n      return new CubeGeometry();\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref) {\n      var uniforms = _ref.uniforms;\n      var _this$props = this.props,\n          elevationScale = _this$props.elevationScale,\n          extruded = _this$props.extruded,\n          offset = _this$props.offset,\n          coverage = _this$props.coverage,\n          cellSize = _this$props.cellSize,\n          angle = _this$props.angle,\n          radiusUnits = _this$props.radiusUnits;\n      this.state.model.setUniforms(uniforms).setUniforms({\n        radius: cellSize / 2,\n        radiusUnits: UNIT[radiusUnits],\n        angle: angle,\n        offset: offset,\n        extruded: extruded,\n        coverage: coverage,\n        elevationScale: elevationScale,\n        edgeDistance: 1,\n        isWireframe: false\n      }).draw();\n    }\n  }]);\n\n  return GridCellLayer;\n}(ColumnLayer);\n\nexport { GridCellLayer as default };\nGridCellLayer.layerName = 'GridCellLayer';\nGridCellLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":";;;;AAoBA,SAAQA,YAAR,QAA2B,eAA3B;AACA,SAAQC,IAAR,QAAmB,eAAnB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AAEA,IAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE;IAACC,IAAI,EAAE,QAAP;IAAiBC,GAAG,EAAE,CAAtB;IAAyBC,KAAK,EAAE;EAAhC,CADS;EAEnBC,MAAM,EAAE;IAACH,IAAI,EAAE,OAAP;IAAgBC,GAAG,EAAE,CAArB;IAAwBC,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;EAA/B;AAFW,CAArB;;IAKqBE,a;;;;;;;;;;;;;WACnBC,qBAAYC,cAAZD,EAA4B;MAC1B,OAAO,IAAIV,YAAJ,EAAP;IACD;;;WAEDY,oBAAiB;MAAA,IAAXC,QAAW,QAAXA,QAAW;MACf,kBAAmF,KAAKC,KAAxF;MAAA,IAAOC,cAAP,eAAOA,cAAP;MAAA,IAAuBC,QAAvB,eAAuBA,QAAvB;MAAA,IAAiCR,MAAjC,eAAiCA,MAAjC;MAAA,IAAyCS,QAAzC,eAAyCA,QAAzC;MAAA,IAAmDb,QAAnD,eAAmDA,QAAnD;MAAA,IAA6Dc,KAA7D,eAA6DA,KAA7D;MAAA,IAAoEC,WAApE,eAAoEA,WAApE;MACA,KAAKC,KAAL,CAAWC,KAAX,CACGC,WADH,CACeT,QADf,EAEGS,WAFH,CAEe;QACXC,MAAM,EAAEnB,QAAQ,GAAG,CADR;QAEXe,WAAW,EAAElB,IAAI,CAACkB,WAAD,CAFN;QAGXD,KAHW,EAGXA,KAHW;QAIXV,MAJW,EAIXA,MAJW;QAKXQ,QALW,EAKXA,QALW;QAMXC,QANW,EAMXA,QANW;QAOXF,cAPW,EAOXA,cAPW;QAQXS,YAAY,EAAE,CARH;QASXC,WAAW,EAAE;MATF,CAFf,EAaGb,IAbH;IAcD;;;;EArBwCV,W;;SAAtBO,a;AAwBrBA,aAAa,CAACiB,SAAdjB,GAA0B,eAA1BA;AACAA,aAAa,CAACN,YAAdM,GAA6BN,YAA7BM","names":["CubeGeometry","UNIT","ColumnLayer","defaultProps","cellSize","type","min","value","offset","GridCellLayer","getGeometry","diskResolution","draw","uniforms","props","elevationScale","extruded","coverage","angle","radiusUnits","state","model","setUniforms","radius","edgeDistance","isWireframe","layerName"],"sources":["../../../src/column-layer/grid-cell-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CubeGeometry} from '@luma.gl/core';\nimport {UNIT} from '@deck.gl/core';\nimport ColumnLayer from './column-layer';\n\nconst defaultProps = {\n  cellSize: {type: 'number', min: 0, value: 1000},\n  offset: {type: 'array', min: 0, value: [1, 1]}\n};\n\nexport default class GridCellLayer extends ColumnLayer {\n  getGeometry(diskResolution) {\n    return new CubeGeometry();\n  }\n\n  draw({uniforms}) {\n    const {elevationScale, extruded, offset, coverage, cellSize, angle, radiusUnits} = this.props;\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        radius: cellSize / 2,\n        radiusUnits: UNIT[radiusUnits],\n        angle,\n        offset,\n        extruded,\n        coverage,\n        elevationScale,\n        edgeDistance: 1,\n        isWireframe: false\n      })\n      .draw();\n  }\n}\n\nGridCellLayer.layerName = 'GridCellLayer';\nGridCellLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}