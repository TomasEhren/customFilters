{"ast":null,"code":"import { CompositeLayer, createIterable, log } from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nimport { replaceInRange } from '../utils';\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n  getPolygon: {\n    type: 'accessor',\n    value: f => f.polygon\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: defaultFillColor\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: defaultLineColor\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  material: true\n};\nexport default class PolygonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      paths: []\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState(_ref) {\n    let {\n      oldProps,\n      props,\n      changeFlags\n    } = _ref;\n    const geometryChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon);\n\n    if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n      const paths = this.state.paths.slice();\n      const pathsDiff = changeFlags.dataChanged.map(dataRange => replaceInRange({\n        data: paths,\n        getIndex: p => p.__source.index,\n        dataRange,\n        replace: this._getPaths(dataRange)\n      }));\n      this.setState({\n        paths,\n        pathsDiff\n      });\n    } else if (geometryChanged) {\n      this.setState({\n        paths: this._getPaths(),\n        pathsDiff: null\n      });\n    }\n  }\n\n  _getPaths() {\n    let dataRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      data,\n      getPolygon,\n      positionFormat,\n      _normalize\n    } = this.props;\n    const paths = [];\n    const positionSize = positionFormat === 'XY' ? 2 : 3;\n    const {\n      startRow,\n      endRow\n    } = dataRange;\n    const {\n      iterable,\n      objectInfo\n    } = createIterable(data, startRow, endRow);\n\n    for (const object of iterable) {\n      objectInfo.index++;\n      let polygon = getPolygon(object, objectInfo);\n\n      if (_normalize) {\n        polygon = Polygon.normalize(polygon, positionSize);\n      }\n\n      const {\n        holeIndices\n      } = polygon;\n      const positions = polygon.positions || polygon;\n\n      if (holeIndices) {\n        for (let i = 0; i <= holeIndices.length; i++) {\n          const path = positions.slice(holeIndices[i - 1] || 0, holeIndices[i] || positions.length);\n          paths.push(this.getSubLayerRow({\n            path\n          }, object, objectInfo.index));\n        }\n      } else {\n        paths.push(this.getSubLayerRow({\n          path: positions\n        }, object, objectInfo.index));\n      }\n    }\n\n    return paths;\n  }\n\n  renderLayers() {\n    const {\n      data,\n      _dataDiff,\n      stroked,\n      filled,\n      extruded,\n      wireframe,\n      _normalize,\n      _windingOrder,\n      elevationScale,\n      transitions,\n      positionFormat\n    } = this.props;\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified\n    } = this.props;\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      material\n    } = this.props;\n    const {\n      paths,\n      pathsDiff\n    } = this.state;\n    const FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n    const StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n    const polygonLayer = this.shouldRenderSubLayer('fill', paths) && new FillLayer({\n      _dataDiff,\n      extruded,\n      elevationScale,\n      filled,\n      wireframe,\n      _normalize,\n      _windingOrder,\n      getElevation,\n      getFillColor,\n      getLineColor: extruded && wireframe ? getLineColor : defaultLineColor,\n      material,\n      transitions\n    }, this.getSubLayerProps({\n      id: 'fill',\n      updateTriggers: {\n        getPolygon: updateTriggers.getPolygon,\n        getElevation: updateTriggers.getElevation,\n        getFillColor: updateTriggers.getFillColor,\n        lineColors: extruded && wireframe,\n        getLineColor: updateTriggers.getLineColor\n      }\n    }), {\n      data,\n      positionFormat,\n      getPolygon\n    });\n    const polygonLineLayer = !extruded && stroked && this.shouldRenderSubLayer('stroke', paths) && new StrokeLayer({\n      _dataDiff: pathsDiff && (() => pathsDiff),\n      widthUnits: lineWidthUnits,\n      widthScale: lineWidthScale,\n      widthMinPixels: lineWidthMinPixels,\n      widthMaxPixels: lineWidthMaxPixels,\n      jointRounded: lineJointRounded,\n      miterLimit: lineMiterLimit,\n      dashJustified: lineDashJustified,\n      _pathType: 'loop',\n      transitions: transitions && {\n        getWidth: transitions.getLineWidth,\n        getColor: transitions.getLineColor,\n        getPath: transitions.getPolygon\n      },\n      getColor: this.getSubLayerAccessor(getLineColor),\n      getWidth: this.getSubLayerAccessor(getLineWidth),\n      getDashArray: this.getSubLayerAccessor(getLineDashArray)\n    }, this.getSubLayerProps({\n      id: 'stroke',\n      updateTriggers: {\n        getWidth: updateTriggers.getLineWidth,\n        getColor: updateTriggers.getLineColor,\n        getDashArray: updateTriggers.getLineDashArray\n      }\n    }), {\n      data: paths,\n      positionFormat,\n      getPath: x => x.path\n    });\n    return [!extruded && polygonLayer, polygonLineLayer, extruded && polygonLayer];\n  }\n\n}\nPolygonLayer.layerName = 'PolygonLayer';\nPolygonLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["CompositeLayer","createIterable","log","SolidPolygonLayer","PathLayer","Polygon","replaceInRange","defaultLineColor","defaultFillColor","defaultProps","stroked","filled","extruded","elevationScale","wireframe","_normalize","_windingOrder","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","getPolygon","type","value","f","polygon","getFillColor","getLineColor","getLineWidth","getElevation","material","PolygonLayer","initializeState","state","paths","props","getLineDashArray","removed","updateState","oldProps","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","Array","isArray","slice","pathsDiff","map","dataRange","data","getIndex","p","__source","index","replace","_getPaths","setState","positionFormat","positionSize","startRow","endRow","iterable","objectInfo","object","normalize","holeIndices","positions","i","length","path","push","getSubLayerRow","renderLayers","_dataDiff","transitions","lineDashJustified","updateTriggers","FillLayer","getSubLayerClass","StrokeLayer","polygonLayer","shouldRenderSubLayer","getSubLayerProps","id","lineColors","polygonLineLayer","widthUnits","widthScale","widthMinPixels","widthMaxPixels","jointRounded","miterLimit","dashJustified","_pathType","getWidth","getColor","getPath","getSubLayerAccessor","getDashArray","x","layerName"],"sources":["../../../src/polygon-layer/polygon-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, createIterable, log} from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nimport {replaceInRange} from '../utils';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point, line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\nexport default class PolygonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      paths: []\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n      const paths = this.state.paths.slice();\n      const pathsDiff = changeFlags.dataChanged.map(dataRange =>\n        replaceInRange({\n          data: paths,\n          getIndex: p => p.__source.index,\n          dataRange,\n          replace: this._getPaths(dataRange)\n        })\n      );\n      this.setState({paths, pathsDiff});\n    } else if (geometryChanged) {\n      this.setState({\n        paths: this._getPaths(),\n        pathsDiff: null\n      });\n    }\n  }\n\n  _getPaths(dataRange = {}) {\n    const {data, getPolygon, positionFormat, _normalize} = this.props;\n    const paths = [];\n    const positionSize = positionFormat === 'XY' ? 2 : 3;\n    const {startRow, endRow} = dataRange;\n\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      let polygon = getPolygon(object, objectInfo);\n      if (_normalize) {\n        polygon = Polygon.normalize(polygon, positionSize);\n      }\n      const {holeIndices} = polygon;\n      const positions = polygon.positions || polygon;\n\n      if (holeIndices) {\n        // split the positions array into `holeIndices.length + 1` rings\n        // holeIndices[-1] falls back to 0\n        // holeIndices[holeIndices.length] falls back to positions.length\n        for (let i = 0; i <= holeIndices.length; i++) {\n          const path = positions.slice(holeIndices[i - 1] || 0, holeIndices[i] || positions.length);\n          paths.push(this.getSubLayerRow({path}, object, objectInfo.index));\n        }\n      } else {\n        paths.push(this.getSubLayerRow({path: positions}, object, objectInfo.index));\n      }\n    }\n    return paths;\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    // Layer composition props\n    const {\n      data,\n      _dataDiff,\n      stroked,\n      filled,\n      extruded,\n      wireframe,\n      _normalize,\n      _windingOrder,\n      elevationScale,\n      transitions,\n      positionFormat\n    } = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      material\n    } = this.props;\n\n    const {paths, pathsDiff} = this.state;\n\n    const FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n    const StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n\n    // Filled Polygon Layer\n    const polygonLayer =\n      this.shouldRenderSubLayer('fill', paths) &&\n      new FillLayer(\n        {\n          _dataDiff,\n          extruded,\n          elevationScale,\n\n          filled,\n          wireframe,\n          _normalize,\n          _windingOrder,\n\n          getElevation,\n          getFillColor,\n          getLineColor: extruded && wireframe ? getLineColor : defaultLineColor,\n\n          material,\n          transitions\n        },\n        this.getSubLayerProps({\n          id: 'fill',\n          updateTriggers: {\n            getPolygon: updateTriggers.getPolygon,\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            // using a legacy API to invalid lineColor attributes\n            // if (extruded && wireframe) has changed\n            lineColors: extruded && wireframe,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data,\n          positionFormat,\n          getPolygon\n        }\n      );\n\n    // Polygon line layer\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('stroke', paths) &&\n      new StrokeLayer(\n        {\n          _dataDiff: pathsDiff && (() => pathsDiff),\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          jointRounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          // Already normalized\n          _pathType: 'loop',\n\n          transitions: transitions && {\n            getWidth: transitions.getLineWidth,\n            getColor: transitions.getLineColor,\n            getPath: transitions.getPolygon\n          },\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray)\n        },\n        this.getSubLayerProps({\n          id: 'stroke',\n          updateTriggers: {\n            getWidth: updateTriggers.getLineWidth,\n            getColor: updateTriggers.getLineColor,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: paths,\n          positionFormat,\n          getPath: x => x.path\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonLayer,\n      polygonLineLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n\nPolygonLayer.layerName = 'PolygonLayer';\nPolygonLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}