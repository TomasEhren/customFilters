{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { log } from '@deck.gl/core';\nimport IconLayer from '../../icon-layer/icon-layer';\nimport fs from './multi-icon-layer-fragment.glsl';\nvar DEFAULT_BUFFER = 192.0 / 256;\nvar EMPTY_ARRAY = [];\nvar defaultProps = {\n  getIconOffsets: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.offsets;\n    }\n  },\n  alphaCutoff: 0.001,\n  smoothing: 0.1,\n  outlineWidth: 0,\n  outlineColor: {\n    type: 'color',\n    value: [0, 0, 0, 255]\n  }\n};\n\nvar MultiIconLayer = /*#__PURE__*/function (_IconLayer) {\n  _inherits(MultiIconLayer, _IconLayer);\n\n  var _super = _createSuper(MultiIconLayer);\n\n  function MultiIconLayer() {\n    _classCallCheck(this, MultiIconLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MultiIconLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(MultiIconLayer.prototype), \"getShaders\", this).call(this)), {}, {\n        fs: fs\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var _this = this;\n\n      _get(_getPrototypeOf(MultiIconLayer.prototype), \"initializeState\", this).call(this);\n\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instanceOffsets: {\n          size: 2,\n          accessor: 'getIconOffsets'\n        },\n        instancePickingColors: {\n          type: 5121,\n          size: 3,\n          accessor: function accessor(object, _ref) {\n            var index = _ref.index,\n                value = _ref.target;\n            return _this.encodePickingColor(index, value);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(params) {\n      _get(_getPrototypeOf(MultiIconLayer.prototype), \"updateState\", this).call(this, params);\n\n      var props = params.props,\n          oldProps = params.oldProps;\n      var outlineColor = props.outlineColor;\n\n      if (outlineColor !== oldProps.outlineColor) {\n        outlineColor = outlineColor.map(function (x) {\n          return x / 255;\n        });\n        outlineColor[3] = Number.isFinite(outlineColor[3]) ? outlineColor[3] : 1;\n        this.setState({\n          outlineColor: outlineColor\n        });\n      }\n\n      if (!props.sdf && props.outlineWidth) {\n        log.warn(\"\".concat(this.id, \": fontSettings.sdf is required to render outline\"))();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(params) {\n      var _this$props = this.props,\n          sdf = _this$props.sdf,\n          smoothing = _this$props.smoothing,\n          outlineWidth = _this$props.outlineWidth;\n      var outlineColor = this.state.outlineColor;\n      params.uniforms = _objectSpread(_objectSpread({}, params.uniforms), {}, {\n        buffer: DEFAULT_BUFFER,\n        outlineBuffer: outlineWidth ? Math.max(smoothing, DEFAULT_BUFFER * (1 - outlineWidth)) : -1,\n        gamma: smoothing,\n        sdf: Boolean(sdf),\n        outlineColor: outlineColor\n      });\n\n      _get(_getPrototypeOf(MultiIconLayer.prototype), \"draw\", this).call(this, params);\n    }\n  }, {\n    key: \"getInstanceOffset\",\n    value: function getInstanceOffset(icons) {\n      var _this2 = this;\n\n      return icons ? Array.from(icons).map(function (icon) {\n        return _get(_getPrototypeOf(MultiIconLayer.prototype), \"getInstanceOffset\", _this2).call(_this2, icon);\n      }) : EMPTY_ARRAY;\n    }\n  }, {\n    key: \"getInstanceColorMode\",\n    value: function getInstanceColorMode(icons) {\n      return 1;\n    }\n  }, {\n    key: \"getInstanceIconFrame\",\n    value: function getInstanceIconFrame(icons) {\n      var _this3 = this;\n\n      return icons ? Array.from(icons).map(function (icon) {\n        return _get(_getPrototypeOf(MultiIconLayer.prototype), \"getInstanceIconFrame\", _this3).call(_this3, icon);\n      }) : EMPTY_ARRAY;\n    }\n  }]);\n\n  return MultiIconLayer;\n}(IconLayer);\n\nexport { MultiIconLayer as default };\nMultiIconLayer.layerName = 'MultiIconLayer';\nMultiIconLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["log","IconLayer","fs","DEFAULT_BUFFER","EMPTY_ARRAY","defaultProps","getIconOffsets","type","value","x","offsets","alphaCutoff","smoothing","outlineWidth","outlineColor","MultiIconLayer","getShaders","initializeState","attributeManager","getAttributeManager","addInstanced","instanceOffsets","size","accessor","instancePickingColors","object","index","target","encodePickingColor","updateState","params","props","oldProps","map","Number","isFinite","setState","sdf","warn","id","draw","state","uniforms","buffer","outlineBuffer","Math","max","gamma","Boolean","getInstanceOffset","icons","Array","from","icon","getInstanceColorMode","getInstanceIconFrame","layerName"],"sources":["../../../../src/text-layer/multi-icon-layer/multi-icon-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {log} from '@deck.gl/core';\nimport IconLayer from '../../icon-layer/icon-layer';\n\nimport fs from './multi-icon-layer-fragment.glsl';\n\n// TODO expose as layer properties\nconst DEFAULT_BUFFER = 192.0 / 256;\nconst EMPTY_ARRAY = [];\n\nconst defaultProps = {\n  getIconOffsets: {type: 'accessor', value: x => x.offsets},\n  alphaCutoff: 0.001,\n  smoothing: 0.1,\n  outlineWidth: 0,\n  outlineColor: {type: 'color', value: [0, 0, 0, 255]}\n};\n\nexport default class MultiIconLayer extends IconLayer {\n  getShaders() {\n    return {...super.getShaders(), fs};\n  }\n\n  initializeState() {\n    super.initializeState();\n\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIconOffsets'\n      },\n      instancePickingColors: {\n        type: GL.UNSIGNED_BYTE,\n        size: 3,\n        accessor: (object, {index, target: value}) => this.encodePickingColor(index, value)\n      }\n    });\n  }\n\n  updateState(params) {\n    super.updateState(params);\n    const {props, oldProps} = params;\n    let {outlineColor} = props;\n\n    if (outlineColor !== oldProps.outlineColor) {\n      outlineColor = outlineColor.map(x => x / 255);\n      outlineColor[3] = Number.isFinite(outlineColor[3]) ? outlineColor[3] : 1;\n\n      this.setState({\n        outlineColor\n      });\n    }\n    if (!props.sdf && props.outlineWidth) {\n      log.warn(`${this.id}: fontSettings.sdf is required to render outline`)();\n    }\n  }\n\n  draw(params) {\n    const {sdf, smoothing, outlineWidth} = this.props;\n    const {outlineColor} = this.state;\n\n    params.uniforms = {\n      ...params.uniforms,\n      // Refer the following doc about gamma and buffer\n      // https://blog.mapbox.com/drawing-text-with-signed-distance-fields-in-mapbox-gl-b0933af6f817\n      buffer: DEFAULT_BUFFER,\n      outlineBuffer: outlineWidth ? Math.max(smoothing, DEFAULT_BUFFER * (1 - outlineWidth)) : -1,\n      gamma: smoothing,\n      sdf: Boolean(sdf),\n      outlineColor\n    };\n    super.draw(params);\n  }\n\n  getInstanceOffset(icons) {\n    return icons ? Array.from(icons).map(icon => super.getInstanceOffset(icon)) : EMPTY_ARRAY;\n  }\n\n  getInstanceColorMode(icons) {\n    return 1; // mask\n  }\n\n  getInstanceIconFrame(icons) {\n    return icons ? Array.from(icons).map(icon => super.getInstanceIconFrame(icon)) : EMPTY_ARRAY;\n  }\n}\n\nMultiIconLayer.layerName = 'MultiIconLayer';\nMultiIconLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}