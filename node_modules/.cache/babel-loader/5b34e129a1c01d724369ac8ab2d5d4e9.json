{"ast":null,"code":"import _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { path } from '@loaders.gl/loader-utils';\nimport { TILESET_TYPE, LOD_METRIC_TYPE } from '@loaders.gl/tiles';\nimport { VERSION } from './lib/utils/version';\nimport { parse3DTile } from './lib/parsers/parse-3d-tile';\nimport { normalizeTileHeaders, normalizeImplicitTileHeaders } from './lib/parsers/parse-3d-tile-header';\nvar IMPLICIT_TILING_EXTENSION_NAME = '3DTILES_implicit_tiling';\nexport var Tiles3DLoader = {\n  id: '3d-tiles',\n  name: '3D Tiles',\n  module: '3d-tiles',\n  version: VERSION,\n  extensions: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  mimeTypes: ['application/octet-stream'],\n  tests: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  parse: parse,\n  options: {\n    '3d-tiles': {\n      loadGLTF: true,\n      decodeQuantizedPositions: false,\n      isTileset: 'auto',\n      assetGltfUpAxis: null\n    }\n  }\n};\n\nfunction getBaseUri(tileset) {\n  return path.dirname(tileset.url);\n}\n\nfunction parseTile(_x, _x2, _x3) {\n  return _parseTile.apply(this, arguments);\n}\n\nfunction _parseTile() {\n  _parseTile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(arrayBuffer, options, context) {\n    var tile, byteOffset;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            tile = {\n              content: {\n                featureIds: null\n              }\n            };\n            byteOffset = 0;\n            _context.next = 4;\n            return parse3DTile(arrayBuffer, byteOffset, options, context, tile.content);\n\n          case 4:\n            return _context.abrupt(\"return\", tile.content);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseTile.apply(this, arguments);\n}\n\nfunction parseTileset(_x4, _x5, _x6) {\n  return _parseTileset.apply(this, arguments);\n}\n\nfunction _parseTileset() {\n  _parseTileset = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data, options, context) {\n    var _tilesetJson$root, tilesetJson;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            tilesetJson = JSON.parse(new TextDecoder().decode(data));\n            tilesetJson.loader = options.loader || Tiles3DLoader;\n            tilesetJson.url = context.url;\n            tilesetJson.basePath = getBaseUri(tilesetJson);\n\n            if (!hasImplicitTilingExtension(tilesetJson)) {\n              _context2.next = 10;\n              break;\n            }\n\n            _context2.next = 7;\n            return normalizeImplicitTileHeaders(tilesetJson);\n\n          case 7:\n            _context2.t0 = _context2.sent;\n            _context2.next = 11;\n            break;\n\n          case 10:\n            _context2.t0 = normalizeTileHeaders(tilesetJson);\n\n          case 11:\n            tilesetJson.root = _context2.t0;\n            tilesetJson.type = TILESET_TYPE.TILES3D;\n            tilesetJson.lodMetricType = LOD_METRIC_TYPE.GEOMETRIC_ERROR;\n            tilesetJson.lodMetricValue = ((_tilesetJson$root = tilesetJson.root) === null || _tilesetJson$root === void 0 ? void 0 : _tilesetJson$root.lodMetricValue) || 0;\n            return _context2.abrupt(\"return\", tilesetJson);\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _parseTileset.apply(this, arguments);\n}\n\nfunction parse(_x7, _x8, _x9) {\n  return _parse.apply(this, arguments);\n}\n\nfunction _parse() {\n  _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(data, options, context) {\n    var loaderOptions, isTileset;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            loaderOptions = options['3d-tiles'] || {};\n\n            if (loaderOptions.isTileset === 'auto') {\n              isTileset = context.url && context.url.indexOf('.json') !== -1;\n            } else {\n              isTileset = loaderOptions.isTileset;\n            }\n\n            if (!isTileset) {\n              _context3.next = 8;\n              break;\n            }\n\n            _context3.next = 5;\n            return parseTileset(data, options, context);\n\n          case 5:\n            data = _context3.sent;\n            _context3.next = 11;\n            break;\n\n          case 8:\n            _context3.next = 10;\n            return parseTile(data, options, context);\n\n          case 10:\n            data = _context3.sent;\n\n          case 11:\n            return _context3.abrupt(\"return\", data);\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _parse.apply(this, arguments);\n}\n\nfunction hasImplicitTilingExtension(tilesetJson) {\n  var _tilesetJson$extensio, _tilesetJson$extensio2;\n\n  return (tilesetJson === null || tilesetJson === void 0 ? void 0 : (_tilesetJson$extensio = tilesetJson.extensionsRequired) === null || _tilesetJson$extensio === void 0 ? void 0 : _tilesetJson$extensio.includes(IMPLICIT_TILING_EXTENSION_NAME)) && (tilesetJson === null || tilesetJson === void 0 ? void 0 : (_tilesetJson$extensio2 = tilesetJson.extensionsUsed) === null || _tilesetJson$extensio2 === void 0 ? void 0 : _tilesetJson$extensio2.includes(IMPLICIT_TILING_EXTENSION_NAME));\n}","map":{"version":3,"mappings":"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","names":["path","TILESET_TYPE","LOD_METRIC_TYPE","VERSION","parse3DTile","normalizeTileHeaders","normalizeImplicitTileHeaders","IMPLICIT_TILING_EXTENSION_NAME","Tiles3DLoader","id","name","module","version","extensions","mimeTypes","tests","parse","options","loadGLTF","decodeQuantizedPositions","isTileset","assetGltfUpAxis","getBaseUri","tileset","dirname","url","parseTile","arrayBuffer","context","tile","content","featureIds","byteOffset","parseTileset","data","tilesetJson","JSON","TextDecoder","decode","loader","basePath","hasImplicitTilingExtension","root","type","TILES3D","lodMetricType","GEOMETRIC_ERROR","lodMetricValue","loaderOptions","indexOf","extensionsRequired","includes","extensionsUsed","_tilesetJson$extensio2"],"sources":["../../src/tiles-3d-loader.ts"],"sourcesContent":["import type {LoaderWithParser} from '@loaders.gl/loader-utils';\nimport {path} from '@loaders.gl/loader-utils';\nimport {TILESET_TYPE, LOD_METRIC_TYPE} from '@loaders.gl/tiles';\nimport {VERSION} from './lib/utils/version';\nimport {parse3DTile} from './lib/parsers/parse-3d-tile';\nimport {\n  normalizeTileHeaders,\n  normalizeImplicitTileHeaders\n} from './lib/parsers/parse-3d-tile-header';\n\nconst IMPLICIT_TILING_EXTENSION_NAME = '3DTILES_implicit_tiling';\n\n/**\n * Loader for 3D Tiles\n */\nexport const Tiles3DLoader: LoaderWithParser = {\n  id: '3d-tiles',\n  name: '3D Tiles',\n  module: '3d-tiles',\n  version: VERSION,\n  extensions: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  mimeTypes: ['application/octet-stream'],\n  tests: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  parse,\n  options: {\n    '3d-tiles': {\n      loadGLTF: true,\n      decodeQuantizedPositions: false,\n      isTileset: 'auto',\n      assetGltfUpAxis: null\n    }\n  }\n};\n\nfunction getBaseUri(tileset) {\n  return path.dirname(tileset.url);\n}\n\nasync function parseTile(arrayBuffer, options, context) {\n  const tile = {\n    content: {\n      featureIds: null\n    }\n  };\n  const byteOffset = 0;\n  await parse3DTile(arrayBuffer, byteOffset, options, context, tile.content);\n  return tile.content;\n}\n\nasync function parseTileset(data, options, context) {\n  const tilesetJson = JSON.parse(new TextDecoder().decode(data));\n  // eslint-disable-next-line no-use-before-define\n  tilesetJson.loader = options.loader || Tiles3DLoader;\n  tilesetJson.url = context.url;\n  // base path that non-absolute paths in tileset are relative to.\n  tilesetJson.basePath = getBaseUri(tilesetJson);\n  tilesetJson.root = hasImplicitTilingExtension(tilesetJson)\n    ? await normalizeImplicitTileHeaders(tilesetJson)\n    : normalizeTileHeaders(tilesetJson);\n\n  tilesetJson.type = TILESET_TYPE.TILES3D;\n\n  tilesetJson.lodMetricType = LOD_METRIC_TYPE.GEOMETRIC_ERROR;\n  tilesetJson.lodMetricValue = tilesetJson.root?.lodMetricValue || 0;\n\n  return tilesetJson;\n}\n\nasync function parse(data, options, context) {\n  // auto detect file type\n  const loaderOptions = options['3d-tiles'] || {};\n  let isTileset;\n  if (loaderOptions.isTileset === 'auto') {\n    isTileset = context.url && context.url.indexOf('.json') !== -1;\n  } else {\n    isTileset = loaderOptions.isTileset;\n  }\n\n  if (isTileset) {\n    data = await parseTileset(data, options, context);\n  } else {\n    data = await parseTile(data, options, context);\n  }\n\n  return data;\n}\n\nfunction hasImplicitTilingExtension(tilesetJson) {\n  return (\n    tilesetJson?.extensionsRequired?.includes(IMPLICIT_TILING_EXTENSION_NAME) &&\n    tilesetJson?.extensionsUsed?.includes(IMPLICIT_TILING_EXTENSION_NAME)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}