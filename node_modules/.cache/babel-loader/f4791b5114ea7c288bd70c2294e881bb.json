{"ast":null,"code":"import { Vector3 } from '@math.gl/core';\nimport { BoundingSphere, OrientedBoundingBox } from '@math.gl/culling';\nvar WGS84_RADIUS_X = 6378137.0;\nvar WGS84_RADIUS_Y = 6378137.0;\nvar WGS84_RADIUS_Z = 6356752.3142451793;\nvar scratchVector = new Vector3();\nexport function getZoomFromBoundingVolume(boundingVolume, cartorgraphicCenter) {\n  if (boundingVolume instanceof OrientedBoundingBox) {\n    var halfAxes = boundingVolume.halfAxes;\n    var obbSize = getObbSize(halfAxes);\n    return Math.log2(WGS84_RADIUS_Z / (obbSize + cartorgraphicCenter[2]));\n  } else if (boundingVolume instanceof BoundingSphere) {\n    var radius = boundingVolume.radius;\n    return Math.log2(WGS84_RADIUS_Z / (radius + cartorgraphicCenter[2]));\n  } else if (boundingVolume.width && boundingVolume.height) {\n    var width = boundingVolume.width,\n        height = boundingVolume.height;\n    var zoomX = Math.log2(WGS84_RADIUS_X / width);\n    var zoomY = Math.log2(WGS84_RADIUS_Y / height);\n    return (zoomX + zoomY) / 2;\n  }\n\n  return 1;\n}\n\nfunction getObbSize(halfAxes) {\n  halfAxes.getColumn(0, scratchVector);\n  var axeY = halfAxes.getColumn(1);\n  var axeZ = halfAxes.getColumn(2);\n  var farthestVertex = scratchVector.add(axeY).add(axeZ);\n  var size = farthestVertex.len();\n  return size;\n}","map":{"version":3,"mappings":"AAAA,SAAQA,OAAR,QAAsB,eAAtB;AACA,SAAQC,cAAR,EAAwBC,mBAAxB,QAAkD,kBAAlD;AAGA,IAAMC,cAAc,GAAG,SAAvB;AACA,IAAMC,cAAc,GAAG,SAAvB;AACA,IAAMC,cAAc,GAAG,kBAAvB;AAEA,IAAMC,aAAa,GAAG,IAAIN,OAAJ,EAAtB;AAQA,OAAO,SAASO,yBAAT,CACLC,cADK,EAELC,mBAFK,EAGL;EACA,IAAID,cAAc,YAAYN,mBAA9B,EAAmD;IAEjD,IAAOQ,QAAP,GAAmBF,cAAnB,CAAOE,QAAP;IACA,IAAMC,OAAO,GAAGC,UAAU,CAACF,QAAD,CAA1B;IAGA,OAAOG,IAAI,CAACC,IAALD,CAAUR,cAAc,IAAIM,OAAO,GAAGF,mBAAmB,CAAC,CAAD,CAAjC,CAAxBI,CAAP;EANF,OAOO,IAAIL,cAAc,YAAYP,cAA9B,EAA8C;IAEnD,IAAOc,MAAP,GAAiBP,cAAjB,CAAOO,MAAP;IAEA,OAAOF,IAAI,CAACC,IAALD,CAAUR,cAAc,IAAIU,MAAM,GAAGN,mBAAmB,CAAC,CAAD,CAAhC,CAAxBI,CAAP;EAJK,OAKA,IAAIL,cAAc,CAACQ,KAAfR,IAAwBA,cAAc,CAACS,MAA3C,EAAmD;IAExD,IAAOD,KAAP,GAAwBR,cAAxB,CAAOQ,KAAP;IAAA,IAAcC,MAAd,GAAwBT,cAAxB,CAAcS,MAAd;IACA,IAAMC,KAAK,GAAGL,IAAI,CAACC,IAALD,CAAUV,cAAc,GAAGa,KAA3BH,CAAd;IACA,IAAMM,KAAK,GAAGN,IAAI,CAACC,IAALD,CAAUT,cAAc,GAAGa,MAA3BJ,CAAd;IAEA,OAAO,CAACK,KAAK,GAAGC,KAAT,IAAkB,CAAzB;EACD;;EAED,OAAO,CAAP;AACD;;AAED,SAASP,UAAT,CAAoBF,QAApB,EAA8B;EAC5BA,QAAQ,CAACU,SAATV,CAAmB,CAAnBA,EAAsBJ,aAAtBI;EACA,IAAMW,IAAI,GAAGX,QAAQ,CAACU,SAATV,CAAmB,CAAnBA,CAAb;EACA,IAAMY,IAAI,GAAGZ,QAAQ,CAACU,SAATV,CAAmB,CAAnBA,CAAb;EACA,IAAMa,cAAc,GAAGjB,aAAa,CAACkB,GAAdlB,CAAkBe,IAAlBf,EAAwBkB,GAAxBlB,CAA4BgB,IAA5BhB,CAAvB;EACA,IAAMmB,IAAI,GAAGF,cAAc,CAACG,GAAfH,EAAb;EACA,OAAOE,IAAP;AACD","names":["Vector3","BoundingSphere","OrientedBoundingBox","WGS84_RADIUS_X","WGS84_RADIUS_Y","WGS84_RADIUS_Z","scratchVector","getZoomFromBoundingVolume","boundingVolume","cartorgraphicCenter","halfAxes","obbSize","getObbSize","Math","log2","radius","width","height","zoomX","zoomY","getColumn","axeY","axeZ","farthestVertex","add","size","len"],"sources":["../../../../src/tileset/helpers/zoom.ts"],"sourcesContent":["import {Vector3} from '@math.gl/core';\nimport {BoundingSphere, OrientedBoundingBox} from '@math.gl/culling';\nimport {BoundingRectangle} from '../../types';\n\nconst WGS84_RADIUS_X = 6378137.0;\nconst WGS84_RADIUS_Y = 6378137.0;\nconst WGS84_RADIUS_Z = 6356752.3142451793;\n\nconst scratchVector = new Vector3();\n\n/**\n * Calculate appropriate zoom value for a particular boundingVolume\n * @param boundingVolume - the instance of bounding volume\n * @param cartorgraphicCenter - cartographic center of the bounding volume\n * @returns {number} - zoom value\n */\nexport function getZoomFromBoundingVolume(\n  boundingVolume: BoundingSphere | OrientedBoundingBox | BoundingRectangle,\n  cartorgraphicCenter: Vector3\n) {\n  if (boundingVolume instanceof OrientedBoundingBox) {\n    // OrientedBoundingBox\n    const {halfAxes} = boundingVolume;\n    const obbSize = getObbSize(halfAxes);\n    // Use WGS84_RADIUS_Z to allign with BoundingSphere algorithm\n    // Add the tile elevation value for correct zooming to elevated tiles\n    return Math.log2(WGS84_RADIUS_Z / (obbSize + cartorgraphicCenter[2]));\n  } else if (boundingVolume instanceof BoundingSphere) {\n    // BoundingSphere\n    const {radius} = boundingVolume;\n    // Add the tile elevation value for correct zooming to elevated tiles\n    return Math.log2(WGS84_RADIUS_Z / (radius + cartorgraphicCenter[2]));\n  } else if (boundingVolume.width && boundingVolume.height) {\n    // BoundingRectangle\n    const {width, height} = boundingVolume;\n    const zoomX = Math.log2(WGS84_RADIUS_X / width);\n    const zoomY = Math.log2(WGS84_RADIUS_Y / height);\n\n    return (zoomX + zoomY) / 2;\n  }\n\n  return 1;\n}\n\nfunction getObbSize(halfAxes) {\n  halfAxes.getColumn(0, scratchVector);\n  const axeY = halfAxes.getColumn(1);\n  const axeZ = halfAxes.getColumn(2);\n  const farthestVertex = scratchVector.add(axeY).add(axeZ);\n  const size = farthestVertex.len();\n  return size;\n}\n"]},"metadata":{},"sourceType":"module"}