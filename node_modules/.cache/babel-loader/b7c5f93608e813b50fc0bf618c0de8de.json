{"ast":null,"code":"import { concatenateArrayBuffersAsync } from '@loaders.gl/loader-utils';\nimport { isResponse, isReadableStream, isAsyncIterable, isIterable, isIterator, isBlob, isBuffer } from '../../javascript-utils/is-type';\nimport { makeIterator } from '../../iterators/make-iterator/make-iterator';\nimport { checkResponse, makeResponse } from '../utils/response-utils';\nconst ERR_DATA = 'Cannot convert supplied data type';\nexport function getArrayBufferOrStringFromDataSync(data, loader, options) {\n  if (loader.text && typeof data === 'string') {\n    return data;\n  }\n\n  if (isBuffer(data)) {\n    data = data.buffer;\n  }\n\n  if (data instanceof ArrayBuffer) {\n    const arrayBuffer = data;\n\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(arrayBuffer);\n    }\n\n    return arrayBuffer;\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(data);\n    }\n\n    let arrayBuffer = data.buffer;\n    const byteLength = data.byteLength || data.length;\n\n    if (data.byteOffset !== 0 || byteLength !== arrayBuffer.byteLength) {\n      arrayBuffer = arrayBuffer.slice(data.byteOffset, data.byteOffset + byteLength);\n    }\n\n    return arrayBuffer;\n  }\n\n  throw new Error(ERR_DATA);\n}\nexport async function getArrayBufferOrStringFromData(data, loader, options) {\n  const isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n\n  if (typeof data === 'string' || isArrayBuffer) {\n    return getArrayBufferOrStringFromDataSync(data, loader, options);\n  }\n\n  if (isBlob(data)) {\n    data = await makeResponse(data);\n  }\n\n  if (isResponse(data)) {\n    const response = data;\n    await checkResponse(response);\n    return loader.binary ? await response.arrayBuffer() : await response.text();\n  }\n\n  if (isReadableStream(data)) {\n    data = makeIterator(data, options);\n  }\n\n  if (isIterable(data) || isAsyncIterable(data)) {\n    return concatenateArrayBuffersAsync(data);\n  }\n\n  throw new Error(ERR_DATA);\n}\nexport async function getAsyncIterableFromData(data, options) {\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isResponse(data)) {\n    const response = data;\n    await checkResponse(response);\n    const body = await response.body;\n    return makeIterator(body, options);\n  }\n\n  if (isBlob(data) || isReadableStream(data)) {\n    return makeIterator(data, options);\n  }\n\n  if (isAsyncIterable(data)) {\n    return data[Symbol.asyncIterator]();\n  }\n\n  return getIterableFromData(data);\n}\nexport async function getReadableStream(data) {\n  if (isReadableStream(data)) {\n    return data;\n  }\n\n  if (isResponse(data)) {\n    return data.body;\n  }\n\n  const response = await makeResponse(data);\n  return response.body;\n}\n\nfunction getIterableFromData(data) {\n  if (ArrayBuffer.isView(data)) {\n    return function* oneChunk() {\n      yield data.buffer;\n    }();\n  }\n\n  if (data instanceof ArrayBuffer) {\n    return function* oneChunk() {\n      yield data;\n    }();\n  }\n\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isIterable(data)) {\n    return data[Symbol.iterator]();\n  }\n\n  throw new Error(ERR_DATA);\n}","map":{"version":3,"mappings":"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","names":["concatenateArrayBuffersAsync","isResponse","isReadableStream","isAsyncIterable","isIterable","isIterator","isBlob","isBuffer","makeIterator","checkResponse","makeResponse","ERR_DATA","getArrayBufferOrStringFromDataSync","data","loader","options","text","buffer","ArrayBuffer","arrayBuffer","binary","textDecoder","TextDecoder","decode","isView","byteLength","length","byteOffset","slice","Error","getArrayBufferOrStringFromData","isArrayBuffer","response","getAsyncIterableFromData","body","Symbol","asyncIterator","getIterableFromData","getReadableStream","oneChunk","iterator"],"sources":["../../../../src/lib/loader-utils/get-data.ts"],"sourcesContent":["import type {\n  DataType,\n  SyncDataType,\n  BatchableDataType,\n  Loader,\n  LoaderOptions\n} from '@loaders.gl/loader-utils';\nimport {concatenateArrayBuffersAsync} from '@loaders.gl/loader-utils';\nimport {\n  isResponse,\n  isReadableStream,\n  isAsyncIterable,\n  isIterable,\n  isIterator,\n  isBlob,\n  isBuffer\n} from '../../javascript-utils/is-type';\nimport {makeIterator} from '../../iterators/make-iterator/make-iterator';\nimport {checkResponse, makeResponse} from '../utils/response-utils';\n\nconst ERR_DATA = 'Cannot convert supplied data type';\n\n// eslint-disable-next-line complexity\nexport function getArrayBufferOrStringFromDataSync(\n  data: SyncDataType,\n  loader: Loader,\n  options: LoaderOptions\n): ArrayBuffer | string {\n  if (loader.text && typeof data === 'string') {\n    return data;\n  }\n\n  if (isBuffer(data)) {\n    // @ts-ignore\n    data = data.buffer;\n  }\n\n  if (data instanceof ArrayBuffer) {\n    const arrayBuffer = data;\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(arrayBuffer);\n    }\n    return arrayBuffer;\n  }\n\n  // We may need to handle offsets\n  if (ArrayBuffer.isView(data)) {\n    // TextDecoder is invoked on typed arrays and will handle offsets\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(data);\n    }\n\n    let arrayBuffer = data.buffer;\n\n    // Since we are returning the underlying arrayBuffer, we must create a new copy\n    // if this typed array / Buffer is a partial view into the ArryayBuffer\n    // TODO - this is a potentially unnecessary copy\n    const byteLength = data.byteLength || data.length;\n    if (data.byteOffset !== 0 || byteLength !== arrayBuffer.byteLength) {\n      // console.warn(`loaders.gl copying arraybuffer of length ${byteLength}`);\n      arrayBuffer = arrayBuffer.slice(data.byteOffset, data.byteOffset + byteLength);\n    }\n    return arrayBuffer;\n  }\n\n  throw new Error(ERR_DATA);\n}\n\n// Convert async iterator to a promise\nexport async function getArrayBufferOrStringFromData(\n  data: DataType,\n  loader: Loader,\n  options: LoaderOptions\n): Promise<ArrayBuffer | string> {\n  const isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n  if (typeof data === 'string' || isArrayBuffer) {\n    return getArrayBufferOrStringFromDataSync(data as string | ArrayBuffer, loader, options);\n  }\n\n  // Blobs and files are FileReader compatible\n  if (isBlob(data)) {\n    data = await makeResponse(data);\n  }\n\n  if (isResponse(data)) {\n    const response = data as Response;\n    await checkResponse(response);\n    return loader.binary ? await response.arrayBuffer() : await response.text();\n  }\n\n  if (isReadableStream(data)) {\n    // @ts-expect-error TS2559 options type\n    data = makeIterator(data as ReadableStream, options);\n  }\n\n  if (isIterable(data) || isAsyncIterable(data)) {\n    // Assume arrayBuffer iterator - attempt to concatenate\n    return concatenateArrayBuffersAsync(data as AsyncIterable<ArrayBuffer>);\n  }\n\n  throw new Error(ERR_DATA);\n}\n\nexport async function getAsyncIterableFromData(\n  data: BatchableDataType,\n  options: LoaderOptions\n): Promise<AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>> {\n  if (isIterator(data)) {\n    return data as AsyncIterable<ArrayBuffer>;\n  }\n\n  if (isResponse(data)) {\n    const response = data as Response;\n    // Note Since this function is not async, we currently can't load error message, just status\n    await checkResponse(response);\n    // TODO - bug in polyfill, body can be a Promise under Node.js\n    // eslint-disable-next-line @typescript-eslint/await-thenable\n    const body = await response.body;\n    // TODO - body can be null?\n    return makeIterator(body as ReadableStream<Uint8Array>, options as any);\n  }\n\n  if (isBlob(data) || isReadableStream(data)) {\n    return makeIterator(data as Blob | ReadableStream, options as any);\n  }\n\n  if (isAsyncIterable(data)) {\n    return data[Symbol.asyncIterator]();\n  }\n\n  return getIterableFromData(data);\n}\n\nexport async function getReadableStream(data: BatchableDataType): Promise<ReadableStream> {\n  if (isReadableStream(data)) {\n    return data as ReadableStream;\n  }\n  if (isResponse(data)) {\n    // @ts-ignore\n    return data.body;\n  }\n  const response = await makeResponse(data);\n  // @ts-ignore\n  return response.body;\n}\n\n// HELPERS\n\nfunction getIterableFromData(data) {\n  // generate an iterator that emits a single chunk\n  if (ArrayBuffer.isView(data)) {\n    return (function* oneChunk() {\n      yield data.buffer;\n    })();\n  }\n\n  if (data instanceof ArrayBuffer) {\n    return (function* oneChunk() {\n      yield data;\n    })();\n  }\n\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isIterable(data)) {\n    return data[Symbol.iterator]();\n  }\n\n  throw new Error(ERR_DATA);\n}\n"]},"metadata":{},"sourceType":"module"}