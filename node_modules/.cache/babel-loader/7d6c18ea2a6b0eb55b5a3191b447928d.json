{"ast":null,"code":"import { VERSION } from './lib/utils/version';\nimport { parseCompressedTexture } from './lib/parsers/parse-compressed-texture';\nimport parseBasis from './lib/parsers/parse-basis';\nconst DEFAULT_TEXTURE_LOADER_OPTIONS = {\n  'compressed-texture': {\n    libraryPath: 'libs/',\n    useBasis: false\n  }\n};\nexport const CompressedTextureWorkerLoader = {\n  name: 'Texture Containers',\n  id: 'compressed-texture',\n  module: 'textures',\n  version: VERSION,\n  worker: true,\n  extensions: ['ktx', 'ktx2', 'dds', 'pvr'],\n  mimeTypes: ['image/ktx2', 'image/ktx', 'image/vnd-ms.dds', 'image/x-dds', 'application/octet-stream'],\n  binary: true,\n  options: DEFAULT_TEXTURE_LOADER_OPTIONS\n};\nexport const CompressedTextureLoader = { ...CompressedTextureWorkerLoader,\n  parse: async (arrayBuffer, options) => {\n    if (options['compressed-texture'].useBasis) {\n      options.basis = {\n        format: {\n          alpha: 'BC3',\n          noAlpha: 'BC1'\n        },\n        ...options.basis,\n        containerFormat: 'ktx2',\n        module: 'encoder'\n      };\n      return await parseBasis(arrayBuffer, options);\n    }\n\n    return parseCompressedTexture(arrayBuffer);\n  }\n};\nexport const _TypecheckCompressedTextureWorkerLoader = CompressedTextureWorkerLoader;\nexport const _TypecheckCompressedTextureLoader = CompressedTextureLoader;","map":{"version":3,"mappings":"AACA,SAAQA,OAAR,QAAsB,qBAAtB;AACA,SAAQC,sBAAR,QAAqC,wCAArC;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AASA,MAAMC,8BAA8B,GAAG;EACrC,sBAAsB;IACpBC,WAAW,EAAE,OADO;IAEpBC,QAAQ,EAAE;EAFU;AADe,CAAvC;AAUA,OAAO,MAAMC,6BAA6B,GAAG;EAC3CC,IAAI,EAAE,oBADqC;EAE3CC,EAAE,EAAE,oBAFuC;EAG3CC,MAAM,EAAE,UAHmC;EAI3CC,OAAO,EAAEV,OAJkC;EAK3CW,MAAM,EAAE,IALmC;EAM3CC,UAAU,EAAE,CACV,KADU,EAEV,MAFU,EAGV,KAHU,EAIV,KAJU,CAN+B;EAY3CC,SAAS,EAAE,CACT,YADS,EAET,WAFS,EAGT,kBAHS,EAIT,aAJS,EAKT,0BALS,CAZgC;EAmB3CC,MAAM,EAAE,IAnBmC;EAoB3CC,OAAO,EAAEZ;AApBkC,CAAtC;AA0BP,OAAO,MAAMa,uBAAuB,GAAG,EACrC,GAAGV,6BADkC;EAErCW,KAAK,EAAE,OAAOC,WAAP,EAAoBH,OAApB,KAAgC;IACrC,IAAIA,OAAO,CAAC,oBAAD,CAAPA,CAA8BV,QAAlC,EAA4C;MAC1CU,OAAO,CAACI,KAARJ,GAAgB;QACdK,MAAM,EAAE;UACNC,KAAK,EAAE,KADD;UAENC,OAAO,EAAE;QAFH,CADM;QAKd,GAAGP,OAAO,CAACI,KALG;QAMdI,eAAe,EAAE,MANH;QAOdd,MAAM,EAAE;MAPM,CAAhBM;MASA,OAAO,MAAMb,UAAU,CAACgB,WAAD,EAAcH,OAAd,CAAvB;IACD;;IACD,OAAOd,sBAAsB,CAACiB,WAAD,CAA7B;EACD;AAhBoC,CAAhC;AAoBP,OAAO,MAAMM,uCAA+C,GAAGlB,6BAAxD;AACP,OAAO,MAAMmB,iCAAmD,GAAGT,uBAA5D","names":["VERSION","parseCompressedTexture","parseBasis","DEFAULT_TEXTURE_LOADER_OPTIONS","libraryPath","useBasis","CompressedTextureWorkerLoader","name","id","module","version","worker","extensions","mimeTypes","binary","options","CompressedTextureLoader","parse","arrayBuffer","basis","format","alpha","noAlpha","containerFormat","_TypecheckCompressedTextureWorkerLoader","_TypecheckCompressedTextureLoader"],"sources":["../../src/compressed-texture-loader.ts"],"sourcesContent":["import type {Loader, LoaderWithParser} from '@loaders.gl/loader-utils';\nimport {VERSION} from './lib/utils/version';\nimport {parseCompressedTexture} from './lib/parsers/parse-compressed-texture';\nimport parseBasis from './lib/parsers/parse-basis';\n\nexport type TextureLoaderOptions = {\n  'compressed-texture'?: {\n    libraryPath?: string;\n    useBasis?: boolean;\n  };\n};\n\nconst DEFAULT_TEXTURE_LOADER_OPTIONS = {\n  'compressed-texture': {\n    libraryPath: 'libs/',\n    useBasis: false\n  }\n};\n\n/**\n * Worker Loader for KTX, DDS, and PVR texture container formats\n */\nexport const CompressedTextureWorkerLoader = {\n  name: 'Texture Containers',\n  id: 'compressed-texture',\n  module: 'textures',\n  version: VERSION,\n  worker: true,\n  extensions: [\n    'ktx',\n    'ktx2',\n    'dds', // WEBGL_compressed_texture_s3tc, WEBGL_compressed_texture_atc\n    'pvr' // WEBGL_compressed_texture_pvrtc\n  ],\n  mimeTypes: [\n    'image/ktx2',\n    'image/ktx',\n    'image/vnd-ms.dds',\n    'image/x-dds',\n    'application/octet-stream'\n  ],\n  binary: true,\n  options: DEFAULT_TEXTURE_LOADER_OPTIONS\n};\n\n/**\n * Loader for KTX, DDS, and PVR texture container formats\n */\nexport const CompressedTextureLoader = {\n  ...CompressedTextureWorkerLoader,\n  parse: async (arrayBuffer, options) => {\n    if (options['compressed-texture'].useBasis) {\n      options.basis = {\n        format: {\n          alpha: 'BC3',\n          noAlpha: 'BC1'\n        },\n        ...options.basis,\n        containerFormat: 'ktx2',\n        module: 'encoder'\n      };\n      return await parseBasis(arrayBuffer, options);\n    }\n    return parseCompressedTexture(arrayBuffer);\n  }\n};\n\n// TYPE TESTS - TODO find a better way than exporting junk\nexport const _TypecheckCompressedTextureWorkerLoader: Loader = CompressedTextureWorkerLoader;\nexport const _TypecheckCompressedTextureLoader: LoaderWithParser = CompressedTextureLoader;\n"]},"metadata":{},"sourceType":"module"}