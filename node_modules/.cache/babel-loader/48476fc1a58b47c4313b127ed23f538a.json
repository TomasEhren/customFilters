{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { h3SetToMultiPolygon } from 'h3-js';\nimport { createIterable } from '@deck.gl/core';\nimport GeoCellLayer from '../geo-cell-layer/GeoCellLayer';\nvar defaultProps = {\n  getHexagons: {\n    type: 'accessor',\n    value: function value(d) {\n      return d.hexagons;\n    }\n  }\n};\n\nvar H3ClusterLayer = /*#__PURE__*/function (_GeoCellLayer) {\n  _inherits(H3ClusterLayer, _GeoCellLayer);\n\n  var _super = _createSuper(H3ClusterLayer);\n\n  function H3ClusterLayer() {\n    _classCallCheck(this, H3ClusterLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(H3ClusterLayer, [{\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      if (changeFlags.dataChanged || changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagons) {\n        var data = props.data,\n            getHexagons = props.getHexagons;\n        var polygons = [];\n\n        var _createIterable = createIterable(data),\n            iterable = _createIterable.iterable,\n            objectInfo = _createIterable.objectInfo;\n\n        var _iterator = _createForOfIteratorHelper(iterable),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var object = _step.value;\n            objectInfo.index++;\n            var hexagons = getHexagons(object, objectInfo);\n            var multiPolygon = h3SetToMultiPolygon(hexagons, true);\n\n            var _iterator2 = _createForOfIteratorHelper(multiPolygon),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var polygon = _step2.value;\n                polygons.push(this.getSubLayerRow({\n                  polygon: polygon\n                }, object, objectInfo.index));\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        this.setState({\n          polygons: polygons\n        });\n      }\n    }\n  }, {\n    key: \"indexToBounds\",\n    value: function indexToBounds() {\n      return {\n        data: this.state.polygons,\n        getPolygon: function getPolygon(d) {\n          return d.polygon;\n        }\n      };\n    }\n  }]);\n\n  return H3ClusterLayer;\n}(GeoCellLayer);\n\nexport { H3ClusterLayer as default };\nH3ClusterLayer.defaultProps = defaultProps;\nH3ClusterLayer.layerName = 'H3ClusterLayer';","map":{"version":3,"mappings":";;;;;AAAA,SAAQA,mBAAR,QAAkC,OAAlC;AAEA,SAAQC,cAAR,QAA6B,eAA7B;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AAEA,IAAMC,YAAY,GAAG;EACnBC,WAAW,EAAE;IAACC,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAEC,gBAAC;MAAA,OAAIA,CAAC,CAACC,QAAN;IAAA;EAA3B;AADM,CAArB;;IAIqBC,c;;;;;;;;;;;;;WACnBC,2BAA4C;MAAA,IAA/BC,KAA+B,QAA/BA,KAA+B;MAAA,IAAxBC,QAAwB,QAAxBA,QAAwB;MAAA,IAAdC,WAAc,QAAdA,WAAc;;MAC1C,IACEA,WAAW,CAACC,WAAZD,IACCA,WAAW,CAACE,cAAZF,IAA8BA,WAAW,CAACE,cAAZF,CAA2BT,WAF5D,EAGE;QACA,IAAOY,IAAP,GAA4BL,KAA5B,CAAOK,IAAP;QAAA,IAAaZ,WAAb,GAA4BO,KAA5B,CAAaP,WAAb;QACA,IAAMa,QAAQ,GAAG,EAAjB;;QAEA,sBAA+BhB,cAAc,CAACe,IAAD,CAA7C;QAAA,IAAOE,QAAP,mBAAOA,QAAP;QAAA,IAAiBC,UAAjB,mBAAiBA,UAAjB;;QAJA,2CAKqBD,QALrB;QAAA;;QAAA;UAKA,oDAA+B;YAAA,IAApBE,MAAoB;YAC7BD,UAAU,CAACE,KAAXF;YACA,IAAMX,QAAQ,GAAGJ,WAAW,CAACgB,MAAD,EAASD,UAAT,CAA5B;YACA,IAAMG,YAAY,GAAGtB,mBAAmB,CAACQ,QAAD,EAAW,IAAX,CAAxC;;YAH6B,4CAKPc,YALO;YAAA;;YAAA;cAK7B,uDAAoC;gBAAA,IAAzBC,OAAyB;gBAClCN,QAAQ,CAACO,IAATP,CAAc,KAAKQ,cAAL,CAAoB;kBAACF;gBAAD,CAApB,EAA+BH,MAA/B,EAAuCD,UAAU,CAACE,KAAlD,CAAdJ;cACD;YAP4B;cAAA;YAAA;cAAA;YAAA;UAQ9B;QAbD;UAAA;QAAA;UAAA;QAAA;;QAeA,KAAKS,QAAL,CAAc;UAACT;QAAD,CAAd;MACD;IACF;;;WAEDU,yBAAgB;MACd,OAAO;QACLX,IAAI,EAAE,KAAKY,KAAL,CAAWX,QADZ;QAELY,UAAU,EAAEtB,qBAAC;UAAA,OAAIA,CAAC,CAACgB,OAAN;QAAA;MAFR,CAAP;IAID;;;;EA7ByCrB,Y;;SAAvBO,c;AAgCrBA,cAAc,CAACN,YAAfM,GAA8BN,YAA9BM;AACAA,cAAc,CAACqB,SAAfrB,GAA2B,gBAA3BA","names":["h3SetToMultiPolygon","createIterable","GeoCellLayer","defaultProps","getHexagons","type","value","d","hexagons","H3ClusterLayer","updateState","props","oldProps","changeFlags","dataChanged","updateTriggers","data","polygons","iterable","objectInfo","object","index","multiPolygon","polygon","push","getSubLayerRow","setState","indexToBounds","state","getPolygon","layerName"],"sources":["../../../src/h3-layers/h3-cluster-layer.js"],"sourcesContent":["import {h3SetToMultiPolygon} from 'h3-js';\n\nimport {createIterable} from '@deck.gl/core';\nimport GeoCellLayer from '../geo-cell-layer/GeoCellLayer';\n\nconst defaultProps = {\n  getHexagons: {type: 'accessor', value: d => d.hexagons}\n};\n\nexport default class H3ClusterLayer extends GeoCellLayer {\n  updateState({props, oldProps, changeFlags}) {\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagons)\n    ) {\n      const {data, getHexagons} = props;\n      const polygons = [];\n\n      const {iterable, objectInfo} = createIterable(data);\n      for (const object of iterable) {\n        objectInfo.index++;\n        const hexagons = getHexagons(object, objectInfo);\n        const multiPolygon = h3SetToMultiPolygon(hexagons, true);\n\n        for (const polygon of multiPolygon) {\n          polygons.push(this.getSubLayerRow({polygon}, object, objectInfo.index));\n        }\n      }\n\n      this.setState({polygons});\n    }\n  }\n\n  indexToBounds() {\n    return {\n      data: this.state.polygons,\n      getPolygon: d => d.polygon\n    };\n  }\n}\n\nH3ClusterLayer.defaultProps = defaultProps;\nH3ClusterLayer.layerName = 'H3ClusterLayer';\n"]},"metadata":{},"sourceType":"module"}