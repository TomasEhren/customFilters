{"ast":null,"code":"import * as node from '../node/buffer';\nexport function isBuffer(value) {\n  return value && typeof value === 'object' && value.isBuffer;\n}\nexport function toBuffer(data) {\n  return node.toBuffer ? node.toBuffer(data) : data;\n}\nexport function bufferToArrayBuffer(buffer) {\n  if (isBuffer(buffer)) {\n    const typedArray = new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.length);\n    return typedArray.slice().buffer;\n  }\n\n  return buffer;\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,gBAAtB;AAKA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAuC;EAC5C,OAAOA,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA1BA,IAAsCA,KAAK,CAACD,QAAnD;AACD;AAMD,OAAO,SAASE,QAAT,CAAkBC,IAAlB,EAAqC;EAC1C,OAAOJ,IAAI,CAACG,QAALH,GAAgBA,IAAI,CAACG,QAALH,CAAcI,IAAdJ,CAAhBA,GAAsCI,IAA7C;AACD;AAMD,OAAO,SAASC,mBAAT,CAA6BC,MAA7B,EAAuD;EAC5D,IAAIL,QAAQ,CAACK,MAAD,CAAZ,EAAsB;IACpB,MAAMC,UAAU,GAAG,IAAIC,UAAJ,CAAeF,MAAM,CAACA,MAAtB,EAA8BA,MAAM,CAACG,UAArC,EAAiDH,MAAM,CAACI,MAAxD,CAAnB;IACA,OAAOH,UAAU,CAACI,KAAXJ,GAAmBD,MAA1B;EACD;;EACD,OAAOA,MAAP;AACD","names":["node","isBuffer","value","toBuffer","data","bufferToArrayBuffer","buffer","typedArray","Uint8Array","byteOffset","length","slice"],"sources":["../../../../src/lib/binary-utils/buffer-utils.ts"],"sourcesContent":["import * as node from '../node/buffer';\n\n/**\n * Check for Node.js `Buffer` (without triggering bundler to include Buffer polyfill on browser)\n */\nexport function isBuffer(value: any): boolean {\n  return value && typeof value === 'object' && value.isBuffer;\n}\n\n/**\n * Converts to Node.js `Buffer` (without triggering bundler to include Buffer polyfill on browser)\n * @todo better data type\n */\nexport function toBuffer(data: any): Buffer {\n  return node.toBuffer ? node.toBuffer(data) : data;\n}\n\n/**\n * Converts Node.js `Buffer` to `ArrayBuffer` (without triggering bundler to include Buffer polyfill on browser)\n * @todo better data type\n */\nexport function bufferToArrayBuffer(buffer: any): ArrayBuffer {\n  if (isBuffer(buffer)) {\n    const typedArray = new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.length);\n    return typedArray.slice().buffer;\n  }\n  return buffer;\n}\n"]},"metadata":{},"sourceType":"module"}