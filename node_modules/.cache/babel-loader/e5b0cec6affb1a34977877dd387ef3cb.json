{"ast":null,"code":"import { _isImageFormatSupported } from '@loaders.gl/images';\nimport GLTFScenegraph from '../api/gltf-scenegraph';\nconst EXT_TEXTURE_WEBP = 'EXT_texture_webp';\nexport const name = EXT_TEXTURE_WEBP;\nexport function preprocess(gltfData, options) {\n  const scenegraph = new GLTFScenegraph(gltfData);\n\n  if (!_isImageFormatSupported('image/webp')) {\n    if (scenegraph.getRequiredExtensions().includes(EXT_TEXTURE_WEBP)) {\n      throw new Error(\"gltf: Required extension \".concat(EXT_TEXTURE_WEBP, \" not supported by browser\"));\n    }\n\n    return;\n  }\n\n  const {\n    json\n  } = scenegraph;\n\n  for (const texture of json.textures || []) {\n    const extension = scenegraph.getObjectExtension(texture, EXT_TEXTURE_WEBP);\n\n    if (extension) {\n      texture.source = extension.source;\n    }\n\n    scenegraph.removeObjectExtension(texture, EXT_TEXTURE_WEBP);\n  }\n\n  scenegraph.removeExtension(EXT_TEXTURE_WEBP);\n}","map":{"version":3,"mappings":"AAOA,SAAQA,uBAAR,QAAsC,oBAAtC;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AAEA,MAAMC,gBAAgB,GAAG,kBAAzB;AAGA,OAAO,MAAMC,IAAI,GAAGD,gBAAb;AAMP,OAAO,SAASE,UAAT,CAAoBC,QAApB,EAA4CC,OAA5C,EAA8E;EACnF,MAAMC,UAAU,GAAG,IAAIN,cAAJ,CAAmBI,QAAnB,CAAnB;;EAEA,IAAI,CAACL,uBAAuB,CAAC,YAAD,CAA5B,EAA4C;IAC1C,IAAIO,UAAU,CAACC,qBAAXD,GAAmCE,QAAnCF,CAA4CL,gBAA5CK,CAAJ,EAAmE;MACjE,MAAM,IAAIG,KAAJ,oCAAsCR,gBAAtC,+BAAN;IACD;;IACD;EACD;;EAED,MAAM;IAACS;EAAD,IAASJ,UAAf;;EAEA,KAAK,MAAMK,OAAX,IAAsBD,IAAI,CAACE,QAALF,IAAiB,EAAvC,EAA2C;IACzC,MAAMG,SAAS,GAAGP,UAAU,CAACQ,kBAAXR,CAChBK,OADgBL,EAEhBL,gBAFgBK,CAAlB;;IAIA,IAAIO,SAAJ,EAAe;MACbF,OAAO,CAACI,MAARJ,GAAiBE,SAAS,CAACE,MAA3BJ;IACD;;IACDL,UAAU,CAACU,qBAAXV,CAAiCK,OAAjCL,EAA0CL,gBAA1CK;EACD;;EAGDA,UAAU,CAACW,eAAXX,CAA2BL,gBAA3BK;AACD","names":["_isImageFormatSupported","GLTFScenegraph","EXT_TEXTURE_WEBP","name","preprocess","gltfData","options","scenegraph","getRequiredExtensions","includes","Error","json","texture","textures","extension","getObjectExtension","source","removeObjectExtension","removeExtension"],"sources":["../../../../src/lib/extensions/EXT_texture_webp.ts"],"sourcesContent":["// GLTF EXTENSION: EXT_TEXTURE_WEBP\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/EXT_TEXTURE_WEBP\n/* eslint-disable camelcase */\n\nimport type {GLTF, GLTF_EXT_texture_webp} from '../types/gltf-types';\nimport type {GLTFLoaderOptions} from '../../gltf-loader';\n\nimport {_isImageFormatSupported} from '@loaders.gl/images';\nimport GLTFScenegraph from '../api/gltf-scenegraph';\n\nconst EXT_TEXTURE_WEBP = 'EXT_texture_webp';\n\n/** Extension name */\nexport const name = EXT_TEXTURE_WEBP;\n\n/**\n * Replaces a texture source reference with the extension texture\n * Done in preprocess() to prevent load of default image\n */\nexport function preprocess(gltfData: {json: GLTF}, options: GLTFLoaderOptions): void {\n  const scenegraph = new GLTFScenegraph(gltfData);\n\n  if (!_isImageFormatSupported('image/webp')) {\n    if (scenegraph.getRequiredExtensions().includes(EXT_TEXTURE_WEBP)) {\n      throw new Error(`gltf: Required extension ${EXT_TEXTURE_WEBP} not supported by browser`);\n    }\n    return;\n  }\n\n  const {json} = scenegraph;\n\n  for (const texture of json.textures || []) {\n    const extension = scenegraph.getObjectExtension<GLTF_EXT_texture_webp>(\n      texture,\n      EXT_TEXTURE_WEBP\n    );\n    if (extension) {\n      texture.source = extension.source;\n    }\n    scenegraph.removeObjectExtension(texture, EXT_TEXTURE_WEBP);\n  }\n\n  // Remove the top-level extension\n  scenegraph.removeExtension(EXT_TEXTURE_WEBP);\n}\n"]},"metadata":{},"sourceType":"module"}