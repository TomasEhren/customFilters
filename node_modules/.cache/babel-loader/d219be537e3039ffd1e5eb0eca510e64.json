{"ast":null,"code":"import { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './text-background-layer-vertex.glsl';\nimport fs from './text-background-layer-fragment.glsl';\nconst defaultProps = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n  padding: {\n    type: 'array',\n    value: [0, 0, 0, 0]\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getSize: {\n    type: 'accessor',\n    value: 1\n  },\n  getAngle: {\n    type: 'accessor',\n    value: 0\n  },\n  getPixelOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  getBoundingRect: {\n    type: 'accessor',\n    value: [0, 0, 0, 0]\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: [0, 0, 0, 255]\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: [0, 0, 0, 255]\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  }\n};\nexport default class TextBackgroundLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, picking]\n    });\n  }\n\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instanceRects: {\n        size: 4,\n        accessor: 'getBoundingRect'\n      },\n      instancePixelOffsets: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      },\n      instanceFillColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: 5121,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: 5121,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState(_ref) {\n    let {\n      props,\n      oldProps,\n      changeFlags\n    } = _ref;\n    super.updateState({\n      props,\n      oldProps,\n      changeFlags\n    });\n\n    if (changeFlags.extensionsChanged) {\n      var _this$state$model;\n\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw(_ref2) {\n    let {\n      uniforms\n    } = _ref2;\n    const {\n      billboard,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      getLineWidth\n    } = this.props;\n    let {\n      padding\n    } = this.props;\n\n    if (padding.length < 4) {\n      padding = [padding[0], padding[1], padding[0], padding[1]];\n    }\n\n    this.state.model.setUniforms(uniforms).setUniforms({\n      billboard,\n      stroked: Boolean(getLineWidth),\n      padding,\n      sizeUnits: UNIT[sizeUnits],\n      sizeScale,\n      sizeMinPixels,\n      sizeMaxPixels\n    }).draw();\n  }\n\n  _getModel(gl) {\n    const positions = [0, 0, 1, 0, 1, 1, 0, 1];\n    return new Model(gl, { ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 6,\n        vertexCount: 4,\n        attributes: {\n          positions: {\n            size: 2,\n            value: new Float32Array(positions)\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n}\nTextBackgroundLayer.layerName = 'TextBackgroundLayer';\nTextBackgroundLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["Layer","project32","picking","UNIT","Model","Geometry","vs","fs","defaultProps","billboard","sizeScale","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","padding","type","value","getPosition","x","position","getSize","getAngle","getPixelOffset","getBoundingRect","getFillColor","getLineColor","getLineWidth","TextBackgroundLayer","getShaders","modules","initializeState","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceSizes","defaultValue","instanceAngles","instanceRects","instancePixelOffsets","instanceFillColors","normalized","instanceLineColors","instanceLineWidths","updateState","props","oldProps","changeFlags","extensionsChanged","gl","context","state","model","delete","_getModel","invalidateAll","draw","uniforms","length","setUniforms","stroked","Boolean","positions","id","geometry","drawMode","vertexCount","attributes","Float32Array","isInstanced","layerName"],"sources":["../../../../src/text-layer/text-background-layer/text-background-layer.js"],"sourcesContent":["import {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './text-background-layer-vertex.glsl';\nimport fs from './text-background-layer-fragment.glsl';\n\nconst defaultProps = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  padding: {type: 'array', value: [0, 0, 0, 0]},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n  getBoundingRect: {type: 'accessor', value: [0, 0, 0, 0]},\n  getFillColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineWidth: {type: 'accessor', value: 1}\n};\n\nexport default class TextBackgroundLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instanceRects: {\n        size: 4,\n        accessor: 'getBoundingRect'\n      },\n      instancePixelOffsets: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      },\n      instanceFillColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {billboard, sizeScale, sizeUnits, sizeMinPixels, sizeMaxPixels, getLineWidth} =\n      this.props;\n    let {padding} = this.props;\n\n    if (padding.length < 4) {\n      padding = [padding[0], padding[1], padding[0], padding[1]];\n    }\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        billboard,\n        stroked: Boolean(getLineWidth),\n        padding,\n        sizeUnits: UNIT[sizeUnits],\n        sizeScale,\n        sizeMinPixels,\n        sizeMaxPixels\n      })\n      .draw();\n  }\n\n  _getModel(gl) {\n    // a square that minimally cover the unit circle\n    const positions = [0, 0, 1, 0, 1, 1, 0, 1];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount: 4,\n        attributes: {\n          positions: {size: 2, value: new Float32Array(positions)}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n\nTextBackgroundLayer.layerName = 'TextBackgroundLayer';\nTextBackgroundLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}