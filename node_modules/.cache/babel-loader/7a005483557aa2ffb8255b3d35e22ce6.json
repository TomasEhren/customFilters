{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Resource from './resource';\nimport Accessor from './accessor';\nimport { getGLTypeFromTypedArray, getTypedArrayFromGLType } from '../webgl-utils/typed-array-utils';\nimport { assertWebGL2Context, log } from '@luma.gl/gltools';\nimport { assert } from '../utils/assert';\nimport { checkProps } from '../utils/check-props';\nvar DEBUG_DATA_LENGTH = 10;\nvar DEPRECATED_PROPS = {\n  offset: 'accessor.offset',\n  stride: 'accessor.stride',\n  type: 'accessor.type',\n  size: 'accessor.size',\n  divisor: 'accessor.divisor',\n  normalized: 'accessor.normalized',\n  integer: 'accessor.integer',\n  instanced: 'accessor.divisor',\n  isInstanced: 'accessor.divisor'\n};\nvar PROP_CHECKS_INITIALIZE = {\n  removedProps: {},\n  replacedProps: {\n    bytes: 'byteLength'\n  },\n  deprecatedProps: DEPRECATED_PROPS\n};\nvar PROP_CHECKS_SET_PROPS = {\n  removedProps: DEPRECATED_PROPS\n};\n\nvar Buffer = /*#__PURE__*/function (_Resource) {\n  _inherits(Buffer, _Resource);\n\n  var _super = _createSuper(Buffer);\n\n  function Buffer(gl) {\n    var _this;\n\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Buffer);\n\n    _this = _super.call(this, gl, props);\n\n    _this.stubRemovedMethods('Buffer', 'v6.0', ['layout', 'setLayout', 'getIndexedParameter']);\n\n    _this.target = props.target || (_this.gl.webgl2 ? 36662 : 34962);\n\n    _this.initialize(props);\n\n    Object.seal(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Buffer, [{\n    key: \"getElementCount\",\n    value: function getElementCount() {\n      var accessor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.accessor;\n      return Math.round(this.byteLength / Accessor.getBytesPerElement(accessor));\n    }\n  }, {\n    key: \"getVertexCount\",\n    value: function getVertexCount() {\n      var accessor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.accessor;\n      return Math.round(this.byteLength / Accessor.getBytesPerVertex(accessor));\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (ArrayBuffer.isView(props)) {\n        props = {\n          data: props\n        };\n      }\n\n      if (Number.isFinite(props)) {\n        props = {\n          byteLength: props\n        };\n      }\n\n      props = checkProps('Buffer', props, PROP_CHECKS_INITIALIZE);\n      this.usage = props.usage || 35044;\n      this.debugData = null;\n      this.setAccessor(Object.assign({}, props, props.accessor));\n\n      if (props.data) {\n        this._setData(props.data, props.offset, props.byteLength);\n      } else {\n        this._setByteLength(props.byteLength || 0);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      props = checkProps('Buffer', props, PROP_CHECKS_SET_PROPS);\n\n      if ('accessor' in props) {\n        this.setAccessor(props.accessor);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setAccessor\",\n    value: function setAccessor(accessor) {\n      accessor = Object.assign({}, accessor);\n      delete accessor.buffer;\n      this.accessor = new Accessor(accessor);\n      return this;\n    }\n  }, {\n    key: \"reallocate\",\n    value: function reallocate(byteLength) {\n      if (byteLength > this.byteLength) {\n        this._setByteLength(byteLength);\n\n        return true;\n      }\n\n      this.bytesUsed = byteLength;\n      return false;\n    }\n  }, {\n    key: \"setData\",\n    value: function setData(props) {\n      return this.initialize(props);\n    }\n  }, {\n    key: \"subData\",\n    value: function subData(props) {\n      if (ArrayBuffer.isView(props)) {\n        props = {\n          data: props\n        };\n      }\n\n      var _props = props,\n          data = _props.data,\n          _props$offset = _props.offset,\n          offset = _props$offset === void 0 ? 0 : _props$offset,\n          _props$srcOffset = _props.srcOffset,\n          srcOffset = _props$srcOffset === void 0 ? 0 : _props$srcOffset;\n      var byteLength = props.byteLength || props.length;\n      assert(data);\n      var target = this.gl.webgl2 ? 36663 : this.target;\n      this.gl.bindBuffer(target, this.handle);\n\n      if (srcOffset !== 0 || byteLength !== undefined) {\n        assertWebGL2Context(this.gl);\n        this.gl.bufferSubData(this.target, offset, data, srcOffset, byteLength);\n      } else {\n        this.gl.bufferSubData(target, offset, data);\n      }\n\n      this.gl.bindBuffer(target, null);\n      this.debugData = null;\n\n      this._inferType(data);\n\n      return this;\n    }\n  }, {\n    key: \"copyData\",\n    value: function copyData(_ref) {\n      var sourceBuffer = _ref.sourceBuffer,\n          _ref$readOffset = _ref.readOffset,\n          readOffset = _ref$readOffset === void 0 ? 0 : _ref$readOffset,\n          _ref$writeOffset = _ref.writeOffset,\n          writeOffset = _ref$writeOffset === void 0 ? 0 : _ref$writeOffset,\n          size = _ref.size;\n      var gl = this.gl;\n      assertWebGL2Context(gl);\n      gl.bindBuffer(36662, sourceBuffer.handle);\n      gl.bindBuffer(36663, this.handle);\n      gl.copyBufferSubData(36662, 36663, readOffset, writeOffset, size);\n      gl.bindBuffer(36662, null);\n      gl.bindBuffer(36663, null);\n      this.debugData = null;\n      return this;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref2$dstData = _ref2.dstData,\n          dstData = _ref2$dstData === void 0 ? null : _ref2$dstData,\n          _ref2$srcByteOffset = _ref2.srcByteOffset,\n          srcByteOffset = _ref2$srcByteOffset === void 0 ? 0 : _ref2$srcByteOffset,\n          _ref2$dstOffset = _ref2.dstOffset,\n          dstOffset = _ref2$dstOffset === void 0 ? 0 : _ref2$dstOffset,\n          _ref2$length = _ref2.length,\n          length = _ref2$length === void 0 ? 0 : _ref2$length;\n\n      assertWebGL2Context(this.gl);\n      var ArrayType = getTypedArrayFromGLType(this.accessor.type || 5126, {\n        clamped: false\n      });\n\n      var sourceAvailableElementCount = this._getAvailableElementCount(srcByteOffset);\n\n      var dstElementOffset = dstOffset;\n      var dstAvailableElementCount;\n      var dstElementCount;\n\n      if (dstData) {\n        dstElementCount = dstData.length;\n        dstAvailableElementCount = dstElementCount - dstElementOffset;\n      } else {\n        dstAvailableElementCount = Math.min(sourceAvailableElementCount, length || sourceAvailableElementCount);\n        dstElementCount = dstElementOffset + dstAvailableElementCount;\n      }\n\n      var copyElementCount = Math.min(sourceAvailableElementCount, dstAvailableElementCount);\n      length = length || copyElementCount;\n      assert(length <= copyElementCount);\n      dstData = dstData || new ArrayType(dstElementCount);\n      this.gl.bindBuffer(36662, this.handle);\n      this.gl.getBufferSubData(36662, srcByteOffset, dstData, dstOffset, length);\n      this.gl.bindBuffer(36662, null);\n      return dstData;\n    }\n  }, {\n    key: \"bind\",\n    value: function bind() {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref3$target = _ref3.target,\n          target = _ref3$target === void 0 ? this.target : _ref3$target,\n          _ref3$index = _ref3.index,\n          index = _ref3$index === void 0 ? this.accessor && this.accessor.index : _ref3$index,\n          _ref3$offset = _ref3.offset,\n          offset = _ref3$offset === void 0 ? 0 : _ref3$offset,\n          size = _ref3.size;\n\n      if (target === 35345 || target === 35982) {\n        if (size !== undefined) {\n          this.gl.bindBufferRange(target, index, this.handle, offset, size);\n        } else {\n          assert(offset === 0);\n          this.gl.bindBufferBase(target, index, this.handle);\n        }\n      } else {\n        this.gl.bindBuffer(target, this.handle);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref4$target = _ref4.target,\n          target = _ref4$target === void 0 ? this.target : _ref4$target,\n          _ref4$index = _ref4.index,\n          index = _ref4$index === void 0 ? this.accessor && this.accessor.index : _ref4$index;\n\n      var isIndexedBuffer = target === 35345 || target === 35982;\n\n      if (isIndexedBuffer) {\n        this.gl.bindBufferBase(target, index, null);\n      } else {\n        this.gl.bindBuffer(target, null);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getDebugData\",\n    value: function getDebugData() {\n      if (!this.debugData) {\n        this.debugData = this.getData({\n          length: Math.min(DEBUG_DATA_LENGTH, this.byteLength)\n        });\n        return {\n          data: this.debugData,\n          changed: true\n        };\n      }\n\n      return {\n        data: this.debugData,\n        changed: false\n      };\n    }\n  }, {\n    key: \"invalidateDebugData\",\n    value: function invalidateDebugData() {\n      this.debugData = null;\n    }\n  }, {\n    key: \"_setData\",\n    value: function _setData(data) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var byteLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : data.byteLength + offset;\n      assert(ArrayBuffer.isView(data));\n\n      this._trackDeallocatedMemory();\n\n      var target = this._getTarget();\n\n      this.gl.bindBuffer(target, this.handle);\n      this.gl.bufferData(target, byteLength, this.usage);\n      this.gl.bufferSubData(target, offset, data);\n      this.gl.bindBuffer(target, null);\n      this.debugData = data.slice(0, DEBUG_DATA_LENGTH);\n      this.bytesUsed = byteLength;\n\n      this._trackAllocatedMemory(byteLength);\n\n      var type = getGLTypeFromTypedArray(data);\n      assert(type);\n      this.setAccessor(new Accessor(this.accessor, {\n        type: type\n      }));\n      return this;\n    }\n  }, {\n    key: \"_setByteLength\",\n    value: function _setByteLength(byteLength) {\n      var usage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.usage;\n      assert(byteLength >= 0);\n\n      this._trackDeallocatedMemory();\n\n      var data = byteLength;\n\n      if (byteLength === 0) {\n        data = new Float32Array(0);\n      }\n\n      var target = this._getTarget();\n\n      this.gl.bindBuffer(target, this.handle);\n      this.gl.bufferData(target, data, usage);\n      this.gl.bindBuffer(target, null);\n      this.usage = usage;\n      this.debugData = null;\n      this.bytesUsed = byteLength;\n\n      this._trackAllocatedMemory(byteLength);\n\n      return this;\n    }\n  }, {\n    key: \"_getTarget\",\n    value: function _getTarget() {\n      return this.gl.webgl2 ? 36663 : this.target;\n    }\n  }, {\n    key: \"_getAvailableElementCount\",\n    value: function _getAvailableElementCount(srcByteOffset) {\n      var ArrayType = getTypedArrayFromGLType(this.accessor.type || 5126, {\n        clamped: false\n      });\n      var sourceElementOffset = srcByteOffset / ArrayType.BYTES_PER_ELEMENT;\n      return this.getElementCount() - sourceElementOffset;\n    }\n  }, {\n    key: \"_inferType\",\n    value: function _inferType(data) {\n      if (!this.accessor.type) {\n        this.setAccessor(new Accessor(this.accessor, {\n          type: getGLTypeFromTypedArray(data)\n        }));\n      }\n    }\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return this.gl.createBuffer();\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      this.gl.deleteBuffer(this.handle);\n\n      this._trackDeallocatedMemory();\n    }\n  }, {\n    key: \"_getParameter\",\n    value: function _getParameter(pname) {\n      this.gl.bindBuffer(this.target, this.handle);\n      var value = this.gl.getBufferParameter(this.target, pname);\n      this.gl.bindBuffer(this.target, null);\n      return value;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      log.deprecated('Buffer.type', 'Buffer.accessor.type')();\n      return this.accessor.type;\n    }\n  }, {\n    key: \"bytes\",\n    get: function get() {\n      log.deprecated('Buffer.bytes', 'Buffer.byteLength')();\n      return this.byteLength;\n    }\n  }, {\n    key: \"setByteLength\",\n    value: function setByteLength(byteLength) {\n      log.deprecated('setByteLength', 'reallocate')();\n      return this.reallocate(byteLength);\n    }\n  }, {\n    key: \"updateAccessor\",\n    value: function updateAccessor(opts) {\n      log.deprecated('updateAccessor(...)', 'setAccessor(new Accessor(buffer.accessor, ...)')();\n      this.accessor = new Accessor(this.accessor, opts);\n      return this;\n    }\n  }]);\n\n  return Buffer;\n}(Resource);\n\nexport { Buffer as default };","map":{"version":3,"mappings":"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","names":["Resource","Accessor","getGLTypeFromTypedArray","getTypedArrayFromGLType","assertWebGL2Context","log","assert","checkProps","DEBUG_DATA_LENGTH","DEPRECATED_PROPS","offset","stride","type","size","divisor","normalized","integer","instanced","isInstanced","PROP_CHECKS_INITIALIZE","removedProps","replacedProps","bytes","deprecatedProps","PROP_CHECKS_SET_PROPS","Buffer","constructor","gl","props","stubRemovedMethods","target","webgl2","initialize","Object","seal","getElementCount","accessor","Math","round","byteLength","getBytesPerElement","getVertexCount","getBytesPerVertex","ArrayBuffer","isView","data","Number","isFinite","usage","debugData","setAccessor","assign","_setData","_setByteLength","setProps","buffer","reallocate","bytesUsed","setData","subData","srcOffset","length","bindBuffer","handle","undefined","bufferSubData","_inferType","copyData","sourceBuffer","readOffset","writeOffset","copyBufferSubData","getData","dstData","srcByteOffset","dstOffset","ArrayType","clamped","sourceAvailableElementCount","_getAvailableElementCount","dstElementOffset","dstAvailableElementCount","dstElementCount","min","copyElementCount","getBufferSubData","bind","index","bindBufferRange","bindBufferBase","unbind","isIndexedBuffer","getDebugData","changed","invalidateDebugData","_trackDeallocatedMemory","_getTarget","bufferData","slice","_trackAllocatedMemory","Float32Array","sourceElementOffset","BYTES_PER_ELEMENT","_createHandle","createBuffer","_deleteHandle","deleteBuffer","_getParameter","pname","value","getBufferParameter","deprecated","setByteLength","updateAccessor","opts"],"sources":["../../../src/classes/buffer.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport Accessor from './accessor';\nimport {getGLTypeFromTypedArray, getTypedArrayFromGLType} from '../webgl-utils/typed-array-utils';\nimport {assertWebGL2Context, log} from '@luma.gl/gltools';\nimport {assert} from '../utils/assert';\nimport {checkProps} from '../utils/check-props';\n\nconst DEBUG_DATA_LENGTH = 10;\n\n// Shared prop checks for constructor and setProps\nconst DEPRECATED_PROPS = {\n  offset: 'accessor.offset',\n  stride: 'accessor.stride',\n  type: 'accessor.type',\n  size: 'accessor.size',\n  divisor: 'accessor.divisor',\n  normalized: 'accessor.normalized',\n  integer: 'accessor.integer',\n  instanced: 'accessor.divisor',\n  isInstanced: 'accessor.divisor'\n};\n\n// Prop checks for constructor\nconst PROP_CHECKS_INITIALIZE = {\n  removedProps: {},\n  replacedProps: {\n    bytes: 'byteLength'\n  },\n  // new Buffer() with individual accessor props is still used in apps, emit warnings\n  deprecatedProps: DEPRECATED_PROPS\n};\n\n// Prop checks for setProps\nconst PROP_CHECKS_SET_PROPS = {\n  // Buffer.setProps() with individual accessor props is rare => emit errors\n  removedProps: DEPRECATED_PROPS\n};\n\nexport default class Buffer extends Resource {\n  constructor(gl, props = {}) {\n    super(gl, props);\n\n    this.stubRemovedMethods('Buffer', 'v6.0', ['layout', 'setLayout', 'getIndexedParameter']);\n    // this.stubRemovedMethods('Buffer', 'v7.0', ['updateAccessor']);\n\n    // In WebGL1, need to make sure we use GL.ELEMENT_ARRAY_BUFFER when initializing element buffers\n    // otherwise buffer type will lock to generic (non-element) buffer\n    // In WebGL2, we can use GL.COPY_READ_BUFFER which avoids locking the type here\n    this.target = props.target || (this.gl.webgl2 ? GL.COPY_READ_BUFFER : GL.ARRAY_BUFFER);\n\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n\n  // returns number of elements in the buffer (assuming that the full buffer is used)\n  getElementCount(accessor = this.accessor) {\n    return Math.round(this.byteLength / Accessor.getBytesPerElement(accessor));\n  }\n\n  // returns number of vertices in the buffer (assuming that the full buffer is used)\n  getVertexCount(accessor = this.accessor) {\n    return Math.round(this.byteLength / Accessor.getBytesPerVertex(accessor));\n  }\n\n  // Creates and initializes the buffer object's data store.\n  // Signature: `new Buffer(gl, {data: new Float32Array(...)})`\n  // Signature: `new Buffer(gl, new Float32Array(...))`\n  // Signature: `new Buffer(gl, 100)`\n  initialize(props = {}) {\n    // Signature `new Buffer(gl, new Float32Array(...)`\n    if (ArrayBuffer.isView(props)) {\n      props = {data: props};\n    }\n\n    // Signature: `new Buffer(gl, 100)`\n    if (Number.isFinite(props)) {\n      props = {byteLength: props};\n    }\n\n    props = checkProps('Buffer', props, PROP_CHECKS_INITIALIZE);\n\n    // Initialize member fields\n    this.usage = props.usage || GL.STATIC_DRAW;\n    this.debugData = null;\n\n    // Deprecated: Merge main props and accessor\n    this.setAccessor(Object.assign({}, props, props.accessor));\n\n    // Set data: (re)initializes the buffer\n    if (props.data) {\n      this._setData(props.data, props.offset, props.byteLength);\n    } else {\n      this._setByteLength(props.byteLength || 0);\n    }\n\n    return this;\n  }\n\n  setProps(props) {\n    props = checkProps('Buffer', props, PROP_CHECKS_SET_PROPS);\n\n    if ('accessor' in props) {\n      this.setAccessor(props.accessor);\n    }\n\n    return this;\n  }\n\n  // Optionally stores an accessor with the buffer, makes it easier to use it as an attribute later\n  // {type, size = 1, offset = 0, stride = 0, normalized = false, integer = false, divisor = 0}\n  setAccessor(accessor) {\n    // NOTE: From luma.gl v7.0, Accessors have an optional `buffer `field\n    // (mainly to support \"interleaving\")\n    // To avoid confusion, ensure `buffer.accessor` does not have a `buffer.accessor.buffer` field:\n    accessor = Object.assign({}, accessor);\n    delete accessor.buffer;\n\n    // This new statement ensures that an \"accessor object\" is re-packaged as an Accessor instance\n    this.accessor = new Accessor(accessor);\n    return this;\n  }\n\n  // Allocate a bigger GPU buffer (if the current buffer is not big enough).\n  // If a reallocation is triggered it clears the buffer\n  // Returns:\n  //  `true`: buffer was reallocated, data was cleared\n  //  `false`: buffer was big enough, data is intact\n  reallocate(byteLength) {\n    if (byteLength > this.byteLength) {\n      this._setByteLength(byteLength);\n      return true;\n    }\n    this.bytesUsed = byteLength;\n    return false;\n  }\n\n  // Update with new data. Reinitializes the buffer\n  setData(props) {\n    return this.initialize(props);\n  }\n\n  // Updates a subset of a buffer object's data store.\n  // Data (Typed Array or ArrayBuffer), length is inferred unless provided\n  // Offset into buffer\n  // WebGL2 only: Offset into srcData\n  // WebGL2 only: Number of bytes to be copied\n  subData(props) {\n    // Signature: buffer.subData(new Float32Array([...]))\n    if (ArrayBuffer.isView(props)) {\n      props = {data: props};\n    }\n\n    const {data, offset = 0, srcOffset = 0} = props;\n    const byteLength = props.byteLength || props.length;\n\n    assert(data);\n\n    // Create the buffer - binding it here for the first time locks the type\n    // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type\n    const target = this.gl.webgl2 ? GL.COPY_WRITE_BUFFER : this.target;\n    this.gl.bindBuffer(target, this.handle);\n    // WebGL2: subData supports additional srcOffset and length parameters\n    if (srcOffset !== 0 || byteLength !== undefined) {\n      assertWebGL2Context(this.gl);\n      this.gl.bufferSubData(this.target, offset, data, srcOffset, byteLength);\n    } else {\n      this.gl.bufferSubData(target, offset, data);\n    }\n    this.gl.bindBuffer(target, null);\n\n    // TODO - update local `data` if offsets are right\n    this.debugData = null;\n\n    this._inferType(data);\n\n    return this;\n  }\n\n  // WEBGL2 ONLY: Copies part of the data of another buffer into this buffer\n  copyData({sourceBuffer, readOffset = 0, writeOffset = 0, size}) {\n    const {gl} = this;\n    assertWebGL2Context(gl);\n\n    // Use GL.COPY_READ_BUFFER+GL.COPY_WRITE_BUFFER avoid disturbing other targets and locking type\n    gl.bindBuffer(GL.COPY_READ_BUFFER, sourceBuffer.handle);\n    gl.bindBuffer(GL.COPY_WRITE_BUFFER, this.handle);\n    gl.copyBufferSubData(GL.COPY_READ_BUFFER, GL.COPY_WRITE_BUFFER, readOffset, writeOffset, size);\n    gl.bindBuffer(GL.COPY_READ_BUFFER, null);\n    gl.bindBuffer(GL.COPY_WRITE_BUFFER, null);\n\n    // TODO - update local `data` if offsets are 0\n    this.debugData = null;\n\n    return this;\n  }\n\n  // WEBGL2 ONLY: Reads data from buffer into an ArrayBufferView or SharedArrayBuffer.\n  getData({dstData = null, srcByteOffset = 0, dstOffset = 0, length = 0} = {}) {\n    assertWebGL2Context(this.gl);\n\n    const ArrayType = getTypedArrayFromGLType(this.accessor.type || GL.FLOAT, {clamped: false});\n    const sourceAvailableElementCount = this._getAvailableElementCount(srcByteOffset);\n\n    const dstElementOffset = dstOffset;\n\n    let dstAvailableElementCount;\n    let dstElementCount;\n    if (dstData) {\n      dstElementCount = dstData.length;\n      dstAvailableElementCount = dstElementCount - dstElementOffset;\n    } else {\n      // Allocate ArrayBufferView with enough size to copy all eligible data.\n      dstAvailableElementCount = Math.min(\n        sourceAvailableElementCount,\n        length || sourceAvailableElementCount\n      );\n      dstElementCount = dstElementOffset + dstAvailableElementCount;\n    }\n\n    const copyElementCount = Math.min(sourceAvailableElementCount, dstAvailableElementCount);\n    length = length || copyElementCount;\n    assert(length <= copyElementCount);\n    dstData = dstData || new ArrayType(dstElementCount);\n\n    // Use GL.COPY_READ_BUFFER to avoid disturbing other targets and locking type\n    this.gl.bindBuffer(GL.COPY_READ_BUFFER, this.handle);\n    this.gl.getBufferSubData(GL.COPY_READ_BUFFER, srcByteOffset, dstData, dstOffset, length);\n    this.gl.bindBuffer(GL.COPY_READ_BUFFER, null);\n\n    // TODO - update local `data` if offsets are 0\n    return dstData;\n  }\n\n  /**\n   * Binds a buffer to a given binding point (target).\n   *   GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER take an index, and optionally a range.\n   *   - GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER need an index to affect state\n   *   - GL.UNIFORM_BUFFER: `offset` must be aligned to GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT.\n   *   - GL.UNIFORM_BUFFER: `size` must be a minimum of GL.UNIFORM_BLOCK_SIZE_DATA.\n   */\n  bind({\n    target = this.target, // target for the bind operation\n    index = this.accessor && this.accessor.index, // index = index of target (indexed bind point)\n    offset = 0,\n    size\n  } = {}) {\n    // NOTE: While GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER could\n    // be used as direct binding points, they will not affect transform feedback or\n    // uniform buffer state. Instead indexed bindings need to be made.\n    if (target === GL.UNIFORM_BUFFER || target === GL.TRANSFORM_FEEDBACK_BUFFER) {\n      if (size !== undefined) {\n        this.gl.bindBufferRange(target, index, this.handle, offset, size);\n      } else {\n        assert(offset === 0); // Make sure offset wasn't supplied\n        this.gl.bindBufferBase(target, index, this.handle);\n      }\n    } else {\n      this.gl.bindBuffer(target, this.handle);\n    }\n\n    return this;\n  }\n\n  unbind({target = this.target, index = this.accessor && this.accessor.index} = {}) {\n    const isIndexedBuffer = target === GL.UNIFORM_BUFFER || target === GL.TRANSFORM_FEEDBACK_BUFFER;\n    if (isIndexedBuffer) {\n      this.gl.bindBufferBase(target, index, null);\n    } else {\n      this.gl.bindBuffer(target, null);\n    }\n    return this;\n  }\n\n  // PROTECTED METHODS (INTENDED FOR USE BY OTHER FRAMEWORK CODE ONLY)\n\n  // Returns a short initial data array\n  getDebugData() {\n    if (!this.debugData) {\n      this.debugData = this.getData({length: Math.min(DEBUG_DATA_LENGTH, this.byteLength)});\n      return {data: this.debugData, changed: true};\n    }\n    return {data: this.debugData, changed: false};\n  }\n\n  invalidateDebugData() {\n    this.debugData = null;\n  }\n\n  // PRIVATE METHODS\n\n  // Allocate a new buffer and initialize to contents of typed array\n  _setData(data, offset = 0, byteLength = data.byteLength + offset) {\n    assert(ArrayBuffer.isView(data));\n\n    this._trackDeallocatedMemory();\n\n    const target = this._getTarget();\n    this.gl.bindBuffer(target, this.handle);\n    this.gl.bufferData(target, byteLength, this.usage);\n    this.gl.bufferSubData(target, offset, data);\n    this.gl.bindBuffer(target, null);\n\n    this.debugData = data.slice(0, DEBUG_DATA_LENGTH);\n    this.bytesUsed = byteLength;\n\n    this._trackAllocatedMemory(byteLength);\n\n    // infer GL type from supplied typed array\n    const type = getGLTypeFromTypedArray(data);\n    assert(type);\n    this.setAccessor(new Accessor(this.accessor, {type}));\n    return this;\n  }\n\n  // Allocate a GPU buffer of specified size.\n  _setByteLength(byteLength, usage = this.usage) {\n    assert(byteLength >= 0);\n\n    this._trackDeallocatedMemory();\n\n    // Workaround needed for Safari (#291):\n    // gl.bufferData with size equal to 0 crashes. Instead create zero sized array.\n    let data = byteLength;\n    if (byteLength === 0) {\n      data = new Float32Array(0);\n    }\n\n    const target = this._getTarget();\n    this.gl.bindBuffer(target, this.handle);\n    this.gl.bufferData(target, data, usage);\n    this.gl.bindBuffer(target, null);\n\n    this.usage = usage;\n    this.debugData = null;\n    this.bytesUsed = byteLength;\n\n    this._trackAllocatedMemory(byteLength);\n\n    return this;\n  }\n\n  // Binding a buffer for the first time locks the type\n  // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type\n  _getTarget() {\n    return this.gl.webgl2 ? GL.COPY_WRITE_BUFFER : this.target;\n  }\n\n  _getAvailableElementCount(srcByteOffset) {\n    const ArrayType = getTypedArrayFromGLType(this.accessor.type || GL.FLOAT, {clamped: false});\n    const sourceElementOffset = srcByteOffset / ArrayType.BYTES_PER_ELEMENT;\n    return this.getElementCount() - sourceElementOffset;\n  }\n\n  // Automatically infers type from typed array passed to setData\n  // Note: No longer that useful, since type is now autodeduced from the compiled shaders\n  _inferType(data) {\n    if (!this.accessor.type) {\n      this.setAccessor(new Accessor(this.accessor, {type: getGLTypeFromTypedArray(data)}));\n    }\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createBuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteBuffer(this.handle);\n    this._trackDeallocatedMemory();\n  }\n\n  _getParameter(pname) {\n    this.gl.bindBuffer(this.target, this.handle);\n    const value = this.gl.getBufferParameter(this.target, pname);\n    this.gl.bindBuffer(this.target, null);\n    return value;\n  }\n\n  // DEPRECATIONS - v7.0\n  get type() {\n    log.deprecated('Buffer.type', 'Buffer.accessor.type')();\n    return this.accessor.type;\n  }\n\n  get bytes() {\n    log.deprecated('Buffer.bytes', 'Buffer.byteLength')();\n    return this.byteLength;\n  }\n\n  // DEPRECATIONS - v6.0\n  // Deprecated in v6.x, but not warnings not properly implemented\n  setByteLength(byteLength) {\n    log.deprecated('setByteLength', 'reallocate')();\n    return this.reallocate(byteLength);\n  }\n\n  // Deprecated in v6.x, but not warnings not properly implemented\n  updateAccessor(opts) {\n    log.deprecated('updateAccessor(...)', 'setAccessor(new Accessor(buffer.accessor, ...)')();\n    this.accessor = new Accessor(this.accessor, opts);\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}