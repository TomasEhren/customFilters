{"ast":null,"code":"export function filename(url) {\n  const slashIndex = url && url.lastIndexOf('/');\n  return slashIndex >= 0 ? url.substr(slashIndex + 1) : '';\n}\nexport function dirname(url) {\n  const slashIndex = url && url.lastIndexOf('/');\n  return slashIndex >= 0 ? url.substr(0, slashIndex) : '';\n}\nexport function join() {\n  for (var _len = arguments.length, parts = new Array(_len), _key = 0; _key < _len; _key++) {\n    parts[_key] = arguments[_key];\n  }\n\n  const separator = '/';\n  parts = parts.map((part, index) => {\n    if (index) {\n      part = part.replace(new RegExp(\"^\".concat(separator)), '');\n    }\n\n    if (index !== parts.length - 1) {\n      part = part.replace(new RegExp(\"\".concat(separator, \"$\")), '');\n    }\n\n    return part;\n  });\n  return parts.join(separator);\n}","map":{"version":3,"mappings":"AAMA,OAAO,SAASA,QAAT,CAAkBC,GAAlB,EAAuC;EAC5C,MAAMC,UAAU,GAAGD,GAAG,IAAIA,GAAG,CAACE,WAAJF,CAAgB,GAAhBA,CAA1B;EACA,OAAOC,UAAU,IAAI,CAAdA,GAAkBD,GAAG,CAACG,MAAJH,CAAYC,UAAD,GAAyB,CAApCD,CAAlBC,GAA2D,EAAlE;AACD;AAMD,OAAO,SAASG,OAAT,CAAiBJ,GAAjB,EAAsC;EAC3C,MAAMC,UAAU,GAAGD,GAAG,IAAIA,GAAG,CAACE,WAAJF,CAAgB,GAAhBA,CAA1B;EACA,OAAOC,UAAU,IAAI,CAAdA,GAAkBD,GAAG,CAACG,MAAJH,CAAW,CAAXA,EAAcC,UAAdD,CAAlBC,GAAwD,EAA/D;AACD;AAMD,OAAO,SAASI,IAAT,GAA0C;EAAA,kCAAzBC,KAAyB;IAAzBA,KAAyB;EAAA;;EAC/C,MAAMC,SAAS,GAAG,GAAlB;EACAD,KAAK,GAAGA,KAAK,CAACE,GAANF,CAAU,CAACG,IAAD,EAAOC,KAAP,KAAiB;IACjC,IAAIA,KAAJ,EAAW;MACTD,IAAI,GAAGA,IAAI,CAACE,OAALF,CAAa,IAAIG,MAAJ,YAAeL,SAAf,EAAbE,EAA0C,EAA1CA,CAAPA;IACD;;IACD,IAAIC,KAAK,KAAKJ,KAAK,CAACO,MAANP,GAAe,CAA7B,EAAgC;MAC9BG,IAAI,GAAGA,IAAI,CAACE,OAALF,CAAa,IAAIG,MAAJ,WAAcL,SAAd,OAAbE,EAA0C,EAA1CA,CAAPA;IACD;;IACD,OAAOA,IAAP;EAPM,EAARH;EASA,OAAOA,KAAK,CAACD,IAANC,CAAWC,SAAXD,CAAP;AACD","names":["filename","url","slashIndex","lastIndexOf","substr","dirname","join","parts","separator","map","part","index","replace","RegExp","length"],"sources":["../../../../src/lib/path-utils/path.ts"],"sourcesContent":["// Beginning of a minimal implementation of the Node.js path API, that doesn't pull in big polyfills.\n\n/**\n * Replacement for Node.js path.filename\n * @param url\n */\nexport function filename(url: string): string {\n  const slashIndex = url && url.lastIndexOf('/');\n  return slashIndex >= 0 ? url.substr((slashIndex as number) + 1) : '';\n}\n\n/**\n * Replacement for Node.js path.dirname\n * @param url\n */\nexport function dirname(url: string): string {\n  const slashIndex = url && url.lastIndexOf('/');\n  return slashIndex >= 0 ? url.substr(0, slashIndex as number) : '';\n}\n\n/**\n * Replacement for Node.js path.join\n * @param parts\n */\nexport function join(...parts: string[]): string {\n  const separator = '/';\n  parts = parts.map((part, index) => {\n    if (index) {\n      part = part.replace(new RegExp(`^${separator}`), '');\n    }\n    if (index !== parts.length - 1) {\n      part = part.replace(new RegExp(`${separator}$`), '');\n    }\n    return part;\n  });\n  return parts.join(separator);\n}\n"]},"metadata":{},"sourceType":"module"}