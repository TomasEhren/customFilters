{"ast":null,"code":"import { GL } from '../constants';\nexport function getPrimitiveModeType(mode) {\n  switch (mode) {\n    case GL.POINTS:\n      return GL.POINTS;\n\n    case GL.LINES:\n    case GL.LINE_STRIP:\n    case GL.LINE_LOOP:\n      return GL.LINES;\n\n    case GL.TRIANGLES:\n    case GL.TRIANGLE_STRIP:\n    case GL.TRIANGLE_FAN:\n      return GL.TRIANGLES;\n\n    default:\n      throw new Error('Unknown primitive mode');\n  }\n}\nexport function isPrimitiveModeExpandable(mode) {\n  switch (mode) {\n    case GL.LINE_STRIP:\n    case GL.LINE_LOOP:\n    case GL.TRIANGLE_STRIP:\n    case GL.TRIANGLE_FAN:\n      return true;\n\n    default:\n      return false;\n  }\n}\nexport function getPrimitiveModeExpandedLength(mode, length) {\n  switch (mode) {\n    case GL.POINTS:\n      return length;\n\n    case GL.LINES:\n      return length;\n\n    case GL.LINE_STRIP:\n      return length;\n\n    case GL.LINE_LOOP:\n      return length + 1;\n\n    case GL.TRIANGLES:\n      return length;\n\n    case GL.TRIANGLE_STRIP:\n    case GL.TRIANGLE_FAN:\n      return (length - 2) * 3;\n\n    default:\n      throw new Error('Unknown length');\n  }\n}","map":{"version":3,"mappings":"AAAA,SAAQA,EAAR,QAAiB,cAAjB;AAUA,OAAO,SAASC,oBAAT,CAA8BC,IAA9B,EAAqD;EAC1D,QAAQA,IAAR;IACE,KAAKF,EAAE,CAACG,MAAR;MACE,OAAOH,EAAE,CAACG,MAAV;;IACF,KAAKH,EAAE,CAACI,KAAR;IACA,KAAKJ,EAAE,CAACK,UAAR;IACA,KAAKL,EAAE,CAACM,SAAR;MACE,OAAON,EAAE,CAACI,KAAV;;IACF,KAAKJ,EAAE,CAACO,SAAR;IACA,KAAKP,EAAE,CAACQ,cAAR;IACA,KAAKR,EAAE,CAACS,YAAR;MACE,OAAOT,EAAE,CAACO,SAAV;;IACF;MACE,MAAM,IAAIG,KAAJ,CAAU,wBAAV,CAAN;EAZJ;AAcD;AAKD,OAAO,SAASC,yBAAT,CAAmCT,IAAnC,EAA0D;EAC/D,QAAQA,IAAR;IACE,KAAKF,EAAE,CAACK,UAAR;IACA,KAAKL,EAAE,CAACM,SAAR;IACA,KAAKN,EAAE,CAACQ,cAAR;IACA,KAAKR,EAAE,CAACS,YAAR;MACE,OAAO,IAAP;;IACF;MACE,OAAO,KAAP;EAPJ;AASD;AAOD,OAAO,SAASG,8BAAT,CAAwCV,IAAxC,EAAsDW,MAAtD,EAA8E;EACnF,QAAQX,IAAR;IACE,KAAKF,EAAE,CAACG,MAAR;MACE,OAAOU,MAAP;;IACF,KAAKb,EAAE,CAACI,KAAR;MACE,OAAOS,MAAP;;IACF,KAAKb,EAAE,CAACK,UAAR;MACE,OAAOQ,MAAP;;IACF,KAAKb,EAAE,CAACM,SAAR;MACE,OAAOO,MAAM,GAAG,CAAhB;;IACF,KAAKb,EAAE,CAACO,SAAR;MACE,OAAOM,MAAP;;IACF,KAAKb,EAAE,CAACQ,cAAR;IACA,KAAKR,EAAE,CAACS,YAAR;MACE,OAAO,CAACI,MAAM,GAAG,CAAV,IAAe,CAAtB;;IACF;MACE,MAAM,IAAIH,KAAJ,CAAU,gBAAV,CAAN;EAfJ;AAiBD","names":["GL","getPrimitiveModeType","mode","POINTS","LINES","LINE_STRIP","LINE_LOOP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","Error","isPrimitiveModeExpandable","getPrimitiveModeExpandedLength","length"],"sources":["../../../../src/geometry/primitives/modes.ts"],"sourcesContent":["import {GL} from '../constants';\n\n/**\n * Different methods of working with geometries depending on glType\n /**\n\n/**\n * @param mode\n * @returns draw points | lines | triangles\n */\nexport function getPrimitiveModeType(mode?: number): number {\n  switch (mode) {\n    case GL.POINTS: // draw single points.\n      return GL.POINTS;\n    case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n    case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n    case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n      return GL.LINES;\n    case GL.TRIANGLES:\n    case GL.TRIANGLE_STRIP:\n    case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n      return GL.TRIANGLES;\n    default:\n      throw new Error('Unknown primitive mode');\n  }\n}\n/**\n * @param mode\n * @returns true | false\n */\nexport function isPrimitiveModeExpandable(mode: number): boolean {\n  switch (mode) {\n    case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n    case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n    case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n    case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n      return true;\n    default:\n      return false;\n  }\n}\n/**\n * Returns new length depends on glType\n * @param mode\n * @param length\n * @returns new length\n */\nexport function getPrimitiveModeExpandedLength(mode: number, length: number): number {\n  switch (mode) {\n    case GL.POINTS: // draw single points.\n      return length;\n    case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n      return length;\n    case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n      return length;\n    case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n      return length + 1;\n    case GL.TRIANGLES: // draw triangles. Each set of three vertices creates a separate triangle.\n      return length;\n    case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n    case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n      return (length - 2) * 3;\n    default:\n      throw new Error('Unknown length');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}