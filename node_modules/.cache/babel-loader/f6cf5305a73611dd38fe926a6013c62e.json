{"ast":null,"code":"import { loadLibrary } from '@loaders.gl/worker-utils';\nconst DRACO_VERSION = '1.4.1';\nconst DRACO_JS_DECODER_URL = \"https://www.gstatic.com/draco/versioned/decoders/\".concat(DRACO_VERSION, \"/draco_decoder.js\");\nconst DRACO_WASM_WRAPPER_URL = \"https://www.gstatic.com/draco/versioned/decoders/\".concat(DRACO_VERSION, \"/draco_wasm_wrapper.js\");\nconst DRACO_WASM_DECODER_URL = \"https://www.gstatic.com/draco/versioned/decoders/\".concat(DRACO_VERSION, \"/draco_decoder.wasm\");\nconst DRACO_ENCODER_URL = \"https://raw.githubusercontent.com/google/draco/\".concat(DRACO_VERSION, \"/javascript/draco_encoder.js\");\nlet loadDecoderPromise;\nlet loadEncoderPromise;\nexport async function loadDracoDecoderModule(options) {\n  const modules = options.modules || {};\n\n  if (modules.draco3d) {\n    loadDecoderPromise = loadDecoderPromise || modules.draco3d.createDecoderModule({}).then(draco => {\n      return {\n        draco\n      };\n    });\n  } else {\n    loadDecoderPromise = loadDecoderPromise || loadDracoDecoder(options);\n  }\n\n  return await loadDecoderPromise;\n}\nexport async function loadDracoEncoderModule(options) {\n  const modules = options.modules || {};\n\n  if (modules.draco3d) {\n    loadEncoderPromise = loadEncoderPromise || modules.draco3d.createEncoderModule({}).then(draco => {\n      return {\n        draco\n      };\n    });\n  } else {\n    loadEncoderPromise = loadEncoderPromise || loadDracoEncoder(options);\n  }\n\n  return await loadEncoderPromise;\n}\n\nasync function loadDracoDecoder(options) {\n  let DracoDecoderModule;\n  let wasmBinary;\n\n  switch (options.draco && options.draco.decoderType) {\n    case 'js':\n      DracoDecoderModule = await loadLibrary(DRACO_JS_DECODER_URL, 'draco', options);\n      break;\n\n    case 'wasm':\n    default:\n      [DracoDecoderModule, wasmBinary] = await Promise.all([await loadLibrary(DRACO_WASM_WRAPPER_URL, 'draco', options), await loadLibrary(DRACO_WASM_DECODER_URL, 'draco', options)]);\n  }\n\n  DracoDecoderModule = DracoDecoderModule || globalThis.DracoDecoderModule;\n  return await initializeDracoDecoder(DracoDecoderModule, wasmBinary);\n}\n\nfunction initializeDracoDecoder(DracoDecoderModule, wasmBinary) {\n  const options = {};\n\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise(resolve => {\n    DracoDecoderModule({ ...options,\n      onModuleLoaded: draco => resolve({\n        draco\n      })\n    });\n  });\n}\n\nasync function loadDracoEncoder(options) {\n  let DracoEncoderModule = await loadLibrary(DRACO_ENCODER_URL, 'draco', options);\n  DracoEncoderModule = DracoEncoderModule || globalThis.DracoEncoderModule;\n  return new Promise(resolve => {\n    DracoEncoderModule({\n      onModuleLoaded: draco => resolve({\n        draco\n      })\n    });\n  });\n}","map":{"version":3,"mappings":"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","names":["loadLibrary","DRACO_VERSION","DRACO_JS_DECODER_URL","DRACO_WASM_WRAPPER_URL","DRACO_WASM_DECODER_URL","DRACO_ENCODER_URL","loadDecoderPromise","loadEncoderPromise","loadDracoDecoderModule","options","modules","draco3d","createDecoderModule","then","draco","loadDracoDecoder","loadDracoEncoderModule","createEncoderModule","loadDracoEncoder","DracoDecoderModule","wasmBinary","decoderType","Promise","all","globalThis","initializeDracoDecoder","resolve","onModuleLoaded","DracoEncoderModule"],"sources":["../../../src/lib/draco-module-loader.ts"],"sourcesContent":["// Dynamic DRACO module loading inspired by THREE.DRACOLoader\n// https://github.com/mrdoob/three.js/blob/398c4f39ebdb8b23eefd4a7a5ec49ec0c96c7462/examples/jsm/loaders/DRACOLoader.js\n// by Don McCurdy / https://www.donmccurdy.com / MIT license\n\nimport {loadLibrary} from '@loaders.gl/worker-utils';\n\nconst DRACO_VERSION = '1.4.1';\nconst DRACO_JS_DECODER_URL = `https://www.gstatic.com/draco/versioned/decoders/${DRACO_VERSION}/draco_decoder.js`;\nconst DRACO_WASM_WRAPPER_URL = `https://www.gstatic.com/draco/versioned/decoders/${DRACO_VERSION}/draco_wasm_wrapper.js`;\nconst DRACO_WASM_DECODER_URL = `https://www.gstatic.com/draco/versioned/decoders/${DRACO_VERSION}/draco_decoder.wasm`;\n\nconst DRACO_ENCODER_URL = `https://raw.githubusercontent.com/google/draco/${DRACO_VERSION}/javascript/draco_encoder.js`;\n\nlet loadDecoderPromise;\nlet loadEncoderPromise;\n\nexport async function loadDracoDecoderModule(options) {\n  const modules = options.modules || {};\n\n  // Check if a bundled draco3d library has been supplied by application\n  if (modules.draco3d) {\n    loadDecoderPromise =\n      loadDecoderPromise ||\n      modules.draco3d.createDecoderModule({}).then((draco) => {\n        return {draco};\n      });\n  } else {\n    // If not, dynamically load the WASM script from our CDN\n    loadDecoderPromise = loadDecoderPromise || loadDracoDecoder(options);\n  }\n  return await loadDecoderPromise;\n}\n\nexport async function loadDracoEncoderModule(options) {\n  const modules = options.modules || {};\n\n  // Check if a bundled draco3d library has been supplied by application\n  if (modules.draco3d) {\n    loadEncoderPromise =\n      loadEncoderPromise ||\n      modules.draco3d.createEncoderModule({}).then((draco) => {\n        return {draco};\n      });\n  } else {\n    // If not, dynamically load the WASM script from our CDN\n    loadEncoderPromise = loadEncoderPromise || loadDracoEncoder(options);\n  }\n  return await loadEncoderPromise;\n}\n\n// DRACO DECODER LOADING\n\nasync function loadDracoDecoder(options) {\n  let DracoDecoderModule;\n  let wasmBinary;\n  switch (options.draco && options.draco.decoderType) {\n    case 'js':\n      DracoDecoderModule = await loadLibrary(DRACO_JS_DECODER_URL, 'draco', options);\n      break;\n\n    case 'wasm':\n    default:\n      [DracoDecoderModule, wasmBinary] = await Promise.all([\n        await loadLibrary(DRACO_WASM_WRAPPER_URL, 'draco', options),\n        await loadLibrary(DRACO_WASM_DECODER_URL, 'draco', options)\n      ]);\n  }\n  // Depends on how import happened...\n  // @ts-ignore\n  DracoDecoderModule = DracoDecoderModule || globalThis.DracoDecoderModule;\n  return await initializeDracoDecoder(DracoDecoderModule, wasmBinary);\n}\n\nfunction initializeDracoDecoder(DracoDecoderModule, wasmBinary) {\n  const options: {wasmBinary?: any} = {};\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise((resolve) => {\n    DracoDecoderModule({\n      ...options,\n      onModuleLoaded: (draco) => resolve({draco}) // Module is Promise-like. Wrap in object to avoid loop.\n    });\n  });\n}\n\n// ENCODER\n\nasync function loadDracoEncoder(options) {\n  let DracoEncoderModule = await loadLibrary(DRACO_ENCODER_URL, 'draco', options);\n  // @ts-ignore\n  DracoEncoderModule = DracoEncoderModule || globalThis.DracoEncoderModule;\n\n  return new Promise((resolve) => {\n    DracoEncoderModule({\n      onModuleLoaded: (draco) => resolve({draco}) // Module is Promise-like. Wrap in object to avoid loop.\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}