{"ast":null,"code":"import { ImageLoader } from '@loaders.gl/images';\nimport { getImageUrls } from './load-image';\nimport { deepLoad } from './deep-load';\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851a;\nconst CUBE_FACES = [{\n  face: GL_TEXTURE_CUBE_MAP_POSITIVE_X,\n  direction: 'right',\n  axis: 'x',\n  sign: 'positive'\n}, {\n  face: GL_TEXTURE_CUBE_MAP_NEGATIVE_X,\n  direction: 'left',\n  axis: 'x',\n  sign: 'negative'\n}, {\n  face: GL_TEXTURE_CUBE_MAP_POSITIVE_Y,\n  direction: 'top',\n  axis: 'y',\n  sign: 'positive'\n}, {\n  face: GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,\n  direction: 'bottom',\n  axis: 'y',\n  sign: 'negative'\n}, {\n  face: GL_TEXTURE_CUBE_MAP_POSITIVE_Z,\n  direction: 'front',\n  axis: 'z',\n  sign: 'positive'\n}, {\n  face: GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,\n  direction: 'back',\n  axis: 'z',\n  sign: 'negative'\n}];\nexport async function getImageCubeUrls(getUrl, options) {\n  const urls = {};\n  const promises = [];\n  let index = 0;\n\n  for (let i = 0; i < CUBE_FACES.length; ++i) {\n    const face = CUBE_FACES[index];\n    const promise = getImageUrls(getUrl, options, { ...face,\n      index: index++\n    }).then(url => {\n      urls[face.face] = url;\n    });\n    promises.push(promise);\n  }\n\n  await Promise.all(promises);\n  return urls;\n}\nexport async function loadImageTextureCube(getUrl) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const urls = await getImageCubeUrls(getUrl, options);\n  return await deepLoad(urls, ImageLoader.parse, options);\n}","map":{"version":3,"mappings":"AACA,SAAQA,WAAR,QAA0B,oBAA1B;AAEA,SAAQC,YAAR,QAA2B,cAA3B;AACA,SAAQC,QAAR,QAAuB,aAAvB;AAGA,MAAMC,8BAA8B,GAAG,MAAvC;AACA,MAAMC,8BAA8B,GAAG,MAAvC;AACA,MAAMC,8BAA8B,GAAG,MAAvC;AACA,MAAMC,8BAA8B,GAAG,MAAvC;AACA,MAAMC,8BAA8B,GAAG,MAAvC;AACA,MAAMC,8BAA8B,GAAG,MAAvC;AAEA,MAAMC,UAAU,GAAG,CACjB;EAACC,IAAI,EAAEP,8BAAP;EAAuCQ,SAAS,EAAE,OAAlD;EAA2DC,IAAI,EAAE,GAAjE;EAAsEC,IAAI,EAAE;AAA5E,CADiB,EAEjB;EAACH,IAAI,EAAEN,8BAAP;EAAuCO,SAAS,EAAE,MAAlD;EAA0DC,IAAI,EAAE,GAAhE;EAAqEC,IAAI,EAAE;AAA3E,CAFiB,EAGjB;EAACH,IAAI,EAAEL,8BAAP;EAAuCM,SAAS,EAAE,KAAlD;EAAyDC,IAAI,EAAE,GAA/D;EAAoEC,IAAI,EAAE;AAA1E,CAHiB,EAIjB;EAACH,IAAI,EAAEJ,8BAAP;EAAuCK,SAAS,EAAE,QAAlD;EAA4DC,IAAI,EAAE,GAAlE;EAAuEC,IAAI,EAAE;AAA7E,CAJiB,EAKjB;EAACH,IAAI,EAAEH,8BAAP;EAAuCI,SAAS,EAAE,OAAlD;EAA2DC,IAAI,EAAE,GAAjE;EAAsEC,IAAI,EAAE;AAA5E,CALiB,EAMjB;EAACH,IAAI,EAAEF,8BAAP;EAAuCG,SAAS,EAAE,MAAlD;EAA0DC,IAAI,EAAE,GAAhE;EAAqEC,IAAI,EAAE;AAA3E,CANiB,CAAnB;AAoBA,OAAO,eAAeC,gBAAf,CAAgCC,MAAhC,EAAgDC,OAAhD,EAAqE;EAE1E,MAAMC,IAAuC,GAAG,EAAhD;EACA,MAAMC,QAAwB,GAAG,EAAjC;EAEA,IAAIC,KAAK,GAAG,CAAZ;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,UAAU,CAACY,MAA/B,EAAuC,EAAED,CAAzC,EAA4C;IAC1C,MAAMV,IAAI,GAAGD,UAAU,CAACU,KAAD,CAAvB;IACA,MAAMG,OAAO,GAAGrB,YAAY,CAACc,MAAD,EAASC,OAAT,EAAkB,EAAC,GAAGN,IAAJ;MAAUS,KAAK,EAAEA,KAAK;IAAtB,CAAlB,CAAZlB,CAAyDsB,IAAzDtB,CAA+DuB,GAAD,IAAS;MACrFP,IAAI,CAACP,IAAI,CAACA,IAAN,CAAJO,GAAkBO,GAAlBP;IADc,EAAhB;IAGAC,QAAQ,CAACO,IAATP,CAAcI,OAAdJ;EACD;;EAED,MAAMQ,OAAO,CAACC,GAARD,CAAYR,QAAZQ,CAAN;EAEA,OAAOT,IAAP;AACD;AAID,OAAO,eAAeW,oBAAf,CACLb,MADK,EAGsB;EAAA,IAD3BC,OAC2B,uEADjB,EACiB;EAC3B,MAAMC,IAAI,GAAG,MAAMH,gBAAgB,CAACC,MAAD,EAASC,OAAT,CAAnC;EACA,OAAQ,MAAMd,QAAQ,CAACe,IAAD,EAAOjB,WAAW,CAAC6B,KAAnB,EAA0Bb,OAA1B,CAAtB;AACD","names":["ImageLoader","getImageUrls","deepLoad","GL_TEXTURE_CUBE_MAP_POSITIVE_X","GL_TEXTURE_CUBE_MAP_NEGATIVE_X","GL_TEXTURE_CUBE_MAP_POSITIVE_Y","GL_TEXTURE_CUBE_MAP_NEGATIVE_Y","GL_TEXTURE_CUBE_MAP_POSITIVE_Z","GL_TEXTURE_CUBE_MAP_NEGATIVE_Z","CUBE_FACES","face","direction","axis","sign","getImageCubeUrls","getUrl","options","urls","promises","index","i","length","promise","then","url","push","Promise","all","loadImageTextureCube","parse"],"sources":["../../../../src/lib/texture-api/load-image-cube.ts"],"sourcesContent":["// loaders.gl, MIT license\nimport {ImageLoader} from '@loaders.gl/images';\nimport type {GetUrl, UrlOptions} from './texture-api-types';\nimport {getImageUrls} from './load-image';\nimport {deepLoad} from './deep-load';\n\n// Returned map will be have keys corresponding to GL cubemap constants\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851a;\n\nconst CUBE_FACES = [\n  {face: GL_TEXTURE_CUBE_MAP_POSITIVE_X, direction: 'right', axis: 'x', sign: 'positive'},\n  {face: GL_TEXTURE_CUBE_MAP_NEGATIVE_X, direction: 'left', axis: 'x', sign: 'negative'},\n  {face: GL_TEXTURE_CUBE_MAP_POSITIVE_Y, direction: 'top', axis: 'y', sign: 'positive'},\n  {face: GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, direction: 'bottom', axis: 'y', sign: 'negative'},\n  {face: GL_TEXTURE_CUBE_MAP_POSITIVE_Z, direction: 'front', axis: 'z', sign: 'positive'},\n  {face: GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, direction: 'back', axis: 'z', sign: 'negative'}\n];\n\nexport type ImageCubeTexture = {\n  GL_TEXTURE_CUBE_MAP_POSITIVE_X: any;\n  GL_TEXTURE_CUBE_MAP_NEGATIVE_X: any;\n  GL_TEXTURE_CUBE_MAP_POSITIVE_Y: any;\n  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y: any;\n  GL_TEXTURE_CUBE_MAP_POSITIVE_Z: any;\n  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z: any;\n};\n\n// Returns an object with six key-value pairs containing the urls (or url mip arrays)\n// for each cube face\nexport async function getImageCubeUrls(getUrl: GetUrl, options: UrlOptions) {\n  // Calculate URLs\n  const urls: Record<number, string | string[]> = {};\n  const promises: Promise<any>[] = [];\n\n  let index = 0;\n  for (let i = 0; i < CUBE_FACES.length; ++i) {\n    const face = CUBE_FACES[index];\n    const promise = getImageUrls(getUrl, options, {...face, index: index++}).then((url) => {\n      urls[face.face] = url;\n    });\n    promises.push(promise);\n  }\n\n  await Promise.all(promises);\n\n  return urls;\n}\n\n// Returns an object with six key-value pairs containing the images (or image mip arrays)\n// for each cube face\nexport async function loadImageTextureCube(\n  getUrl: GetUrl,\n  options = {}\n): Promise<ImageCubeTexture> {\n  const urls = await getImageCubeUrls(getUrl, options);\n  return (await deepLoad(urls, ImageLoader.parse, options)) as ImageCubeTexture;\n}\n"]},"metadata":{},"sourceType":"module"}