{"ast":null,"code":"import { isResponse, isBlob } from '../../javascript-utils/is-type';\nimport { parseMIMEType, parseMIMETypeFromURL } from './mime-type-utils';\nconst QUERY_STRING_PATTERN = /\\?.*/;\nexport function getResourceUrlAndType(resource) {\n  if (isResponse(resource)) {\n    const url = stripQueryString(resource.url || '');\n    const contentTypeHeader = resource.headers.get('content-type') || '';\n    return {\n      url,\n      type: parseMIMEType(contentTypeHeader) || parseMIMETypeFromURL(url)\n    };\n  }\n\n  if (isBlob(resource)) {\n    return {\n      url: stripQueryString(resource.name || ''),\n      type: resource.type || ''\n    };\n  }\n\n  if (typeof resource === 'string') {\n    return {\n      url: stripQueryString(resource),\n      type: parseMIMETypeFromURL(resource)\n    };\n  }\n\n  return {\n    url: '',\n    type: ''\n  };\n}\nexport function getResourceContentLength(resource) {\n  if (isResponse(resource)) {\n    return resource.headers['content-length'] || -1;\n  }\n\n  if (isBlob(resource)) {\n    return resource.size;\n  }\n\n  if (typeof resource === 'string') {\n    return resource.length;\n  }\n\n  if (resource instanceof ArrayBuffer) {\n    return resource.byteLength;\n  }\n\n  if (ArrayBuffer.isView(resource)) {\n    return resource.byteLength;\n  }\n\n  return -1;\n}\n\nfunction stripQueryString(url) {\n  return url.replace(QUERY_STRING_PATTERN, '');\n}","map":{"version":3,"mappings":"AAAA,SAAQA,UAAR,EAAoBC,MAApB,QAAiC,gCAAjC;AACA,SAAQC,aAAR,EAAuBC,oBAAvB,QAAkD,mBAAlD;AAEA,MAAMC,oBAAoB,GAAG,MAA7B;AAUA,OAAO,SAASC,qBAAT,CAA+BC,QAA/B,EAA2E;EAEhF,IAAIN,UAAU,CAACM,QAAD,CAAd,EAA0B;IACxB,MAAMC,GAAG,GAAGC,gBAAgB,CAACF,QAAQ,CAACC,GAATD,IAAgB,EAAjB,CAA5B;IACA,MAAMG,iBAAiB,GAAGH,QAAQ,CAACI,OAATJ,CAAiBK,GAAjBL,CAAqB,cAArBA,KAAwC,EAAlE;IACA,OAAO;MACLC,GADK;MAELK,IAAI,EAAEV,aAAa,CAACO,iBAAD,CAAbP,IAAoCC,oBAAoB,CAACI,GAAD;IAFzD,CAAP;EAID;;EAGD,IAAIN,MAAM,CAACK,QAAD,CAAV,EAAsB;IACpB,OAAO;MAGLC,GAAG,EAAEC,gBAAgB,CAACF,QAAQ,CAACO,IAATP,IAAiB,EAAlB,CAHhB;MAILM,IAAI,EAAEN,QAAQ,CAACM,IAATN,IAAiB;IAJlB,CAAP;EAMD;;EAED,IAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;IAChC,OAAO;MAELC,GAAG,EAAEC,gBAAgB,CAACF,QAAD,CAFhB;MAILM,IAAI,EAAET,oBAAoB,CAACG,QAAD;IAJrB,CAAP;EAMD;;EAGD,OAAO;IACLC,GAAG,EAAE,EADA;IAELK,IAAI,EAAE;EAFD,CAAP;AAID;AASD,OAAO,SAASE,wBAAT,CAAkCR,QAAlC,EAAyD;EAC9D,IAAIN,UAAU,CAACM,QAAD,CAAd,EAA0B;IACxB,OAAOA,QAAQ,CAACI,OAATJ,CAAiB,gBAAjBA,KAAsC,CAAC,CAA9C;EACD;;EACD,IAAIL,MAAM,CAACK,QAAD,CAAV,EAAsB;IACpB,OAAOA,QAAQ,CAACS,IAAhB;EACD;;EACD,IAAI,OAAOT,QAAP,KAAoB,QAAxB,EAAkC;IAEhC,OAAOA,QAAQ,CAACU,MAAhB;EACD;;EACD,IAAIV,QAAQ,YAAYW,WAAxB,EAAqC;IACnC,OAAOX,QAAQ,CAACY,UAAhB;EACD;;EACD,IAAID,WAAW,CAACE,MAAZF,CAAmBX,QAAnBW,CAAJ,EAAkC;IAChC,OAAOX,QAAQ,CAACY,UAAhB;EACD;;EACD,OAAO,CAAC,CAAR;AACD;;AAED,SAASV,gBAAT,CAA0BD,GAA1B,EAA+B;EAC7B,OAAOA,GAAG,CAACa,OAAJb,CAAYH,oBAAZG,EAAkC,EAAlCA,CAAP;AACD","names":["isResponse","isBlob","parseMIMEType","parseMIMETypeFromURL","QUERY_STRING_PATTERN","getResourceUrlAndType","resource","url","stripQueryString","contentTypeHeader","headers","get","type","name","getResourceContentLength","size","length","ArrayBuffer","byteLength","isView","replace"],"sources":["../../../../src/lib/utils/resource-utils.ts"],"sourcesContent":["import {isResponse, isBlob} from '../../javascript-utils/is-type';\nimport {parseMIMEType, parseMIMETypeFromURL} from './mime-type-utils';\n\nconst QUERY_STRING_PATTERN = /\\?.*/;\n\n/**\n * Returns an object with `url` and (MIME) `type` fields\n * If it cannot determine url or type, the corresponding value will be an empty string\n *\n * @param resource Any type, but only Responses, string URLs and data URLs are processed\n *\n * @todo string parameters are assumed to be URLs\n */\nexport function getResourceUrlAndType(resource: any): {url: string; type: string} {\n  // If resource is a response, it contains the information directly\n  if (isResponse(resource)) {\n    const url = stripQueryString(resource.url || '');\n    const contentTypeHeader = resource.headers.get('content-type') || '';\n    return {\n      url,\n      type: parseMIMEType(contentTypeHeader) || parseMIMETypeFromURL(url)\n    };\n  }\n\n  // If the resource is a Blob or a File (subclass of Blob)\n  if (isBlob(resource)) {\n    return {\n      // File objects have a \"name\" property. Blob objects don't have any\n      // url (name) information\n      url: stripQueryString(resource.name || ''),\n      type: resource.type || ''\n    };\n  }\n\n  if (typeof resource === 'string') {\n    return {\n      // TODO this could mess up data URL but it doesn't matter as it is just used for inference\n      url: stripQueryString(resource),\n      // If a data url\n      type: parseMIMETypeFromURL(resource)\n    };\n  }\n\n  // Unknown\n  return {\n    url: '',\n    type: ''\n  };\n}\n\n/**\n  * Returns (approximate) content length for a resource if it can be determined.\n  * Returns -1 if content length cannot be determined.\n  * @param resource\n\n  * @note string parameters are NOT assumed to be URLs\n  */\nexport function getResourceContentLength(resource: any): number {\n  if (isResponse(resource)) {\n    return resource.headers['content-length'] || -1;\n  }\n  if (isBlob(resource)) {\n    return resource.size;\n  }\n  if (typeof resource === 'string') {\n    // TODO - handle data URL?\n    return resource.length;\n  }\n  if (resource instanceof ArrayBuffer) {\n    return resource.byteLength;\n  }\n  if (ArrayBuffer.isView(resource)) {\n    return resource.byteLength;\n  }\n  return -1;\n}\n\nfunction stripQueryString(url) {\n  return url.replace(QUERY_STRING_PATTERN, '');\n}\n"]},"metadata":{},"sourceType":"module"}