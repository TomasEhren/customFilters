{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { createTexture, destroyTexture } from '../utils/texture';\nimport { deepEqual } from '../utils/deep-equal';\nvar TYPE_DEFINITIONS = {\n  boolean: {\n    validate: function validate(value, propType) {\n      return true;\n    },\n    equal: function equal(value1, value2, propType) {\n      return Boolean(value1) === Boolean(value2);\n    }\n  },\n  number: {\n    validate: function validate(value, propType) {\n      return Number.isFinite(value) && (!('max' in propType) || value <= propType.max) && (!('min' in propType) || value >= propType.min);\n    }\n  },\n  color: {\n    validate: function validate(value, propType) {\n      return propType.optional && !value || isArray(value) && (value.length === 3 || value.length === 4);\n    },\n    equal: function equal(value1, value2, propType) {\n      return arrayEqual(value1, value2);\n    }\n  },\n  accessor: {\n    validate: function validate(value, propType) {\n      var valueType = getTypeOf(value);\n      return valueType === 'function' || valueType === getTypeOf(propType.value);\n    },\n    equal: function equal(value1, value2, propType) {\n      if (typeof value2 === 'function') {\n        return true;\n      }\n\n      return arrayEqual(value1, value2);\n    }\n  },\n  array: {\n    validate: function validate(value, propType) {\n      return propType.optional && !value || isArray(value);\n    },\n    equal: function equal(value1, value2, propType) {\n      return propType.compare ? arrayEqual(value1, value2) : value1 === value2;\n    }\n  },\n  object: {\n    equal: function equal(value1, value2, propType) {\n      return propType.compare ? deepEqual(value1, value2) : value1 === value2;\n    }\n  },\n  function: {\n    validate: function validate(value, propType) {\n      return propType.optional && !value || typeof value === 'function';\n    },\n    equal: function equal(value1, value2, propType) {\n      return !propType.compare || value1 === value2;\n    }\n  },\n  data: {\n    transform: function transform(value, propType, component) {\n      var dataTransform = component.props.dataTransform;\n      return dataTransform && value ? dataTransform(value) : value;\n    }\n  },\n  image: {\n    transform: function transform(value, propType, component) {\n      return createTexture(component, value);\n    },\n    release: function release(value) {\n      destroyTexture(value);\n    }\n  }\n};\n\nfunction arrayEqual(array1, array2) {\n  if (array1 === array2) {\n    return true;\n  }\n\n  if (!isArray(array1) || !isArray(array2)) {\n    return false;\n  }\n\n  var len = array1.length;\n\n  if (len !== array2.length) {\n    return false;\n  }\n\n  for (var i = 0; i < len; i++) {\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function parsePropTypes(propDefs) {\n  var propTypes = {};\n  var defaultProps = {};\n  var deprecatedProps = {};\n\n  for (var _i = 0, _Object$entries = Object.entries(propDefs); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        propName = _Object$entries$_i[0],\n        propDef = _Object$entries$_i[1];\n\n    var deprecated = propDef === null || propDef === void 0 ? void 0 : propDef.deprecatedFor;\n\n    if (deprecated) {\n      deprecatedProps[propName] = Array.isArray(deprecated) ? deprecated : [deprecated];\n    } else {\n      var propType = parsePropType(propName, propDef);\n      propTypes[propName] = propType;\n      defaultProps[propName] = propType.value;\n    }\n  }\n\n  return {\n    propTypes: propTypes,\n    defaultProps: defaultProps,\n    deprecatedProps: deprecatedProps\n  };\n}\n\nfunction parsePropType(name, propDef) {\n  switch (getTypeOf(propDef)) {\n    case 'object':\n      return normalizePropDefinition(name, propDef);\n\n    case 'array':\n      return normalizePropDefinition(name, {\n        type: 'array',\n        value: propDef,\n        compare: false\n      });\n\n    case 'boolean':\n      return normalizePropDefinition(name, {\n        type: 'boolean',\n        value: propDef\n      });\n\n    case 'number':\n      return normalizePropDefinition(name, {\n        type: 'number',\n        value: propDef\n      });\n\n    case 'function':\n      return normalizePropDefinition(name, {\n        type: 'function',\n        value: propDef,\n        compare: true\n      });\n\n    default:\n      return {\n        name: name,\n        type: 'unknown',\n        value: propDef\n      };\n  }\n}\n\nfunction normalizePropDefinition(name, propDef) {\n  if (!('type' in propDef)) {\n    if (!('value' in propDef)) {\n      return {\n        name: name,\n        type: 'object',\n        value: propDef\n      };\n    }\n\n    return _objectSpread({\n      name: name,\n      type: getTypeOf(propDef.value)\n    }, propDef);\n  }\n\n  return _objectSpread(_objectSpread({\n    name: name\n  }, TYPE_DEFINITIONS[propDef.type]), propDef);\n}\n\nfunction isArray(value) {\n  return Array.isArray(value) || ArrayBuffer.isView(value);\n}\n\nfunction getTypeOf(value) {\n  if (isArray(value)) {\n    return 'array';\n  }\n\n  if (value === null) {\n    return 'null';\n  }\n\n  return typeof value;\n}","map":{"version":3,"mappings":"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","names":["createTexture","destroyTexture","deepEqual","TYPE_DEFINITIONS","boolean","validate","value","propType","equal","value1","value2","Boolean","number","Number","isFinite","max","min","color","optional","isArray","length","arrayEqual","accessor","valueType","getTypeOf","array","compare","object","function","data","transform","component","dataTransform","props","image","release","array1","array2","len","i","parsePropTypes","propDefs","propTypes","defaultProps","deprecatedProps","Object","entries","propName","propDef","deprecated","deprecatedFor","Array","parsePropType","name","normalizePropDefinition","type","ArrayBuffer","isView"],"sources":["../../../src/lifecycle/prop-types.ts"],"sourcesContent":["import {createTexture, destroyTexture} from '../utils/texture';\nimport {deepEqual} from '../utils/deep-equal';\n\nimport type Component from './component';\n\ntype BasePropType = {\n  value: any;\n  async?: boolean;\n  validate?: (value: any, propType: PropType) => boolean;\n  equal?: (value1: any, value2: any, propType: PropType) => boolean;\n};\n\n/**\n * Normalized prop type definition\n */\nexport type PropType = BasePropType & {\n  type: string;\n  name: string;\n  transform?: (value: any, propType: PropType, component: Component<any>) => any;\n  release?: (value: any, propType: PropType, component: Component<any>) => void;\n};\n\ntype BooleanPropType = BasePropType & {\n  type: 'boolean';\n  value: boolean;\n};\ntype NumberPropType = BasePropType & {\n  type: 'number';\n  value: number;\n  min?: number;\n  max?: number;\n};\ntype ColorPropType = BasePropType & {\n  type: 'color';\n  value: [number, number, number, number];\n  optional?: boolean;\n};\ntype ArrayPropType = BasePropType & {\n  type: 'array';\n  value: any[];\n  optional?: boolean;\n  compare?: boolean;\n};\ntype AccessorPropType = BasePropType & {\n  type: 'accessor';\n};\ntype FunctionPropType = BasePropType & {\n  type: 'function';\n  value: Function;\n  optional?: boolean;\n  compare?: boolean;\n};\ntype DataPropType = BasePropType & {\n  type: 'data';\n};\ntype ImagePropType = BasePropType & {\n  type: 'image';\n};\ntype ObjectPropType = BasePropType & {\n  type: 'object';\n  optional?: boolean;\n  compare?: boolean;\n};\ntype DeprecatedProp = {\n  deprecatedFor?: string | string[];\n};\nexport type PropTypeDef =\n  | DeprecatedProp\n  | boolean\n  | BooleanPropType\n  | number\n  | NumberPropType\n  | string\n  | DataPropType\n  | number[]\n  | ColorPropType\n  | ArrayPropType\n  | AccessorPropType\n  | FunctionPropType\n  | ImagePropType\n  | ObjectPropType\n  | null;\n\nconst TYPE_DEFINITIONS = {\n  boolean: {\n    validate(value, propType: BooleanPropType) {\n      return true;\n    },\n    equal(value1, value2, propType: BooleanPropType) {\n      return Boolean(value1) === Boolean(value2);\n    }\n  },\n  number: {\n    validate(value, propType: NumberPropType) {\n      return (\n        Number.isFinite(value) &&\n        (!('max' in propType) || value <= propType.max!) &&\n        (!('min' in propType) || value >= propType.min!)\n      );\n    }\n  },\n  color: {\n    validate(value, propType: ColorPropType) {\n      return (\n        (propType.optional && !value) ||\n        (isArray(value) && (value.length === 3 || value.length === 4))\n      );\n    },\n    equal(value1, value2, propType: ColorPropType) {\n      return arrayEqual(value1, value2);\n    }\n  },\n  accessor: {\n    validate(value, propType: AccessorPropType) {\n      const valueType = getTypeOf(value);\n      return valueType === 'function' || valueType === getTypeOf(propType.value);\n    },\n    equal(value1, value2, propType: AccessorPropType) {\n      if (typeof value2 === 'function') {\n        return true;\n      }\n      return arrayEqual(value1, value2);\n    }\n  },\n  array: {\n    validate(value, propType: ArrayPropType) {\n      return (propType.optional && !value) || isArray(value);\n    },\n    equal(value1, value2, propType: ArrayPropType) {\n      return propType.compare ? arrayEqual(value1, value2) : value1 === value2;\n    }\n  },\n  object: {\n    equal(value1, value2, propType: ObjectPropType) {\n      return propType.compare ? deepEqual(value1, value2) : value1 === value2;\n    }\n  },\n  function: {\n    validate(value, propType: FunctionPropType) {\n      return (propType.optional && !value) || typeof value === 'function';\n    },\n    equal(value1, value2, propType: FunctionPropType) {\n      return !propType.compare || value1 === value2;\n    }\n  },\n  data: {\n    transform: (value, propType: DataPropType, component) => {\n      const {dataTransform} = component.props;\n      return dataTransform && value ? dataTransform(value) : value;\n    }\n  },\n  image: {\n    transform: (value, propType: ImagePropType, component) => {\n      return createTexture(component, value);\n    },\n    release: value => {\n      destroyTexture(value);\n    }\n  }\n} as const;\n\nfunction arrayEqual(array1, array2) {\n  if (array1 === array2) {\n    return true;\n  }\n  if (!isArray(array1) || !isArray(array2)) {\n    return false;\n  }\n  const len = array1.length;\n  if (len !== array2.length) {\n    return false;\n  }\n  for (let i = 0; i < len; i++) {\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function parsePropTypes(propDefs: Record<string, PropTypeDef>): {\n  propTypes: Record<string, PropType>;\n  defaultProps: Record<string, any>;\n  deprecatedProps: Record<string, string[]>;\n} {\n  const propTypes = {};\n  const defaultProps = {};\n  const deprecatedProps = {};\n\n  for (const [propName, propDef] of Object.entries(propDefs)) {\n    const deprecated = (propDef as DeprecatedProp)?.deprecatedFor;\n    if (deprecated) {\n      deprecatedProps[propName] = Array.isArray(deprecated) ? deprecated : [deprecated];\n    } else {\n      const propType = parsePropType(propName, propDef);\n      propTypes[propName] = propType;\n      defaultProps[propName] = propType.value;\n    }\n  }\n  return {propTypes, defaultProps, deprecatedProps};\n}\n\n// Parses one property definition entry. Either contains:\n// * a valid prop type object ({type, ...})\n// * or just a default value, in which case type and name inference is used\nfunction parsePropType(name: string, propDef: PropTypeDef): PropType {\n  switch (getTypeOf(propDef)) {\n    case 'object':\n      return normalizePropDefinition(name, propDef);\n\n    case 'array':\n      return normalizePropDefinition(name, {type: 'array', value: propDef, compare: false});\n\n    case 'boolean':\n      return normalizePropDefinition(name, {type: 'boolean', value: propDef});\n\n    case 'number':\n      return normalizePropDefinition(name, {type: 'number', value: propDef});\n\n    case 'function':\n      // return guessFunctionType(name, propDef);\n      return normalizePropDefinition(name, {type: 'function', value: propDef, compare: true});\n\n    default:\n      return {name, type: 'unknown', value: propDef};\n  }\n}\n\nfunction normalizePropDefinition(name, propDef): PropType {\n  if (!('type' in propDef)) {\n    if (!('value' in propDef)) {\n      // If no type and value this object is likely the value\n      return {name, type: 'object', value: propDef};\n    }\n    return {name, type: getTypeOf(propDef.value), ...propDef};\n  }\n  return {name, ...TYPE_DEFINITIONS[propDef.type], ...propDef};\n}\n\nfunction isArray(value: any): boolean {\n  return Array.isArray(value) || ArrayBuffer.isView(value);\n}\n\n// improved version of javascript typeof that can distinguish arrays and null values\nfunction getTypeOf(value: any): string {\n  if (isArray(value)) {\n    return 'array';\n  }\n  if (value === null) {\n    return 'null';\n  }\n  return typeof value;\n}\n"]},"metadata":{},"sourceType":"module"}