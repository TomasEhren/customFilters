{"ast":null,"code":"import { config } from './common';\nexport function validateVector(v, length) {\n  if (v.length !== length) {\n    return false;\n  }\n\n  for (let i = 0; i < v.length; ++i) {\n    if (!Number.isFinite(v[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function checkNumber(value) {\n  if (!Number.isFinite(value)) {\n    throw new Error(\"Invalid number \".concat(value));\n  }\n\n  return value;\n}\nexport function checkVector(v, length) {\n  let callerName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n  if (config.debug && !validateVector(v, length)) {\n    throw new Error(\"math.gl: \".concat(callerName, \" some fields set to invalid numbers'\"));\n  }\n\n  return v;\n}\nconst map = {};\nexport function deprecated(method, version) {\n  if (!map[method]) {\n    map[method] = true;\n    console.warn(\"\".concat(method, \" has been removed in version \").concat(version, \", see upgrade guide for more information\"));\n  }\n}","map":{"version":3,"mappings":"AAoBA,SAAQA,MAAR,QAAqB,UAArB;AAEA,OAAO,SAASC,cAAT,CAAwBC,CAAxB,EAA2BC,MAA3B,EAAmC;EACxC,IAAID,CAAC,CAACC,MAAFD,KAAaC,MAAjB,EAAyB;IACvB,OAAO,KAAP;EACD;;EAED,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAAC,CAACC,MAAtB,EAA8B,EAAEC,CAAhC,EAAmC;IACjC,IAAI,CAACC,MAAM,CAACC,QAAPD,CAAgBH,CAAC,CAACE,CAAD,CAAjBC,CAAL,EAA4B;MAC1B,OAAO,KAAP;IACD;EACF;;EACD,OAAO,IAAP;AACD;AAED,OAAO,SAASE,WAAT,CAAqBC,KAArB,EAA4B;EACjC,IAAI,CAACH,MAAM,CAACC,QAAPD,CAAgBG,KAAhBH,CAAL,EAA6B;IAC3B,MAAM,IAAII,KAAJ,0BAA4BD,KAA5B,EAAN;EACD;;EACD,OAAOA,KAAP;AACD;AAED,OAAO,SAASE,WAAT,CAAqBR,CAArB,EAAwBC,MAAxB,EAAiD;EAAA,IAAjBQ,UAAiB,uEAAJ,EAAI;;EACtD,IAAIX,MAAM,CAACY,KAAPZ,IAAgB,CAACC,cAAc,CAACC,CAAD,EAAIC,MAAJ,CAAnC,EAAgD;IAC9C,MAAM,IAAIM,KAAJ,oBAAsBE,UAAtB,0CAAN;EACD;;EACD,OAAOT,CAAP;AACD;AAED,MAAMW,GAAG,GAAG,EAAZ;AAEA,OAAO,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,OAA5B,EAAqC;EAC1C,IAAI,CAACH,GAAG,CAACE,MAAD,CAAR,EAAkB;IAChBF,GAAG,CAACE,MAAD,CAAHF,GAAc,IAAdA;IAEAI,OAAO,CAACC,IAARD,WACKF,MADL,0CAC2CC,OAD3C;EAGD;AACF","names":["config","validateVector","v","length","i","Number","isFinite","checkNumber","value","Error","checkVector","callerName","debug","map","deprecated","method","version","console","warn"],"sources":["../../../src/lib/validators.js"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {config} from './common';\n\nexport function validateVector(v, length) {\n  if (v.length !== length) {\n    return false;\n  }\n  // Could be arguments \"array\" (v.every not availasble)\n  for (let i = 0; i < v.length; ++i) {\n    if (!Number.isFinite(v[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function checkNumber(value) {\n  if (!Number.isFinite(value)) {\n    throw new Error(`Invalid number ${value}`);\n  }\n  return value;\n}\n\nexport function checkVector(v, length, callerName = '') {\n  if (config.debug && !validateVector(v, length)) {\n    throw new Error(`math.gl: ${callerName} some fields set to invalid numbers'`);\n  }\n  return v;\n}\n\nconst map = {};\n\nexport function deprecated(method, version) {\n  if (!map[method]) {\n    map[method] = true;\n    // eslint-disable-next-line\n    console.warn(\n      `${method} has been removed in version ${version}, see upgrade guide for more information`\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}