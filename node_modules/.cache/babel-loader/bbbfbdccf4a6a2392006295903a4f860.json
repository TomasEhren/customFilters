{"ast":null,"code":"import Attribute from './attribute';\nimport log from '../../utils/log';\nimport debug from '../../debug';\nimport AttributeTransitionManager from './attribute-transition-manager';\nconst TRACE_INVALIDATE = 'attributeManager.invalidate';\nconst TRACE_UPDATE_START = 'attributeManager.updateStart';\nconst TRACE_UPDATE_END = 'attributeManager.updateEnd';\nconst TRACE_ATTRIBUTE_UPDATE_START = 'attribute.updateStart';\nconst TRACE_ATTRIBUTE_ALLOCATE = 'attribute.allocate';\nconst TRACE_ATTRIBUTE_UPDATE_END = 'attribute.updateEnd';\nexport default class AttributeManager {\n  constructor(gl) {\n    let {\n      id = 'attribute-manager',\n      stats,\n      timeline\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.id = id;\n    this.gl = gl;\n    this.attributes = {};\n    this.updateTriggers = {};\n    this.accessors = {};\n    this.needsRedraw = true;\n    this.userData = {};\n    this.stats = stats;\n    this.attributeTransitionManager = new AttributeTransitionManager(gl, {\n      id: \"\".concat(id, \"-transitions\"),\n      timeline\n    });\n    Object.seal(this);\n  }\n\n  finalize() {\n    for (const attributeName in this.attributes) {\n      this.attributes[attributeName].delete();\n    }\n\n    this.attributeTransitionManager.finalize();\n  }\n\n  getNeedsRedraw() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      clearRedrawFlags: false\n    };\n    const redraw = this.needsRedraw;\n    this.needsRedraw = this.needsRedraw && !opts.clearRedrawFlags;\n    return redraw && this.id;\n  }\n\n  setNeedsRedraw() {\n    let redraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    this.needsRedraw = true;\n    return this;\n  }\n\n  add(attributes, updaters) {\n    this._add(attributes, updaters);\n  }\n\n  addInstanced(attributes, updaters) {\n    this._add(attributes, updaters, {\n      instanced: 1\n    });\n  }\n\n  remove(attributeNameArray) {\n    for (let i = 0; i < attributeNameArray.length; i++) {\n      const name = attributeNameArray[i];\n\n      if (this.attributes[name] !== undefined) {\n        this.attributes[name].delete();\n        delete this.attributes[name];\n      }\n    }\n  }\n\n  invalidate(triggerName, dataRange) {\n    const invalidatedAttributes = this._invalidateTrigger(triggerName, dataRange);\n\n    debug(TRACE_INVALIDATE, this, triggerName, invalidatedAttributes);\n  }\n\n  invalidateAll(dataRange) {\n    for (const attributeName in this.attributes) {\n      this.attributes[attributeName].setNeedsUpdate(attributeName, dataRange);\n    }\n\n    debug(TRACE_INVALIDATE, this, 'all');\n  }\n\n  update() {\n    let {\n      data,\n      numInstances,\n      startIndices = null,\n      transitions,\n      props = {},\n      buffers = {},\n      context = {}\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let updated = false;\n    debug(TRACE_UPDATE_START, this);\n\n    if (this.stats) {\n      this.stats.get('Update Attributes').timeStart();\n    }\n\n    for (const attributeName in this.attributes) {\n      const attribute = this.attributes[attributeName];\n      const accessorName = attribute.settings.accessor;\n      attribute.startIndices = startIndices;\n      attribute.numInstances = numInstances;\n\n      if (props[attributeName]) {\n        log.removed(\"props.\".concat(attributeName), \"data.attributes.\".concat(attributeName))();\n      }\n\n      if (attribute.setExternalBuffer(buffers[attributeName])) {} else if (attribute.setBinaryValue(buffers[accessorName], data.startIndices)) {} else if (!buffers[accessorName] && attribute.setConstantValue(props[accessorName])) {} else if (attribute.needsUpdate()) {\n        updated = true;\n\n        this._updateAttribute({\n          attribute,\n          numInstances,\n          data,\n          props,\n          context\n        });\n      }\n\n      this.needsRedraw |= attribute.needsRedraw();\n    }\n\n    if (updated) {\n      debug(TRACE_UPDATE_END, this, numInstances);\n    }\n\n    if (this.stats) {\n      this.stats.get('Update Attributes').timeEnd();\n    }\n\n    this.attributeTransitionManager.update({\n      attributes: this.attributes,\n      numInstances,\n      transitions\n    });\n  }\n\n  updateTransition() {\n    const {\n      attributeTransitionManager\n    } = this;\n    const transitionUpdated = attributeTransitionManager.run();\n    this.needsRedraw = this.needsRedraw || transitionUpdated;\n    return transitionUpdated;\n  }\n\n  getAttributes() {\n    return this.attributes;\n  }\n\n  getChangedAttributes() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      clearChangedFlags: false\n    };\n    const {\n      attributes,\n      attributeTransitionManager\n    } = this;\n    const changedAttributes = { ...attributeTransitionManager.getAttributes()\n    };\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n\n      if (attribute.needsRedraw(opts) && !attributeTransitionManager.hasAttribute(attributeName)) {\n        changedAttributes[attributeName] = attribute;\n      }\n    }\n\n    return changedAttributes;\n  }\n\n  getShaderAttributes(attributes) {\n    let excludeAttributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!attributes) {\n      attributes = this.getAttributes();\n    }\n\n    const shaderAttributes = {};\n\n    for (const attributeName in attributes) {\n      if (!excludeAttributes[attributeName]) {\n        Object.assign(shaderAttributes, attributes[attributeName].getShaderAttributes());\n      }\n    }\n\n    return shaderAttributes;\n  }\n\n  getAccessors() {\n    return this.updateTriggers;\n  }\n\n  _add(attributes, updaters) {\n    let extraProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (updaters) {\n      log.warn('AttributeManager.add({updaters}) - updater map no longer supported')();\n    }\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      this.attributes[attributeName] = this._createAttribute(attributeName, attribute, extraProps);\n    }\n\n    this._mapUpdateTriggersToAttributes();\n  }\n\n  _createAttribute(name, attribute, extraProps) {\n    const props = { ...attribute,\n      id: name,\n      isIndexed: attribute.isIndexed || attribute.elements || false,\n      constant: attribute.constant || false,\n      size: attribute.elements && 1 || attribute.size || 1,\n      value: attribute.value || null,\n      divisor: attribute.instanced || extraProps.instanced ? 1 : attribute.divisor || 0\n    };\n    return new Attribute(this.gl, props);\n  }\n\n  _mapUpdateTriggersToAttributes() {\n    const triggers = {};\n\n    for (const attributeName in this.attributes) {\n      const attribute = this.attributes[attributeName];\n      attribute.getUpdateTriggers().forEach(triggerName => {\n        if (!triggers[triggerName]) {\n          triggers[triggerName] = [];\n        }\n\n        triggers[triggerName].push(attributeName);\n      });\n    }\n\n    this.updateTriggers = triggers;\n  }\n\n  _invalidateTrigger(triggerName, dataRange) {\n    const {\n      attributes,\n      updateTriggers\n    } = this;\n    const invalidatedAttributes = updateTriggers[triggerName];\n\n    if (invalidatedAttributes) {\n      invalidatedAttributes.forEach(name => {\n        const attribute = attributes[name];\n\n        if (attribute) {\n          attribute.setNeedsUpdate(attribute.id, dataRange);\n        }\n      });\n    }\n\n    return invalidatedAttributes;\n  }\n\n  _updateAttribute(opts) {\n    const {\n      attribute,\n      numInstances\n    } = opts;\n    debug(TRACE_ATTRIBUTE_UPDATE_START, attribute);\n\n    if (attribute.constant) {\n      attribute.setConstantValue(attribute.value);\n      return;\n    }\n\n    if (attribute.allocate(numInstances)) {\n      debug(TRACE_ATTRIBUTE_ALLOCATE, attribute, numInstances);\n    }\n\n    const updated = attribute.updateBuffer(opts);\n\n    if (updated) {\n      this.needsRedraw = true;\n      debug(TRACE_ATTRIBUTE_UPDATE_END, attribute, numInstances);\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Attribute","log","debug","AttributeTransitionManager","TRACE_INVALIDATE","TRACE_UPDATE_START","TRACE_UPDATE_END","TRACE_ATTRIBUTE_UPDATE_START","TRACE_ATTRIBUTE_ALLOCATE","TRACE_ATTRIBUTE_UPDATE_END","AttributeManager","constructor","gl","id","stats","timeline","attributes","updateTriggers","accessors","needsRedraw","userData","attributeTransitionManager","Object","seal","finalize","attributeName","delete","getNeedsRedraw","opts","clearRedrawFlags","redraw","setNeedsRedraw","add","updaters","_add","addInstanced","instanced","remove","attributeNameArray","i","length","name","undefined","invalidate","triggerName","dataRange","invalidatedAttributes","_invalidateTrigger","invalidateAll","setNeedsUpdate","update","data","numInstances","startIndices","transitions","props","buffers","context","updated","get","timeStart","attribute","accessorName","settings","accessor","removed","setExternalBuffer","setBinaryValue","setConstantValue","needsUpdate","_updateAttribute","timeEnd","updateTransition","transitionUpdated","run","getAttributes","getChangedAttributes","clearChangedFlags","changedAttributes","hasAttribute","getShaderAttributes","excludeAttributes","shaderAttributes","assign","getAccessors","extraProps","warn","_createAttribute","_mapUpdateTriggersToAttributes","isIndexed","elements","constant","size","value","divisor","triggers","getUpdateTriggers","forEach","push","allocate","updateBuffer"],"sources":["../../../../src/lib/attribute/attribute-manager.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable guard-for-in */\nimport Attribute from './attribute';\nimport log from '../../utils/log';\nimport debug from '../../debug';\n\nimport AttributeTransitionManager from './attribute-transition-manager';\n\nconst TRACE_INVALIDATE = 'attributeManager.invalidate';\nconst TRACE_UPDATE_START = 'attributeManager.updateStart';\nconst TRACE_UPDATE_END = 'attributeManager.updateEnd';\nconst TRACE_ATTRIBUTE_UPDATE_START = 'attribute.updateStart';\nconst TRACE_ATTRIBUTE_ALLOCATE = 'attribute.allocate';\nconst TRACE_ATTRIBUTE_UPDATE_END = 'attribute.updateEnd';\n\nexport default class AttributeManager {\n  /**\n   * @classdesc\n   * Automated attribute generation and management. Suitable when a set of\n   * vertex shader attributes are generated by iteration over a data array,\n   * and updates to these attributes are needed either when the data itself\n   * changes, or when other data relevant to the calculations change.\n   *\n   * - First the application registers descriptions of its dynamic vertex\n   *   attributes using AttributeManager.add().\n   * - Then, when any change that affects attributes is detected by the\n   *   application, the app will call AttributeManager.invalidate().\n   * - Finally before it renders, it calls AttributeManager.update() to\n   *   ensure that attributes are automatically rebuilt if anything has been\n   *   invalidated.\n   *\n   * The application provided update functions describe how attributes\n   * should be updated from a data array and are expected to traverse\n   * that data array (or iterable) and fill in the attribute's typed array.\n   *\n   * Note that the attribute manager intentionally does not do advanced\n   * change detection, but instead makes it easy to build such detection\n   * by offering the ability to \"invalidate\" each attribute separately.\n   */\n  constructor(gl, {id = 'attribute-manager', stats, timeline} = {}) {\n    this.id = id;\n    this.gl = gl;\n\n    this.attributes = {};\n\n    this.updateTriggers = {};\n    this.accessors = {};\n    this.needsRedraw = true;\n\n    this.userData = {};\n    this.stats = stats;\n\n    this.attributeTransitionManager = new AttributeTransitionManager(gl, {\n      id: `${id}-transitions`,\n      timeline\n    });\n\n    // For debugging sanity, prevent uninitialized members\n    Object.seal(this);\n  }\n\n  finalize() {\n    for (const attributeName in this.attributes) {\n      this.attributes[attributeName].delete();\n    }\n    this.attributeTransitionManager.finalize();\n  }\n\n  // Returns the redraw flag, optionally clearing it.\n  // Redraw flag will be set if any attributes attributes changed since\n  // flag was last cleared.\n  //\n  // @param {String} [clearRedrawFlags=false] - whether to clear the flag\n  // @return {false|String} - reason a redraw is needed.\n  getNeedsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this.needsRedraw;\n    this.needsRedraw = this.needsRedraw && !opts.clearRedrawFlags;\n    return redraw && this.id;\n  }\n\n  // Sets the redraw flag.\n  // @param {Boolean} redraw=true\n  // @return {AttributeManager} - for chaining\n  setNeedsRedraw(redraw = true) {\n    this.needsRedraw = true;\n    return this;\n  }\n\n  // Adds attributes\n  add(attributes, updaters) {\n    this._add(attributes, updaters);\n  }\n\n  // Adds attributes\n  addInstanced(attributes, updaters) {\n    this._add(attributes, updaters, {instanced: 1});\n  }\n\n  /**\n   * Removes attributes\n   * Takes an array of attribute names and delete them from\n   * the attribute map if they exists\n   *\n   * @example\n   * attributeManager.remove(['position']);\n   *\n   * @param {Object} attributeNameArray - attribute name array (see above)\n   */\n  remove(attributeNameArray) {\n    for (let i = 0; i < attributeNameArray.length; i++) {\n      const name = attributeNameArray[i];\n      if (this.attributes[name] !== undefined) {\n        this.attributes[name].delete();\n        delete this.attributes[name];\n      }\n    }\n  }\n\n  // Marks an attribute for update\n  invalidate(triggerName, dataRange) {\n    const invalidatedAttributes = this._invalidateTrigger(triggerName, dataRange);\n    // For performance tuning\n    debug(TRACE_INVALIDATE, this, triggerName, invalidatedAttributes);\n  }\n\n  invalidateAll(dataRange) {\n    for (const attributeName in this.attributes) {\n      this.attributes[attributeName].setNeedsUpdate(attributeName, dataRange);\n    }\n    // For performance tuning\n    debug(TRACE_INVALIDATE, this, 'all');\n  }\n\n  // Ensure all attribute buffers are updated from props or data.\n  update({\n    data,\n    numInstances,\n    startIndices = null,\n    transitions,\n    props = {},\n    buffers = {},\n    context = {}\n  } = {}) {\n    // keep track of whether some attributes are updated\n    let updated = false;\n\n    debug(TRACE_UPDATE_START, this);\n    if (this.stats) {\n      this.stats.get('Update Attributes').timeStart();\n    }\n\n    for (const attributeName in this.attributes) {\n      const attribute = this.attributes[attributeName];\n      const accessorName = attribute.settings.accessor;\n      attribute.startIndices = startIndices;\n      attribute.numInstances = numInstances;\n\n      if (props[attributeName]) {\n        log.removed(`props.${attributeName}`, `data.attributes.${attributeName}`)();\n      }\n\n      if (attribute.setExternalBuffer(buffers[attributeName])) {\n        // Step 1: try update attribute directly from external buffers\n      } else if (attribute.setBinaryValue(buffers[accessorName], data.startIndices)) {\n        // Step 2: try set packed value from external typed array\n      } else if (!buffers[accessorName] && attribute.setConstantValue(props[accessorName])) {\n        // Step 3: try set constant value from props\n        // Note: if buffers[accessorName] is supplied, ignore props[accessorName]\n        // This may happen when setBinaryValue falls through to use the auto updater\n      } else if (attribute.needsUpdate()) {\n        // Step 4: update via updater callback\n        updated = true;\n        this._updateAttribute({\n          attribute,\n          numInstances,\n          data,\n          props,\n          context\n        });\n      }\n\n      this.needsRedraw |= attribute.needsRedraw();\n    }\n\n    if (updated) {\n      // Only initiate alloc/update (and logging) if actually needed\n      debug(TRACE_UPDATE_END, this, numInstances);\n    }\n\n    if (this.stats) {\n      this.stats.get('Update Attributes').timeEnd();\n    }\n\n    this.attributeTransitionManager.update({\n      attributes: this.attributes,\n      numInstances,\n      transitions\n    });\n  }\n\n  // Update attribute transition to the current timestamp\n  // Returns `true` if any transition is in progress\n  updateTransition() {\n    const {attributeTransitionManager} = this;\n    const transitionUpdated = attributeTransitionManager.run();\n    this.needsRedraw = this.needsRedraw || transitionUpdated;\n    return transitionUpdated;\n  }\n\n  /**\n   * Returns all attribute descriptors\n   * Note: Format matches luma.gl Model/Program.setAttributes()\n   * @return {Object} attributes - descriptors\n   */\n  getAttributes() {\n    return this.attributes;\n  }\n\n  /**\n   * Returns changed attribute descriptors\n   * This indicates which WebGLBuffers need to be updated\n   * @return {Object} attributes - descriptors\n   */\n  getChangedAttributes(opts = {clearChangedFlags: false}) {\n    const {attributes, attributeTransitionManager} = this;\n\n    const changedAttributes = {...attributeTransitionManager.getAttributes()};\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      if (attribute.needsRedraw(opts) && !attributeTransitionManager.hasAttribute(attributeName)) {\n        changedAttributes[attributeName] = attribute;\n      }\n    }\n\n    return changedAttributes;\n  }\n\n  // Returns shader attributes\n  getShaderAttributes(attributes, excludeAttributes = {}) {\n    if (!attributes) {\n      attributes = this.getAttributes();\n    }\n    const shaderAttributes = {};\n    for (const attributeName in attributes) {\n      if (!excludeAttributes[attributeName]) {\n        Object.assign(shaderAttributes, attributes[attributeName].getShaderAttributes());\n      }\n    }\n    return shaderAttributes;\n  }\n\n  // PROTECTED METHODS - Only to be used by collaborating classes, not by apps\n\n  // Returns object containing all accessors as keys, with non-null values\n  // @return {Object} - accessors object\n  getAccessors() {\n    return this.updateTriggers;\n  }\n\n  // PRIVATE METHODS\n\n  // Used to register an attribute\n  _add(attributes, updaters, extraProps = {}) {\n    if (updaters) {\n      log.warn('AttributeManager.add({updaters}) - updater map no longer supported')();\n    }\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n\n      // Initialize the attribute descriptor, with WebGL and metadata fields\n      this.attributes[attributeName] = this._createAttribute(attributeName, attribute, extraProps);\n    }\n\n    this._mapUpdateTriggersToAttributes();\n  }\n  /* eslint-enable max-statements */\n\n  _createAttribute(name, attribute, extraProps) {\n    // For expected default values see:\n    // https://github.com/visgl/luma.gl/blob/1affe21352e289eeaccee2a876865138858a765c/modules/webgl/src/classes/accessor.js#L5-L13\n    // and https://deck.gl/docs/api-reference/core/attribute-manager#add\n    const props = {\n      ...attribute,\n      id: name,\n      isIndexed: attribute.isIndexed || attribute.elements || false,\n      // Luma fields\n      constant: attribute.constant || false,\n      size: (attribute.elements && 1) || attribute.size || 1,\n      value: attribute.value || null,\n      divisor: attribute.instanced || extraProps.instanced ? 1 : attribute.divisor || 0\n    };\n\n    return new Attribute(this.gl, props);\n  }\n\n  // build updateTrigger name to attribute name mapping\n  _mapUpdateTriggersToAttributes() {\n    const triggers = {};\n\n    for (const attributeName in this.attributes) {\n      const attribute = this.attributes[attributeName];\n      attribute.getUpdateTriggers().forEach(triggerName => {\n        if (!triggers[triggerName]) {\n          triggers[triggerName] = [];\n        }\n        triggers[triggerName].push(attributeName);\n      });\n    }\n\n    this.updateTriggers = triggers;\n  }\n\n  _invalidateTrigger(triggerName, dataRange) {\n    const {attributes, updateTriggers} = this;\n    const invalidatedAttributes = updateTriggers[triggerName];\n\n    if (invalidatedAttributes) {\n      invalidatedAttributes.forEach(name => {\n        const attribute = attributes[name];\n        if (attribute) {\n          attribute.setNeedsUpdate(attribute.id, dataRange);\n        }\n      });\n    }\n    return invalidatedAttributes;\n  }\n\n  _updateAttribute(opts) {\n    const {attribute, numInstances} = opts;\n    debug(TRACE_ATTRIBUTE_UPDATE_START, attribute);\n\n    if (attribute.constant) {\n      // The attribute is flagged as constant outside of an update cycle\n      // Skip allocation and updater call\n      attribute.setConstantValue(attribute.value);\n      return;\n    }\n\n    if (attribute.allocate(numInstances)) {\n      debug(TRACE_ATTRIBUTE_ALLOCATE, attribute, numInstances);\n    }\n\n    // Calls update on any buffers that need update\n    const updated = attribute.updateBuffer(opts);\n    if (updated) {\n      this.needsRedraw = true;\n      debug(TRACE_ATTRIBUTE_UPDATE_END, attribute, numInstances);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}