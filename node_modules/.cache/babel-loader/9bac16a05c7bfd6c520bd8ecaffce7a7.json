{"ast":null,"code":"import LayerManager from './layer-manager';\nimport ViewManager from './view-manager';\nimport MapView from '../views/map-view';\nimport EffectManager from './effect-manager';\nimport Effect from './effect';\nimport DeckRenderer from './deck-renderer';\nimport DeckPicker from './deck-picker';\nimport Tooltip from './tooltip';\nimport log from '../utils/log';\nimport { deepEqual } from '../utils/deep-equal';\nimport typedArrayManager from '../utils/typed-array-manager';\nimport deckGlobal from './init';\nimport { getBrowser } from '@probe.gl/env';\nimport { AnimationLoop, createGLContext, instrumentGLContext, setParameters, Timeline, lumaStats } from '@luma.gl/core';\nimport { Stats } from '@probe.gl/stats';\nimport { EventManager } from 'mjolnir.js';\nimport assert from '../utils/assert';\nimport { EVENTS } from './constants';\n\nfunction noop() {}\n\nconst getCursor = _ref => {\n  let {\n    isDragging\n  } = _ref;\n  return isDragging ? 'grabbing' : 'grab';\n};\n\nfunction getPropTypes(PropTypes) {\n  return {\n    id: PropTypes.string,\n    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    layers: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    layerFilter: PropTypes.func,\n    views: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    viewState: PropTypes.object,\n    effects: PropTypes.arrayOf(PropTypes.instanceOf(Effect)),\n    controller: PropTypes.oneOfType([PropTypes.func, PropTypes.bool, PropTypes.object]),\n    gl: PropTypes.object,\n    glOptions: PropTypes.object,\n    parameters: PropTypes.object,\n    pickingRadius: PropTypes.number,\n    useDevicePixels: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n    touchAction: PropTypes.string,\n    eventRecognizerOptions: PropTypes.object,\n    onWebGLInitialized: PropTypes.func,\n    onResize: PropTypes.func,\n    onViewStateChange: PropTypes.func,\n    onInteractionStateChange: PropTypes.func,\n    onBeforeRender: PropTypes.func,\n    onAfterRender: PropTypes.func,\n    onLoad: PropTypes.func,\n    onError: PropTypes.func,\n    debug: PropTypes.bool,\n    drawPickingColors: PropTypes.bool,\n    _framebuffer: PropTypes.object,\n    _animate: PropTypes.bool,\n    _pickable: PropTypes.bool,\n    _typedArrayManagerProps: PropTypes.object\n  };\n}\n\nconst defaultProps = {\n  id: '',\n  width: '100%',\n  height: '100%',\n  pickingRadius: 0,\n  layerFilter: null,\n  glOptions: {},\n  gl: null,\n  layers: [],\n  effects: [],\n  views: null,\n  controller: null,\n  useDevicePixels: true,\n  touchAction: 'none',\n  eventRecognizerOptions: {},\n  _framebuffer: null,\n  _animate: false,\n  _pickable: true,\n  _typedArrayManagerProps: {},\n  onWebGLInitialized: noop,\n  onResize: noop,\n  onViewStateChange: noop,\n  onInteractionStateChange: noop,\n  onBeforeRender: noop,\n  onAfterRender: noop,\n  onLoad: noop,\n  onError: (error, layer) => log.error(error)(),\n  _onMetrics: null,\n  getCursor,\n  debug: false,\n  drawPickingColors: false\n};\nexport default class Deck {\n  constructor(props) {\n    props = { ...defaultProps,\n      ...props\n    };\n    this.props = {};\n    this.width = 0;\n    this.height = 0;\n    this.viewManager = null;\n    this.layerManager = null;\n    this.effectManager = null;\n    this.deckRenderer = null;\n    this.deckPicker = null;\n    this._needsRedraw = true;\n    this._pickRequest = {};\n    this._lastPointerDownInfo = null;\n    this.viewState = null;\n    this.interactiveState = {\n      isHovering: false,\n      isDragging: false\n    };\n    this._onEvent = this._onEvent.bind(this);\n    this._onPointerDown = this._onPointerDown.bind(this);\n    this._onPointerMove = this._onPointerMove.bind(this);\n\n    if (props.viewState && props.initialViewState) {\n      log.warn('View state tracking is disabled. Use either `initialViewState` for auto update or `viewState` for manual update.')();\n    }\n\n    if (getBrowser() === 'IE') {\n      log.warn('IE 11 support will be deprecated in v8.0')();\n    }\n\n    if (!props.gl) {\n      if (typeof document !== 'undefined') {\n        this.canvas = this._createCanvas(props);\n      }\n    }\n\n    this.animationLoop = this._createAnimationLoop(props);\n    this.stats = new Stats({\n      id: 'deck.gl'\n    });\n    this.metrics = {\n      fps: 0,\n      setPropsTime: 0,\n      updateAttributesTime: 0,\n      framesRedrawn: 0,\n      pickTime: 0,\n      pickCount: 0,\n      gpuTime: 0,\n      gpuTimePerFrame: 0,\n      cpuTime: 0,\n      cpuTimePerFrame: 0,\n      bufferMemory: 0,\n      textureMemory: 0,\n      renderbufferMemory: 0,\n      gpuMemory: 0\n    };\n    this._metricsCounter = 0;\n    this.setProps(props);\n\n    if (props._typedArrayManagerProps) {\n      typedArrayManager.setProps(props._typedArrayManagerProps);\n    }\n\n    this.animationLoop.start();\n  }\n\n  finalize() {\n    this.animationLoop.stop();\n    this.animationLoop = null;\n    this._lastPointerDownInfo = null;\n\n    if (this.layerManager) {\n      this.layerManager.finalize();\n      this.layerManager = null;\n      this.viewManager.finalize();\n      this.viewManager = null;\n      this.effectManager.finalize();\n      this.effectManager = null;\n      this.deckRenderer.finalize();\n      this.deckRenderer = null;\n      this.deckPicker.finalize();\n      this.deckPicker = null;\n      this.eventManager.destroy();\n      this.eventManager = null;\n      this.tooltip.remove();\n      this.tooltip = null;\n    }\n\n    if (!this.props.canvas && !this.props.gl && this.canvas) {\n      this.canvas.parentElement.removeChild(this.canvas);\n      this.canvas = null;\n    }\n  }\n\n  setProps(props) {\n    this.stats.get('setProps Time').timeStart();\n\n    if ('onLayerHover' in props) {\n      log.removed('onLayerHover', 'onHover')();\n    }\n\n    if ('onLayerClick' in props) {\n      log.removed('onLayerClick', 'onClick')();\n    }\n\n    if (props.initialViewState && !deepEqual(this.props.initialViewState, props.initialViewState)) {\n      this.viewState = props.initialViewState;\n    }\n\n    Object.assign(this.props, props);\n\n    this._setCanvasSize(this.props);\n\n    const resolvedProps = Object.create(this.props);\n    Object.assign(resolvedProps, {\n      views: this._getViews(),\n      width: this.width,\n      height: this.height,\n      viewState: this._getViewState()\n    });\n    this.animationLoop.setProps(resolvedProps);\n\n    if (this.layerManager) {\n      this.viewManager.setProps(resolvedProps);\n      this.layerManager.activateViewport(this.getViewports()[0]);\n      this.layerManager.setProps(resolvedProps);\n      this.effectManager.setProps(resolvedProps);\n      this.deckRenderer.setProps(resolvedProps);\n      this.deckPicker.setProps(resolvedProps);\n    }\n\n    this.stats.get('setProps Time').timeEnd();\n  }\n\n  needsRedraw() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      clearRedrawFlags: false\n    };\n\n    if (this.props._animate) {\n      return 'Deck._animate';\n    }\n\n    let redraw = this._needsRedraw;\n\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    const viewManagerNeedsRedraw = this.viewManager.needsRedraw(opts);\n    const layerManagerNeedsRedraw = this.layerManager.needsRedraw(opts);\n    const effectManagerNeedsRedraw = this.effectManager.needsRedraw(opts);\n    const deckRendererNeedsRedraw = this.deckRenderer.needsRedraw(opts);\n    redraw = redraw || viewManagerNeedsRedraw || layerManagerNeedsRedraw || effectManagerNeedsRedraw || deckRendererNeedsRedraw;\n    return redraw;\n  }\n\n  redraw(force) {\n    if (!this.layerManager) {\n      return;\n    }\n\n    const redrawReason = force || this.needsRedraw({\n      clearRedrawFlags: true\n    });\n\n    if (!redrawReason) {\n      return;\n    }\n\n    this.stats.get('Redraw Count').incrementCount();\n\n    if (this.props._customRender) {\n      this.props._customRender(redrawReason);\n    } else {\n      this._drawLayers(redrawReason);\n    }\n  }\n\n  getViews() {\n    return this.viewManager.views;\n  }\n\n  getViewports(rect) {\n    return this.viewManager.getViewports(rect);\n  }\n\n  pickObject(opts) {\n    const infos = this._pick('pickObject', 'pickObject Time', opts).result;\n\n    return infos.length ? infos[0] : null;\n  }\n\n  pickMultipleObjects(opts) {\n    opts.depth = opts.depth || 10;\n    return this._pick('pickObject', 'pickMultipleObjects Time', opts).result;\n  }\n\n  pickObjects(opts) {\n    return this._pick('pickObjects', 'pickObjects Time', opts);\n  }\n\n  _addResources(resources) {\n    let forceUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    for (const id in resources) {\n      this.layerManager.resourceManager.add({\n        resourceId: id,\n        data: resources[id],\n        forceUpdate\n      });\n    }\n  }\n\n  _removeResources(resourceIds) {\n    for (const id of resourceIds) {\n      this.layerManager.resourceManager.remove(id);\n    }\n  }\n\n  _pick(method, statKey, opts) {\n    const {\n      stats\n    } = this;\n    stats.get('Pick Count').incrementCount();\n    stats.get(statKey).timeStart();\n    const infos = this.deckPicker[method]({\n      layers: this.layerManager.getLayers(opts),\n      views: this.viewManager.getViews(),\n      viewports: this.getViewports(opts),\n      onViewportActive: this.layerManager.activateViewport,\n      effects: this.effectManager.getEffects(),\n      ...opts\n    });\n    stats.get(statKey).timeEnd();\n    return infos;\n  }\n\n  _createCanvas(props) {\n    let canvas = props.canvas;\n\n    if (typeof canvas === 'string') {\n      canvas = document.getElementById(canvas);\n      assert(canvas);\n    }\n\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.id = props.id || 'deckgl-overlay';\n      const parent = props.parent || document.body;\n      parent.appendChild(canvas);\n    }\n\n    Object.assign(canvas.style, props.style);\n    return canvas;\n  }\n\n  _setCanvasSize(props) {\n    if (!this.canvas) {\n      return;\n    }\n\n    let {\n      width,\n      height\n    } = props;\n\n    if (width || width === 0) {\n      width = Number.isFinite(width) ? \"\".concat(width, \"px\") : width;\n      this.canvas.style.width = width;\n    }\n\n    if (height || height === 0) {\n      height = Number.isFinite(height) ? \"\".concat(height, \"px\") : height;\n      this.canvas.style.position = 'absolute';\n      this.canvas.style.height = height;\n    }\n  }\n\n  _updateCanvasSize() {\n    if (this._checkForCanvasSizeChange()) {\n      const {\n        width,\n        height\n      } = this;\n      this.viewManager.setProps({\n        width,\n        height\n      });\n      this.props.onResize({\n        width: this.width,\n        height: this.height\n      });\n    }\n  }\n\n  _checkForCanvasSizeChange() {\n    const {\n      canvas\n    } = this;\n\n    if (!canvas) {\n      return false;\n    }\n\n    const newWidth = canvas.clientWidth || canvas.width;\n    const newHeight = canvas.clientHeight || canvas.height;\n\n    if (newWidth !== this.width || newHeight !== this.height) {\n      this.width = newWidth;\n      this.height = newHeight;\n      return true;\n    }\n\n    return false;\n  }\n\n  _createAnimationLoop(props) {\n    const {\n      width,\n      height,\n      gl,\n      glOptions,\n      debug,\n      onError,\n      onBeforeRender,\n      onAfterRender,\n      useDevicePixels,\n      autoResizeDrawingBuffer\n    } = props;\n    return new AnimationLoop({\n      width,\n      height,\n      useDevicePixels,\n      autoResizeDrawingBuffer,\n      autoResizeViewport: false,\n      gl,\n      onCreateContext: opts => createGLContext({ ...glOptions,\n        ...opts,\n        canvas: this.canvas,\n        debug,\n        onContextLost: () => this._onContextLost()\n      }),\n      onInitialize: context => this._setGLContext(context.gl),\n      onRender: this._onRenderFrame.bind(this),\n      onBeforeRender,\n      onAfterRender,\n      onError\n    });\n  }\n\n  _getViewState() {\n    return this.props.viewState || this.viewState;\n  }\n\n  _getViews() {\n    let views = this.props.views || [new MapView({\n      id: 'default-view'\n    })];\n    views = Array.isArray(views) ? views : [views];\n\n    if (views.length && this.props.controller) {\n      views[0].props.controller = this.props.controller;\n    }\n\n    return views;\n  }\n\n  _onContextLost() {\n    const {\n      onError\n    } = this.props;\n\n    if (this.animationLoop && onError) {\n      onError(new Error(\"WebGL context is lost\"));\n    }\n  }\n\n  _onPointerMove(event) {\n    const {\n      _pickRequest\n    } = this;\n\n    if (event.type === 'pointerleave') {\n      _pickRequest.x = -1;\n      _pickRequest.y = -1;\n      _pickRequest.radius = 0;\n    } else if (event.leftButton || event.rightButton) {\n      return;\n    } else {\n      const pos = event.offsetCenter;\n\n      if (!pos) {\n        return;\n      }\n\n      _pickRequest.x = pos.x;\n      _pickRequest.y = pos.y;\n      _pickRequest.radius = this.props.pickingRadius;\n    }\n\n    if (this.layerManager) {\n      this.layerManager.context.mousePosition = {\n        x: _pickRequest.x,\n        y: _pickRequest.y\n      };\n    }\n\n    _pickRequest.event = event;\n    _pickRequest.mode = 'hover';\n  }\n\n  _pickAndCallback() {\n    const {\n      _pickRequest\n    } = this;\n\n    if (_pickRequest.event) {\n      const {\n        result,\n        emptyInfo\n      } = this._pick('pickObject', 'pickObject Time', _pickRequest);\n\n      this.interactiveState.isHovering = result.length > 0;\n      let pickedInfo = emptyInfo;\n      let handled = false;\n\n      for (const info of result) {\n        pickedInfo = info;\n        handled = info.layer.onHover(info, _pickRequest.event);\n      }\n\n      if (!handled && this.props.onHover) {\n        this.props.onHover(pickedInfo, _pickRequest.event);\n      }\n\n      if (this.props.getTooltip) {\n        const displayInfo = this.props.getTooltip(pickedInfo);\n        this.tooltip.setTooltip(displayInfo, pickedInfo.x, pickedInfo.y);\n      }\n\n      _pickRequest.event = null;\n    }\n  }\n\n  _updateCursor() {\n    const container = this.props.parent || this.canvas;\n\n    if (container) {\n      container.style.cursor = this.props.getCursor(this.interactiveState);\n    }\n  }\n\n  _setGLContext(gl) {\n    if (this.layerManager) {\n      return;\n    }\n\n    if (!this.canvas) {\n      this.canvas = gl.canvas;\n      instrumentGLContext(gl, {\n        enable: true,\n        copyState: true\n      });\n    }\n\n    this.tooltip = new Tooltip(this.canvas);\n    setParameters(gl, {\n      blend: true,\n      blendFunc: [770, 771, 1, 771],\n      polygonOffsetFill: true,\n      depthTest: true,\n      depthFunc: 515\n    });\n    this.props.onWebGLInitialized(gl);\n    const timeline = new Timeline();\n    timeline.play();\n    this.animationLoop.attachTimeline(timeline);\n    this.eventManager = new EventManager(this.props.parent || gl.canvas, {\n      touchAction: this.props.touchAction,\n      recognizerOptions: this.props.eventRecognizerOptions,\n      events: {\n        pointerdown: this._onPointerDown,\n        pointermove: this._onPointerMove,\n        pointerleave: this._onPointerMove\n      }\n    });\n\n    for (const eventType in EVENTS) {\n      this.eventManager.on(eventType, this._onEvent);\n    }\n\n    this.viewManager = new ViewManager({\n      timeline,\n      eventManager: this.eventManager,\n      onViewStateChange: this._onViewStateChange.bind(this),\n      onInteractionStateChange: this._onInteractionStateChange.bind(this),\n      views: this._getViews(),\n      viewState: this._getViewState(),\n      width: this.width,\n      height: this.height\n    });\n    const viewport = this.viewManager.getViewports()[0];\n    this.layerManager = new LayerManager(gl, {\n      deck: this,\n      stats: this.stats,\n      viewport,\n      timeline\n    });\n    this.effectManager = new EffectManager();\n    this.deckRenderer = new DeckRenderer(gl);\n    this.deckPicker = new DeckPicker(gl);\n    this.setProps(this.props);\n\n    this._updateCanvasSize();\n\n    this.props.onLoad();\n  }\n\n  _drawLayers(redrawReason, renderOptions) {\n    const {\n      gl\n    } = this.layerManager.context;\n    setParameters(gl, this.props.parameters);\n    this.props.onBeforeRender({\n      gl\n    });\n    this.deckRenderer.renderLayers({\n      target: this.props._framebuffer,\n      layers: this.layerManager.getLayers(),\n      viewports: this.viewManager.getViewports(),\n      onViewportActive: this.layerManager.activateViewport,\n      views: this.viewManager.getViews(),\n      pass: 'screen',\n      redrawReason,\n      effects: this.effectManager.getEffects(),\n      ...renderOptions\n    });\n    this.props.onAfterRender({\n      gl\n    });\n  }\n\n  _onRenderFrame(animationProps) {\n    this._getFrameStats();\n\n    if (this._metricsCounter++ % 60 === 0) {\n      this._getMetrics();\n\n      this.stats.reset();\n      log.table(4, this.metrics)();\n\n      if (this.props._onMetrics) {\n        this.props._onMetrics(this.metrics);\n      }\n    }\n\n    this._updateCanvasSize();\n\n    this._updateCursor();\n\n    if (this.tooltip.isVisible && this.viewManager.needsRedraw()) {\n      this.tooltip.setTooltip(null);\n    }\n\n    this.layerManager.updateLayers();\n\n    this._pickAndCallback();\n\n    this.redraw(false);\n\n    if (this.viewManager) {\n      this.viewManager.updateViewStates();\n    }\n  }\n\n  _onViewStateChange(params) {\n    const viewState = this.props.onViewStateChange(params) || params.viewState;\n\n    if (this.viewState) {\n      this.viewState = { ...this.viewState,\n        [params.viewId]: viewState\n      };\n\n      if (!this.props.viewState) {\n        if (this.viewManager) {\n          this.viewManager.setProps({\n            viewState: this.viewState\n          });\n        }\n      }\n    }\n  }\n\n  _onInteractionStateChange(interactionState) {\n    this.interactiveState.isDragging = interactionState.isDragging;\n    this.props.onInteractionStateChange(interactionState);\n  }\n\n  _onEvent(event) {\n    const eventOptions = EVENTS[event.type];\n    const pos = event.offsetCenter;\n\n    if (!eventOptions || !pos) {\n      return;\n    }\n\n    const layers = this.layerManager.getLayers();\n    const info = this.deckPicker.getLastPickedObject({\n      x: pos.x,\n      y: pos.y,\n      layers,\n      viewports: this.getViewports(pos)\n    }, this._lastPointerDownInfo);\n    const {\n      layer\n    } = info;\n    const layerHandler = layer && (layer[eventOptions.handler] || layer.props[eventOptions.handler]);\n    const rootHandler = this.props[eventOptions.handler];\n    let handled = false;\n\n    if (layerHandler) {\n      handled = layerHandler.call(layer, info, event);\n    }\n\n    if (!handled && rootHandler) {\n      rootHandler(info, event);\n    }\n  }\n\n  _onPointerDown(event) {\n    const pos = event.offsetCenter;\n\n    const pickedInfo = this._pick('pickObject', 'pickObject Time', {\n      x: pos.x,\n      y: pos.y,\n      radius: this.props.pickingRadius\n    });\n\n    this._lastPointerDownInfo = pickedInfo.result[0] || pickedInfo.emptyInfo;\n  }\n\n  _getFrameStats() {\n    const {\n      stats\n    } = this;\n    stats.get('frameRate').timeEnd();\n    stats.get('frameRate').timeStart();\n    const animationLoopStats = this.animationLoop.stats;\n    stats.get('GPU Time').addTime(animationLoopStats.get('GPU Time').lastTiming);\n    stats.get('CPU Time').addTime(animationLoopStats.get('CPU Time').lastTiming);\n  }\n\n  _getMetrics() {\n    const {\n      metrics,\n      stats\n    } = this;\n    metrics.fps = stats.get('frameRate').getHz();\n    metrics.setPropsTime = stats.get('setProps Time').time;\n    metrics.updateAttributesTime = stats.get('Update Attributes').time;\n    metrics.framesRedrawn = stats.get('Redraw Count').count;\n    metrics.pickTime = stats.get('pickObject Time').time + stats.get('pickMultipleObjects Time').time + stats.get('pickObjects Time').time;\n    metrics.pickCount = stats.get('Pick Count').count;\n    metrics.gpuTime = stats.get('GPU Time').time;\n    metrics.cpuTime = stats.get('CPU Time').time;\n    metrics.gpuTimePerFrame = stats.get('GPU Time').getAverageTime();\n    metrics.cpuTimePerFrame = stats.get('CPU Time').getAverageTime();\n    const memoryStats = lumaStats.get('Memory Usage');\n    metrics.bufferMemory = memoryStats.get('Buffer Memory').count;\n    metrics.textureMemory = memoryStats.get('Texture Memory').count;\n    metrics.renderbufferMemory = memoryStats.get('Renderbuffer Memory').count;\n    metrics.gpuMemory = memoryStats.get('GPU Memory').count;\n  }\n\n}\nDeck.getPropTypes = getPropTypes;\nDeck.defaultProps = defaultProps;\nDeck.VERSION = deckGlobal.VERSION;","map":{"version":3,"mappings":"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","names":["LayerManager","ViewManager","MapView","EffectManager","Effect","DeckRenderer","DeckPicker","Tooltip","log","deepEqual","typedArrayManager","deckGlobal","getBrowser","AnimationLoop","createGLContext","instrumentGLContext","setParameters","Timeline","lumaStats","Stats","EventManager","assert","EVENTS","noop","getCursor","isDragging","getPropTypes","PropTypes","id","string","width","oneOfType","number","height","layers","object","array","layerFilter","func","views","viewState","effects","arrayOf","instanceOf","controller","bool","gl","glOptions","parameters","pickingRadius","useDevicePixels","touchAction","eventRecognizerOptions","onWebGLInitialized","onResize","onViewStateChange","onInteractionStateChange","onBeforeRender","onAfterRender","onLoad","onError","debug","drawPickingColors","_framebuffer","_animate","_pickable","_typedArrayManagerProps","defaultProps","error","layer","_onMetrics","Deck","constructor","props","viewManager","layerManager","effectManager","deckRenderer","deckPicker","_needsRedraw","_pickRequest","_lastPointerDownInfo","interactiveState","isHovering","_onEvent","bind","_onPointerDown","_onPointerMove","initialViewState","warn","document","canvas","_createCanvas","animationLoop","_createAnimationLoop","stats","metrics","fps","setPropsTime","updateAttributesTime","framesRedrawn","pickTime","pickCount","gpuTime","gpuTimePerFrame","cpuTime","cpuTimePerFrame","bufferMemory","textureMemory","renderbufferMemory","gpuMemory","_metricsCounter","setProps","start","finalize","stop","eventManager","destroy","tooltip","remove","parentElement","removeChild","get","timeStart","removed","Object","assign","_setCanvasSize","resolvedProps","create","_getViews","_getViewState","activateViewport","getViewports","timeEnd","needsRedraw","opts","clearRedrawFlags","redraw","viewManagerNeedsRedraw","layerManagerNeedsRedraw","effectManagerNeedsRedraw","deckRendererNeedsRedraw","force","redrawReason","incrementCount","_customRender","_drawLayers","getViews","rect","pickObject","infos","_pick","result","length","pickMultipleObjects","depth","pickObjects","_addResources","resources","forceUpdate","resourceManager","add","resourceId","data","_removeResources","resourceIds","method","statKey","getLayers","viewports","onViewportActive","getEffects","getElementById","createElement","parent","body","appendChild","style","Number","isFinite","position","_updateCanvasSize","_checkForCanvasSizeChange","newWidth","clientWidth","newHeight","clientHeight","autoResizeDrawingBuffer","autoResizeViewport","onCreateContext","onContextLost","_onContextLost","onInitialize","context","_setGLContext","onRender","_onRenderFrame","Array","isArray","Error","event","type","x","y","radius","leftButton","rightButton","pos","offsetCenter","mousePosition","mode","_pickAndCallback","emptyInfo","pickedInfo","handled","info","onHover","getTooltip","displayInfo","setTooltip","_updateCursor","container","cursor","enable","copyState","blend","blendFunc","polygonOffsetFill","depthTest","depthFunc","timeline","play","attachTimeline","recognizerOptions","events","pointerdown","pointermove","pointerleave","eventType","on","_onViewStateChange","_onInteractionStateChange","viewport","deck","renderOptions","renderLayers","target","pass","animationProps","_getFrameStats","_getMetrics","reset","table","isVisible","updateLayers","updateViewStates","params","viewId","interactionState","eventOptions","getLastPickedObject","layerHandler","handler","rootHandler","call","animationLoopStats","addTime","lastTiming","getHz","time","count","getAverageTime","memoryStats","VERSION"],"sources":["../../../src/lib/deck.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport LayerManager from './layer-manager';\nimport ViewManager from './view-manager';\nimport MapView from '../views/map-view';\nimport EffectManager from './effect-manager';\nimport Effect from './effect';\nimport DeckRenderer from './deck-renderer';\nimport DeckPicker from './deck-picker';\nimport Tooltip from './tooltip';\nimport log from '../utils/log';\nimport {deepEqual} from '../utils/deep-equal';\nimport typedArrayManager from '../utils/typed-array-manager';\nimport deckGlobal from './init';\n\nimport {getBrowser} from '@probe.gl/env';\nimport GL from '@luma.gl/constants';\nimport {\n  AnimationLoop,\n  createGLContext,\n  instrumentGLContext,\n  setParameters,\n  Timeline,\n  lumaStats\n} from '@luma.gl/core';\nimport {Stats} from '@probe.gl/stats';\nimport {EventManager} from 'mjolnir.js';\n\nimport assert from '../utils/assert';\nimport {EVENTS} from './constants';\n/* global document */\n\nfunction noop() {}\n\nconst getCursor = ({isDragging}) => (isDragging ? 'grabbing' : 'grab');\n\nfunction getPropTypes(PropTypes) {\n  // Note: Arrays (layers, views, ) can contain falsy values\n  return {\n    id: PropTypes.string,\n    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n    // layer/view/controller settings\n    layers: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    layerFilter: PropTypes.func,\n    views: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    viewState: PropTypes.object,\n    effects: PropTypes.arrayOf(PropTypes.instanceOf(Effect)),\n    controller: PropTypes.oneOfType([PropTypes.func, PropTypes.bool, PropTypes.object]),\n\n    // GL settings\n    gl: PropTypes.object,\n    glOptions: PropTypes.object,\n    parameters: PropTypes.object,\n    pickingRadius: PropTypes.number,\n    useDevicePixels: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n    touchAction: PropTypes.string,\n    eventRecognizerOptions: PropTypes.object,\n\n    // Callbacks\n    onWebGLInitialized: PropTypes.func,\n    onResize: PropTypes.func,\n    onViewStateChange: PropTypes.func,\n    onInteractionStateChange: PropTypes.func,\n    onBeforeRender: PropTypes.func,\n    onAfterRender: PropTypes.func,\n    onLoad: PropTypes.func,\n    onError: PropTypes.func,\n\n    // Debug settings\n    debug: PropTypes.bool,\n    drawPickingColors: PropTypes.bool,\n\n    // Experimental props\n    _framebuffer: PropTypes.object,\n    // Forces a redraw every animation frame\n    _animate: PropTypes.bool,\n\n    // UNSAFE options - not exhaustively tested, not guaranteed to work in all cases, use at your own risk\n\n    // Set to false to disable picking - avoiding picking buffer creation can save memory for mobile web browsers\n    _pickable: PropTypes.bool,\n\n    // Adjust parameters of typed array manager, can save memory e.g. for mobile web browsers\n    _typedArrayManagerProps: PropTypes.object //  {overAlloc: number, poolSize: number}\n  };\n}\n\nconst defaultProps = {\n  id: '',\n  width: '100%',\n  height: '100%',\n\n  pickingRadius: 0,\n  layerFilter: null,\n  glOptions: {},\n  gl: null,\n  layers: [],\n  effects: [],\n  views: null,\n  controller: null, // Rely on external controller, e.g. react-map-gl\n  useDevicePixels: true,\n  touchAction: 'none',\n  eventRecognizerOptions: {},\n  _framebuffer: null,\n  _animate: false,\n  _pickable: true,\n  _typedArrayManagerProps: {},\n\n  onWebGLInitialized: noop,\n  onResize: noop,\n  onViewStateChange: noop,\n  onInteractionStateChange: noop,\n  onBeforeRender: noop,\n  onAfterRender: noop,\n  onLoad: noop,\n  onError: (error, layer) => log.error(error)(),\n  _onMetrics: null,\n\n  getCursor,\n\n  debug: false,\n  drawPickingColors: false\n};\n\n/* eslint-disable max-statements */\nexport default class Deck {\n  constructor(props) {\n    props = {...defaultProps, ...props};\n    this.props = {};\n\n    this.width = 0; // \"read-only\", auto-updated from canvas\n    this.height = 0; // \"read-only\", auto-updated from canvas\n\n    // Maps view descriptors to vieports, rebuilds when width/height/viewState/views change\n    this.viewManager = null;\n    this.layerManager = null;\n    this.effectManager = null;\n    this.deckRenderer = null;\n    this.deckPicker = null;\n\n    this._needsRedraw = true;\n    this._pickRequest = {};\n    // Pick and store the object under the pointer on `pointerdown`.\n    // This object is reused for subsequent `onClick` and `onDrag*` callbacks.\n    this._lastPointerDownInfo = null;\n\n    this.viewState = null; // Internal view state if no callback is supplied\n    this.interactiveState = {\n      isHovering: false, // Whether the cursor is over a pickable object\n      isDragging: false // Whether the cursor is down\n    };\n\n    // Bind methods\n    this._onEvent = this._onEvent.bind(this);\n    this._onPointerDown = this._onPointerDown.bind(this);\n    this._onPointerMove = this._onPointerMove.bind(this);\n\n    if (props.viewState && props.initialViewState) {\n      log.warn(\n        'View state tracking is disabled. Use either `initialViewState` for auto update or `viewState` for manual update.'\n      )();\n    }\n    if (getBrowser() === 'IE') {\n      log.warn('IE 11 support will be deprecated in v8.0')();\n    }\n\n    if (!props.gl) {\n      // Note: LayerManager creation deferred until gl context available\n      if (typeof document !== 'undefined') {\n        this.canvas = this._createCanvas(props);\n      }\n    }\n    this.animationLoop = this._createAnimationLoop(props);\n\n    this.stats = new Stats({id: 'deck.gl'});\n    this.metrics = {\n      fps: 0,\n      setPropsTime: 0,\n      updateAttributesTime: 0,\n      framesRedrawn: 0,\n      pickTime: 0,\n      pickCount: 0,\n      gpuTime: 0,\n      gpuTimePerFrame: 0,\n      cpuTime: 0,\n      cpuTimePerFrame: 0,\n      bufferMemory: 0,\n      textureMemory: 0,\n      renderbufferMemory: 0,\n      gpuMemory: 0\n    };\n    this._metricsCounter = 0;\n\n    this.setProps(props);\n\n    // UNSAFE/experimental prop: only set at initialization to avoid performance hit\n    if (props._typedArrayManagerProps) {\n      typedArrayManager.setProps(props._typedArrayManagerProps);\n    }\n\n    this.animationLoop.start();\n  }\n\n  finalize() {\n    this.animationLoop.stop();\n    this.animationLoop = null;\n    this._lastPointerDownInfo = null;\n\n    if (this.layerManager) {\n      this.layerManager.finalize();\n      this.layerManager = null;\n\n      this.viewManager.finalize();\n      this.viewManager = null;\n\n      this.effectManager.finalize();\n      this.effectManager = null;\n\n      this.deckRenderer.finalize();\n      this.deckRenderer = null;\n\n      this.deckPicker.finalize();\n      this.deckPicker = null;\n\n      this.eventManager.destroy();\n      this.eventManager = null;\n\n      this.tooltip.remove();\n      this.tooltip = null;\n    }\n\n    if (!this.props.canvas && !this.props.gl && this.canvas) {\n      // remove internally created canvas\n      this.canvas.parentElement.removeChild(this.canvas);\n      this.canvas = null;\n    }\n  }\n\n  setProps(props) {\n    this.stats.get('setProps Time').timeStart();\n\n    if ('onLayerHover' in props) {\n      log.removed('onLayerHover', 'onHover')();\n    }\n    if ('onLayerClick' in props) {\n      log.removed('onLayerClick', 'onClick')();\n    }\n    if (props.initialViewState && !deepEqual(this.props.initialViewState, props.initialViewState)) {\n      // Overwrite internal view state\n      this.viewState = props.initialViewState;\n    }\n\n    // Merge with existing props\n    Object.assign(this.props, props);\n\n    // Update CSS size of canvas\n    this._setCanvasSize(this.props);\n\n    // We need to overwrite CSS style width and height with actual, numeric values\n    const resolvedProps = Object.create(this.props);\n    Object.assign(resolvedProps, {\n      views: this._getViews(),\n      width: this.width,\n      height: this.height,\n      viewState: this._getViewState()\n    });\n\n    // Update the animation loop\n    this.animationLoop.setProps(resolvedProps);\n\n    // If initialized, update sub manager props\n    if (this.layerManager) {\n      this.viewManager.setProps(resolvedProps);\n      // Make sure that any new layer gets initialized with the current viewport\n      this.layerManager.activateViewport(this.getViewports()[0]);\n      this.layerManager.setProps(resolvedProps);\n      this.effectManager.setProps(resolvedProps);\n      this.deckRenderer.setProps(resolvedProps);\n      this.deckPicker.setProps(resolvedProps);\n    }\n\n    this.stats.get('setProps Time').timeEnd();\n  }\n\n  // Public API\n  // Check if a redraw is needed\n  // Returns `false` or a string summarizing the redraw reason\n  // opts.clearRedrawFlags (Boolean) - clear the redraw flag. Default `true`\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    if (this.props._animate) {\n      return 'Deck._animate';\n    }\n\n    let redraw = this._needsRedraw;\n\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    const viewManagerNeedsRedraw = this.viewManager.needsRedraw(opts);\n    const layerManagerNeedsRedraw = this.layerManager.needsRedraw(opts);\n    const effectManagerNeedsRedraw = this.effectManager.needsRedraw(opts);\n    const deckRendererNeedsRedraw = this.deckRenderer.needsRedraw(opts);\n\n    redraw =\n      redraw ||\n      viewManagerNeedsRedraw ||\n      layerManagerNeedsRedraw ||\n      effectManagerNeedsRedraw ||\n      deckRendererNeedsRedraw;\n    return redraw;\n  }\n\n  redraw(force) {\n    if (!this.layerManager) {\n      // Not yet initialized\n      return;\n    }\n    // If force is falsy, check if we need to redraw\n    const redrawReason = force || this.needsRedraw({clearRedrawFlags: true});\n\n    if (!redrawReason) {\n      return;\n    }\n\n    this.stats.get('Redraw Count').incrementCount();\n    if (this.props._customRender) {\n      this.props._customRender(redrawReason);\n    } else {\n      this._drawLayers(redrawReason);\n    }\n  }\n\n  getViews() {\n    return this.viewManager.views;\n  }\n\n  // Get a set of viewports for a given width and height\n  getViewports(rect) {\n    return this.viewManager.getViewports(rect);\n  }\n\n  /* {x, y, radius = 0, layerIds = null, unproject3D} */\n  pickObject(opts) {\n    const infos = this._pick('pickObject', 'pickObject Time', opts).result;\n    return infos.length ? infos[0] : null;\n  }\n\n  /* {x, y, radius = 0, layerIds = null, unproject3D, depth = 10} */\n  pickMultipleObjects(opts) {\n    opts.depth = opts.depth || 10;\n    return this._pick('pickObject', 'pickMultipleObjects Time', opts).result;\n  }\n\n  /* {x, y, width = 1, height = 1, layerIds = null} */\n  pickObjects(opts) {\n    return this._pick('pickObjects', 'pickObjects Time', opts);\n  }\n\n  // Experimental\n\n  _addResources(resources, forceUpdate = false) {\n    for (const id in resources) {\n      this.layerManager.resourceManager.add({resourceId: id, data: resources[id], forceUpdate});\n    }\n  }\n\n  _removeResources(resourceIds) {\n    for (const id of resourceIds) {\n      this.layerManager.resourceManager.remove(id);\n    }\n  }\n\n  // Private Methods\n\n  _pick(method, statKey, opts) {\n    const {stats} = this;\n\n    stats.get('Pick Count').incrementCount();\n    stats.get(statKey).timeStart();\n\n    const infos = this.deckPicker[method]({\n      layers: this.layerManager.getLayers(opts),\n      views: this.viewManager.getViews(),\n      viewports: this.getViewports(opts),\n      onViewportActive: this.layerManager.activateViewport,\n      effects: this.effectManager.getEffects(),\n      ...opts\n    });\n\n    stats.get(statKey).timeEnd();\n\n    return infos;\n  }\n\n  // canvas, either string, canvas or `null`\n  _createCanvas(props) {\n    let canvas = props.canvas;\n\n    // TODO EventManager should accept element id\n    if (typeof canvas === 'string') {\n      canvas = document.getElementById(canvas);\n      assert(canvas);\n    }\n\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.id = props.id || 'deckgl-overlay';\n      const parent = props.parent || document.body;\n      parent.appendChild(canvas);\n    }\n\n    Object.assign(canvas.style, props.style);\n\n    return canvas;\n  }\n\n  // Updates canvas width and/or height, if provided as props\n  _setCanvasSize(props) {\n    if (!this.canvas) {\n      return;\n    }\n\n    let {width, height} = props;\n    // Set size ONLY if props are being provided, otherwise let canvas be layouted freely\n    if (width || width === 0) {\n      width = Number.isFinite(width) ? `${width}px` : width;\n      this.canvas.style.width = width;\n    }\n    if (height || height === 0) {\n      height = Number.isFinite(height) ? `${height}px` : height;\n      // Note: position==='absolute' required for height 100% to work\n      this.canvas.style.position = 'absolute';\n      this.canvas.style.height = height;\n    }\n  }\n\n  // If canvas size has changed, updates\n  _updateCanvasSize() {\n    if (this._checkForCanvasSizeChange()) {\n      const {width, height} = this;\n      this.viewManager.setProps({width, height});\n      this.props.onResize({width: this.width, height: this.height});\n    }\n  }\n\n  // If canvas size has changed, reads out the new size and returns true\n  _checkForCanvasSizeChange() {\n    const {canvas} = this;\n    if (!canvas) {\n      return false;\n    }\n    // Fallback to width/height when clientWidth/clientHeight are 0 or undefined.\n    const newWidth = canvas.clientWidth || canvas.width;\n    const newHeight = canvas.clientHeight || canvas.height;\n    if (newWidth !== this.width || newHeight !== this.height) {\n      this.width = newWidth;\n      this.height = newHeight;\n      return true;\n    }\n    return false;\n  }\n\n  _createAnimationLoop(props) {\n    const {\n      width,\n      height,\n      gl,\n      glOptions,\n      debug,\n      onError,\n      onBeforeRender,\n      onAfterRender,\n      useDevicePixels,\n      autoResizeDrawingBuffer\n    } = props;\n\n    return new AnimationLoop({\n      width,\n      height,\n      useDevicePixels,\n      autoResizeDrawingBuffer,\n      autoResizeViewport: false,\n      gl,\n      onCreateContext: opts =>\n        createGLContext({\n          ...glOptions,\n          ...opts,\n          canvas: this.canvas,\n          debug,\n          onContextLost: () => this._onContextLost()\n        }),\n      onInitialize: context => this._setGLContext(context.gl),\n      onRender: this._onRenderFrame.bind(this),\n      onBeforeRender,\n      onAfterRender,\n      onError\n    });\n  }\n\n  // Get the most relevant view state: props.viewState, if supplied, shadows internal viewState\n  // TODO: For backwards compatibility ensure numeric width and height is added to the viewState\n  _getViewState() {\n    return this.props.viewState || this.viewState;\n  }\n\n  // Get the view descriptor list\n  _getViews() {\n    // Default to a full screen map view port\n    let views = this.props.views || [new MapView({id: 'default-view'})];\n    views = Array.isArray(views) ? views : [views];\n    if (views.length && this.props.controller) {\n      // Backward compatibility: support controller prop\n      views[0].props.controller = this.props.controller;\n    }\n    return views;\n  }\n\n  _onContextLost() {\n    const {onError} = this.props;\n    if (this.animationLoop && onError) {\n      onError(new Error(`WebGL context is lost`));\n    }\n  }\n\n  // The `pointermove` event may fire multiple times in between two animation frames,\n  // it's a waste of time to run picking without rerender. Instead we save the last pick\n  // request and only do it once on the next animation frame.\n  _onPointerMove(event) {\n    const {_pickRequest} = this;\n    if (event.type === 'pointerleave') {\n      _pickRequest.x = -1;\n      _pickRequest.y = -1;\n      _pickRequest.radius = 0;\n    } else if (event.leftButton || event.rightButton) {\n      // Do not trigger onHover callbacks if mouse button is down.\n      return;\n    } else {\n      const pos = event.offsetCenter;\n      // Do not trigger callbacks when click/hover position is invalid. Doing so will cause a\n      // assertion error when attempting to unproject the position.\n      if (!pos) {\n        return;\n      }\n      _pickRequest.x = pos.x;\n      _pickRequest.y = pos.y;\n      _pickRequest.radius = this.props.pickingRadius;\n    }\n\n    if (this.layerManager) {\n      this.layerManager.context.mousePosition = {x: _pickRequest.x, y: _pickRequest.y};\n    }\n\n    _pickRequest.event = event;\n    _pickRequest.mode = 'hover';\n  }\n\n  // Actually run picking\n  _pickAndCallback() {\n    const {_pickRequest} = this;\n\n    if (_pickRequest.event) {\n      // Perform picking\n      const {result, emptyInfo} = this._pick('pickObject', 'pickObject Time', _pickRequest);\n      this.interactiveState.isHovering = result.length > 0;\n\n      // There are 4 possible scenarios:\n      // result is [outInfo, pickedInfo] (moved from one pickable layer to another)\n      // result is [outInfo] (moved outside of a pickable layer)\n      // result is [pickedInfo] (moved into or over a pickable layer)\n      // result is [] (nothing is or was picked)\n      //\n      // `layer.props.onHover` should be called on all affected layers (out/over)\n      // `deck.props.onHover` should be called with the picked info if any, or empty info otherwise\n      // `deck.props.getTooltip` should be called with the picked info if any, or empty info otherwise\n\n      // Execute callbacks\n      let pickedInfo = emptyInfo;\n      let handled = false;\n      for (const info of result) {\n        pickedInfo = info;\n        handled = info.layer.onHover(info, _pickRequest.event);\n      }\n      if (!handled && this.props.onHover) {\n        this.props.onHover(pickedInfo, _pickRequest.event);\n      }\n\n      // Update tooltip\n      if (this.props.getTooltip) {\n        const displayInfo = this.props.getTooltip(pickedInfo);\n        this.tooltip.setTooltip(displayInfo, pickedInfo.x, pickedInfo.y);\n      }\n\n      // Clear pending pickRequest\n      _pickRequest.event = null;\n    }\n  }\n\n  _updateCursor() {\n    const container = this.props.parent || this.canvas;\n    if (container) {\n      container.style.cursor = this.props.getCursor(this.interactiveState);\n    }\n  }\n\n  _setGLContext(gl) {\n    if (this.layerManager) {\n      return;\n    }\n\n    // if external context...\n    if (!this.canvas) {\n      this.canvas = gl.canvas;\n      instrumentGLContext(gl, {enable: true, copyState: true});\n    }\n\n    this.tooltip = new Tooltip(this.canvas);\n\n    setParameters(gl, {\n      blend: true,\n      blendFunc: [GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA, GL.ONE, GL.ONE_MINUS_SRC_ALPHA],\n      polygonOffsetFill: true,\n      depthTest: true,\n      depthFunc: GL.LEQUAL\n    });\n\n    this.props.onWebGLInitialized(gl);\n\n    // timeline for transitions\n    const timeline = new Timeline();\n    timeline.play();\n    this.animationLoop.attachTimeline(timeline);\n\n    this.eventManager = new EventManager(this.props.parent || gl.canvas, {\n      touchAction: this.props.touchAction,\n      recognizerOptions: this.props.eventRecognizerOptions,\n      events: {\n        pointerdown: this._onPointerDown,\n        pointermove: this._onPointerMove,\n        pointerleave: this._onPointerMove\n      }\n    });\n    for (const eventType in EVENTS) {\n      this.eventManager.on(eventType, this._onEvent);\n    }\n\n    this.viewManager = new ViewManager({\n      timeline,\n      eventManager: this.eventManager,\n      onViewStateChange: this._onViewStateChange.bind(this),\n      onInteractionStateChange: this._onInteractionStateChange.bind(this),\n      views: this._getViews(),\n      viewState: this._getViewState(),\n      width: this.width,\n      height: this.height\n    });\n\n    // viewManager must be initialized before layerManager\n    // layerManager depends on viewport created by viewManager.\n    const viewport = this.viewManager.getViewports()[0];\n\n    // Note: avoid React setState due GL animation loop / setState timing issue\n    this.layerManager = new LayerManager(gl, {\n      deck: this,\n      stats: this.stats,\n      viewport,\n      timeline\n    });\n\n    this.effectManager = new EffectManager();\n\n    this.deckRenderer = new DeckRenderer(gl);\n\n    this.deckPicker = new DeckPicker(gl);\n\n    this.setProps(this.props);\n\n    this._updateCanvasSize();\n    this.props.onLoad();\n  }\n\n  _drawLayers(redrawReason, renderOptions) {\n    const {gl} = this.layerManager.context;\n\n    setParameters(gl, this.props.parameters);\n\n    this.props.onBeforeRender({gl});\n\n    this.deckRenderer.renderLayers({\n      target: this.props._framebuffer,\n      layers: this.layerManager.getLayers(),\n      viewports: this.viewManager.getViewports(),\n      onViewportActive: this.layerManager.activateViewport,\n      views: this.viewManager.getViews(),\n      pass: 'screen',\n      redrawReason,\n      effects: this.effectManager.getEffects(),\n      ...renderOptions\n    });\n\n    this.props.onAfterRender({gl});\n  }\n\n  // Callbacks\n\n  _onRenderFrame(animationProps) {\n    this._getFrameStats();\n\n    // Log perf stats every second\n    if (this._metricsCounter++ % 60 === 0) {\n      this._getMetrics();\n      this.stats.reset();\n      log.table(4, this.metrics)();\n\n      // Experimental: report metrics\n      if (this.props._onMetrics) {\n        this.props._onMetrics(this.metrics);\n      }\n    }\n\n    this._updateCanvasSize();\n\n    this._updateCursor();\n\n    // If view state has changed, clear tooltip\n    if (this.tooltip.isVisible && this.viewManager.needsRedraw()) {\n      this.tooltip.setTooltip(null);\n    }\n\n    // Update layers if needed (e.g. some async prop has loaded)\n    // Note: This can trigger a redraw\n    this.layerManager.updateLayers();\n\n    // Perform picking request if any\n    this._pickAndCallback();\n\n    // Redraw if necessary\n    this.redraw(false);\n\n    // Update viewport transition if needed\n    // Note: this can trigger `onViewStateChange`, and affect layers\n    // We want to defer these changes to the next frame\n    if (this.viewManager) {\n      this.viewManager.updateViewStates();\n    }\n  }\n\n  // Callbacks\n\n  _onViewStateChange(params) {\n    // Let app know that view state is changing, and give it a chance to change it\n    const viewState = this.props.onViewStateChange(params) || params.viewState;\n\n    // If initialViewState was set on creation, auto track position\n    if (this.viewState) {\n      this.viewState = {...this.viewState, [params.viewId]: viewState};\n      if (!this.props.viewState) {\n        // Apply internal view state\n        if (this.viewManager) {\n          this.viewManager.setProps({viewState: this.viewState});\n        }\n      }\n    }\n  }\n\n  _onInteractionStateChange(interactionState) {\n    this.interactiveState.isDragging = interactionState.isDragging;\n    this.props.onInteractionStateChange(interactionState);\n  }\n\n  _onEvent(event) {\n    const eventOptions = EVENTS[event.type];\n    const pos = event.offsetCenter;\n\n    if (!eventOptions || !pos) {\n      return;\n    }\n\n    // Reuse last picked object\n    const layers = this.layerManager.getLayers();\n    const info = this.deckPicker.getLastPickedObject(\n      {\n        x: pos.x,\n        y: pos.y,\n        layers,\n        viewports: this.getViewports(pos)\n      },\n      this._lastPointerDownInfo\n    );\n\n    const {layer} = info;\n    const layerHandler =\n      layer && (layer[eventOptions.handler] || layer.props[eventOptions.handler]);\n    const rootHandler = this.props[eventOptions.handler];\n    let handled = false;\n\n    if (layerHandler) {\n      handled = layerHandler.call(layer, info, event);\n    }\n    if (!handled && rootHandler) {\n      rootHandler(info, event);\n    }\n  }\n\n  _onPointerDown(event) {\n    const pos = event.offsetCenter;\n    const pickedInfo = this._pick('pickObject', 'pickObject Time', {\n      x: pos.x,\n      y: pos.y,\n      radius: this.props.pickingRadius\n    });\n    this._lastPointerDownInfo = pickedInfo.result[0] || pickedInfo.emptyInfo;\n  }\n\n  _getFrameStats() {\n    const {stats} = this;\n    stats.get('frameRate').timeEnd();\n    stats.get('frameRate').timeStart();\n\n    // Get individual stats from luma.gl so reset works\n    const animationLoopStats = this.animationLoop.stats;\n    stats.get('GPU Time').addTime(animationLoopStats.get('GPU Time').lastTiming);\n    stats.get('CPU Time').addTime(animationLoopStats.get('CPU Time').lastTiming);\n  }\n\n  _getMetrics() {\n    const {metrics, stats} = this;\n    metrics.fps = stats.get('frameRate').getHz();\n    metrics.setPropsTime = stats.get('setProps Time').time;\n    metrics.updateAttributesTime = stats.get('Update Attributes').time;\n    metrics.framesRedrawn = stats.get('Redraw Count').count;\n    metrics.pickTime =\n      stats.get('pickObject Time').time +\n      stats.get('pickMultipleObjects Time').time +\n      stats.get('pickObjects Time').time;\n    metrics.pickCount = stats.get('Pick Count').count;\n\n    // Luma stats\n    metrics.gpuTime = stats.get('GPU Time').time;\n    metrics.cpuTime = stats.get('CPU Time').time;\n    metrics.gpuTimePerFrame = stats.get('GPU Time').getAverageTime();\n    metrics.cpuTimePerFrame = stats.get('CPU Time').getAverageTime();\n\n    const memoryStats = lumaStats.get('Memory Usage');\n    metrics.bufferMemory = memoryStats.get('Buffer Memory').count;\n    metrics.textureMemory = memoryStats.get('Texture Memory').count;\n    metrics.renderbufferMemory = memoryStats.get('Renderbuffer Memory').count;\n    metrics.gpuMemory = memoryStats.get('GPU Memory').count;\n  }\n}\n\nDeck.getPropTypes = getPropTypes;\nDeck.defaultProps = defaultProps;\n\n// This is used to defeat tree shaking of init.js\n// https://github.com/visgl/deck.gl/issues/3213\nDeck.VERSION = deckGlobal.VERSION;\n"]},"metadata":{},"sourceType":"module"}