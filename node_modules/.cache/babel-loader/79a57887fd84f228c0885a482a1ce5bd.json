{"ast":null,"code":"import { getParameters, setParameters, withParameters } from '@luma.gl/core';\nimport { createDeckInstance, destroyDeckInstance, getViewPropsFromOverlay, getViewPropsFromCoordinateTransformer } from './utils';\n\nconst HIDE_ALL_LAYERS = () => false;\n\nconst GL_STATE = {\n  depthMask: true,\n  depthTest: true,\n  blend: true,\n  blendFunc: [770, 771, 1, 771],\n  blendEquation: 32774\n};\n\nfunction noop() {}\n\nconst defaultProps = {\n  interleaved: true\n};\nexport default class GoogleMapsOverlay {\n  constructor(props) {\n    this.props = {};\n    this._map = null;\n    this.setProps({ ...defaultProps,\n      ...props\n    });\n  }\n\n  setMap(map) {\n    if (map === this._map) {\n      return;\n    }\n\n    if (this._map) {\n      this._overlay.setMap(null);\n\n      this._map = null;\n    }\n\n    if (map) {\n      this._map = map;\n      const {\n        UNINITIALIZED\n      } = google.maps.RenderingType;\n      const renderingType = map.getRenderingType();\n\n      if (renderingType !== UNINITIALIZED) {\n        this._createOverlay(map);\n      } else {\n        map.addListener('renderingtype_changed', () => {\n          this._createOverlay(map);\n        });\n      }\n    }\n  }\n\n  setProps(props) {\n    Object.assign(this.props, props);\n\n    if (this._deck) {\n      if (props.style) {\n        Object.assign(this._deck.canvas.parentElement.style, props.style);\n        props.style = null;\n      }\n\n      this._deck.setProps(props);\n    }\n  }\n\n  pickObject(params) {\n    return this._deck && this._deck.pickObject(params);\n  }\n\n  pickMultipleObjects(params) {\n    return this._deck && this._deck.pickMultipleObjects(params);\n  }\n\n  pickObjects(params) {\n    return this._deck && this._deck.pickObjects(params);\n  }\n\n  finalize() {\n    this.setMap(null);\n\n    if (this._deck) {\n      destroyDeckInstance(this._deck);\n      this._deck = null;\n    }\n  }\n\n  _createOverlay(map) {\n    const {\n      interleaved\n    } = this.props;\n    const {\n      VECTOR,\n      UNINITIALIZED\n    } = google.maps.RenderingType;\n    const renderingType = map.getRenderingType();\n\n    if (renderingType === UNINITIALIZED) {\n      return;\n    }\n\n    const isVectorMap = renderingType === VECTOR && google.maps.WebGLOverlayView;\n    const OverlayView = isVectorMap ? google.maps.WebGLOverlayView : google.maps.OverlayView;\n    const overlay = new OverlayView();\n\n    if (isVectorMap) {\n      if (interleaved) {\n        overlay.onAdd = noop;\n        overlay.onContextRestored = this._onContextRestored.bind(this);\n        overlay.onDraw = this._onDrawVectorInterleaved.bind(this);\n      } else {\n        overlay.onAdd = this._onAdd.bind(this);\n        overlay.onContextRestored = noop;\n        overlay.onDraw = this._onDrawVectorOverlay.bind(this);\n      }\n\n      overlay.onContextLost = this._onContextLost.bind(this);\n    } else {\n      overlay.onAdd = this._onAdd.bind(this);\n      overlay.draw = this._onDrawRaster.bind(this);\n    }\n\n    overlay.onRemove = this._onRemove.bind(this);\n    this._overlay = overlay;\n\n    this._overlay.setMap(map);\n  }\n\n  _onAdd() {\n    this._deck = createDeckInstance(this._map, this._overlay, this._deck, this.props);\n  }\n\n  _onContextRestored(_ref) {\n    let {\n      gl\n    } = _ref;\n\n    const _customRender = () => {\n      this._overlay.requestRedraw();\n    };\n\n    const deck = createDeckInstance(this._map, this._overlay, this._deck, {\n      gl,\n      _customRender,\n      ...this.props\n    });\n    this._deck = deck;\n\n    deck.animationLoop._renderFrame = () => {\n      const ab = gl.getParameter(34964);\n      withParameters(gl, {}, () => {\n        deck.animationLoop.onRender();\n      });\n      gl.bindBuffer(34962, ab);\n    };\n  }\n\n  _onContextLost() {\n    if (this._deck) {\n      destroyDeckInstance(this._deck);\n      this._deck = null;\n    }\n  }\n\n  _onRemove() {\n    this._deck.setProps({\n      layerFilter: HIDE_ALL_LAYERS\n    });\n  }\n\n  _onDrawRaster() {\n    const deck = this._deck;\n    const {\n      width,\n      height,\n      left,\n      top,\n      ...rest\n    } = getViewPropsFromOverlay(this._map, this._overlay);\n    const parentStyle = deck.canvas.parentElement.style;\n    parentStyle.left = \"\".concat(left, \"px\");\n    parentStyle.top = \"\".concat(top, \"px\");\n    const altitude = 10000;\n    deck.setProps({\n      width,\n      height,\n      viewState: {\n        altitude,\n        repeat: true,\n        ...rest\n      }\n    });\n    deck.redraw();\n  }\n\n  _onDrawVectorInterleaved(_ref2) {\n    let {\n      gl,\n      transformer\n    } = _ref2;\n\n    if (!this._deck || !this._map) {\n      return;\n    }\n\n    const deck = this._deck;\n    deck.setProps({ ...getViewPropsFromCoordinateTransformer(this._map, transformer),\n      width: false,\n      height: false\n    });\n\n    if (deck.layerManager) {\n      const _framebuffer = getParameters(gl, 36006);\n\n      deck.setProps({\n        _framebuffer\n      });\n      deck.needsRedraw({\n        clearRedrawFlags: true\n      });\n      setParameters(gl, {\n        viewport: [0, 0, gl.canvas.width, gl.canvas.height],\n        scissor: [0, 0, gl.canvas.width, gl.canvas.height],\n        stencilFunc: [519, 0, 255, 519, 0, 255]\n      });\n      withParameters(gl, GL_STATE, () => {\n        deck._drawLayers('google-vector', {\n          clearCanvas: false\n        });\n      });\n    }\n  }\n\n  _onDrawVectorOverlay(_ref3) {\n    let {\n      gl,\n      transformer\n    } = _ref3;\n\n    if (!this._deck || !this._map) {\n      return;\n    }\n\n    const deck = this._deck;\n    deck.setProps({ ...getViewPropsFromCoordinateTransformer(this._map, transformer)\n    });\n    deck.redraw();\n  }\n\n}","map":{"version":3,"mappings":"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","names":["getParameters","setParameters","withParameters","createDeckInstance","destroyDeckInstance","getViewPropsFromOverlay","getViewPropsFromCoordinateTransformer","HIDE_ALL_LAYERS","GL_STATE","depthMask","depthTest","blend","blendFunc","blendEquation","noop","defaultProps","interleaved","GoogleMapsOverlay","constructor","props","_map","setProps","setMap","map","_overlay","UNINITIALIZED","google","maps","RenderingType","renderingType","getRenderingType","_createOverlay","addListener","Object","assign","_deck","style","canvas","parentElement","pickObject","params","pickMultipleObjects","pickObjects","finalize","VECTOR","isVectorMap","WebGLOverlayView","OverlayView","overlay","onAdd","onContextRestored","_onContextRestored","bind","onDraw","_onDrawVectorInterleaved","_onAdd","_onDrawVectorOverlay","onContextLost","_onContextLost","draw","_onDrawRaster","onRemove","_onRemove","gl","_customRender","requestRedraw","deck","animationLoop","_renderFrame","ab","getParameter","onRender","bindBuffer","layerFilter","width","height","left","top","rest","parentStyle","altitude","viewState","repeat","redraw","transformer","layerManager","_framebuffer","needsRedraw","clearRedrawFlags","viewport","scissor","stencilFunc","_drawLayers","clearCanvas"],"sources":["../../src/google-maps-overlay.js"],"sourcesContent":["/* global google */\nimport {getParameters, setParameters, withParameters} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport {\n  createDeckInstance,\n  destroyDeckInstance,\n  getViewPropsFromOverlay,\n  getViewPropsFromCoordinateTransformer\n} from './utils';\n\nconst HIDE_ALL_LAYERS = () => false;\nconst GL_STATE = {\n  depthMask: true,\n  depthTest: true,\n  blend: true,\n  blendFunc: [GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA, GL.ONE, GL.ONE_MINUS_SRC_ALPHA],\n  blendEquation: GL.FUNC_ADD\n};\n\nfunction noop() {}\n\nconst defaultProps = {\n  interleaved: true\n};\n\nexport default class GoogleMapsOverlay {\n  constructor(props) {\n    this.props = {};\n    this._map = null;\n    this.setProps({...defaultProps, ...props});\n  }\n\n  /* Public API */\n\n  setMap(map) {\n    if (map === this._map) {\n      return;\n    }\n    if (this._map) {\n      this._overlay.setMap(null);\n      this._map = null;\n    }\n    if (map) {\n      this._map = map;\n      const {UNINITIALIZED} = google.maps.RenderingType;\n      const renderingType = map.getRenderingType();\n      if (renderingType !== UNINITIALIZED) {\n        this._createOverlay(map);\n      } else {\n        map.addListener('renderingtype_changed', () => {\n          this._createOverlay(map);\n        });\n      }\n    }\n  }\n\n  setProps(props) {\n    Object.assign(this.props, props);\n    if (this._deck) {\n      if (props.style) {\n        Object.assign(this._deck.canvas.parentElement.style, props.style);\n        props.style = null;\n      }\n      this._deck.setProps(props);\n    }\n  }\n\n  pickObject(params) {\n    return this._deck && this._deck.pickObject(params);\n  }\n\n  pickMultipleObjects(params) {\n    return this._deck && this._deck.pickMultipleObjects(params);\n  }\n\n  pickObjects(params) {\n    return this._deck && this._deck.pickObjects(params);\n  }\n\n  finalize() {\n    this.setMap(null);\n    if (this._deck) {\n      destroyDeckInstance(this._deck);\n      this._deck = null;\n    }\n  }\n\n  /* Private API */\n  _createOverlay(map) {\n    const {interleaved} = this.props;\n    const {VECTOR, UNINITIALIZED} = google.maps.RenderingType;\n    const renderingType = map.getRenderingType();\n    if (renderingType === UNINITIALIZED) {\n      return;\n    }\n    const isVectorMap = renderingType === VECTOR && google.maps.WebGLOverlayView;\n    const OverlayView = isVectorMap ? google.maps.WebGLOverlayView : google.maps.OverlayView;\n    const overlay = new OverlayView();\n\n    // Lifecycle methods are different depending on map type\n    if (isVectorMap) {\n      if (interleaved) {\n        overlay.onAdd = noop;\n        overlay.onContextRestored = this._onContextRestored.bind(this);\n        overlay.onDraw = this._onDrawVectorInterleaved.bind(this);\n      } else {\n        overlay.onAdd = this._onAdd.bind(this);\n        overlay.onContextRestored = noop;\n        overlay.onDraw = this._onDrawVectorOverlay.bind(this);\n      }\n      overlay.onContextLost = this._onContextLost.bind(this);\n    } else {\n      overlay.onAdd = this._onAdd.bind(this);\n      overlay.draw = this._onDrawRaster.bind(this);\n    }\n    overlay.onRemove = this._onRemove.bind(this);\n\n    this._overlay = overlay;\n    this._overlay.setMap(map);\n  }\n\n  _onAdd() {\n    this._deck = createDeckInstance(this._map, this._overlay, this._deck, this.props);\n  }\n\n  _onContextRestored({gl}) {\n    const _customRender = () => {\n      this._overlay.requestRedraw();\n    };\n    const deck = createDeckInstance(this._map, this._overlay, this._deck, {\n      gl,\n      _customRender,\n      ...this.props\n    });\n    this._deck = deck;\n\n    // By default, animationLoop._renderFrame invokes\n    // animationLoop.onRender. We override this to wrap\n    // in withParameters so we don't modify the GL state\n    deck.animationLoop._renderFrame = () => {\n      const ab = gl.getParameter(gl.ARRAY_BUFFER_BINDING);\n      withParameters(gl, {}, () => {\n        deck.animationLoop.onRender();\n      });\n      gl.bindBuffer(gl.ARRAY_BUFFER, ab);\n    };\n  }\n\n  _onContextLost() {\n    // TODO this isn't working\n    if (this._deck) {\n      destroyDeckInstance(this._deck);\n      this._deck = null;\n    }\n  }\n\n  _onRemove() {\n    // Clear deck canvas\n    this._deck.setProps({layerFilter: HIDE_ALL_LAYERS});\n  }\n\n  _onDrawRaster() {\n    const deck = this._deck;\n    const {width, height, left, top, ...rest} = getViewPropsFromOverlay(this._map, this._overlay);\n\n    const parentStyle = deck.canvas.parentElement.style;\n    parentStyle.left = `${left}px`;\n    parentStyle.top = `${top}px`;\n\n    const altitude = 10000;\n    deck.setProps({\n      width,\n      height,\n      viewState: {altitude, repeat: true, ...rest}\n    });\n    // Deck is initialized\n    deck.redraw();\n  }\n\n  // Vector code path\n  _onDrawVectorInterleaved({gl, transformer}) {\n    if (!this._deck || !this._map) {\n      return;\n    }\n\n    const deck = this._deck;\n\n    deck.setProps({\n      ...getViewPropsFromCoordinateTransformer(this._map, transformer),\n\n      // Using external gl context - do not set css size\n      width: false,\n      height: false\n    });\n\n    if (deck.layerManager) {\n      // As an optimization, some renders are to an separate framebuffer\n      // which we need to pass onto deck\n      const _framebuffer = getParameters(gl, GL.FRAMEBUFFER_BINDING);\n      deck.setProps({_framebuffer});\n\n      // Camera changed, will trigger a map repaint right after this\n      // Clear any change flag triggered by setting viewState so that deck does not request\n      // a second repaint\n      deck.needsRedraw({clearRedrawFlags: true});\n\n      // Workaround for bug in Google maps where viewport state is wrong\n      // TODO remove once fixed\n      setParameters(gl, {\n        viewport: [0, 0, gl.canvas.width, gl.canvas.height],\n        scissor: [0, 0, gl.canvas.width, gl.canvas.height],\n        stencilFunc: [gl.ALWAYS, 0, 255, gl.ALWAYS, 0, 255]\n      });\n\n      withParameters(gl, GL_STATE, () => {\n        deck._drawLayers('google-vector', {\n          clearCanvas: false\n        });\n      });\n    }\n  }\n\n  _onDrawVectorOverlay({gl, transformer}) {\n    if (!this._deck || !this._map) {\n      return;\n    }\n\n    const deck = this._deck;\n    deck.setProps({\n      ...getViewPropsFromCoordinateTransformer(this._map, transformer)\n    });\n    deck.redraw();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}