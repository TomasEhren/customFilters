{"ast":null,"code":"import _objectWithoutProperties from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar _excluded = [\"width\", \"height\", \"left\", \"top\"];\nimport { getParameters, setParameters, withParameters } from '@luma.gl/core';\nimport { createDeckInstance, destroyDeckInstance, getViewPropsFromOverlay, getViewPropsFromCoordinateTransformer } from './utils';\n\nvar HIDE_ALL_LAYERS = function HIDE_ALL_LAYERS() {\n  return false;\n};\n\nvar GL_STATE = {\n  depthMask: true,\n  depthTest: true,\n  blend: true,\n  blendFunc: [770, 771, 1, 771],\n  blendEquation: 32774\n};\n\nfunction noop() {}\n\nvar defaultProps = {\n  interleaved: true\n};\n\nvar GoogleMapsOverlay = /*#__PURE__*/function () {\n  function GoogleMapsOverlay(props) {\n    _classCallCheck(this, GoogleMapsOverlay);\n\n    this.props = {};\n    this._map = null;\n    this.setProps(_objectSpread(_objectSpread({}, defaultProps), props));\n  }\n\n  _createClass(GoogleMapsOverlay, [{\n    key: \"setMap\",\n    value: function setMap(map) {\n      var _this = this;\n\n      if (map === this._map) {\n        return;\n      }\n\n      if (this._map) {\n        this._overlay.setMap(null);\n\n        this._map = null;\n      }\n\n      if (map) {\n        this._map = map;\n        var UNINITIALIZED = google.maps.RenderingType.UNINITIALIZED;\n        var renderingType = map.getRenderingType();\n\n        if (renderingType !== UNINITIALIZED) {\n          this._createOverlay(map);\n        } else {\n          map.addListener('renderingtype_changed', function () {\n            _this._createOverlay(map);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      Object.assign(this.props, props);\n\n      if (this._deck) {\n        if (props.style) {\n          Object.assign(this._deck.canvas.parentElement.style, props.style);\n          props.style = null;\n        }\n\n        this._deck.setProps(props);\n      }\n    }\n  }, {\n    key: \"pickObject\",\n    value: function pickObject(params) {\n      return this._deck && this._deck.pickObject(params);\n    }\n  }, {\n    key: \"pickMultipleObjects\",\n    value: function pickMultipleObjects(params) {\n      return this._deck && this._deck.pickMultipleObjects(params);\n    }\n  }, {\n    key: \"pickObjects\",\n    value: function pickObjects(params) {\n      return this._deck && this._deck.pickObjects(params);\n    }\n  }, {\n    key: \"finalize\",\n    value: function finalize() {\n      this.setMap(null);\n\n      if (this._deck) {\n        destroyDeckInstance(this._deck);\n        this._deck = null;\n      }\n    }\n  }, {\n    key: \"_createOverlay\",\n    value: function _createOverlay(map) {\n      var interleaved = this.props.interleaved;\n      var _google$maps$Renderin = google.maps.RenderingType,\n          VECTOR = _google$maps$Renderin.VECTOR,\n          UNINITIALIZED = _google$maps$Renderin.UNINITIALIZED;\n      var renderingType = map.getRenderingType();\n\n      if (renderingType === UNINITIALIZED) {\n        return;\n      }\n\n      var isVectorMap = renderingType === VECTOR && google.maps.WebGLOverlayView;\n      var OverlayView = isVectorMap ? google.maps.WebGLOverlayView : google.maps.OverlayView;\n      var overlay = new OverlayView();\n\n      if (isVectorMap) {\n        if (interleaved) {\n          overlay.onAdd = noop;\n          overlay.onContextRestored = this._onContextRestored.bind(this);\n          overlay.onDraw = this._onDrawVectorInterleaved.bind(this);\n        } else {\n          overlay.onAdd = this._onAdd.bind(this);\n          overlay.onContextRestored = noop;\n          overlay.onDraw = this._onDrawVectorOverlay.bind(this);\n        }\n\n        overlay.onContextLost = this._onContextLost.bind(this);\n      } else {\n        overlay.onAdd = this._onAdd.bind(this);\n        overlay.draw = this._onDrawRaster.bind(this);\n      }\n\n      overlay.onRemove = this._onRemove.bind(this);\n      this._overlay = overlay;\n\n      this._overlay.setMap(map);\n    }\n  }, {\n    key: \"_onAdd\",\n    value: function _onAdd() {\n      this._deck = createDeckInstance(this._map, this._overlay, this._deck, this.props);\n    }\n  }, {\n    key: \"_onContextRestored\",\n    value: function _onContextRestored(_ref) {\n      var _this2 = this;\n\n      var gl = _ref.gl;\n\n      var _customRender = function _customRender() {\n        _this2._overlay.requestRedraw();\n      };\n\n      var deck = createDeckInstance(this._map, this._overlay, this._deck, _objectSpread({\n        gl: gl,\n        _customRender: _customRender\n      }, this.props));\n      this._deck = deck;\n\n      deck.animationLoop._renderFrame = function () {\n        var ab = gl.getParameter(34964);\n        withParameters(gl, {}, function () {\n          deck.animationLoop.onRender();\n        });\n        gl.bindBuffer(34962, ab);\n      };\n    }\n  }, {\n    key: \"_onContextLost\",\n    value: function _onContextLost() {\n      if (this._deck) {\n        destroyDeckInstance(this._deck);\n        this._deck = null;\n      }\n    }\n  }, {\n    key: \"_onRemove\",\n    value: function _onRemove() {\n      this._deck.setProps({\n        layerFilter: HIDE_ALL_LAYERS\n      });\n    }\n  }, {\n    key: \"_onDrawRaster\",\n    value: function _onDrawRaster() {\n      var deck = this._deck;\n\n      var _getViewPropsFromOver = getViewPropsFromOverlay(this._map, this._overlay),\n          width = _getViewPropsFromOver.width,\n          height = _getViewPropsFromOver.height,\n          left = _getViewPropsFromOver.left,\n          top = _getViewPropsFromOver.top,\n          rest = _objectWithoutProperties(_getViewPropsFromOver, _excluded);\n\n      var parentStyle = deck.canvas.parentElement.style;\n      parentStyle.left = \"\".concat(left, \"px\");\n      parentStyle.top = \"\".concat(top, \"px\");\n      var altitude = 10000;\n      deck.setProps({\n        width: width,\n        height: height,\n        viewState: _objectSpread({\n          altitude: altitude,\n          repeat: true\n        }, rest)\n      });\n      deck.redraw();\n    }\n  }, {\n    key: \"_onDrawVectorInterleaved\",\n    value: function _onDrawVectorInterleaved(_ref2) {\n      var gl = _ref2.gl,\n          transformer = _ref2.transformer;\n\n      if (!this._deck || !this._map) {\n        return;\n      }\n\n      var deck = this._deck;\n      deck.setProps(_objectSpread(_objectSpread({}, getViewPropsFromCoordinateTransformer(this._map, transformer)), {}, {\n        width: false,\n        height: false\n      }));\n\n      if (deck.layerManager) {\n        var _framebuffer = getParameters(gl, 36006);\n\n        deck.setProps({\n          _framebuffer: _framebuffer\n        });\n        deck.needsRedraw({\n          clearRedrawFlags: true\n        });\n        setParameters(gl, {\n          viewport: [0, 0, gl.canvas.width, gl.canvas.height],\n          scissor: [0, 0, gl.canvas.width, gl.canvas.height],\n          stencilFunc: [519, 0, 255, 519, 0, 255]\n        });\n        withParameters(gl, GL_STATE, function () {\n          deck._drawLayers('google-vector', {\n            clearCanvas: false\n          });\n        });\n      }\n    }\n  }, {\n    key: \"_onDrawVectorOverlay\",\n    value: function _onDrawVectorOverlay(_ref3) {\n      var gl = _ref3.gl,\n          transformer = _ref3.transformer;\n\n      if (!this._deck || !this._map) {\n        return;\n      }\n\n      var deck = this._deck;\n      deck.setProps(_objectSpread({}, getViewPropsFromCoordinateTransformer(this._map, transformer)));\n      deck.redraw();\n    }\n  }]);\n\n  return GoogleMapsOverlay;\n}();\n\nexport { GoogleMapsOverlay as default };","map":{"version":3,"mappings":"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","names":["getParameters","setParameters","withParameters","createDeckInstance","destroyDeckInstance","getViewPropsFromOverlay","getViewPropsFromCoordinateTransformer","HIDE_ALL_LAYERS","GL_STATE","depthMask","depthTest","blend","blendFunc","blendEquation","noop","defaultProps","interleaved","GoogleMapsOverlay","constructor","props","_map","setProps","setMap","map","_overlay","UNINITIALIZED","google","maps","RenderingType","renderingType","getRenderingType","_createOverlay","addListener","Object","assign","_deck","style","canvas","parentElement","pickObject","params","pickMultipleObjects","pickObjects","finalize","VECTOR","isVectorMap","WebGLOverlayView","OverlayView","overlay","onAdd","onContextRestored","_onContextRestored","bind","onDraw","_onDrawVectorInterleaved","_onAdd","_onDrawVectorOverlay","onContextLost","_onContextLost","draw","_onDrawRaster","onRemove","_onRemove","gl","_customRender","requestRedraw","deck","animationLoop","_renderFrame","ab","getParameter","onRender","bindBuffer","layerFilter","width","height","left","top","rest","parentStyle","altitude","viewState","repeat","redraw","transformer","layerManager","_framebuffer","needsRedraw","clearRedrawFlags","viewport","scissor","stencilFunc","_drawLayers","clearCanvas"],"sources":["../../src/google-maps-overlay.js"],"sourcesContent":["/* global google */\nimport {getParameters, setParameters, withParameters} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport {\n  createDeckInstance,\n  destroyDeckInstance,\n  getViewPropsFromOverlay,\n  getViewPropsFromCoordinateTransformer\n} from './utils';\n\nconst HIDE_ALL_LAYERS = () => false;\nconst GL_STATE = {\n  depthMask: true,\n  depthTest: true,\n  blend: true,\n  blendFunc: [GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA, GL.ONE, GL.ONE_MINUS_SRC_ALPHA],\n  blendEquation: GL.FUNC_ADD\n};\n\nfunction noop() {}\n\nconst defaultProps = {\n  interleaved: true\n};\n\nexport default class GoogleMapsOverlay {\n  constructor(props) {\n    this.props = {};\n    this._map = null;\n    this.setProps({...defaultProps, ...props});\n  }\n\n  /* Public API */\n\n  setMap(map) {\n    if (map === this._map) {\n      return;\n    }\n    if (this._map) {\n      this._overlay.setMap(null);\n      this._map = null;\n    }\n    if (map) {\n      this._map = map;\n      const {UNINITIALIZED} = google.maps.RenderingType;\n      const renderingType = map.getRenderingType();\n      if (renderingType !== UNINITIALIZED) {\n        this._createOverlay(map);\n      } else {\n        map.addListener('renderingtype_changed', () => {\n          this._createOverlay(map);\n        });\n      }\n    }\n  }\n\n  setProps(props) {\n    Object.assign(this.props, props);\n    if (this._deck) {\n      if (props.style) {\n        Object.assign(this._deck.canvas.parentElement.style, props.style);\n        props.style = null;\n      }\n      this._deck.setProps(props);\n    }\n  }\n\n  pickObject(params) {\n    return this._deck && this._deck.pickObject(params);\n  }\n\n  pickMultipleObjects(params) {\n    return this._deck && this._deck.pickMultipleObjects(params);\n  }\n\n  pickObjects(params) {\n    return this._deck && this._deck.pickObjects(params);\n  }\n\n  finalize() {\n    this.setMap(null);\n    if (this._deck) {\n      destroyDeckInstance(this._deck);\n      this._deck = null;\n    }\n  }\n\n  /* Private API */\n  _createOverlay(map) {\n    const {interleaved} = this.props;\n    const {VECTOR, UNINITIALIZED} = google.maps.RenderingType;\n    const renderingType = map.getRenderingType();\n    if (renderingType === UNINITIALIZED) {\n      return;\n    }\n    const isVectorMap = renderingType === VECTOR && google.maps.WebGLOverlayView;\n    const OverlayView = isVectorMap ? google.maps.WebGLOverlayView : google.maps.OverlayView;\n    const overlay = new OverlayView();\n\n    // Lifecycle methods are different depending on map type\n    if (isVectorMap) {\n      if (interleaved) {\n        overlay.onAdd = noop;\n        overlay.onContextRestored = this._onContextRestored.bind(this);\n        overlay.onDraw = this._onDrawVectorInterleaved.bind(this);\n      } else {\n        overlay.onAdd = this._onAdd.bind(this);\n        overlay.onContextRestored = noop;\n        overlay.onDraw = this._onDrawVectorOverlay.bind(this);\n      }\n      overlay.onContextLost = this._onContextLost.bind(this);\n    } else {\n      overlay.onAdd = this._onAdd.bind(this);\n      overlay.draw = this._onDrawRaster.bind(this);\n    }\n    overlay.onRemove = this._onRemove.bind(this);\n\n    this._overlay = overlay;\n    this._overlay.setMap(map);\n  }\n\n  _onAdd() {\n    this._deck = createDeckInstance(this._map, this._overlay, this._deck, this.props);\n  }\n\n  _onContextRestored({gl}) {\n    const _customRender = () => {\n      this._overlay.requestRedraw();\n    };\n    const deck = createDeckInstance(this._map, this._overlay, this._deck, {\n      gl,\n      _customRender,\n      ...this.props\n    });\n    this._deck = deck;\n\n    // By default, animationLoop._renderFrame invokes\n    // animationLoop.onRender. We override this to wrap\n    // in withParameters so we don't modify the GL state\n    deck.animationLoop._renderFrame = () => {\n      const ab = gl.getParameter(gl.ARRAY_BUFFER_BINDING);\n      withParameters(gl, {}, () => {\n        deck.animationLoop.onRender();\n      });\n      gl.bindBuffer(gl.ARRAY_BUFFER, ab);\n    };\n  }\n\n  _onContextLost() {\n    // TODO this isn't working\n    if (this._deck) {\n      destroyDeckInstance(this._deck);\n      this._deck = null;\n    }\n  }\n\n  _onRemove() {\n    // Clear deck canvas\n    this._deck.setProps({layerFilter: HIDE_ALL_LAYERS});\n  }\n\n  _onDrawRaster() {\n    const deck = this._deck;\n    const {width, height, left, top, ...rest} = getViewPropsFromOverlay(this._map, this._overlay);\n\n    const parentStyle = deck.canvas.parentElement.style;\n    parentStyle.left = `${left}px`;\n    parentStyle.top = `${top}px`;\n\n    const altitude = 10000;\n    deck.setProps({\n      width,\n      height,\n      viewState: {altitude, repeat: true, ...rest}\n    });\n    // Deck is initialized\n    deck.redraw();\n  }\n\n  // Vector code path\n  _onDrawVectorInterleaved({gl, transformer}) {\n    if (!this._deck || !this._map) {\n      return;\n    }\n\n    const deck = this._deck;\n\n    deck.setProps({\n      ...getViewPropsFromCoordinateTransformer(this._map, transformer),\n\n      // Using external gl context - do not set css size\n      width: false,\n      height: false\n    });\n\n    if (deck.layerManager) {\n      // As an optimization, some renders are to an separate framebuffer\n      // which we need to pass onto deck\n      const _framebuffer = getParameters(gl, GL.FRAMEBUFFER_BINDING);\n      deck.setProps({_framebuffer});\n\n      // Camera changed, will trigger a map repaint right after this\n      // Clear any change flag triggered by setting viewState so that deck does not request\n      // a second repaint\n      deck.needsRedraw({clearRedrawFlags: true});\n\n      // Workaround for bug in Google maps where viewport state is wrong\n      // TODO remove once fixed\n      setParameters(gl, {\n        viewport: [0, 0, gl.canvas.width, gl.canvas.height],\n        scissor: [0, 0, gl.canvas.width, gl.canvas.height],\n        stencilFunc: [gl.ALWAYS, 0, 255, gl.ALWAYS, 0, 255]\n      });\n\n      withParameters(gl, GL_STATE, () => {\n        deck._drawLayers('google-vector', {\n          clearCanvas: false\n        });\n      });\n    }\n  }\n\n  _onDrawVectorOverlay({gl, transformer}) {\n    if (!this._deck || !this._map) {\n      return;\n    }\n\n    const deck = this._deck;\n    deck.setProps({\n      ...getViewPropsFromCoordinateTransformer(this._map, transformer)\n    });\n    deck.redraw();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}