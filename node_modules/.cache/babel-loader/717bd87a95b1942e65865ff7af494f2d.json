{"ast":null,"code":"import _defineProperty from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { assert } from '../utils/assert';\nimport { formatValue } from '../utils/format-value';\nexport function getDebugTableForUniforms(_ref) {\n  var _ref$header = _ref.header,\n      header = _ref$header === void 0 ? 'Uniforms' : _ref$header,\n      program = _ref.program,\n      uniforms = _ref.uniforms,\n      _ref$undefinedOnly = _ref.undefinedOnly,\n      undefinedOnly = _ref$undefinedOnly === void 0 ? false : _ref$undefinedOnly;\n  assert(program);\n  var SHADER_MODULE_UNIFORM_REGEXP = '.*_.*';\n  var PROJECT_MODULE_UNIFORM_REGEXP = '.*Matrix';\n  var uniformLocations = program._uniformSetters;\n  var table = {};\n  var uniformNames = Object.keys(uniformLocations).sort();\n  var count = 0;\n\n  var _iterator = _createForOfIteratorHelper(uniformNames),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _uniformName = _step.value;\n\n      if (!_uniformName.match(SHADER_MODULE_UNIFORM_REGEXP) && !_uniformName.match(PROJECT_MODULE_UNIFORM_REGEXP)) {\n        if (addUniformToTable({\n          table: table,\n          header: header,\n          uniforms: uniforms,\n          uniformName: _uniformName,\n          undefinedOnly: undefinedOnly\n        })) {\n          count++;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(uniformNames),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _uniformName2 = _step2.value;\n\n      if (_uniformName2.match(PROJECT_MODULE_UNIFORM_REGEXP)) {\n        if (addUniformToTable({\n          table: table,\n          header: header,\n          uniforms: uniforms,\n          uniformName: _uniformName2,\n          undefinedOnly: undefinedOnly\n        })) {\n          count++;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  var _iterator3 = _createForOfIteratorHelper(uniformNames),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _uniformName3 = _step3.value;\n\n      if (!table[_uniformName3]) {\n        if (addUniformToTable({\n          table: table,\n          header: header,\n          uniforms: uniforms,\n          uniformName: _uniformName3,\n          undefinedOnly: undefinedOnly\n        })) {\n          count++;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  var unusedCount = 0;\n  var unusedTable = {};\n\n  if (!undefinedOnly) {\n    for (var uniformName in uniforms) {\n      var uniform = uniforms[uniformName];\n\n      if (!table[uniformName]) {\n        unusedCount++;\n        unusedTable[uniformName] = _defineProperty({\n          Type: \"NOT USED: \".concat(uniform)\n        }, header, formatValue(uniform));\n      }\n    }\n  }\n\n  return {\n    table: table,\n    count: count,\n    unusedTable: unusedTable,\n    unusedCount: unusedCount\n  };\n}\n\nfunction addUniformToTable(_ref2) {\n  var table = _ref2.table,\n      header = _ref2.header,\n      uniforms = _ref2.uniforms,\n      uniformName = _ref2.uniformName,\n      undefinedOnly = _ref2.undefinedOnly;\n  var value = uniforms[uniformName];\n  var isDefined = isUniformDefined(value);\n\n  if (!undefinedOnly || !isDefined) {\n    var _table$uniformName;\n\n    table[uniformName] = (_table$uniformName = {}, _defineProperty(_table$uniformName, header, isDefined ? formatValue(value) : 'N/A'), _defineProperty(_table$uniformName, 'Uniform Type', isDefined ? value : 'NOT PROVIDED'), _table$uniformName);\n    return true;\n  }\n\n  return false;\n}\n\nfunction isUniformDefined(value) {\n  return value !== undefined && value !== null;\n}","map":{"version":3,"mappings":"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","names":["assert","formatValue","getDebugTableForUniforms","header","program","uniforms","undefinedOnly","SHADER_MODULE_UNIFORM_REGEXP","PROJECT_MODULE_UNIFORM_REGEXP","uniformLocations","_uniformSetters","table","uniformNames","Object","keys","sort","count","uniformName","match","addUniformToTable","unusedCount","unusedTable","uniform","Type","value","isDefined","isUniformDefined","undefined"],"sources":["../../../src/debug/debug-uniforms.js"],"sourcesContent":["import {assert} from '../utils/assert';\nimport {formatValue} from '../utils/format-value';\n\n// Prepares a table suitable for console.table\n/* eslint-disable max-statements, complexity */\nexport function getDebugTableForUniforms({\n  header = 'Uniforms',\n  program,\n  uniforms,\n  undefinedOnly = false\n}) {\n  assert(program);\n\n  const SHADER_MODULE_UNIFORM_REGEXP = '.*_.*';\n  const PROJECT_MODULE_UNIFORM_REGEXP = '.*Matrix'; // TODO - Use explicit list\n\n  const uniformLocations = program._uniformSetters;\n  const table = {}; // {[header]: {}};\n\n  // Add program's provided uniforms (in alphabetical order)\n  const uniformNames = Object.keys(uniformLocations).sort();\n\n  let count = 0;\n\n  // First add non-underscored uniforms (assumed not coming from shader modules)\n  for (const uniformName of uniformNames) {\n    if (\n      !uniformName.match(SHADER_MODULE_UNIFORM_REGEXP) &&\n      !uniformName.match(PROJECT_MODULE_UNIFORM_REGEXP)\n    ) {\n      if (addUniformToTable({table, header, uniforms, uniformName, undefinedOnly})) {\n        count++;\n      }\n    }\n  }\n\n  // add underscored uniforms (assumed from shader modules)\n  for (const uniformName of uniformNames) {\n    if (uniformName.match(PROJECT_MODULE_UNIFORM_REGEXP)) {\n      if (addUniformToTable({table, header, uniforms, uniformName, undefinedOnly})) {\n        count++;\n      }\n    }\n  }\n\n  for (const uniformName of uniformNames) {\n    if (!table[uniformName]) {\n      if (addUniformToTable({table, header, uniforms, uniformName, undefinedOnly})) {\n        count++;\n      }\n    }\n  }\n\n  // Create a table of unused uniforms\n  let unusedCount = 0;\n  const unusedTable = {};\n  if (!undefinedOnly) {\n    for (const uniformName in uniforms) {\n      const uniform = uniforms[uniformName];\n      if (!table[uniformName]) {\n        unusedCount++;\n        unusedTable[uniformName] = {\n          Type: `NOT USED: ${uniform}`,\n          [header]: formatValue(uniform)\n        };\n      }\n    }\n  }\n\n  return {table, count, unusedTable, unusedCount};\n}\n\n// Helper\nfunction addUniformToTable({table, header, uniforms, uniformName, undefinedOnly}) {\n  const value = uniforms[uniformName];\n  const isDefined = isUniformDefined(value);\n  if (!undefinedOnly || !isDefined) {\n    table[uniformName] = {\n      // Add program's unprovided uniforms\n      [header]: isDefined ? formatValue(value) : 'N/A',\n      'Uniform Type': isDefined ? value : 'NOT PROVIDED'\n    };\n    return true;\n  }\n  return false;\n}\n\nfunction isUniformDefined(value) {\n  return value !== undefined && value !== null;\n}\n"]},"metadata":{},"sourceType":"module"}