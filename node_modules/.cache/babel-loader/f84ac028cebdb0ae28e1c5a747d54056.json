{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { log } from '@deck.gl/core';\nvar MISSING_CHAR_WIDTH = 32;\nvar SINGLE_LINE = [];\nexport function nextPowOfTwo(number) {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\nexport function buildMapping(_ref) {\n  var characterSet = _ref.characterSet,\n      getFontWidth = _ref.getFontWidth,\n      fontHeight = _ref.fontHeight,\n      buffer = _ref.buffer,\n      maxCanvasWidth = _ref.maxCanvasWidth,\n      _ref$mapping = _ref.mapping,\n      mapping = _ref$mapping === void 0 ? {} : _ref$mapping,\n      _ref$xOffset = _ref.xOffset,\n      xOffset = _ref$xOffset === void 0 ? 0 : _ref$xOffset,\n      _ref$yOffset = _ref.yOffset,\n      yOffset = _ref$yOffset === void 0 ? 0 : _ref$yOffset;\n  var row = 0;\n  var x = xOffset;\n  var i = 0;\n\n  var _iterator = _createForOfIteratorHelper(characterSet),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var char = _step.value;\n\n      if (!mapping[char]) {\n        var width = getFontWidth(char, i++);\n\n        if (x + width + buffer * 2 > maxCanvasWidth) {\n          x = 0;\n          row++;\n        }\n\n        mapping[char] = {\n          x: x + buffer,\n          y: yOffset + row * (fontHeight + buffer * 2) + buffer,\n          width: width,\n          height: fontHeight\n        };\n        x += width + buffer * 2;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var rowHeight = fontHeight + buffer * 2;\n  return {\n    mapping: mapping,\n    xOffset: x,\n    yOffset: yOffset + row * rowHeight,\n    canvasHeight: nextPowOfTwo(yOffset + (row + 1) * rowHeight)\n  };\n}\n\nfunction getTextWidth(text, startIndex, endIndex, mapping) {\n  var width = 0;\n\n  for (var i = startIndex; i < endIndex; i++) {\n    var character = text[i];\n    var frameWidth = null;\n    var frame = mapping && mapping[character];\n\n    if (frame) {\n      frameWidth = frame.width;\n    }\n\n    width += frameWidth;\n  }\n\n  return width;\n}\n\nfunction breakAll(text, startIndex, endIndex, maxWidth, iconMapping, target) {\n  var rowStartCharIndex = startIndex;\n  var rowOffsetLeft = 0;\n\n  for (var i = startIndex; i < endIndex; i++) {\n    var textWidth = getTextWidth(text, i, i + 1, iconMapping);\n\n    if (rowOffsetLeft + textWidth > maxWidth) {\n      if (rowStartCharIndex < i) {\n        target.push(i);\n      }\n\n      rowStartCharIndex = i;\n      rowOffsetLeft = 0;\n    }\n\n    rowOffsetLeft += textWidth;\n  }\n\n  return rowOffsetLeft;\n}\n\nfunction breakWord(text, startIndex, endIndex, maxWidth, iconMapping, target) {\n  var rowStartCharIndex = startIndex;\n  var groupStartCharIndex = startIndex;\n  var groupEndCharIndex = startIndex;\n  var rowOffsetLeft = 0;\n\n  for (var i = startIndex; i < endIndex; i++) {\n    if (text[i] === ' ') {\n      groupEndCharIndex = i + 1;\n    } else if (text[i + 1] === ' ' || i + 1 === endIndex) {\n      groupEndCharIndex = i + 1;\n    }\n\n    if (groupEndCharIndex > groupStartCharIndex) {\n      var groupWidth = getTextWidth(text, groupStartCharIndex, groupEndCharIndex, iconMapping);\n\n      if (rowOffsetLeft + groupWidth > maxWidth) {\n        if (rowStartCharIndex < groupStartCharIndex) {\n          target.push(groupStartCharIndex);\n          rowStartCharIndex = groupStartCharIndex;\n          rowOffsetLeft = 0;\n        }\n\n        if (groupWidth > maxWidth) {\n          groupWidth = breakAll(text, groupStartCharIndex, groupEndCharIndex, maxWidth, iconMapping, target);\n          rowStartCharIndex = target[target.length - 1];\n        }\n      }\n\n      groupStartCharIndex = groupEndCharIndex;\n      rowOffsetLeft += groupWidth;\n    }\n  }\n\n  return rowOffsetLeft;\n}\n\nexport function autoWrapping(text, wordBreak, maxWidth, iconMapping) {\n  var startIndex = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  var endIndex = arguments.length > 5 ? arguments[5] : undefined;\n\n  if (endIndex === undefined) {\n    endIndex = text.length;\n  }\n\n  var result = [];\n\n  if (wordBreak === 'break-all') {\n    breakAll(text, startIndex, endIndex, maxWidth, iconMapping, result);\n  } else {\n    breakWord(text, startIndex, endIndex, maxWidth, iconMapping, result);\n  }\n\n  return result;\n}\n\nfunction transformRow(line, startIndex, endIndex, iconMapping, leftOffsets, rowSize) {\n  var x = 0;\n  var rowHeight = 0;\n\n  for (var i = startIndex; i < endIndex; i++) {\n    var character = line[i];\n    var frame = iconMapping[character];\n\n    if (frame) {\n      if (!rowHeight) {\n        rowHeight = frame.height;\n      }\n\n      leftOffsets[i] = x + frame.width / 2;\n      x += frame.width;\n    } else {\n      log.warn(\"Missing character: \".concat(character, \" (\").concat(character.codePointAt(0), \")\"))();\n      leftOffsets[i] = x;\n      x += MISSING_CHAR_WIDTH;\n    }\n  }\n\n  rowSize[0] = x;\n  rowSize[1] = rowHeight;\n}\n\nexport function transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping) {\n  paragraph = Array.from(paragraph);\n  var numCharacters = paragraph.length;\n  var x = new Array(numCharacters);\n  var y = new Array(numCharacters);\n  var rowWidth = new Array(numCharacters);\n  var autoWrappingEnabled = (wordBreak === 'break-word' || wordBreak === 'break-all') && isFinite(maxWidth) && maxWidth > 0;\n  var size = [0, 0];\n  var rowSize = [];\n  var rowOffsetTop = 0;\n  var lineStartIndex = 0;\n  var lineEndIndex = 0;\n\n  for (var i = 0; i <= numCharacters; i++) {\n    var char = paragraph[i];\n\n    if (char === '\\n' || i === numCharacters) {\n      lineEndIndex = i;\n    }\n\n    if (lineEndIndex > lineStartIndex) {\n      var rows = autoWrappingEnabled ? autoWrapping(paragraph, wordBreak, maxWidth, iconMapping, lineStartIndex, lineEndIndex) : SINGLE_LINE;\n\n      for (var rowIndex = 0; rowIndex <= rows.length; rowIndex++) {\n        var rowStart = rowIndex === 0 ? lineStartIndex : rows[rowIndex - 1];\n        var rowEnd = rowIndex < rows.length ? rows[rowIndex] : lineEndIndex;\n        transformRow(paragraph, rowStart, rowEnd, iconMapping, x, rowSize);\n\n        for (var j = rowStart; j < rowEnd; j++) {\n          y[j] = rowOffsetTop + rowSize[1] / 2;\n          rowWidth[j] = rowSize[0];\n        }\n\n        rowOffsetTop = rowOffsetTop + rowSize[1] * lineHeight;\n        size[0] = Math.max(size[0], rowSize[0]);\n      }\n\n      lineStartIndex = lineEndIndex;\n    }\n\n    if (char === '\\n') {\n      x[lineStartIndex] = 0;\n      y[lineStartIndex] = 0;\n      rowWidth[lineStartIndex] = 0;\n      lineStartIndex++;\n    }\n  }\n\n  size[1] = rowOffsetTop;\n  return {\n    x: x,\n    y: y,\n    rowWidth: rowWidth,\n    size: size\n  };\n}\nexport function getTextFromBuffer(_ref2) {\n  var value = _ref2.value,\n      length = _ref2.length,\n      stride = _ref2.stride,\n      offset = _ref2.offset,\n      startIndices = _ref2.startIndices,\n      characterSet = _ref2.characterSet;\n  var bytesPerElement = value.BYTES_PER_ELEMENT;\n  var elementStride = stride ? stride / bytesPerElement : 1;\n  var elementOffset = offset ? offset / bytesPerElement : 0;\n  var characterCount = startIndices[length] || Math.ceil((value.length - elementOffset) / elementStride);\n  var autoCharacterSet = characterSet && new Set();\n  var texts = new Array(length);\n  var codes = value;\n\n  if (elementStride > 1 || elementOffset > 0) {\n    codes = new value.constructor(characterCount);\n\n    for (var i = 0; i < characterCount; i++) {\n      codes[i] = value[i * elementStride + elementOffset];\n    }\n  }\n\n  for (var index = 0; index < length; index++) {\n    var startIndex = startIndices[index];\n    var endIndex = startIndices[index + 1] || characterCount;\n    var codesAtIndex = codes.subarray(startIndex, endIndex);\n    texts[index] = String.fromCodePoint.apply(null, codesAtIndex);\n\n    if (autoCharacterSet) {\n      codesAtIndex.forEach(autoCharacterSet.add, autoCharacterSet);\n    }\n  }\n\n  if (autoCharacterSet) {\n    var _iterator2 = _createForOfIteratorHelper(autoCharacterSet),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var charCode = _step2.value;\n        characterSet.add(String.fromCodePoint(charCode));\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  return {\n    texts: texts,\n    characterCount: characterCount\n  };\n}","map":{"version":3,"mappings":"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","names":["log","MISSING_CHAR_WIDTH","SINGLE_LINE","nextPowOfTwo","number","Math","pow","ceil","log2","buildMapping","characterSet","getFontWidth","fontHeight","buffer","maxCanvasWidth","mapping","xOffset","yOffset","row","x","i","char","width","y","height","rowHeight","canvasHeight","getTextWidth","text","startIndex","endIndex","character","frameWidth","frame","breakAll","maxWidth","iconMapping","target","rowStartCharIndex","rowOffsetLeft","textWidth","push","breakWord","groupStartCharIndex","groupEndCharIndex","groupWidth","length","autoWrapping","wordBreak","undefined","result","transformRow","line","leftOffsets","rowSize","warn","codePointAt","transformParagraph","paragraph","lineHeight","Array","from","numCharacters","rowWidth","autoWrappingEnabled","isFinite","size","rowOffsetTop","lineStartIndex","lineEndIndex","rows","rowIndex","rowStart","rowEnd","j","max","getTextFromBuffer","value","stride","offset","startIndices","bytesPerElement","BYTES_PER_ELEMENT","elementStride","elementOffset","characterCount","autoCharacterSet","Set","texts","codes","constructor","index","codesAtIndex","subarray","String","fromCodePoint","apply","forEach","add","charCode"],"sources":["../../../src/text-layer/utils.js"],"sourcesContent":["/* eslint-disable max-statements, max-params, complexity, max-depth */\n// TODO merge with icon-layer/icon-manager\nimport {log} from '@deck.gl/core';\n\nconst MISSING_CHAR_WIDTH = 32;\nconst SINGLE_LINE = [];\n\nexport function nextPowOfTwo(number) {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\n/**\n * Generate character mapping table or update from an existing mapping table\n * @param characterSet {Array|Set} new characters\n * @param getFontWidth {Function} function to get width of each character\n * @param fontHeight {Number} height of font\n * @param buffer {Number} buffer surround each character\n * @param maxCanvasWidth {Number} max width of font atlas\n * @param mapping {Object} old mapping table\n * @param xOffset {Number} x position of last character in old mapping table\n * @param yOffset {Number} y position of last character in old mapping table\n * @returns {{\n *   mapping: Object,\n *   xOffset: Number, x position of last character\n *   yOffset: Number, y position of last character in old mapping table\n *   canvasHeight: Number, height of the font atlas canvas, power of 2\n *  }}\n */\nexport function buildMapping({\n  characterSet,\n  getFontWidth,\n  fontHeight,\n  buffer,\n  maxCanvasWidth,\n  mapping = {},\n  xOffset = 0,\n  yOffset = 0\n}) {\n  let row = 0;\n  // continue from x position of last character in the old mapping\n  let x = xOffset;\n\n  let i = 0;\n  for (const char of characterSet) {\n    if (!mapping[char]) {\n      // measure texts\n      // TODO - use Advanced text metrics when they are adopted:\n      // https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics\n      const width = getFontWidth(char, i++);\n\n      if (x + width + buffer * 2 > maxCanvasWidth) {\n        x = 0;\n        row++;\n      }\n      mapping[char] = {\n        x: x + buffer,\n        y: yOffset + row * (fontHeight + buffer * 2) + buffer,\n        width,\n        height: fontHeight\n      };\n      x += width + buffer * 2;\n    }\n  }\n\n  const rowHeight = fontHeight + buffer * 2;\n\n  return {\n    mapping,\n    xOffset: x,\n    yOffset: yOffset + row * rowHeight,\n    canvasHeight: nextPowOfTwo(yOffset + (row + 1) * rowHeight)\n  };\n}\n\nfunction getTextWidth(text, startIndex, endIndex, mapping) {\n  let width = 0;\n  for (let i = startIndex; i < endIndex; i++) {\n    const character = text[i];\n    let frameWidth = null;\n    const frame = mapping && mapping[character];\n    if (frame) {\n      frameWidth = frame.width;\n    }\n\n    width += frameWidth;\n  }\n\n  return width;\n}\n\nfunction breakAll(text, startIndex, endIndex, maxWidth, iconMapping, target) {\n  let rowStartCharIndex = startIndex;\n  let rowOffsetLeft = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    // 2. figure out where to break lines\n    const textWidth = getTextWidth(text, i, i + 1, iconMapping);\n    if (rowOffsetLeft + textWidth > maxWidth) {\n      if (rowStartCharIndex < i) {\n        target.push(i);\n      }\n      rowStartCharIndex = i;\n      rowOffsetLeft = 0;\n    }\n    rowOffsetLeft += textWidth;\n  }\n\n  return rowOffsetLeft;\n}\n\nfunction breakWord(text, startIndex, endIndex, maxWidth, iconMapping, target) {\n  let rowStartCharIndex = startIndex;\n  let groupStartCharIndex = startIndex;\n  let groupEndCharIndex = startIndex;\n  let rowOffsetLeft = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    // 1. break text into word groups\n    //  - if current char is white space\n    //  - else if next char is white space\n    //  - else if reach last char\n    if (text[i] === ' ') {\n      groupEndCharIndex = i + 1;\n    } else if (text[i + 1] === ' ' || i + 1 === endIndex) {\n      groupEndCharIndex = i + 1;\n    }\n\n    if (groupEndCharIndex > groupStartCharIndex) {\n      // 2. break text into next row at maxWidth\n      let groupWidth = getTextWidth(text, groupStartCharIndex, groupEndCharIndex, iconMapping);\n      if (rowOffsetLeft + groupWidth > maxWidth) {\n        if (rowStartCharIndex < groupStartCharIndex) {\n          target.push(groupStartCharIndex);\n          rowStartCharIndex = groupStartCharIndex;\n          rowOffsetLeft = 0;\n        }\n\n        // if a single text group is bigger than maxWidth, then `break-all`\n        if (groupWidth > maxWidth) {\n          groupWidth = breakAll(\n            text,\n            groupStartCharIndex,\n            groupEndCharIndex,\n            maxWidth,\n            iconMapping,\n            target\n          );\n          // move reference to last row\n          rowStartCharIndex = target[target.length - 1];\n        }\n      }\n      groupStartCharIndex = groupEndCharIndex;\n      rowOffsetLeft += groupWidth;\n    }\n  }\n\n  return rowOffsetLeft;\n}\n\n// Returns a list of indices where line breaks should be inserted\nexport function autoWrapping(text, wordBreak, maxWidth, iconMapping, startIndex = 0, endIndex) {\n  if (endIndex === undefined) {\n    endIndex = text.length;\n  }\n  const result = [];\n  if (wordBreak === 'break-all') {\n    breakAll(text, startIndex, endIndex, maxWidth, iconMapping, result);\n  } else {\n    breakWord(text, startIndex, endIndex, maxWidth, iconMapping, result);\n  }\n  return result;\n}\n\nfunction transformRow(line, startIndex, endIndex, iconMapping, leftOffsets, rowSize) {\n  let x = 0;\n  let rowHeight = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    const character = line[i];\n    const frame = iconMapping[character];\n    if (frame) {\n      if (!rowHeight) {\n        // frame.height should be a constant\n        rowHeight = frame.height;\n      }\n      leftOffsets[i] = x + frame.width / 2;\n      x += frame.width;\n    } else {\n      log.warn(`Missing character: ${character} (${character.codePointAt(0)})`)();\n      leftOffsets[i] = x;\n      x += MISSING_CHAR_WIDTH;\n    }\n  }\n\n  rowSize[0] = x;\n  rowSize[1] = rowHeight;\n}\n\n/**\n * Transform a text paragraph to an array of characters, each character contains\n * @param paragraph: {String}\n * @param iconMapping {Object} character mapping table for retrieving a character from font atlas\n * @param lineHeight {Number} css line-height\n * @param wordBreak {String} css word-break option\n * @param maxWidth {number} css max-width\n * @param transformedData {Array} output transformed data array, each datum contains\n *   - text: character\n *   - index: character index in the paragraph\n *   - x: x offset in the row,\n *   - y: y offset in the paragraph\n *   - size: [width, height] size of the paragraph\n *   - rowSize: [rowWidth, rowHeight] size of the row\n *   - len: length of the paragraph\n */\nexport function transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping) {\n  // Break into an array of characters\n  // When dealing with double-length unicode characters, `str.length` or `str[i]` do not work\n  paragraph = Array.from(paragraph);\n  const numCharacters = paragraph.length;\n  const x = new Array(numCharacters);\n  const y = new Array(numCharacters);\n  const rowWidth = new Array(numCharacters);\n  const autoWrappingEnabled =\n    (wordBreak === 'break-word' || wordBreak === 'break-all') && isFinite(maxWidth) && maxWidth > 0;\n\n  // maxWidth and height of the paragraph\n  const size = [0, 0];\n  const rowSize = [];\n  let rowOffsetTop = 0;\n  let lineStartIndex = 0;\n  let lineEndIndex = 0;\n\n  for (let i = 0; i <= numCharacters; i++) {\n    const char = paragraph[i];\n    if (char === '\\n' || i === numCharacters) {\n      lineEndIndex = i;\n    }\n\n    if (lineEndIndex > lineStartIndex) {\n      const rows = autoWrappingEnabled\n        ? autoWrapping(paragraph, wordBreak, maxWidth, iconMapping, lineStartIndex, lineEndIndex)\n        : SINGLE_LINE;\n\n      for (let rowIndex = 0; rowIndex <= rows.length; rowIndex++) {\n        const rowStart = rowIndex === 0 ? lineStartIndex : rows[rowIndex - 1];\n        const rowEnd = rowIndex < rows.length ? rows[rowIndex] : lineEndIndex;\n        transformRow(paragraph, rowStart, rowEnd, iconMapping, x, rowSize);\n        for (let j = rowStart; j < rowEnd; j++) {\n          y[j] = rowOffsetTop + rowSize[1] / 2;\n          rowWidth[j] = rowSize[0];\n        }\n\n        rowOffsetTop = rowOffsetTop + rowSize[1] * lineHeight;\n        size[0] = Math.max(size[0], rowSize[0]);\n      }\n      lineStartIndex = lineEndIndex;\n    }\n\n    if (char === '\\n') {\n      // Make sure result.length matches paragraph.length\n      x[lineStartIndex] = 0;\n      y[lineStartIndex] = 0;\n      rowWidth[lineStartIndex] = 0;\n      lineStartIndex++;\n    }\n  }\n\n  // last row\n  size[1] = rowOffsetTop;\n  return {x, y, rowWidth, size};\n}\n\nexport function getTextFromBuffer({value, length, stride, offset, startIndices, characterSet}) {\n  const bytesPerElement = value.BYTES_PER_ELEMENT;\n  const elementStride = stride ? stride / bytesPerElement : 1;\n  const elementOffset = offset ? offset / bytesPerElement : 0;\n  const characterCount =\n    startIndices[length] || Math.ceil((value.length - elementOffset) / elementStride);\n  const autoCharacterSet = characterSet && new Set();\n\n  const texts = new Array(length);\n\n  let codes = value;\n  if (elementStride > 1 || elementOffset > 0) {\n    codes = new value.constructor(characterCount);\n    for (let i = 0; i < characterCount; i++) {\n      codes[i] = value[i * elementStride + elementOffset];\n    }\n  }\n\n  for (let index = 0; index < length; index++) {\n    const startIndex = startIndices[index];\n    const endIndex = startIndices[index + 1] || characterCount;\n    const codesAtIndex = codes.subarray(startIndex, endIndex);\n    texts[index] = String.fromCodePoint.apply(null, codesAtIndex);\n    if (autoCharacterSet) {\n      codesAtIndex.forEach(autoCharacterSet.add, autoCharacterSet);\n    }\n  }\n\n  if (autoCharacterSet) {\n    for (const charCode of autoCharacterSet) {\n      characterSet.add(String.fromCodePoint(charCode));\n    }\n  }\n\n  return {texts, characterCount};\n}\n"]},"metadata":{},"sourceType":"module"}