{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Stat from './stat';\n\nvar Stats = /*#__PURE__*/function () {\n  function Stats(options) {\n    _classCallCheck(this, Stats);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"stats\", {});\n\n    this.id = options.id;\n    this.stats = {};\n\n    this._initializeStats(options.stats);\n\n    Object.seal(this);\n  }\n\n  _createClass(Stats, [{\n    key: \"get\",\n    value: function get(name) {\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'count';\n      return this._getOrCreate({\n        name: name,\n        type: type\n      });\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return Object.keys(this.stats).length;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      for (var key in this.stats) {\n        this.stats[key].reset();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      for (var key in this.stats) {\n        fn(this.stats[key]);\n      }\n    }\n  }, {\n    key: \"getTable\",\n    value: function getTable() {\n      var table = {};\n      this.forEach(function (stat) {\n        table[stat.name] = {\n          time: stat.time || 0,\n          count: stat.count || 0,\n          average: stat.getAverageTime() || 0,\n          hz: stat.getHz() || 0\n        };\n      });\n      return table;\n    }\n  }, {\n    key: \"_initializeStats\",\n    value: function _initializeStats() {\n      var _this = this;\n\n      var stats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      stats.forEach(function (stat) {\n        return _this._getOrCreate(stat);\n      });\n    }\n  }, {\n    key: \"_getOrCreate\",\n    value: function _getOrCreate(stat) {\n      if (!stat || !stat.name) {\n        return null;\n      }\n\n      var name = stat.name,\n          type = stat.type;\n\n      if (!this.stats[name]) {\n        if (stat instanceof Stat) {\n          this.stats[name] = stat;\n        } else {\n          this.stats[name] = new Stat(name, type);\n        }\n      }\n\n      return this.stats[name];\n    }\n  }]);\n\n  return Stats;\n}();\n\nexport { Stats as default };","map":{"version":3,"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,QAAjB;;IAGqBC,K;EAInBC,eAAYC,OAAZD,EAA6F;IAAA;;IAAAE;;IAAAA,+BAFtD,EAEsD;;IAC3F,KAAKC,EAAL,GAAUF,OAAO,CAACE,EAAlB;IACA,KAAKC,KAAL,GAAa,EAAb;;IAEA,KAAKC,gBAAL,CAAsBJ,OAAO,CAACG,KAA9B;;IAEAE,MAAM,CAACC,IAAPD,CAAY,IAAZA;EACD;;;;WAGDE,aAAIC,IAAJD,EAAgD;MAAA,IAA9BE,IAA8B,uEAAf,OAAe;MAC9C,OAAO,KAAKC,YAAL,CAAkB;QAACF,IAAD,EAACA,IAAD;QAAOC;MAAP,CAAlB,CAAP;IACD;;;SAEO,eAAW;MACjB,OAAOJ,MAAM,CAACM,IAAPN,CAAY,KAAKF,KAAjBE,EAAwBO,MAA/B;IACD;;;WAGDC,iBAAc;MACZ,KAAK,IAAMC,GAAX,IAAkB,KAAKX,KAAvB,EAA8B;QAC5B,KAAKA,KAAL,CAAWW,GAAX,EAAgBD,KAAhB;MACD;;MAED,OAAO,IAAP;IACD;;;WAEDE,iBAAQC,EAARD,EAAwC;MACtC,KAAK,IAAMD,GAAX,IAAkB,KAAKX,KAAvB,EAA8B;QAC5Ba,EAAE,CAAC,KAAKb,KAAL,CAAWW,GAAX,CAAD,CAAFE;MACD;IACF;;;WAEDC,oBAQI;MACF,IAAMC,KAAK,GAAG,EAAd;MACA,KAAKH,OAAL,CAAaI,cAAI,EAAI;QACnBD,KAAK,CAACC,IAAI,CAACX,IAAN,CAALU,GAAmB;UACjBE,IAAI,EAAED,IAAI,CAACC,IAALD,IAAa,CADF;UAEjBE,KAAK,EAAEF,IAAI,CAACE,KAALF,IAAc,CAFJ;UAGjBG,OAAO,EAAEH,IAAI,CAACI,cAALJ,MAAyB,CAHjB;UAIjBK,EAAE,EAAEL,IAAI,CAACM,KAALN,MAAgB;QAJH,CAAnBD;MADF;MASA,OAAOA,KAAP;IACD;;;WAEDd,4BAAqF;MAAA;;MAAA,IAApED,KAAoE,uEAAV,EAAU;MACnFA,KAAK,CAACY,OAANZ,CAAcgB,cAAI;QAAA,OAAI,MAAKT,YAAL,CAAkBS,IAAlB,CAAJ;MAAA,CAAlBhB;IACD;;;WAEDO,sBAAaS,IAAbT,EAAyB;MACvB,IAAI,CAACS,IAAD,IAAS,CAACA,IAAI,CAACX,IAAnB,EAAyB;QACvB,OAAO,IAAP;MACD;;MAED,IAAOA,IAAP,GAAqBW,IAArB,CAAOX,IAAP;MAAA,IAAaC,IAAb,GAAqBU,IAArB,CAAaV,IAAb;;MACA,IAAI,CAAC,KAAKN,KAAL,CAAWK,IAAX,CAAL,EAAuB;QACrB,IAAIW,IAAI,YAAYtB,IAApB,EAA0B;UACxB,KAAKM,KAAL,CAAWK,IAAX,IAAmBW,IAAnB;QADF,OAEO;UACL,KAAKhB,KAAL,CAAWK,IAAX,IAAmB,IAAIX,IAAJ,CAASW,IAAT,EAAeC,IAAf,CAAnB;QACD;MACF;;MACD,OAAO,KAAKN,KAAL,CAAWK,IAAX,CAAP;IACD;;;;;;SA7EkBV,K","names":["Stat","Stats","constructor","options","_defineProperty","id","stats","_initializeStats","Object","seal","get","name","type","_getOrCreate","keys","length","reset","key","forEach","fn","getTable","table","stat","time","count","average","getAverageTime","hz","getHz"],"sources":["../../../src/lib/stats.ts"],"sourcesContent":["import Stat from './stat';\n\n/** A \"bag\" of `Stat` objects, can be visualized using `StatsWidget` */\nexport default class Stats {\n  readonly id: string;\n  readonly stats: Record<string, Stat> = {};\n\n  constructor(options: {id: string; stats?: Stats | Stat[] | {name: string; type?: string}[]}) {\n    this.id = options.id;\n    this.stats = {};\n\n    this._initializeStats(options.stats);\n\n    Object.seal(this);\n  }\n\n  /** Acquire a stat. Create if it doesn't exist. */\n  get(name: string, type: string = 'count'): Stat {\n    return this._getOrCreate({name, type});\n  }\n\n  get size(): number {\n    return Object.keys(this.stats).length;\n  }\n\n  /** Reset all stats */\n  reset(): this {\n    for (const key in this.stats) {\n      this.stats[key].reset();\n    }\n\n    return this;\n  }\n\n  forEach(fn: (stat: Stat) => void): void {\n    for (const key in this.stats) {\n      fn(this.stats[key]);\n    }\n  }\n\n  getTable(): Record<\n    string,\n    {\n      time: number;\n      count: number;\n      average: number;\n      hz: number;\n    }\n    > {\n    const table = {};\n    this.forEach(stat => {\n      table[stat.name] = {\n        time: stat.time || 0,\n        count: stat.count || 0,\n        average: stat.getAverageTime() || 0,\n        hz: stat.getHz() || 0\n      };\n    });\n\n    return table;\n  }\n\n  _initializeStats(stats: Stats | Stat[] | {name: string; type?: string}[] = []): void {\n    stats.forEach(stat => this._getOrCreate(stat));\n  }\n\n  _getOrCreate(stat): Stat {\n    if (!stat || !stat.name) {\n      return null;\n    }\n\n    const {name, type} = stat;\n    if (!this.stats[name]) {\n      if (stat instanceof Stat) {\n        this.stats[name] = stat;\n      } else {\n        this.stats[name] = new Stat(name, type);\n      }\n    }\n    return this.stats[name];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}