{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction getStorage(type) {\n  try {\n    const storage = window[type];\n    const x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return storage;\n  } catch (e) {\n    return null;\n  }\n}\n\nexport default class LocalStorage {\n  constructor(id) {\n    let defaultSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'sessionStorage';\n\n    _defineProperty(this, \"storage\", void 0);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"config\", {});\n\n    this.storage = getStorage(type);\n    this.id = id;\n    this.config = {};\n    Object.assign(this.config, defaultSettings);\n\n    this._loadConfiguration();\n  }\n\n  getConfiguration() {\n    return this.config;\n  }\n\n  setConfiguration(configuration) {\n    this.config = {};\n    return this.updateConfiguration(configuration);\n  }\n\n  updateConfiguration(configuration) {\n    Object.assign(this.config, configuration);\n\n    if (this.storage) {\n      const serialized = JSON.stringify(this.config);\n      this.storage.setItem(this.id, serialized);\n    }\n\n    return this;\n  }\n\n  _loadConfiguration() {\n    let configuration = {};\n\n    if (this.storage) {\n      const serializedConfiguration = this.storage.getItem(this.id);\n      configuration = serializedConfiguration ? JSON.parse(serializedConfiguration) : {};\n    }\n\n    Object.assign(this.config, configuration);\n    return this;\n  }\n\n}","map":{"version":3,"mappings":";;AAEA,SAASA,UAAT,CAAoBC,IAApB,EAAmC;EACjC,IAAI;IAEF,MAAMC,OAAgB,GAAGC,MAAM,CAACF,IAAD,CAA/B;IACA,MAAMG,CAAC,GAAG,kBAAV;IACAF,OAAO,CAACG,OAARH,CAAgBE,CAAhBF,EAAmBE,CAAnBF;IACAA,OAAO,CAACI,UAARJ,CAAmBE,CAAnBF;IACA,OAAOA,OAAP;EANF,EAOE,OAAOK,CAAP,EAAU;IACV,OAAO,IAAP;EACD;AACF;;AAGD,eAAe,MAAMC,YAAN,CAAmB;EAKhCC,WAAW,CAACC,EAAD,EAAiF;IAAA,IAApEC,eAAoE,uEAA7B,EAA6B;IAAA,IAAzBV,IAAyB,uEAAlB,gBAAkB;;IAAAW;;IAAAA;;IAAAA,gCAF9D,EAE8D;;IAC1F,KAAKV,OAAL,GAAeF,UAAU,CAACC,IAAD,CAAzB;IACA,KAAKS,EAAL,GAAUA,EAAV;IACA,KAAKG,MAAL,GAAc,EAAd;IACAC,MAAM,CAACC,MAAPD,CAAc,KAAKD,MAAnBC,EAA2BH,eAA3BG;;IACA,KAAKE,kBAAL;EACD;;EAEDC,gBAAgB,GAAG;IACjB,OAAO,KAAKJ,MAAZ;EACD;;EAEDK,gBAAgB,CAACC,aAAD,EAAgB;IAC9B,KAAKN,MAAL,GAAc,EAAd;IACA,OAAO,KAAKO,mBAAL,CAAyBD,aAAzB,CAAP;EACD;;EAEDC,mBAAmB,CAACD,aAAD,EAAgB;IACjCL,MAAM,CAACC,MAAPD,CAAc,KAAKD,MAAnBC,EAA2BK,aAA3BL;;IACA,IAAI,KAAKZ,OAAT,EAAkB;MAChB,MAAMmB,UAAU,GAAGC,IAAI,CAACC,SAALD,CAAe,KAAKT,MAApBS,CAAnB;MACA,KAAKpB,OAAL,CAAaG,OAAb,CAAqB,KAAKK,EAA1B,EAA8BW,UAA9B;IACD;;IACD,OAAO,IAAP;EACD;;EAGDL,kBAAkB,GAAG;IACnB,IAAIG,aAAa,GAAG,EAApB;;IACA,IAAI,KAAKjB,OAAT,EAAkB;MAChB,MAAMsB,uBAAuB,GAAG,KAAKtB,OAAL,CAAauB,OAAb,CAAqB,KAAKf,EAA1B,CAAhC;MACAS,aAAa,GAAGK,uBAAuB,GAAGF,IAAI,CAACI,KAALJ,CAAWE,uBAAXF,CAAH,GAAyC,EAAhFH;IACD;;IACDL,MAAM,CAACC,MAAPD,CAAc,KAAKD,MAAnBC,EAA2BK,aAA3BL;IACA,OAAO,IAAP;EACD;;AAxC+B","names":["getStorage","type","storage","window","x","setItem","removeItem","e","LocalStorage","constructor","id","defaultSettings","_defineProperty","config","Object","assign","_loadConfiguration","getConfiguration","setConfiguration","configuration","updateConfiguration","serialized","JSON","stringify","serializedConfiguration","getItem","parse"],"sources":["../../../src/utils/local-storage.ts"],"sourcesContent":["// probe.gl, MIT license\n\nfunction getStorage(type): Storage {\n  try {\n    // @ts-expect-error\n    const storage: Storage = window[type];\n    const x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return storage;\n  } catch (e) {\n    return null;\n  }\n}\n\n// Store keys in local storage via simple interface\nexport default class LocalStorage {\n  storage: Storage;\n  id: string;\n  config: Record<string, any> = {};\n\n  constructor(id: string, defaultSettings: Record<string, any> = {}, type = 'sessionStorage') {\n    this.storage = getStorage(type);\n    this.id = id;\n    this.config = {};\n    Object.assign(this.config, defaultSettings);\n    this._loadConfiguration();\n  }\n\n  getConfiguration() {\n    return this.config;\n  }\n\n  setConfiguration(configuration) {\n    this.config = {};\n    return this.updateConfiguration(configuration);\n  }\n\n  updateConfiguration(configuration) {\n    Object.assign(this.config, configuration);\n    if (this.storage) {\n      const serialized = JSON.stringify(this.config);\n      this.storage.setItem(this.id, serialized);\n    }\n    return this;\n  }\n\n  // Get config from persistent store, if available\n  _loadConfiguration() {\n    let configuration = {};\n    if (this.storage) {\n      const serializedConfiguration = this.storage.getItem(this.id);\n      configuration = serializedConfiguration ? JSON.parse(serializedConfiguration) : {};\n    }\n    Object.assign(this.config, configuration);\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}