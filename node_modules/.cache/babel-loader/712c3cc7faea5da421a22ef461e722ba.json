{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { defaultClassicCredentials, defaultCloudNativeCredentials, getDefaultCredentials } from '../config';\nimport { API_VERSIONS, DEFAULT_MAPS_URL_FORMAT, DEFAULT_REGION_COMPONENT_IN_URL, DEFAULT_USER_COMPONENT_IN_URL, encodeParameter, MAP_TYPES } from './maps-api-common';\nexport var CONNECTIONS = {\n  BIGQUERY: 'bigquery',\n  CARTO: 'carto'\n};\nvar BUFFER_SIZE = 16;\nvar TILE_EXTENT = 4096;\nexport function getDataV2(_x) {\n  return _getDataV.apply(this, arguments);\n}\n\nfunction _getDataV() {\n  _getDataV = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var type, source, credentials, defaultCredentials, apiVersion, localCreds, url, connection, mapConfig, layergroup;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            type = _ref.type, source = _ref.source, credentials = _ref.credentials;\n            defaultCredentials = getDefaultCredentials();\n            apiVersion = (credentials === null || credentials === void 0 ? void 0 : credentials.apiVersion) || defaultCredentials.apiVersion;\n            localCreds = _objectSpread(_objectSpread(_objectSpread({}, apiVersion === API_VERSIONS.V3 ? defaultCloudNativeCredentials : defaultClassicCredentials), {}, {\n              mapsUrl: DEFAULT_MAPS_URL_FORMAT[apiVersion]\n            }, defaultCredentials.apiVersion === apiVersion && defaultCredentials), credentials);\n            connection = type === MAP_TYPES.TILESET ? CONNECTIONS.BIGQUERY : CONNECTIONS.CARTO;\n            _context.t0 = apiVersion;\n            _context.next = _context.t0 === API_VERSIONS.V1 ? 8 : _context.t0 === API_VERSIONS.V2 ? 14 : 18;\n            break;\n\n          case 8:\n            mapConfig = createMapConfig(source);\n            url = buildURLMapsAPIv1({\n              mapConfig: mapConfig,\n              credentials: localCreds\n            });\n            _context.next = 12;\n            return request({\n              url: url,\n              credentials: localCreds\n            });\n\n          case 12:\n            layergroup = _context.sent;\n            return _context.abrupt(\"return\", layergroup.metadata.tilejson.vector);\n\n          case 14:\n            url = buildURLMapsAPIv2({\n              connection: connection,\n              type: type,\n              source: source,\n              credentials: localCreds\n            });\n            _context.next = 17;\n            return request({\n              url: url,\n              credentials: localCreds\n            });\n\n          case 17:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 18:\n            throw new Error(\"Invalid maps API version. It should be \".concat(API_VERSIONS.V1, \" or \").concat(API_VERSIONS.V2));\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getDataV.apply(this, arguments);\n}\n\nfunction request(_x2) {\n  return _request.apply(this, arguments);\n}\n\nfunction _request() {\n  _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2) {\n    var url, credentials, response, json;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            url = _ref2.url, credentials = _ref2.credentials;\n            _context2.prev = 1;\n            _context2.next = 4;\n            return fetch(url, {\n              headers: {\n                Accept: 'application/json'\n              }\n            });\n\n          case 4:\n            response = _context2.sent;\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](1);\n            throw new Error(\"Failed to connect to Maps API: \".concat(_context2.t0));\n\n          case 10:\n            _context2.next = 12;\n            return response.json();\n\n          case 12:\n            json = _context2.sent;\n\n            if (!response.ok) {\n              dealWithError({\n                response: response,\n                json: json,\n                credentials: credentials\n              });\n            }\n\n            return _context2.abrupt(\"return\", json);\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[1, 7]]);\n  }));\n  return _request.apply(this, arguments);\n}\n\nfunction dealWithError(_ref3) {\n  var response = _ref3.response,\n      json = _ref3.json,\n      credentials = _ref3.credentials;\n\n  switch (response.status) {\n    case 401:\n      throw new Error(\"Unauthorized access to Maps API: invalid combination of user ('\".concat(credentials.username, \"') and apiKey ('\").concat(credentials.apiKey, \"')\"));\n\n    case 403:\n      throw new Error(\"Unauthorized access to dataset: the provided apiKey('\".concat(credentials.apiKey, \"') doesn't provide access to the requested data\"));\n\n    default:\n      var e = credentials.apiVersion === API_VERSIONS.V1 ? JSON.stringify(json.errors) : json.error;\n      throw new Error(e);\n  }\n}\n\nfunction initURLParameters(credentials) {\n  var encodedApiKey = encodeParameter('api_key', credentials.apiKey);\n  var encodedClient = encodeParameter('client', 'deck-gl-carto');\n  return [encodedApiKey, encodedClient];\n}\n\nfunction buildURLMapsAPIv1(_ref4) {\n  var mapConfig = _ref4.mapConfig,\n      credentials = _ref4.credentials;\n  var parameters = initURLParameters(credentials);\n  var cfg = JSON.stringify(mapConfig);\n  return \"\".concat(mapsUrl(credentials), \"?\").concat(parameters.join('&'), \"&\").concat(encodeParameter('config', cfg));\n}\n\nfunction buildURLMapsAPIv2(_ref5) {\n  var connection = _ref5.connection,\n      type = _ref5.type,\n      source = _ref5.source,\n      credentials = _ref5.credentials;\n  var parameters = initURLParameters(credentials);\n  var mapsApiType = type === MAP_TYPES.QUERY ? 'sql' : type;\n  var url = \"\".concat(mapsUrl(credentials), \"/\").concat(connection, \"/\").concat(mapsApiType, \"?\");\n  url += \"\".concat(encodeParameter('source', source), \"&format=tilejson&\").concat(parameters.join('&'));\n  return url;\n}\n\nfunction mapsUrl(credentials) {\n  return credentials.mapsUrl.replace(DEFAULT_USER_COMPONENT_IN_URL, credentials.username).replace(DEFAULT_REGION_COMPONENT_IN_URL, credentials.region);\n}\n\nfunction createMapConfig(sql) {\n  return {\n    version: '1.3.1',\n    buffersize: {\n      mvt: BUFFER_SIZE\n    },\n    layers: [{\n      type: 'mapnik',\n      options: {\n        sql: sql,\n        vector_extent: TILE_EXTENT\n      }\n    }]\n  };\n}","map":{"version":3,"mappings":"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","names":["defaultClassicCredentials","defaultCloudNativeCredentials","getDefaultCredentials","API_VERSIONS","DEFAULT_MAPS_URL_FORMAT","DEFAULT_REGION_COMPONENT_IN_URL","DEFAULT_USER_COMPONENT_IN_URL","encodeParameter","MAP_TYPES","CONNECTIONS","BIGQUERY","CARTO","BUFFER_SIZE","TILE_EXTENT","getDataV2","type","source","credentials","defaultCredentials","apiVersion","localCreds","V3","mapsUrl","connection","TILESET","V1","V2","mapConfig","createMapConfig","url","buildURLMapsAPIv1","request","layergroup","metadata","tilejson","vector","buildURLMapsAPIv2","Error","fetch","headers","Accept","response","json","ok","dealWithError","status","username","apiKey","e","JSON","stringify","errors","error","initURLParameters","encodedApiKey","encodedClient","parameters","cfg","join","mapsApiType","QUERY","replace","region","sql","version","buffersize","mvt","layers","options","vector_extent"],"sources":["../../../src/api/maps-client.ts"],"sourcesContent":["/**\n * Maps API Client for Maps API v1 and Maps API v2\n */\nimport {\n  ClassicCredentials,\n  defaultClassicCredentials,\n  defaultCloudNativeCredentials,\n  getDefaultCredentials\n} from '../config';\nimport {\n  API_VERSIONS,\n  DEFAULT_MAPS_URL_FORMAT,\n  DEFAULT_REGION_COMPONENT_IN_URL,\n  DEFAULT_USER_COMPONENT_IN_URL,\n  encodeParameter,\n  MapType,\n  MAP_TYPES\n} from './maps-api-common';\n\nexport const CONNECTIONS = {\n  BIGQUERY: 'bigquery',\n  CARTO: 'carto'\n};\n\nconst BUFFER_SIZE = 16;\nconst TILE_EXTENT = 4096;\n\n/**\n * Obtain a TileJson from Maps API v1 and v2\n */\nexport async function getDataV2({\n  type,\n  source,\n  credentials\n}: {\n  type: MapType;\n  source: string;\n  credentials?: Partial<ClassicCredentials>;\n}) {\n  const defaultCredentials = getDefaultCredentials();\n  const apiVersion = credentials?.apiVersion || defaultCredentials.apiVersion;\n  // Only pick up default credentials if they have been defined for\n  // correct API version\n  const localCreds = {\n    ...(apiVersion === API_VERSIONS.V3 ? defaultCloudNativeCredentials : defaultClassicCredentials),\n    mapsUrl: DEFAULT_MAPS_URL_FORMAT[apiVersion],\n    ...(defaultCredentials.apiVersion === apiVersion && defaultCredentials),\n    ...credentials\n  } as unknown as Required<ClassicCredentials>;\n\n  let url: string;\n\n  const connection = type === MAP_TYPES.TILESET ? CONNECTIONS.BIGQUERY : CONNECTIONS.CARTO;\n\n  switch (apiVersion) {\n    case API_VERSIONS.V1:\n      // Maps API v1\n      const mapConfig = createMapConfig(source);\n      url = buildURLMapsAPIv1({mapConfig, credentials: localCreds});\n      const layergroup = await request({url, credentials: localCreds});\n      return layergroup.metadata.tilejson.vector;\n\n    case API_VERSIONS.V2:\n      // Maps API v2\n      url = buildURLMapsAPIv2({connection, type, source, credentials: localCreds});\n      return await request({url, credentials: localCreds});\n\n    default:\n      throw new Error(\n        `Invalid maps API version. It should be ${API_VERSIONS.V1} or ${API_VERSIONS.V2}`\n      );\n  }\n}\n\n/**\n * Request against Maps API\n */\nasync function request({url, credentials}: {url: string; credentials: ClassicCredentials}) {\n  let response;\n\n  try {\n    /* global fetch */\n    response = await fetch(url, {\n      headers: {\n        Accept: 'application/json'\n      }\n    });\n  } catch (error) {\n    throw new Error(`Failed to connect to Maps API: ${error}`);\n  }\n\n  const json = await response.json();\n\n  if (!response.ok) {\n    dealWithError({response, json, credentials});\n  }\n\n  return json;\n}\n\n/**\n * Display proper message from Maps API error\n */\nfunction dealWithError({\n  response,\n  json,\n  credentials\n}: {\n  response: Response;\n  json: any;\n  credentials: ClassicCredentials;\n}) {\n  switch (response.status) {\n    case 401:\n      throw new Error(\n        `Unauthorized access to Maps API: invalid combination of user ('${credentials.username}') and apiKey ('${credentials.apiKey}')`\n      );\n    case 403:\n      throw new Error(\n        `Unauthorized access to dataset: the provided apiKey('${credentials.apiKey}') doesn't provide access to the requested data`\n      );\n\n    default:\n      const e =\n        credentials.apiVersion === API_VERSIONS.V1 ? JSON.stringify(json.errors) : json.error;\n      throw new Error(e);\n  }\n}\n\nfunction initURLParameters(credentials: ClassicCredentials): string[] {\n  const encodedApiKey = encodeParameter('api_key', credentials.apiKey);\n  const encodedClient = encodeParameter('client', 'deck-gl-carto');\n  return [encodedApiKey, encodedClient];\n}\n\n/**\n * Build a URL with all required parameters\n */\nfunction buildURLMapsAPIv1({\n  mapConfig,\n  credentials\n}: {\n  mapConfig: unknown;\n  credentials: Required<ClassicCredentials>;\n}): string {\n  const parameters = initURLParameters(credentials);\n  const cfg = JSON.stringify(mapConfig);\n  return `${mapsUrl(credentials)}?${parameters.join('&')}&${encodeParameter('config', cfg)}`;\n}\n\nfunction buildURLMapsAPIv2({\n  connection,\n  type,\n  source,\n  credentials\n}: {\n  connection: string;\n  type: MapType;\n  source: string;\n  credentials: Required<ClassicCredentials>;\n}): string {\n  const parameters = initURLParameters(credentials);\n  // Query type is mapped to 'sql' at maps api v1\n  const mapsApiType = type === MAP_TYPES.QUERY ? 'sql' : type;\n  let url = `${mapsUrl(credentials)}/${connection}/${mapsApiType}?`;\n  url += `${encodeParameter('source', source)}&format=tilejson&${parameters.join('&')}`;\n  return url;\n}\n\n/**\n * Prepare a url valid for the specified user\n */\nfunction mapsUrl(credentials: Required<ClassicCredentials>) {\n  return credentials.mapsUrl\n    .replace(DEFAULT_USER_COMPONENT_IN_URL, credentials.username)\n    .replace(DEFAULT_REGION_COMPONENT_IN_URL, credentials.region);\n}\n\nfunction createMapConfig(sql: string) {\n  return {\n    version: '1.3.1',\n    buffersize: {\n      mvt: BUFFER_SIZE\n    },\n    layers: [\n      {\n        type: 'mapnik',\n        options: {\n          sql,\n          // eslint-disable-next-line camelcase\n          vector_extent: TILE_EXTENT\n        }\n      }\n    ]\n  };\n}\n"]},"metadata":{},"sourceType":"module"}