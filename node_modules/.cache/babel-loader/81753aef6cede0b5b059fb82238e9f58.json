{"ast":null,"code":"import View from './view';\nimport Viewport from '../viewports/viewport';\nimport { getMeterZoom } from '@math.gl/web-mercator';\nimport { Matrix4, _SphericalCoordinates as SphericalCoordinates } from '@math.gl/core';\nimport FirstPersonController from '../controllers/first-person-controller';\n\nfunction getDirectionFromBearingAndPitch(_ref) {\n  let {\n    bearing,\n    pitch\n  } = _ref;\n  const spherical = new SphericalCoordinates({\n    bearing,\n    pitch\n  });\n  const direction = spherical.toVector3().normalize();\n  return direction;\n}\n\nclass FirstPersonViewport extends Viewport {\n  constructor(props) {\n    const {\n      modelMatrix = null,\n      bearing = 0,\n      pitch = 0,\n      up = [0, 0, 1]\n    } = props;\n    const dir = getDirectionFromBearingAndPitch({\n      bearing,\n      pitch: pitch === -90 ? 0.0001 : 90 + pitch\n    });\n    const center = modelMatrix ? modelMatrix.transformDirection(dir) : dir;\n    const zoom = getMeterZoom(props);\n    const scale = Math.pow(2, zoom);\n    const viewMatrix = new Matrix4().lookAt({\n      eye: [0, 0, 0],\n      center,\n      up\n    }).scale(scale);\n    super({ ...props,\n      zoom,\n      viewMatrix\n    });\n  }\n\n}\n\nexport default class FirstPersonView extends View {\n  constructor(props) {\n    super({ ...props,\n      type: FirstPersonViewport\n    });\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: FirstPersonController\n    });\n  }\n\n}\nFirstPersonView.displayName = 'FirstPersonView';","map":{"version":3,"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAAQC,YAAR,QAA2B,uBAA3B;AACA,SAAQC,OAAR,EAAiBC,qBAAqB,IAAIC,oBAA1C,QAAqE,eAArE;AACA,OAAOC,qBAAP,MAAkC,wCAAlC;;AAEA,SAASC,+BAAT,OAA2D;EAAA,IAAlB;IAACC,OAAD;IAAUC;EAAV,CAAkB;EACzD,MAAMC,SAAS,GAAG,IAAIL,oBAAJ,CAAyB;IAACG,OAAD;IAAUC;EAAV,CAAzB,CAAlB;EACA,MAAME,SAAS,GAAGD,SAAS,CAACE,SAAVF,GAAsBG,SAAtBH,EAAlB;EACA,OAAOC,SAAP;AACD;;AAED,MAAMG,mBAAN,SAAkCb,QAAlC,CAA2C;EACzCc,WAAW,CAACC,KAAD,EAAQ;IAEjB,MAAM;MAEJC,WAAW,GAAG,IAFV;MAGJT,OAAO,GAAG,CAHN;MAIJC,KAAK,GAAG,CAJJ;MAKJS,EAAE,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;IALD,IAMFF,KANJ;IASA,MAAMG,GAAG,GAAGZ,+BAA+B,CAAC;MAC1CC,OAD0C;MAG1CC,KAAK,EAAEA,KAAK,KAAK,CAAC,EAAXA,GAAgB,MAAhBA,GAAyB,KAAKA;IAHK,CAAD,CAA3C;IAOA,MAAMW,MAAM,GAAGH,WAAW,GAAGA,WAAW,CAACI,kBAAZJ,CAA+BE,GAA/BF,CAAH,GAAyCE,GAAnE;IAGA,MAAMG,IAAI,GAAGpB,YAAY,CAACc,KAAD,CAAzB;IACA,MAAMO,KAAK,GAAGC,IAAI,CAACC,GAALD,CAAS,CAATA,EAAYF,IAAZE,CAAd;IACA,MAAME,UAAU,GAAG,IAAIvB,OAAJ,GAAcwB,MAAd,CAAqB;MAACC,GAAG,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAN;MAAiBR,MAAjB;MAAyBF;IAAzB,CAArB,EAAmDK,KAAnD,CAAyDA,KAAzD,CAAnB;IAEA,MAAM,EACJ,GAAGP,KADC;MAEJM,IAFI;MAGJI;IAHI,CAAN;EAKD;;AA/BwC;;AAkC3C,eAAe,MAAMG,eAAN,SAA8B7B,IAA9B,CAAmC;EAChDe,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAM,EACJ,GAAGA,KADC;MAEJc,IAAI,EAAEhB;IAFF,CAAN;EAID;;EAEa,IAAViB,UAAU,GAAG;IACf,OAAO,KAAKC,mBAAL,CAAyB;MAC9BF,IAAI,EAAExB;IADwB,CAAzB,CAAP;EAGD;;AAZ+C;AAelDuB,eAAe,CAACI,WAAhBJ,GAA8B,iBAA9BA","names":["View","Viewport","getMeterZoom","Matrix4","_SphericalCoordinates","SphericalCoordinates","FirstPersonController","getDirectionFromBearingAndPitch","bearing","pitch","spherical","direction","toVector3","normalize","FirstPersonViewport","constructor","props","modelMatrix","up","dir","center","transformDirection","zoom","scale","Math","pow","viewMatrix","lookAt","eye","FirstPersonView","type","controller","_getControllerProps","displayName"],"sources":["../../../src/views/first-person-view.js"],"sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\nimport {getMeterZoom} from '@math.gl/web-mercator';\nimport {Matrix4, _SphericalCoordinates as SphericalCoordinates} from '@math.gl/core';\nimport FirstPersonController from '../controllers/first-person-controller';\n\nfunction getDirectionFromBearingAndPitch({bearing, pitch}) {\n  const spherical = new SphericalCoordinates({bearing, pitch});\n  const direction = spherical.toVector3().normalize();\n  return direction;\n}\n\nclass FirstPersonViewport extends Viewport {\n  constructor(props) {\n    // TODO - push direction handling into Matrix4.lookAt\n    const {\n      // view matrix arguments\n      modelMatrix = null,\n      bearing = 0,\n      pitch = 0,\n      up = [0, 0, 1] // Defines up direction, default positive z axis,\n    } = props;\n\n    // Always calculate direction from bearing and pitch\n    const dir = getDirectionFromBearingAndPitch({\n      bearing,\n      // Avoid \"pixel project matrix not invertible\" error\n      pitch: pitch === -90 ? 0.0001 : 90 + pitch\n    });\n\n    // Direction is relative to model coordinates, of course\n    const center = modelMatrix ? modelMatrix.transformDirection(dir) : dir;\n\n    // Just the direction. All the positioning is done in viewport.js\n    const zoom = getMeterZoom(props);\n    const scale = Math.pow(2, zoom);\n    const viewMatrix = new Matrix4().lookAt({eye: [0, 0, 0], center, up}).scale(scale);\n\n    super({\n      ...props,\n      zoom,\n      viewMatrix\n    });\n  }\n}\n\nexport default class FirstPersonView extends View {\n  constructor(props) {\n    super({\n      ...props,\n      type: FirstPersonViewport\n    });\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: FirstPersonController\n    });\n  }\n}\n\nFirstPersonView.displayName = 'FirstPersonView';\n"]},"metadata":{},"sourceType":"module"}