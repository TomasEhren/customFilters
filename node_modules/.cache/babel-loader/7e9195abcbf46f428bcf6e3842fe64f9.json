{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport OrthographicView from '../../views/orthographic-view';\nimport WebMercatorViewport from '../../viewports/web-mercator-viewport';\nimport { fitBounds } from '@math.gl/web-mercator';\nexport function getMaskBounds(_ref) {\n  var layers = _ref.layers,\n      viewport = _ref.viewport;\n  var bounds = null;\n\n  var _iterator = _createForOfIteratorHelper(layers),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var layer = _step.value;\n      var subLayerBounds = layer.getBounds();\n\n      if (subLayerBounds) {\n        if (bounds) {\n          bounds[0] = Math.min(bounds[0], subLayerBounds[0][0]);\n          bounds[1] = Math.min(bounds[1], subLayerBounds[0][1]);\n          bounds[2] = Math.max(bounds[2], subLayerBounds[1][0]);\n          bounds[3] = Math.max(bounds[3], subLayerBounds[1][1]);\n        } else {\n          bounds = [subLayerBounds[0][0], subLayerBounds[0][1], subLayerBounds[1][0], subLayerBounds[1][1]];\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var viewportBounds = viewport.getBounds();\n\n  if (!bounds) {\n    return viewportBounds;\n  }\n\n  var paddedBounds = _doubleBounds(viewportBounds);\n\n  if (bounds[2] - bounds[0] < paddedBounds[2] - paddedBounds[0] || bounds[3] - bounds[1] < paddedBounds[3] - paddedBounds[1]) {\n    return bounds;\n  }\n\n  bounds[0] = Math.max(bounds[0], paddedBounds[0]);\n  bounds[1] = Math.max(bounds[1], paddedBounds[1]);\n  bounds[2] = Math.min(bounds[2], paddedBounds[2]);\n  bounds[3] = Math.min(bounds[3], paddedBounds[3]);\n  return bounds;\n}\nexport function getMaskViewport(_ref2) {\n  var bounds = _ref2.bounds,\n      viewport = _ref2.viewport,\n      width = _ref2.width,\n      height = _ref2.height;\n\n  if (bounds[2] <= bounds[0] || bounds[3] <= bounds[1]) {\n    return null;\n  }\n\n  var padding = 1;\n  width -= padding * 2;\n  height -= padding * 2;\n\n  if (viewport instanceof WebMercatorViewport) {\n    var _fitBounds = fitBounds({\n      width: width,\n      height: height,\n      bounds: [[bounds[0], bounds[1]], [bounds[2], bounds[3]]],\n      maxZoom: 20\n    }),\n        longitude = _fitBounds.longitude,\n        latitude = _fitBounds.latitude,\n        zoom = _fitBounds.zoom;\n\n    return new WebMercatorViewport({\n      longitude: longitude,\n      latitude: latitude,\n      zoom: zoom,\n      x: padding,\n      y: padding,\n      width: width,\n      height: height\n    });\n  }\n\n  var center = [(bounds[0] + bounds[2]) / 2, (bounds[1] + bounds[3]) / 2, 0];\n  var scale = Math.min(20, width / (bounds[2] - bounds[0]), height / (bounds[3] - bounds[1]));\n  return new OrthographicView({\n    x: padding,\n    y: padding\n  }).makeViewport({\n    width: width,\n    height: height,\n    viewState: {\n      target: center,\n      zoom: Math.log2(scale)\n    }\n  });\n}\n\nfunction _doubleBounds(bounds) {\n  var size = {\n    x: bounds[2] - bounds[0],\n    y: bounds[3] - bounds[1]\n  };\n  var center = {\n    x: bounds[0] + 0.5 * size.x,\n    y: bounds[1] + 0.5 * size.y\n  };\n  return [center.x - size.x, center.y - size.y, center.x + size.x, center.y + size.y];\n}","map":{"version":3,"mappings":"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","names":["OrthographicView","WebMercatorViewport","fitBounds","getMaskBounds","layers","viewport","bounds","layer","subLayerBounds","getBounds","Math","min","max","viewportBounds","paddedBounds","_doubleBounds","getMaskViewport","width","height","padding","maxZoom","longitude","latitude","zoom","x","y","center","scale","makeViewport","viewState","target","log2","size"],"sources":["../../../../src/effects/mask/utils.js"],"sourcesContent":["import OrthographicView from '../../views/orthographic-view';\nimport WebMercatorViewport from '../../viewports/web-mercator-viewport';\nimport {fitBounds} from '@math.gl/web-mercator';\n/*\n * Compute the bounds of the mask in world space, such that it covers an\n * area currently visible (extended by a buffer) or the area of the masking\n * data, whichever is smaller\n */\nexport function getMaskBounds({layers, viewport}) {\n  // Join the bounds of layer data\n  let bounds = null;\n  for (const layer of layers) {\n    const subLayerBounds = layer.getBounds();\n    if (subLayerBounds) {\n      if (bounds) {\n        bounds[0] = Math.min(bounds[0], subLayerBounds[0][0]);\n        bounds[1] = Math.min(bounds[1], subLayerBounds[0][1]);\n        bounds[2] = Math.max(bounds[2], subLayerBounds[1][0]);\n        bounds[3] = Math.max(bounds[3], subLayerBounds[1][1]);\n      } else {\n        bounds = [\n          subLayerBounds[0][0],\n          subLayerBounds[0][1],\n          subLayerBounds[1][0],\n          subLayerBounds[1][1]\n        ];\n      }\n    }\n  }\n  const viewportBounds = viewport.getBounds();\n  if (!bounds) {\n    return viewportBounds;\n  }\n\n  // Expand viewport bounds by 2X. Heurestically chosen to avoid masking\n  // errors when mask is partially out of view\n  const paddedBounds = _doubleBounds(viewportBounds);\n\n  // When bounds of the mask are smaller than the viewport bounds simply use\n  // mask bounds, so as to maximize resolution & avoid mask rerenders\n  if (\n    bounds[2] - bounds[0] < paddedBounds[2] - paddedBounds[0] ||\n    bounds[3] - bounds[1] < paddedBounds[3] - paddedBounds[1]\n  ) {\n    return bounds;\n  }\n\n  // As viewport shrinks, to avoid pixelation along mask edges\n  // we need to reduce the bounds and only render the visible portion\n  // of the mask.\n  // We pad the viewport bounds to capture the section\n  // of the mask just outside the viewport to correctly maskByInstance.\n  // Intersect mask & padded viewport bounds\n  bounds[0] = Math.max(bounds[0], paddedBounds[0]);\n  bounds[1] = Math.max(bounds[1], paddedBounds[1]);\n  bounds[2] = Math.min(bounds[2], paddedBounds[2]);\n  bounds[3] = Math.min(bounds[3], paddedBounds[3]);\n  return bounds;\n}\n\n/*\n * Compute viewport to render the mask into, covering the given bounds\n */\nexport function getMaskViewport({bounds, viewport, width, height}) {\n  if (bounds[2] <= bounds[0] || bounds[3] <= bounds[1]) {\n    return null;\n  }\n\n  // Single pixel border to prevent mask bleeding at edge of texture\n  const padding = 1;\n  width -= padding * 2;\n  height -= padding * 2;\n\n  if (viewport instanceof WebMercatorViewport) {\n    const {longitude, latitude, zoom} = fitBounds({\n      width,\n      height,\n      bounds: [\n        [bounds[0], bounds[1]],\n        [bounds[2], bounds[3]]\n      ],\n      maxZoom: 20\n    });\n    return new WebMercatorViewport({\n      longitude,\n      latitude,\n      zoom,\n      x: padding,\n      y: padding,\n      width,\n      height\n    });\n  }\n\n  const center = [(bounds[0] + bounds[2]) / 2, (bounds[1] + bounds[3]) / 2, 0];\n  const scale = Math.min(20, width / (bounds[2] - bounds[0]), height / (bounds[3] - bounds[1]));\n\n  return new OrthographicView({\n    x: padding,\n    y: padding\n  }).makeViewport({\n    width,\n    height,\n    viewState: {\n      target: center,\n      zoom: Math.log2(scale)\n    }\n  });\n}\n\nfunction _doubleBounds(bounds) {\n  const size = {\n    x: bounds[2] - bounds[0],\n    y: bounds[3] - bounds[1]\n  };\n  const center = {\n    x: bounds[0] + 0.5 * size.x,\n    y: bounds[1] + 0.5 * size.y\n  };\n  return [center.x - size.x, center.y - size.y, center.x + size.x, center.y + size.y];\n}\n"]},"metadata":{},"sourceType":"module"}