{"ast":null,"code":"import Controller from './controller';\nimport ViewState from './view-state';\nimport { mod } from '../utils/math-utils';\nimport { Vector3, _SphericalCoordinates as SphericalCoordinates, clamp } from '@math.gl/core';\nconst MOVEMENT_SPEED = 20;\nconst DEFAULT_STATE = {\n  position: [0, 0, 0],\n  pitch: 0,\n  bearing: 0,\n  maxPitch: 90,\n  minPitch: -90\n};\n\nclass FirstPersonState extends ViewState {\n  constructor(_ref) {\n    let {\n      width,\n      height,\n      position = DEFAULT_STATE.position,\n      bearing = DEFAULT_STATE.bearing,\n      pitch = DEFAULT_STATE.pitch,\n      longitude,\n      latitude,\n      maxPitch = DEFAULT_STATE.maxPitch,\n      minPitch = DEFAULT_STATE.minPitch,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoomPosition,\n      startZoom\n    } = _ref;\n    super({\n      width,\n      height,\n      position,\n      bearing,\n      pitch,\n      longitude,\n      latitude,\n      maxPitch,\n      minPitch\n    });\n    this._state = {\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoomPosition,\n      startZoom\n    };\n  }\n\n  getDirection() {\n    let use2D = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const spherical = new SphericalCoordinates({\n      bearing: this._viewportProps.bearing,\n      pitch: use2D ? 90 : 90 + this._viewportProps.pitch\n    });\n    const direction = spherical.toVector3().normalize();\n    return direction;\n  }\n\n  panStart() {\n    return this;\n  }\n\n  pan() {\n    return this;\n  }\n\n  panEnd() {\n    return this;\n  }\n\n  rotateStart(_ref2) {\n    let {\n      pos\n    } = _ref2;\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  rotate(_ref3) {\n    let {\n      pos,\n      deltaAngleX = 0,\n      deltaAngleY = 0\n    } = _ref3;\n    const {\n      startRotatePos,\n      startBearing,\n      startPitch\n    } = this._state;\n    const {\n      width,\n      height\n    } = this._viewportProps;\n\n    if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    let newRotation;\n\n    if (pos) {\n      const deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n      newRotation = {\n        bearing: startBearing - deltaScaleX * 180,\n        pitch: startPitch - deltaScaleY * 90\n      };\n    } else {\n      newRotation = {\n        bearing: startBearing - deltaAngleX,\n        pitch: startPitch - deltaAngleY\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  rotateEnd() {\n    return this._getUpdatedState({\n      startRotatePos: null,\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  zoomStart() {\n    return this._getUpdatedState({\n      startZoomPosition: this._viewportProps.position,\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  zoom(_ref4) {\n    let {\n      scale\n    } = _ref4;\n    let {\n      startZoomPosition\n    } = this._state;\n\n    if (!startZoomPosition) {\n      startZoomPosition = this._viewportProps.position;\n    }\n\n    const direction = this.getDirection();\n    return this._move(direction, Math.log2(scale) * MOVEMENT_SPEED, startZoomPosition);\n  }\n\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startZoom: null\n    });\n  }\n\n  moveLeft() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MOVEMENT_SPEED;\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({\n      radians: Math.PI / 2\n    }), speed);\n  }\n\n  moveRight() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MOVEMENT_SPEED;\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({\n      radians: -Math.PI / 2\n    }), speed);\n  }\n\n  moveUp() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MOVEMENT_SPEED;\n    const direction = this.getDirection(true);\n    return this._move(direction, speed);\n  }\n\n  moveDown() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MOVEMENT_SPEED;\n    const direction = this.getDirection(true);\n    return this._move(direction.negate(), speed);\n  }\n\n  rotateLeft() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - speed\n    });\n  }\n\n  rotateRight() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + speed\n    });\n  }\n\n  rotateUp() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + speed\n    });\n  }\n\n  rotateDown() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - speed\n    });\n  }\n\n  zoomIn() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n    return this.zoom({\n      scale: speed\n    });\n  }\n\n  zoomOut() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n    return this.zoom({\n      scale: 1 / speed\n    });\n  }\n\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = { ...this._viewportProps\n    };\n    const {\n      bearing,\n      longitude\n    } = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n\n    return props;\n  }\n\n  _move(direction, speed) {\n    let fromPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._viewportProps.position;\n    const delta = direction.scale(speed);\n    return this._getUpdatedState({\n      position: new Vector3(fromPosition).add(delta)\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    return new FirstPersonState({ ...this._viewportProps,\n      ...this._state,\n      ...newProps\n    });\n  }\n\n  _applyConstraints(props) {\n    const {\n      pitch,\n      maxPitch,\n      minPitch,\n      longitude,\n      bearing\n    } = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    if (longitude < -180 || longitude > 180) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n\n    if (bearing < -180 || bearing > 180) {\n      props.bearing = mod(bearing + 180, 360) - 180;\n    }\n\n    return props;\n  }\n\n}\n\nexport default class FirstPersonController extends Controller {\n  constructor(props) {\n    super(FirstPersonState, props);\n  }\n\n  get linearTransitionProps() {\n    return ['position', 'pitch', 'bearing'];\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Controller","ViewState","mod","Vector3","_SphericalCoordinates","SphericalCoordinates","clamp","MOVEMENT_SPEED","DEFAULT_STATE","position","pitch","bearing","maxPitch","minPitch","FirstPersonState","constructor","width","height","longitude","latitude","startRotatePos","startBearing","startPitch","startZoomPosition","startZoom","_state","getDirection","use2D","spherical","_viewportProps","direction","toVector3","normalize","panStart","pan","panEnd","rotateStart","pos","_getUpdatedState","rotate","deltaAngleX","deltaAngleY","Number","isFinite","newRotation","deltaScaleX","deltaScaleY","rotateEnd","zoomStart","zoom","scale","_move","Math","log2","zoomEnd","moveLeft","speed","rotateZ","radians","PI","moveRight","moveUp","moveDown","negate","rotateLeft","rotateRight","rotateUp","rotateDown","zoomIn","zoomOut","shortestPathFrom","viewState","fromProps","getViewportProps","props","abs","fromPosition","delta","add","newProps","_applyConstraints","FirstPersonController","linearTransitionProps"],"sources":["../../../src/controllers/first-person-controller.ts"],"sourcesContent":["import Controller from './controller';\nimport ViewState from './view-state';\nimport {mod} from '../utils/math-utils';\n\nimport {Vector3, _SphericalCoordinates as SphericalCoordinates, clamp} from '@math.gl/core';\n\nconst MOVEMENT_SPEED = 20;\nconst DEFAULT_STATE = {\n  position: [0, 0, 0],\n  pitch: 0,\n  bearing: 0,\n  maxPitch: 90,\n  minPitch: -90\n};\n\nclass FirstPersonState extends ViewState {\n  constructor({\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n\n    // Position and orientation\n    position = DEFAULT_STATE.position, // typically in meters from anchor point\n\n    bearing = DEFAULT_STATE.bearing, // Rotation around y axis\n    pitch = DEFAULT_STATE.pitch, // Rotation around x axis\n\n    // Geospatial anchor\n    longitude,\n    latitude,\n\n    maxPitch = DEFAULT_STATE.maxPitch,\n    minPitch = DEFAULT_STATE.minPitch,\n\n    // Model state when the rotate operation first started\n    startRotatePos,\n    startBearing,\n    startPitch,\n    startZoomPosition,\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      position,\n      bearing,\n      pitch,\n      longitude,\n      latitude,\n      maxPitch,\n      minPitch\n    });\n\n    this._state = {\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoomPosition,\n      startZoom\n    };\n  }\n\n  /* Public API */\n\n  getDirection(use2D = false) {\n    const spherical = new SphericalCoordinates({\n      bearing: this._viewportProps.bearing,\n      pitch: use2D ? 90 : 90 + this._viewportProps.pitch\n    });\n    const direction = spherical.toVector3().normalize();\n    return direction;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart() {\n    return this;\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan() {\n    return this;\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this;\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startBearing, startPitch} = this._state;\n    const {width, height} = this._viewportProps;\n\n    if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    let newRotation;\n    if (pos) {\n      const deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n      newRotation = {\n        bearing: startBearing - deltaScaleX * 180,\n        pitch: startPitch - deltaScaleY * 90\n      };\n    } else {\n      newRotation = {\n        bearing: startBearing - deltaAngleX,\n        pitch: startPitch - deltaAngleY\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startRotatePos: null,\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart() {\n    return this._getUpdatedState({\n      startZoomPosition: this._viewportProps.position,\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({scale}) {\n    let {startZoomPosition} = this._state;\n    if (!startZoomPosition) {\n      startZoomPosition = this._viewportProps.position;\n    }\n\n    const direction = this.getDirection();\n    return this._move(direction, Math.log2(scale) * MOVEMENT_SPEED, startZoomPosition);\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startZoom: null\n    });\n  }\n\n  moveLeft(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: Math.PI / 2}), speed);\n  }\n\n  moveRight(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: -Math.PI / 2}), speed);\n  }\n\n  // forward\n  moveUp(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction, speed);\n  }\n\n  // backward\n  moveDown(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction.negate(), speed);\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - speed\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this.zoom({scale: speed});\n  }\n\n  zoomOut(speed = 2) {\n    return this.zoom({scale: 1 / speed});\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = {...this._viewportProps};\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n  _move(direction, speed, fromPosition = this._viewportProps.position) {\n    const delta = direction.scale(speed);\n    return this._getUpdatedState({\n      position: new Vector3(fromPosition).add(delta)\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new FirstPersonState({...this._viewportProps, ...this._state, ...newProps});\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure pitch and zoom are within specified range\n    const {pitch, maxPitch, minPitch, longitude, bearing} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize degrees\n    if (longitude < -180 || longitude > 180) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n    if (bearing < -180 || bearing > 180) {\n      props.bearing = mod(bearing + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class FirstPersonController extends Controller {\n  constructor(props) {\n    super(FirstPersonState, props);\n  }\n\n  get linearTransitionProps() {\n    return ['position', 'pitch', 'bearing'];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}