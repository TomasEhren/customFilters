{"ast":null,"code":"import { Quaternion, Vector3, Matrix3, Matrix4, degrees } from '@math.gl/core';\nimport { BoundingSphere, OrientedBoundingBox } from '@math.gl/culling';\nimport { Ellipsoid } from '@math.gl/geospatial';\nimport { assert } from '@loaders.gl/loader-utils';\n\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\n\nconst scratchScale = new Vector3();\nconst scratchNorthWest = new Vector3();\nconst scratchSouthEast = new Vector3();\nexport function createBoundingVolume(boundingVolumeHeader, transform, result) {\n  assert(boundingVolumeHeader, '3D Tile: boundingVolume must be defined');\n\n  if (boundingVolumeHeader.box) {\n    return createBox(boundingVolumeHeader.box, transform, result);\n  }\n\n  if (boundingVolumeHeader.region) {\n    const [west, south, east, north, minHeight, maxHeight] = boundingVolumeHeader.region;\n    const northWest = Ellipsoid.WGS84.cartographicToCartesian([degrees(west), degrees(north), minHeight], scratchNorthWest);\n    const southEast = Ellipsoid.WGS84.cartographicToCartesian([degrees(east), degrees(south), maxHeight], scratchSouthEast);\n    const centerInCartesian = new Vector3().addVectors(northWest, southEast).multiplyScalar(0.5);\n    const radius = new Vector3().subVectors(northWest, southEast).len() / 2.0;\n    return createSphere([centerInCartesian[0], centerInCartesian[1], centerInCartesian[2], radius], new Matrix4());\n  }\n\n  if (boundingVolumeHeader.sphere) {\n    return createSphere(boundingVolumeHeader.sphere, transform, result);\n  }\n\n  throw new Error('3D Tile: boundingVolume must contain a sphere, region, or box');\n}\n\nfunction createBox(box, transform, result) {\n  const center = new Vector3(box[0], box[1], box[2]);\n  transform.transform(center, center);\n  let origin = [];\n\n  if (box.length === 10) {\n    const halfSize = box.slice(3, 6);\n    const quaternion = new Quaternion();\n    quaternion.fromArray(box, 6);\n    const x = new Vector3([1, 0, 0]);\n    const y = new Vector3([0, 1, 0]);\n    const z = new Vector3([0, 0, 1]);\n    x.transformByQuaternion(quaternion);\n    x.scale(halfSize[0]);\n    y.transformByQuaternion(quaternion);\n    y.scale(halfSize[1]);\n    z.transformByQuaternion(quaternion);\n    z.scale(halfSize[2]);\n    origin = [...x.toArray(), ...y.toArray(), ...z.toArray()];\n  } else {\n    origin = [...box.slice(3, 6), ...box.slice(6, 9), ...box.slice(9, 12)];\n  }\n\n  const xAxis = transform.transformAsVector(origin.slice(0, 3));\n  const yAxis = transform.transformAsVector(origin.slice(3, 6));\n  const zAxis = transform.transformAsVector(origin.slice(6, 9));\n  const halfAxes = new Matrix3([xAxis[0], xAxis[1], xAxis[2], yAxis[0], yAxis[1], yAxis[2], zAxis[0], zAxis[1], zAxis[2]]);\n\n  if (defined(result)) {\n    result.center = center;\n    result.halfAxes = halfAxes;\n    return result;\n  }\n\n  return new OrientedBoundingBox(center, halfAxes);\n}\n\nfunction createSphere(sphere, transform, result) {\n  const center = new Vector3(sphere[0], sphere[1], sphere[2]);\n  transform.transform(center, center);\n  const scale = transform.getScale(scratchScale);\n  const uniformScale = Math.max(Math.max(scale[0], scale[1]), scale[2]);\n  const radius = sphere[3] * uniformScale;\n\n  if (defined(result)) {\n    result.center = center;\n    result.radius = radius;\n    return result;\n  }\n\n  return new BoundingSphere(center, radius);\n}","map":{"version":3,"mappings":"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","names":["Quaternion","Vector3","Matrix3","Matrix4","degrees","BoundingSphere","OrientedBoundingBox","Ellipsoid","assert","defined","x","undefined","scratchScale","scratchNorthWest","scratchSouthEast","createBoundingVolume","boundingVolumeHeader","transform","result","box","createBox","region","west","south","east","north","minHeight","maxHeight","northWest","WGS84","cartographicToCartesian","southEast","centerInCartesian","addVectors","multiplyScalar","radius","subVectors","len","createSphere","sphere","Error","center","origin","length","halfSize","slice","quaternion","fromArray","y","z","transformByQuaternion","scale","toArray","xAxis","transformAsVector","yAxis","zAxis","halfAxes","getScale","uniformScale","Math","max"],"sources":["../../../../src/tileset/helpers/bounding-volume.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/* eslint-disable */\nimport {Quaternion, Vector3, Matrix3, Matrix4, degrees} from '@math.gl/core';\nimport {BoundingSphere, OrientedBoundingBox} from '@math.gl/culling';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {assert} from '@loaders.gl/loader-utils';\n\n// const scratchProjectedBoundingSphere = new BoundingSphere();\n\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\n\n// const scratchMatrix = new Matrix3();\nconst scratchScale = new Vector3();\nconst scratchNorthWest = new Vector3();\nconst scratchSouthEast = new Vector3();\n// const scratchRectangle = new Rectangle();\n// const scratchOrientedBoundingBox = new OrientedBoundingBox();\n// const scratchTransform = new Matrix4();\n\n/**\n * Create a bounding volume from the tile's bounding volume header.\n * @param {Object} boundingVolumeHeader The tile's bounding volume header.\n * @param {Matrix4} transform The transform to apply to the bounding volume.\n * @param [result] The object onto which to store the result.\n * @returns The modified result parameter or a new TileBoundingVolume instance if none was provided.\n */\nexport function createBoundingVolume(boundingVolumeHeader, transform, result) {\n  assert(boundingVolumeHeader, '3D Tile: boundingVolume must be defined');\n\n  // boundingVolume schema:\n  // https://github.com/AnalyticalGraphicsInc/3d-tiles/blob/master/specification/schema/boundingVolume.schema.json\n  if (boundingVolumeHeader.box) {\n    return createBox(boundingVolumeHeader.box, transform, result);\n  }\n  if (boundingVolumeHeader.region) {\n    // [west, south, east, north, minimum height, maximum height]\n    // Latitudes and longitudes are in the WGS 84 datum as defined in EPSG 4979 and are in radians.\n    // Heights are in meters above (or below) the WGS 84 ellipsoid.\n    const [west, south, east, north, minHeight, maxHeight] = boundingVolumeHeader.region;\n\n    const northWest = Ellipsoid.WGS84.cartographicToCartesian(\n      [degrees(west), degrees(north), minHeight],\n      scratchNorthWest\n    );\n    const southEast = Ellipsoid.WGS84.cartographicToCartesian(\n      [degrees(east), degrees(south), maxHeight],\n      scratchSouthEast\n    );\n    const centerInCartesian = new Vector3().addVectors(northWest, southEast).multiplyScalar(0.5);\n    const radius = new Vector3().subVectors(northWest, southEast).len() / 2.0;\n\n    // TODO improve region boundingVolume\n    // for now, create a sphere as the boundingVolume instead of box\n    return createSphere(\n      [centerInCartesian[0], centerInCartesian[1], centerInCartesian[2], radius],\n      new Matrix4()\n    );\n  }\n\n  if (boundingVolumeHeader.sphere) {\n    return createSphere(boundingVolumeHeader.sphere, transform, result);\n  }\n\n  throw new Error('3D Tile: boundingVolume must contain a sphere, region, or box');\n}\n\nfunction createBox(box, transform, result) {\n  // https://math.gl/modules/culling/docs/api-reference/oriented-bounding-box\n  // 1. A half-axes based representation.\n  // box: An array of 12 numbers that define an oriented bounding box.\n  // The first three elements define the x, y, and z values for the center of the box.\n  // The next three elements (with indices 3, 4, and 5) define the x axis direction and half-length.\n  // The next three elements (indices 6, 7, and 8) define the y axis direction and half-length.\n  // The last three elements (indices 9, 10, and 11) define the z axis direction and half-length.\n  // 2. A half-size-quaternion based representation.\n  // box: An array of 10 numbers that define an oriented bounding box.\n  // The first three elements define the x, y, and z values for the center of the box in a right-handed 3-axis (x, y, z) Cartesian coordinate system where the z-axis is up.\n  // The next three elements (with indices 3, 4, and 5) define the halfSize.\n  // The last four elements (indices 6, 7, 8 and 10) define the quaternion.\n  const center = new Vector3(box[0], box[1], box[2]);\n  transform.transform(center, center);\n  let origin: number[] = [];\n  if (box.length === 10) {\n    const halfSize = box.slice(3, 6);\n    const quaternion = new Quaternion();\n    quaternion.fromArray(box, 6);\n    const x = new Vector3([1, 0, 0]);\n    const y = new Vector3([0, 1, 0]);\n    const z = new Vector3([0, 0, 1]);\n    x.transformByQuaternion(quaternion);\n    x.scale(halfSize[0]);\n    y.transformByQuaternion(quaternion);\n    y.scale(halfSize[1]);\n    z.transformByQuaternion(quaternion);\n    z.scale(halfSize[2]);\n    origin = [...x.toArray(), ...y.toArray(), ...z.toArray()];\n  } else {\n    origin = [...box.slice(3, 6), ...box.slice(6, 9), ...box.slice(9, 12)];\n  }\n  const xAxis = transform.transformAsVector(origin.slice(0, 3));\n  const yAxis = transform.transformAsVector(origin.slice(3, 6));\n  const zAxis = transform.transformAsVector(origin.slice(6, 9));\n  const halfAxes = new Matrix3([\n    xAxis[0],\n    xAxis[1],\n    xAxis[2],\n    yAxis[0],\n    yAxis[1],\n    yAxis[2],\n    zAxis[0],\n    zAxis[1],\n    zAxis[2]\n  ]);\n\n  if (defined(result)) {\n    result.center = center;\n    result.halfAxes = halfAxes;\n    return result;\n  }\n\n  return new OrientedBoundingBox(center, halfAxes);\n}\n\n/*\nfunction createBoxFromTransformedRegion(region, transform, initialTransform, result) {\n  const rectangle = Rectangle.unpack(region, 0, scratchRectangle);\n  const minimumHeight = region[4];\n  const maximumHeight = region[5];\n\n  const orientedBoundingBox = OrientedBoundingBox.fromRectangle(\n    rectangle,\n    minimumHeight,\n    maximumHeight,\n    Ellipsoid.WGS84,\n    scratchOrientedBoundingBox\n  );\n  const center = orientedBoundingBox.center;\n  const halfAxes = orientedBoundingBox.halfAxes;\n\n  // A region bounding volume is not transformed by the transform in the tileset JSON,\n  // but may be transformed by additional transforms applied in Cesium.\n  // This is why the transform is calculated as the difference between the initial transform and the current transform.\n  transform = Matrix4.multiplyTransformation(\n    transform,\n    Matrix4.inverseTransformation(initialTransform, scratchTransform),\n    scratchTransform\n  );\n  center = Matrix4.multiplyByPoint(transform, center, center);\n  const rotationScale = Matrix4.getRotation(transform, scratchMatrix);\n  halfAxes = Matrix3.multiply(rotationScale, halfAxes, halfAxes);\n\n  if (defined(result) && result instanceof TileOrientedBoundingBox) {\n    result.update(center, halfAxes);\n    return result;\n  }\n\n  return new TileOrientedBoundingBox(center, halfAxes);\n}\n\nfunction createRegion(region, transform, initialTransform, result) {\n  if (!Matrix4.equalsEpsilon(transform, initialTransform, CesiumMath.EPSILON8)) {\n    return createBoxFromTransformedRegion(region, transform, initialTransform, result);\n  }\n\n  if (defined(result)) {\n    return result;\n  }\n\n  const rectangleRegion = Rectangle.unpack(region, 0, scratchRectangle);\n\n  return new TileBoundingRegion({\n    rectangle: rectangleRegion,\n    minimumHeight: region[4],\n    maximumHeight: region[5]\n  });\n}\n*/\n\nfunction createSphere(sphere, transform, result?) {\n  // Find the transformed center\n  const center = new Vector3(sphere[0], sphere[1], sphere[2]);\n  transform.transform(center, center);\n  const scale = transform.getScale(scratchScale);\n\n  const uniformScale = Math.max(Math.max(scale[0], scale[1]), scale[2]);\n  const radius = sphere[3] * uniformScale;\n\n  if (defined(result)) {\n    result.center = center;\n    result.radius = radius;\n    return result;\n  }\n\n  return new BoundingSphere(center, radius);\n}\n"]},"metadata":{},"sourceType":"module"}