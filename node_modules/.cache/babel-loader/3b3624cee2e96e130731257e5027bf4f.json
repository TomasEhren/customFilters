{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { VERSION } from './lib/utils/version';\nimport { parseGLTF } from './lib/parsers/parse-gltf';\nexport var GLTFLoader = {\n  name: 'glTF',\n  id: 'gltf',\n  module: 'gltf',\n  version: VERSION,\n  extensions: ['gltf', 'glb'],\n  mimeTypes: ['model/gltf+json', 'model/gltf-binary'],\n  text: true,\n  binary: true,\n  tests: ['glTF'],\n  parse: parse,\n  options: {\n    gltf: {\n      normalize: true,\n      loadBuffers: true,\n      loadImages: true,\n      decompressMeshes: true,\n      postProcess: true\n    },\n    log: console\n  },\n  deprecatedOptions: {\n    fetchImages: 'gltf.loadImages',\n    createImages: 'gltf.loadImages',\n    decompress: 'gltf.decompressMeshes',\n    postProcess: 'gltf.postProcess',\n    gltf: {\n      decompress: 'gltf.decompressMeshes'\n    }\n  }\n};\nexport function parse(_x) {\n  return _parse.apply(this, arguments);\n}\n\nfunction _parse() {\n  _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(arrayBuffer) {\n    var options,\n        context,\n        _options,\n        _options$byteOffset,\n        byteOffset,\n        gltf,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            context = _args.length > 2 ? _args[2] : undefined;\n            options = _objectSpread(_objectSpread({}, GLTFLoader.options), options);\n            options.gltf = _objectSpread(_objectSpread({}, GLTFLoader.options.gltf), options.gltf);\n            _options = options, _options$byteOffset = _options.byteOffset, byteOffset = _options$byteOffset === void 0 ? 0 : _options$byteOffset;\n            gltf = {};\n            _context.next = 8;\n            return parseGLTF(gltf, arrayBuffer, byteOffset, options, context);\n\n          case 8:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parse.apply(this, arguments);\n}","map":{"version":3,"mappings":";;;AAEA,SAAQA,OAAR,QAAsB,qBAAtB;AAKA,SAAQC,SAAR,QAAwB,0BAAxB;AAiBA,OAAO,IAAMC,UAA4B,GAAG;EAC1CC,IAAI,EAAE,MADoC;EAE1CC,EAAE,EAAE,MAFsC;EAG1CC,MAAM,EAAE,MAHkC;EAI1CC,OAAO,EAAEN,OAJiC;EAK1CO,UAAU,EAAE,CAAC,MAAD,EAAS,KAAT,CAL8B;EAM1CC,SAAS,EAAE,CAAC,iBAAD,EAAoB,mBAApB,CAN+B;EAQ1CC,IAAI,EAAE,IARoC;EAS1CC,MAAM,EAAE,IATkC;EAU1CC,KAAK,EAAE,CAAC,MAAD,CAVmC;EAW1CC,KAX0C,EAW1CA,KAX0C;EAa1CC,OAAO,EAAE;IACPC,IAAI,EAAE;MACJC,SAAS,EAAE,IADP;MAEJC,WAAW,EAAE,IAFT;MAGJC,UAAU,EAAE,IAHR;MAIJC,gBAAgB,EAAE,IAJd;MAKJC,WAAW,EAAE;IALT,CADC;IAUPC,GAAG,EAAEC;EAVE,CAbiC;EAyB1CC,iBAAiB,EAAE;IACjBC,WAAW,EAAE,iBADI;IAEjBC,YAAY,EAAE,iBAFG;IAGjBC,UAAU,EAAE,uBAHK;IAIjBN,WAAW,EAAE,kBAJI;IAKjBL,IAAI,EAAE;MACJW,UAAU,EAAE;IADR;EALW;AAzBuB,CAArC;AAoCP,gBAAsBb,KAAtB;EAAA;AAAA;;;oEAAO,iBAAqBc,WAArB;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAkCb,OAAlC,2DAA+D,EAA/D;YAAmEc,OAAnE;YAELd,OAAO,mCAAOX,UAAU,CAACW,OAAlB,GAA8BA,OAA9B,CAAPA;YAEAA,OAAO,CAACC,IAARD,mCAAmBX,UAAU,CAACW,OAAXX,CAAmBY,IAAtCD,GAA+CA,OAAO,CAACC,IAAvDD;YAJK,WAMoBA,OANpB,iCAMEe,UANF,EAMEA,UANF,oCAMe,CANf;YAOCd,IAPD,GAOQ,EAPR;YAAA;YAAA,OAQQb,SAAS,CAACa,IAAD,EAA0BY,WAA1B,EAAuCE,UAAvC,EAAmDf,OAAnD,EAA4Dc,OAA5D,CARjB;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","names":["VERSION","parseGLTF","GLTFLoader","name","id","module","version","extensions","mimeTypes","text","binary","tests","parse","options","gltf","normalize","loadBuffers","loadImages","decompressMeshes","postProcess","log","console","deprecatedOptions","fetchImages","createImages","decompress","arrayBuffer","context","byteOffset"],"sources":["../../src/gltf-loader.ts"],"sourcesContent":["import type {LoaderWithParser, LoaderOptions} from '@loaders.gl/loader-utils';\nimport type {DracoLoaderOptions} from '@loaders.gl/draco';\nimport {VERSION} from './lib/utils/version';\nimport type {ImageLoaderOptions} from '@loaders.gl/images';\nimport type {TextureLoaderOptions} from '@loaders.gl/textures';\nimport type {GLTFParseOptions} from './lib/parsers/parse-gltf';\nimport type {GLTFWithBuffers} from './lib/types/gltf-types';\nimport {parseGLTF} from './lib/parsers/parse-gltf';\nimport {GLBLoaderOptions} from './glb-loader';\n\n/**\n * GLTF loader options\n */\nexport type GLTFLoaderOptions = LoaderOptions &\n  ImageLoaderOptions &\n  TextureLoaderOptions &\n  GLBLoaderOptions &\n  DracoLoaderOptions & {\n    gltf?: GLTFParseOptions;\n  };\n\n/**\n * GLTF loader\n */\nexport const GLTFLoader: LoaderWithParser = {\n  name: 'glTF',\n  id: 'gltf',\n  module: 'gltf',\n  version: VERSION,\n  extensions: ['gltf', 'glb'],\n  mimeTypes: ['model/gltf+json', 'model/gltf-binary'],\n\n  text: true,\n  binary: true,\n  tests: ['glTF'],\n  parse,\n\n  options: {\n    gltf: {\n      normalize: true, // Normalize glTF v1 to glTF v2 format (not yet stable)\n      loadBuffers: true, // Fetch any linked .BIN buffers, decode base64\n      loadImages: true, // Create image objects\n      decompressMeshes: true, // Decompress Draco encoded meshes\n      postProcess: true // Postprocess glTF and return json structure directly\n    },\n\n    // common?\n    log: console // eslint-disable-line\n  },\n  deprecatedOptions: {\n    fetchImages: 'gltf.loadImages',\n    createImages: 'gltf.loadImages',\n    decompress: 'gltf.decompressMeshes',\n    postProcess: 'gltf.postProcess',\n    gltf: {\n      decompress: 'gltf.decompressMeshes'\n    }\n  }\n};\n\nexport async function parse(arrayBuffer, options: GLTFLoaderOptions = {}, context) {\n  // Apps can call the parse method directly, we so apply default options here\n  options = {...GLTFLoader.options, ...options};\n  // @ts-ignore\n  options.gltf = {...GLTFLoader.options.gltf, ...options.gltf};\n\n  const {byteOffset = 0} = options;\n  const gltf = {};\n  return await parseGLTF(gltf as GLTFWithBuffers, arrayBuffer, byteOffset, options, context);\n}\n"]},"metadata":{},"sourceType":"module"}