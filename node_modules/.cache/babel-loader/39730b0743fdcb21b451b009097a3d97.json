{"ast":null,"code":"export function makeStream(source, options) {\n  const iterator = source[Symbol.asyncIterator] ? source[Symbol.asyncIterator]() : source[Symbol.iterator]();\n  return new ReadableStream({\n    type: 'bytes',\n\n    async pull(controller) {\n      try {\n        const {\n          done,\n          value\n        } = await iterator.next();\n\n        if (done) {\n          controller.close();\n        } else {\n          controller.enqueue(new Uint8Array(value));\n        }\n      } catch (error) {\n        controller.error(error);\n      }\n    },\n\n    async cancel() {\n      var _iterator$return;\n\n      await (iterator === null || iterator === void 0 ? void 0 : (_iterator$return = iterator.return) === null || _iterator$return === void 0 ? void 0 : _iterator$return.call(iterator));\n    }\n\n  }, {\n    highWaterMark: 2 ** 24,\n    ...options\n  });\n}","map":{"version":3,"mappings":"AAaA,OAAO,SAASA,UAAT,CACLC,MADK,EAELC,OAFK,EAGW;EAChB,MAAMC,QAAQ,GAAGF,MAAM,CAACG,MAAM,CAACC,aAAR,CAANJ,GACZA,MAAD,CAAuCG,MAAM,CAACC,aAA9C,CAACJ,EADYA,GAEZA,MAAD,CAAkCG,MAAM,CAACD,QAAzC,CAACF,EAFL;EAIA,OAAO,IAAIK,cAAJ,CACL;IAKEC,IAAI,EAAE,OALR;;IAOE,MAAMC,IAAN,CAAWC,UAAX,EAAuB;MACrB,IAAI;QACF,MAAM;UAACC,IAAD;UAAOC;QAAP,IAAgB,MAAMR,QAAQ,CAACS,IAATT,EAA5B;;QACA,IAAIO,IAAJ,EAAU;UACRD,UAAU,CAACI,KAAXJ;QADF,OAEO;UAELA,UAAU,CAACK,OAAXL,CAAmB,IAAIM,UAAJ,CAAeJ,KAAf,CAAnBF;QACD;MAPH,EAQE,OAAOO,KAAP,EAAc;QACdP,UAAU,CAACO,KAAXP,CAAiBO,KAAjBP;MACD;IAlBL;;IAqBE,MAAMQ,MAAN,GAAe;MAAA;;MACb,OAAMd,QAAN,SAAMA,YAAN,WAAMA,GAAN,MAAMA,GAAN,oBAAMA,QAAQ,CAAEe,MAAhB,qDAAMC,+BAAN;IACD;;EAvBH,CADK,EA2BL;IAEEC,aAAa,EAAE,KAAK,EAFtB;IAGE,GAAGlB;EAHL,CA3BK,CAAP;AAiCD","names":["makeStream","source","options","iterator","Symbol","asyncIterator","ReadableStream","type","pull","controller","done","value","next","close","enqueue","Uint8Array","error","cancel","return","_iterator$return","highWaterMark"],"sources":["../../../../src/iterators/make-stream/make-dom-stream.ts"],"sourcesContent":["export type MakeStreamOptions = {\n  /** Stream allocates an arrayBuffer. Enables use of a default reader. */\n  autoAllocateChunkSize?: number;\n  /** Total number of chunks in queue before back pressure is applied */\n  highWaterMark?: number;\n};\n\n/**\n * Builds a DOM stream from an iterator\n * This stream is currently used in browsers only,\n * but note that Web stream support is present in Node from Node 16\n * https://nodejs.org/api/webstreams.html#webstreams_web_streams_api\n */\nexport function makeStream<ArrayBuffer>(\n  source: Iterable<ArrayBuffer> | AsyncIterable<ArrayBuffer>,\n  options?: MakeStreamOptions\n): ReadableStream {\n  const iterator = source[Symbol.asyncIterator]\n    ? (source as AsyncIterable<ArrayBuffer>)[Symbol.asyncIterator]()\n    : (source as Iterable<ArrayBuffer>)[Symbol.iterator]();\n\n  return new ReadableStream<Uint8Array>(\n    {\n      // Create a byte stream (enables `Response(stream).arrayBuffer()`)\n      // Only supported on Chrome\n      // See: https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController\n      // @ts-expect-error Only Chrome supports byte streams\n      type: 'bytes',\n\n      async pull(controller) {\n        try {\n          const {done, value} = await iterator.next();\n          if (done) {\n            controller.close();\n          } else {\n            // TODO - ignores controller.desiredSize\n            controller.enqueue(new Uint8Array(value));\n          }\n        } catch (error) {\n          controller.error(error);\n        }\n      },\n\n      async cancel() {\n        await iterator?.return?.();\n      }\n    },\n    // options: QueingStrategy<Uint8Array>\n    {\n      // This is bytes, not chunks\n      highWaterMark: 2 ** 24,\n      ...options\n    }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}