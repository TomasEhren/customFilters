{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _awaitAsyncGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport _asyncGeneratorDelegate from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { assert, concatenateArrayBuffersAsync } from '@loaders.gl/loader-utils';\nimport { isLoaderObject } from '../loader-utils/normalize-loader';\nimport { normalizeOptions } from '../loader-utils/option-utils';\nimport { getLoaderContext } from '../loader-utils/loader-context';\nimport { getAsyncIterableFromData } from '../loader-utils/get-data';\nimport { getResourceUrlAndType } from '../utils/resource-utils';\nimport { selectLoader } from './select-loader';\nimport { parse } from './parse';\nexport function parseInBatches(_x2, _x3, _x4, _x5) {\n  return _parseInBatches.apply(this, arguments);\n}\n\nfunction _parseInBatches() {\n  _parseInBatches = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, loaders, options, context) {\n    var _getResourceUrlAndTyp, url, loader;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            assert(!context || typeof context === 'object');\n\n            if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n              context = undefined;\n              options = loaders;\n              loaders = undefined;\n            }\n\n            _context.next = 4;\n            return data;\n\n          case 4:\n            data = _context.sent;\n            options = options || {};\n            _getResourceUrlAndTyp = getResourceUrlAndType(data), url = _getResourceUrlAndTyp.url;\n            _context.next = 9;\n            return selectLoader(data, loaders, options);\n\n          case 9:\n            loader = _context.sent;\n\n            if (loader) {\n              _context.next = 12;\n              break;\n            }\n\n            return _context.abrupt(\"return\", null);\n\n          case 12:\n            options = normalizeOptions(options, loader, loaders, url);\n            context = getLoaderContext({\n              url: url,\n              parseInBatches: parseInBatches,\n              parse: parse,\n              loaders: loaders\n            }, options, context);\n            _context.next = 16;\n            return parseWithLoaderInBatches(loader, data, options, context);\n\n          case 16:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseInBatches.apply(this, arguments);\n}\n\nfunction parseWithLoaderInBatches(_x6, _x7, _x8, _x9) {\n  return _parseWithLoaderInBatches.apply(this, arguments);\n}\n\nfunction _parseWithLoaderInBatches() {\n  _parseWithLoaderInBatches = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(loader, data, options, context) {\n    var outputIterator, metadataBatch, makeMetadataBatchIterator, _makeMetadataBatchIterator;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _makeMetadataBatchIterator = function _makeMetadataBatchIte2() {\n              _makeMetadataBatchIterator = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(iterator) {\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _context2.next = 2;\n                        return metadataBatch;\n\n                      case 2:\n                        return _context2.delegateYield(_asyncGeneratorDelegate(_asyncIterator(iterator), _awaitAsyncGenerator), \"t0\", 3);\n\n                      case 3:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n              return _makeMetadataBatchIterator.apply(this, arguments);\n            };\n\n            makeMetadataBatchIterator = function _makeMetadataBatchIte(_x) {\n              return _makeMetadataBatchIterator.apply(this, arguments);\n            };\n\n            _context3.next = 4;\n            return parseToOutputIterator(loader, data, options, context);\n\n          case 4:\n            outputIterator = _context3.sent;\n\n            if (options.metadata) {\n              _context3.next = 7;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", outputIterator);\n\n          case 7:\n            metadataBatch = {\n              batchType: 'metadata',\n              metadata: {\n                _loader: loader,\n                _context: context\n              },\n              data: [],\n              bytesUsed: 0\n            };\n            return _context3.abrupt(\"return\", makeMetadataBatchIterator(outputIterator));\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _parseWithLoaderInBatches.apply(this, arguments);\n}\n\nfunction parseToOutputIterator(_x10, _x11, _x12, _x13) {\n  return _parseToOutputIterator.apply(this, arguments);\n}\n\nfunction _parseToOutputIterator() {\n  _parseToOutputIterator = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(loader, data, options, context) {\n    var inputIterator, transformedIterator, parseChunkInBatches, _parseChunkInBatches;\n\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _parseChunkInBatches = function _parseChunkInBatches3() {\n              _parseChunkInBatches = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                var arrayBuffer, parsedData, batch;\n                return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        _context4.next = 2;\n                        return _awaitAsyncGenerator(concatenateArrayBuffersAsync(transformedIterator));\n\n                      case 2:\n                        arrayBuffer = _context4.sent;\n                        _context4.next = 5;\n                        return _awaitAsyncGenerator(parse(arrayBuffer, loader, _objectSpread(_objectSpread({}, options), {}, {\n                          mimeType: loader.mimeTypes[0]\n                        }), context));\n\n                      case 5:\n                        parsedData = _context4.sent;\n                        batch = {\n                          mimeType: loader.mimeTypes[0],\n                          shape: Array.isArray(parsedData) ? 'row-table' : 'unknown',\n                          batchType: 'data',\n                          data: parsedData,\n                          length: Array.isArray(parsedData) ? parsedData.length : 1\n                        };\n                        _context4.next = 9;\n                        return batch;\n\n                      case 9:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee4);\n              }));\n              return _parseChunkInBatches.apply(this, arguments);\n            };\n\n            parseChunkInBatches = function _parseChunkInBatches2() {\n              return _parseChunkInBatches.apply(this, arguments);\n            };\n\n            _context5.next = 4;\n            return getAsyncIterableFromData(data, options);\n\n          case 4:\n            inputIterator = _context5.sent;\n            _context5.next = 7;\n            return applyInputTransforms(inputIterator, (options === null || options === void 0 ? void 0 : options.transforms) || []);\n\n          case 7:\n            transformedIterator = _context5.sent;\n\n            if (!loader.parseInBatches) {\n              _context5.next = 10;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", loader.parseInBatches(transformedIterator, options, context));\n\n          case 10:\n            return _context5.abrupt(\"return\", parseChunkInBatches());\n\n          case 11:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _parseToOutputIterator.apply(this, arguments);\n}\n\nfunction applyInputTransforms(_x14) {\n  return _applyInputTransforms.apply(this, arguments);\n}\n\nfunction _applyInputTransforms() {\n  _applyInputTransforms = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(inputIterator) {\n    var transforms,\n        iteratorChain,\n        _iteratorAbruptCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        transformBatches,\n        _args6 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            transforms = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : [];\n            iteratorChain = inputIterator;\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context6.prev = 4;\n            _iterator = _asyncIterator(transforms);\n\n          case 6:\n            _context6.next = 8;\n            return _iterator.next();\n\n          case 8:\n            if (!(_iteratorAbruptCompletion = !(_step = _context6.sent).done)) {\n              _context6.next = 14;\n              break;\n            }\n\n            transformBatches = _step.value;\n            iteratorChain = transformBatches(iteratorChain);\n\n          case 11:\n            _iteratorAbruptCompletion = false;\n            _context6.next = 6;\n            break;\n\n          case 14:\n            _context6.next = 20;\n            break;\n\n          case 16:\n            _context6.prev = 16;\n            _context6.t0 = _context6[\"catch\"](4);\n            _didIteratorError = true;\n            _iteratorError = _context6.t0;\n\n          case 20:\n            _context6.prev = 20;\n            _context6.prev = 21;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context6.next = 25;\n              break;\n            }\n\n            _context6.next = 25;\n            return _iterator.return();\n\n          case 25:\n            _context6.prev = 25;\n\n            if (!_didIteratorError) {\n              _context6.next = 28;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 28:\n            return _context6.finish(25);\n\n          case 29:\n            return _context6.finish(20);\n\n          case 30:\n            return _context6.abrupt(\"return\", iteratorChain);\n\n          case 31:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, null, [[4, 16, 20, 30], [21,, 25, 29]]);\n  }));\n  return _applyInputTransforms.apply(this, arguments);\n}","map":{"version":3,"mappings":"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","names":["assert","concatenateArrayBuffersAsync","isLoaderObject","normalizeOptions","getLoaderContext","getAsyncIterableFromData","getResourceUrlAndType","selectLoader","parse","parseInBatches","data","loaders","options","context","Array","isArray","undefined","url","loader","parseWithLoaderInBatches","makeMetadataBatchIterator","iterator","metadataBatch","parseToOutputIterator","outputIterator","metadata","batchType","_loader","_context","bytesUsed","parseChunkInBatches","transformedIterator","arrayBuffer","mimeType","mimeTypes","parsedData","batch","shape","length","inputIterator","applyInputTransforms","transforms","iteratorChain","transformBatches"],"sources":["../../../../src/lib/api/parse-in-batches.ts"],"sourcesContent":["import type {Batch} from '@loaders.gl/schema';\nimport type {\n  BatchableDataType,\n  Loader,\n  LoaderWithParser,\n  LoaderContext,\n  LoaderOptions\n} from '@loaders.gl/loader-utils';\nimport {assert, concatenateArrayBuffersAsync} from '@loaders.gl/loader-utils';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {normalizeOptions} from '../loader-utils/option-utils';\nimport {getLoaderContext} from '../loader-utils/loader-context';\nimport {getAsyncIterableFromData} from '../loader-utils/get-data';\nimport {getResourceUrlAndType} from '../utils/resource-utils';\nimport {selectLoader} from './select-loader';\n\n// Ensure `parse` is available in context if loader falls back to `parse`\nimport {parse} from './parse';\n\n/**\n * Parses `data` using a specified loader\n * @param data\n * @param loaders\n * @param options\n * @param context\n */\nexport async function parseInBatches(\n  data: BatchableDataType,\n  loaders?: Loader | Loader[] | LoaderOptions,\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<AsyncIterable<any>> {\n  assert(!context || typeof context === 'object'); // parseInBatches no longer accepts final url\n\n  // Signature: parseInBatches(data, options, url) - Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined; // context not supported in short signature\n    options = loaders as LoaderOptions;\n    loaders = undefined;\n  }\n\n  data = await data; // Resolve any promise\n  options = options || {};\n\n  // Extract a url for auto detection\n  const {url} = getResourceUrlAndType(data);\n\n  // Chooses a loader and normalizes it\n  // Note - only uses URL and contentType for streams and iterator inputs\n  const loader = await selectLoader(data as ArrayBuffer, loaders as Loader[], options);\n  // Note: if options.nothrow was set, it is possible that no loader was found, if so just return null\n  if (!loader) {\n    // @ts-ignore\n    return null;\n  }\n\n  // Normalize options\n  // @ts-ignore\n  options = normalizeOptions(options, loader, loaders, url);\n  // @ts-ignore\n  context = getLoaderContext(\n    // @ts-ignore\n    {url, parseInBatches, parse, loaders: loaders as Loader[]},\n    options,\n    context\n  );\n\n  return await parseWithLoaderInBatches(loader as LoaderWithParser, data, options, context);\n}\n\n/**\n * Loader has been selected and context has been prepared, see if we need to emit a metadata batch\n */\nasync function parseWithLoaderInBatches(\n  loader: LoaderWithParser,\n  data: BatchableDataType,\n  options: LoaderOptions,\n  context: LoaderContext\n): Promise<AsyncIterable<any>> {\n  const outputIterator = await parseToOutputIterator(loader, data, options, context);\n\n  // Generate metadata batch if requested\n  if (!options.metadata) {\n    return outputIterator;\n  }\n\n  const metadataBatch = {\n    batchType: 'metadata',\n    metadata: {\n      _loader: loader,\n      _context: context\n    },\n    // Populate with some default fields to avoid crashing\n    data: [],\n    bytesUsed: 0\n  };\n\n  async function* makeMetadataBatchIterator(iterator) {\n    yield metadataBatch;\n    yield* iterator;\n  }\n\n  return makeMetadataBatchIterator(outputIterator);\n}\n\n/**\n * Prep work is done, now it is time to start parsing into an output operator\n * The approach depends on which parse function the loader exposes\n * `parseInBatches` (preferred), `parse` (fallback)\n */\nasync function parseToOutputIterator(\n  loader: LoaderWithParser,\n  data: BatchableDataType,\n  options: LoaderOptions,\n  context: LoaderContext\n): Promise<AsyncIterable<any>> {\n  // Get an iterator from the input\n  const inputIterator = await getAsyncIterableFromData(data, options);\n\n  // Apply any iterator transforms (options.transforms)\n  const transformedIterator = await applyInputTransforms(inputIterator, options?.transforms || []);\n\n  // If loader supports parseInBatches, we are done\n  if (loader.parseInBatches) {\n    return loader.parseInBatches(transformedIterator, options, context);\n  }\n\n  // Fallback: load atomically using `parse` concatenating input iterator into single chunk\n  async function* parseChunkInBatches() {\n    const arrayBuffer = await concatenateArrayBuffersAsync(transformedIterator);\n    // Call `parse` instead of `loader.parse` to ensure we can call workers etc.\n    const parsedData = await parse(\n      arrayBuffer,\n      loader,\n      // TODO - Hack: supply loaders MIME type to ensure we match it\n      {...options, mimeType: loader.mimeTypes[0]},\n      context\n    );\n    // yield a single batch, the output from loader.parse()\n    // TODO - run through batch builder to apply options etc...\n    const batch: Batch = {\n      mimeType: loader.mimeTypes[0],\n      shape: Array.isArray(parsedData) ? 'row-table' : 'unknown',\n      batchType: 'data',\n      data: parsedData,\n      length: Array.isArray(parsedData) ? parsedData.length : 1\n    };\n    yield batch;\n  }\n\n  return parseChunkInBatches();\n}\n\ntype TransformBatches = (\n  asyncIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>\n) => AsyncIterable<ArrayBuffer>;\n\n/**\n * Create an iterator chain with any transform iterators (crypto, decompression)\n * @param inputIterator\n * @param options\n */\nasync function applyInputTransforms(\n  inputIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>,\n  transforms: TransformBatches[] = []\n): Promise<AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>> {\n  let iteratorChain = inputIterator;\n  for await (const transformBatches of transforms) {\n    iteratorChain = transformBatches(iteratorChain);\n  }\n  return iteratorChain;\n}\n"]},"metadata":{},"sourceType":"module"}