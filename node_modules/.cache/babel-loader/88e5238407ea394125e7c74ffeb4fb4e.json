{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { Vector3 } from '@math.gl/core';\nimport BoundingSphere from '../bounding-volumes/bounding-sphere';\nvar fromPointsXMin = new Vector3();\nvar fromPointsYMin = new Vector3();\nvar fromPointsZMin = new Vector3();\nvar fromPointsXMax = new Vector3();\nvar fromPointsYMax = new Vector3();\nvar fromPointsZMax = new Vector3();\nvar fromPointsCurrentPos = new Vector3();\nvar fromPointsScratch = new Vector3();\nvar fromPointsRitterCenter = new Vector3();\nvar fromPointsMinBoxPt = new Vector3();\nvar fromPointsMaxBoxPt = new Vector3();\nvar fromPointsNaiveCenterScratch = new Vector3();\nvar volumeConstant = 4.0 / 3.0 * Math.PI;\nexport default function makeBoundingSphereFromPoints(positions) {\n  var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new BoundingSphere();\n\n  if (!positions || positions.length === 0) {\n    return result.fromCenterRadius([0, 0, 0], 0);\n  }\n\n  var currentPos = fromPointsCurrentPos.copy(positions[0]);\n  var xMin = fromPointsXMin.copy(currentPos);\n  var yMin = fromPointsYMin.copy(currentPos);\n  var zMin = fromPointsZMin.copy(currentPos);\n  var xMax = fromPointsXMax.copy(currentPos);\n  var yMax = fromPointsYMax.copy(currentPos);\n  var zMax = fromPointsZMax.copy(currentPos);\n\n  var _iterator = _createForOfIteratorHelper(positions),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var position = _step.value;\n      currentPos.copy(position);\n      var x = currentPos.x;\n      var y = currentPos.y;\n      var z = currentPos.z;\n\n      if (x < xMin.x) {\n        xMin.copy(currentPos);\n      }\n\n      if (x > xMax.x) {\n        xMax.copy(currentPos);\n      }\n\n      if (y < yMin.y) {\n        yMin.copy(currentPos);\n      }\n\n      if (y > yMax.y) {\n        yMax.copy(currentPos);\n      }\n\n      if (z < zMin.z) {\n        zMin.copy(currentPos);\n      }\n\n      if (z > zMax.z) {\n        zMax.copy(currentPos);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var xSpan = fromPointsScratch.copy(xMax).subtract(xMin).magnitudeSquared();\n  var ySpan = fromPointsScratch.copy(yMax).subtract(yMin).magnitudeSquared();\n  var zSpan = fromPointsScratch.copy(zMax).subtract(zMin).magnitudeSquared();\n  var diameter1 = xMin;\n  var diameter2 = xMax;\n  var maxSpan = xSpan;\n\n  if (ySpan > maxSpan) {\n    maxSpan = ySpan;\n    diameter1 = yMin;\n    diameter2 = yMax;\n  }\n\n  if (zSpan > maxSpan) {\n    maxSpan = zSpan;\n    diameter1 = zMin;\n    diameter2 = zMax;\n  }\n\n  var ritterCenter = fromPointsRitterCenter;\n  ritterCenter.x = (diameter1.x + diameter2.x) * 0.5;\n  ritterCenter.y = (diameter1.y + diameter2.y) * 0.5;\n  ritterCenter.z = (diameter1.z + diameter2.z) * 0.5;\n  var radiusSquared = fromPointsScratch.copy(diameter2).subtract(ritterCenter).magnitudeSquared();\n  var ritterRadius = Math.sqrt(radiusSquared);\n  var minBoxPt = fromPointsMinBoxPt;\n  minBoxPt.x = xMin.x;\n  minBoxPt.y = yMin.y;\n  minBoxPt.z = zMin.z;\n  var maxBoxPt = fromPointsMaxBoxPt;\n  maxBoxPt.x = xMax.x;\n  maxBoxPt.y = yMax.y;\n  maxBoxPt.z = zMax.z;\n  var naiveCenter = fromPointsNaiveCenterScratch.copy(minBoxPt).add(maxBoxPt).multiplyByScalar(0.5);\n  var naiveRadius = 0;\n\n  var _iterator2 = _createForOfIteratorHelper(positions),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _position = _step2.value;\n      currentPos.copy(_position);\n      var r = fromPointsScratch.copy(currentPos).subtract(naiveCenter).magnitude();\n\n      if (r > naiveRadius) {\n        naiveRadius = r;\n      }\n\n      var oldCenterToPointSquared = fromPointsScratch.copy(currentPos).subtract(ritterCenter).magnitudeSquared();\n\n      if (oldCenterToPointSquared > radiusSquared) {\n        var oldCenterToPoint = Math.sqrt(oldCenterToPointSquared);\n        ritterRadius = (ritterRadius + oldCenterToPoint) * 0.5;\n        radiusSquared = ritterRadius * ritterRadius;\n        var oldToNew = oldCenterToPoint - ritterRadius;\n        ritterCenter.x = (ritterRadius * ritterCenter.x + oldToNew * currentPos.x) / oldCenterToPoint;\n        ritterCenter.y = (ritterRadius * ritterCenter.y + oldToNew * currentPos.y) / oldCenterToPoint;\n        ritterCenter.z = (ritterRadius * ritterCenter.z + oldToNew * currentPos.z) / oldCenterToPoint;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  if (ritterRadius < naiveRadius) {\n    ritterCenter.to(result.center);\n    result.radius = ritterRadius;\n  } else {\n    naiveCenter.to(result.center);\n    result.radius = naiveRadius;\n  }\n\n  return result;\n}","map":{"version":3,"mappings":"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","names":["Vector3","BoundingSphere","fromPointsXMin","fromPointsYMin","fromPointsZMin","fromPointsXMax","fromPointsYMax","fromPointsZMax","fromPointsCurrentPos","fromPointsScratch","fromPointsRitterCenter","fromPointsMinBoxPt","fromPointsMaxBoxPt","fromPointsNaiveCenterScratch","volumeConstant","Math","PI","makeBoundingSphereFromPoints","positions","result","length","fromCenterRadius","currentPos","copy","xMin","yMin","zMin","xMax","yMax","zMax","position","x","y","z","xSpan","subtract","magnitudeSquared","ySpan","zSpan","diameter1","diameter2","maxSpan","ritterCenter","radiusSquared","ritterRadius","sqrt","minBoxPt","maxBoxPt","naiveCenter","add","multiplyByScalar","naiveRadius","r","magnitude","oldCenterToPointSquared","oldCenterToPoint","oldToNew","to","center","radius"],"sources":["../../../../src/lib/algorithms/bounding-sphere-from-points.js"],"sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Vector3} from '@math.gl/core';\nimport BoundingSphere from '../bounding-volumes/bounding-sphere';\n\n/* eslint-disable */\nconst fromPointsXMin = new Vector3();\nconst fromPointsYMin = new Vector3();\nconst fromPointsZMin = new Vector3();\nconst fromPointsXMax = new Vector3();\nconst fromPointsYMax = new Vector3();\nconst fromPointsZMax = new Vector3();\nconst fromPointsCurrentPos = new Vector3();\nconst fromPointsScratch = new Vector3();\nconst fromPointsRitterCenter = new Vector3();\nconst fromPointsMinBoxPt = new Vector3();\nconst fromPointsMaxBoxPt = new Vector3();\nconst fromPointsNaiveCenterScratch = new Vector3();\nconst volumeConstant = (4.0 / 3.0) * Math.PI;\n\nexport default function makeBoundingSphereFromPoints(positions, result = new BoundingSphere()) {\n  if (!positions || positions.length === 0) {\n    return result.fromCenterRadius([0, 0, 0], 0);\n  }\n\n  const currentPos = fromPointsCurrentPos.copy(positions[0]);\n\n  const xMin = fromPointsXMin.copy(currentPos);\n  const yMin = fromPointsYMin.copy(currentPos);\n  const zMin = fromPointsZMin.copy(currentPos);\n\n  const xMax = fromPointsXMax.copy(currentPos);\n  const yMax = fromPointsYMax.copy(currentPos);\n  const zMax = fromPointsZMax.copy(currentPos);\n\n  for (const position of positions) {\n    currentPos.copy(position);\n\n    const x = currentPos.x;\n    const y = currentPos.y;\n    const z = currentPos.z;\n\n    // Store points containing the the smallest and largest components\n    if (x < xMin.x) {\n      xMin.copy(currentPos);\n    }\n\n    if (x > xMax.x) {\n      xMax.copy(currentPos);\n    }\n\n    if (y < yMin.y) {\n      yMin.copy(currentPos);\n    }\n\n    if (y > yMax.y) {\n      yMax.copy(currentPos);\n    }\n\n    if (z < zMin.z) {\n      zMin.copy(currentPos);\n    }\n\n    if (z > zMax.z) {\n      zMax.copy(currentPos);\n    }\n  }\n\n  // Compute x-, y-, and z-spans (Squared distances b/n each component's min. and max.).\n  const xSpan = fromPointsScratch.copy(xMax).subtract(xMin).magnitudeSquared();\n  const ySpan = fromPointsScratch.copy(yMax).subtract(yMin).magnitudeSquared();\n  const zSpan = fromPointsScratch.copy(zMax).subtract(zMin).magnitudeSquared();\n\n  // Set the diameter endpoints to the largest span.\n  let diameter1 = xMin;\n  let diameter2 = xMax;\n  let maxSpan = xSpan;\n  if (ySpan > maxSpan) {\n    maxSpan = ySpan;\n    diameter1 = yMin;\n    diameter2 = yMax;\n  }\n  if (zSpan > maxSpan) {\n    maxSpan = zSpan;\n    diameter1 = zMin;\n    diameter2 = zMax;\n  }\n\n  // Calculate the center of the initial sphere found by Ritter's algorithm\n  const ritterCenter = fromPointsRitterCenter;\n  ritterCenter.x = (diameter1.x + diameter2.x) * 0.5;\n  ritterCenter.y = (diameter1.y + diameter2.y) * 0.5;\n  ritterCenter.z = (diameter1.z + diameter2.z) * 0.5;\n\n  // Calculate the radius of the initial sphere found by Ritter's algorithm\n  let radiusSquared = fromPointsScratch.copy(diameter2).subtract(ritterCenter).magnitudeSquared();\n  let ritterRadius = Math.sqrt(radiusSquared);\n\n  // Find the center of the sphere found using the Naive method.\n  const minBoxPt = fromPointsMinBoxPt;\n  minBoxPt.x = xMin.x;\n  minBoxPt.y = yMin.y;\n  minBoxPt.z = zMin.z;\n\n  const maxBoxPt = fromPointsMaxBoxPt;\n  maxBoxPt.x = xMax.x;\n  maxBoxPt.y = yMax.y;\n  maxBoxPt.z = zMax.z;\n\n  const naiveCenter = fromPointsNaiveCenterScratch\n    .copy(minBoxPt)\n    .add(maxBoxPt)\n    .multiplyByScalar(0.5);\n\n  // Begin 2nd pass to find naive radius and modify the ritter sphere.\n  let naiveRadius = 0;\n  for (const position of positions) {\n    currentPos.copy(position);\n\n    // Find the furthest point from the naive center to calculate the naive radius.\n    const r = fromPointsScratch.copy(currentPos).subtract(naiveCenter).magnitude();\n    if (r > naiveRadius) {\n      naiveRadius = r;\n    }\n\n    // Make adjustments to the Ritter Sphere to include all points.\n    const oldCenterToPointSquared = fromPointsScratch\n      .copy(currentPos)\n      .subtract(ritterCenter)\n      .magnitudeSquared();\n\n    if (oldCenterToPointSquared > radiusSquared) {\n      const oldCenterToPoint = Math.sqrt(oldCenterToPointSquared);\n      // Calculate new radius to include the point that lies outside\n      ritterRadius = (ritterRadius + oldCenterToPoint) * 0.5;\n      radiusSquared = ritterRadius * ritterRadius;\n      // Calculate center of new Ritter sphere\n      const oldToNew = oldCenterToPoint - ritterRadius;\n      ritterCenter.x = (ritterRadius * ritterCenter.x + oldToNew * currentPos.x) / oldCenterToPoint;\n      ritterCenter.y = (ritterRadius * ritterCenter.y + oldToNew * currentPos.y) / oldCenterToPoint;\n      ritterCenter.z = (ritterRadius * ritterCenter.z + oldToNew * currentPos.z) / oldCenterToPoint;\n    }\n  }\n\n  if (ritterRadius < naiveRadius) {\n    ritterCenter.to(result.center);\n    // @ts-ignore TS2540: Cannot assign to 'radius' because it is a read-only property.\n    result.radius = ritterRadius;\n  } else {\n    naiveCenter.to(result.center);\n    // @ts-ignore TS2540: Cannot assign to 'radius' because it is a read-only property.\n    result.radius = naiveRadius;\n  }\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}