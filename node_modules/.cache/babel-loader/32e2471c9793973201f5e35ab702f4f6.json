{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { assert } from '../utils';\nimport { parsePropTypes } from './filters/prop-types';\nvar VERTEX_SHADER = 'vs';\nvar FRAGMENT_SHADER = 'fs';\n\nvar ShaderModule = /*#__PURE__*/function () {\n  function ShaderModule(_ref) {\n    var name = _ref.name,\n        vs = _ref.vs,\n        fs = _ref.fs,\n        _ref$dependencies = _ref.dependencies,\n        dependencies = _ref$dependencies === void 0 ? [] : _ref$dependencies,\n        uniforms = _ref.uniforms,\n        getUniforms = _ref.getUniforms,\n        _ref$deprecations = _ref.deprecations,\n        deprecations = _ref$deprecations === void 0 ? [] : _ref$deprecations,\n        _ref$defines = _ref.defines,\n        defines = _ref$defines === void 0 ? {} : _ref$defines,\n        _ref$inject = _ref.inject,\n        inject = _ref$inject === void 0 ? {} : _ref$inject,\n        vertexShader = _ref.vertexShader,\n        fragmentShader = _ref.fragmentShader;\n\n    _classCallCheck(this, ShaderModule);\n\n    assert(typeof name === 'string');\n    this.name = name;\n    this.vs = vs || vertexShader;\n    this.fs = fs || fragmentShader;\n    this.getModuleUniforms = getUniforms;\n    this.dependencies = dependencies;\n    this.deprecations = this._parseDeprecationDefinitions(deprecations);\n    this.defines = defines;\n    this.injections = normalizeInjections(inject);\n\n    if (uniforms) {\n      this.uniforms = parsePropTypes(uniforms);\n    }\n  }\n\n  _createClass(ShaderModule, [{\n    key: \"getModuleSource\",\n    value: function getModuleSource(type) {\n      var moduleSource;\n\n      switch (type) {\n        case VERTEX_SHADER:\n          moduleSource = this.vs || '';\n          break;\n\n        case FRAGMENT_SHADER:\n          moduleSource = this.fs || '';\n          break;\n\n        default:\n          assert(false);\n      }\n\n      return \"#define MODULE_\".concat(this.name.toUpperCase().replace(/[^0-9a-z]/gi, '_'), \"\\n\").concat(moduleSource, \"// END MODULE_\").concat(this.name, \"\\n\\n\");\n    }\n  }, {\n    key: \"getUniforms\",\n    value: function getUniforms(opts, uniforms) {\n      if (this.getModuleUniforms) {\n        return this.getModuleUniforms(opts, uniforms);\n      }\n\n      if (this.uniforms) {\n        return this._defaultGetUniforms(opts);\n      }\n\n      return {};\n    }\n  }, {\n    key: \"getDefines\",\n    value: function getDefines() {\n      return this.defines;\n    }\n  }, {\n    key: \"checkDeprecations\",\n    value: function checkDeprecations(shaderSource, log) {\n      this.deprecations.forEach(function (def) {\n        if (def.regex.test(shaderSource)) {\n          if (def.deprecated) {\n            log.deprecated(def.old, def.new)();\n          } else {\n            log.removed(def.old, def.new)();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"_parseDeprecationDefinitions\",\n    value: function _parseDeprecationDefinitions(deprecations) {\n      deprecations.forEach(function (def) {\n        switch (def.type) {\n          case 'function':\n            def.regex = new RegExp(\"\\\\b\".concat(def.old, \"\\\\(\"));\n            break;\n\n          default:\n            def.regex = new RegExp(\"\".concat(def.type, \" \").concat(def.old, \";\"));\n        }\n      });\n      return deprecations;\n    }\n  }, {\n    key: \"_defaultGetUniforms\",\n    value: function _defaultGetUniforms() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var uniforms = {};\n      var propTypes = this.uniforms;\n\n      for (var key in propTypes) {\n        var propDef = propTypes[key];\n\n        if (key in opts && !propDef.private) {\n          if (propDef.validate) {\n            assert(propDef.validate(opts[key], propDef), \"\".concat(this.name, \": invalid \").concat(key));\n          }\n\n          uniforms[key] = opts[key];\n        } else {\n          uniforms[key] = propDef.value;\n        }\n      }\n\n      return uniforms;\n    }\n  }]);\n\n  return ShaderModule;\n}();\n\nexport { ShaderModule as default };\nexport function normalizeShaderModule(module) {\n  if (!module.normalized) {\n    module.normalized = true;\n\n    if (module.uniforms && !module.getUniforms) {\n      var shaderModule = new ShaderModule(module);\n      module.getUniforms = shaderModule.getUniforms.bind(shaderModule);\n    }\n  }\n\n  return module;\n}\n\nfunction normalizeInjections(injections) {\n  var result = {\n    vs: {},\n    fs: {}\n  };\n\n  for (var hook in injections) {\n    var injection = injections[hook];\n    var stage = hook.slice(0, 2);\n\n    if (typeof injection === 'string') {\n      injection = {\n        order: 0,\n        injection: injection\n      };\n    }\n\n    result[stage][hook] = injection;\n  }\n\n  return result;\n}","map":{"version":3,"mappings":";;AAAA,SAAQA,MAAR,QAAqB,UAArB;AACA,SAAQC,cAAR,QAA6B,sBAA7B;AAEA,IAAMC,aAAa,GAAG,IAAtB;AACA,IAAMC,eAAe,GAAG,IAAxB;;IAEqBC,Y;EACnBC,4BAaG;IAAA,IAZDC,IAYC,QAZDA,IAYC;IAAA,IAXDC,EAWC,QAXDA,EAWC;IAAA,IAVDC,EAUC,QAVDA,EAUC;IAAA,6BATDC,YASC;IAAA,IATDA,YASC,kCATc,EASd;IAAA,IARDC,QAQC,QARDA,QAQC;IAAA,IAPDC,WAOC,QAPDA,WAOC;IAAA,6BANDC,YAMC;IAAA,IANDA,YAMC,kCANc,EAMd;IAAA,wBALDC,OAKC;IAAA,IALDA,OAKC,6BALS,EAKT;IAAA,uBAJDC,MAIC;IAAA,IAJDA,MAIC,4BAJQ,EAIR;IAAA,IAFDC,YAEC,QAFDA,YAEC;IAAA,IADDC,cACC,QADDA,cACC;;IAAA;;IACDhB,MAAM,CAAC,OAAOM,IAAP,KAAgB,QAAjB,CAANN;IACA,KAAKM,IAAL,GAAYA,IAAZ;IACA,KAAKC,EAAL,GAAUA,EAAE,IAAIQ,YAAhB;IACA,KAAKP,EAAL,GAAUA,EAAE,IAAIQ,cAAhB;IACA,KAAKC,iBAAL,GAAyBN,WAAzB;IACA,KAAKF,YAAL,GAAoBA,YAApB;IACA,KAAKG,YAAL,GAAoB,KAAKM,4BAAL,CAAkCN,YAAlC,CAApB;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKM,UAAL,GAAkBC,mBAAmB,CAACN,MAAD,CAArC;;IAEA,IAAIJ,QAAJ,EAAc;MACZ,KAAKA,QAAL,GAAgBT,cAAc,CAACS,QAAD,CAA9B;IACD;EACF;;;;WAGDW,yBAAgBC,IAAhBD,EAAsB;MACpB,IAAIE,YAAJ;;MACA,QAAQD,IAAR;QACE,KAAKpB,aAAL;UACEqB,YAAY,GAAG,KAAKhB,EAAL,IAAW,EAA1BgB;UACA;;QACF,KAAKpB,eAAL;UACEoB,YAAY,GAAG,KAAKf,EAAL,IAAW,EAA1Be;UACA;;QACF;UACEvB,MAAM,CAAC,KAAD,CAANA;MARJ;;MAWA,gCACa,KAAKM,IAAL,CAAUkB,WAAV,GAAwBC,OAAxB,CAAgC,aAAhC,EAA+C,GAA/C,CADb,eAEFF,YAFE,2BAGY,KAAKjB,IAHjB;IAMD;;;WAEDK,qBAAYe,IAAZf,EAAkBD,QAAlBC,EAA4B;MAC1B,IAAI,KAAKM,iBAAT,EAA4B;QAC1B,OAAO,KAAKA,iBAAL,CAAuBS,IAAvB,EAA6BhB,QAA7B,CAAP;MACD;;MAED,IAAI,KAAKA,QAAT,EAAmB;QACjB,OAAO,KAAKiB,mBAAL,CAAyBD,IAAzB,CAAP;MACD;;MACD,OAAO,EAAP;IACD;;;WAEDE,sBAAa;MACX,OAAO,KAAKf,OAAZ;IACD;;;WAGDgB,2BAAkBC,YAAlBD,EAAgCE,GAAhCF,EAAqC;MACnC,KAAKjB,YAAL,CAAkBoB,OAAlB,CAA0BC,aAAG,EAAI;QAC/B,IAAIA,GAAG,CAACC,KAAJD,CAAUE,IAAVF,CAAeH,YAAfG,CAAJ,EAAkC;UAChC,IAAIA,GAAG,CAACG,UAAR,EAAoB;YAClBL,GAAG,CAACK,UAAJL,CAAeE,GAAG,CAACI,GAAnBN,EAAwBE,GAAG,CAACK,GAA5BP;UADF,OAEO;YACLA,GAAG,CAACQ,OAAJR,CAAYE,GAAG,CAACI,GAAhBN,EAAqBE,GAAG,CAACK,GAAzBP;UACD;QACF;MAPH;IASD;;;WAEDb,sCAA6BN,YAA7BM,EAA2C;MACzCN,YAAY,CAACoB,OAAbpB,CAAqBqB,aAAG,EAAI;QAC1B,QAAQA,GAAG,CAACX,IAAZ;UACE,KAAK,UAAL;YACEW,GAAG,CAACC,KAAJD,GAAY,IAAIO,MAAJ,cAAiBP,GAAG,CAACI,GAArB,SAAZJ;YACA;;UACF;YACEA,GAAG,CAACC,KAAJD,GAAY,IAAIO,MAAJ,WAAcP,GAAG,CAACX,IAAlB,cAA0BW,GAAG,CAACI,GAA9B,OAAZJ;QALJ;MADF;MAUA,OAAOrB,YAAP;IACD;;;WAEDe,+BAA+B;MAAA,IAAXD,IAAW,uEAAJ,EAAI;MAC7B,IAAMhB,QAAQ,GAAG,EAAjB;MACA,IAAM+B,SAAS,GAAG,KAAK/B,QAAvB;;MAEA,KAAK,IAAMgC,GAAX,IAAkBD,SAAlB,EAA6B;QAC3B,IAAME,OAAO,GAAGF,SAAS,CAACC,GAAD,CAAzB;;QACA,IAAIA,GAAG,IAAIhB,IAAPgB,IAAe,CAACC,OAAO,CAACC,OAA5B,EAAqC;UACnC,IAAID,OAAO,CAACE,QAAZ,EAAsB;YACpB7C,MAAM,CAAC2C,OAAO,CAACE,QAARF,CAAiBjB,IAAI,CAACgB,GAAD,CAArBC,EAA4BA,OAA5BA,CAAD,YAA0C,KAAKrC,IAA/C,uBAAgEoC,GAAhE,EAAN1C;UACD;;UACDU,QAAQ,CAACgC,GAAD,CAARhC,GAAgBgB,IAAI,CAACgB,GAAD,CAApBhC;QAJF,OAKO;UACLA,QAAQ,CAACgC,GAAD,CAARhC,GAAgBiC,OAAO,CAACG,KAAxBpC;QACD;MACF;;MAED,OAAOA,QAAP;IACD;;;;;;SA/GkBN,Y;AAqHrB,OAAO,SAAS2C,qBAAT,CAA+BC,MAA/B,EAAuC;EAC5C,IAAI,CAACA,MAAM,CAACC,UAAZ,EAAwB;IACtBD,MAAM,CAACC,UAAPD,GAAoB,IAApBA;;IACA,IAAIA,MAAM,CAACtC,QAAPsC,IAAmB,CAACA,MAAM,CAACrC,WAA/B,EAA4C;MAC1C,IAAMuC,YAAY,GAAG,IAAI9C,YAAJ,CAAiB4C,MAAjB,CAArB;MACAA,MAAM,CAACrC,WAAPqC,GAAqBE,YAAY,CAACvC,WAAbuC,CAAyBC,IAAzBD,CAA8BA,YAA9BA,CAArBF;IACD;EACF;;EACD,OAAOA,MAAP;AACD;;AAED,SAAS5B,mBAAT,CAA6BD,UAA7B,EAAyC;EACvC,IAAMiC,MAAM,GAAG;IACb7C,EAAE,EAAE,EADS;IAEbC,EAAE,EAAE;EAFS,CAAf;;EAKA,KAAK,IAAM6C,IAAX,IAAmBlC,UAAnB,EAA+B;IAC7B,IAAImC,SAAS,GAAGnC,UAAU,CAACkC,IAAD,CAA1B;IACA,IAAME,KAAK,GAAGF,IAAI,CAACG,KAALH,CAAW,CAAXA,EAAc,CAAdA,CAAd;;IAEA,IAAI,OAAOC,SAAP,KAAqB,QAAzB,EAAmC;MACjCA,SAAS,GAAG;QACVG,KAAK,EAAE,CADG;QAEVH;MAFU,CAAZA;IAID;;IAEDF,MAAM,CAACG,KAAD,CAANH,CAAcC,IAAdD,IAAsBE,SAAtBF;EACD;;EAED,OAAOA,MAAP;AACD","names":["assert","parsePropTypes","VERTEX_SHADER","FRAGMENT_SHADER","ShaderModule","constructor","name","vs","fs","dependencies","uniforms","getUniforms","deprecations","defines","inject","vertexShader","fragmentShader","getModuleUniforms","_parseDeprecationDefinitions","injections","normalizeInjections","getModuleSource","type","moduleSource","toUpperCase","replace","opts","_defaultGetUniforms","getDefines","checkDeprecations","shaderSource","log","forEach","def","regex","test","deprecated","old","new","removed","RegExp","propTypes","key","propDef","private","validate","value","normalizeShaderModule","module","normalized","shaderModule","bind","result","hook","injection","stage","slice","order"],"sources":["../../../src/lib/shader-module.js"],"sourcesContent":["import {assert} from '../utils';\nimport {parsePropTypes} from './filters/prop-types';\n\nconst VERTEX_SHADER = 'vs';\nconst FRAGMENT_SHADER = 'fs';\n\nexport default class ShaderModule {\n  constructor({\n    name,\n    vs,\n    fs,\n    dependencies = [],\n    uniforms,\n    getUniforms,\n    deprecations = [],\n    defines = {},\n    inject = {},\n    // DEPRECATED\n    vertexShader,\n    fragmentShader\n  }) {\n    assert(typeof name === 'string');\n    this.name = name;\n    this.vs = vs || vertexShader;\n    this.fs = fs || fragmentShader;\n    this.getModuleUniforms = getUniforms;\n    this.dependencies = dependencies;\n    this.deprecations = this._parseDeprecationDefinitions(deprecations);\n    this.defines = defines;\n    this.injections = normalizeInjections(inject);\n\n    if (uniforms) {\n      this.uniforms = parsePropTypes(uniforms);\n    }\n  }\n\n  // Extracts the source code chunk for the specified shader type from the named shader module\n  getModuleSource(type) {\n    let moduleSource;\n    switch (type) {\n      case VERTEX_SHADER:\n        moduleSource = this.vs || '';\n        break;\n      case FRAGMENT_SHADER:\n        moduleSource = this.fs || '';\n        break;\n      default:\n        assert(false);\n    }\n\n    return `\\\n#define MODULE_${this.name.toUpperCase().replace(/[^0-9a-z]/gi, '_')}\n${moduleSource}\\\n// END MODULE_${this.name}\n\n`;\n  }\n\n  getUniforms(opts, uniforms) {\n    if (this.getModuleUniforms) {\n      return this.getModuleUniforms(opts, uniforms);\n    }\n    // Build uniforms from the uniforms array\n    if (this.uniforms) {\n      return this._defaultGetUniforms(opts);\n    }\n    return {};\n  }\n\n  getDefines() {\n    return this.defines;\n  }\n\n  // Warn about deprecated uniforms or functions\n  checkDeprecations(shaderSource, log) {\n    this.deprecations.forEach(def => {\n      if (def.regex.test(shaderSource)) {\n        if (def.deprecated) {\n          log.deprecated(def.old, def.new)();\n        } else {\n          log.removed(def.old, def.new)();\n        }\n      }\n    });\n  }\n\n  _parseDeprecationDefinitions(deprecations) {\n    deprecations.forEach(def => {\n      switch (def.type) {\n        case 'function':\n          def.regex = new RegExp(`\\\\b${def.old}\\\\(`);\n          break;\n        default:\n          def.regex = new RegExp(`${def.type} ${def.old};`);\n      }\n    });\n\n    return deprecations;\n  }\n\n  _defaultGetUniforms(opts = {}) {\n    const uniforms = {};\n    const propTypes = this.uniforms;\n\n    for (const key in propTypes) {\n      const propDef = propTypes[key];\n      if (key in opts && !propDef.private) {\n        if (propDef.validate) {\n          assert(propDef.validate(opts[key], propDef), `${this.name}: invalid ${key}`);\n        }\n        uniforms[key] = opts[key];\n      } else {\n        uniforms[key] = propDef.value;\n      }\n    }\n\n    return uniforms;\n  }\n}\n\n// This utility mutates the original module\n// Keeping for backward compatibility\n// TODO - remove in v8\nexport function normalizeShaderModule(module) {\n  if (!module.normalized) {\n    module.normalized = true;\n    if (module.uniforms && !module.getUniforms) {\n      const shaderModule = new ShaderModule(module);\n      module.getUniforms = shaderModule.getUniforms.bind(shaderModule);\n    }\n  }\n  return module;\n}\n\nfunction normalizeInjections(injections) {\n  const result = {\n    vs: {},\n    fs: {}\n  };\n\n  for (const hook in injections) {\n    let injection = injections[hook];\n    const stage = hook.slice(0, 2);\n\n    if (typeof injection === 'string') {\n      injection = {\n        order: 0,\n        injection\n      };\n    }\n\n    result[stage][hook] = injection;\n  }\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}