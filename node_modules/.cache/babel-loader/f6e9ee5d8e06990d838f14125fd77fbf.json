{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(makeArrayBufferIterator);\n\nvar DEFAULT_CHUNK_SIZE = 256 * 1024;\nexport function makeArrayBufferIterator(arrayBuffer) {\n  var options,\n      _options$chunkSize,\n      chunkSize,\n      byteOffset,\n      chunkByteLength,\n      chunk,\n      sourceArray,\n      chunkArray,\n      _args = arguments;\n\n  return _regeneratorRuntime.wrap(function makeArrayBufferIterator$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          _options$chunkSize = options.chunkSize, chunkSize = _options$chunkSize === void 0 ? DEFAULT_CHUNK_SIZE : _options$chunkSize;\n          byteOffset = 0;\n\n        case 3:\n          if (!(byteOffset < arrayBuffer.byteLength)) {\n            _context.next = 14;\n            break;\n          }\n\n          chunkByteLength = Math.min(arrayBuffer.byteLength - byteOffset, chunkSize);\n          chunk = new ArrayBuffer(chunkByteLength);\n          sourceArray = new Uint8Array(arrayBuffer, byteOffset, chunkByteLength);\n          chunkArray = new Uint8Array(chunk);\n          chunkArray.set(sourceArray);\n          byteOffset += chunkByteLength;\n          _context.next = 12;\n          return chunk;\n\n        case 12:\n          _context.next = 3;\n          break;\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"mappings":";;oDAUiBA,uB;;AARjB,IAAMC,kBAAkB,GAAG,MAAM,IAAjC;AAQA,OAAO,SAAUD,uBAAV,CACLE,WADK;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;;EAAA;IAAA;MAAA;QAAA;UAELC,OAFK,2DAEsB,EAFtB;UAAA,qBAIoCA,OAJpC,CAIEC,SAJF,EAIEA,SAJF,mCAIcH,kBAJd;UAMDI,UANC,GAMY,CANZ;;QAAA;UAAA,MAQEA,UAAU,GAAGH,WAAW,CAACI,UAR3B;YAAA;YAAA;UAAA;;UAUGC,eAVH,GAUqBC,IAAI,CAACC,GAALD,CAASN,WAAW,CAACI,UAAZJ,GAAyBG,UAAlCG,EAA8CJ,SAA9CI,CAVrB;UAWGE,KAXH,GAWW,IAAIC,WAAJ,CAAgBJ,eAAhB,CAXX;UAcGK,WAdH,GAciB,IAAIC,UAAJ,CAAeX,WAAf,EAA4BG,UAA5B,EAAwCE,eAAxC,CAdjB;UAeGO,UAfH,GAegB,IAAID,UAAJ,CAAeH,KAAf,CAfhB;UAgBHI,UAAU,CAACC,GAAXD,CAAeF,WAAfE;UAGAT,UAAU,IAAIE,eAAdF;UAnBG;UAoBH,OAAMK,KAAN;;QApBG;UAAA;UAAA;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA","names":["makeArrayBufferIterator","DEFAULT_CHUNK_SIZE","arrayBuffer","options","chunkSize","byteOffset","byteLength","chunkByteLength","Math","min","chunk","ArrayBuffer","sourceArray","Uint8Array","chunkArray","set"],"sources":["../../../../src/iterators/make-iterator/make-array-buffer-iterator.ts"],"sourcesContent":["import type {IteratorOptions} from './make-iterator';\n\nconst DEFAULT_CHUNK_SIZE = 256 * 1024;\n\n/**\n * Returns an iterator that breaks a big ArrayBuffer into chunks and yields them one-by-one\n * @param blob ArrayBuffer to iterate over\n * @param options\n * @param options.chunkSize\n */\nexport function* makeArrayBufferIterator(\n  arrayBuffer: ArrayBuffer,\n  options: IteratorOptions = {}\n): Iterable<ArrayBuffer> {\n  const {chunkSize = DEFAULT_CHUNK_SIZE} = options;\n\n  let byteOffset = 0;\n\n  while (byteOffset < arrayBuffer.byteLength) {\n    // Create a chunk of the right size\n    const chunkByteLength = Math.min(arrayBuffer.byteLength - byteOffset, chunkSize);\n    const chunk = new ArrayBuffer(chunkByteLength);\n\n    // Copy data from the big chunk\n    const sourceArray = new Uint8Array(arrayBuffer, byteOffset, chunkByteLength);\n    const chunkArray = new Uint8Array(chunk);\n    chunkArray.set(sourceArray);\n\n    // yield the chunk\n    byteOffset += chunkByteLength;\n    yield chunk;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}