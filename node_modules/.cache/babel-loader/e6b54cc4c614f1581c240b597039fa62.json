{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nlet _Symbol$asyncIterator;\n\nclass ArrayQueue extends Array {\n  enqueue(value) {\n    return this.push(value);\n  }\n\n  dequeue() {\n    return this.shift();\n  }\n\n}\n\n_Symbol$asyncIterator = Symbol.asyncIterator;\nexport default class AsyncQueue {\n  constructor() {\n    _defineProperty(this, \"_values\", void 0);\n\n    _defineProperty(this, \"_settlers\", void 0);\n\n    _defineProperty(this, \"_closed\", void 0);\n\n    this._values = new ArrayQueue();\n    this._settlers = new ArrayQueue();\n    this._closed = false;\n  }\n\n  close() {\n    while (this._settlers.length > 0) {\n      this._settlers.dequeue().resolve({\n        done: true\n      });\n    }\n\n    this._closed = true;\n  }\n\n  [_Symbol$asyncIterator]() {\n    return this;\n  }\n\n  enqueue(value) {\n    if (this._closed) {\n      throw new Error('Closed');\n    }\n\n    if (this._settlers.length > 0) {\n      if (this._values.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n\n      const settler = this._settlers.dequeue();\n\n      if (value instanceof Error) {\n        settler.reject(value);\n      } else {\n        settler.resolve({\n          value\n        });\n      }\n    } else {\n      this._values.enqueue(value);\n    }\n  }\n\n  next() {\n    if (this._values.length > 0) {\n      const value = this._values.dequeue();\n\n      if (value instanceof Error) {\n        return Promise.reject(value);\n      }\n\n      return Promise.resolve({\n        value\n      });\n    }\n\n    if (this._closed) {\n      if (this._settlers.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n\n      return Promise.resolve({\n        done: true\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._settlers.enqueue({\n        resolve,\n        reject\n      });\n    });\n  }\n\n}\nexport async function takeAsync(asyncIterable) {\n  let count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  const result = [];\n  const iterator = asyncIterable[Symbol.asyncIterator]();\n\n  while (result.length < count) {\n    const {\n      value,\n      done\n    } = await iterator.next();\n\n    if (done) {\n      break;\n    }\n\n    result.push(value);\n  }\n\n  return result;\n}","map":{"version":3,"mappings":";;;;AAGA,MAAMA,UAAN,SAA4BC,KAA5B,CAAqC;EACnCC,OAAO,CAACC,KAAD,EAAW;IAEhB,OAAO,KAAKC,IAAL,CAAUD,KAAV,CAAP;EACD;;EACDE,OAAO,GAAM;IAEX,OAAO,KAAKC,KAAL,EAAP;EACD;;AARkC;;wBAkClCC,MAAM,CAACC;AAvBV,eAAe,MAAMC,UAAN,CAAoB;EAKjCC,WAAW,GAAG;IAAAC;;IAAAA;;IAAAA;;IAEZ,KAAKC,OAAL,GAAe,IAAIZ,UAAJ,EAAf;IAEA,KAAKa,SAAL,GAAiB,IAAIb,UAAJ,EAAjB;IAIA,KAAKc,OAAL,GAAe,KAAf;EACD;;EAEDC,KAAK,GAAS;IACZ,OAAO,KAAKF,SAAL,CAAeG,MAAf,GAAwB,CAA/B,EAAkC;MAChC,KAAKH,SAAL,CAAeR,OAAf,GAAyBY,OAAzB,CAAiC;QAACC,IAAI,EAAE;MAAP,CAAjC;IACD;;IACD,KAAKJ,OAAL,GAAe,IAAf;EACD;;EAED,0BAA2C;IACzC,OAAO,IAAP;EACD;;EAEDZ,OAAO,CAACC,KAAD,EAAyB;IAC9B,IAAI,KAAKW,OAAT,EAAkB;MAChB,MAAM,IAAIK,KAAJ,CAAU,QAAV,CAAN;IACD;;IAED,IAAI,KAAKN,SAAL,CAAeG,MAAf,GAAwB,CAA5B,EAA+B;MAC7B,IAAI,KAAKJ,OAAL,CAAaI,MAAb,GAAsB,CAA1B,EAA6B;QAC3B,MAAM,IAAIG,KAAJ,CAAU,wBAAV,CAAN;MACD;;MACD,MAAMC,OAAO,GAAG,KAAKP,SAAL,CAAeR,OAAf,EAAhB;;MACA,IAAIF,KAAK,YAAYgB,KAArB,EAA4B;QAC1BC,OAAO,CAACC,MAARD,CAAejB,KAAfiB;MADF,OAEO;QACLA,OAAO,CAACH,OAARG,CAAgB;UAACjB;QAAD,CAAhBiB;MACD;IATH,OAUO;MACL,KAAKR,OAAL,CAAaV,OAAb,CAAqBC,KAArB;IACD;EACF;;EAKDmB,IAAI,GAAiB;IACnB,IAAI,KAAKV,OAAL,CAAaI,MAAb,GAAsB,CAA1B,EAA6B;MAC3B,MAAMb,KAAK,GAAG,KAAKS,OAAL,CAAaP,OAAb,EAAd;;MACA,IAAIF,KAAK,YAAYgB,KAArB,EAA4B;QAC1B,OAAOI,OAAO,CAACF,MAARE,CAAepB,KAAfoB,CAAP;MACD;;MACD,OAAOA,OAAO,CAACN,OAARM,CAAgB;QAACpB;MAAD,CAAhBoB,CAAP;IACD;;IAED,IAAI,KAAKT,OAAT,EAAkB;MAChB,IAAI,KAAKD,SAAL,CAAeG,MAAf,GAAwB,CAA5B,EAA+B;QAC7B,MAAM,IAAIG,KAAJ,CAAU,wBAAV,CAAN;MACD;;MACD,OAAOI,OAAO,CAACN,OAARM,CAAgB;QAACL,IAAI,EAAE;MAAP,CAAhBK,CAAP;IACD;;IAED,OAAO,IAAIA,OAAJ,CAAY,CAACN,OAAD,EAAUI,MAAV,KAAqB;MACtC,KAAKR,SAAL,CAAeX,OAAf,CAAuB;QAACe,OAAD;QAAUI;MAAV,CAAvB;IADK,EAAP;EAGD;;AArEgC;AA2EnC,OAAO,eAAeG,SAAf,CACLC,aADK,EAGW;EAAA,IADhBC,KACgB,uEADRC,QACQ;EAChB,MAAMC,MAAkB,GAAG,EAA3B;EACA,MAAMC,QAAQ,GAAGJ,aAAa,CAAClB,MAAM,CAACC,aAAR,CAAbiB,EAAjB;;EACA,OAAOG,MAAM,CAACZ,MAAPY,GAAgBF,KAAvB,EAA8B;IAC5B,MAAM;MAACvB,KAAD;MAAQe;IAAR,IAAgB,MAAMW,QAAQ,CAACP,IAATO,EAA5B;;IACA,IAAIX,IAAJ,EAAU;MACR;IACD;;IACDU,MAAM,CAACxB,IAAPwB,CAAYzB,KAAZyB;EACD;;EACD,OAAOA,MAAP;AACD","names":["ArrayQueue","Array","enqueue","value","push","dequeue","shift","Symbol","asyncIterator","AsyncQueue","constructor","_defineProperty","_values","_settlers","_closed","close","length","resolve","done","Error","settler","reject","next","Promise","takeAsync","asyncIterable","count","Infinity","result","iterator"],"sources":["../../../../src/lib/utils/async-queue.ts"],"sourcesContent":["// From https://github.com/rauschma/async-iter-demo/tree/master/src under MIT license\n// http://2ality.com/2016/10/asynchronous-iteration.html\n\nclass ArrayQueue<T> extends Array<T> {\n  enqueue(value: T) {\n    // Add at the end\n    return this.push(value);\n  }\n  dequeue(): T {\n    // Remove first element\n    return this.shift() as T;\n  }\n}\n\nexport default class AsyncQueue<T> {\n  private _values: ArrayQueue<T | Error>;\n  private _settlers: ArrayQueue<{resolve: (value: any) => void; reject: (reason?: any) => void}>;\n  private _closed: boolean;\n\n  constructor() {\n    // enqueues > dequeues\n    this._values = new ArrayQueue<T>();\n    // dequeues > enqueues\n    this._settlers = new ArrayQueue<{\n      resolve: (value: any) => void;\n      reject: (reason?: any) => void;\n    }>();\n    this._closed = false;\n  }\n\n  close(): void {\n    while (this._settlers.length > 0) {\n      this._settlers.dequeue().resolve({done: true});\n    }\n    this._closed = true;\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<T> {\n    return this;\n  }\n\n  enqueue(value: T | Error): void {\n    if (this._closed) {\n      throw new Error('Closed');\n    }\n\n    if (this._settlers.length > 0) {\n      if (this._values.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      const settler = this._settlers.dequeue();\n      if (value instanceof Error) {\n        settler.reject(value);\n      } else {\n        settler.resolve({value});\n      }\n    } else {\n      this._values.enqueue(value);\n    }\n  }\n\n  /**\n   * @returns a Promise for an IteratorResult\n   */\n  next(): Promise<any> {\n    if (this._values.length > 0) {\n      const value = this._values.dequeue();\n      if (value instanceof Error) {\n        return Promise.reject(value);\n      }\n      return Promise.resolve({value});\n    }\n\n    if (this._closed) {\n      if (this._settlers.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      return Promise.resolve({done: true});\n    }\n    // Wait for new values to be enqueued\n    return new Promise((resolve, reject) => {\n      this._settlers.enqueue({resolve, reject});\n    });\n  }\n}\n\n/**\n * @returns a Promise for an Array with the elements in `asyncIterable`\n */\nexport async function takeAsync(\n  asyncIterable: AsyncIterable<any>,\n  count = Infinity\n): Promise<any[]> {\n  const result: Array<any> = [];\n  const iterator = asyncIterable[Symbol.asyncIterator]();\n  while (result.length < count) {\n    const {value, done} = await iterator.next();\n    if (done) {\n      break;\n    }\n    result.push(value);\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}