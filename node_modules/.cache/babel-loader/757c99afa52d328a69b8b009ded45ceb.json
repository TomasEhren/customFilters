{"ast":null,"code":"import _toConsumableArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Buffer, Texture2D, assert } from '@luma.gl/webgl';\nimport { isWebGL2 } from '@luma.gl/gltools';\nimport { Transform } from '@luma.gl/engine';\nimport { default as textureFilterModule } from './texture-filter';\nimport { POLY_TEX_VS, FILTER_VS } from './shaders';\nimport * as Polygon from './polygon';\nvar TEXTURE_SIZE = 512;\n\nvar GPUPointInPolygon = /*#__PURE__*/function () {\n  function GPUPointInPolygon(gl) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, GPUPointInPolygon);\n\n    this.gl = gl;\n    assert(isWebGL2(gl));\n    this.textureSize = TEXTURE_SIZE;\n\n    this._setupResources();\n\n    this.update(opts);\n  }\n\n  _createClass(GPUPointInPolygon, [{\n    key: \"update\",\n    value: function update() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          polygons = _ref.polygons,\n          textureSize = _ref.textureSize;\n\n      if (textureSize) {\n        this.textureSize = textureSize;\n      }\n\n      if (!polygons || polygons.length === 0) {\n        return;\n      }\n\n      var _triangulatePolygons = triangulatePolygons(polygons),\n          vertices = _triangulatePolygons.vertices,\n          indices = _triangulatePolygons.indices,\n          vertexCount = _triangulatePolygons.vertexCount,\n          ids = _triangulatePolygons.ids;\n\n      this._updateResources(vertices, indices, ids, vertexCount);\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(_ref2) {\n      var positionBuffer = _ref2.positionBuffer,\n          filterValueIndexBuffer = _ref2.filterValueIndexBuffer,\n          count = _ref2.count;\n      this.filterTransform.update({\n        sourceBuffers: {\n          a_position: positionBuffer\n        },\n        feedbackBuffers: {\n          filterValueIndex: filterValueIndexBuffer\n        },\n        elementCount: count\n      });\n      var polygonTexture = this.polygonTexture,\n          boundingBox = this.boundingBox;\n      this.filterTransform.run({\n        moduleSettings: {\n          boundingBox: boundingBox,\n          texture: polygonTexture\n        }\n      });\n    }\n  }, {\n    key: \"_setupResources\",\n    value: function _setupResources() {\n      var _parameters;\n\n      var gl = this.gl;\n      this.polygonTexture = new Texture2D(gl, {\n        format: 6407,\n        type: 5121,\n        dataFormat: 6407,\n        border: 0,\n        mipmaps: false,\n        parameters: (_parameters = {}, _defineProperty(_parameters, 10240, 9728), _defineProperty(_parameters, 10241, 9728), _defineProperty(_parameters, 10242, 33071), _defineProperty(_parameters, 10243, 33071), _parameters)\n      });\n      this.positionBuffer = new Buffer(gl, {\n        accessor: {\n          type: 5126,\n          size: 2\n        }\n      });\n      this.idBuffer = new Buffer(gl, {\n        accessor: {\n          type: 5126,\n          size: 1\n        }\n      });\n      this.indexBuffer = new Buffer(gl, {\n        target: 34963,\n        accessor: {\n          type: 5123\n        }\n      });\n      this.polyTextureTransform = new Transform(gl, {\n        id: \"polygon-texture-creation-transform\",\n        elementCount: 0,\n        _targetTexture: this.polygonTexture,\n        _targetTextureVarying: 'v_polygonColor',\n        vs: POLY_TEX_VS,\n        drawMode: 4,\n        isIndexed: true,\n        sourceBuffers: {\n          a_position: this.positionBuffer,\n          a_polygonID: this.idBuffer,\n          indices: this.indexBuffer\n        }\n      });\n      this.filterTransform = new Transform(gl, {\n        id: 'filter transform',\n        vs: FILTER_VS,\n        modules: [textureFilterModule],\n        varyings: ['filterValueIndex']\n      });\n    }\n  }, {\n    key: \"_updateResources\",\n    value: function _updateResources(vertices, indices, ids, vertexCount) {\n      var boundingBox = getBoundingBox(vertices, vertexCount);\n\n      var _boundingBox = _slicedToArray(boundingBox, 4),\n          xMin = _boundingBox[0],\n          yMin = _boundingBox[1],\n          xMax = _boundingBox[2],\n          yMax = _boundingBox[3];\n\n      var width = xMax - xMin;\n      var height = yMax - yMin;\n      var whRatio = width / height;\n      var textureSize = this.textureSize;\n      var texWidth = textureSize;\n      var texHeight = textureSize;\n\n      if (whRatio > 1) {\n        texHeight = texWidth / whRatio;\n      } else {\n        texWidth = texHeight * whRatio;\n      }\n\n      this.boundingBox = boundingBox;\n      this.polygonTexture.resize({\n        width: texWidth,\n        height: texHeight,\n        mipmaps: false\n      });\n      this.positionBuffer.setData(new Float32Array(vertices));\n      this.idBuffer.setData(new Float32Array(ids));\n      this.indexBuffer.setData(new Uint16Array(indices));\n      this.polyTextureTransform.update({\n        elementCount: indices.length,\n        _targetTexture: this.polygonTexture\n      });\n      this.polyTextureTransform.run({\n        uniforms: {\n          boundingBoxOriginSize: [xMin, yMin, width, height]\n        }\n      });\n    }\n  }]);\n\n  return GPUPointInPolygon;\n}();\n\nexport { GPUPointInPolygon as default };\n\nfunction getBoundingBox(positions, vertexCount) {\n  var yMin = Infinity;\n  var yMax = -Infinity;\n  var xMin = Infinity;\n  var xMax = -Infinity;\n  var y;\n  var x;\n\n  for (var i = 0; i < vertexCount; i++) {\n    x = positions[i * 2];\n    y = positions[i * 2 + 1];\n    yMin = y < yMin ? y : yMin;\n    yMax = y > yMax ? y : yMax;\n    xMin = x < xMin ? x : xMin;\n    xMax = x > xMax ? x : xMax;\n  }\n\n  return [xMin, yMin, xMax, yMax];\n}\n\nfunction triangulatePolygons(polygons) {\n  var SIZE = 2;\n  var vertices = [];\n  var indices = [];\n  var ids = [];\n  var count = 0;\n  var polygonId = 0;\n\n  for (var i = 0; i < polygons.length; i++) {\n    var normalized = Polygon.normalize(polygons[i], SIZE);\n    var curVertices = normalized.positions || normalized;\n    var curCount = curVertices.length / SIZE;\n    var curIds = new Array(curCount).fill(polygonId);\n    vertices.push.apply(vertices, _toConsumableArray(curVertices));\n    ids.push.apply(ids, _toConsumableArray(curIds));\n    var curIndices = Polygon.getSurfaceIndices(normalized, SIZE);\n    var indexCount = curIndices.length;\n\n    for (var j = 0; j < indexCount; j++) {\n      curIndices[j] += count;\n    }\n\n    count += curCount;\n    indices.push.apply(indices, _toConsumableArray(curIndices));\n    polygonId++;\n  }\n\n  assert(count < 65536);\n  var vertexCount = Polygon.getVertexCount(vertices, SIZE);\n  return {\n    vertices: vertices,\n    indices: indices,\n    ids: ids,\n    vertexCount: vertexCount\n  };\n}","map":{"version":3,"mappings":"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","names":["Buffer","Texture2D","assert","isWebGL2","Transform","default","textureFilterModule","POLY_TEX_VS","FILTER_VS","Polygon","TEXTURE_SIZE","GPUPointInPolygon","constructor","gl","opts","textureSize","_setupResources","update","polygons","length","triangulatePolygons","vertices","indices","vertexCount","ids","_updateResources","filter","positionBuffer","filterValueIndexBuffer","count","filterTransform","sourceBuffers","a_position","feedbackBuffers","filterValueIndex","elementCount","polygonTexture","boundingBox","run","moduleSettings","texture","format","type","dataFormat","border","mipmaps","parameters","accessor","size","idBuffer","indexBuffer","target","polyTextureTransform","id","_targetTexture","_targetTextureVarying","vs","drawMode","isIndexed","a_polygonID","modules","varyings","getBoundingBox","xMin","yMin","xMax","yMax","width","height","whRatio","texWidth","texHeight","resize","setData","Float32Array","Uint16Array","uniforms","boundingBoxOriginSize","positions","Infinity","y","x","i","SIZE","polygonId","normalized","normalize","curVertices","curCount","curIds","Array","fill","push","curIndices","getSurfaceIndices","indexCount","j","getVertexCount"],"sources":["../../../../src/gpgpu/point-in-polygon/gpu-point-in-polygon.js"],"sourcesContent":["// @ts-nocheck TODO remove\n\nimport GL from '@luma.gl/constants';\nimport {Buffer, Texture2D, assert} from '@luma.gl/webgl';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {Transform} from '@luma.gl/engine';\nimport {default as textureFilterModule} from './texture-filter';\nimport {POLY_TEX_VS, FILTER_VS} from './shaders';\nimport * as Polygon from './polygon';\nconst TEXTURE_SIZE = 512;\n\nexport default class GPUPointInPolygon {\n  constructor(gl, opts = {}) {\n    this.gl = gl;\n    assert(isWebGL2(gl)); // supports WebGL2 only\n    this.textureSize = TEXTURE_SIZE;\n    this._setupResources();\n    this.update(opts);\n  }\n\n  update({polygons, textureSize} = {}) {\n    if (textureSize) {\n      this.textureSize = textureSize;\n    }\n    if (!polygons || polygons.length === 0) {\n      return;\n    }\n\n    const {vertices, indices, vertexCount, ids} = triangulatePolygons(polygons);\n    this._updateResources(vertices, indices, ids, vertexCount);\n  }\n\n  filter({positionBuffer, filterValueIndexBuffer, count}) {\n    this.filterTransform.update({\n      sourceBuffers: {\n        a_position: positionBuffer\n      },\n      feedbackBuffers: {\n        filterValueIndex: filterValueIndexBuffer\n      },\n      elementCount: count\n    });\n    const {polygonTexture, boundingBox} = this;\n\n    this.filterTransform.run({\n      moduleSettings: {boundingBox, texture: polygonTexture}\n    });\n  }\n\n  // PRIVATE\n\n  _setupResources() {\n    const {gl} = this;\n\n    // texture to render polygons to\n    this.polygonTexture = new Texture2D(gl, {\n      format: GL.RGB,\n      type: GL.UNSIGNED_BYTE,\n      dataFormat: GL.RGB,\n      border: 0,\n      mipmaps: false,\n      parameters: {\n        [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_WRAP_S]: gl.CLAMP_TO_EDGE,\n        [GL.TEXTURE_WRAP_T]: gl.CLAMP_TO_EDGE\n      }\n    });\n    this.positionBuffer = new Buffer(gl, {accessor: {type: GL.FLOAT, size: 2}});\n    this.idBuffer = new Buffer(gl, {accessor: {type: GL.FLOAT, size: 1}});\n    this.indexBuffer = new Buffer(gl, {\n      target: GL.ELEMENT_ARRAY_BUFFER,\n      accessor: {type: GL.UNSIGNED_SHORT}\n    });\n\n    // transform to generate polygon texture\n    this.polyTextureTransform = new Transform(gl, {\n      id: `polygon-texture-creation-transform`,\n      elementCount: 0,\n      _targetTexture: this.polygonTexture,\n      _targetTextureVarying: 'v_polygonColor',\n      vs: POLY_TEX_VS,\n      drawMode: GL.TRIANGLES,\n      isIndexed: true,\n      sourceBuffers: {\n        a_position: this.positionBuffer,\n        a_polygonID: this.idBuffer,\n        indices: this.indexBuffer\n      }\n    });\n\n    // transform to perform filtering\n    this.filterTransform = new Transform(gl, {\n      id: 'filter transform',\n      vs: FILTER_VS,\n      modules: [textureFilterModule],\n      varyings: ['filterValueIndex']\n    });\n  }\n\n  _updateResources(vertices, indices, ids, vertexCount) {\n    const boundingBox = getBoundingBox(vertices, vertexCount);\n    const [xMin, yMin, xMax, yMax] = boundingBox;\n    const width = xMax - xMin;\n    const height = yMax - yMin;\n    const whRatio = width / height;\n    const {textureSize} = this;\n\n    // calculate max texture size with same aspect ratio\n    let texWidth = textureSize;\n    let texHeight = textureSize;\n    if (whRatio > 1) {\n      texHeight = texWidth / whRatio;\n    } else {\n      texWidth = texHeight * whRatio;\n    }\n\n    this.boundingBox = boundingBox;\n    this.polygonTexture.resize({width: texWidth, height: texHeight, mipmaps: false});\n    this.positionBuffer.setData(new Float32Array(vertices));\n    this.idBuffer.setData(new Float32Array(ids));\n    this.indexBuffer.setData(new Uint16Array(indices));\n    this.polyTextureTransform.update({\n      elementCount: indices.length,\n      _targetTexture: this.polygonTexture\n    });\n\n    this.polyTextureTransform.run({\n      uniforms: {\n        boundingBoxOriginSize: [xMin, yMin, width, height]\n      }\n    });\n  }\n}\n\n// Helper methods\n\nfunction getBoundingBox(positions, vertexCount) {\n  let yMin = Infinity;\n  let yMax = -Infinity;\n  let xMin = Infinity;\n  let xMax = -Infinity;\n  let y;\n  let x;\n\n  for (let i = 0; i < vertexCount; i++) {\n    x = positions[i * 2];\n    y = positions[i * 2 + 1];\n    yMin = y < yMin ? y : yMin;\n    yMax = y > yMax ? y : yMax;\n    xMin = x < xMin ? x : xMin;\n    xMax = x > xMax ? x : xMax;\n  }\n\n  return [xMin, yMin, xMax, yMax];\n}\n\nfunction triangulatePolygons(polygons) {\n  const SIZE = 2;\n  const vertices = [];\n  const indices = [];\n  const ids = [];\n  let count = 0;\n  let polygonId = 0;\n  for (let i = 0; i < polygons.length; i++) {\n    const normalized = Polygon.normalize(polygons[i], SIZE);\n    const curVertices = normalized.positions || normalized;\n    const curCount = curVertices.length / SIZE;\n    const curIds = new Array(curCount).fill(polygonId);\n    vertices.push(...curVertices);\n    ids.push(...curIds);\n    const curIndices = Polygon.getSurfaceIndices(normalized, SIZE);\n    const indexCount = curIndices.length;\n    for (let j = 0; j < indexCount; j++) {\n      curIndices[j] += count;\n    }\n    count += curCount;\n    indices.push(...curIndices);\n    polygonId++;\n  }\n\n  // UInt16 (UNSIGNED_SHORT) buffer is used for indices\n  assert(count < 65536); // 0xFFFF\n\n  const vertexCount = Polygon.getVertexCount(vertices, SIZE);\n\n  return {vertices, indices, ids, vertexCount};\n}\n"]},"metadata":{},"sourceType":"module"}