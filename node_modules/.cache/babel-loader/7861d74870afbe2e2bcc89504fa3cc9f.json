{"ast":null,"code":"var pathPrefix = '';\nvar fileAliases = {};\nexport function setPathPrefix(prefix) {\n  pathPrefix = prefix;\n}\nexport function getPathPrefix() {\n  return pathPrefix;\n}\nexport function addAliases(aliases) {\n  Object.assign(fileAliases, aliases);\n}\nexport function resolvePath(filename) {\n  for (var alias in fileAliases) {\n    if (filename.startsWith(alias)) {\n      var replacement = fileAliases[alias];\n      filename = filename.replace(alias, replacement);\n    }\n  }\n\n  if (!filename.startsWith('http://') && !filename.startsWith('https://')) {\n    filename = \"\".concat(pathPrefix).concat(filename);\n  }\n\n  return filename;\n}","map":{"version":3,"mappings":"AAEA,IAAIA,UAAU,GAAG,EAAjB;AACA,IAAMC,WAA0C,GAAG,EAAnD;AAKA,OAAO,SAASC,aAAT,CAAuBC,MAAvB,EAA6C;EAClDH,UAAU,GAAGG,MAAbH;AACD;AAKD,OAAO,SAASI,aAAT,GAAiC;EACtC,OAAOJ,UAAP;AACD;AASD,OAAO,SAASK,UAAT,CAAoBC,OAApB,EAAkE;EACvEC,MAAM,CAACC,MAAPD,CAAcN,WAAdM,EAA2BD,OAA3BC;AACD;AAKD,OAAO,SAASE,WAAT,CAAqBC,QAArB,EAA+C;EACpD,KAAK,IAAMC,KAAX,IAAoBV,WAApB,EAAiC;IAC/B,IAAIS,QAAQ,CAACE,UAATF,CAAoBC,KAApBD,CAAJ,EAAgC;MAC9B,IAAMG,WAAW,GAAGZ,WAAW,CAACU,KAAD,CAA/B;MACAD,QAAQ,GAAGA,QAAQ,CAACI,OAATJ,CAAiBC,KAAjBD,EAAwBG,WAAxBH,CAAXA;IACD;EACF;;EACD,IAAI,CAACA,QAAQ,CAACE,UAATF,CAAoB,SAApBA,CAAD,IAAmC,CAACA,QAAQ,CAACE,UAATF,CAAoB,UAApBA,CAAxC,EAAyE;IACvEA,QAAQ,aAAMV,UAAN,SAAmBU,QAAnB,CAARA;EACD;;EACD,OAAOA,QAAP;AACD","names":["pathPrefix","fileAliases","setPathPrefix","prefix","getPathPrefix","addAliases","aliases","Object","assign","resolvePath","filename","alias","startsWith","replacement","replace"],"sources":["../../../../src/lib/path-utils/file-aliases.ts"],"sourcesContent":["// Simple file alias mechanisms for tests.\n\nlet pathPrefix = '';\nconst fileAliases: {[aliasPath: string]: string} = {};\n\n/*\n * Set a relative path prefix\n */\nexport function setPathPrefix(prefix: string): void {\n  pathPrefix = prefix;\n}\n\n/*\n * Get the relative path prefix\n */\nexport function getPathPrefix(): string {\n  return pathPrefix;\n}\n\n/**\n *\n * @param aliases\n *\n * Note: addAliases are an experimental export, they are only for testing of loaders.gl loaders\n * not intended as a generic aliasing mechanism\n */\nexport function addAliases(aliases: {[aliasPath: string]: string}): void {\n  Object.assign(fileAliases, aliases);\n}\n\n/**\n * Resolves aliases and adds path-prefix to paths\n */\nexport function resolvePath(filename: string): string {\n  for (const alias in fileAliases) {\n    if (filename.startsWith(alias)) {\n      const replacement = fileAliases[alias];\n      filename = filename.replace(alias, replacement);\n    }\n  }\n  if (!filename.startsWith('http://') && !filename.startsWith('https://')) {\n    filename = `${pathPrefix}${filename}`;\n  }\n  return filename;\n}\n"]},"metadata":{},"sourceType":"module"}