{"ast":null,"code":"import { getTransferList } from '../worker-utils/get-transfer-list';\nconst onMessageWrapperMap = new Map();\nexport default class WorkerBody {\n  static set onmessage(onMessage) {\n    self.onmessage = message => {\n      if (!isKnownMessage(message)) {\n        return;\n      }\n\n      const {\n        type,\n        payload\n      } = message.data;\n      onMessage(type, payload);\n    };\n  }\n\n  static addEventListener(onMessage) {\n    let onMessageWrapper = onMessageWrapperMap.get(onMessage);\n\n    if (!onMessageWrapper) {\n      onMessageWrapper = message => {\n        if (!isKnownMessage(message)) {\n          return;\n        }\n\n        const {\n          type,\n          payload\n        } = message.data;\n        onMessage(type, payload);\n      };\n    }\n\n    self.addEventListener('message', onMessageWrapper);\n  }\n\n  static removeEventListener(onMessage) {\n    const onMessageWrapper = onMessageWrapperMap.get(onMessage);\n    onMessageWrapperMap.delete(onMessage);\n    self.removeEventListener('message', onMessageWrapper);\n  }\n\n  static postMessage(type, payload) {\n    if (self) {\n      const data = {\n        source: 'loaders.gl',\n        type,\n        payload\n      };\n      const transferList = getTransferList(payload);\n      self.postMessage(data, transferList);\n    }\n  }\n\n}\n\nfunction isKnownMessage(message) {\n  const {\n    type,\n    data\n  } = message;\n  return type === 'message' && data && typeof data.source === 'string' && data.source.startsWith('loaders.gl');\n}","map":{"version":3,"mappings":"AACA,SAAQA,eAAR,QAA8B,mCAA9B;AAEA,MAAMC,mBAAmB,GAAG,IAAIC,GAAJ,EAA5B;AAKA,eAAe,MAAMC,UAAN,CAAiB;EAIV,WAATC,SAAS,CAACC,SAAD,EAA6E;IAE/FC,IAAI,CAACF,SAALE,GAAkBC,OAAD,IAAa;MAC5B,IAAI,CAACC,cAAc,CAACD,OAAD,CAAnB,EAA8B;QAC5B;MACD;;MAGD,MAAM;QAACE,IAAD;QAAOC;MAAP,IAAkBH,OAAO,CAACI,IAAhC;MACAN,SAAS,CAACI,IAAD,EAAOC,OAAP,CAATL;IAPF;EASD;;EAEsB,OAAhBO,gBAAgB,CACrBP,SADqB,EAErB;IACA,IAAIQ,gBAAgB,GAAGZ,mBAAmB,CAACa,GAApBb,CAAwBI,SAAxBJ,CAAvB;;IAEA,IAAI,CAACY,gBAAL,EAAuB;MACrBA,gBAAgB,GAAIN,OAAD,IAAgC;QACjD,IAAI,CAACC,cAAc,CAACD,OAAD,CAAnB,EAA8B;UAC5B;QACD;;QAGD,MAAM;UAACE,IAAD;UAAOC;QAAP,IAAkBH,OAAO,CAACI,IAAhC;QACAN,SAAS,CAACI,IAAD,EAAOC,OAAP,CAATL;MAPF;IASD;;IAGDC,IAAI,CAACM,gBAALN,CAAsB,SAAtBA,EAAiCO,gBAAjCP;EACD;;EAEyB,OAAnBS,mBAAmB,CACxBV,SADwB,EAExB;IACA,MAAMQ,gBAAgB,GAAGZ,mBAAmB,CAACa,GAApBb,CAAwBI,SAAxBJ,CAAzB;IACAA,mBAAmB,CAACe,MAApBf,CAA2BI,SAA3BJ;IAEAK,IAAI,CAACS,mBAALT,CAAyB,SAAzBA,EAAoCO,gBAApCP;EACD;;EAOiB,OAAXW,WAAW,CAACR,IAAD,EAA0BC,OAA1B,EAA+D;IAC/E,IAAIJ,IAAJ,EAAU;MACR,MAAMK,IAAuB,GAAG;QAACO,MAAM,EAAE,YAAT;QAAuBT,IAAvB;QAA6BC;MAA7B,CAAhC;MACA,MAAMS,YAAY,GAAGnB,eAAe,CAACU,OAAD,CAApC;MAGAJ,IAAI,CAACW,WAALX,CAAiBK,IAAjBL,EAAuBa,YAAvBb;IACD;EACF;;AA5D6B;;AAgEhC,SAASE,cAAT,CAAwBD,OAAxB,EAAoD;EAClD,MAAM;IAACE,IAAD;IAAOE;EAAP,IAAeJ,OAArB;EACA,OACEE,IAAI,KAAK,SAATA,IACAE,IADAF,IAEA,OAAOE,IAAI,CAACO,MAAZ,KAAuB,QAFvBT,IAGAE,IAAI,CAACO,MAALP,CAAYS,UAAZT,CAAuB,YAAvBA,CAJF;AAMD","names":["getTransferList","onMessageWrapperMap","Map","WorkerBody","onmessage","onMessage","self","message","isKnownMessage","type","payload","data","addEventListener","onMessageWrapper","get","removeEventListener","delete","postMessage","source","transferList","startsWith"],"sources":["../../../../src/lib/worker-farm/worker-body.ts"],"sourcesContent":["import type {WorkerMessageData, WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport {getTransferList} from '../worker-utils/get-transfer-list';\n\nconst onMessageWrapperMap = new Map();\n\n/**\n * Type safe wrapper for worker code\n */\nexport default class WorkerBody {\n  /*\n   * (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n   */\n  static set onmessage(onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any) {\n    // eslint-disable-next-line no-restricted-globals\n    self.onmessage = (message) => {\n      if (!isKnownMessage(message)) {\n        return;\n      }\n\n      // Confusingly the message itself also has a 'type' field which is always set to 'message'\n      const {type, payload} = message.data;\n      onMessage(type, payload);\n    };\n  }\n\n  static addEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    let onMessageWrapper = onMessageWrapperMap.get(onMessage);\n\n    if (!onMessageWrapper) {\n      onMessageWrapper = (message: MessageEvent<any>) => {\n        if (!isKnownMessage(message)) {\n          return;\n        }\n\n        // Confusingly the message itself also has a 'type' field which is always set to 'message'\n        const {type, payload} = message.data;\n        onMessage(type, payload);\n      };\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    self.addEventListener('message', onMessageWrapper);\n  }\n\n  static removeEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    const onMessageWrapper = onMessageWrapperMap.get(onMessage);\n    onMessageWrapperMap.delete(onMessage);\n    // eslint-disable-next-line no-restricted-globals\n    self.removeEventListener('message', onMessageWrapper);\n  }\n\n  /**\n   * Send a message from a worker to creating thread (main thread)\n   * @param type\n   * @param payload\n   */\n  static postMessage(type: WorkerMessageType, payload: WorkerMessagePayload): void {\n    if (self) {\n      const data: WorkerMessageData = {source: 'loaders.gl', type, payload};\n      const transferList = getTransferList(payload);\n      // eslint-disable-next-line no-restricted-globals\n      // @ts-ignore\n      self.postMessage(data, transferList);\n    }\n  }\n}\n\n// Filter out noise messages sent to workers\nfunction isKnownMessage(message: MessageEvent<any>) {\n  const {type, data} = message;\n  return (\n    type === 'message' &&\n    data &&\n    typeof data.source === 'string' &&\n    data.source.startsWith('loaders.gl')\n  );\n}\n"]},"metadata":{},"sourceType":"module"}