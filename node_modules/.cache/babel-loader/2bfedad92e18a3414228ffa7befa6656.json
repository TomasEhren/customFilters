{"ast":null,"code":"import _asyncIterator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport _awaitAsyncGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { isBrowser, toArrayBuffer } from '@loaders.gl/loader-utils';\nexport function makeStreamIterator(stream, options) {\n  return isBrowser ? makeBrowserStreamIterator(stream, options) : makeNodeStreamIterator(stream, options);\n}\n\nfunction makeBrowserStreamIterator(_x, _x2) {\n  return _makeBrowserStreamIterator.apply(this, arguments);\n}\n\nfunction _makeBrowserStreamIterator() {\n  _makeBrowserStreamIterator = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(stream, options) {\n    var reader, nextBatchPromise, currentBatchPromise, _yield$_awaitAsyncGen, done, value;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            reader = stream.getReader();\n            _context.prev = 1;\n\n          case 2:\n            if (!true) {\n              _context.next = 16;\n              break;\n            }\n\n            currentBatchPromise = nextBatchPromise || reader.read();\n\n            if (options !== null && options !== void 0 && options._streamReadAhead) {\n              nextBatchPromise = reader.read();\n            }\n\n            _context.next = 7;\n            return _awaitAsyncGenerator(currentBatchPromise);\n\n          case 7:\n            _yield$_awaitAsyncGen = _context.sent;\n            done = _yield$_awaitAsyncGen.done;\n            value = _yield$_awaitAsyncGen.value;\n\n            if (!done) {\n              _context.next = 12;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 12:\n            _context.next = 14;\n            return toArrayBuffer(value);\n\n          case 14:\n            _context.next = 2;\n            break;\n\n          case 16:\n            _context.next = 21;\n            break;\n\n          case 18:\n            _context.prev = 18;\n            _context.t0 = _context[\"catch\"](1);\n            reader.releaseLock();\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 18]]);\n  }));\n  return _makeBrowserStreamIterator.apply(this, arguments);\n}\n\nfunction makeNodeStreamIterator(_x3, _x4) {\n  return _makeNodeStreamIterator.apply(this, arguments);\n}\n\nfunction _makeNodeStreamIterator() {\n  _makeNodeStreamIterator = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(stream, options) {\n    var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context2.prev = 2;\n            _iterator = _asyncIterator(stream);\n\n          case 4:\n            _context2.next = 6;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 6:\n            if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n              _context2.next = 13;\n              break;\n            }\n\n            chunk = _step.value;\n            _context2.next = 10;\n            return toArrayBuffer(chunk);\n\n          case 10:\n            _iteratorAbruptCompletion = false;\n            _context2.next = 4;\n            break;\n\n          case 13:\n            _context2.next = 19;\n            break;\n\n          case 15:\n            _context2.prev = 15;\n            _context2.t0 = _context2[\"catch\"](2);\n            _didIteratorError = true;\n            _iteratorError = _context2.t0;\n\n          case 19:\n            _context2.prev = 19;\n            _context2.prev = 20;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context2.next = 24;\n              break;\n            }\n\n            _context2.next = 24;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 24:\n            _context2.prev = 24;\n\n            if (!_didIteratorError) {\n              _context2.next = 27;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 27:\n            return _context2.finish(24);\n\n          case 28:\n            return _context2.finish(19);\n\n          case 29:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[2, 15, 19, 29], [20,, 24, 28]]);\n  }));\n  return _makeNodeStreamIterator.apply(this, arguments);\n}","map":{"version":3,"mappings":";;;;AACA,SAAQA,SAAR,EAAmBC,aAAnB,QAAuC,0BAAvC;AAUA,OAAO,SAASC,kBAAT,CACLC,MADK,EAELC,OAFK,EAGuB;EAC5B,OAAOJ,SAAS,GACZK,yBAAyB,CAACF,MAAD,EAA2BC,OAA3B,CADb,GAEZE,sBAAsB,CAACH,MAAD,EAAqBC,OAArB,CAF1B;AAGD;;SAOeC,yB;;;;;0FAAhB,iBACEF,MADF,EAEEC,OAFF;IAAA;;IAAA;MAAA;QAAA;UAAA;YAaQG,MAbR,GAaiBJ,MAAM,CAACK,SAAPL,EAbjB;YAAA;;UAAA;YAAA,KAmBW,IAnBX;cAAA;cAAA;YAAA;;YAoBYM,mBApBZ,GAoBkCC,gBAAgB,IAAIH,MAAM,CAACI,IAAPJ,EApBtD;;YAuBM,IAAIH,OAAJ,SAAIA,WAAJ,WAAIA,WAAO,CAAEQ,gBAAb,EAA+B;cAC7BF,gBAAgB,GAAGH,MAAM,CAACI,IAAPJ,EAAnBG;YACD;;YAzBP;YAAA,4BA4BkCD,mBA5BlC;;UAAA;YAAA;YA4BaI,IA5Bb,yBA4BaA,IA5Bb;YA4BmBC,KA5BnB,yBA4BmBA,KA5BnB;;YAAA,KA8BUD,IA9BV;cAAA;cAAA;YAAA;;YAAA;;UAAA;YAAA;YAkCM,OAAMZ,aAAa,CAACa,KAAD,CAAnB;;UAlCN;YAAA;YAAA;;UAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;YAuCIP,MAAM,CAACQ,WAAPR;;UAvCJ;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;SAgDgBD,sB;;;;;uFAAhB,kBACEH,MADF,EAEEC,OAFF;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA;YAAA;YAAA,2BAM4BD,MAN5B;;UAAA;YAAA;YAAA;;UAAA;YAAA;cAAA;cAAA;YAAA;;YAMmBa,KANnB;YAAA;YAOI,OAAMf,aAAa,CAACe,KAAD,CAAnB;;UAPJ;YAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;;YAAA;cAAA;cAAA;YAAA;;YAAA;YAAA;;UAAA;YAAA;;YAAA;cAAA;cAAA;YAAA;;YAAA;;UAAA;YAAA;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","names":["isBrowser","toArrayBuffer","makeStreamIterator","stream","options","makeBrowserStreamIterator","makeNodeStreamIterator","reader","getReader","currentBatchPromise","nextBatchPromise","read","_streamReadAhead","done","value","releaseLock","chunk"],"sources":["../../../../src/iterators/make-iterator/make-stream-iterator.ts"],"sourcesContent":["import type {Readable} from 'stream';\nimport {isBrowser, toArrayBuffer} from '@loaders.gl/loader-utils';\n\nexport type StreamIteratorOptions = {\n  _streamReadAhead?: boolean;\n};\n\n/**\n * Returns an async iterable that reads from a stream (works in both Node.js and browsers)\n * @param stream stream to iterator over\n */\nexport function makeStreamIterator(\n  stream: ReadableStream | Readable,\n  options?: StreamIteratorOptions\n): AsyncIterable<ArrayBuffer> {\n  return isBrowser\n    ? makeBrowserStreamIterator(stream as ReadableStream, options)\n    : makeNodeStreamIterator(stream as Readable, options);\n}\n\n/**\n * Returns an async iterable that reads from a DOM (browser) stream\n * @param stream stream to iterate from\n * @see https://jakearchibald.com/2017/async-iterators-and-generators/#making-streams-iterate\n */\nasync function* makeBrowserStreamIterator(\n  stream: ReadableStream,\n  options?: StreamIteratorOptions\n): AsyncIterable<ArrayBuffer> {\n  // WhatWG: stream is supposed to have a `getIterator` method\n  // if (typeof stream.getIterator === 'function') {\n  //   return stream.getIterator();\n  // }\n  // if (typeof stream[Symbol.asyncIterator] === 'function') {\n  //   return makeToArrayBufferIterator(stream);\n  // }\n\n  // In the browser, we first need to get a lock on the stream\n  const reader = stream.getReader();\n\n  let nextBatchPromise: Promise<{done?: boolean; value?: Uint8Array}> | undefined;\n\n  try {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const currentBatchPromise = nextBatchPromise || reader.read();\n      // Issue a read for an additional batch, while we await the next batch\n      // Idea is to make fetching happen in parallel with processing / parsing\n      if (options?._streamReadAhead) {\n        nextBatchPromise = reader.read();\n      }\n      // Read from the stream\n      // value is a Uint8Array\n      const {done, value} = await currentBatchPromise;\n      // Exit if we're done\n      if (done) {\n        return;\n      }\n      // Else yield the chunk\n      yield toArrayBuffer(value);\n    }\n  } catch (error) {\n    // TODO - examples makes it look like this should always be called,\n    // but that generates exceptions so only call it if we do not reach the end\n    reader.releaseLock();\n  }\n}\n\n/**\n * Returns an async iterable that reads from a DOM (browser) stream\n * @param stream stream to iterate from\n * @note Requires Node.js >= 10\n */\nasync function* makeNodeStreamIterator(\n  stream: Readable,\n  options?: StreamIteratorOptions\n): AsyncIterable<ArrayBuffer> {\n  // Hacky test for node version to ensure we don't call bad polyfills\n  // NODE 10+: stream is an asyncIterator\n  for await (const chunk of stream) {\n    yield toArrayBuffer(chunk); // Coerce each chunk to ArrayBuffer\n  }\n}\n/* TODO - remove NODE < 10\n * @see https://github.com/bustle/streaming-iterables, MIT license\n *\n  if (typeof stream[Symbol.asyncIterator] === 'function') {\n    return;\n  }\n\n  // TODO - check if is this ever used in Node 10+?\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const data = stream.read();\n    if (data !== null) {\n      yield toArrayBuffer(data);\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (stream._readableState?.ended) {\n      return;\n    }\n    await onceReadable(stream);\n  }\n\nasync function onceReadable(stream: Readable): Promise<any> {\n  return new Promise((resolve) => {\n    stream.once('readable', resolve);\n  });\n}\n  */\n"]},"metadata":{},"sourceType":"module"}