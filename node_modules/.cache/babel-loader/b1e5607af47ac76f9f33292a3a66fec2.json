{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { DracoLoader } from '@loaders.gl/draco';\nimport { GL } from '@loaders.gl/math';\nimport { Vector3 } from '@math.gl/core';\nimport Tile3DFeatureTable from '../classes/tile-3d-feature-table';\nimport Tile3DBatchTable from '../classes/tile-3d-batch-table';\nimport { parse3DTileHeaderSync } from './helpers/parse-3d-tile-header';\nimport { parse3DTileTablesHeaderSync, parse3DTileTablesSync } from './helpers/parse-3d-tile-tables';\nimport { normalize3DTileColorAttribute } from './helpers/normalize-3d-tile-colors';\nimport { normalize3DTileNormalAttribute } from './helpers/normalize-3d-tile-normals';\nimport { normalize3DTilePositionAttribute } from './helpers/normalize-3d-tile-positions';\nexport function parsePointCloud3DTile(_x, _x2, _x3, _x4, _x5) {\n  return _parsePointCloud3DTile.apply(this, arguments);\n}\n\nfunction _parsePointCloud3DTile() {\n  _parsePointCloud3DTile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tile, arrayBuffer, byteOffset, options, context) {\n    var _parsePointCloudTable, featureTable, batchTable;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset);\n            byteOffset = parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset);\n            byteOffset = parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options);\n            initializeTile(tile);\n            _parsePointCloudTable = parsePointCloudTables(tile), featureTable = _parsePointCloudTable.featureTable, batchTable = _parsePointCloudTable.batchTable;\n            _context.next = 7;\n            return parseDraco(tile, featureTable, batchTable, options, context);\n\n          case 7:\n            parsePositions(tile, featureTable, options);\n            parseColors(tile, featureTable, batchTable);\n            parseNormals(tile, featureTable);\n            return _context.abrupt(\"return\", byteOffset);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parsePointCloud3DTile.apply(this, arguments);\n}\n\nfunction initializeTile(tile) {\n  tile.attributes = {\n    positions: null,\n    colors: null,\n    normals: null,\n    batchIds: null\n  };\n  tile.isQuantized = false;\n  tile.isTranslucent = false;\n  tile.isRGB565 = false;\n  tile.isOctEncoded16P = false;\n}\n\nfunction parsePointCloudTables(tile) {\n  var featureTable = new Tile3DFeatureTable(tile.featureTableJson, tile.featureTableBinary);\n  var pointsLength = featureTable.getGlobalProperty('POINTS_LENGTH');\n\n  if (!Number.isFinite(pointsLength)) {\n    throw new Error('POINTS_LENGTH must be defined');\n  }\n\n  featureTable.featuresLength = pointsLength;\n  tile.featuresLength = pointsLength;\n  tile.pointsLength = pointsLength;\n  tile.pointCount = pointsLength;\n  tile.rtcCenter = featureTable.getGlobalProperty('RTC_CENTER', GL.FLOAT, 3);\n  var batchTable = parseBatchIds(tile, featureTable);\n  return {\n    featureTable: featureTable,\n    batchTable: batchTable\n  };\n}\n\nfunction parsePositions(tile, featureTable, options) {\n  if (!tile.attributes.positions) {\n    if (featureTable.hasProperty('POSITION')) {\n      tile.attributes.positions = featureTable.getPropertyArray('POSITION', GL.FLOAT, 3);\n    } else if (featureTable.hasProperty('POSITION_QUANTIZED')) {\n      var positions = featureTable.getPropertyArray('POSITION_QUANTIZED', GL.UNSIGNED_SHORT, 3);\n      tile.isQuantized = true;\n      tile.quantizedRange = (1 << 16) - 1;\n      tile.quantizedVolumeScale = featureTable.getGlobalProperty('QUANTIZED_VOLUME_SCALE', GL.FLOAT, 3);\n\n      if (!tile.quantizedVolumeScale) {\n        throw new Error('QUANTIZED_VOLUME_SCALE must be defined for quantized positions.');\n      }\n\n      tile.quantizedVolumeOffset = featureTable.getGlobalProperty('QUANTIZED_VOLUME_OFFSET', GL.FLOAT, 3);\n\n      if (!tile.quantizedVolumeOffset) {\n        throw new Error('QUANTIZED_VOLUME_OFFSET must be defined for quantized positions.');\n      }\n\n      tile.attributes.positions = normalize3DTilePositionAttribute(tile, positions, options);\n    }\n  }\n\n  if (!tile.attributes.positions) {\n    throw new Error('Either POSITION or POSITION_QUANTIZED must be defined.');\n  }\n}\n\nfunction parseColors(tile, featureTable, batchTable) {\n  if (!tile.attributes.colors) {\n    var colors = null;\n\n    if (featureTable.hasProperty('RGBA')) {\n      colors = featureTable.getPropertyArray('RGBA', GL.UNSIGNED_BYTE, 4);\n      tile.isTranslucent = true;\n    } else if (featureTable.hasProperty('RGB')) {\n      colors = featureTable.getPropertyArray('RGB', GL.UNSIGNED_BYTE, 3);\n    } else if (featureTable.hasProperty('RGB565')) {\n      colors = featureTable.getPropertyArray('RGB565', GL.UNSIGNED_SHORT, 1);\n      tile.isRGB565 = true;\n    }\n\n    tile.attributes.colors = normalize3DTileColorAttribute(tile, colors, batchTable);\n  }\n\n  if (featureTable.hasProperty('CONSTANT_RGBA')) {\n    tile.constantRGBA = featureTable.getGlobalProperty('CONSTANT_RGBA', GL.UNSIGNED_BYTE, 4);\n  }\n}\n\nfunction parseNormals(tile, featureTable) {\n  if (!tile.attributes.normals) {\n    var normals = null;\n\n    if (featureTable.hasProperty('NORMAL')) {\n      normals = featureTable.getPropertyArray('NORMAL', GL.FLOAT, 3);\n    } else if (featureTable.hasProperty('NORMAL_OCT16P')) {\n      normals = featureTable.getPropertyArray('NORMAL_OCT16P', GL.UNSIGNED_BYTE, 2);\n      tile.isOctEncoded16P = true;\n    }\n\n    tile.attributes.normals = normalize3DTileNormalAttribute(tile, normals);\n  }\n}\n\nfunction parseBatchIds(tile, featureTable) {\n  var batchTable = null;\n\n  if (!tile.batchIds && featureTable.hasProperty('BATCH_ID')) {\n    tile.batchIds = featureTable.getPropertyArray('BATCH_ID', GL.UNSIGNED_SHORT, 1);\n\n    if (tile.batchIds) {\n      var batchFeatureLength = featureTable.getGlobalProperty('BATCH_LENGTH');\n\n      if (!batchFeatureLength) {\n        throw new Error('Global property: BATCH_LENGTH must be defined when BATCH_ID is defined.');\n      }\n\n      var batchTableJson = tile.batchTableJson,\n          batchTableBinary = tile.batchTableBinary;\n      batchTable = new Tile3DBatchTable(batchTableJson, batchTableBinary, batchFeatureLength);\n    }\n  }\n\n  return batchTable;\n}\n\nfunction parseDraco(_x6, _x7, _x8, _x9, _x10) {\n  return _parseDraco.apply(this, arguments);\n}\n\nfunction _parseDraco() {\n  _parseDraco = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(tile, featureTable, batchTable, options, context) {\n    var dracoBuffer, dracoFeatureTableProperties, dracoBatchTableProperties, batchTableDraco, featureTableDraco, dracoByteOffset, dracoByteLength, dracoData;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            batchTableDraco = tile.batchTableJson && tile.batchTableJson.extensions && tile.batchTableJson.extensions['3DTILES_draco_point_compression'];\n\n            if (batchTableDraco) {\n              dracoBatchTableProperties = batchTableDraco.properties;\n            }\n\n            featureTableDraco = featureTable.getExtension('3DTILES_draco_point_compression');\n\n            if (!featureTableDraco) {\n              _context2.next = 15;\n              break;\n            }\n\n            dracoFeatureTableProperties = featureTableDraco.properties;\n            dracoByteOffset = featureTableDraco.byteOffset;\n            dracoByteLength = featureTableDraco.byteLength;\n\n            if (!(!dracoFeatureTableProperties || !Number.isFinite(dracoByteOffset) || !dracoByteLength)) {\n              _context2.next = 9;\n              break;\n            }\n\n            throw new Error('Draco properties, byteOffset, and byteLength must be defined');\n\n          case 9:\n            dracoBuffer = tile.featureTableBinary.slice(dracoByteOffset, dracoByteOffset + dracoByteLength);\n            tile.hasPositions = Number.isFinite(dracoFeatureTableProperties.POSITION);\n            tile.hasColors = Number.isFinite(dracoFeatureTableProperties.RGB) || Number.isFinite(dracoFeatureTableProperties.RGBA);\n            tile.hasNormals = Number.isFinite(dracoFeatureTableProperties.NORMAL);\n            tile.hasBatchIds = Number.isFinite(dracoFeatureTableProperties.BATCH_ID);\n            tile.isTranslucent = Number.isFinite(dracoFeatureTableProperties.RGBA);\n\n          case 15:\n            if (dracoBuffer) {\n              _context2.next = 17;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", true);\n\n          case 17:\n            dracoData = {\n              buffer: dracoBuffer,\n              properties: _objectSpread(_objectSpread({}, dracoFeatureTableProperties), dracoBatchTableProperties),\n              featureTableProperties: dracoFeatureTableProperties,\n              batchTableProperties: dracoBatchTableProperties,\n              dequantizeInShader: false\n            };\n            _context2.next = 20;\n            return loadDraco(tile, dracoData, options, context);\n\n          case 20:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _parseDraco.apply(this, arguments);\n}\n\nexport function loadDraco(_x11, _x12, _x13, _x14) {\n  return _loadDraco.apply(this, arguments);\n}\n\nfunction _loadDraco() {\n  _loadDraco = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(tile, dracoData, options, context) {\n    var parse, dracoOptions, data, decodedPositions, decodedColors, decodedNormals, decodedBatchIds, isQuantizedDraco, isOctEncodedDraco, quantization, range, batchTableAttributes, _i, _Object$keys, attributeName;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            parse = context.parse;\n            dracoOptions = _objectSpread(_objectSpread({}, options), {}, {\n              draco: _objectSpread(_objectSpread({}, options.draco), {}, {\n                extraAttributes: dracoData.batchTableProperties || {}\n              })\n            });\n            delete dracoOptions['3d-tiles'];\n            _context3.next = 5;\n            return parse(dracoData.buffer, DracoLoader, dracoOptions);\n\n          case 5:\n            data = _context3.sent;\n            decodedPositions = data.attributes.POSITION && data.attributes.POSITION.value;\n            decodedColors = data.attributes.COLOR_0 && data.attributes.COLOR_0.value;\n            decodedNormals = data.attributes.NORMAL && data.attributes.NORMAL.value;\n            decodedBatchIds = data.attributes.BATCH_ID && data.attributes.BATCH_ID.value;\n            isQuantizedDraco = decodedPositions && data.attributes.POSITION.value.quantization;\n            isOctEncodedDraco = decodedNormals && data.attributes.NORMAL.value.quantization;\n\n            if (isQuantizedDraco) {\n              quantization = data.POSITION.data.quantization;\n              range = quantization.range;\n              tile.quantizedVolumeScale = new Vector3(range, range, range);\n              tile.quantizedVolumeOffset = new Vector3(quantization.minValues);\n              tile.quantizedRange = (1 << quantization.quantizationBits) - 1.0;\n              tile.isQuantizedDraco = true;\n            }\n\n            if (isOctEncodedDraco) {\n              tile.octEncodedRange = (1 << data.NORMAL.data.quantization.quantizationBits) - 1.0;\n              tile.isOctEncodedDraco = true;\n            }\n\n            batchTableAttributes = {};\n\n            if (dracoData.batchTableProperties) {\n              for (_i = 0, _Object$keys = Object.keys(dracoData.batchTableProperties); _i < _Object$keys.length; _i++) {\n                attributeName = _Object$keys[_i];\n\n                if (data.attributes[attributeName] && data.attributes[attributeName].value) {\n                  batchTableAttributes[attributeName.toLowerCase()] = data.attributes[attributeName].value;\n                }\n              }\n            }\n\n            tile.attributes = _objectSpread({\n              positions: decodedPositions,\n              colors: normalize3DTileColorAttribute(tile, decodedColors, undefined),\n              normals: decodedNormals,\n              batchIds: decodedBatchIds\n            }, batchTableAttributes);\n\n          case 17:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _loadDraco.apply(this, arguments);\n}","map":{"version":3,"mappings":"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","names":["DracoLoader","GL","Vector3","Tile3DFeatureTable","Tile3DBatchTable","parse3DTileHeaderSync","parse3DTileTablesHeaderSync","parse3DTileTablesSync","normalize3DTileColorAttribute","normalize3DTileNormalAttribute","normalize3DTilePositionAttribute","parsePointCloud3DTile","tile","arrayBuffer","byteOffset","options","context","initializeTile","parsePointCloudTables","featureTable","batchTable","parseDraco","parsePositions","parseColors","parseNormals","attributes","positions","colors","normals","batchIds","isQuantized","isTranslucent","isRGB565","isOctEncoded16P","featureTableJson","featureTableBinary","pointsLength","getGlobalProperty","Number","isFinite","Error","featuresLength","pointCount","rtcCenter","FLOAT","parseBatchIds","hasProperty","getPropertyArray","UNSIGNED_SHORT","quantizedRange","quantizedVolumeScale","quantizedVolumeOffset","UNSIGNED_BYTE","constantRGBA","batchFeatureLength","batchTableJson","batchTableBinary","batchTableDraco","extensions","dracoBatchTableProperties","properties","featureTableDraco","getExtension","dracoFeatureTableProperties","dracoByteOffset","dracoByteLength","byteLength","dracoBuffer","slice","hasPositions","POSITION","hasColors","RGB","RGBA","hasNormals","NORMAL","hasBatchIds","BATCH_ID","dracoData","buffer","featureTableProperties","batchTableProperties","dequantizeInShader","loadDraco","parse","dracoOptions","draco","extraAttributes","data","decodedPositions","value","decodedColors","COLOR_0","decodedNormals","decodedBatchIds","isQuantizedDraco","quantization","isOctEncodedDraco","range","minValues","quantizationBits","octEncodedRange","batchTableAttributes","Object","keys","attributeName","toLowerCase","undefined"],"sources":["../../../../src/lib/parsers/parse-3d-tile-point-cloud.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {DracoLoader} from '@loaders.gl/draco';\nimport {GL} from '@loaders.gl/math';\nimport {Vector3} from '@math.gl/core';\n\nimport Tile3DFeatureTable from '../classes/tile-3d-feature-table';\nimport Tile3DBatchTable from '../classes/tile-3d-batch-table';\nimport {parse3DTileHeaderSync} from './helpers/parse-3d-tile-header';\nimport {parse3DTileTablesHeaderSync, parse3DTileTablesSync} from './helpers/parse-3d-tile-tables';\nimport {normalize3DTileColorAttribute} from './helpers/normalize-3d-tile-colors';\nimport {normalize3DTileNormalAttribute} from './helpers/normalize-3d-tile-normals';\nimport {normalize3DTilePositionAttribute} from './helpers/normalize-3d-tile-positions';\n\nexport async function parsePointCloud3DTile(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset);\n  byteOffset = parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset);\n  byteOffset = parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options);\n  initializeTile(tile);\n\n  const {featureTable, batchTable} = parsePointCloudTables(tile);\n\n  await parseDraco(tile, featureTable, batchTable, options, context);\n\n  parsePositions(tile, featureTable, options);\n  parseColors(tile, featureTable, batchTable);\n  parseNormals(tile, featureTable);\n\n  return byteOffset;\n}\n\nfunction initializeTile(tile) {\n  // Initialize point cloud tile defaults\n  tile.attributes = {\n    positions: null,\n    colors: null,\n    normals: null,\n    batchIds: null\n  };\n  tile.isQuantized = false;\n  tile.isTranslucent = false;\n  tile.isRGB565 = false;\n  tile.isOctEncoded16P = false;\n}\n\nfunction parsePointCloudTables(tile) {\n  const featureTable = new Tile3DFeatureTable(tile.featureTableJson, tile.featureTableBinary);\n\n  const pointsLength = featureTable.getGlobalProperty('POINTS_LENGTH');\n  if (!Number.isFinite(pointsLength)) {\n    throw new Error('POINTS_LENGTH must be defined');\n  }\n  featureTable.featuresLength = pointsLength;\n\n  tile.featuresLength = pointsLength;\n  tile.pointsLength = pointsLength;\n  tile.pointCount = pointsLength;\n\n  tile.rtcCenter = featureTable.getGlobalProperty('RTC_CENTER', GL.FLOAT, 3);\n\n  const batchTable = parseBatchIds(tile, featureTable);\n\n  return {featureTable, batchTable};\n}\n\nfunction parsePositions(tile, featureTable, options) {\n  if (!tile.attributes.positions) {\n    if (featureTable.hasProperty('POSITION')) {\n      tile.attributes.positions = featureTable.getPropertyArray('POSITION', GL.FLOAT, 3);\n    } else if (featureTable.hasProperty('POSITION_QUANTIZED')) {\n      const positions = featureTable.getPropertyArray('POSITION_QUANTIZED', GL.UNSIGNED_SHORT, 3);\n\n      tile.isQuantized = true;\n      tile.quantizedRange = (1 << 16) - 1;\n\n      tile.quantizedVolumeScale = featureTable.getGlobalProperty(\n        'QUANTIZED_VOLUME_SCALE',\n        GL.FLOAT,\n        3\n      );\n      if (!tile.quantizedVolumeScale) {\n        throw new Error('QUANTIZED_VOLUME_SCALE must be defined for quantized positions.');\n      }\n\n      tile.quantizedVolumeOffset = featureTable.getGlobalProperty(\n        'QUANTIZED_VOLUME_OFFSET',\n        GL.FLOAT,\n        3\n      );\n      if (!tile.quantizedVolumeOffset) {\n        throw new Error('QUANTIZED_VOLUME_OFFSET must be defined for quantized positions.');\n      }\n\n      tile.attributes.positions = normalize3DTilePositionAttribute(tile, positions, options);\n    }\n  }\n\n  if (!tile.attributes.positions) {\n    throw new Error('Either POSITION or POSITION_QUANTIZED must be defined.');\n  }\n}\n\nfunction parseColors(tile, featureTable, batchTable) {\n  if (!tile.attributes.colors) {\n    let colors = null;\n    if (featureTable.hasProperty('RGBA')) {\n      colors = featureTable.getPropertyArray('RGBA', GL.UNSIGNED_BYTE, 4);\n      tile.isTranslucent = true;\n    } else if (featureTable.hasProperty('RGB')) {\n      colors = featureTable.getPropertyArray('RGB', GL.UNSIGNED_BYTE, 3);\n    } else if (featureTable.hasProperty('RGB565')) {\n      colors = featureTable.getPropertyArray('RGB565', GL.UNSIGNED_SHORT, 1);\n      tile.isRGB565 = true;\n    }\n\n    tile.attributes.colors = normalize3DTileColorAttribute(tile, colors, batchTable);\n  }\n\n  if (featureTable.hasProperty('CONSTANT_RGBA')) {\n    tile.constantRGBA = featureTable.getGlobalProperty('CONSTANT_RGBA', GL.UNSIGNED_BYTE, 4);\n  }\n}\n\nfunction parseNormals(tile, featureTable) {\n  if (!tile.attributes.normals) {\n    let normals = null;\n    if (featureTable.hasProperty('NORMAL')) {\n      normals = featureTable.getPropertyArray('NORMAL', GL.FLOAT, 3);\n    } else if (featureTable.hasProperty('NORMAL_OCT16P')) {\n      normals = featureTable.getPropertyArray('NORMAL_OCT16P', GL.UNSIGNED_BYTE, 2);\n      tile.isOctEncoded16P = true;\n    }\n\n    tile.attributes.normals = normalize3DTileNormalAttribute(tile, normals);\n  }\n}\n\nfunction parseBatchIds(tile, featureTable) {\n  let batchTable: Tile3DBatchTable | null = null;\n  if (!tile.batchIds && featureTable.hasProperty('BATCH_ID')) {\n    tile.batchIds = featureTable.getPropertyArray('BATCH_ID', GL.UNSIGNED_SHORT, 1);\n\n    if (tile.batchIds) {\n      const batchFeatureLength = featureTable.getGlobalProperty('BATCH_LENGTH');\n      if (!batchFeatureLength) {\n        throw new Error('Global property: BATCH_LENGTH must be defined when BATCH_ID is defined.');\n      }\n      const {batchTableJson, batchTableBinary} = tile;\n      batchTable = new Tile3DBatchTable(batchTableJson, batchTableBinary, batchFeatureLength);\n    }\n  }\n  return batchTable;\n}\n\n// eslint-disable-next-line complexity\nasync function parseDraco(tile, featureTable, batchTable, options, context) {\n  let dracoBuffer;\n  let dracoFeatureTableProperties;\n  let dracoBatchTableProperties;\n  const batchTableDraco =\n    tile.batchTableJson &&\n    tile.batchTableJson.extensions &&\n    tile.batchTableJson.extensions['3DTILES_draco_point_compression'];\n  if (batchTableDraco) {\n    dracoBatchTableProperties = batchTableDraco.properties;\n  }\n\n  const featureTableDraco = featureTable.getExtension('3DTILES_draco_point_compression');\n  if (featureTableDraco) {\n    dracoFeatureTableProperties = featureTableDraco.properties;\n    const dracoByteOffset = featureTableDraco.byteOffset;\n    const dracoByteLength = featureTableDraco.byteLength;\n    if (!dracoFeatureTableProperties || !Number.isFinite(dracoByteOffset) || !dracoByteLength) {\n      throw new Error('Draco properties, byteOffset, and byteLength must be defined');\n    }\n\n    dracoBuffer = tile.featureTableBinary.slice(dracoByteOffset, dracoByteOffset + dracoByteLength);\n\n    tile.hasPositions = Number.isFinite(dracoFeatureTableProperties.POSITION);\n    tile.hasColors =\n      Number.isFinite(dracoFeatureTableProperties.RGB) ||\n      Number.isFinite(dracoFeatureTableProperties.RGBA);\n    tile.hasNormals = Number.isFinite(dracoFeatureTableProperties.NORMAL);\n    tile.hasBatchIds = Number.isFinite(dracoFeatureTableProperties.BATCH_ID);\n    tile.isTranslucent = Number.isFinite(dracoFeatureTableProperties.RGBA);\n  }\n\n  if (!dracoBuffer) {\n    return true;\n  }\n\n  const dracoData = {\n    buffer: dracoBuffer,\n    properties: {...dracoFeatureTableProperties, ...dracoBatchTableProperties},\n    featureTableProperties: dracoFeatureTableProperties,\n    batchTableProperties: dracoBatchTableProperties,\n    dequantizeInShader: false\n  };\n\n  return await loadDraco(tile, dracoData, options, context);\n}\n\n// eslint-disable-next-line complexity, max-statements\nexport async function loadDraco(tile, dracoData, options, context) {\n  const {parse} = context;\n  const dracoOptions = {\n    ...options,\n    draco: {\n      ...options.draco,\n      extraAttributes: dracoData.batchTableProperties || {}\n    }\n  };\n\n  // The entire tileset might be included, too expensive to serialize\n  delete dracoOptions['3d-tiles'];\n\n  const data = await parse(dracoData.buffer, DracoLoader, dracoOptions);\n\n  const decodedPositions = data.attributes.POSITION && data.attributes.POSITION.value;\n  const decodedColors = data.attributes.COLOR_0 && data.attributes.COLOR_0.value;\n  const decodedNormals = data.attributes.NORMAL && data.attributes.NORMAL.value;\n  const decodedBatchIds = data.attributes.BATCH_ID && data.attributes.BATCH_ID.value;\n  const isQuantizedDraco = decodedPositions && data.attributes.POSITION.value.quantization;\n  const isOctEncodedDraco = decodedNormals && data.attributes.NORMAL.value.quantization;\n  if (isQuantizedDraco) {\n    // Draco quantization range == quantized volume scale - size in meters of the quantized volume\n    // Internal quantized range is the range of values of the quantized data, e.g. 255 for 8-bit, 1023 for 10-bit, etc\n    const quantization = data.POSITION.data.quantization;\n    const range = quantization.range;\n    tile.quantizedVolumeScale = new Vector3(range, range, range);\n    tile.quantizedVolumeOffset = new Vector3(quantization.minValues);\n    tile.quantizedRange = (1 << quantization.quantizationBits) - 1.0;\n    tile.isQuantizedDraco = true;\n  }\n  if (isOctEncodedDraco) {\n    tile.octEncodedRange = (1 << data.NORMAL.data.quantization.quantizationBits) - 1.0;\n    tile.isOctEncodedDraco = true;\n  }\n\n  // Extra batch table attributes\n  const batchTableAttributes = {};\n  if (dracoData.batchTableProperties) {\n    for (const attributeName of Object.keys(dracoData.batchTableProperties)) {\n      if (data.attributes[attributeName] && data.attributes[attributeName].value) {\n        batchTableAttributes[attributeName.toLowerCase()] = data.attributes[attributeName].value;\n      }\n    }\n  }\n\n  tile.attributes = {\n    positions: decodedPositions,\n    colors: normalize3DTileColorAttribute(tile, decodedColors, undefined),\n    normals: decodedNormals,\n    batchIds: decodedBatchIds,\n    ...batchTableAttributes\n  };\n}\n\n// TODO - this is the remaining code from Cesium's parser\n/*\n  const batchTable = new Tile3DBatchTable(tile);\n\n  // parseDracoBuffer(tile, featureTable, batchTable);\n\n  if (!tile.attributes.positions) {\n    throw new Error('Either POSITION or POSITION_QUANTIZED must be defined.');\n  }\n}\n/*\n\n  if (!tile.attributes.positions) {\n    if (featureTable.hasProperty('POSITION')) {\n      tile.attributes.positions = featureTable.getPropertyArray('POSITION', GL.FLOAT, 3);\n    } else if (featureTable.hasProperty('POSITION_QUANTIZED')) {\n      tile.attributes.positions = featureTable.getPropertyArray('POSITION_QUANTIZED', GL.UNSIGNED_SHORT, 3);\n\n\n  if (!tile.colors) {\n    if (featureTable.hasProperty('RGBA')) {\n      tile.colors = featureTable.getPropertyArray('RGBA', GL.UNSIGNED_BYTE, 4);\n      tile.isTranslucent = true;\n    } else if (featureTable.hasProperty('RGB')) {\n      tile.colors = featureTable.getPropertyArray('RGB', GL.UNSIGNED_BYTE, 3);\n    } else if (featureTable.hasPropertry('RGB565')) {\n      tile.colors = featureTable.getPropertyArray('RGB565', GL.UNSIGNED_SHORT, 1);\n      tile.isRGB565 = true;\n    }\n  }\n\n  if (!tile.attributes.normals) {\n    if (featureTable.getPropertry('NORMAL')) {\n      tile.attributes.normals = featureTable.getPropertyArray('NORMAL', GL.FLOAT, 3);\n    } else if (featureTable.getProperty('NORMAL_OCT16P')) {\n      tile.attributes.normals = featureTable.getPropertyArray('NORMAL_OCT16P', GL.UNSIGNED_BYTE, 2);\n      tile.isOctEncoded16P = true;\n    }\n  }\n\n  if (!tile.batchIds) {\n    if (featureTable.hasProperty('BATCH_ID')) {\n      tile.batchIds = featureTable.getPropertyArray('BATCH_ID', GL.UNSIGNED_SHORT, 1);\n    }\n  }\n\n  if (!tile.attributes.positions) {\n    throw new Error('Either POSITION or POSITION_QUANTIZED must be defined.');\n  }\n\n  if (featureTable.getPropertry('CONSTANT_RGBA')) {\n    tile.constantRGBA = featureTable.getGlobalProperty('CONSTANT_RGBA', GL.UNSIGNED_BYTE, 4);\n  }\n\n  if (tile.batchIds) {\n    const batchLength = featureTable.getGlobalProperty('BATCH_LENGTH');\n    if (!defined(batchLength)) {\n      throw new Error('Global property: BATCH_LENGTH must be defined when BATCH_ID is defined.');\n    }\n\n    if (defined(batchTableBinary)) {\n      // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n      batchTableBinary = new Uint8Array(batchTableBinary);\n    }\n\n    if (defined(pointCloud._batchTableLoaded)) {\n      pointCloud._batchTableLoaded(batchLength, batchTableJson, batchTableBinary);\n    }\n  }\n\n  // If points are not batched and there are per-point properties, use these properties for styling purposes\n  var styleableProperties;\n  if (!hasBatchIds && defined(batchTableBinary)) {\n    tile.styleableProperties = Cesium3DTileBatchTable.getBinaryProperties(\n      pointsLength,\n      batchTableJson,\n      batchTableBinary\n    );\n  }\n\n  tile.draco = draco;\n}\n\n// Separate parsing and decoding of Draco\nexport function parseDracoBuffer(tile, featureTable, batchTable) {\n  let dracoBuffer;\n  let dracoFeatureTableProperties;\n  let dracoBatchTableProperties;\n\n  const batchTableDraco = batchTable.getExtension('3DTILES_draco_point_compression');\n  if (batchTableDraco) {\n    dracoBatchTableProperties = batchTableDraco.properties;\n  }\n\n  const featureTableDraco = featureTable.getExtension('3DTILES_draco_point_compression');\n  if (featureTableDraco) {\n    dracoFeatureTableProperties = featureTableDraco.properties;\n    const dracoByteOffset = featureTableDraco.byteOffset;\n    const dracoByteLength = featureTableDraco.byteLength;\n    if (!dracoFeatureTableProperties || !dracoByteOffset || !dracoByteLength) {\n      throw new Error('Draco properties, byteOffset, and byteLength must be defined');\n    }\n\n    dracoBuffer = arraySlice(\n      featureTableBinary,\n      dracoByteOffset,\n      dracoByteOffset + dracoByteLength\n    );\n    tile.hasPositions = dracoFeatureTableProperties.POSITION;\n    tile.hasColors = dracoFeatureTableProperties.RGB || dracoFeatureTableProperties.RGBA;\n    tile.hasNormals = dracoFeatureTableProperties.NORMAL;\n    tile.hasBatchIds = dracoFeatureTableProperties.BATCH_ID;\n    tile.isTranslucent = dracoFeatureTableProperties.RGBA;\n  }\n\n  if (dracoBuffer) {\n    tile.draco = {\n      buffer: dracoBuffer,\n      properties: {...dracoFeatureTableProperties, ...dracoBatchTableProperties},\n      featureTableProperties: dracoFeatureTableProperties,\n      batchTableProperties: dracoBatchTableProperties,\n      dequantizeInShader: false\n    };\n\n    tile.decodingState = DECODING_STATE.NEEDS_DECODE;\n  }\n}\n\n/*\nfunction decodeDraco(tile, context) {\n  if (tile.decodingState === DECODING_STATE.READY) {\n    return false;\n  }\n  if (tile.decodingState === DECODING_STATE.NEEDS_DECODE) {\n    var parsedContent = tile._parsedContent;\n    var draco = parsedContent.draco;\n    var decodePromise = DracoLoader.decodePointCloud(draco, context);\n    if (defined(decodePromise)) {\n      tile.decodingState = DECODING_STATE.DECODING;\n      decodePromise.then(function(result) {\n        tile.decodingState = DECODING_STATE.READY;\n        var decodedPositions = defined(result.POSITION) ? result.POSITION.array : undefined;\n        var decodedRgb = defined(result.RGB) ? result.RGB.array : undefined;\n        var decodedRgba = defined(result.RGBA) ? result.RGBA.array : undefined;\n        var decodedNormals = defined(result.NORMAL) ? result.NORMAL.array : undefined;\n        var decodedBatchIds = defined(result.BATCH_ID) ? result.BATCH_ID.array : undefined;\n        var isQuantizedDraco = defined(decodedPositions) && defined(result.POSITION.data.quantization);\n        var isOctEncodedDraco = defined(decodedNormals) && defined(result.NORMAL.data.quantization);\n        if (isQuantizedDraco) {\n          // Draco quantization range == quantized volume scale - size in meters of the quantized volume\n          // Internal quantized range is the range of values of the quantized data, e.g. 255 for 8-bit, 1023 for 10-bit, etc\n          var quantization = result.POSITION.data.quantization;\n          var range = quantization.range;\n          tile._quantizedVolumeScale = Cartesian3.fromElements(range, range, range);\n          tile._quantizedVolumeOffset = Cartesian3.unpack(quantization.minValues);\n          tile._quantizedRange = (1 << quantization.quantizationBits) - 1.0;\n          tile._isQuantizedDraco = true;\n        }\n        if (isOctEncodedDraco) {\n          tile._octEncodedRange = (1 << result.NORMAL.data.quantization.quantizationBits) - 1.0;\n          tile._isOctEncodedDraco = true;\n        }\n        var styleableProperties = parsedContent.styleableProperties;\n        var batchTableProperties = draco.batchTableProperties;\n        for (var name in batchTableProperties) {\n          if (batchTableProperties.hasOwnProperty(name)) {\n            var property = result[name];\n            if (!defined(styleableProperties)) {\n              styleableProperties = {};\n            }\n            styleableProperties[name] = {\n              typedArray : property.array,\n              componentCount : property.data.componentsPerAttribute\n            };\n          }\n        }\n        parsedContent.positions = defaultValue(decodedPositions, parsedContent.positions);\n        parsedContent.colors = defaultValue(defaultValue(decodedRgba, decodedRgb), parsedContent.colors);\n        parsedContent.normals = defaultValue(decodedNormals, parsedContent.normals);\n        parsedContent.batchIds = defaultValue(decodedBatchIds, parsedContent.batchIds);\n        parsedContent.styleableProperties = styleableProperties;\n      }).otherwise(function(error) {\n        tile.decodingState = DECODING_STATE.FAILED;\n        tile._readyPromise.reject(error);\n      });\n    }\n  }\n  return true;\n}\n*/\n"]},"metadata":{},"sourceType":"module"}