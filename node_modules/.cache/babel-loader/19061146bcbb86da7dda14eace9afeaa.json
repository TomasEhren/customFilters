{"ast":null,"code":"import _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Matrix4 } from '@math.gl/core';\nimport Viewport from './viewport';\nimport { PROJECTION_MODE } from '../lib/constants';\nimport * as vec3 from 'gl-matrix/vec3';\nimport * as vec4 from 'gl-matrix/vec4';\nvar DEGREES_TO_RADIANS = Math.PI / 180;\nvar RADIANS_TO_DEGREES = 180 / Math.PI;\nvar EARTH_RADIUS = 6370972;\nvar GLOBE_RADIUS = 256;\n\nfunction getDistanceScales() {\n  var unitsPerMeter = GLOBE_RADIUS / EARTH_RADIUS;\n  var unitsPerDegree = Math.PI / 180 * GLOBE_RADIUS;\n  return {\n    unitsPerMeter: [unitsPerMeter, unitsPerMeter, unitsPerMeter],\n    unitsPerMeter2: [0, 0, 0],\n    metersPerUnit: [1 / unitsPerMeter, 1 / unitsPerMeter, 1 / unitsPerMeter],\n    unitsPerDegree: [unitsPerDegree, unitsPerDegree, unitsPerMeter],\n    unitsPerDegree2: [0, 0, 0],\n    degreesPerUnit: [1 / unitsPerDegree, 1 / unitsPerDegree, 1 / unitsPerMeter]\n  };\n}\n\nvar GlobeViewport = /*#__PURE__*/function (_Viewport) {\n  _inherits(GlobeViewport, _Viewport);\n\n  var _super = _createSuper(GlobeViewport);\n\n  function GlobeViewport() {\n    var _this;\n\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, GlobeViewport);\n\n    var _opts$latitude = opts.latitude,\n        latitude = _opts$latitude === void 0 ? 0 : _opts$latitude,\n        _opts$longitude = opts.longitude,\n        longitude = _opts$longitude === void 0 ? 0 : _opts$longitude,\n        _opts$zoom = opts.zoom,\n        zoom = _opts$zoom === void 0 ? 11 : _opts$zoom,\n        _opts$nearZMultiplier = opts.nearZMultiplier,\n        nearZMultiplier = _opts$nearZMultiplier === void 0 ? 0.1 : _opts$nearZMultiplier,\n        _opts$farZMultiplier = opts.farZMultiplier,\n        farZMultiplier = _opts$farZMultiplier === void 0 ? 2 : _opts$farZMultiplier,\n        _opts$resolution = opts.resolution,\n        resolution = _opts$resolution === void 0 ? 10 : _opts$resolution;\n    var width = opts.width,\n        height = opts.height,\n        _opts$altitude = opts.altitude,\n        altitude = _opts$altitude === void 0 ? 1.5 : _opts$altitude;\n    width = width || 1;\n    height = height || 1;\n    altitude = Math.max(0.75, altitude);\n    var viewMatrix = new Matrix4().lookAt({\n      eye: [0, -altitude, 0],\n      up: [0, 0, 1]\n    });\n    var scale = Math.pow(2, zoom);\n    viewMatrix.rotateX(latitude * DEGREES_TO_RADIANS);\n    viewMatrix.rotateZ(-longitude * DEGREES_TO_RADIANS);\n    viewMatrix.scale(scale / height);\n    var halfFov = Math.atan(0.5 / altitude);\n    var relativeScale = GLOBE_RADIUS * 2 * scale / height;\n    _this = _super.call(this, _objectSpread(_objectSpread({}, opts), {}, {\n      width: width,\n      height: height,\n      viewMatrix: viewMatrix,\n      longitude: longitude,\n      latitude: latitude,\n      zoom: zoom,\n      fovyRadians: halfFov * 2,\n      aspect: width / height,\n      focalDistance: altitude,\n      near: nearZMultiplier,\n      far: Math.min(2, 1 / relativeScale + 1) * altitude * farZMultiplier\n    }));\n    _this.resolution = resolution;\n    _this.distanceScales = getDistanceScales();\n    return _this;\n  }\n\n  _createClass(GlobeViewport, [{\n    key: \"projectionMode\",\n    get: function get() {\n      return PROJECTION_MODE.GLOBE;\n    }\n  }, {\n    key: \"getDistanceScales\",\n    value: function getDistanceScales() {\n      return this.distanceScales;\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var unprojectOption = {\n        targetZ: options.z || 0\n      };\n      var left = this.unproject([0, this.height / 2], unprojectOption);\n      var top = this.unproject([this.width / 2, 0], unprojectOption);\n      var right = this.unproject([this.width, this.height / 2], unprojectOption);\n      var bottom = this.unproject([this.width / 2, this.height], unprojectOption);\n      if (right[0] < this.longitude) right[0] += 360;\n      if (left[0] > this.longitude) left[0] -= 360;\n      return [Math.min(left[0], right[0], top[0], bottom[0]), Math.min(left[1], right[1], top[1], bottom[1]), Math.max(left[0], right[0], top[0], bottom[0]), Math.max(left[1], right[1], top[1], bottom[1])];\n    }\n  }, {\n    key: \"unproject\",\n    value: function unproject(xyz) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$topLeft = _ref.topLeft,\n          topLeft = _ref$topLeft === void 0 ? true : _ref$topLeft,\n          targetZ = _ref.targetZ;\n\n      var _xyz = _slicedToArray(xyz, 3),\n          x = _xyz[0],\n          y = _xyz[1],\n          z = _xyz[2];\n\n      var y2 = topLeft ? y : this.height - y;\n      var pixelUnprojectionMatrix = this.pixelUnprojectionMatrix;\n      var coord;\n\n      if (Number.isFinite(z)) {\n        coord = transformVector(pixelUnprojectionMatrix, [x, y2, z, 1]);\n      } else {\n        var coord0 = transformVector(pixelUnprojectionMatrix, [x, y2, -1, 1]);\n        var coord1 = transformVector(pixelUnprojectionMatrix, [x, y2, 1, 1]);\n        var lt = ((targetZ || 0) / EARTH_RADIUS + 1) * GLOBE_RADIUS;\n        var lSqr = vec3.sqrLen(vec3.sub([], coord0, coord1));\n        var l0Sqr = vec3.sqrLen(coord0);\n        var l1Sqr = vec3.sqrLen(coord1);\n        var sSqr = (4 * l0Sqr * l1Sqr - Math.pow(lSqr - l0Sqr - l1Sqr, 2)) / 16;\n        var dSqr = 4 * sSqr / lSqr;\n        var r0 = Math.sqrt(l0Sqr - dSqr);\n        var dr = Math.sqrt(Math.max(0, lt * lt - dSqr));\n        var t = (r0 - dr) / Math.sqrt(lSqr);\n        coord = vec3.lerp([], coord0, coord1, t);\n      }\n\n      var _this$unprojectPositi = this.unprojectPosition(coord),\n          _this$unprojectPositi2 = _slicedToArray(_this$unprojectPositi, 3),\n          X = _this$unprojectPositi2[0],\n          Y = _this$unprojectPositi2[1],\n          Z = _this$unprojectPositi2[2];\n\n      if (Number.isFinite(z)) {\n        return [X, Y, Z];\n      }\n\n      return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n    }\n  }, {\n    key: \"projectPosition\",\n    value: function projectPosition(xyz) {\n      var _xyz2 = _slicedToArray(xyz, 3),\n          lng = _xyz2[0],\n          lat = _xyz2[1],\n          _xyz2$ = _xyz2[2],\n          Z = _xyz2$ === void 0 ? 0 : _xyz2$;\n\n      var lambda = lng * DEGREES_TO_RADIANS;\n      var phi = lat * DEGREES_TO_RADIANS;\n      var cosPhi = Math.cos(phi);\n      var D = (Z / EARTH_RADIUS + 1) * GLOBE_RADIUS;\n      return [Math.sin(lambda) * cosPhi * D, -Math.cos(lambda) * cosPhi * D, Math.sin(phi) * D];\n    }\n  }, {\n    key: \"unprojectPosition\",\n    value: function unprojectPosition(xyz) {\n      var _xyz3 = _slicedToArray(xyz, 3),\n          x = _xyz3[0],\n          y = _xyz3[1],\n          z = _xyz3[2];\n\n      var D = vec3.len(xyz);\n      var phi = Math.asin(z / D);\n      var lambda = Math.atan2(x, -y);\n      var lng = lambda * RADIANS_TO_DEGREES;\n      var lat = phi * RADIANS_TO_DEGREES;\n      var Z = (D / GLOBE_RADIUS - 1) * EARTH_RADIUS;\n      return [lng, lat, Z];\n    }\n  }, {\n    key: \"projectFlat\",\n    value: function projectFlat(xyz) {\n      return xyz;\n    }\n  }, {\n    key: \"unprojectFlat\",\n    value: function unprojectFlat(xyz) {\n      return xyz;\n    }\n  }, {\n    key: \"panByPosition\",\n    value: function panByPosition(coords, pixel) {\n      var fromPosition = this.unproject(pixel);\n      return {\n        longitude: coords[0] - fromPosition[0] + this.longitude,\n        latitude: coords[1] - fromPosition[1] + this.latitude\n      };\n    }\n  }]);\n\n  return GlobeViewport;\n}(Viewport);\n\nexport { GlobeViewport as default };\n\nfunction transformVector(matrix, vector) {\n  var result = vec4.transformMat4([], vector, matrix);\n  vec4.scale(result, result, 1 / result[3]);\n  return result;\n}","map":{"version":3,"mappings":"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","names":["Matrix4","Viewport","PROJECTION_MODE","vec3","vec4","DEGREES_TO_RADIANS","Math","PI","RADIANS_TO_DEGREES","EARTH_RADIUS","GLOBE_RADIUS","getDistanceScales","unitsPerMeter","unitsPerDegree","unitsPerMeter2","metersPerUnit","unitsPerDegree2","degreesPerUnit","GlobeViewport","constructor","opts","latitude","longitude","zoom","nearZMultiplier","farZMultiplier","resolution","width","height","altitude","max","viewMatrix","lookAt","eye","up","scale","pow","rotateX","rotateZ","halfFov","atan","relativeScale","fovyRadians","aspect","focalDistance","near","far","min","distanceScales","GLOBE","getBounds","options","unprojectOption","targetZ","z","left","unproject","top","right","bottom","xyz","topLeft","x","y","y2","pixelUnprojectionMatrix","coord","Number","isFinite","transformVector","coord0","coord1","lt","lSqr","sqrLen","sub","l0Sqr","l1Sqr","sSqr","dSqr","r0","sqrt","dr","t","lerp","unprojectPosition","X","Y","Z","projectPosition","lng","lat","lambda","phi","cosPhi","cos","D","sin","len","asin","atan2","projectFlat","unprojectFlat","panByPosition","coords","pixel","fromPosition","matrix","vector","result","transformMat4"],"sources":["../../../src/viewports/globe-viewport.js"],"sourcesContent":["import {Matrix4} from '@math.gl/core';\nimport Viewport from './viewport';\nimport {PROJECTION_MODE} from '../lib/constants';\n\nimport * as vec3 from 'gl-matrix/vec3';\nimport * as vec4 from 'gl-matrix/vec4';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\nconst RADIANS_TO_DEGREES = 180 / Math.PI;\nconst EARTH_RADIUS = 6370972;\nconst GLOBE_RADIUS = 256;\n\nfunction getDistanceScales() {\n  const unitsPerMeter = GLOBE_RADIUS / EARTH_RADIUS;\n  const unitsPerDegree = (Math.PI / 180) * GLOBE_RADIUS;\n\n  return {\n    unitsPerMeter: [unitsPerMeter, unitsPerMeter, unitsPerMeter],\n    unitsPerMeter2: [0, 0, 0],\n    metersPerUnit: [1 / unitsPerMeter, 1 / unitsPerMeter, 1 / unitsPerMeter],\n    unitsPerDegree: [unitsPerDegree, unitsPerDegree, unitsPerMeter],\n    unitsPerDegree2: [0, 0, 0],\n    degreesPerUnit: [1 / unitsPerDegree, 1 / unitsPerDegree, 1 / unitsPerMeter]\n  };\n}\n\nexport default class GlobeViewport extends Viewport {\n  constructor(opts = {}) {\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 11,\n      nearZMultiplier = 0.1,\n      farZMultiplier = 2,\n      resolution = 10\n    } = opts;\n\n    let {width, height, altitude = 1.5} = opts;\n\n    width = width || 1;\n    height = height || 1;\n    altitude = Math.max(0.75, altitude);\n\n    // Calculate view matrix\n    const viewMatrix = new Matrix4().lookAt({eye: [0, -altitude, 0], up: [0, 0, 1]});\n    const scale = Math.pow(2, zoom);\n    viewMatrix.rotateX(latitude * DEGREES_TO_RADIANS);\n    viewMatrix.rotateZ(-longitude * DEGREES_TO_RADIANS);\n    viewMatrix.scale(scale / height);\n\n    const halfFov = Math.atan(0.5 / altitude);\n    const relativeScale = (GLOBE_RADIUS * 2 * scale) / height;\n\n    super({\n      ...opts,\n      // x, y,\n      width,\n      height,\n\n      // view matrix\n      viewMatrix,\n      longitude,\n      latitude,\n      zoom,\n\n      // projection matrix parameters\n      fovyRadians: halfFov * 2,\n      aspect: width / height,\n      focalDistance: altitude,\n      near: nearZMultiplier,\n      far: Math.min(2, 1 / relativeScale + 1) * altitude * farZMultiplier\n    });\n\n    this.resolution = resolution;\n    this.distanceScales = getDistanceScales();\n  }\n\n  get projectionMode() {\n    return PROJECTION_MODE.GLOBE;\n  }\n\n  getDistanceScales() {\n    return this.distanceScales;\n  }\n\n  getBounds(options = {}) {\n    const unprojectOption = {targetZ: options.z || 0};\n\n    const left = this.unproject([0, this.height / 2], unprojectOption);\n    const top = this.unproject([this.width / 2, 0], unprojectOption);\n    const right = this.unproject([this.width, this.height / 2], unprojectOption);\n    const bottom = this.unproject([this.width / 2, this.height], unprojectOption);\n\n    if (right[0] < this.longitude) right[0] += 360;\n    if (left[0] > this.longitude) left[0] -= 360;\n\n    return [\n      Math.min(left[0], right[0], top[0], bottom[0]),\n      Math.min(left[1], right[1], top[1], bottom[1]),\n      Math.max(left[0], right[0], top[0], bottom[0]),\n      Math.max(left[1], right[1], top[1], bottom[1])\n    ];\n  }\n\n  unproject(xyz, {topLeft = true, targetZ} = {}) {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const {pixelUnprojectionMatrix} = this;\n\n    let coord;\n    if (Number.isFinite(z)) {\n      // Has depth component\n      coord = transformVector(pixelUnprojectionMatrix, [x, y2, z, 1]);\n    } else {\n      // since we don't know the correct projected z value for the point,\n      // unproject two points to get a line and then find the point on that line that intersects with the sphere\n      const coord0 = transformVector(pixelUnprojectionMatrix, [x, y2, -1, 1]);\n      const coord1 = transformVector(pixelUnprojectionMatrix, [x, y2, 1, 1]);\n\n      const lt = ((targetZ || 0) / EARTH_RADIUS + 1) * GLOBE_RADIUS;\n      const lSqr = vec3.sqrLen(vec3.sub([], coord0, coord1));\n      const l0Sqr = vec3.sqrLen(coord0);\n      const l1Sqr = vec3.sqrLen(coord1);\n      const sSqr = (4 * l0Sqr * l1Sqr - (lSqr - l0Sqr - l1Sqr) ** 2) / 16;\n      const dSqr = (4 * sSqr) / lSqr;\n      const r0 = Math.sqrt(l0Sqr - dSqr);\n      const dr = Math.sqrt(Math.max(0, lt * lt - dSqr));\n      const t = (r0 - dr) / Math.sqrt(lSqr);\n\n      coord = vec3.lerp([], coord0, coord1, t);\n    }\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n\n  projectPosition(xyz) {\n    const [lng, lat, Z = 0] = xyz;\n    const lambda = lng * DEGREES_TO_RADIANS;\n    const phi = lat * DEGREES_TO_RADIANS;\n    const cosPhi = Math.cos(phi);\n    const D = (Z / EARTH_RADIUS + 1) * GLOBE_RADIUS;\n\n    return [Math.sin(lambda) * cosPhi * D, -Math.cos(lambda) * cosPhi * D, Math.sin(phi) * D];\n  }\n\n  unprojectPosition(xyz) {\n    const [x, y, z] = xyz;\n    const D = vec3.len(xyz);\n    const phi = Math.asin(z / D);\n    const lambda = Math.atan2(x, -y);\n\n    const lng = lambda * RADIANS_TO_DEGREES;\n    const lat = phi * RADIANS_TO_DEGREES;\n    const Z = (D / GLOBE_RADIUS - 1) * EARTH_RADIUS;\n    return [lng, lat, Z];\n  }\n\n  projectFlat(xyz) {\n    return xyz;\n  }\n\n  unprojectFlat(xyz) {\n    return xyz;\n  }\n\n  panByPosition(coords, pixel) {\n    const fromPosition = this.unproject(pixel);\n    return {\n      longitude: coords[0] - fromPosition[0] + this.longitude,\n      latitude: coords[1] - fromPosition[1] + this.latitude\n    };\n  }\n}\n\nfunction transformVector(matrix, vector) {\n  const result = vec4.transformMat4([], vector, matrix);\n  vec4.scale(result, result, 1 / result[3]);\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}