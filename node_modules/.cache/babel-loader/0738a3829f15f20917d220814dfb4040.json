{"ast":null,"code":"import { DracoLoader as DracoWorkerLoader } from './draco-loader';\nimport DracoParser from './lib/draco-parser';\nimport { loadDracoDecoderModule } from './lib/draco-module-loader';\nexport { DracoWriter } from './draco-writer';\nexport { DracoWorkerLoader };\nexport const DracoLoader = { ...DracoWorkerLoader,\n  parse\n};\n\nasync function parse(arrayBuffer, options) {\n  const {\n    draco\n  } = await loadDracoDecoderModule(options);\n  const dracoParser = new DracoParser(draco);\n\n  try {\n    return dracoParser.parseSync(arrayBuffer, options === null || options === void 0 ? void 0 : options.draco);\n  } finally {\n    dracoParser.destroy();\n  }\n}\n\nexport const _TypecheckDracoLoader = DracoLoader;","map":{"version":3,"mappings":"AAGA,SAAQA,WAAW,IAAIC,iBAAvB,QAA+C,gBAA/C;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,SAAQC,sBAAR,QAAqC,2BAArC;AASA,SAAQC,WAAR,QAA0B,gBAA1B;AAKA,SAAQH,iBAAR;AAKA,OAAO,MAAMD,WAAW,GAAG,EACzB,GAAGC,iBADsB;EAEzBI;AAFyB,CAApB;;AAKP,eAAeA,KAAf,CAAqBC,WAArB,EAA+CC,OAA/C,EAAiG;EAC/F,MAAM;IAACC;EAAD,IAAU,MAAML,sBAAsB,CAACI,OAAD,CAA5C;EACA,MAAME,WAAW,GAAG,IAAIP,WAAJ,CAAgBM,KAAhB,CAApB;;EACA,IAAI;IACF,OAAOC,WAAW,CAACC,SAAZD,CAAsBH,WAAtBG,EAAmCF,OAAnC,SAAmCA,WAAnC,WAAmCA,GAAnC,MAAmCA,UAAO,CAAEC,KAA5CC,CAAP;EADF,UAEU;IACRA,WAAW,CAACE,OAAZF;EACD;AACF;;AAGD,OAAO,MAAMG,qBAAuC,GAAGZ,WAAhD","names":["DracoLoader","DracoWorkerLoader","DracoParser","loadDracoDecoderModule","DracoWriter","parse","arrayBuffer","options","draco","dracoParser","parseSync","destroy","_TypecheckDracoLoader"],"sources":["../../src/index.ts"],"sourcesContent":["import type {LoaderWithParser} from '@loaders.gl/loader-utils';\nimport type {DracoMesh, DracoLoaderData} from './lib/draco-types';\nimport type {DracoLoaderOptions} from './draco-loader';\nimport {DracoLoader as DracoWorkerLoader} from './draco-loader';\nimport DracoParser from './lib/draco-parser';\nimport {loadDracoDecoderModule} from './lib/draco-module-loader';\n\n// Draco data types\n\nexport type {DracoMesh, DracoLoaderData};\n\n// Draco Writer\n\nexport type {DracoWriterOptions} from './draco-writer';\nexport {DracoWriter} from './draco-writer';\n\n// Draco Loader\n\nexport type {DracoLoaderOptions};\nexport {DracoWorkerLoader};\n\n/**\n * Loader for Draco3D compressed geometries\n */\nexport const DracoLoader = {\n  ...DracoWorkerLoader,\n  parse\n};\n\nasync function parse(arrayBuffer: ArrayBuffer, options?: DracoLoaderOptions): Promise<DracoMesh> {\n  const {draco} = await loadDracoDecoderModule(options);\n  const dracoParser = new DracoParser(draco);\n  try {\n    return dracoParser.parseSync(arrayBuffer, options?.draco);\n  } finally {\n    dracoParser.destroy();\n  }\n}\n\n// TYPE TESTS - TODO find a better way than exporting junk\nexport const _TypecheckDracoLoader: LoaderWithParser = DracoLoader;\n"]},"metadata":{},"sourceType":"module"}