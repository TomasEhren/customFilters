{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { CompositeLayer } from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport GPUGridLayer from '../gpu-grid-layer/gpu-grid-layer';\nimport CPUGridLayer from '../cpu-grid-layer/cpu-grid-layer';\n\nvar defaultProps = _objectSpread(_objectSpread(_objectSpread({}, GPUGridLayer.defaultProps), CPUGridLayer.defaultProps), {}, {\n  gpuAggregation: false\n});\n\nvar GridLayer = /*#__PURE__*/function (_CompositeLayer) {\n  _inherits(GridLayer, _CompositeLayer);\n\n  var _super = _createSuper(GridLayer);\n\n  function GridLayer() {\n    _classCallCheck(this, GridLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(GridLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        useGPUAggregation: true\n      };\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var oldProps = _ref.oldProps,\n          props = _ref.props,\n          changeFlags = _ref.changeFlags;\n      var newState = {};\n      newState.useGPUAggregation = this.canUseGPUAggregation(props);\n      this.setState(newState);\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props = this.props,\n          data = _this$props.data,\n          updateTriggers = _this$props.updateTriggers;\n      var id = this.state.useGPUAggregation ? 'GPU' : 'CPU';\n      var LayerType = this.state.useGPUAggregation ? this.getSubLayerClass('GPU', GPUGridLayer) : this.getSubLayerClass('CPU', CPUGridLayer);\n      return new LayerType(this.props, this.getSubLayerProps({\n        id: id,\n        updateTriggers: updateTriggers\n      }), {\n        data: data\n      });\n    }\n  }, {\n    key: \"canUseGPUAggregation\",\n    value: function canUseGPUAggregation(props) {\n      var gpuAggregation = props.gpuAggregation,\n          lowerPercentile = props.lowerPercentile,\n          upperPercentile = props.upperPercentile,\n          getColorValue = props.getColorValue,\n          getElevationValue = props.getElevationValue,\n          colorScaleType = props.colorScaleType;\n\n      if (!gpuAggregation) {\n        return false;\n      }\n\n      if (!GPUGridAggregator.isSupported(this.context.gl)) {\n        return false;\n      }\n\n      if (lowerPercentile !== 0 || upperPercentile !== 100) {\n        return false;\n      }\n\n      if (getColorValue !== null || getElevationValue !== null) {\n        return false;\n      }\n\n      if (colorScaleType === 'quantile' || colorScaleType === 'ordinal') {\n        return false;\n      }\n\n      return true;\n    }\n  }]);\n\n  return GridLayer;\n}(CompositeLayer);\n\nexport { GridLayer as default };\nGridLayer.layerName = 'GridLayer';\nGridLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":";;;;;AAAA,SAAQA,cAAR,QAA6B,eAA7B;AACA,OAAOC,iBAAP,MAA8B,mDAA9B;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAOC,YAAP,MAAyB,kCAAzB;;AAEA,IAAMC,YAAY,iDACbF,YAAY,CAACE,YADA,GAEbD,YAAY,CAACC,YAFA;EAGhBC,cAAc,EAAE;AAHA,EAAlB;;IAMqBC,S;;;;;;;;;;;;;WACnBC,2BAAkB;MAChB,KAAKC,KAAL,GAAa;QACXC,iBAAiB,EAAE;MADR,CAAb;IAGD;;;WAEDC,2BAA4C;MAAA,IAA/BC,QAA+B,QAA/BA,QAA+B;MAAA,IAArBC,KAAqB,QAArBA,KAAqB;MAAA,IAAdC,WAAc,QAAdA,WAAc;MAC1C,IAAMC,QAAQ,GAAG,EAAjB;MACAA,QAAQ,CAACL,iBAATK,GAA6B,KAAKC,oBAAL,CAA0BH,KAA1B,CAA7BE;MACA,KAAKE,QAAL,CAAcF,QAAd;IACD;;;WAEDG,wBAAe;MACb,kBAA+B,KAAKL,KAApC;MAAA,IAAOM,IAAP,eAAOA,IAAP;MAAA,IAAaC,cAAb,eAAaA,cAAb;MACA,IAAMC,EAAE,GAAG,KAAKZ,KAAL,CAAWC,iBAAX,GAA+B,KAA/B,GAAuC,KAAlD;MACA,IAAMY,SAAS,GAAG,KAAKb,KAAL,CAAWC,iBAAX,GACd,KAAKa,gBAAL,CAAsB,KAAtB,EAA6BpB,YAA7B,CADc,GAEd,KAAKoB,gBAAL,CAAsB,KAAtB,EAA6BnB,YAA7B,CAFJ;MAGA,OAAO,IAAIkB,SAAJ,CACL,KAAKT,KADA,EAEL,KAAKW,gBAAL,CAAsB;QACpBH,EADoB,EACpBA,EADoB;QAEpBD;MAFoB,CAAtB,CAFK,EAML;QACED;MADF,CANK,CAAP;IAUD;;;WAIDH,8BAAqBH,KAArBG,EAA4B;MAC1B,IACEV,cADF,GAOIO,KAPJ,CACEP,cADF;MAAA,IAEEmB,eAFF,GAOIZ,KAPJ,CAEEY,eAFF;MAAA,IAGEC,eAHF,GAOIb,KAPJ,CAGEa,eAHF;MAAA,IAIEC,aAJF,GAOId,KAPJ,CAIEc,aAJF;MAAA,IAKEC,iBALF,GAOIf,KAPJ,CAKEe,iBALF;MAAA,IAMEC,cANF,GAOIhB,KAPJ,CAMEgB,cANF;;MAQA,IAAI,CAACvB,cAAL,EAAqB;QAEnB,OAAO,KAAP;MACD;;MACD,IAAI,CAACJ,iBAAiB,CAAC4B,WAAlB5B,CAA8B,KAAK6B,OAAL,CAAaC,EAA3C9B,CAAL,EAAqD;QACnD,OAAO,KAAP;MACD;;MACD,IAAIuB,eAAe,KAAK,CAApBA,IAAyBC,eAAe,KAAK,GAAjD,EAAsD;QAEpD,OAAO,KAAP;MACD;;MACD,IAAIC,aAAa,KAAK,IAAlBA,IAA0BC,iBAAiB,KAAK,IAApD,EAA0D;QAExD,OAAO,KAAP;MACD;;MACD,IAAIC,cAAc,KAAK,UAAnBA,IAAiCA,cAAc,KAAK,SAAxD,EAAmE;QAEjE,OAAO,KAAP;MACD;;MACD,OAAO,IAAP;IACD;;;;EA9DoC5B,c;;SAAlBM,S;AAiErBA,SAAS,CAAC0B,SAAV1B,GAAsB,WAAtBA;AACAA,SAAS,CAACF,YAAVE,GAAyBF,YAAzBE","names":["CompositeLayer","GPUGridAggregator","GPUGridLayer","CPUGridLayer","defaultProps","gpuAggregation","GridLayer","initializeState","state","useGPUAggregation","updateState","oldProps","props","changeFlags","newState","canUseGPUAggregation","setState","renderLayers","data","updateTriggers","id","LayerType","getSubLayerClass","getSubLayerProps","lowerPercentile","upperPercentile","getColorValue","getElevationValue","colorScaleType","isSupported","context","gl","layerName"],"sources":["../../../src/grid-layer/grid-layer.js"],"sourcesContent":["import {CompositeLayer} from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport GPUGridLayer from '../gpu-grid-layer/gpu-grid-layer';\nimport CPUGridLayer from '../cpu-grid-layer/cpu-grid-layer';\n\nconst defaultProps = {\n  ...GPUGridLayer.defaultProps,\n  ...CPUGridLayer.defaultProps,\n  gpuAggregation: false\n};\n\nexport default class GridLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      useGPUAggregation: true\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const newState = {};\n    newState.useGPUAggregation = this.canUseGPUAggregation(props);\n    this.setState(newState);\n  }\n\n  renderLayers() {\n    const {data, updateTriggers} = this.props;\n    const id = this.state.useGPUAggregation ? 'GPU' : 'CPU';\n    const LayerType = this.state.useGPUAggregation\n      ? this.getSubLayerClass('GPU', GPUGridLayer)\n      : this.getSubLayerClass('CPU', CPUGridLayer);\n    return new LayerType(\n      this.props,\n      this.getSubLayerProps({\n        id,\n        updateTriggers\n      }),\n      {\n        data\n      }\n    );\n  }\n\n  // Private methods\n\n  canUseGPUAggregation(props) {\n    const {\n      gpuAggregation,\n      lowerPercentile,\n      upperPercentile,\n      getColorValue,\n      getElevationValue,\n      colorScaleType\n    } = props;\n    if (!gpuAggregation) {\n      // cpu aggregation is requested\n      return false;\n    }\n    if (!GPUGridAggregator.isSupported(this.context.gl)) {\n      return false;\n    }\n    if (lowerPercentile !== 0 || upperPercentile !== 100) {\n      // percentile calculations requires sorting not supported on GPU\n      return false;\n    }\n    if (getColorValue !== null || getElevationValue !== null) {\n      // accessor for custom color or elevation calculation is specified\n      return false;\n    }\n    if (colorScaleType === 'quantile' || colorScaleType === 'ordinal') {\n      // quantile and ordinal scales are not supported on GPU\n      return false;\n    }\n    return true;\n  }\n}\n\nGridLayer.layerName = 'GridLayer';\nGridLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}