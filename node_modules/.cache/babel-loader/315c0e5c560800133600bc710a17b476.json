{"ast":null,"code":"import _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { VERSION } from './lib/utils/version';\nimport { parseNPY } from './lib/parsers/parse-npy';\nvar NPY_MAGIC_NUMBER = new Uint8Array([147, 78, 85, 77, 80, 89]);\nexport var NPYWorkerLoader = {\n  name: 'NPY',\n  id: 'npy',\n  module: 'textures',\n  version: VERSION,\n  worker: true,\n  extensions: ['npy'],\n  mimeTypes: [],\n  tests: [NPY_MAGIC_NUMBER.buffer],\n  options: {\n    npy: {}\n  }\n};\nexport var NPYLoader = _objectSpread(_objectSpread({}, NPYWorkerLoader), {}, {\n  parseSync: parseNPY,\n  parse: function () {\n    var _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(arrayBuffer, options) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", parseNPY(arrayBuffer, options));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function parse(_x, _x2) {\n      return _parse.apply(this, arguments);\n    }\n\n    return parse;\n  }()\n});\nexport var _TypecheckNPYWorkerLoader = NPYWorkerLoader;\nexport var _TypecheckNPYLoader = NPYLoader;","map":{"version":3,"mappings":";;;AACA,SAAQA,OAAR,QAAsB,qBAAtB;AACA,SAAQC,QAAR,QAAuB,yBAAvB;AAGA,IAAMC,gBAAgB,GAAG,IAAIC,UAAJ,CAAe,CAAC,GAAD,EAAM,EAAN,EAAU,EAAV,EAAc,EAAd,EAAkB,EAAlB,EAAsB,EAAtB,CAAf,CAAzB;AAKA,OAAO,IAAMC,eAAe,GAAG;EAC7BC,IAAI,EAAE,KADuB;EAE7BC,EAAE,EAAE,KAFyB;EAG7BC,MAAM,EAAE,UAHqB;EAI7BC,OAAO,EAAER,OAJoB;EAK7BS,MAAM,EAAE,IALqB;EAM7BC,UAAU,EAAE,CAAC,KAAD,CANiB;EAO7BC,SAAS,EAAE,EAPkB;EAQ7BC,KAAK,EAAE,CAACV,gBAAgB,CAACW,MAAlB,CARsB;EAS7BC,OAAO,EAAE;IACPC,GAAG,EAAE;EADE;AAToB,CAAxB;AAiBP,OAAO,IAAMC,SAAS,mCACjBZ,eADiB;EAEpBa,SAAS,EAAEhB,QAFS;EAGpBiB,KAAK;IAAA,sEAAE,iBAAOC,WAAP,EAAiCL,OAAjC;MAAA;QAAA;UAAA;YAAA;cAAA,iCAA6Db,QAAQ,CAACkB,WAAD,EAAcL,OAAd,CAArE;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAF;;IAAA;MAAA;IAAA;;IAAA;EAAA;AAHe,EAAf;AAOP,OAAO,IAAMM,yBAAiC,GAAGhB,eAA1C;AACP,OAAO,IAAMiB,mBAAqC,GAAGL,SAA9C","names":["VERSION","parseNPY","NPY_MAGIC_NUMBER","Uint8Array","NPYWorkerLoader","name","id","module","version","worker","extensions","mimeTypes","tests","buffer","options","npy","NPYLoader","parseSync","parse","arrayBuffer","_TypecheckNPYWorkerLoader","_TypecheckNPYLoader"],"sources":["../../src/npy-loader.ts"],"sourcesContent":["import type {Loader, LoaderWithParser, LoaderOptions} from '@loaders.gl/loader-utils';\nimport {VERSION} from './lib/utils/version';\nimport {parseNPY} from './lib/parsers/parse-npy';\n\n// \\x93NUMPY\nconst NPY_MAGIC_NUMBER = new Uint8Array([147, 78, 85, 77, 80, 89]);\n\n/**\n * Worker loader for numpy \"tiles\"\n */\nexport const NPYWorkerLoader = {\n  name: 'NPY',\n  id: 'npy',\n  module: 'textures',\n  version: VERSION,\n  worker: true,\n  extensions: ['npy'],\n  mimeTypes: [],\n  tests: [NPY_MAGIC_NUMBER.buffer],\n  options: {\n    npy: {}\n  }\n};\n\n/**\n * Loader for numpy \"tiles\"\n */\nexport const NPYLoader = {\n  ...NPYWorkerLoader,\n  parseSync: parseNPY,\n  parse: async (arrayBuffer: ArrayBuffer, options?: LoaderOptions) => parseNPY(arrayBuffer, options)\n};\n\n// TYPE TESTS - TODO find a better way than exporting junk\nexport const _TypecheckNPYWorkerLoader: Loader = NPYWorkerLoader;\nexport const _TypecheckNPYLoader: LoaderWithParser = NPYLoader;\n"]},"metadata":{},"sourceType":"module"}