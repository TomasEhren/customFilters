{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DrawRectangleFromCenterMode = void 0;\n\nvar _bboxPolygon = _interopRequireDefault(require(\"@turf/bbox-polygon\"));\n\nvar _twoClickPolygonMode = require(\"./two-click-polygon-mode\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar DrawRectangleFromCenterMode = /*#__PURE__*/function (_TwoClickPolygonMode) {\n  _inherits(DrawRectangleFromCenterMode, _TwoClickPolygonMode);\n\n  var _super = _createSuper(DrawRectangleFromCenterMode);\n\n  function DrawRectangleFromCenterMode() {\n    _classCallCheck(this, DrawRectangleFromCenterMode);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DrawRectangleFromCenterMode, [{\n    key: \"getTwoClickPolygon\",\n    value: function getTwoClickPolygon(coord1, coord2, modeConfig) {\n      var longitude = coord1[0] > coord2[0] ? coord1[0] + Math.abs(coord1[0] - coord2[0]) : coord1[0] - Math.abs(coord1[0] - coord2[0]);\n      var latitude = coord1[1] > coord2[1] ? coord1[1] + Math.abs(coord1[1] - coord2[1]) : coord1[1] - Math.abs(coord1[1] - coord2[1]);\n      var rectangle = (0, _bboxPolygon[\"default\"])([longitude, latitude, coord2[0], coord2[1]]);\n      rectangle.properties = rectangle.properties || {};\n      rectangle.properties.shape = 'Rectangle'; // @ts-ignore\n\n      return rectangle;\n    }\n  }]);\n\n  return DrawRectangleFromCenterMode;\n}(_twoClickPolygonMode.TwoClickPolygonMode);\n\nexports.DrawRectangleFromCenterMode = DrawRectangleFromCenterMode;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEaA,2B;;;;;;;;;;;;;uCACQC,QAAkBC,QAAkBC,YAAqC;MAC1F,IAAMC,SAAS,GACbH,MAAM,CAAC,CAAD,CAANA,GAAYC,MAAM,CAAC,CAAD,CAAlBD,GACIA,MAAM,CAAC,CAAD,CAANA,GAAYI,IAAI,CAACC,GAALD,CAASJ,MAAM,CAAC,CAAD,CAANA,GAAYC,MAAM,CAAC,CAAD,CAA3BG,CADhBJ,GAEIA,MAAM,CAAC,CAAD,CAANA,GAAYI,IAAI,CAACC,GAALD,CAASJ,MAAM,CAAC,CAAD,CAANA,GAAYC,MAAM,CAAC,CAAD,CAA3BG,CAHlB;MAIA,IAAME,QAAQ,GACZN,MAAM,CAAC,CAAD,CAANA,GAAYC,MAAM,CAAC,CAAD,CAAlBD,GACIA,MAAM,CAAC,CAAD,CAANA,GAAYI,IAAI,CAACC,GAALD,CAASJ,MAAM,CAAC,CAAD,CAANA,GAAYC,MAAM,CAAC,CAAD,CAA3BG,CADhBJ,GAEIA,MAAM,CAAC,CAAD,CAANA,GAAYI,IAAI,CAACC,GAALD,CAASJ,MAAM,CAAC,CAAD,CAANA,GAAYC,MAAM,CAAC,CAAD,CAA3BG,CAHlB;MAKA,IAAMG,SAAS,GAAG,6BAAY,CAACJ,SAAD,EAAYG,QAAZ,EAAsBL,MAAM,CAAC,CAAD,CAA5B,EAAiCA,MAAM,CAAC,CAAD,CAAvC,CAAZ,CAAlB;MACAM,SAAS,CAACC,UAAVD,GAAuBA,SAAS,CAACC,UAAVD,IAAwB,EAA/CA;MACAA,SAAS,CAACC,UAAVD,CAAqBE,KAArBF,GAA6B,WAA7BA,CAZ0F,CAc1F;;MACA,OAAOA,SAAP;IACD;;;;EAjB8CG,wC","names":["DrawRectangleFromCenterMode","coord1","coord2","modeConfig","longitude","Math","abs","latitude","rectangle","properties","shape","TwoClickPolygonMode"],"sources":["../../src/lib/draw-rectangle-from-center-mode.ts"],"sourcesContent":["import bboxPolygon from '@turf/bbox-polygon';\nimport { Position, Polygon, FeatureOf } from '../geojson-types';\nimport { TwoClickPolygonMode } from './two-click-polygon-mode';\n\nexport class DrawRectangleFromCenterMode extends TwoClickPolygonMode {\n  getTwoClickPolygon(coord1: Position, coord2: Position, modeConfig: any): FeatureOf<Polygon> {\n    const longitude =\n      coord1[0] > coord2[0]\n        ? coord1[0] + Math.abs(coord1[0] - coord2[0])\n        : coord1[0] - Math.abs(coord1[0] - coord2[0]);\n    const latitude =\n      coord1[1] > coord2[1]\n        ? coord1[1] + Math.abs(coord1[1] - coord2[1])\n        : coord1[1] - Math.abs(coord1[1] - coord2[1]);\n\n    const rectangle = bboxPolygon([longitude, latitude, coord2[0], coord2[1]]);\n    rectangle.properties = rectangle.properties || {};\n    rectangle.properties.shape = 'Rectangle';\n\n    // @ts-ignore\n    return rectangle;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}