{"ast":null,"code":"function _extendableBuiltin(cls) {\n  function ExtendableBuiltin() {\n    var instance = Reflect.construct(cls, Array.from(arguments));\n    Object.setPrototypeOf(instance, Object.getPrototypeOf(this));\n    return instance;\n  }\n\n  ExtendableBuiltin.prototype = Object.create(cls.prototype, {\n    constructor: {\n      value: cls,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(ExtendableBuiltin, cls);\n  } else {\n    ExtendableBuiltin.__proto__ = cls;\n  }\n\n  return ExtendableBuiltin;\n}\n\nimport { config, formatValue, equals, isArray } from '../../lib/common';\nimport assert from '../../lib/assert';\nexport default class MathArray extends _extendableBuiltin(Array) {\n  get ELEMENTS() {\n    assert(false);\n    return 0;\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  from(arrayOrObject) {\n    return Array.isArray(arrayOrObject) ? this.copy(arrayOrObject) : this.fromObject(arrayOrObject);\n  }\n\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = array[i + offset];\n    }\n\n    return this.check();\n  }\n\n  to(arrayOrObject) {\n    if (arrayOrObject === this) {\n      return this;\n    }\n\n    return isArray(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);\n  }\n\n  toTarget(target) {\n    return target ? this.to(target) : this;\n  }\n\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      array[offset + i] = this[i];\n    }\n\n    return array;\n  }\n\n  toFloat32Array() {\n    return new Float32Array(this);\n  }\n\n  toString() {\n    return this.formatString(config);\n  }\n\n  formatString(opts) {\n    let string = '';\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      string += (i > 0 ? ', ' : '') + formatValue(this[i], opts);\n    }\n\n    return \"\".concat(opts.printTypes ? this.constructor.name : '', \"[\").concat(string, \"]\");\n  }\n\n  equals(array) {\n    if (!array || this.length !== array.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      if (!equals(this[i], array[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  exactEquals(array) {\n    if (!array || this.length !== array.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      if (this[i] !== array[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  negate() {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = -this[i];\n    }\n\n    return this.check();\n  }\n\n  lerp(a, b, t) {\n    if (t === undefined) {\n      t = b;\n      b = a;\n      a = this;\n    }\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const ai = a[i];\n      this[i] = ai + t * (b[i] - ai);\n    }\n\n    return this.check();\n  }\n\n  min(vector) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(vector[i], this[i]);\n    }\n\n    return this.check();\n  }\n\n  max(vector) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.max(vector[i], this[i]);\n    }\n\n    return this.check();\n  }\n\n  clamp(minVector, maxVector) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(Math.max(this[i], minVector[i]), maxVector[i]);\n    }\n\n    return this.check();\n  }\n\n  add() {\n    for (var _len = arguments.length, vectors = new Array(_len), _key = 0; _key < _len; _key++) {\n      vectors[_key] = arguments[_key];\n    }\n\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] += vector[i];\n      }\n    }\n\n    return this.check();\n  }\n\n  subtract() {\n    for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      vectors[_key2] = arguments[_key2];\n    }\n\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] -= vector[i];\n      }\n    }\n\n    return this.check();\n  }\n\n  scale(scale) {\n    if (Array.isArray(scale)) {\n      return this.multiply(scale);\n    }\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] *= scale;\n    }\n\n    return this.check();\n  }\n\n  sub(a) {\n    return this.subtract(a);\n  }\n\n  setScalar(a) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = a;\n    }\n\n    return this.check();\n  }\n\n  addScalar(a) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] += a;\n    }\n\n    return this.check();\n  }\n\n  subScalar(a) {\n    return this.addScalar(-a);\n  }\n\n  multiplyScalar(scalar) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] *= scalar;\n    }\n\n    return this.check();\n  }\n\n  divideScalar(a) {\n    return this.scale(1 / a);\n  }\n\n  clampScalar(min, max) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(Math.max(this[i], min), max);\n    }\n\n    return this.check();\n  }\n\n  multiplyByScalar(scalar) {\n    return this.scale(scalar);\n  }\n\n  get elements() {\n    return this;\n  }\n\n  check() {\n    if (config.debug && !this.validate()) {\n      throw new Error(\"math.gl: \".concat(this.constructor.name, \" some fields set to invalid numbers'\"));\n    }\n\n    return this;\n  }\n\n  validate() {\n    let valid = this.length === this.ELEMENTS;\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      valid = valid && Number.isFinite(this[i]);\n    }\n\n    return valid;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["config","formatValue","equals","isArray","assert","MathArray","Array","ELEMENTS","clone","constructor","copy","from","arrayOrObject","fromObject","fromArray","array","offset","i","check","to","toArray","toObject","toTarget","target","toFloat32Array","Float32Array","toString","formatString","opts","string","printTypes","name","length","exactEquals","negate","lerp","a","b","t","undefined","ai","min","vector","Math","max","clamp","minVector","maxVector","add","vectors","subtract","scale","multiply","sub","setScalar","addScalar","subScalar","multiplyScalar","scalar","divideScalar","clampScalar","multiplyByScalar","elements","debug","validate","Error","valid","Number","isFinite"],"sources":["../../../../src/classes/base/math-array.js"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {config, formatValue, equals, isArray} from '../../lib/common';\nimport assert from '../../lib/assert';\n\nexport default class MathArray extends Array {\n  // Defined by derived class\n  get ELEMENTS() {\n    assert(false);\n    return 0;\n  }\n\n  clone() {\n    // @ts-ignore error TS2351: Cannot use 'new' with an expression whose type lacks a call or construct signature.\n    return new this.constructor().copy(this);\n  }\n\n  from(arrayOrObject) {\n    // @ts-ignore error TS2339: Property 'copy' does not exist on type 'MathArray'.\n    return Array.isArray(arrayOrObject) ? this.copy(arrayOrObject) : this.fromObject(arrayOrObject);\n  }\n\n  fromArray(array, offset = 0) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = array[i + offset];\n    }\n    return this.check();\n  }\n\n  to(arrayOrObject) {\n    if (arrayOrObject === this) {\n      return this;\n    }\n    // @ts-ignore error TS2339: Property 'toObject' does not exist on type 'MathArray'.\n    return isArray(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);\n  }\n\n  toTarget(target) {\n    return target ? this.to(target) : this;\n  }\n\n  toArray(array = [], offset = 0) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      array[offset + i] = this[i];\n    }\n    return array;\n  }\n\n  toFloat32Array() {\n    return new Float32Array(this);\n  }\n\n  toString() {\n    return this.formatString(config);\n  }\n\n  formatString(opts) {\n    let string = '';\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      string += (i > 0 ? ', ' : '') + formatValue(this[i], opts);\n    }\n    return `${opts.printTypes ? this.constructor.name : ''}[${string}]`;\n  }\n\n  equals(array) {\n    if (!array || this.length !== array.length) {\n      return false;\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      if (!equals(this[i], array[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  exactEquals(array) {\n    if (!array || this.length !== array.length) {\n      return false;\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      if (this[i] !== array[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // Modifiers\n\n  negate() {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = -this[i];\n    }\n    return this.check();\n  }\n\n  lerp(a, b, t) {\n    if (t === undefined) {\n      t = b;\n      b = a;\n      a = this; // eslint-disable-line\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const ai = a[i];\n      this[i] = ai + t * (b[i] - ai);\n    }\n    return this.check();\n  }\n\n  min(vector) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(vector[i], this[i]);\n    }\n    return this.check();\n  }\n\n  max(vector) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.max(vector[i], this[i]);\n    }\n    return this.check();\n  }\n\n  clamp(minVector, maxVector) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(Math.max(this[i], minVector[i]), maxVector[i]);\n    }\n    return this.check();\n  }\n\n  add(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] += vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  subtract(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] -= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  scale(scale) {\n    if (Array.isArray(scale)) {\n      // @ts-ignore error TS2339: Property 'multiply' does not exist on type 'MathArray'.\n      return this.multiply(scale);\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] *= scale;\n    }\n    return this.check();\n  }\n\n  // three.js compatibility\n\n  sub(a) {\n    return this.subtract(a);\n  }\n\n  setScalar(a) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = a;\n    }\n    return this.check();\n  }\n\n  addScalar(a) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] += a;\n    }\n    return this.check();\n  }\n\n  subScalar(a) {\n    return this.addScalar(-a);\n  }\n\n  multiplyScalar(scalar) {\n    // Multiplies all elements\n    // `Matrix4.scale` only scales its 3x3 \"minor\"\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] *= scalar;\n    }\n    return this.check();\n  }\n\n  divideScalar(a) {\n    return this.scale(1 / a);\n  }\n\n  clampScalar(min, max) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(Math.max(this[i], min), max);\n    }\n    return this.check();\n  }\n\n  // Cesium compatibility\n\n  multiplyByScalar(scalar) {\n    return this.scale(scalar);\n  }\n\n  // THREE.js compatibility\n  get elements() {\n    return this;\n  }\n\n  // Debug checks\n\n  check() {\n    if (config.debug && !this.validate()) {\n      throw new Error(`math.gl: ${this.constructor.name} some fields set to invalid numbers'`);\n    }\n    return this;\n  }\n\n  validate() {\n    let valid = this.length === this.ELEMENTS;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      valid = valid && Number.isFinite(this[i]);\n    }\n    return valid;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}