{"ast":null,"code":"import { CompositeLayer, log } from '@deck.gl/core';\nimport { SimpleMeshLayer } from '@deck.gl/mesh-layers';\nimport { COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { TerrainWorkerLoader } from '@loaders.gl/terrain';\nimport TileLayer from '../tile-layer/tile-layer';\nimport { urlType, getURLFromTemplate } from '../tile-layer/utils';\nconst DUMMY_DATA = [1];\nconst defaultProps = { ...TileLayer.defaultProps,\n  elevationData: urlType,\n  texture: { ...urlType,\n    optional: true\n  },\n  meshMaxError: {\n    type: 'number',\n    value: 4.0\n  },\n  bounds: {\n    type: 'array',\n    value: null,\n    optional: true,\n    compare: true\n  },\n  color: {\n    type: 'color',\n    value: [255, 255, 255]\n  },\n  elevationDecoder: {\n    type: 'object',\n    value: {\n      rScaler: 1,\n      gScaler: 0,\n      bScaler: 0,\n      offset: 0\n    }\n  },\n  workerUrl: {\n    type: 'string',\n    value: null\n  },\n  wireframe: false,\n  material: true,\n  loaders: [TerrainWorkerLoader]\n};\n\nfunction urlTemplateToUpdateTrigger(template) {\n  if (Array.isArray(template)) {\n    return template.join(';');\n  }\n\n  return template;\n}\n\nexport default class TerrainLayer extends CompositeLayer {\n  updateState(_ref) {\n    let {\n      props,\n      oldProps\n    } = _ref;\n    const elevationDataChanged = props.elevationData !== oldProps.elevationData;\n\n    if (elevationDataChanged) {\n      const {\n        elevationData\n      } = props;\n      const isTiled = elevationData && (Array.isArray(elevationData) || elevationData.includes('{x}') && elevationData.includes('{y}'));\n      this.setState({\n        isTiled\n      });\n    }\n\n    const shouldReload = elevationDataChanged || props.meshMaxError !== oldProps.meshMaxError || props.elevationDecoder !== oldProps.elevationDecoder || props.bounds !== oldProps.bounds;\n\n    if (!this.state.isTiled && shouldReload) {\n      const terrain = this.loadTerrain(props);\n      this.setState({\n        terrain\n      });\n    }\n\n    if (props.workerUrl) {\n      log.removed('workerUrl', 'loadOptions.terrain.workerUrl')();\n    }\n  }\n\n  loadTerrain(_ref2) {\n    let {\n      elevationData,\n      bounds,\n      elevationDecoder,\n      meshMaxError,\n      signal\n    } = _ref2;\n\n    var _loadOptions;\n\n    if (!elevationData) {\n      return null;\n    }\n\n    let loadOptions = this.getLoadOptions();\n    loadOptions = { ...loadOptions,\n      terrain: {\n        skirtHeight: this.state.isTiled ? meshMaxError * 2 : 0,\n        ...((_loadOptions = loadOptions) === null || _loadOptions === void 0 ? void 0 : _loadOptions.terrain),\n        bounds,\n        meshMaxError,\n        elevationDecoder\n      }\n    };\n    const {\n      fetch\n    } = this.props;\n    return fetch(elevationData, {\n      propName: 'elevationData',\n      layer: this,\n      loadOptions,\n      signal\n    });\n  }\n\n  getTiledTerrainData(tile) {\n    const {\n      elevationData,\n      fetch,\n      texture,\n      elevationDecoder,\n      meshMaxError\n    } = this.props;\n    const {\n      viewport\n    } = this.context;\n    const dataUrl = getURLFromTemplate(elevationData, tile);\n    const textureUrl = getURLFromTemplate(texture, tile);\n    const {\n      bbox,\n      signal\n    } = tile;\n    const bottomLeft = viewport.isGeospatial ? viewport.projectFlat([bbox.west, bbox.south]) : [bbox.left, bbox.bottom];\n    const topRight = viewport.isGeospatial ? viewport.projectFlat([bbox.east, bbox.north]) : [bbox.right, bbox.top];\n    const bounds = [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]];\n    const terrain = this.loadTerrain({\n      elevationData: dataUrl,\n      bounds,\n      elevationDecoder,\n      meshMaxError,\n      signal\n    });\n    const surface = textureUrl ? fetch(textureUrl, {\n      propName: 'texture',\n      layer: this,\n      loaders: [],\n      signal\n    }).catch(_ => null) : Promise.resolve(null);\n    return Promise.all([terrain, surface]);\n  }\n\n  renderSubLayers(props) {\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    const {\n      data,\n      color\n    } = props;\n\n    if (!data) {\n      return null;\n    }\n\n    const [mesh, texture] = data;\n    return new SubLayerClass(props, {\n      data: DUMMY_DATA,\n      mesh,\n      texture,\n      _instanced: false,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getPosition: d => [0, 0, 0],\n      getColor: color\n    });\n  }\n\n  onViewportLoad(tiles) {\n    if (!tiles) {\n      return;\n    }\n\n    const {\n      zRange\n    } = this.state;\n    const ranges = tiles.map(tile => tile.content).filter(Boolean).map(arr => {\n      const bounds = arr[0].header.boundingBox;\n      return bounds.map(bound => bound[2]);\n    });\n\n    if (ranges.length === 0) {\n      return;\n    }\n\n    const minZ = Math.min(...ranges.map(x => x[0]));\n    const maxZ = Math.max(...ranges.map(x => x[1]));\n\n    if (!zRange || minZ < zRange[0] || maxZ > zRange[1]) {\n      this.setState({\n        zRange: [minZ, maxZ]\n      });\n    }\n  }\n\n  renderLayers() {\n    const {\n      color,\n      material,\n      elevationData,\n      texture,\n      wireframe,\n      meshMaxError,\n      elevationDecoder,\n      tileSize,\n      maxZoom,\n      minZoom,\n      extent,\n      maxRequests,\n      onTileLoad,\n      onTileUnload,\n      onTileError,\n      maxCacheSize,\n      maxCacheByteSize,\n      refinementStrategy\n    } = this.props;\n\n    if (this.state.isTiled) {\n      return new TileLayer(this.getSubLayerProps({\n        id: 'tiles'\n      }), {\n        wireframe,\n        color,\n        material,\n        getTileData: this.getTiledTerrainData.bind(this),\n        renderSubLayers: this.renderSubLayers.bind(this),\n        updateTriggers: {\n          getTileData: {\n            elevationData: urlTemplateToUpdateTrigger(elevationData),\n            texture: urlTemplateToUpdateTrigger(texture),\n            meshMaxError,\n            elevationDecoder\n          }\n        },\n        onViewportLoad: this.onViewportLoad.bind(this),\n        zRange: this.state.zRange || null,\n        tileSize,\n        maxZoom,\n        minZoom,\n        extent,\n        maxRequests,\n        onTileLoad,\n        onTileUnload,\n        onTileError,\n        maxCacheSize,\n        maxCacheByteSize,\n        refinementStrategy\n      });\n    }\n\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    return new SubLayerClass(this.getSubLayerProps({\n      id: 'mesh'\n    }), {\n      data: DUMMY_DATA,\n      mesh: this.state.terrain,\n      texture,\n      _instanced: false,\n      getPosition: d => [0, 0, 0],\n      getColor: color,\n      material,\n      wireframe\n    });\n  }\n\n}\nTerrainLayer.layerName = 'TerrainLayer';\nTerrainLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["CompositeLayer","log","SimpleMeshLayer","COORDINATE_SYSTEM","TerrainWorkerLoader","TileLayer","urlType","getURLFromTemplate","DUMMY_DATA","defaultProps","elevationData","texture","optional","meshMaxError","type","value","bounds","compare","color","elevationDecoder","rScaler","gScaler","bScaler","offset","workerUrl","wireframe","material","loaders","urlTemplateToUpdateTrigger","template","Array","isArray","join","TerrainLayer","updateState","props","oldProps","elevationDataChanged","isTiled","includes","setState","shouldReload","state","terrain","loadTerrain","removed","signal","loadOptions","getLoadOptions","skirtHeight","_loadOptions","fetch","propName","layer","getTiledTerrainData","tile","viewport","context","dataUrl","textureUrl","bbox","bottomLeft","isGeospatial","projectFlat","west","south","left","bottom","topRight","east","north","right","top","surface","catch","_","Promise","resolve","all","renderSubLayers","SubLayerClass","getSubLayerClass","data","mesh","_instanced","coordinateSystem","CARTESIAN","getPosition","d","getColor","onViewportLoad","tiles","zRange","ranges","map","content","filter","Boolean","arr","header","boundingBox","bound","length","minZ","Math","min","x","maxZ","max","renderLayers","tileSize","maxZoom","minZoom","extent","maxRequests","onTileLoad","onTileUnload","onTileError","maxCacheSize","maxCacheByteSize","refinementStrategy","getSubLayerProps","id","getTileData","bind","updateTriggers","layerName"],"sources":["../../../src/terrain-layer/terrain-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, log} from '@deck.gl/core';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {COORDINATE_SYSTEM} from '@deck.gl/core';\nimport {TerrainWorkerLoader} from '@loaders.gl/terrain';\nimport TileLayer from '../tile-layer/tile-layer';\nimport {urlType, getURLFromTemplate} from '../tile-layer/utils';\n\nconst DUMMY_DATA = [1];\n\nconst defaultProps = {\n  ...TileLayer.defaultProps,\n  // Image url that encodes height data\n  elevationData: urlType,\n  // Image url to use as texture\n  texture: {...urlType, optional: true},\n  // Martini error tolerance in meters, smaller number -> more detailed mesh\n  meshMaxError: {type: 'number', value: 4.0},\n  // Bounding box of the terrain image, [minX, minY, maxX, maxY] in world coordinates\n  bounds: {type: 'array', value: null, optional: true, compare: true},\n  // Color to use if texture is unavailable\n  color: {type: 'color', value: [255, 255, 255]},\n  // Object to decode height data, from (r, g, b) to height in meters\n  elevationDecoder: {\n    type: 'object',\n    value: {\n      rScaler: 1,\n      gScaler: 0,\n      bScaler: 0,\n      offset: 0\n    }\n  },\n  // Supply url to local terrain worker bundle. Only required if running offline and cannot access CDN.\n  workerUrl: {type: 'string', value: null},\n  // Same as SimpleMeshLayer wireframe\n  wireframe: false,\n  material: true,\n\n  loaders: [TerrainWorkerLoader]\n};\n\n// Turns array of templates into a single string to work around shallow change\nfunction urlTemplateToUpdateTrigger(template) {\n  if (Array.isArray(template)) {\n    return template.join(';');\n  }\n  return template;\n}\n\n/**\n * state: {\n *   isTiled: True renders TileLayer of many SimpleMeshLayers, false renders one SimpleMeshLayer\n *   terrain: Mesh object. Only defined when isTiled is false.\n * }\n */\nexport default class TerrainLayer extends CompositeLayer {\n  updateState({props, oldProps}) {\n    const elevationDataChanged = props.elevationData !== oldProps.elevationData;\n    if (elevationDataChanged) {\n      const {elevationData} = props;\n      const isTiled =\n        elevationData &&\n        (Array.isArray(elevationData) ||\n          (elevationData.includes('{x}') && elevationData.includes('{y}')));\n      this.setState({isTiled});\n    }\n\n    // Reloading for single terrain mesh\n    const shouldReload =\n      elevationDataChanged ||\n      props.meshMaxError !== oldProps.meshMaxError ||\n      props.elevationDecoder !== oldProps.elevationDecoder ||\n      props.bounds !== oldProps.bounds;\n\n    if (!this.state.isTiled && shouldReload) {\n      const terrain = this.loadTerrain(props);\n      this.setState({terrain});\n    }\n\n    // TODO - remove in v9\n    if (props.workerUrl) {\n      log.removed('workerUrl', 'loadOptions.terrain.workerUrl')();\n    }\n  }\n\n  loadTerrain({elevationData, bounds, elevationDecoder, meshMaxError, signal}) {\n    if (!elevationData) {\n      return null;\n    }\n    let loadOptions = this.getLoadOptions();\n    loadOptions = {\n      ...loadOptions,\n      terrain: {\n        skirtHeight: this.state.isTiled ? meshMaxError * 2 : 0,\n        ...loadOptions?.terrain,\n        bounds,\n        meshMaxError,\n        elevationDecoder\n      }\n    };\n    const {fetch} = this.props;\n    return fetch(elevationData, {propName: 'elevationData', layer: this, loadOptions, signal});\n  }\n\n  getTiledTerrainData(tile) {\n    const {elevationData, fetch, texture, elevationDecoder, meshMaxError} = this.props;\n    const {viewport} = this.context;\n    const dataUrl = getURLFromTemplate(elevationData, tile);\n    const textureUrl = getURLFromTemplate(texture, tile);\n\n    const {bbox, signal} = tile;\n    const bottomLeft = viewport.isGeospatial\n      ? viewport.projectFlat([bbox.west, bbox.south])\n      : [bbox.left, bbox.bottom];\n    const topRight = viewport.isGeospatial\n      ? viewport.projectFlat([bbox.east, bbox.north])\n      : [bbox.right, bbox.top];\n    const bounds = [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]];\n\n    const terrain = this.loadTerrain({\n      elevationData: dataUrl,\n      bounds,\n      elevationDecoder,\n      meshMaxError,\n      signal\n    });\n    const surface = textureUrl\n      ? // If surface image fails to load, the tile should still be displayed\n        fetch(textureUrl, {propName: 'texture', layer: this, loaders: [], signal}).catch(_ => null)\n      : Promise.resolve(null);\n\n    return Promise.all([terrain, surface]);\n  }\n\n  renderSubLayers(props) {\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    const {data, color} = props;\n\n    if (!data) {\n      return null;\n    }\n\n    const [mesh, texture] = data;\n\n    return new SubLayerClass(props, {\n      data: DUMMY_DATA,\n      mesh,\n      texture,\n      _instanced: false,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getPosition: d => [0, 0, 0],\n      getColor: color\n    });\n  }\n\n  // Update zRange of viewport\n  onViewportLoad(tiles) {\n    if (!tiles) {\n      return;\n    }\n\n    const {zRange} = this.state;\n    const ranges = tiles\n      .map(tile => tile.content)\n      .filter(Boolean)\n      .map(arr => {\n        const bounds = arr[0].header.boundingBox;\n        return bounds.map(bound => bound[2]);\n      });\n    if (ranges.length === 0) {\n      return;\n    }\n    const minZ = Math.min(...ranges.map(x => x[0]));\n    const maxZ = Math.max(...ranges.map(x => x[1]));\n\n    if (!zRange || minZ < zRange[0] || maxZ > zRange[1]) {\n      this.setState({zRange: [minZ, maxZ]});\n    }\n  }\n\n  renderLayers() {\n    const {\n      color,\n      material,\n      elevationData,\n      texture,\n      wireframe,\n      meshMaxError,\n      elevationDecoder,\n      tileSize,\n      maxZoom,\n      minZoom,\n      extent,\n      maxRequests,\n      onTileLoad,\n      onTileUnload,\n      onTileError,\n      maxCacheSize,\n      maxCacheByteSize,\n      refinementStrategy\n    } = this.props;\n\n    if (this.state.isTiled) {\n      return new TileLayer(\n        this.getSubLayerProps({\n          id: 'tiles'\n        }),\n        {\n          wireframe,\n          color,\n          material,\n          getTileData: this.getTiledTerrainData.bind(this),\n          renderSubLayers: this.renderSubLayers.bind(this),\n          updateTriggers: {\n            getTileData: {\n              elevationData: urlTemplateToUpdateTrigger(elevationData),\n              texture: urlTemplateToUpdateTrigger(texture),\n              meshMaxError,\n              elevationDecoder\n            }\n          },\n          onViewportLoad: this.onViewportLoad.bind(this),\n          zRange: this.state.zRange || null,\n          tileSize,\n          maxZoom,\n          minZoom,\n          extent,\n          maxRequests,\n          onTileLoad,\n          onTileUnload,\n          onTileError,\n          maxCacheSize,\n          maxCacheByteSize,\n          refinementStrategy\n        }\n      );\n    }\n\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    return new SubLayerClass(\n      this.getSubLayerProps({\n        id: 'mesh'\n      }),\n      {\n        data: DUMMY_DATA,\n        mesh: this.state.terrain,\n        texture,\n        _instanced: false,\n        getPosition: d => [0, 0, 0],\n        getColor: color,\n        material,\n        wireframe\n      }\n    );\n  }\n}\n\nTerrainLayer.layerName = 'TerrainLayer';\nTerrainLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}