{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { polyfillVertexArrayObject } from './polyfill-vertex-array-object';\nimport { assert } from '../utils/assert';\nimport { WEBGL2_CONTEXT_POLYFILLS, WEBGL2_CONTEXT_OVERRIDES } from './polyfill-table';\nexport function polyfillContext(gl) {\n  gl.luma = gl.luma || {};\n  var luma = gl.luma;\n\n  if (!luma.polyfilled) {\n    polyfillVertexArrayObject(gl);\n    initializeExtensions(gl);\n    installPolyfills(gl, WEBGL2_CONTEXT_POLYFILLS);\n    installOverrides(gl, {\n      target: luma,\n      target2: gl\n    });\n    luma.polyfilled = true;\n  }\n\n  return gl;\n}\nvar global_ = typeof global !== 'undefined' ? global : window;\nglobal_.polyfillContext = polyfillContext;\n\nfunction initializeExtensions(gl) {\n  gl.luma.extensions = {};\n  var EXTENSIONS = gl.getSupportedExtensions() || [];\n\n  var _iterator = _createForOfIteratorHelper(EXTENSIONS),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var extension = _step.value;\n      gl.luma[extension] = gl.getExtension(extension);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nfunction installOverrides(gl, _ref) {\n  var target = _ref.target,\n      target2 = _ref.target2;\n  Object.keys(WEBGL2_CONTEXT_OVERRIDES).forEach(function (key) {\n    if (typeof WEBGL2_CONTEXT_OVERRIDES[key] === 'function') {\n      var originalFunc = gl[key] ? gl[key].bind(gl) : function () {};\n      var polyfill = WEBGL2_CONTEXT_OVERRIDES[key].bind(null, gl, originalFunc);\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  });\n}\n\nfunction installPolyfills(gl, polyfills) {\n  var _iterator2 = _createForOfIteratorHelper(Object.getOwnPropertyNames(polyfills)),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var extension = _step2.value;\n\n      if (extension !== 'overrides') {\n        polyfillExtension(gl, {\n          extension: extension,\n          target: gl.luma,\n          target2: gl\n        });\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n}\n\nfunction polyfillExtension(gl, _ref2) {\n  var extension = _ref2.extension,\n      target = _ref2.target,\n      target2 = _ref2.target2;\n  var defaults = WEBGL2_CONTEXT_POLYFILLS[extension];\n  assert(defaults);\n  var _defaults$meta = defaults.meta,\n      meta = _defaults$meta === void 0 ? {} : _defaults$meta;\n  var _meta$suffix = meta.suffix,\n      suffix = _meta$suffix === void 0 ? '' : _meta$suffix;\n  var ext = gl.getExtension(extension);\n\n  var _loop = function _loop() {\n    var key = _Object$keys[_i];\n    var extKey = \"\".concat(key).concat(suffix);\n    var polyfill = null;\n\n    if (key === 'meta') {} else if (typeof gl[key] === 'function') {} else if (ext && typeof ext[extKey] === 'function') {\n      polyfill = function polyfill() {\n        return ext[extKey].apply(ext, arguments);\n      };\n    } else if (typeof defaults[key] === 'function') {\n      polyfill = defaults[key].bind(target);\n    }\n\n    if (polyfill) {\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  };\n\n  for (var _i = 0, _Object$keys = Object.keys(defaults); _i < _Object$keys.length; _i++) {\n    _loop();\n  }\n}","map":{"version":3,"mappings":"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","names":["polyfillVertexArrayObject","assert","WEBGL2_CONTEXT_POLYFILLS","WEBGL2_CONTEXT_OVERRIDES","polyfillContext","gl","luma","polyfilled","initializeExtensions","installPolyfills","installOverrides","target","target2","global_","global","window","extensions","EXTENSIONS","getSupportedExtensions","extension","getExtension","Object","keys","forEach","key","originalFunc","bind","polyfill","polyfills","getOwnPropertyNames","polyfillExtension","defaults","meta","suffix","ext","extKey"],"sources":["../../../src/polyfill/polyfill-context.js"],"sourcesContent":["// WebGL1/WebGL2 extension polyfill support\n//\n// Provides a function that creates polyfills for WebGL2 functions based\n// on available extensions and installs them on a supplied target (could be\n// the WebGLContext or its prototype, or a separate object).\n//\n// This is intended to be a stand-alone file with minimal dependencies,\n// easy to reuse or repurpose in other projects.\n\n/** @typedef {import('./polyfill-context')} types */\n\nimport {polyfillVertexArrayObject} from './polyfill-vertex-array-object';\nimport {assert} from '../utils/assert';\n\nimport {WEBGL2_CONTEXT_POLYFILLS, WEBGL2_CONTEXT_OVERRIDES} from './polyfill-table';\n\n/** @type {types['polyfillContext']} */\nexport function polyfillContext(gl) {\n  // @ts-ignore\n  gl.luma = gl.luma || {};\n  // @ts-ignore\n  const {luma} = gl;\n\n  if (!luma.polyfilled) {\n    polyfillVertexArrayObject(gl);\n    initializeExtensions(gl);\n    installPolyfills(gl, WEBGL2_CONTEXT_POLYFILLS);\n    installOverrides(gl, {target: luma, target2: gl});\n    luma.polyfilled = true;\n  }\n\n  // TODO - only supporting a few members\n  /** @type {WebGL2RenderingContext} */\n  // @ts-ignore\n  return gl;\n}\n\n// TODO - is this still required?\nconst global_ = typeof global !== 'undefined' ? global : window;\n// @ts-ignore\nglobal_.polyfillContext = polyfillContext;\n\nfunction initializeExtensions(gl) {\n  gl.luma.extensions = {};\n  // `getSupportedExtensions` can return null when context is lost.\n  const EXTENSIONS = gl.getSupportedExtensions() || [];\n  for (const extension of EXTENSIONS) {\n    gl.luma[extension] = gl.getExtension(extension);\n  }\n}\n\n// Install simple overrides (mostly get* functions)\nfunction installOverrides(gl, {target, target2}) {\n  Object.keys(WEBGL2_CONTEXT_OVERRIDES).forEach(key => {\n    if (typeof WEBGL2_CONTEXT_OVERRIDES[key] === 'function') {\n      // install an override, if no implementation was detected\n      const originalFunc = gl[key] ? gl[key].bind(gl) : () => {};\n      const polyfill = WEBGL2_CONTEXT_OVERRIDES[key].bind(null, gl, originalFunc);\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  });\n}\n\nfunction installPolyfills(gl, polyfills) {\n  for (const extension of Object.getOwnPropertyNames(polyfills)) {\n    if (extension !== 'overrides') {\n      polyfillExtension(gl, {extension, target: gl.luma, target2: gl});\n    }\n  }\n}\n\n// Polyfills a single WebGL extension into the `target` object\nfunction polyfillExtension(gl, {extension, target, target2}) {\n  const defaults = WEBGL2_CONTEXT_POLYFILLS[extension];\n  assert(defaults);\n\n  const {meta = {}} = defaults;\n  const {suffix = ''} = meta;\n\n  const ext = gl.getExtension(extension);\n\n  for (const key of Object.keys(defaults)) {\n    const extKey = `${key}${suffix}`;\n\n    let polyfill = null;\n    if (key === 'meta') {\n      // ignore\n    } else if (typeof gl[key] === 'function') {\n      // WebGL2 implementation is already\n    } else if (ext && typeof ext[extKey] === 'function') {\n      // pick extension implemenentation,if available\n      polyfill = (...args) => ext[extKey](...args);\n    } else if (typeof defaults[key] === 'function') {\n      // pick the mock implementation, if no implementation was detected\n      polyfill = defaults[key].bind(target);\n    }\n\n    if (polyfill) {\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}