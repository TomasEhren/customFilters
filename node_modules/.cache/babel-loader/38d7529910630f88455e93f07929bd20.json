{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Vector3, Matrix4 } from '@math.gl/core';\nimport { assert, uid } from '@luma.gl/webgl';\n\nvar ScenegraphNode = /*#__PURE__*/function () {\n  function ScenegraphNode() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ScenegraphNode);\n\n    var id = props.id;\n    this.id = id || uid(this.constructor.name);\n    this.display = true;\n    this.position = new Vector3();\n    this.rotation = new Vector3();\n    this.scale = new Vector3(1, 1, 1);\n    this.matrix = new Matrix4();\n    this.userData = {};\n    this.props = {};\n\n    this._setScenegraphNodeProps(props);\n  }\n\n  _createClass(ScenegraphNode, [{\n    key: \"delete\",\n    value: function _delete() {}\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      this._setScenegraphNodeProps(props);\n\n      return this;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"{type: ScenegraphNode, id: \".concat(this.id, \")}\");\n    }\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(position) {\n      assert(position.length === 3, 'setPosition requires vector argument');\n      this.position = position;\n      return this;\n    }\n  }, {\n    key: \"setRotation\",\n    value: function setRotation(rotation) {\n      assert(rotation.length === 3, 'setRotation requires vector argument');\n      this.rotation = rotation;\n      return this;\n    }\n  }, {\n    key: \"setScale\",\n    value: function setScale(scale) {\n      assert(scale.length === 3, 'setScale requires vector argument');\n      this.scale = scale;\n      return this;\n    }\n  }, {\n    key: \"setMatrix\",\n    value: function setMatrix(matrix) {\n      var copyMatrix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (copyMatrix) {\n        this.matrix.copy(matrix);\n      } else {\n        this.matrix = matrix;\n      }\n    }\n  }, {\n    key: \"setMatrixComponents\",\n    value: function setMatrixComponents(_ref) {\n      var position = _ref.position,\n          rotation = _ref.rotation,\n          scale = _ref.scale,\n          _ref$update = _ref.update,\n          update = _ref$update === void 0 ? true : _ref$update;\n\n      if (position) {\n        this.setPosition(position);\n      }\n\n      if (rotation) {\n        this.setRotation(rotation);\n      }\n\n      if (scale) {\n        this.setScale(scale);\n      }\n\n      if (update) {\n        this.updateMatrix();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"updateMatrix\",\n    value: function updateMatrix() {\n      var pos = this.position;\n      var rot = this.rotation;\n      var scale = this.scale;\n      this.matrix.identity();\n      this.matrix.translate(pos);\n      this.matrix.rotateXYZ(rot);\n      this.matrix.scale(scale);\n      return this;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var position = options.position,\n          rotation = options.rotation,\n          scale = options.scale;\n\n      if (position) {\n        this.setPosition(position);\n      }\n\n      if (rotation) {\n        this.setRotation(rotation);\n      }\n\n      if (scale) {\n        this.setScale(scale);\n      }\n\n      this.updateMatrix();\n      return this;\n    }\n  }, {\n    key: \"getCoordinateUniforms\",\n    value: function getCoordinateUniforms(viewMatrix, modelMatrix) {\n      assert(viewMatrix);\n      modelMatrix = modelMatrix || this.matrix;\n      var worldMatrix = new Matrix4(viewMatrix).multiplyRight(modelMatrix);\n      var worldInverse = worldMatrix.invert();\n      var worldInverseTranspose = worldInverse.transpose();\n      return {\n        viewMatrix: viewMatrix,\n        modelMatrix: modelMatrix,\n        objectMatrix: modelMatrix,\n        worldMatrix: worldMatrix,\n        worldInverseMatrix: worldInverse,\n        worldInverseTransposeMatrix: worldInverseTranspose\n      };\n    }\n  }, {\n    key: \"_setScenegraphNodeProps\",\n    value: function _setScenegraphNodeProps(props) {\n      if ('display' in props) {\n        this.display = props.display;\n      }\n\n      if ('position' in props) {\n        this.setPosition(props.position);\n      }\n\n      if ('rotation' in props) {\n        this.setRotation(props.rotation);\n      }\n\n      if ('scale' in props) {\n        this.setScale(props.scale);\n      }\n\n      if ('matrix' in props) {\n        this.setMatrix(props.matrix);\n      }\n\n      Object.assign(this.props, props);\n    }\n  }]);\n\n  return ScenegraphNode;\n}();\n\nexport { ScenegraphNode as default };","map":{"version":3,"mappings":"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","names":["Vector3","Matrix4","assert","uid","ScenegraphNode","constructor","props","id","name","display","position","rotation","scale","matrix","userData","_setScenegraphNodeProps","delete","setProps","toString","setPosition","length","setRotation","setScale","setMatrix","copyMatrix","copy","setMatrixComponents","update","updateMatrix","pos","rot","identity","translate","rotateXYZ","options","getCoordinateUniforms","viewMatrix","modelMatrix","worldMatrix","multiplyRight","worldInverse","invert","worldInverseTranspose","transpose","objectMatrix","worldInverseMatrix","worldInverseTransposeMatrix","Object","assign"],"sources":["../../../src/scenegraph/scenegraph-node.js"],"sourcesContent":["import {Vector3, Matrix4} from '@math.gl/core';\nimport {assert, uid} from '@luma.gl/webgl';\n\nexport default class ScenegraphNode {\n  constructor(props = {}) {\n    const {id} = props;\n\n    this.id = id || uid(this.constructor.name);\n\n    this.display = true; // whether to display the object at all\n    this.position = new Vector3();\n    this.rotation = new Vector3();\n    this.scale = new Vector3(1, 1, 1);\n    this.matrix = new Matrix4();\n    this.userData = {};\n\n    this.props = {};\n    this._setScenegraphNodeProps(props);\n  }\n\n  delete() {}\n\n  setProps(props) {\n    this._setScenegraphNodeProps(props);\n    return this;\n  }\n\n  toString() {\n    return `{type: ScenegraphNode, id: ${this.id})}`;\n  }\n\n  setPosition(position) {\n    assert(position.length === 3, 'setPosition requires vector argument');\n    this.position = position;\n    return this;\n  }\n\n  setRotation(rotation) {\n    assert(rotation.length === 3, 'setRotation requires vector argument');\n    this.rotation = rotation;\n    return this;\n  }\n\n  setScale(scale) {\n    assert(scale.length === 3, 'setScale requires vector argument');\n    this.scale = scale;\n    return this;\n  }\n\n  setMatrix(matrix, copyMatrix = true) {\n    if (copyMatrix) {\n      this.matrix.copy(matrix);\n    } else {\n      this.matrix = matrix;\n    }\n  }\n\n  setMatrixComponents({position, rotation, scale, update = true}) {\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    if (update) {\n      this.updateMatrix();\n    }\n    return this;\n  }\n\n  updateMatrix() {\n    const pos = this.position;\n    const rot = this.rotation;\n    const scale = this.scale;\n\n    this.matrix.identity();\n    this.matrix.translate(pos);\n    this.matrix.rotateXYZ(rot);\n    this.matrix.scale(scale);\n    return this;\n  }\n\n  update(options = {}) {\n    const {position, rotation, scale} = options;\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    this.updateMatrix();\n    return this;\n  }\n\n  getCoordinateUniforms(viewMatrix, modelMatrix) {\n    // TODO - solve multiple class problem\n    // assert(viewMatrix instanceof Matrix4);\n    assert(viewMatrix);\n    modelMatrix = modelMatrix || this.matrix;\n    const worldMatrix = new Matrix4(viewMatrix).multiplyRight(modelMatrix);\n    const worldInverse = worldMatrix.invert();\n    const worldInverseTranspose = worldInverse.transpose();\n\n    return {\n      viewMatrix,\n      modelMatrix,\n      objectMatrix: modelMatrix,\n      worldMatrix,\n      worldInverseMatrix: worldInverse,\n      worldInverseTransposeMatrix: worldInverseTranspose\n    };\n  }\n\n  // TODO - copied code, not yet vetted\n  /*\n  transform() {\n    if (!this.parent) {\n      this.endPosition.set(this.position);\n      this.endRotation.set(this.rotation);\n      this.endScale.set(this.scale);\n    } else {\n      const parent = this.parent;\n      this.endPosition.set(this.position.add(parent.endPosition));\n      this.endRotation.set(this.rotation.add(parent.endRotation));\n      this.endScale.set(this.scale.add(parent.endScale));\n    }\n\n    const ch = this.children;\n    for (let i = 0; i < ch.length; ++i) {\n      ch[i].transform();\n    }\n\n    return this;\n  }\n  */\n\n  _setScenegraphNodeProps(props) {\n    if ('display' in props) {\n      this.display = props.display;\n    }\n\n    if ('position' in props) {\n      this.setPosition(props.position);\n    }\n    if ('rotation' in props) {\n      this.setRotation(props.rotation);\n    }\n    if ('scale' in props) {\n      this.setScale(props.scale);\n    }\n\n    // Matrix overwrites other props\n    if ('matrix' in props) {\n      this.setMatrix(props.matrix);\n    }\n\n    Object.assign(this.props, props);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}