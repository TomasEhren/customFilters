{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport GeoCellLayer from '../geo-cell-layer/GeoCellLayer';\nimport { getS2Polygon } from './s2-utils';\nvar defaultProps = {\n  getS2Token: {\n    type: 'accessor',\n    value: function value(d) {\n      return d.token;\n    }\n  }\n};\n\nvar S2Layer = /*#__PURE__*/function (_GeoCellLayer) {\n  _inherits(S2Layer, _GeoCellLayer);\n\n  var _super = _createSuper(S2Layer);\n\n  function S2Layer() {\n    _classCallCheck(this, S2Layer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(S2Layer, [{\n    key: \"indexToBounds\",\n    value: function indexToBounds() {\n      var _this$props = this.props,\n          data = _this$props.data,\n          getS2Token = _this$props.getS2Token;\n      return {\n        data: data,\n        _normalize: false,\n        positionFormat: 'XY',\n        getPolygon: function getPolygon(x, objectInfo) {\n          return getS2Polygon(getS2Token(x, objectInfo));\n        }\n      };\n    }\n  }]);\n\n  return S2Layer;\n}(GeoCellLayer);\n\nexport { S2Layer as default };\nS2Layer.layerName = 'S2Layer';\nS2Layer.defaultProps = defaultProps;","map":{"version":3,"mappings":";;;;AAoBA,OAAOA,YAAP,MAAyB,gCAAzB;AACA,SAAQC,YAAR,QAA2B,YAA3B;AAEA,IAAMC,YAAY,GAAG;EACnBC,UAAU,EAAE;IAACC,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAEC,gBAAC;MAAA,OAAIA,CAAC,CAACC,KAAN;IAAA;EAA3B;AADO,CAArB;;IAIqBC,O;;;;;;;;;;;;;WACnBC,yBAAgB;MACd,kBAA2B,KAAKC,KAAhC;MAAA,IAAOC,IAAP,eAAOA,IAAP;MAAA,IAAaR,UAAb,eAAaA,UAAb;MAEA,OAAO;QACLQ,IADK,EACLA,IADK;QAELC,UAAU,EAAE,KAFP;QAGLC,cAAc,EAAE,IAHX;QAILC,UAAU,EAAE,oBAACC,CAAD,EAAIC,UAAJ;UAAA,OAAmBf,YAAY,CAACE,UAAU,CAACY,CAAD,EAAIC,UAAJ,CAAX,CAA/B;QAAA;MAJP,CAAP;IAMD;;;;EAVkChB,Y;;SAAhBQ,O;AAarBA,OAAO,CAACS,SAART,GAAoB,SAApBA;AACAA,OAAO,CAACN,YAARM,GAAuBN,YAAvBM","names":["GeoCellLayer","getS2Polygon","defaultProps","getS2Token","type","value","d","token","S2Layer","indexToBounds","props","data","_normalize","positionFormat","getPolygon","x","objectInfo","layerName"],"sources":["../../../src/s2-layer/s2-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GeoCellLayer from '../geo-cell-layer/GeoCellLayer';\nimport {getS2Polygon} from './s2-utils';\n\nconst defaultProps = {\n  getS2Token: {type: 'accessor', value: d => d.token}\n};\n\nexport default class S2Layer extends GeoCellLayer {\n  indexToBounds() {\n    const {data, getS2Token} = this.props;\n\n    return {\n      data,\n      _normalize: false,\n      positionFormat: 'XY',\n      getPolygon: (x, objectInfo) => getS2Polygon(getS2Token(x, objectInfo))\n    };\n  }\n}\n\nS2Layer.layerName = 'S2Layer';\nS2Layer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}