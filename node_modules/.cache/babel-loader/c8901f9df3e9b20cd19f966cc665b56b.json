{"ast":null,"code":"import _toConsumableArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport Protobuf from 'pbf';\nimport { log } from '@deck.gl/core';\nimport { ClipExtension } from '@deck.gl/extensions';\nimport { MVTLayer, _getURLFromTemplate } from '@deck.gl/geo-layers';\nimport { GeoJsonLayer } from '@deck.gl/layers';\nimport { geojsonToBinary } from '@loaders.gl/gis';\nimport { Tile } from './schema/carto-tile';\nimport { TILE_FORMATS } from '../api/maps-api-common';\n\nfunction parseJSON(arrayBuffer) {\n  return JSON.parse(new TextDecoder().decode(arrayBuffer));\n}\n\nfunction parsePbf(buffer) {\n  var pbf = new Protobuf(buffer);\n  var tile = Tile.read(pbf);\n  return tile;\n}\n\nfunction unpackProperties(properties) {\n  if (!properties || !properties.length) {\n    return [];\n  }\n\n  return properties.map(function (item) {\n    var currentRecord = {};\n    item.data.forEach(function (_ref) {\n      var key = _ref.key,\n          value = _ref.value;\n      currentRecord[key] = value;\n    });\n    return currentRecord;\n  });\n}\n\nfunction parseCartoTile(arrayBuffer, options) {\n  if (!arrayBuffer) return null;\n  var formatTiles = options && options.cartoTile && options.cartoTile.formatTiles;\n  if (formatTiles === TILE_FORMATS.GEOJSON) return geojsonToBinary(parseJSON(arrayBuffer).features);\n  var tile = parsePbf(arrayBuffer);\n  var points = tile.points,\n      lines = tile.lines,\n      polygons = tile.polygons;\n  var data = {\n    points: _objectSpread(_objectSpread({}, points), {}, {\n      properties: unpackProperties(points.properties)\n    }),\n    lines: _objectSpread(_objectSpread({}, lines), {}, {\n      properties: unpackProperties(lines.properties)\n    }),\n    polygons: _objectSpread(_objectSpread({}, polygons), {}, {\n      properties: unpackProperties(polygons.properties)\n    })\n  };\n  return data;\n}\n\nvar defaultTileFormat = TILE_FORMATS.BINARY;\nvar CartoTileLoader = {\n  name: 'CARTO Tile',\n  id: 'cartoTile',\n  module: 'carto',\n  extensions: ['pbf'],\n  mimeTypes: ['application/x-protobuf'],\n  category: 'geometry',\n  worker: false,\n  parse: function () {\n    var _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(arrayBuffer, options) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", parseCartoTile(arrayBuffer, options));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function parse(_x, _x2) {\n      return _parse.apply(this, arguments);\n    }\n\n    return parse;\n  }(),\n  parseSync: parseCartoTile,\n  options: {\n    cartoTile: {\n      formatTiles: defaultTileFormat\n    }\n  }\n};\n\nvar defaultProps = _objectSpread(_objectSpread({}, MVTLayer.defaultProps), {}, {\n  formatTiles: defaultTileFormat,\n  loaders: [CartoTileLoader]\n});\n\nvar CartoTileLayer = /*#__PURE__*/function (_MVTLayer) {\n  _inherits(CartoTileLayer, _MVTLayer);\n\n  var _super = _createSuper(CartoTileLayer);\n\n  function CartoTileLayer() {\n    _classCallCheck(this, CartoTileLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CartoTileLayer, [{\n    key: \"getTileData\",\n    value: function getTileData(tile) {\n      var url = _getURLFromTemplate(this.state.data, tile);\n\n      if (!url) {\n        return Promise.reject('Invalid URL');\n      }\n\n      var loadOptions = this.getLoadOptions();\n      var _this$props = this.props,\n          fetch = _this$props.fetch,\n          formatTiles = _this$props.formatTiles;\n      var signal = tile.signal;\n      loadOptions = _objectSpread(_objectSpread({}, loadOptions), {}, {\n        mimeType: 'application/x-protobuf'\n      });\n\n      if (formatTiles) {\n        log.assert(Object.values(TILE_FORMATS).includes(formatTiles), \"Invalid value for formatTiles: \".concat(formatTiles, \". Use value from TILE_FORMATS\"));\n        loadOptions.cartoTile = {\n          formatTiles: formatTiles\n        };\n      }\n\n      return fetch(url, {\n        propName: 'data',\n        layer: this,\n        loadOptions: loadOptions,\n        signal: signal\n      });\n    }\n  }, {\n    key: \"renderSubLayers\",\n    value: function renderSubLayers(props) {\n      if (props.data === null) {\n        return null;\n      }\n\n      props.autoHighlight = false;\n      var _props$tile$bbox = props.tile.bbox,\n          west = _props$tile$bbox.west,\n          south = _props$tile$bbox.south,\n          east = _props$tile$bbox.east,\n          north = _props$tile$bbox.north;\n      props.extensions = [new ClipExtension()].concat(_toConsumableArray(props.extensions || []));\n      props.clipBounds = [west, south, east, north];\n      var subLayer = new GeoJsonLayer(_objectSpread({}, props));\n      return subLayer;\n    }\n  }]);\n\n  return CartoTileLayer;\n}(MVTLayer);\n\nexport { CartoTileLayer as default };\nCartoTileLayer.layerName = 'CartoTileLayer';\nCartoTileLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["Protobuf","log","ClipExtension","MVTLayer","_getURLFromTemplate","GeoJsonLayer","geojsonToBinary","Tile","TILE_FORMATS","parseJSON","arrayBuffer","JSON","parse","TextDecoder","decode","parsePbf","buffer","pbf","tile","read","unpackProperties","properties","length","map","item","currentRecord","data","forEach","key","value","parseCartoTile","options","formatTiles","cartoTile","GEOJSON","features","points","lines","polygons","defaultTileFormat","BINARY","CartoTileLoader","name","id","module","extensions","mimeTypes","category","worker","parseSync","defaultProps","loaders","CartoTileLayer","getTileData","url","state","Promise","reject","loadOptions","getLoadOptions","props","fetch","signal","mimeType","assert","Object","values","includes","propName","layer","renderSubLayers","autoHighlight","bbox","west","south","east","north","clipBounds","subLayer","layerName"],"sources":["../../../src/layers/carto-tile-layer.js"],"sourcesContent":["/* global TextDecoder */\nimport Protobuf from 'pbf';\nimport {log} from '@deck.gl/core';\nimport {ClipExtension} from '@deck.gl/extensions';\nimport {MVTLayer, _getURLFromTemplate} from '@deck.gl/geo-layers';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {geojsonToBinary} from '@loaders.gl/gis';\nimport {Tile} from './schema/carto-tile';\nimport {TILE_FORMATS} from '../api/maps-api-common';\n\nfunction parseJSON(arrayBuffer) {\n  return JSON.parse(new TextDecoder().decode(arrayBuffer));\n}\n\nfunction parsePbf(buffer) {\n  const pbf = new Protobuf(buffer);\n  const tile = Tile.read(pbf);\n  return tile;\n}\n\nfunction unpackProperties(properties) {\n  if (!properties || !properties.length) {\n    return [];\n  }\n  return properties.map(item => {\n    const currentRecord = {};\n    item.data.forEach(({key, value}) => {\n      currentRecord[key] = value;\n    });\n    return currentRecord;\n  });\n}\n\nfunction parseCartoTile(arrayBuffer, options) {\n  if (!arrayBuffer) return null;\n  const formatTiles = options && options.cartoTile && options.cartoTile.formatTiles;\n  if (formatTiles === TILE_FORMATS.GEOJSON) return geojsonToBinary(parseJSON(arrayBuffer).features);\n\n  const tile = parsePbf(arrayBuffer);\n\n  const {points, lines, polygons} = tile;\n  const data = {\n    points: {...points, properties: unpackProperties(points.properties)},\n    lines: {...lines, properties: unpackProperties(lines.properties)},\n    polygons: {...polygons, properties: unpackProperties(polygons.properties)}\n  };\n\n  return data;\n}\n\nconst defaultTileFormat = TILE_FORMATS.BINARY;\n\nconst CartoTileLoader = {\n  name: 'CARTO Tile',\n  id: 'cartoTile',\n  module: 'carto',\n  extensions: ['pbf'],\n  mimeTypes: ['application/x-protobuf'],\n  category: 'geometry',\n  worker: false,\n  parse: async (arrayBuffer, options) => parseCartoTile(arrayBuffer, options),\n  parseSync: parseCartoTile,\n  options: {\n    cartoTile: {\n      formatTiles: defaultTileFormat\n    }\n  }\n};\n\nconst defaultProps = {\n  ...MVTLayer.defaultProps,\n  formatTiles: defaultTileFormat,\n  loaders: [CartoTileLoader]\n};\n\nexport default class CartoTileLayer extends MVTLayer {\n  getTileData(tile) {\n    const url = _getURLFromTemplate(this.state.data, tile);\n    if (!url) {\n      return Promise.reject('Invalid URL');\n    }\n\n    let loadOptions = this.getLoadOptions();\n    const {fetch, formatTiles} = this.props;\n    const {signal} = tile;\n\n    loadOptions = {\n      ...loadOptions,\n      mimeType: 'application/x-protobuf'\n    };\n\n    if (formatTiles) {\n      log.assert(\n        Object.values(TILE_FORMATS).includes(formatTiles),\n        `Invalid value for formatTiles: ${formatTiles}. Use value from TILE_FORMATS`\n      );\n      loadOptions.cartoTile = {formatTiles};\n    }\n\n    return fetch(url, {propName: 'data', layer: this, loadOptions, signal});\n  }\n\n  renderSubLayers(props) {\n    if (props.data === null) {\n      return null;\n    }\n\n    props.autoHighlight = false;\n\n    const {\n      bbox: {west, south, east, north}\n    } = props.tile;\n    props.extensions = [new ClipExtension(), ...(props.extensions || [])];\n    props.clipBounds = [west, south, east, north];\n\n    const subLayer = new GeoJsonLayer({\n      ...props\n    });\n    return subLayer;\n  }\n}\n\nCartoTileLayer.layerName = 'CartoTileLayer';\nCartoTileLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}