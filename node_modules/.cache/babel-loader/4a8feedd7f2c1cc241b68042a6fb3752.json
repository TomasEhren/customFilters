{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Draw90DegreePolygonMode = void 0;\n\nvar _destination = _interopRequireDefault(require(\"@turf/destination\"));\n\nvar _bearing = _interopRequireDefault(require(\"@turf/bearing\"));\n\nvar _lineIntersect = _interopRequireDefault(require(\"@turf/line-intersect\"));\n\nvar _distance = _interopRequireDefault(require(\"@turf/distance\"));\n\nvar _helpers = require(\"@turf/helpers\");\n\nvar _utils = require(\"../utils\");\n\nvar _geojsonEditMode = require(\"./geojson-edit-mode\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar Draw90DegreePolygonMode = /*#__PURE__*/function (_GeoJsonEditMode) {\n  _inherits(Draw90DegreePolygonMode, _GeoJsonEditMode);\n\n  var _super = _createSuper(Draw90DegreePolygonMode);\n\n  function Draw90DegreePolygonMode() {\n    _classCallCheck(this, Draw90DegreePolygonMode);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Draw90DegreePolygonMode, [{\n    key: \"createTentativeFeature\",\n    value: function createTentativeFeature(props) {\n      var clickSequence = this.getClickSequence();\n      var mapCoords = props.lastPointerMoveEvent.mapCoords;\n      var p3;\n\n      if (clickSequence.length === 1) {\n        p3 = mapCoords;\n      } else {\n        var p1 = clickSequence[clickSequence.length - 2];\n        var p2 = clickSequence[clickSequence.length - 1];\n\n        var _generatePointsParall = (0, _utils.generatePointsParallelToLinePoints)(p1, p2, mapCoords);\n\n        var _generatePointsParall2 = _slicedToArray(_generatePointsParall, 1);\n\n        p3 = _generatePointsParall2[0];\n      }\n\n      var tentativeFeature;\n\n      if (clickSequence.length < 3) {\n        // Draw a LineString connecting all the clicked points with the hovered point\n        tentativeFeature = {\n          type: 'Feature',\n          properties: {\n            guideType: 'tentative'\n          },\n          geometry: {\n            type: 'LineString',\n            coordinates: [].concat(_toConsumableArray(clickSequence), [p3])\n          }\n        };\n      } else {\n        // Draw a Polygon connecting all the clicked points with the hovered point\n        tentativeFeature = {\n          type: 'Feature',\n          properties: {\n            guideType: 'tentative'\n          },\n          geometry: {\n            type: 'Polygon',\n            coordinates: [[].concat(_toConsumableArray(clickSequence), [p3, clickSequence[0]])]\n          }\n        };\n      }\n\n      return tentativeFeature;\n    }\n  }, {\n    key: \"getGuides\",\n    value: function getGuides(props) {\n      var guides = {\n        type: 'FeatureCollection',\n        features: []\n      };\n      var clickSequence = this.getClickSequence();\n\n      if (clickSequence.length === 0 || !props.lastPointerMoveEvent) {\n        return guides;\n      }\n\n      var tentativeFeature = this.createTentativeFeature(props);\n      guides.features.push(tentativeFeature);\n      guides.features = guides.features.concat((0, _utils.getEditHandlesForGeometry)(tentativeFeature.geometry, -1)); // Slice off the handles that are are next to the pointer\n\n      guides.features = guides.features.slice(0, -1);\n      return guides;\n    }\n  }, {\n    key: \"handlePointerMove\",\n    value: function handlePointerMove(event, props) {\n      props.onUpdateCursor('cell');\n\n      _get(_getPrototypeOf(Draw90DegreePolygonMode.prototype), \"handlePointerMove\", this).call(this, event, props);\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event, props) {\n      var picks = event.picks;\n      var tentativeFeature = this.getTentativeGuide(props);\n      this.addClickSequence(event);\n      var clickSequence = this.getClickSequence();\n\n      if (!tentativeFeature) {\n        // nothing else to do\n        return;\n      }\n\n      if (clickSequence.length === 3 && tentativeFeature.geometry.type === 'LineString') {\n        var lineString = tentativeFeature.geometry; // Tweak the clicked position to be the snapped 90 degree point along the polygon\n\n        clickSequence[clickSequence.length - 1] = lineString.coordinates[lineString.coordinates.length - 1];\n      } else if (clickSequence.length > 3 && tentativeFeature.geometry.type === 'Polygon') {\n        var polygon = tentativeFeature.geometry; // Tweak the clicked position to be the snapped 90 degree point along the polygon\n\n        clickSequence[clickSequence.length - 1] = polygon.coordinates[0][polygon.coordinates[0].length - 2];\n        var clickedEditHandle = (0, _utils.getPickedEditHandle)(picks);\n\n        if (clickedEditHandle && Array.isArray(clickedEditHandle.properties.positionIndexes) && (clickedEditHandle.properties.positionIndexes[1] === 0 || clickedEditHandle.properties.positionIndexes[1] === polygon.coordinates[0].length - 3)) {\n          // They clicked the first or last point (or double-clicked), so complete the polygon\n          var polygonToAdd = {\n            type: 'Polygon',\n            coordinates: this.finalizedCoordinates(_toConsumableArray(polygon.coordinates[0]))\n          };\n          this.resetClickSequence();\n          var editAction = this.getAddFeatureOrBooleanPolygonAction(polygonToAdd, props);\n\n          if (editAction) {\n            props.onEdit(editAction);\n          }\n        }\n      } // Trigger pointer move right away in order for it to update edit handles (to support double-click)\n\n\n      var fakePointerMoveEvent = {\n        screenCoords: [-1, -1],\n        mapCoords: event.mapCoords,\n        picks: [],\n        pointerDownPicks: null,\n        pointerDownScreenCoords: null,\n        pointerDownMapCoords: null,\n        cancelPan: function cancelPan() {},\n        sourceEvent: null\n      };\n      this.handlePointerMove(fakePointerMoveEvent, props);\n    }\n  }, {\n    key: \"finalizedCoordinates\",\n    value: function finalizedCoordinates(coords) {\n      // Remove the hovered position\n      var coordinates = [[].concat(_toConsumableArray(coords.slice(0, -2)), [coords[0]])];\n      var pt = this.getIntermediatePoint(_toConsumableArray(coords));\n\n      if (!pt) {\n        // if intermediate point with 90 degree not available\n        // try remove the last clicked point and get the intermediate point.\n        var tc = _toConsumableArray(coords);\n\n        tc.splice(-3, 1);\n        pt = this.getIntermediatePoint(_toConsumableArray(tc));\n\n        if (pt) {\n          coordinates = [[].concat(_toConsumableArray(coords.slice(0, -3)), [pt, coords[0]])];\n        }\n      } else {\n        coordinates = [[].concat(_toConsumableArray(coords.slice(0, -2)), [pt, coords[0]])];\n      }\n\n      return coordinates;\n    }\n  }, {\n    key: \"getIntermediatePoint\",\n    value: function getIntermediatePoint(coordinates) {\n      var pt;\n\n      if (coordinates.length > 4) {\n        var _ref = _toConsumableArray(coordinates),\n            p1 = _ref[0],\n            p2 = _ref[1];\n\n        var angle1 = (0, _bearing[\"default\"])(p1, p2);\n        var p3 = coordinates[coordinates.length - 3];\n        var p4 = coordinates[coordinates.length - 4];\n        var angle2 = (0, _bearing[\"default\"])(p3, p4);\n        var angles = {\n          first: [],\n          second: []\n        }; // calculate 3 right angle points for first and last points in lineString\n\n        [1, 2, 3].forEach(function (factor) {\n          var newAngle1 = angle1 + factor * 90; // convert angles to 0 to -180 for anti-clock and 0 to 180 for clock wise\n\n          angles.first.push(newAngle1 > 180 ? newAngle1 - 360 : newAngle1);\n          var newAngle2 = angle2 + factor * 90;\n          angles.second.push(newAngle2 > 180 ? newAngle2 - 360 : newAngle2);\n        });\n        var distance = (0, _distance[\"default\"])((0, _helpers.point)(p1), (0, _helpers.point)(p3)); // Draw imaginary right angle lines for both first and last points in lineString\n        // If there is intersection point for any 2 lines, will be the 90 degree point.\n\n        [0, 1, 2].forEach(function (indexFirst) {\n          var line1 = (0, _helpers.lineString)([p1, (0, _destination[\"default\"])(p1, distance, angles.first[indexFirst]).geometry.coordinates]);\n          [0, 1, 2].forEach(function (indexSecond) {\n            var line2 = (0, _helpers.lineString)([p3, (0, _destination[\"default\"])(p3, distance, angles.second[indexSecond]).geometry.coordinates]);\n            var fc = (0, _lineIntersect[\"default\"])(line1, line2);\n\n            if (fc && fc.features.length) {\n              // found the intersect point\n              pt = fc.features[0].geometry.coordinates;\n            }\n          });\n        });\n      }\n\n      return pt;\n    }\n  }]);\n\n  return Draw90DegreePolygonMode;\n}(_geojsonEditMode.GeoJsonEditMode);\n\nexports.Draw90DegreePolygonMode = Draw90DegreePolygonMode;","map":{"version":3,"mappings":"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","names":["Draw90DegreePolygonMode","props","clickSequence","getClickSequence","mapCoords","lastPointerMoveEvent","p3","length","p1","p2","tentativeFeature","type","properties","guideType","geometry","coordinates","guides","features","createTentativeFeature","push","concat","slice","event","onUpdateCursor","_get","picks","getTentativeGuide","addClickSequence","lineString","polygon","clickedEditHandle","Array","isArray","positionIndexes","polygonToAdd","finalizedCoordinates","resetClickSequence","editAction","getAddFeatureOrBooleanPolygonAction","onEdit","fakePointerMoveEvent","screenCoords","pointerDownPicks","pointerDownScreenCoords","pointerDownMapCoords","cancelPan","sourceEvent","handlePointerMove","coords","pt","getIntermediatePoint","tc","splice","angle1","p4","angle2","angles","first","second","forEach","factor","newAngle1","newAngle2","distance","indexFirst","line1","indexSecond","line2","fc","GeoJsonEditMode"],"sources":["../../src/lib/draw-90degree-polygon-mode.ts"],"sourcesContent":["import destination from '@turf/destination';\nimport bearing from '@turf/bearing';\nimport lineIntersect from '@turf/line-intersect';\nimport turfDistance from '@turf/distance';\nimport { point, lineString as turfLineString } from '@turf/helpers';\nimport {\n  generatePointsParallelToLinePoints,\n  getPickedEditHandle,\n  getEditHandlesForGeometry,\n} from '../utils';\nimport {\n  ClickEvent,\n  PointerMoveEvent,\n  ModeProps,\n  GuideFeatureCollection,\n  TentativeFeature,\n} from '../types';\nimport { Polygon, LineString, Position, FeatureCollection } from '../geojson-types';\nimport { GeoJsonEditMode } from './geojson-edit-mode';\n\nexport class Draw90DegreePolygonMode extends GeoJsonEditMode {\n  createTentativeFeature(props: ModeProps<FeatureCollection>): TentativeFeature {\n    const clickSequence = this.getClickSequence();\n\n    const { mapCoords } = props.lastPointerMoveEvent;\n\n    let p3;\n    if (clickSequence.length === 1) {\n      p3 = mapCoords;\n    } else {\n      const p1 = clickSequence[clickSequence.length - 2];\n      const p2 = clickSequence[clickSequence.length - 1];\n      [p3] = generatePointsParallelToLinePoints(p1, p2, mapCoords);\n    }\n\n    let tentativeFeature;\n\n    if (clickSequence.length < 3) {\n      // Draw a LineString connecting all the clicked points with the hovered point\n      tentativeFeature = {\n        type: 'Feature',\n        properties: {\n          guideType: 'tentative',\n        },\n        geometry: {\n          type: 'LineString',\n          coordinates: [...clickSequence, p3],\n        },\n      };\n    } else {\n      // Draw a Polygon connecting all the clicked points with the hovered point\n      tentativeFeature = {\n        type: 'Feature',\n        properties: {\n          guideType: 'tentative',\n        },\n        geometry: {\n          type: 'Polygon',\n          coordinates: [[...clickSequence, p3, clickSequence[0]]],\n        },\n      };\n    }\n\n    return tentativeFeature;\n  }\n\n  getGuides(props: ModeProps<FeatureCollection>): GuideFeatureCollection {\n    const guides: GuideFeatureCollection = {\n      type: 'FeatureCollection',\n      features: [],\n    };\n\n    const clickSequence = this.getClickSequence();\n\n    if (clickSequence.length === 0 || !props.lastPointerMoveEvent) {\n      return guides;\n    }\n    const tentativeFeature = this.createTentativeFeature(props);\n\n    guides.features.push(tentativeFeature);\n\n    guides.features = guides.features.concat(\n      getEditHandlesForGeometry(tentativeFeature.geometry, -1)\n    );\n\n    // Slice off the handles that are are next to the pointer\n    guides.features = guides.features.slice(0, -1);\n\n    return guides;\n  }\n\n  handlePointerMove(event: PointerMoveEvent, props: ModeProps<FeatureCollection>) {\n    props.onUpdateCursor('cell');\n    super.handlePointerMove(event, props);\n  }\n\n  handleClick(event: ClickEvent, props: ModeProps<FeatureCollection>) {\n    const { picks } = event;\n    const tentativeFeature = this.getTentativeGuide(props);\n    this.addClickSequence(event);\n    const clickSequence = this.getClickSequence();\n\n    if (!tentativeFeature) {\n      // nothing else to do\n      return;\n    }\n\n    if (clickSequence.length === 3 && tentativeFeature.geometry.type === 'LineString') {\n      const lineString: LineString = tentativeFeature.geometry;\n\n      // Tweak the clicked position to be the snapped 90 degree point along the polygon\n      clickSequence[clickSequence.length - 1] =\n        lineString.coordinates[lineString.coordinates.length - 1];\n    } else if (clickSequence.length > 3 && tentativeFeature.geometry.type === 'Polygon') {\n      const polygon: Polygon = tentativeFeature.geometry;\n\n      // Tweak the clicked position to be the snapped 90 degree point along the polygon\n      clickSequence[clickSequence.length - 1] =\n        polygon.coordinates[0][polygon.coordinates[0].length - 2];\n\n      const clickedEditHandle = getPickedEditHandle(picks);\n\n      if (\n        clickedEditHandle &&\n        Array.isArray(clickedEditHandle.properties.positionIndexes) &&\n        (clickedEditHandle.properties.positionIndexes[1] === 0 ||\n          clickedEditHandle.properties.positionIndexes[1] === polygon.coordinates[0].length - 3)\n      ) {\n        // They clicked the first or last point (or double-clicked), so complete the polygon\n        const polygonToAdd: Polygon = {\n          type: 'Polygon',\n          coordinates: this.finalizedCoordinates([...polygon.coordinates[0]]),\n        };\n\n        this.resetClickSequence();\n\n        const editAction = this.getAddFeatureOrBooleanPolygonAction(polygonToAdd, props);\n        if (editAction) {\n          props.onEdit(editAction);\n        }\n      }\n    }\n\n    // Trigger pointer move right away in order for it to update edit handles (to support double-click)\n    const fakePointerMoveEvent: PointerMoveEvent = {\n      screenCoords: [-1, -1],\n      mapCoords: event.mapCoords,\n      picks: [],\n      pointerDownPicks: null,\n      pointerDownScreenCoords: null,\n      pointerDownMapCoords: null,\n      cancelPan: () => {},\n      sourceEvent: null,\n    };\n\n    this.handlePointerMove(fakePointerMoveEvent, props);\n  }\n\n  finalizedCoordinates(coords: Position[]) {\n    // Remove the hovered position\n    let coordinates = [[...coords.slice(0, -2), coords[0]]];\n    let pt = this.getIntermediatePoint([...coords]);\n    if (!pt) {\n      // if intermediate point with 90 degree not available\n      // try remove the last clicked point and get the intermediate point.\n      const tc = [...coords];\n      tc.splice(-3, 1);\n      pt = this.getIntermediatePoint([...tc]);\n      if (pt) {\n        coordinates = [[...coords.slice(0, -3), pt, coords[0]]];\n      }\n    } else {\n      coordinates = [[...coords.slice(0, -2), pt, coords[0]]];\n    }\n    return coordinates;\n  }\n\n  getIntermediatePoint(coordinates: Position[]) {\n    let pt;\n    if (coordinates.length > 4) {\n      const [p1, p2] = [...coordinates];\n      const angle1 = bearing(p1, p2);\n      const p3 = coordinates[coordinates.length - 3];\n      const p4 = coordinates[coordinates.length - 4];\n      const angle2 = bearing(p3, p4);\n\n      const angles = { first: [], second: [] };\n      // calculate 3 right angle points for first and last points in lineString\n      [1, 2, 3].forEach((factor) => {\n        const newAngle1 = angle1 + factor * 90;\n        // convert angles to 0 to -180 for anti-clock and 0 to 180 for clock wise\n        angles.first.push(newAngle1 > 180 ? newAngle1 - 360 : newAngle1);\n        const newAngle2 = angle2 + factor * 90;\n        angles.second.push(newAngle2 > 180 ? newAngle2 - 360 : newAngle2);\n      });\n\n      const distance = turfDistance(point(p1), point(p3));\n      // Draw imaginary right angle lines for both first and last points in lineString\n      // If there is intersection point for any 2 lines, will be the 90 degree point.\n      [0, 1, 2].forEach((indexFirst) => {\n        const line1 = turfLineString([\n          p1,\n          destination(p1, distance, angles.first[indexFirst]).geometry.coordinates,\n        ]);\n        [0, 1, 2].forEach((indexSecond) => {\n          const line2 = turfLineString([\n            p3,\n            destination(p3, distance, angles.second[indexSecond]).geometry.coordinates,\n          ]);\n          const fc = lineIntersect(line1, line2);\n          if (fc && fc.features.length) {\n            // found the intersect point\n            pt = fc.features[0].geometry.coordinates;\n          }\n        });\n      });\n    }\n    return pt;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}