{"ast":null,"code":"import { Tiles3DLoader } from './tiles-3d-loader';\nimport { getIonTilesetMetadata } from './lib/ion/ion';\n\nasync function preload(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options = options['cesium-ion'] || {};\n  const {\n    accessToken\n  } = options;\n  let assetId = options.assetId;\n\n  if (!Number.isFinite(assetId)) {\n    const matched = url.match(/\\/([0-9]+)\\/tileset.json/);\n    assetId = matched && matched[1];\n  }\n\n  return getIonTilesetMetadata(accessToken, assetId);\n}\n\nexport const CesiumIonLoader = { ...Tiles3DLoader,\n  id: 'cesium-ion',\n  name: 'Cesium Ion',\n  preload,\n  parse: async (data, options, context) => {\n    options = { ...options\n    };\n    options['3d-tiles'] = options['cesium-ion'];\n    options.loader = CesiumIonLoader;\n    return Tiles3DLoader.parse(data, options, context);\n  },\n  options: {\n    'cesium-ion': { ...Tiles3DLoader.options['3d-tiles'],\n      accessToken: null\n    }\n  }\n};","map":{"version":3,"mappings":"AACA,SAAQA,aAAR,QAA4B,mBAA5B;AACA,SAAQC,qBAAR,QAAoC,eAApC;;AAEA,eAAeC,OAAf,CAAuBC,GAAvB,EAA0C;EAAA,IAAdC,OAAc,uEAAJ,EAAI;EACxCA,OAAO,GAAGA,OAAO,CAAC,YAAD,CAAPA,IAAyB,EAAnCA;EAEA,MAAM;IAACC;EAAD,IAAgBD,OAAtB;EAEA,IAAIE,OAAO,GAAGF,OAAO,CAACE,OAAtB;;EACA,IAAI,CAACC,MAAM,CAACC,QAAPD,CAAgBD,OAAhBC,CAAL,EAA+B;IAC7B,MAAME,OAAO,GAAGN,GAAG,CAACO,KAAJP,CAAU,0BAAVA,CAAhB;IACAG,OAAO,GAAGG,OAAO,IAAIA,OAAO,CAAC,CAAD,CAA5BH;EACD;;EACD,OAAOL,qBAAqB,CAACI,WAAD,EAAcC,OAAd,CAA5B;AACD;;AAKD,OAAO,MAAMK,eAAiC,GAAG,EAC/C,GAAGX,aAD4C;EAE/CY,EAAE,EAAE,YAF2C;EAG/CC,IAAI,EAAE,YAHyC;EAK/CX,OAL+C;EAM/CY,KAAK,EAAE,OAAOC,IAAP,EAAaX,OAAb,EAAuBY,OAAvB,KAAoC;IACzCZ,OAAO,GAAG,EAAC,GAAGA;IAAJ,CAAVA;IACAA,OAAO,CAAC,UAAD,CAAPA,GAAsBA,OAAO,CAAC,YAAD,CAA7BA;IAEAA,OAAO,CAACa,MAARb,GAAiBO,eAAjBP;IACA,OAAOJ,aAAa,CAACc,KAAdd,CAAoBe,IAApBf,EAA0BI,OAA1BJ,EAAmCgB,OAAnChB,CAAP;EAX6C;EAa/CI,OAAO,EAAE;IACP,cAAc,EACZ,GAAGJ,aAAa,CAACI,OAAdJ,CAAsB,UAAtBA,CADS;MAEZK,WAAW,EAAE;IAFD;EADP;AAbsC,CAA1C","names":["Tiles3DLoader","getIonTilesetMetadata","preload","url","options","accessToken","assetId","Number","isFinite","matched","match","CesiumIonLoader","id","name","parse","data","context","loader"],"sources":["../../src/cesium-ion-loader.ts"],"sourcesContent":["import type {LoaderWithParser} from '@loaders.gl/loader-utils';\nimport {Tiles3DLoader} from './tiles-3d-loader';\nimport {getIonTilesetMetadata} from './lib/ion/ion';\n\nasync function preload(url, options = {}) {\n  options = options['cesium-ion'] || {};\n  // @ts-ignore\n  const {accessToken} = options;\n  // @ts-ignore\n  let assetId = options.assetId;\n  if (!Number.isFinite(assetId)) {\n    const matched = url.match(/\\/([0-9]+)\\/tileset.json/);\n    assetId = matched && matched[1];\n  }\n  return getIonTilesetMetadata(accessToken, assetId);\n}\n\n/**\n * Loader for 3D tiles from Cesium ION\n */\nexport const CesiumIonLoader: LoaderWithParser = {\n  ...Tiles3DLoader,\n  id: 'cesium-ion',\n  name: 'Cesium Ion',\n  // @ts-ignore\n  preload,\n  parse: async (data, options?, context?) => {\n    options = {...options};\n    options['3d-tiles'] = options['cesium-ion'];\n    // @ts-ignore\n    options.loader = CesiumIonLoader;\n    return Tiles3DLoader.parse(data, options, context); // , loader);\n  },\n  options: {\n    'cesium-ion': {\n      ...Tiles3DLoader.options['3d-tiles'],\n      accessToken: null\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}