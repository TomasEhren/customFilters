{"ast":null,"code":"import _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { log } from '@luma.gl/webgl';\nimport Display from './display';\nimport { createEnterVRButton } from './vr-button';\n\nvar VRDisplay = /*#__PURE__*/function (_Display) {\n  _inherits(VRDisplay, _Display);\n\n  var _super = _createSuper(VRDisplay);\n\n  function VRDisplay(props) {\n    var _this;\n\n    _classCallCheck(this, VRDisplay);\n\n    _this = _super.call(this, props);\n    _this._vrSupported = VRDisplay.isSupported();\n\n    if (_this._vrSupported) {\n      _this.vrFrameData = new window.VRFrameData();\n      _this.vrPresenting = false;\n      _this.vrFrame = false;\n      window.addEventListener('vrdisplaypresentchange', _this._vrDisplayPresentChange.bind(_assertThisInitialized(_this)));\n    }\n\n    return _this;\n  }\n\n  _createClass(VRDisplay, [{\n    key: \"delete\",\n    value: function _delete() {\n      _get(_getPrototypeOf(VRDisplay.prototype), \"delete\", this).call(this);\n\n      this._removeVRButton();\n    }\n  }, {\n    key: \"getViews\",\n    value: function getViews(options) {\n      if (this._vrSupported) {\n        this._addVRButton();\n      }\n\n      if (this.vrPresenting && this.vrFrame) {\n        this.vrDisplay.getFrameData(this.vrFrameData);\n        var _this$vrFrameData = this.vrFrameData,\n            leftProjectionMatrix = _this$vrFrameData.leftProjectionMatrix,\n            leftViewMatrix = _this$vrFrameData.leftViewMatrix,\n            rightProjectionMatrix = _this$vrFrameData.rightProjectionMatrix,\n            rightViewMatrix = _this$vrFrameData.rightViewMatrix;\n        var width = options.width,\n            height = options.height;\n        return [{\n          displayEye: 'left',\n          projectionMatrix: leftProjectionMatrix,\n          viewMatrix: leftViewMatrix,\n          params: {\n            viewport: [0, 0, width * 0.5, height],\n            scissor: [0, 0, width * 0.5, height],\n            scissorTest: true\n          }\n        }, {\n          displayEye: 'right',\n          projectionMatrix: rightProjectionMatrix,\n          viewMatrix: rightViewMatrix,\n          params: {\n            viewport: [width * 0.5, 0, width * 0.5, height],\n            scissor: [width * 0.5, 0, width * 0.5, height],\n            scissorTest: true\n          }\n        }];\n      }\n\n      return _get(_getPrototypeOf(VRDisplay.prototype), \"getViews\", this).call(this, options);\n    }\n  }, {\n    key: \"submitFrame\",\n    value: function submitFrame() {\n      if (this.vrPresenting && this.vrFrame) {\n        this.vrDisplay.submitFrame();\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"requestAnimationFrame\",\n    value: function requestAnimationFrame(renderFrame) {\n      var _this2 = this;\n\n      if (this.vrPresenting) {\n        this.vrDisplay.requestAnimationFrame(function () {\n          _this2.vrFrame = true;\n          renderFrame();\n          _this2.vrFrame = false;\n        });\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_addVRButton\",\n    value: function () {\n      var _addVRButton2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this3 = this;\n\n        var canvas, displays;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.vrButton) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                canvas = this._getCanvas();\n\n                if (canvas) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 5:\n                _context.next = 7;\n                return navigator.getVRDisplays();\n\n              case 7:\n                displays = _context.sent;\n\n                if (displays && displays.length) {\n                  log.info(2, 'Found VR Displays', displays)();\n                  this.vrDisplay = displays[0];\n                  this.vrButton = createEnterVRButton({\n                    canvas: canvas,\n                    title: \"Enter VR (\".concat(this.vrDisplay.displayName, \")\")\n                  });\n\n                  this.vrButton.onclick = function () {\n                    return _this3._startDisplay();\n                  };\n                }\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _addVRButton() {\n        return _addVRButton2.apply(this, arguments);\n      }\n\n      return _addVRButton;\n    }()\n  }, {\n    key: \"_getCanvas\",\n    value: function _getCanvas() {\n      return this.animationLoop.canvas || this.animationLoop.gl && this.animationLoop.gl.canvas;\n    }\n  }, {\n    key: \"_removeVRButton\",\n    value: function _removeVRButton() {\n      if (this.vrButton) {}\n    }\n  }, {\n    key: \"_startDisplay\",\n    value: function _startDisplay() {\n      this.vrDisplay.requestPresent([{\n        source: this._getCanvas()\n      }]);\n    }\n  }, {\n    key: \"_vrDisplayPresentChange\",\n    value: function _vrDisplayPresentChange() {\n      if (this.vrDisplay.isPresenting) {\n        log.info(2, 'Entering VR')();\n        this.vrPresenting = true;\n        this.vrButton.style.display = 'none';\n      } else {\n        log.info(2, 'Exiting VR')();\n        this.vrPresenting = false;\n        this.vrButton.style.display = 'block';\n      }\n    }\n  }], [{\n    key: \"isSupported\",\n    value: function isSupported() {\n      return typeof navigator !== 'undefined' && 'getVRDisplays' in navigator && 'VRFrameData' in window;\n    }\n  }]);\n\n  return VRDisplay;\n}(Display);\n\nexport { VRDisplay as default };","map":{"version":3,"mappings":"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","names":["log","Display","createEnterVRButton","VRDisplay","constructor","props","_vrSupported","isSupported","vrFrameData","window","VRFrameData","vrPresenting","vrFrame","addEventListener","_vrDisplayPresentChange","bind","delete","_removeVRButton","getViews","options","_addVRButton","vrDisplay","getFrameData","leftProjectionMatrix","leftViewMatrix","rightProjectionMatrix","rightViewMatrix","width","height","displayEye","projectionMatrix","viewMatrix","params","viewport","scissor","scissorTest","submitFrame","requestAnimationFrame","renderFrame","vrButton","canvas","_getCanvas","navigator","getVRDisplays","displays","length","info","title","displayName","onclick","_startDisplay","animationLoop","gl","requestPresent","source","isPresenting","style","display"],"sources":["../../../src/webvr/vr-display.js"],"sourcesContent":["import {log} from '@luma.gl/webgl';\nimport Display from './display';\nimport {createEnterVRButton} from './vr-button';\n\nexport default class VRDisplay extends Display {\n  static isSupported() {\n    return (\n      typeof navigator !== 'undefined' && 'getVRDisplays' in navigator && 'VRFrameData' in window\n    );\n  }\n\n  constructor(props) {\n    super(props);\n\n    this._vrSupported = VRDisplay.isSupported();\n    if (this._vrSupported) {\n      this.vrFrameData = new window.VRFrameData();\n      this.vrPresenting = false;\n      this.vrFrame = false;\n      window.addEventListener('vrdisplaypresentchange', this._vrDisplayPresentChange.bind(this));\n    }\n  }\n\n  delete() {\n    super.delete();\n    this._removeVRButton();\n  }\n\n  getViews(options) {\n    if (this._vrSupported) {\n      this._addVRButton();\n    }\n\n    // Need both vrPresenting and vrFrame\n    // to avoid race conditions when we exit VR\n    // after we schedule an animation frame\n    if (this.vrPresenting && this.vrFrame) {\n      this.vrDisplay.getFrameData(this.vrFrameData);\n\n      const {\n        leftProjectionMatrix,\n        leftViewMatrix,\n        rightProjectionMatrix,\n        rightViewMatrix\n      } = this.vrFrameData;\n\n      const {width, height} = options;\n\n      return [\n        {\n          displayEye: 'left',\n          projectionMatrix: leftProjectionMatrix,\n          viewMatrix: leftViewMatrix,\n          params: {\n            viewport: [0, 0, width * 0.5, height],\n            scissor: [0, 0, width * 0.5, height],\n            scissorTest: true\n          }\n        },\n        {\n          displayEye: 'right',\n          projectionMatrix: rightProjectionMatrix,\n          viewMatrix: rightViewMatrix,\n          params: {\n            viewport: [width * 0.5, 0, width * 0.5, height],\n            scissor: [width * 0.5, 0, width * 0.5, height],\n            scissorTest: true\n          }\n        }\n      ];\n    }\n\n    return super.getViews(options);\n  }\n\n  submitFrame() {\n    if (this.vrPresenting && this.vrFrame) {\n      this.vrDisplay.submitFrame();\n      return true;\n    }\n\n    return false;\n  }\n\n  requestAnimationFrame(renderFrame) {\n    if (this.vrPresenting) {\n      this.vrDisplay.requestAnimationFrame(() => {\n        this.vrFrame = true;\n        renderFrame();\n        this.vrFrame = false;\n      });\n\n      return true;\n    }\n\n    return false;\n  }\n\n  // PRIVATE\n\n  // TODO: Consider resizing canvas to match vrDisplay.getEyeParameters()\n  // TODO: Maybe allow to select display?\n  async _addVRButton() {\n    if (this.vrButton) {\n      return;\n    }\n\n    const canvas = this._getCanvas();\n    if (!canvas) {\n      return;\n    }\n\n    const displays = await navigator.getVRDisplays();\n    if (displays && displays.length) {\n      log.info(2, 'Found VR Displays', displays)();\n\n      this.vrDisplay = displays[0];\n      this.vrButton = createEnterVRButton({\n        canvas,\n        title: `Enter VR (${this.vrDisplay.displayName})`\n      });\n      this.vrButton.onclick = () => this._startDisplay();\n    }\n  }\n\n  _getCanvas() {\n    return this.animationLoop.canvas || (this.animationLoop.gl && this.animationLoop.gl.canvas);\n  }\n\n  _removeVRButton() {\n    if (this.vrButton) {\n      // TODO\n    }\n  }\n\n  _startDisplay() {\n    // @ts-ignore\n    this.vrDisplay.requestPresent([\n      {\n        source: this._getCanvas()\n      }\n    ]);\n  }\n\n  _vrDisplayPresentChange() {\n    if (this.vrDisplay.isPresenting) {\n      log.info(2, 'Entering VR')();\n\n      this.vrPresenting = true;\n      this.vrButton.style.display = 'none';\n    } else {\n      log.info(2, 'Exiting VR')();\n\n      this.vrPresenting = false;\n      this.vrButton.style.display = 'block';\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}