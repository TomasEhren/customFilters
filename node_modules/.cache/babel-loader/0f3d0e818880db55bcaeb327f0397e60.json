{"ast":null,"code":"import { log } from '@deck.gl/core';\nimport IconLayer from '../../icon-layer/icon-layer';\nimport fs from './multi-icon-layer-fragment.glsl';\nconst DEFAULT_BUFFER = 192.0 / 256;\nconst EMPTY_ARRAY = [];\nconst defaultProps = {\n  getIconOffsets: {\n    type: 'accessor',\n    value: x => x.offsets\n  },\n  alphaCutoff: 0.001,\n  smoothing: 0.1,\n  outlineWidth: 0,\n  outlineColor: {\n    type: 'color',\n    value: [0, 0, 0, 255]\n  }\n};\nexport default class MultiIconLayer extends IconLayer {\n  getShaders() {\n    return { ...super.getShaders(),\n      fs\n    };\n  }\n\n  initializeState() {\n    super.initializeState();\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIconOffsets'\n      },\n      instancePickingColors: {\n        type: 5121,\n        size: 3,\n        accessor: (object, _ref) => {\n          let {\n            index,\n            target: value\n          } = _ref;\n          return this.encodePickingColor(index, value);\n        }\n      }\n    });\n  }\n\n  updateState(params) {\n    super.updateState(params);\n    const {\n      props,\n      oldProps\n    } = params;\n    let {\n      outlineColor\n    } = props;\n\n    if (outlineColor !== oldProps.outlineColor) {\n      outlineColor = outlineColor.map(x => x / 255);\n      outlineColor[3] = Number.isFinite(outlineColor[3]) ? outlineColor[3] : 1;\n      this.setState({\n        outlineColor\n      });\n    }\n\n    if (!props.sdf && props.outlineWidth) {\n      log.warn(\"\".concat(this.id, \": fontSettings.sdf is required to render outline\"))();\n    }\n  }\n\n  draw(params) {\n    const {\n      sdf,\n      smoothing,\n      outlineWidth\n    } = this.props;\n    const {\n      outlineColor\n    } = this.state;\n    params.uniforms = { ...params.uniforms,\n      buffer: DEFAULT_BUFFER,\n      outlineBuffer: outlineWidth ? Math.max(smoothing, DEFAULT_BUFFER * (1 - outlineWidth)) : -1,\n      gamma: smoothing,\n      sdf: Boolean(sdf),\n      outlineColor\n    };\n    super.draw(params);\n  }\n\n  getInstanceOffset(icons) {\n    return icons ? Array.from(icons).map(icon => super.getInstanceOffset(icon)) : EMPTY_ARRAY;\n  }\n\n  getInstanceColorMode(icons) {\n    return 1;\n  }\n\n  getInstanceIconFrame(icons) {\n    return icons ? Array.from(icons).map(icon => super.getInstanceIconFrame(icon)) : EMPTY_ARRAY;\n  }\n\n}\nMultiIconLayer.layerName = 'MultiIconLayer';\nMultiIconLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["log","IconLayer","fs","DEFAULT_BUFFER","EMPTY_ARRAY","defaultProps","getIconOffsets","type","value","x","offsets","alphaCutoff","smoothing","outlineWidth","outlineColor","MultiIconLayer","getShaders","initializeState","attributeManager","getAttributeManager","addInstanced","instanceOffsets","size","accessor","instancePickingColors","object","index","target","encodePickingColor","updateState","params","props","oldProps","map","Number","isFinite","setState","sdf","warn","id","draw","state","uniforms","buffer","outlineBuffer","Math","max","gamma","Boolean","getInstanceOffset","icons","Array","from","icon","getInstanceColorMode","getInstanceIconFrame","layerName"],"sources":["../../../../src/text-layer/multi-icon-layer/multi-icon-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {log} from '@deck.gl/core';\nimport IconLayer from '../../icon-layer/icon-layer';\n\nimport fs from './multi-icon-layer-fragment.glsl';\n\n// TODO expose as layer properties\nconst DEFAULT_BUFFER = 192.0 / 256;\nconst EMPTY_ARRAY = [];\n\nconst defaultProps = {\n  getIconOffsets: {type: 'accessor', value: x => x.offsets},\n  alphaCutoff: 0.001,\n  smoothing: 0.1,\n  outlineWidth: 0,\n  outlineColor: {type: 'color', value: [0, 0, 0, 255]}\n};\n\nexport default class MultiIconLayer extends IconLayer {\n  getShaders() {\n    return {...super.getShaders(), fs};\n  }\n\n  initializeState() {\n    super.initializeState();\n\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIconOffsets'\n      },\n      instancePickingColors: {\n        type: GL.UNSIGNED_BYTE,\n        size: 3,\n        accessor: (object, {index, target: value}) => this.encodePickingColor(index, value)\n      }\n    });\n  }\n\n  updateState(params) {\n    super.updateState(params);\n    const {props, oldProps} = params;\n    let {outlineColor} = props;\n\n    if (outlineColor !== oldProps.outlineColor) {\n      outlineColor = outlineColor.map(x => x / 255);\n      outlineColor[3] = Number.isFinite(outlineColor[3]) ? outlineColor[3] : 1;\n\n      this.setState({\n        outlineColor\n      });\n    }\n    if (!props.sdf && props.outlineWidth) {\n      log.warn(`${this.id}: fontSettings.sdf is required to render outline`)();\n    }\n  }\n\n  draw(params) {\n    const {sdf, smoothing, outlineWidth} = this.props;\n    const {outlineColor} = this.state;\n\n    params.uniforms = {\n      ...params.uniforms,\n      // Refer the following doc about gamma and buffer\n      // https://blog.mapbox.com/drawing-text-with-signed-distance-fields-in-mapbox-gl-b0933af6f817\n      buffer: DEFAULT_BUFFER,\n      outlineBuffer: outlineWidth ? Math.max(smoothing, DEFAULT_BUFFER * (1 - outlineWidth)) : -1,\n      gamma: smoothing,\n      sdf: Boolean(sdf),\n      outlineColor\n    };\n    super.draw(params);\n  }\n\n  getInstanceOffset(icons) {\n    return icons ? Array.from(icons).map(icon => super.getInstanceOffset(icon)) : EMPTY_ARRAY;\n  }\n\n  getInstanceColorMode(icons) {\n    return 1; // mask\n  }\n\n  getInstanceIconFrame(icons) {\n    return icons ? Array.from(icons).map(icon => super.getInstanceIconFrame(icon)) : EMPTY_ARRAY;\n  }\n}\n\nMultiIconLayer.layerName = 'MultiIconLayer';\nMultiIconLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}