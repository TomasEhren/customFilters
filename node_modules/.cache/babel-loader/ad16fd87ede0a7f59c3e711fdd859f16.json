{"ast":null,"code":"import AggregationLayer from './aggregation-layer';\nimport GPUGridAggregator from './utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport { Buffer } from '@luma.gl/core';\nimport { log } from '@deck.gl/core';\nimport BinSorter from './utils/bin-sorter';\nimport { pointToDensityGridDataCPU } from './cpu-grid-layer/grid-aggregator';\nexport default class GridAggregationLayer extends AggregationLayer {\n  initializeState(_ref) {\n    let {\n      dimensions\n    } = _ref;\n    const {\n      gl\n    } = this.context;\n    super.initializeState(dimensions);\n    this.setState({\n      layerData: {},\n      gpuGridAggregator: new GPUGridAggregator(gl, {\n        id: \"\".concat(this.id, \"-gpu-aggregator\")\n      }),\n      cpuGridAggregator: pointToDensityGridDataCPU\n    });\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n    this.updateAggregationState(opts);\n    const {\n      aggregationDataDirty,\n      aggregationWeightsDirty,\n      gpuAggregation\n    } = this.state;\n\n    if (this.getNumInstances() <= 0) {\n      return;\n    }\n\n    let aggregationDirty = false;\n\n    if (aggregationDataDirty || gpuAggregation && aggregationWeightsDirty) {\n      this._updateAggregation(opts);\n\n      aggregationDirty = true;\n    }\n\n    if (!gpuAggregation && (aggregationDataDirty || aggregationWeightsDirty)) {\n      this._updateWeightBins();\n\n      this._uploadAggregationResults();\n\n      aggregationDirty = true;\n    }\n\n    this.setState({\n      aggregationDirty\n    });\n  }\n\n  finalizeState() {\n    var _this$state$gpuGridAg;\n\n    const {\n      count\n    } = this.state.weights;\n\n    if (count && count.aggregationBuffer) {\n      count.aggregationBuffer.delete();\n    }\n\n    (_this$state$gpuGridAg = this.state.gpuGridAggregator) === null || _this$state$gpuGridAg === void 0 ? void 0 : _this$state$gpuGridAg.delete();\n    super.finalizeState();\n  }\n\n  updateShaders(shaders) {\n    if (this.state.gpuAggregation) {\n      this.state.gpuGridAggregator.updateShaders(shaders);\n    }\n  }\n\n  updateAggregationState(opts) {\n    log.assert(false);\n  }\n\n  allocateResources(numRow, numCol) {\n    if (this.state.numRow !== numRow || this.state.numCol !== numCol) {\n      const dataBytes = numCol * numRow * 4 * 4;\n      const gl = this.context.gl;\n      const {\n        weights\n      } = this.state;\n\n      for (const name in weights) {\n        const weight = weights[name];\n\n        if (weight.aggregationBuffer) {\n          weight.aggregationBuffer.delete();\n        }\n\n        weight.aggregationBuffer = new Buffer(gl, {\n          byteLength: dataBytes,\n          accessor: {\n            size: 4,\n            type: 5126,\n            divisor: 1\n          }\n        });\n      }\n    }\n  }\n\n  updateResults(_ref2) {\n    let {\n      aggregationData,\n      maxMinData,\n      maxData,\n      minData\n    } = _ref2;\n    const {\n      count\n    } = this.state.weights;\n\n    if (count) {\n      count.aggregationData = aggregationData;\n      count.maxMinData = maxMinData;\n      count.maxData = maxData;\n      count.minData = minData;\n    }\n  }\n\n  _updateAggregation(opts) {\n    const {\n      cpuGridAggregator,\n      gpuGridAggregator,\n      gridOffset,\n      posOffset,\n      translation = [0, 0],\n      scaling = [0, 0, 0],\n      boundingBox,\n      projectPoints,\n      gpuAggregation,\n      numCol,\n      numRow\n    } = this.state;\n    const {\n      props\n    } = opts;\n    const {\n      viewport\n    } = this.context;\n    const attributes = this.getAttributes();\n    const vertexCount = this.getNumInstances();\n\n    if (!gpuAggregation) {\n      const result = cpuGridAggregator(props, {\n        gridOffset,\n        projectPoints,\n        attributes,\n        viewport,\n        posOffset,\n        boundingBox\n      });\n      this.setState({\n        layerData: result\n      });\n    } else {\n      const {\n        weights\n      } = this.state;\n      gpuGridAggregator.run({\n        weights,\n        cellSize: [gridOffset.xOffset, gridOffset.yOffset],\n        numCol,\n        numRow,\n        translation,\n        scaling,\n        vertexCount,\n        projectPoints,\n        attributes,\n        moduleSettings: this.getModuleSettings()\n      });\n    }\n  }\n\n  _updateWeightBins() {\n    const {\n      getValue\n    } = this.state;\n    const sortedBins = new BinSorter(this.state.layerData.data || [], {\n      getValue\n    });\n    this.setState({\n      sortedBins\n    });\n  }\n\n  _uploadAggregationResults() {\n    const {\n      numCol,\n      numRow\n    } = this.state;\n    const {\n      data\n    } = this.state.layerData;\n    const {\n      aggregatedBins,\n      minValue,\n      maxValue,\n      totalCount\n    } = this.state.sortedBins;\n    const ELEMENTCOUNT = 4;\n    const aggregationSize = numCol * numRow * ELEMENTCOUNT;\n    const aggregationData = new Float32Array(aggregationSize).fill(0);\n\n    for (const bin of aggregatedBins) {\n      const {\n        lonIdx,\n        latIdx\n      } = data[bin.i];\n      const {\n        value,\n        counts\n      } = bin;\n      const cellIndex = (lonIdx + latIdx * numCol) * ELEMENTCOUNT;\n      aggregationData[cellIndex] = value;\n      aggregationData[cellIndex + ELEMENTCOUNT - 1] = counts;\n    }\n\n    const maxMinData = new Float32Array([maxValue, 0, 0, minValue]);\n    const maxData = new Float32Array([maxValue, 0, 0, totalCount]);\n    const minData = new Float32Array([minValue, 0, 0, totalCount]);\n    this.updateResults({\n      aggregationData,\n      maxMinData,\n      maxData,\n      minData\n    });\n  }\n\n}\nGridAggregationLayer.layerName = 'GridAggregationLayer';","map":{"version":3,"mappings":"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","names":["AggregationLayer","GPUGridAggregator","Buffer","log","BinSorter","pointToDensityGridDataCPU","GridAggregationLayer","initializeState","dimensions","gl","context","setState","layerData","gpuGridAggregator","id","cpuGridAggregator","updateState","opts","updateAggregationState","aggregationDataDirty","aggregationWeightsDirty","gpuAggregation","state","getNumInstances","aggregationDirty","_updateAggregation","_updateWeightBins","_uploadAggregationResults","finalizeState","count","weights","aggregationBuffer","delete","updateShaders","shaders","assert","allocateResources","numRow","numCol","dataBytes","name","weight","byteLength","accessor","size","type","divisor","updateResults","aggregationData","maxMinData","maxData","minData","gridOffset","posOffset","translation","scaling","boundingBox","projectPoints","props","viewport","attributes","getAttributes","vertexCount","result","run","cellSize","xOffset","yOffset","moduleSettings","getModuleSettings","getValue","sortedBins","data","aggregatedBins","minValue","maxValue","totalCount","ELEMENTCOUNT","aggregationSize","Float32Array","fill","bin","lonIdx","latIdx","i","value","counts","cellIndex","layerName"],"sources":["../../src/grid-aggregation-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport AggregationLayer from './aggregation-layer';\nimport GPUGridAggregator from './utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {Buffer} from '@luma.gl/core';\nimport {log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport BinSorter from './utils/bin-sorter';\nimport {pointToDensityGridDataCPU} from './cpu-grid-layer/grid-aggregator';\n\nexport default class GridAggregationLayer extends AggregationLayer {\n  initializeState({dimensions}) {\n    const {gl} = this.context;\n    super.initializeState(dimensions);\n    this.setState({\n      // CPU aggregation results\n      layerData: {},\n      gpuGridAggregator: new GPUGridAggregator(gl, {id: `${this.id}-gpu-aggregator`}),\n      cpuGridAggregator: pointToDensityGridDataCPU\n    });\n  }\n\n  updateState(opts) {\n    // get current attributes\n    super.updateState(opts);\n\n    this.updateAggregationState(opts);\n\n    const {aggregationDataDirty, aggregationWeightsDirty, gpuAggregation} = this.state;\n    if (this.getNumInstances() <= 0) {\n      return;\n    }\n    let aggregationDirty = false;\n    // CPU aggregation is two steps\n    // 1. Create bins (based on cellSize and position) 2. Aggregate weights for each bin\n    // For GPU aggregation both above steps are combined into one step\n\n    // step-1\n    if (aggregationDataDirty || (gpuAggregation && aggregationWeightsDirty)) {\n      this._updateAggregation(opts);\n      aggregationDirty = true;\n    }\n    // step-2 (Applicalbe for CPU aggregation only)\n    if (!gpuAggregation && (aggregationDataDirty || aggregationWeightsDirty)) {\n      this._updateWeightBins();\n      this._uploadAggregationResults();\n      aggregationDirty = true;\n    }\n\n    this.setState({aggregationDirty});\n  }\n\n  finalizeState() {\n    const {count} = this.state.weights;\n    if (count && count.aggregationBuffer) {\n      count.aggregationBuffer.delete();\n    }\n    this.state.gpuGridAggregator?.delete();\n    super.finalizeState();\n  }\n\n  updateShaders(shaders) {\n    if (this.state.gpuAggregation) {\n      this.state.gpuGridAggregator.updateShaders(shaders);\n    }\n  }\n\n  // Methods that can be overriden by subclasses for customizations\n\n  updateAggregationState(opts) {\n    // Sublayers should implement this method.\n    log.assert(false);\n  }\n\n  allocateResources(numRow, numCol) {\n    if (this.state.numRow !== numRow || this.state.numCol !== numCol) {\n      const dataBytes = numCol * numRow * 4 * 4;\n      const gl = this.context.gl;\n      const {weights} = this.state;\n      for (const name in weights) {\n        const weight = weights[name];\n        if (weight.aggregationBuffer) {\n          weight.aggregationBuffer.delete();\n        }\n        weight.aggregationBuffer = new Buffer(gl, {\n          byteLength: dataBytes,\n          accessor: {\n            size: 4,\n            type: GL.FLOAT,\n            divisor: 1\n          }\n        });\n      }\n    }\n  }\n\n  updateResults({aggregationData, maxMinData, maxData, minData}) {\n    const {count} = this.state.weights;\n    if (count) {\n      count.aggregationData = aggregationData;\n      count.maxMinData = maxMinData;\n      count.maxData = maxData;\n      count.minData = minData;\n    }\n  }\n\n  // Private\n\n  _updateAggregation(opts) {\n    const {\n      cpuGridAggregator,\n      gpuGridAggregator,\n      gridOffset,\n      posOffset,\n      translation = [0, 0],\n      scaling = [0, 0, 0],\n      boundingBox,\n      projectPoints,\n      gpuAggregation,\n      numCol,\n      numRow\n    } = this.state;\n    const {props} = opts;\n    const {viewport} = this.context;\n    const attributes = this.getAttributes();\n    const vertexCount = this.getNumInstances();\n\n    if (!gpuAggregation) {\n      const result = cpuGridAggregator(props, {\n        gridOffset,\n        projectPoints,\n        attributes,\n        viewport,\n        posOffset,\n        boundingBox\n      });\n      this.setState({\n        layerData: result\n      });\n    } else {\n      const {weights} = this.state;\n      gpuGridAggregator.run({\n        weights,\n        cellSize: [gridOffset.xOffset, gridOffset.yOffset],\n        numCol,\n        numRow,\n        translation,\n        scaling,\n        vertexCount,\n        projectPoints,\n        attributes,\n        moduleSettings: this.getModuleSettings()\n      });\n    }\n  }\n\n  _updateWeightBins() {\n    const {getValue} = this.state;\n\n    const sortedBins = new BinSorter(this.state.layerData.data || [], {getValue});\n    this.setState({sortedBins});\n  }\n\n  _uploadAggregationResults() {\n    const {numCol, numRow} = this.state;\n    const {data} = this.state.layerData;\n    const {aggregatedBins, minValue, maxValue, totalCount} = this.state.sortedBins;\n\n    const ELEMENTCOUNT = 4;\n    const aggregationSize = numCol * numRow * ELEMENTCOUNT;\n    const aggregationData = new Float32Array(aggregationSize).fill(0);\n    for (const bin of aggregatedBins) {\n      const {lonIdx, latIdx} = data[bin.i];\n      const {value, counts} = bin;\n      const cellIndex = (lonIdx + latIdx * numCol) * ELEMENTCOUNT;\n      aggregationData[cellIndex] = value;\n      aggregationData[cellIndex + ELEMENTCOUNT - 1] = counts;\n    }\n    const maxMinData = new Float32Array([maxValue, 0, 0, minValue]);\n    const maxData = new Float32Array([maxValue, 0, 0, totalCount]);\n    const minData = new Float32Array([minValue, 0, 0, totalCount]);\n    this.updateResults({aggregationData, maxMinData, maxData, minData});\n  }\n}\n\nGridAggregationLayer.layerName = 'GridAggregationLayer';\n"]},"metadata":{},"sourceType":"module"}