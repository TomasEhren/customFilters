{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DrawSquareFromCenterMode = void 0;\n\nvar _bboxPolygon = _interopRequireDefault(require(\"@turf/bbox-polygon\"));\n\nvar _distance = _interopRequireDefault(require(\"@turf/distance\"));\n\nvar _along = _interopRequireDefault(require(\"@turf/along\"));\n\nvar _helpers = require(\"@turf/helpers\");\n\nvar _twoClickPolygonMode = require(\"./two-click-polygon-mode\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar DrawSquareFromCenterMode = /*#__PURE__*/function (_TwoClickPolygonMode) {\n  _inherits(DrawSquareFromCenterMode, _TwoClickPolygonMode);\n\n  var _super = _createSuper(DrawSquareFromCenterMode);\n\n  function DrawSquareFromCenterMode() {\n    _classCallCheck(this, DrawSquareFromCenterMode);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DrawSquareFromCenterMode, [{\n    key: \"getTwoClickPolygon\",\n    value: function getTwoClickPolygon(coord1, coord2, modeConfig) {\n      // get the coordinates of the other two rectangle vertices\n      var coord3 = [coord2[0], coord1[1]];\n      var coord4 = [coord1[0], coord2[1]]; // determine the shortest distance to the origin, which will be the length of each square side\n\n      var distance1 = (0, _distance[\"default\"])((0, _helpers.point)(coord3), (0, _helpers.point)(coord1));\n      var distance2 = (0, _distance[\"default\"])((0, _helpers.point)(coord4), (0, _helpers.point)(coord1));\n      var shortestDistance = distance1 <= distance2 ? distance1 : distance2; // determine which coordinate pair of the two is closest to the origin\n\n      var closestPoint = distance1 <= distance2 ? coord3 : coord4; // create a linestring which will used to locate the second square vertex\n\n      var line = (0, _helpers.lineString)([closestPoint, coord2]); // get the coordinates of the second square vertex\n\n      var newPoint = (0, _along[\"default\"])(line, shortestDistance);\n      var corner = newPoint.geometry.coordinates; // determine the longitude and latitude values of the opposite corner\n\n      var longitude = coord1[0] > corner[0] ? coord1[0] + Math.abs(coord1[0] - corner[0]) : coord1[0] - Math.abs(coord1[0] - corner[0]);\n      var latitude = coord1[1] > corner[1] ? coord1[1] + Math.abs(coord1[1] - corner[1]) : coord1[1] - Math.abs(coord1[1] - corner[1]);\n      var square = (0, _bboxPolygon[\"default\"])([longitude, latitude, corner[0], corner[1]]);\n      square.properties = square.properties || {};\n      square.properties.shape = 'Square'; // @ts-ignore\n\n      return square;\n    }\n  }]);\n\n  return DrawSquareFromCenterMode;\n}(_twoClickPolygonMode.TwoClickPolygonMode);\n\nexports.DrawSquareFromCenterMode = DrawSquareFromCenterMode;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEaA,wB;;;;;;;;;;;;;uCACQC,QAAkBC,QAAkBC,YAAqC;MAC1F;MACA,IAAMC,MAAM,GAAG,CAACF,MAAM,CAAC,CAAD,CAAP,EAAYD,MAAM,CAAC,CAAD,CAAlB,CAAf;MACA,IAAMI,MAAM,GAAG,CAACJ,MAAM,CAAC,CAAD,CAAP,EAAYC,MAAM,CAAC,CAAD,CAAlB,CAAf,CAH0F,CAK1F;;MACA,IAAMI,SAAS,GAAG,0BAAa,oBAAMF,MAAN,CAAb,EAA4B,oBAAMH,MAAN,CAA5B,CAAlB;MACA,IAAMM,SAAS,GAAG,0BAAa,oBAAMF,MAAN,CAAb,EAA4B,oBAAMJ,MAAN,CAA5B,CAAlB;MACA,IAAMO,gBAAgB,GAAGF,SAAS,IAAIC,SAAbD,GAAyBA,SAAzBA,GAAqCC,SAA9D,CAR0F,CAU1F;;MACA,IAAME,YAAY,GAAGH,SAAS,IAAIC,SAAbD,GAAyBF,MAAzBE,GAAkCD,MAAvD,CAX0F,CAa1F;;MACA,IAAMK,IAAI,GAAG,yBAAe,CAACD,YAAD,EAAeP,MAAf,CAAf,CAAb,CAd0F,CAgB1F;;MACA,IAAMS,QAAQ,GAAG,uBAAUD,IAAV,EAAgBF,gBAAhB,CAAjB;MACA,IAAMI,MAAM,GAAGD,QAAQ,CAACE,QAATF,CAAkBG,WAAjC,CAlB0F,CAoB1F;;MACA,IAAMC,SAAS,GACbd,MAAM,CAAC,CAAD,CAANA,GAAYW,MAAM,CAAC,CAAD,CAAlBX,GACIA,MAAM,CAAC,CAAD,CAANA,GAAYe,IAAI,CAACC,GAALD,CAASf,MAAM,CAAC,CAAD,CAANA,GAAYW,MAAM,CAAC,CAAD,CAA3BI,CADhBf,GAEIA,MAAM,CAAC,CAAD,CAANA,GAAYe,IAAI,CAACC,GAALD,CAASf,MAAM,CAAC,CAAD,CAANA,GAAYW,MAAM,CAAC,CAAD,CAA3BI,CAHlB;MAIA,IAAME,QAAQ,GACZjB,MAAM,CAAC,CAAD,CAANA,GAAYW,MAAM,CAAC,CAAD,CAAlBX,GACIA,MAAM,CAAC,CAAD,CAANA,GAAYe,IAAI,CAACC,GAALD,CAASf,MAAM,CAAC,CAAD,CAANA,GAAYW,MAAM,CAAC,CAAD,CAA3BI,CADhBf,GAEIA,MAAM,CAAC,CAAD,CAANA,GAAYe,IAAI,CAACC,GAALD,CAASf,MAAM,CAAC,CAAD,CAANA,GAAYW,MAAM,CAAC,CAAD,CAA3BI,CAHlB;MAKA,IAAMG,MAAM,GAAG,6BAAY,CAACJ,SAAD,EAAYG,QAAZ,EAAsBN,MAAM,CAAC,CAAD,CAA5B,EAAiCA,MAAM,CAAC,CAAD,CAAvC,CAAZ,CAAf;MACAO,MAAM,CAACC,UAAPD,GAAoBA,MAAM,CAACC,UAAPD,IAAqB,EAAzCA;MACAA,MAAM,CAACC,UAAPD,CAAkBE,KAAlBF,GAA0B,QAA1BA,CAhC0F,CAkC1F;;MACA,OAAOA,MAAP;IACD;;;;EArC2CG,wC","names":["DrawSquareFromCenterMode","coord1","coord2","modeConfig","coord3","coord4","distance1","distance2","shortestDistance","closestPoint","line","newPoint","corner","geometry","coordinates","longitude","Math","abs","latitude","square","properties","shape","TwoClickPolygonMode"],"sources":["../../src/lib/draw-square-from-center-mode.ts"],"sourcesContent":["import bboxPolygon from '@turf/bbox-polygon';\nimport turfDistance from '@turf/distance';\nimport turfAlong from '@turf/along';\nimport { point, lineString as turfLineString } from '@turf/helpers';\nimport { Position, Polygon, FeatureOf } from '../geojson-types';\nimport { TwoClickPolygonMode } from './two-click-polygon-mode';\n\nexport class DrawSquareFromCenterMode extends TwoClickPolygonMode {\n  getTwoClickPolygon(coord1: Position, coord2: Position, modeConfig: any): FeatureOf<Polygon> {\n    // get the coordinates of the other two rectangle vertices\n    const coord3 = [coord2[0], coord1[1]];\n    const coord4 = [coord1[0], coord2[1]];\n\n    // determine the shortest distance to the origin, which will be the length of each square side\n    const distance1 = turfDistance(point(coord3), point(coord1));\n    const distance2 = turfDistance(point(coord4), point(coord1));\n    const shortestDistance = distance1 <= distance2 ? distance1 : distance2;\n\n    // determine which coordinate pair of the two is closest to the origin\n    const closestPoint = distance1 <= distance2 ? coord3 : coord4;\n\n    // create a linestring which will used to locate the second square vertex\n    const line = turfLineString([closestPoint, coord2]);\n\n    // get the coordinates of the second square vertex\n    const newPoint = turfAlong(line, shortestDistance);\n    const corner = newPoint.geometry.coordinates;\n\n    // determine the longitude and latitude values of the opposite corner\n    const longitude =\n      coord1[0] > corner[0]\n        ? coord1[0] + Math.abs(coord1[0] - corner[0])\n        : coord1[0] - Math.abs(coord1[0] - corner[0]);\n    const latitude =\n      coord1[1] > corner[1]\n        ? coord1[1] + Math.abs(coord1[1] - corner[1])\n        : coord1[1] - Math.abs(coord1[1] - corner[1]);\n\n    const square = bboxPolygon([longitude, latitude, corner[0], corner[1]]);\n    square.properties = square.properties || {};\n    square.properties.shape = 'Square';\n\n    // @ts-ignore\n    return square;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}