{"ast":null,"code":"import _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { Tile3DSubtreeLoader } from '../../../tile-3d-subtree-loader';\nimport { load } from '@loaders.gl/core';\nvar QUADTREE_DEVISION_COUNT = 4;\nvar OCTREE_DEVISION_COUNT = 8;\nvar SUBDIVISION_COUNT_MAP = {\n  QUADTREE: QUADTREE_DEVISION_COUNT,\n  OCTREE: OCTREE_DEVISION_COUNT\n};\nexport function parseImplicitTiles(_x, _x2) {\n  return _parseImplicitTiles.apply(this, arguments);\n}\n\nfunction _parseImplicitTiles() {\n  _parseImplicitTiles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(subtree, options) {\n    var parentData,\n        childIndex,\n        level,\n        globalData,\n        subdivisionScheme,\n        subtreeLevels,\n        maximumLevel,\n        contentUrlTemplate,\n        subtreesUriTemplate,\n        basePath,\n        tile,\n        childrenPerTile,\n        childX,\n        childY,\n        childZ,\n        levelOffset,\n        childTileMortonIndex,\n        tileAvailabilityIndex,\n        childTileX,\n        childTileY,\n        childTileZ,\n        isChildSubtreeAvailable,\n        x,\n        y,\n        z,\n        lev,\n        subtreePath,\n        childSubtreeUrl,\n        childSubtree,\n        isTileAvailable,\n        isContentAvailable,\n        childTileLevel,\n        pData,\n        index,\n        currentTile,\n        globalLevel,\n        childCoordinates,\n        formattedTile,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            parentData = _args.length > 2 && _args[2] !== undefined ? _args[2] : {\n              mortonIndex: 0,\n              x: 0,\n              y: 0,\n              z: 0\n            };\n            childIndex = _args.length > 3 && _args[3] !== undefined ? _args[3] : 0;\n            level = _args.length > 4 && _args[4] !== undefined ? _args[4] : 0;\n            globalData = _args.length > 5 && _args[5] !== undefined ? _args[5] : {\n              level: 0,\n              mortonIndex: 0,\n              x: 0,\n              y: 0,\n              z: 0\n            };\n            subdivisionScheme = options.subdivisionScheme, subtreeLevels = options.subtreeLevels, maximumLevel = options.maximumLevel, contentUrlTemplate = options.contentUrlTemplate, subtreesUriTemplate = options.subtreesUriTemplate, basePath = options.basePath;\n            tile = {\n              children: [],\n              lodMetricValue: 0,\n              contentUrl: ''\n            };\n            childrenPerTile = SUBDIVISION_COUNT_MAP[subdivisionScheme];\n            childX = childIndex & 1;\n            childY = childIndex >> 1 & 1;\n            childZ = childIndex >> 2 & 1;\n            levelOffset = (Math.pow(childrenPerTile, level) - 1) / (childrenPerTile - 1);\n            childTileMortonIndex = concatBits(parentData.mortonIndex, childIndex);\n            tileAvailabilityIndex = levelOffset + childTileMortonIndex;\n            childTileX = concatBits(parentData.x, childX);\n            childTileY = concatBits(parentData.y, childY);\n            childTileZ = concatBits(parentData.z, childZ);\n            isChildSubtreeAvailable = false;\n\n            if (level + 1 > subtreeLevels) {\n              isChildSubtreeAvailable = getAvailabilityResult(subtree.childSubtreeAvailability, childTileMortonIndex);\n            }\n\n            x = concatBits(globalData.x, childTileX);\n            y = concatBits(globalData.y, childTileY);\n            z = concatBits(globalData.z, childTileZ);\n            lev = level + globalData.level;\n\n            if (!isChildSubtreeAvailable) {\n              _context.next = 40;\n              break;\n            }\n\n            subtreePath = \"\".concat(basePath, \"/\").concat(subtreesUriTemplate);\n            childSubtreeUrl = replaceContentUrlTemplate(subtreePath, lev, x, y, z);\n            _context.next = 27;\n            return load(childSubtreeUrl, Tile3DSubtreeLoader);\n\n          case 27:\n            childSubtree = _context.sent;\n            subtree = childSubtree;\n            globalData.mortonIndex = childTileMortonIndex;\n            globalData.x = childTileX;\n            globalData.y = childTileY;\n            globalData.z = childTileZ;\n            globalData.level = level;\n            childTileMortonIndex = 0;\n            tileAvailabilityIndex = 0;\n            childTileX = 0;\n            childTileY = 0;\n            childTileZ = 0;\n            level = 0;\n\n          case 40:\n            isTileAvailable = getAvailabilityResult(subtree.tileAvailability, tileAvailabilityIndex);\n\n            if (!(!isTileAvailable || level > maximumLevel)) {\n              _context.next = 43;\n              break;\n            }\n\n            return _context.abrupt(\"return\", tile);\n\n          case 43:\n            isContentAvailable = getAvailabilityResult(subtree.contentAvailability, tileAvailabilityIndex);\n\n            if (isContentAvailable) {\n              tile.contentUrl = replaceContentUrlTemplate(contentUrlTemplate, lev, x, y, z);\n            }\n\n            childTileLevel = level + 1;\n            pData = {\n              mortonIndex: childTileMortonIndex,\n              x: childTileX,\n              y: childTileY,\n              z: childTileZ\n            };\n            index = 0;\n\n          case 48:\n            if (!(index < childrenPerTile)) {\n              _context.next = 56;\n              break;\n            }\n\n            _context.next = 51;\n            return parseImplicitTiles(subtree, options, pData, index, childTileLevel, globalData);\n\n          case 51:\n            currentTile = _context.sent;\n\n            if (currentTile.contentUrl || currentTile.children.length) {\n              globalLevel = lev + 1;\n              childCoordinates = {\n                childTileX: childTileX,\n                childTileY: childTileY,\n                childTileZ: childTileZ\n              };\n              formattedTile = formatTileData(currentTile, globalLevel, childCoordinates, options);\n              tile.children.push(formattedTile);\n            }\n\n          case 53:\n            index++;\n            _context.next = 48;\n            break;\n\n          case 56:\n            return _context.abrupt(\"return\", tile);\n\n          case 57:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseImplicitTiles.apply(this, arguments);\n}\n\nfunction getAvailabilityResult(availabilityData, index) {\n  if ('constant' in availabilityData) {\n    return Boolean(availabilityData.constant);\n  }\n\n  if (availabilityData.explicitBitstream) {\n    return getBooleanValueFromBitstream(index, availabilityData.explicitBitstream);\n  }\n\n  return false;\n}\n\nfunction formatTileData(tile, level, childCoordinates, options) {\n  var basePath = options.basePath,\n      refine = options.refine,\n      getRefine = options.getRefine,\n      lodMetricType = options.lodMetricType,\n      getTileType = options.getTileType,\n      rootLodMetricValue = options.rootLodMetricValue,\n      rootBoundingVolume = options.rootBoundingVolume;\n  var uri = tile.contentUrl && tile.contentUrl.replace(\"\".concat(basePath, \"/\"), '');\n  var lodMetricValue = rootLodMetricValue / Math.pow(2, level);\n  var boundingVolume = calculateBoundingVolumeForChildTile(level, rootBoundingVolume, childCoordinates);\n  return {\n    children: tile.children,\n    contentUrl: tile.contentUrl,\n    content: {\n      uri: uri\n    },\n    id: tile.contentUrl,\n    refine: getRefine(refine),\n    type: getTileType(tile),\n    lodMetricType: lodMetricType,\n    lodMetricValue: lodMetricValue,\n    boundingVolume: boundingVolume\n  };\n}\n\nfunction calculateBoundingVolumeForChildTile(level, rootBoundingVolume, childCoordinates) {\n  if (rootBoundingVolume.region) {\n    var childTileX = childCoordinates.childTileX,\n        childTileY = childCoordinates.childTileY,\n        childTileZ = childCoordinates.childTileZ;\n\n    var _rootBoundingVolume$r = _slicedToArray(rootBoundingVolume.region, 6),\n        west = _rootBoundingVolume$r[0],\n        south = _rootBoundingVolume$r[1],\n        east = _rootBoundingVolume$r[2],\n        north = _rootBoundingVolume$r[3],\n        minimumHeight = _rootBoundingVolume$r[4],\n        maximumHeight = _rootBoundingVolume$r[5];\n\n    var boundingVolumesCount = Math.pow(2, level);\n    var sizeX = (east - west) / boundingVolumesCount;\n    var sizeY = (north - south) / boundingVolumesCount;\n    var sizeZ = (maximumHeight - minimumHeight) / boundingVolumesCount;\n    var childWest = west + sizeX * childTileX,\n        childEast = west + sizeX * (childTileX + 1);\n    var childSouth = south + sizeY * childTileY,\n        childNorth = south + sizeY * (childTileY + 1);\n    var childMinimumHeight = minimumHeight + sizeZ * childTileZ,\n        childMaximumHeight = minimumHeight + sizeZ * (childTileZ + 1);\n    return {\n      region: [childWest, childSouth, childEast, childNorth, childMinimumHeight, childMaximumHeight]\n    };\n  }\n\n  console.warn('Unsupported bounding volume type: ', rootBoundingVolume);\n  return null;\n}\n\nfunction concatBits(first, second) {\n  return parseInt(first.toString(2) + second.toString(2), 2);\n}\n\nexport function replaceContentUrlTemplate(templateUrl, level, x, y, z) {\n  var mapUrl = generateMapUrl({\n    level: level,\n    x: x,\n    y: y,\n    z: z\n  });\n  return templateUrl.replace(/{level}|{x}|{y}|{z}/gi, function (matched) {\n    return mapUrl[matched];\n  });\n}\n\nfunction generateMapUrl(items) {\n  var mapUrl = {};\n\n  for (var key in items) {\n    mapUrl[\"{\".concat(key, \"}\")] = items[key];\n  }\n\n  return mapUrl;\n}\n\nfunction getBooleanValueFromBitstream(availabilityIndex, availabilityBuffer) {\n  var byteIndex = Math.floor(availabilityIndex / 8);\n  var bitIndex = availabilityIndex % 8;\n  var bitValue = availabilityBuffer[byteIndex] >> bitIndex & 1;\n  return bitValue === 1;\n}","map":{"version":3,"mappings":";;;AACA,SAAQA,mBAAR,QAAkC,iCAAlC;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AAEA,IAAMC,uBAAuB,GAAG,CAAhC;AACA,IAAMC,qBAAqB,GAAG,CAA9B;AAEA,IAAMC,qBAAqB,GAAG;EAC5BC,QAAQ,EAAEH,uBADkB;EAE5BI,MAAM,EAAEH;AAFoB,CAA9B;AAmBA,gBAAsBI,kBAAtB;EAAA;AAAA;;;iFAAO,iBACLC,OADK,EAELC,OAFK;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAGLC,UAHK,2DAGgE;cACnEC,WAAW,EAAE,CADsD;cAEnEC,CAAC,EAAE,CAFgE;cAGnEC,CAAC,EAAE,CAHgE;cAInEC,CAAC,EAAE;YAJgE,CAHhE;YASLC,UATK,2DASgB,CAThB;YAULC,KAVK,2DAUW,CAVX;YAWLC,UAXK,2DAW+E;cAClFD,KAAK,EAAE,CAD2E;cAElFL,WAAW,EAAE,CAFqE;cAGlFC,CAAC,EAAE,CAH+E;cAIlFC,CAAC,EAAE,CAJ+E;cAKlFC,CAAC,EAAE;YAL+E,CAX/E;YAoBHI,iBApBG,GA0BDT,OA1BC,CAoBHS,iBApBG,EAqBHC,aArBG,GA0BDV,OA1BC,CAqBHU,aArBG,EAsBHC,YAtBG,GA0BDX,OA1BC,CAsBHW,YAtBG,EAuBHC,kBAvBG,GA0BDZ,OA1BC,CAuBHY,kBAvBG,EAwBHC,mBAxBG,GA0BDb,OA1BC,CAwBHa,mBAxBG,EAyBHC,QAzBG,GA0BDd,OA1BC,CAyBHc,QAzBG;YA4BCC,IA5BD,GA4BQ;cAACC,QAAQ,EAAE,EAAX;cAAeC,cAAc,EAAE,CAA/B;cAAkCC,UAAU,EAAE;YAA9C,CA5BR;YA8BCC,eA9BD,GA8BmBxB,qBAAqB,CAACc,iBAAD,CA9BxC;YAgCCW,MAhCD,GAgCUd,UAAU,GAAG,CAhCvB;YAiCCe,MAjCD,GAiCWf,UAAU,IAAI,CAAdA,GAAmB,CAjC9B;YAkCCgB,MAlCD,GAkCWhB,UAAU,IAAI,CAAdA,GAAmB,CAlC9B;YAoCCiB,WApCD,GAoCe,CAACJ,wBAAe,EAAIZ,KAAJ,CAAfY,GAA2B,CAA5B,KAAkCA,eAAe,GAAG,CAApD,CApCf;YAqCDK,oBArCC,GAqCsBC,UAAU,CAACxB,UAAU,CAACC,WAAZ,EAAyBI,UAAzB,CArChC;YAsCDoB,qBAtCC,GAsCuBH,WAAW,GAAGC,oBAtCrC;YAyCDG,UAzCC,GAyCYF,UAAU,CAACxB,UAAU,CAACE,CAAZ,EAAeiB,MAAf,CAzCtB;YA0CDQ,UA1CC,GA0CYH,UAAU,CAACxB,UAAU,CAACG,CAAZ,EAAeiB,MAAf,CA1CtB;YA2CDQ,UA3CC,GA2CYJ,UAAU,CAACxB,UAAU,CAACI,CAAZ,EAAeiB,MAAf,CA3CtB;YAsDDQ,uBAtDC,GAsDyB,KAtDzB;;YAwDL,IAAIvB,KAAK,GAAG,CAARA,GAAYG,aAAhB,EAA+B;cAC7BoB,uBAAuB,GAAGC,qBAAqB,CAC7ChC,OAAO,CAACiC,wBADqC,EAE7CR,oBAF6C,CAA/CM;YAID;;YAEK3B,CA/DD,GA+DKsB,UAAU,CAACjB,UAAU,CAACL,CAAZ,EAAewB,UAAf,CA/Df;YAgECvB,CAhED,GAgEKqB,UAAU,CAACjB,UAAU,CAACJ,CAAZ,EAAewB,UAAf,CAhEf;YAiECvB,CAjED,GAiEKoB,UAAU,CAACjB,UAAU,CAACH,CAAZ,EAAewB,UAAf,CAjEf;YAkECI,GAlED,GAkEO1B,KAAK,GAAGC,UAAU,CAACD,KAlE1B;;YAAA,KAoEDuB,uBApEC;cAAA;cAAA;YAAA;;YAqEGI,WArEH,GAqEc,UAAMpB,QAAN,cAAkBD,mBAAlB,CArEd;YAsEGsB,eAtEH,GAsEqBC,yBAAyB,CAACF,WAAD,EAAcD,GAAd,EAAmB9B,CAAnB,EAAsBC,CAAtB,EAAyBC,CAAzB,CAtE9C;YAAA;YAAA,OAuEwBb,IAAI,CAAC2C,eAAD,EAAkB5C,mBAAlB,CAvE5B;;UAAA;YAuEG8C,YAvEH;YAyEHtC,OAAO,GAAGsC,YAAVtC;YAEAS,UAAU,CAACN,WAAXM,GAAyBgB,oBAAzBhB;YACAA,UAAU,CAACL,CAAXK,GAAemB,UAAfnB;YACAA,UAAU,CAACJ,CAAXI,GAAeoB,UAAfpB;YACAA,UAAU,CAACH,CAAXG,GAAeqB,UAAfrB;YACAA,UAAU,CAACD,KAAXC,GAAmBD,KAAnBC;YAEAgB,oBAAoB,GAAG,CAAvBA;YACAE,qBAAqB,GAAG,CAAxBA;YACAC,UAAU,GAAG,CAAbA;YACAC,UAAU,GAAG,CAAbA;YACAC,UAAU,GAAG,CAAbA;YACAtB,KAAK,GAAG,CAARA;;UAtFG;YAyFC+B,eAzFD,GAyFmBP,qBAAqB,CAAChC,OAAO,CAACwC,gBAAT,EAA2Bb,qBAA3B,CAzFxC;;YAAA,MA2FD,CAACY,eAAD,IAAoB/B,KAAK,GAAGI,YA3F3B;cAAA;cAAA;YAAA;;YAAA,iCA4FII,IA5FJ;;UAAA;YA+FCyB,kBA/FD,GA+FsBT,qBAAqB,CAC9ChC,OAAO,CAAC0C,mBADsC,EAE9Cf,qBAF8C,CA/F3C;;YAoGL,IAAIc,kBAAJ,EAAwB;cACtBzB,IAAI,CAACG,UAALH,GAAkBqB,yBAAyB,CAACxB,kBAAD,EAAqBqB,GAArB,EAA0B9B,CAA1B,EAA6BC,CAA7B,EAAgCC,CAAhC,CAA3CU;YACD;;YAEK2B,cAxGD,GAwGkBnC,KAAK,GAAG,CAxG1B;YAyGCoC,KAzGD,GAyGS;cAACzC,WAAW,EAAEsB,oBAAd;cAAoCrB,CAAC,EAAEwB,UAAvC;cAAmDvB,CAAC,EAAEwB,UAAtD;cAAkEvB,CAAC,EAAEwB;YAArE,CAzGT;YA2GIe,KA3GJ,GA2GY,CA3GZ;;UAAA;YAAA,MA2GeA,KAAK,GAAGzB,eA3GvB;cAAA;cAAA;YAAA;;YAAA;YAAA,OA4GuBrB,kBAAkB,CAC1CC,OAD0C,EAE1CC,OAF0C,EAG1C2C,KAH0C,EAI1CC,KAJ0C,EAK1CF,cAL0C,EAM1ClC,UAN0C,CA5GzC;;UAAA;YA4GGqC,WA5GH;;YAqHH,IAAIA,WAAW,CAAC3B,UAAZ2B,IAA0BA,WAAW,CAAC7B,QAAZ6B,CAAqBC,MAAnD,EAA2D;cACnDC,WADmD,GACrCd,GAAG,GAAG,CAD+B;cAEnDe,gBAFmD,GAEhC;gBAACrB,UAAD,EAACA,UAAD;gBAAaC,UAAb,EAAaA,UAAb;gBAAyBC;cAAzB,CAFgC;cAGnDoB,aAHmD,GAGnCC,cAAc,CAACL,WAAD,EAAcE,WAAd,EAA2BC,gBAA3B,EAA6ChD,OAA7C,CAHqB;cAKzDe,IAAI,CAACC,QAALD,CAAcoC,IAAdpC,CAAmBkC,aAAnBlC;YACD;;UA3HE;YA2GwC6B,KAAK,EA3G7C;YAAA;YAAA;;UAAA;YAAA,iCA8HE7B,IA9HF;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAiIP,SAASgB,qBAAT,CAA+BqB,gBAA/B,EAA+DR,KAA/D,EAAuF;EACrF,IAAI,cAAcQ,gBAAlB,EAAoC;IAClC,OAAOC,OAAO,CAACD,gBAAgB,CAACE,QAAlB,CAAd;EACD;;EAED,IAAIF,gBAAgB,CAACG,iBAArB,EAAwC;IACtC,OAAOC,4BAA4B,CAACZ,KAAD,EAAQQ,gBAAgB,CAACG,iBAAzB,CAAnC;EACD;;EAED,OAAO,KAAP;AACD;;AAUD,SAASL,cAAT,CACEnC,IADF,EAEER,KAFF,EAGEyC,gBAHF,EAIEhD,OAJF,EAKE;EACA,IACEc,QADF,GAQId,OARJ,CACEc,QADF;EAAA,IAEE2C,MAFF,GAQIzD,OARJ,CAEEyD,MAFF;EAAA,IAGEC,SAHF,GAQI1D,OARJ,CAGE0D,SAHF;EAAA,IAIEC,aAJF,GAQI3D,OARJ,CAIE2D,aAJF;EAAA,IAKEC,WALF,GAQI5D,OARJ,CAKE4D,WALF;EAAA,IAMEC,kBANF,GAQI7D,OARJ,CAME6D,kBANF;EAAA,IAOEC,kBAPF,GAQI9D,OARJ,CAOE8D,kBAPF;EASA,IAAMC,GAAG,GAAGhD,IAAI,CAACG,UAALH,IAAmBA,IAAI,CAACG,UAALH,CAAgBiD,OAAhBjD,WAA2BD,QAA3B,QAAwC,EAAxCC,CAA/B;EACA,IAAME,cAAc,GAAG4C,kBAAkB,YAAG,CAAH,EAAQtD,KAAR,CAAzC;EACA,IAAM0D,cAAc,GAAGC,mCAAmC,CACxD3D,KADwD,EAExDuD,kBAFwD,EAGxDd,gBAHwD,CAA1D;EAMA,OAAO;IACLhC,QAAQ,EAAED,IAAI,CAACC,QADV;IAELE,UAAU,EAAEH,IAAI,CAACG,UAFZ;IAGLiD,OAAO,EAAE;MAACJ;IAAD,CAHJ;IAILK,EAAE,EAAErD,IAAI,CAACG,UAJJ;IAKLuC,MAAM,EAAEC,SAAS,CAACD,MAAD,CALZ;IAMLY,IAAI,EAAET,WAAW,CAAC7C,IAAD,CANZ;IAOL4C,aAPK,EAOLA,aAPK;IAQL1C,cARK,EAQLA,cARK;IASLgD;EATK,CAAP;AAgBD;;AASD,SAASC,mCAAT,CACE3D,KADF,EAEEuD,kBAFF,EAGEd,gBAHF,EAIyB;EACvB,IAAIc,kBAAkB,CAACQ,MAAvB,EAA+B;IAC7B,IAAO3C,UAAP,GAA6CqB,gBAA7C,CAAOrB,UAAP;IAAA,IAAmBC,UAAnB,GAA6CoB,gBAA7C,CAAmBpB,UAAnB;IAAA,IAA+BC,UAA/B,GAA6CmB,gBAA7C,CAA+BnB,UAA/B;;IACA,2CAAiEiC,kBAAkB,CAACQ,MAApF;IAAA,IAAOC,IAAP;IAAA,IAAaC,KAAb;IAAA,IAAoBC,IAApB;IAAA,IAA0BC,KAA1B;IAAA,IAAiCC,aAAjC;IAAA,IAAgDC,aAAhD;;IACA,IAAMC,oBAAoB,YAAG,CAAH,EAAQtE,KAAR,CAA1B;IAEA,IAAMuE,KAAK,GAAG,CAACL,IAAI,GAAGF,IAAR,IAAgBM,oBAA9B;IACA,IAAME,KAAK,GAAG,CAACL,KAAK,GAAGF,KAAT,IAAkBK,oBAAhC;IACA,IAAMG,KAAK,GAAG,CAACJ,aAAa,GAAGD,aAAjB,IAAkCE,oBAAhD;IAEA,IAAOI,SAAP,GAAgCV,IAAI,GAAGO,KAAK,GAAGnD,UAA/C;IAAA,IAAkBuD,SAAlB,GAA2DX,IAAI,GAAGO,KAAK,IAAInD,UAAU,GAAG,CAAjB,CAAvE;IACA,IAAOwD,UAAP,GAAkCX,KAAK,GAAGO,KAAK,GAAGnD,UAAlD;IAAA,IAAmBwD,UAAnB,GAA8DZ,KAAK,GAAGO,KAAK,IAAInD,UAAU,GAAG,CAAjB,CAA3E;IACA,IAAOyD,kBAAP,GACEV,aAAa,GAAGK,KAAK,GAAGnD,UAD1B;IAAA,IAA2ByD,kBAA3B,GAEEX,aAAa,GAAGK,KAAK,IAAInD,UAAU,GAAG,CAAjB,CAFvB;IAKA,OAAO;MACLyC,MAAM,EAAE,CAACW,SAAD,EAAYE,UAAZ,EAAwBD,SAAxB,EAAmCE,UAAnC,EAA+CC,kBAA/C,EAAmEC,kBAAnE;IADH,CAAP;EAGD;;EAGDC,OAAO,CAACC,IAARD,CAAa,oCAAbA,EAAmDzB,kBAAnDyB;EACA,OAAO,IAAP;AACD;;AAOD,SAAS9D,UAAT,CAAoBgE,KAApB,EAAmCC,MAAnC,EAA2D;EACzD,OAAOC,QAAQ,CAACF,KAAK,CAACG,QAANH,CAAe,CAAfA,IAAoBC,MAAM,CAACE,QAAPF,CAAgB,CAAhBA,CAArB,EAAyC,CAAzC,CAAf;AACD;;AAUD,OAAO,SAAStD,yBAAT,CACLyD,WADK,EAELtF,KAFK,EAGLJ,CAHK,EAILC,CAJK,EAKLC,CALK,EAMG;EACR,IAAMyF,MAAM,GAAGC,cAAc,CAAC;IAACxF,KAAD,EAACA,KAAD;IAAQJ,CAAR,EAAQA,CAAR;IAAWC,CAAX,EAAWA,CAAX;IAAcC;EAAd,CAAD,CAA7B;EACA,OAAOwF,WAAW,CAAC7B,OAAZ6B,CAAoB,uBAApBA,EAA8CG,iBAAD;IAAA,OAAaF,MAAM,CAACE,OAAD,CAAnB;EAAA,CAA7CH,CAAP;AACD;;AAMD,SAASE,cAAT,CAAwBE,KAAxB,EAAiF;EAC/E,IAAMH,MAAM,GAAG,EAAf;;EAEA,KAAK,IAAMI,GAAX,IAAkBD,KAAlB,EAAyB;IACvBH,MAAM,YAAKI,GAAL,OAANJ,GAAqBG,KAAK,CAACC,GAAD,CAA1BJ;EACD;;EACD,OAAOA,MAAP;AACD;;AAUD,SAAStC,4BAAT,CACE2C,iBADF,EAEEC,kBAFF,EAGW;EACT,IAAMC,SAAS,GAAGC,IAAI,CAACC,KAALD,CAAWH,iBAAiB,GAAG,CAA/BG,CAAlB;EACA,IAAME,QAAQ,GAAGL,iBAAiB,GAAG,CAArC;EACA,IAAMM,QAAQ,GAAIL,kBAAkB,CAACC,SAAD,CAAlBD,IAAiCI,QAAjCJ,GAA6C,CAA/D;EAEA,OAAOK,QAAQ,KAAK,CAApB;AACD","names":["Tile3DSubtreeLoader","load","QUADTREE_DEVISION_COUNT","OCTREE_DEVISION_COUNT","SUBDIVISION_COUNT_MAP","QUADTREE","OCTREE","parseImplicitTiles","subtree","options","parentData","mortonIndex","x","y","z","childIndex","level","globalData","subdivisionScheme","subtreeLevels","maximumLevel","contentUrlTemplate","subtreesUriTemplate","basePath","tile","children","lodMetricValue","contentUrl","childrenPerTile","childX","childY","childZ","levelOffset","childTileMortonIndex","concatBits","tileAvailabilityIndex","childTileX","childTileY","childTileZ","isChildSubtreeAvailable","getAvailabilityResult","childSubtreeAvailability","lev","subtreePath","childSubtreeUrl","replaceContentUrlTemplate","childSubtree","isTileAvailable","tileAvailability","isContentAvailable","contentAvailability","childTileLevel","pData","index","currentTile","length","globalLevel","childCoordinates","formattedTile","formatTileData","push","availabilityData","Boolean","constant","explicitBitstream","getBooleanValueFromBitstream","refine","getRefine","lodMetricType","getTileType","rootLodMetricValue","rootBoundingVolume","uri","replace","boundingVolume","calculateBoundingVolumeForChildTile","content","id","type","region","west","south","east","north","minimumHeight","maximumHeight","boundingVolumesCount","sizeX","sizeY","sizeZ","childWest","childEast","childSouth","childNorth","childMinimumHeight","childMaximumHeight","console","warn","first","second","parseInt","toString","templateUrl","mapUrl","generateMapUrl","matched","items","key","availabilityIndex","availabilityBuffer","byteIndex","Math","floor","bitIndex","bitValue"],"sources":["../../../../../src/lib/parsers/helpers/parse-3d-implicit-tiles.ts"],"sourcesContent":["import type {Availability, BoundingVolume, Subtree} from '../../../types';\nimport {Tile3DSubtreeLoader} from '../../../tile-3d-subtree-loader';\nimport {load} from '@loaders.gl/core';\n\nconst QUADTREE_DEVISION_COUNT = 4;\nconst OCTREE_DEVISION_COUNT = 8;\n\nconst SUBDIVISION_COUNT_MAP = {\n  QUADTREE: QUADTREE_DEVISION_COUNT,\n  OCTREE: OCTREE_DEVISION_COUNT\n};\n\n/**\n * Recursively parse implicit tiles tree\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_implicit_tiling\n * TODO Check out do we able to use Tile3D class as return type here.\n * @param subtree\n * @param lodMetricValue\n * @param options\n * @param parentData\n * @param childIndex\n * @param level\n * @param globalData\n */\n// eslint-disable-next-line max-params\n// eslint-disable-next-line max-statements\nexport async function parseImplicitTiles(\n  subtree: Subtree,\n  options: any,\n  parentData: {mortonIndex: number; x: number; y: number; z: number} = {\n    mortonIndex: 0,\n    x: 0,\n    y: 0,\n    z: 0\n  },\n  childIndex: number = 0,\n  level: number = 0,\n  globalData: {level: number; mortonIndex: number; x: number; y: number; z: number} = {\n    level: 0,\n    mortonIndex: 0,\n    x: 0,\n    y: 0,\n    z: 0\n  }\n) {\n  const {\n    subdivisionScheme,\n    subtreeLevels,\n    maximumLevel,\n    contentUrlTemplate,\n    subtreesUriTemplate,\n    basePath\n  } = options;\n\n  const tile = {children: [], lodMetricValue: 0, contentUrl: ''};\n\n  const childrenPerTile = SUBDIVISION_COUNT_MAP[subdivisionScheme];\n\n  const childX = childIndex & 0b01;\n  const childY = (childIndex >> 1) & 0b01;\n  const childZ = (childIndex >> 2) & 0b01;\n\n  const levelOffset = (childrenPerTile ** level - 1) / (childrenPerTile - 1);\n  let childTileMortonIndex = concatBits(parentData.mortonIndex, childIndex);\n  let tileAvailabilityIndex = levelOffset + childTileMortonIndex;\n\n  // Local tile coordinates\n  let childTileX = concatBits(parentData.x, childX);\n  let childTileY = concatBits(parentData.y, childY);\n  let childTileZ = concatBits(parentData.z, childZ);\n\n  // TODO Remove after real implicit tileset will be tested.\n  // Degug data\n  // tile.level = level + globalData.level;\n  // tile.x = concatBits(globalData.x, childTileX);\n  // tile.y = concatBits(globalData.y, childTileY);\n  // tile.z = concatBits(globalData.z, childTileZ);\n  // tile.mortonIndex = childTileMortonIndex;\n  // End of debug data\n\n  let isChildSubtreeAvailable = false;\n\n  if (level + 1 > subtreeLevels) {\n    isChildSubtreeAvailable = getAvailabilityResult(\n      subtree.childSubtreeAvailability,\n      childTileMortonIndex\n    );\n  }\n\n  const x = concatBits(globalData.x, childTileX);\n  const y = concatBits(globalData.y, childTileY);\n  const z = concatBits(globalData.z, childTileZ);\n  const lev = level + globalData.level;\n\n  if (isChildSubtreeAvailable) {\n    const subtreePath = `${basePath}/${subtreesUriTemplate}`;\n    const childSubtreeUrl = replaceContentUrlTemplate(subtreePath, lev, x, y, z);\n    const childSubtree = await load(childSubtreeUrl, Tile3DSubtreeLoader);\n\n    subtree = childSubtree;\n\n    globalData.mortonIndex = childTileMortonIndex;\n    globalData.x = childTileX;\n    globalData.y = childTileY;\n    globalData.z = childTileZ;\n    globalData.level = level;\n\n    childTileMortonIndex = 0;\n    tileAvailabilityIndex = 0;\n    childTileX = 0;\n    childTileY = 0;\n    childTileZ = 0;\n    level = 0;\n  }\n\n  const isTileAvailable = getAvailabilityResult(subtree.tileAvailability, tileAvailabilityIndex);\n\n  if (!isTileAvailable || level > maximumLevel) {\n    return tile;\n  }\n\n  const isContentAvailable = getAvailabilityResult(\n    subtree.contentAvailability,\n    tileAvailabilityIndex\n  );\n\n  if (isContentAvailable) {\n    tile.contentUrl = replaceContentUrlTemplate(contentUrlTemplate, lev, x, y, z);\n  }\n\n  const childTileLevel = level + 1;\n  const pData = {mortonIndex: childTileMortonIndex, x: childTileX, y: childTileY, z: childTileZ};\n\n  for (let index = 0; index < childrenPerTile; index++) {\n    const currentTile = await parseImplicitTiles(\n      subtree,\n      options,\n      pData,\n      index,\n      childTileLevel,\n      globalData\n    );\n\n    if (currentTile.contentUrl || currentTile.children.length) {\n      const globalLevel = lev + 1;\n      const childCoordinates = {childTileX, childTileY, childTileZ};\n      const formattedTile = formatTileData(currentTile, globalLevel, childCoordinates, options);\n      // @ts-ignore\n      tile.children.push(formattedTile);\n    }\n  }\n\n  return tile;\n}\n\nfunction getAvailabilityResult(availabilityData: Availability, index: number): boolean {\n  if ('constant' in availabilityData) {\n    return Boolean(availabilityData.constant);\n  }\n\n  if (availabilityData.explicitBitstream) {\n    return getBooleanValueFromBitstream(index, availabilityData.explicitBitstream);\n  }\n\n  return false;\n}\n\n/**\n * Do formatting of implicit tile data.\n * TODO Check out do we able to use Tile3D class as type here.\n * @param tile\n * @param lodMetricValue\n * @param options\n * @returns\n */\nfunction formatTileData(\n  tile,\n  level: number,\n  childCoordinates: {childTileX: number; childTileY: number; childTileZ: number},\n  options: any\n) {\n  const {\n    basePath,\n    refine,\n    getRefine,\n    lodMetricType,\n    getTileType,\n    rootLodMetricValue,\n    rootBoundingVolume\n  } = options;\n  const uri = tile.contentUrl && tile.contentUrl.replace(`${basePath}/`, '');\n  const lodMetricValue = rootLodMetricValue / 2 ** level;\n  const boundingVolume = calculateBoundingVolumeForChildTile(\n    level,\n    rootBoundingVolume,\n    childCoordinates\n  );\n\n  return {\n    children: tile.children,\n    contentUrl: tile.contentUrl,\n    content: {uri},\n    id: tile.contentUrl,\n    refine: getRefine(refine),\n    type: getTileType(tile),\n    lodMetricType,\n    lodMetricValue,\n    boundingVolume\n    // Temp debug values. Remove when real implicit tileset will be tested.\n    // x: tile.x,\n    // y: tile.y,\n    // z: tile.z,\n    // level: tile.level\n  };\n}\n\n/**\n * Calculate child bounding volume.\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_implicit_tiling#subdivision-rules\n * @param level\n * @param rootBoundingVolume\n * @param childCoordinates\n */\nfunction calculateBoundingVolumeForChildTile(\n  level: number,\n  rootBoundingVolume: BoundingVolume,\n  childCoordinates: {childTileX: number; childTileY: number; childTileZ: number}\n): BoundingVolume | null {\n  if (rootBoundingVolume.region) {\n    const {childTileX, childTileY, childTileZ} = childCoordinates;\n    const [west, south, east, north, minimumHeight, maximumHeight] = rootBoundingVolume.region;\n    const boundingVolumesCount = 2 ** level;\n\n    const sizeX = (east - west) / boundingVolumesCount;\n    const sizeY = (north - south) / boundingVolumesCount;\n    const sizeZ = (maximumHeight - minimumHeight) / boundingVolumesCount;\n\n    const [childWest, childEast] = [west + sizeX * childTileX, west + sizeX * (childTileX + 1)];\n    const [childSouth, childNorth] = [south + sizeY * childTileY, south + sizeY * (childTileY + 1)];\n    const [childMinimumHeight, childMaximumHeight] = [\n      minimumHeight + sizeZ * childTileZ,\n      minimumHeight + sizeZ * (childTileZ + 1)\n    ];\n\n    return {\n      region: [childWest, childSouth, childEast, childNorth, childMinimumHeight, childMaximumHeight]\n    };\n  }\n\n  // eslint-disable-next-line no-console\n  console.warn('Unsupported bounding volume type: ', rootBoundingVolume);\n  return null;\n}\n\n/**\n * Do binary concatenation\n * @param first\n * @param second\n */\nfunction concatBits(first: number, second: number): number {\n  return parseInt(first.toString(2) + second.toString(2), 2);\n}\n\n/**\n * Replace implicit tile content url with real coordinates.\n * @param templateUrl\n * @param level\n * @param x\n * @param y\n * @param z\n */\nexport function replaceContentUrlTemplate(\n  templateUrl: string,\n  level: number,\n  x: number,\n  y: number,\n  z: number\n): string {\n  const mapUrl = generateMapUrl({level, x, y, z});\n  return templateUrl.replace(/{level}|{x}|{y}|{z}/gi, (matched) => mapUrl[matched]);\n}\n\n/**\n * Get Map object for content url generation\n * @param items\n */\nfunction generateMapUrl(items: {[key: string]: number}): {[key: string]: string} {\n  const mapUrl = {};\n\n  for (const key in items) {\n    mapUrl[`{${key}}`] = items[key];\n  }\n  return mapUrl;\n}\n\n/**\n * Get boolean value from bistream by index\n * A boolean value is encoded as a single bit, either 0 (false) or 1 (true).\n * Multiple boolean values are packed tightly in the same buffer.\n * These buffers of tightly-packed bits are sometimes referred to as bitstreams.\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/implicit-revisions/specification/Metadata#booleans\n * @param availabilitiIndex\n */\nfunction getBooleanValueFromBitstream(\n  availabilityIndex: number,\n  availabilityBuffer: Uint8Array\n): boolean {\n  const byteIndex = Math.floor(availabilityIndex / 8);\n  const bitIndex = availabilityIndex % 8;\n  const bitValue = (availabilityBuffer[byteIndex] >> bitIndex) & 1;\n\n  return bitValue === 1;\n}\n"]},"metadata":{},"sourceType":"module"}