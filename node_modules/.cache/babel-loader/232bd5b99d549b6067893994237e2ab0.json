{"ast":null,"code":"import { assert } from '@loaders.gl/loader-utils';\nexport function isLoaderObject(loader) {\n  var _loader;\n\n  if (!loader) {\n    return false;\n  }\n\n  if (Array.isArray(loader)) {\n    loader = loader[0];\n  }\n\n  const hasExtensions = Array.isArray((_loader = loader) === null || _loader === void 0 ? void 0 : _loader.extensions);\n  return hasExtensions;\n}\nexport function normalizeLoader(loader) {\n  var _loader2, _loader3;\n\n  assert(loader, 'null loader');\n  assert(isLoaderObject(loader), 'invalid loader');\n  let options;\n\n  if (Array.isArray(loader)) {\n    options = loader[1];\n    loader = loader[0];\n    loader = { ...loader,\n      options: { ...loader.options,\n        ...options\n      }\n    };\n  }\n\n  if ((_loader2 = loader) !== null && _loader2 !== void 0 && _loader2.parseTextSync || (_loader3 = loader) !== null && _loader3 !== void 0 && _loader3.parseText) {\n    loader.text = true;\n  }\n\n  if (!loader.text) {\n    loader.binary = true;\n  }\n\n  return loader;\n}","map":{"version":3,"mappings":"AACA,SAAQA,MAAR,QAAqB,0BAArB;AAEA,OAAO,SAASC,cAAT,CAAwBC,MAAxB,EAA+C;EAAA;;EACpD,IAAI,CAACA,MAAL,EAAa;IACX,OAAO,KAAP;EACD;;EAED,IAAIC,KAAK,CAACC,OAAND,CAAcD,MAAdC,CAAJ,EAA2B;IACzBD,MAAM,GAAGA,MAAM,CAAC,CAAD,CAAfA;EACD;;EAED,MAAMG,aAAa,GAAGF,KAAK,CAACC,OAAND,YAAcD,MAAd,4CAAcI,QAAQC,UAAtBJ,CAAtB;EAWA,OAAOE,aAAP;AACD;AAED,OAAO,SAASG,eAAT,CAAyBN,MAAzB,EAAiD;EAAA;;EAItDF,MAAM,CAACE,MAAD,EAAS,aAAT,CAANF;EACAA,MAAM,CAACC,cAAc,CAACC,MAAD,CAAf,EAAyB,gBAAzB,CAANF;EAKA,IAAIS,OAAJ;;EACA,IAAIN,KAAK,CAACC,OAAND,CAAcD,MAAdC,CAAJ,EAA2B;IACzBM,OAAO,GAAGP,MAAM,CAAC,CAAD,CAAhBO;IACAP,MAAM,GAAGA,MAAM,CAAC,CAAD,CAAfA;IACAA,MAAM,GAAG,EACP,GAAGA,MADI;MAEPO,OAAO,EAAE,EAAC,GAAGP,MAAM,CAACO,OAAX;QAAoB,GAAGA;MAAvB;IAFF,CAATP;EAID;;EAMD,IAAI,wBAAM,IAAN,oCAAQQ,aAAR,gBAAyBR,MAAzB,qCAAyBS,SAAQC,SAArC,EAAgD;IAC9CV,MAAM,CAACW,IAAPX,GAAc,IAAdA;EACD;;EAED,IAAI,CAACA,MAAM,CAACW,IAAZ,EAAkB;IAChBX,MAAM,CAACY,MAAPZ,GAAgB,IAAhBA;EACD;;EAED,OAAOA,MAAP;AACD","names":["assert","isLoaderObject","loader","Array","isArray","hasExtensions","_loader","extensions","normalizeLoader","options","parseTextSync","_loader3","parseText","text","binary"],"sources":["../../../../src/lib/loader-utils/normalize-loader.ts"],"sourcesContent":["import type {Loader} from '@loaders.gl/loader-utils';\nimport {assert} from '@loaders.gl/loader-utils';\n\nexport function isLoaderObject(loader?: any): boolean {\n  if (!loader) {\n    return false;\n  }\n\n  if (Array.isArray(loader)) {\n    loader = loader[0];\n  }\n\n  const hasExtensions = Array.isArray(loader?.extensions);\n\n  /* Now handled by types and worker loaders do not have these\n  let hasParser =\n    loader.parseTextSync ||\n    loader.parseSync ||\n    loader.parse ||\n    loader.parseStream || // TODO Remove, Replace with parseInBatches\n    loader.parseInBatches;\n  */\n\n  return hasExtensions;\n}\n\nexport function normalizeLoader(loader: Loader): Loader {\n  // This error is fairly easy to trigger by mixing up import statements etc\n  // So we make an exception and add a developer error message for this case\n  // To help new users from getting stuck here\n  assert(loader, 'null loader');\n  assert(isLoaderObject(loader), 'invalid loader');\n\n  // NORMALIZE [LOADER, OPTIONS] => LOADER\n\n  // If [loader, options], create a new loaders object with options merged in\n  let options;\n  if (Array.isArray(loader)) {\n    options = loader[1];\n    loader = loader[0];\n    loader = {\n      ...loader,\n      options: {...loader.options, ...options}\n    };\n  }\n\n  // NORMALIZE text and binary flags\n  // Ensure at least one of text/binary flags are properly set\n\n  // @ts-expect-error\n  if (loader?.parseTextSync || loader?.parseText) {\n    loader.text = true;\n  }\n\n  if (!loader.text) {\n    loader.binary = true;\n  }\n\n  return loader;\n}\n"]},"metadata":{},"sourceType":"module"}