{"ast":null,"code":"import { assembleShaders } from '@luma.gl/shadertools';\nimport { Program } from '@luma.gl/webgl';\nexport default class ProgramManager {\n  static getDefaultProgramManager(gl) {\n    gl.luma = gl.luma || {};\n    gl.luma.defaultProgramManager = gl.luma.defaultProgramManager || new ProgramManager(gl);\n    return gl.luma.defaultProgramManager;\n  }\n\n  constructor(gl) {\n    this.gl = gl;\n    this._programCache = {};\n    this._getUniforms = {};\n    this._registeredModules = {};\n    this._hookFunctions = [];\n    this._defaultModules = [];\n    this._hashes = {};\n    this._hashCounter = 0;\n    this.stateHash = 0;\n    this._useCounts = {};\n  }\n\n  addDefaultModule(module) {\n    if (!this._defaultModules.find(m => m.name === module.name)) {\n      this._defaultModules.push(module);\n    }\n\n    this.stateHash++;\n  }\n\n  removeDefaultModule(module) {\n    const moduleName = typeof module === 'string' ? module : module.name;\n    this._defaultModules = this._defaultModules.filter(m => m.name !== moduleName);\n    this.stateHash++;\n  }\n\n  addShaderHook(hook, opts) {\n    if (opts) {\n      hook = Object.assign(opts, {\n        hook\n      });\n    }\n\n    this._hookFunctions.push(hook);\n\n    this.stateHash++;\n  }\n\n  get() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      vs = '',\n      fs = '',\n      defines = {},\n      inject = {},\n      varyings = [],\n      bufferMode = 0x8c8d,\n      transpileToGLSL100 = false\n    } = props;\n\n    const modules = this._getModuleList(props.modules);\n\n    const vsHash = this._getHash(vs);\n\n    const fsHash = this._getHash(fs);\n\n    const moduleHashes = modules.map(m => this._getHash(m.name)).sort();\n    const varyingHashes = varyings.map(v => this._getHash(v));\n    const defineKeys = Object.keys(defines).sort();\n    const injectKeys = Object.keys(inject).sort();\n    const defineHashes = [];\n    const injectHashes = [];\n\n    for (const key of defineKeys) {\n      defineHashes.push(this._getHash(key));\n      defineHashes.push(this._getHash(defines[key]));\n    }\n\n    for (const key of injectKeys) {\n      injectHashes.push(this._getHash(key));\n      injectHashes.push(this._getHash(inject[key]));\n    }\n\n    const hash = `${vsHash}/${fsHash}D${defineHashes.join('/')}M${moduleHashes.join('/')}I${injectHashes.join('/')}V${varyingHashes.join('/')}H${this.stateHash}B${bufferMode}${transpileToGLSL100 ? 'T' : ''}`;\n\n    if (!this._programCache[hash]) {\n      const assembled = assembleShaders(this.gl, {\n        vs,\n        fs,\n        modules,\n        inject,\n        defines,\n        hookFunctions: this._hookFunctions,\n        transpileToGLSL100\n      });\n      this._programCache[hash] = new Program(this.gl, {\n        hash,\n        vs: assembled.vs,\n        fs: assembled.fs,\n        varyings,\n        bufferMode\n      });\n\n      this._getUniforms[hash] = assembled.getUniforms || (x => {});\n\n      this._useCounts[hash] = 0;\n    }\n\n    this._useCounts[hash]++;\n    return this._programCache[hash];\n  }\n\n  getUniforms(program) {\n    return this._getUniforms[program.hash] || null;\n  }\n\n  release(program) {\n    const hash = program.hash;\n    this._useCounts[hash]--;\n\n    if (this._useCounts[hash] === 0) {\n      this._programCache[hash].delete();\n\n      delete this._programCache[hash];\n      delete this._getUniforms[hash];\n      delete this._useCounts[hash];\n    }\n  }\n\n  _getHash(key) {\n    if (this._hashes[key] === undefined) {\n      this._hashes[key] = this._hashCounter++;\n    }\n\n    return this._hashes[key];\n  }\n\n  _getModuleList() {\n    let appModules = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    const modules = new Array(this._defaultModules.length + appModules.length);\n    const seen = {};\n    let count = 0;\n\n    for (let i = 0, len = this._defaultModules.length; i < len; ++i) {\n      const module = this._defaultModules[i];\n      const name = module.name;\n      modules[count++] = module;\n      seen[name] = true;\n    }\n\n    for (let i = 0, len = appModules.length; i < len; ++i) {\n      const module = appModules[i];\n      const name = module.name;\n\n      if (!seen[name]) {\n        modules[count++] = module;\n        seen[name] = true;\n      }\n    }\n\n    modules.length = count;\n    return modules;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["assembleShaders","Program","ProgramManager","getDefaultProgramManager","gl","luma","defaultProgramManager","constructor","_programCache","_getUniforms","_registeredModules","_hookFunctions","_defaultModules","_hashes","_hashCounter","stateHash","_useCounts","addDefaultModule","module","find","m","name","push","removeDefaultModule","moduleName","filter","addShaderHook","hook","opts","Object","assign","get","props","vs","fs","defines","inject","varyings","bufferMode","transpileToGLSL100","modules","_getModuleList","vsHash","_getHash","fsHash","moduleHashes","map","sort","varyingHashes","v","defineKeys","keys","injectKeys","defineHashes","injectHashes","key","hash","join","assembled","hookFunctions","getUniforms","x","program","release","delete","undefined","appModules","Array","length","seen","count","i","len"],"sources":["../../../src/lib/program-manager.js"],"sourcesContent":["import {assembleShaders} from '@luma.gl/shadertools';\nimport {Program} from '@luma.gl/webgl';\n\nexport default class ProgramManager {\n  static getDefaultProgramManager(gl) {\n    gl.luma = gl.luma || {};\n    gl.luma.defaultProgramManager = gl.luma.defaultProgramManager || new ProgramManager(gl);\n\n    return gl.luma.defaultProgramManager;\n  }\n\n  constructor(gl) {\n    this.gl = gl;\n\n    this._programCache = {};\n    this._getUniforms = {};\n    this._registeredModules = {}; // TODO: Remove? This isn't used anywhere in luma.gl\n    this._hookFunctions = [];\n    this._defaultModules = [];\n\n    this._hashes = {};\n    this._hashCounter = 0;\n    this.stateHash = 0; // Used change hashing if hooks are modified\n    this._useCounts = {};\n  }\n\n  addDefaultModule(module) {\n    if (!this._defaultModules.find(m => m.name === module.name)) {\n      this._defaultModules.push(module);\n    }\n\n    this.stateHash++;\n  }\n\n  removeDefaultModule(module) {\n    const moduleName = typeof module === 'string' ? module : module.name;\n    this._defaultModules = this._defaultModules.filter(m => m.name !== moduleName);\n    this.stateHash++;\n  }\n\n  addShaderHook(hook, opts) {\n    if (opts) {\n      hook = Object.assign(opts, {hook});\n    }\n\n    this._hookFunctions.push(hook);\n\n    this.stateHash++;\n  }\n\n  get(props = {}) {\n    const {\n      vs = '',\n      fs = '',\n      defines = {},\n      inject = {},\n      varyings = [],\n      bufferMode = 0x8c8d,\n      transpileToGLSL100 = false\n    } = props; // varyings/bufferMode for xform feedback, 0x8c8d = SEPARATE_ATTRIBS\n\n    const modules = this._getModuleList(props.modules); // Combine with default modules\n\n    const vsHash = this._getHash(vs);\n    const fsHash = this._getHash(fs);\n    const moduleHashes = modules.map(m => this._getHash(m.name)).sort();\n    const varyingHashes = varyings.map(v => this._getHash(v));\n\n    const defineKeys = Object.keys(defines).sort();\n    const injectKeys = Object.keys(inject).sort();\n    const defineHashes = [];\n    const injectHashes = [];\n\n    for (const key of defineKeys) {\n      defineHashes.push(this._getHash(key));\n      defineHashes.push(this._getHash(defines[key]));\n    }\n\n    for (const key of injectKeys) {\n      injectHashes.push(this._getHash(key));\n      injectHashes.push(this._getHash(inject[key]));\n    }\n\n    const hash = `${vsHash}/${fsHash}D${defineHashes.join('/')}M${moduleHashes.join(\n      '/'\n    )}I${injectHashes.join('/')}V${varyingHashes.join('/')}H${this.stateHash}B${bufferMode}${\n      transpileToGLSL100 ? 'T' : ''\n    }`;\n\n    if (!this._programCache[hash]) {\n      const assembled = assembleShaders(this.gl, {\n        vs,\n        fs,\n        modules,\n        inject,\n        defines,\n        hookFunctions: this._hookFunctions,\n        transpileToGLSL100\n      });\n\n      this._programCache[hash] = new Program(this.gl, {\n        hash,\n        vs: assembled.vs,\n        fs: assembled.fs,\n        varyings,\n        bufferMode\n      });\n\n      this._getUniforms[hash] = assembled.getUniforms || (x => {});\n      this._useCounts[hash] = 0;\n    }\n\n    this._useCounts[hash]++;\n\n    return this._programCache[hash];\n  }\n\n  getUniforms(program) {\n    return this._getUniforms[program.hash] || null;\n  }\n\n  release(program) {\n    const hash = program.hash;\n    this._useCounts[hash]--;\n\n    if (this._useCounts[hash] === 0) {\n      this._programCache[hash].delete();\n      delete this._programCache[hash];\n      delete this._getUniforms[hash];\n      delete this._useCounts[hash];\n    }\n  }\n\n  _getHash(key) {\n    if (this._hashes[key] === undefined) {\n      this._hashes[key] = this._hashCounter++;\n    }\n\n    return this._hashes[key];\n  }\n\n  // Dedup and combine with default modules\n  _getModuleList(appModules = []) {\n    const modules = new Array(this._defaultModules.length + appModules.length);\n    const seen = {};\n    let count = 0;\n\n    for (let i = 0, len = this._defaultModules.length; i < len; ++i) {\n      const module = this._defaultModules[i];\n      const name = module.name;\n      modules[count++] = module;\n      seen[name] = true;\n    }\n\n    for (let i = 0, len = appModules.length; i < len; ++i) {\n      const module = appModules[i];\n      const name = module.name;\n      if (!seen[name]) {\n        modules[count++] = module;\n        seen[name] = true;\n      }\n    }\n\n    modules.length = count;\n\n    return modules;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}