{"ast":null,"code":"import _awaitAsyncGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nexport function makeTextDecoderIterator(_x) {\n  return _makeTextDecoderIterator.apply(this, arguments);\n}\n\nfunction _makeTextDecoderIterator() {\n  _makeTextDecoderIterator = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(arrayBufferIterator) {\n    var options,\n        textDecoder,\n        _iteratorAbruptCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        arrayBuffer,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            textDecoder = new TextDecoder(undefined, options);\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 4;\n            _iterator = _asyncIterator(arrayBufferIterator);\n\n          case 6:\n            _context.next = 8;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 8:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 15;\n              break;\n            }\n\n            arrayBuffer = _step.value;\n            _context.next = 12;\n            return typeof arrayBuffer === 'string' ? arrayBuffer : textDecoder.decode(arrayBuffer, {\n              stream: true\n            });\n\n          case 12:\n            _iteratorAbruptCompletion = false;\n            _context.next = 6;\n            break;\n\n          case 15:\n            _context.next = 21;\n            break;\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](4);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 21:\n            _context.prev = 21;\n            _context.prev = 22;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 26;\n              break;\n            }\n\n            _context.next = 26;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 26:\n            _context.prev = 26;\n\n            if (!_didIteratorError) {\n              _context.next = 29;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 29:\n            return _context.finish(26);\n\n          case 30:\n            return _context.finish(21);\n\n          case 31:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 17, 21, 31], [22,, 26, 30]]);\n  }));\n  return _makeTextDecoderIterator.apply(this, arguments);\n}\n\nexport function makeTextEncoderIterator(_x2) {\n  return _makeTextEncoderIterator.apply(this, arguments);\n}\n\nfunction _makeTextEncoderIterator() {\n  _makeTextEncoderIterator = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(textIterator) {\n    var textEncoder, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, text;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            textEncoder = new TextEncoder();\n            _iteratorAbruptCompletion2 = false;\n            _didIteratorError2 = false;\n            _context2.prev = 3;\n            _iterator2 = _asyncIterator(textIterator);\n\n          case 5:\n            _context2.next = 7;\n            return _awaitAsyncGenerator(_iterator2.next());\n\n          case 7:\n            if (!(_iteratorAbruptCompletion2 = !(_step2 = _context2.sent).done)) {\n              _context2.next = 14;\n              break;\n            }\n\n            text = _step2.value;\n            _context2.next = 11;\n            return typeof text === 'string' ? textEncoder.encode(text) : text;\n\n          case 11:\n            _iteratorAbruptCompletion2 = false;\n            _context2.next = 5;\n            break;\n\n          case 14:\n            _context2.next = 20;\n            break;\n\n          case 16:\n            _context2.prev = 16;\n            _context2.t0 = _context2[\"catch\"](3);\n            _didIteratorError2 = true;\n            _iteratorError2 = _context2.t0;\n\n          case 20:\n            _context2.prev = 20;\n            _context2.prev = 21;\n\n            if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n              _context2.next = 25;\n              break;\n            }\n\n            _context2.next = 25;\n            return _awaitAsyncGenerator(_iterator2.return());\n\n          case 25:\n            _context2.prev = 25;\n\n            if (!_didIteratorError2) {\n              _context2.next = 28;\n              break;\n            }\n\n            throw _iteratorError2;\n\n          case 28:\n            return _context2.finish(25);\n\n          case 29:\n            return _context2.finish(20);\n\n          case 30:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 16, 20, 30], [21,, 25, 29]]);\n  }));\n  return _makeTextEncoderIterator.apply(this, arguments);\n}\n\nexport function makeLineIterator(_x3) {\n  return _makeLineIterator.apply(this, arguments);\n}\n\nfunction _makeLineIterator() {\n  _makeLineIterator = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(textIterator) {\n    var previous, _iteratorAbruptCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, textChunk, eolIndex, line;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            previous = '';\n            _iteratorAbruptCompletion3 = false;\n            _didIteratorError3 = false;\n            _context3.prev = 3;\n            _iterator3 = _asyncIterator(textIterator);\n\n          case 5:\n            _context3.next = 7;\n            return _awaitAsyncGenerator(_iterator3.next());\n\n          case 7:\n            if (!(_iteratorAbruptCompletion3 = !(_step3 = _context3.sent).done)) {\n              _context3.next = 21;\n              break;\n            }\n\n            textChunk = _step3.value;\n            previous += textChunk;\n            eolIndex = void 0;\n\n          case 11:\n            if (!((eolIndex = previous.indexOf('\\n')) >= 0)) {\n              _context3.next = 18;\n              break;\n            }\n\n            line = previous.slice(0, eolIndex + 1);\n            previous = previous.slice(eolIndex + 1);\n            _context3.next = 16;\n            return line;\n\n          case 16:\n            _context3.next = 11;\n            break;\n\n          case 18:\n            _iteratorAbruptCompletion3 = false;\n            _context3.next = 5;\n            break;\n\n          case 21:\n            _context3.next = 27;\n            break;\n\n          case 23:\n            _context3.prev = 23;\n            _context3.t0 = _context3[\"catch\"](3);\n            _didIteratorError3 = true;\n            _iteratorError3 = _context3.t0;\n\n          case 27:\n            _context3.prev = 27;\n            _context3.prev = 28;\n\n            if (!(_iteratorAbruptCompletion3 && _iterator3.return != null)) {\n              _context3.next = 32;\n              break;\n            }\n\n            _context3.next = 32;\n            return _awaitAsyncGenerator(_iterator3.return());\n\n          case 32:\n            _context3.prev = 32;\n\n            if (!_didIteratorError3) {\n              _context3.next = 35;\n              break;\n            }\n\n            throw _iteratorError3;\n\n          case 35:\n            return _context3.finish(32);\n\n          case 36:\n            return _context3.finish(27);\n\n          case 37:\n            if (!(previous.length > 0)) {\n              _context3.next = 40;\n              break;\n            }\n\n            _context3.next = 40;\n            return previous;\n\n          case 40:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[3, 23, 27, 37], [28,, 32, 36]]);\n  }));\n  return _makeLineIterator.apply(this, arguments);\n}\n\nexport function makeNumberedLineIterator(_x4) {\n  return _makeNumberedLineIterator.apply(this, arguments);\n}\n\nfunction _makeNumberedLineIterator() {\n  _makeNumberedLineIterator = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(lineIterator) {\n    var counter, _iteratorAbruptCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, line;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            counter = 1;\n            _iteratorAbruptCompletion4 = false;\n            _didIteratorError4 = false;\n            _context4.prev = 3;\n            _iterator4 = _asyncIterator(lineIterator);\n\n          case 5:\n            _context4.next = 7;\n            return _awaitAsyncGenerator(_iterator4.next());\n\n          case 7:\n            if (!(_iteratorAbruptCompletion4 = !(_step4 = _context4.sent).done)) {\n              _context4.next = 15;\n              break;\n            }\n\n            line = _step4.value;\n            _context4.next = 11;\n            return {\n              counter: counter,\n              line: line\n            };\n\n          case 11:\n            counter++;\n\n          case 12:\n            _iteratorAbruptCompletion4 = false;\n            _context4.next = 5;\n            break;\n\n          case 15:\n            _context4.next = 21;\n            break;\n\n          case 17:\n            _context4.prev = 17;\n            _context4.t0 = _context4[\"catch\"](3);\n            _didIteratorError4 = true;\n            _iteratorError4 = _context4.t0;\n\n          case 21:\n            _context4.prev = 21;\n            _context4.prev = 22;\n\n            if (!(_iteratorAbruptCompletion4 && _iterator4.return != null)) {\n              _context4.next = 26;\n              break;\n            }\n\n            _context4.next = 26;\n            return _awaitAsyncGenerator(_iterator4.return());\n\n          case 26:\n            _context4.prev = 26;\n\n            if (!_didIteratorError4) {\n              _context4.next = 29;\n              break;\n            }\n\n            throw _iteratorError4;\n\n          case 29:\n            return _context4.finish(26);\n\n          case 30:\n            return _context4.finish(21);\n\n          case 31:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[3, 17, 21, 31], [22,, 26, 30]]);\n  }));\n  return _makeNumberedLineIterator.apply(this, arguments);\n}","map":{"version":3,"mappings":"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","names":["makeTextDecoderIterator","arrayBufferIterator","options","textDecoder","TextDecoder","undefined","arrayBuffer","decode","stream","makeTextEncoderIterator","textIterator","textEncoder","TextEncoder","text","encode","makeLineIterator","previous","textChunk","eolIndex","indexOf","line","slice","length","makeNumberedLineIterator","lineIterator","counter"],"sources":["../../../../src/lib/iterators/text-iterators.ts"],"sourcesContent":["// TextDecoder iterators\n// TextDecoder will keep any partial undecoded bytes between calls to `decode`\n\nexport async function* makeTextDecoderIterator(\n  arrayBufferIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>,\n  options: TextDecoderOptions = {}\n): AsyncIterable<string> {\n  const textDecoder = new TextDecoder(undefined, options);\n  for await (const arrayBuffer of arrayBufferIterator) {\n    yield typeof arrayBuffer === 'string'\n      ? arrayBuffer\n      : textDecoder.decode(arrayBuffer, {stream: true});\n  }\n}\n\n// TextEncoder iterator\n// TODO - this is not useful unless min chunk size is given\n// TextEncoder will keep any partial undecoded bytes between calls to `encode`\n// If iterator does not yield strings, assume arrayBuffer and return unencoded\n\nexport async function* makeTextEncoderIterator(\n  textIterator: AsyncIterable<string> | Iterable<ArrayBuffer>\n): AsyncIterable<ArrayBuffer> {\n  const textEncoder = new TextEncoder();\n  for await (const text of textIterator) {\n    yield typeof text === 'string' ? textEncoder.encode(text) : text;\n  }\n}\n\n/**\n * @param textIterator async iterable yielding strings\n * @returns an async iterable over lines\n * See http://2ality.com/2018/04/async-iter-nodejs.html\n */\n\nexport async function* makeLineIterator(\n  textIterator: AsyncIterable<string>\n): AsyncIterable<string> {\n  let previous = '';\n  for await (const textChunk of textIterator) {\n    previous += textChunk;\n    let eolIndex;\n    while ((eolIndex = previous.indexOf('\\n')) >= 0) {\n      // line includes the EOL\n      const line = previous.slice(0, eolIndex + 1);\n      previous = previous.slice(eolIndex + 1);\n      yield line;\n    }\n  }\n\n  if (previous.length > 0) {\n    yield previous;\n  }\n}\n\n/**\n * @param lineIterator async iterable yielding lines\n * @returns async iterable yielding numbered lines\n *\n * See http://2ality.com/2018/04/async-iter-nodejs.html\n */\nexport async function* makeNumberedLineIterator(\n  lineIterator: AsyncIterable<string>\n): AsyncIterable<{counter: number; line: string}> {\n  let counter = 1;\n  for await (const line of lineIterator) {\n    yield {counter, line};\n    counter++;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}