{"ast":null,"code":"import { isLoaderObject } from '../loader-utils/normalize-loader';\nimport { getFetchFunction } from '../loader-utils/option-utils';\nimport { parseInBatches } from './parse-in-batches';\nexport function loadInBatches(files, loaders, options, context) {\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined;\n    options = loaders;\n    loaders = null;\n  }\n\n  const fetch = getFetchFunction(options || {});\n\n  if (!Array.isArray(files)) {\n    return loadOneFileInBatches(files, loaders, options, fetch);\n  }\n\n  const promises = files.map(file => loadOneFileInBatches(file, loaders, options, fetch));\n  return promises;\n}\n\nasync function loadOneFileInBatches(file, loaders, options, fetch) {\n  if (typeof file === 'string') {\n    const url = file;\n    const response = await fetch(url);\n    return await parseInBatches(response, loaders, options);\n  }\n\n  return await parseInBatches(file, loaders, options);\n}","map":{"version":3,"mappings":"AACA,SAAQA,cAAR,QAA6B,kCAA7B;AACA,SAAQC,gBAAR,QAA+B,8BAA/B;AAEA,SAAQC,cAAR,QAA6B,oBAA7B;AAyBA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,OAA9B,EAAuCC,OAAvC,EAAgDC,OAAhD,EAAyD;EAE9D,IAAI,CAACC,KAAK,CAACC,OAAND,CAAcH,OAAdG,CAAD,IAA2B,CAACR,cAAc,CAACK,OAAD,CAA9C,EAAyD;IACvDE,OAAO,GAAGG,SAAVH;IACAD,OAAO,GAAGD,OAAVC;IACAD,OAAO,GAAG,IAAVA;EACD;;EAGD,MAAMM,KAAK,GAAGV,gBAAgB,CAACK,OAAO,IAAI,EAAZ,CAA9B;;EAGA,IAAI,CAACE,KAAK,CAACC,OAAND,CAAcJ,KAAdI,CAAL,EAA2B;IACzB,OAAOI,oBAAoB,CAACR,KAAD,EAAQC,OAAR,EAAiBC,OAAjB,EAA0BK,KAA1B,CAA3B;EACD;;EAGD,MAAME,QAAQ,GAAGT,KAAK,CAACU,GAANV,CAAWW,IAAD,IAAUH,oBAAoB,CAACG,IAAD,EAAOV,OAAP,EAAgBC,OAAhB,EAAyBK,KAAzB,CAAxCP,CAAjB;EAGA,OAAOS,QAAP;AACD;;AAED,eAAeD,oBAAf,CAAoCG,IAApC,EAA0CV,OAA1C,EAAmDC,OAAnD,EAA4DK,KAA5D,EAAmE;EACjE,IAAI,OAAOI,IAAP,KAAgB,QAApB,EAA8B;IAC5B,MAAMC,GAAG,GAAGD,IAAZ;IACA,MAAME,QAAQ,GAAG,MAAMN,KAAK,CAACK,GAAD,CAA5B;IACA,OAAO,MAAMd,cAAc,CAACe,QAAD,EAAWZ,OAAX,EAAoBC,OAApB,CAA3B;EACD;;EACD,OAAO,MAAMJ,cAAc,CAACa,IAAD,EAAOV,OAAP,EAAgBC,OAAhB,CAA3B;AACD","names":["isLoaderObject","getFetchFunction","parseInBatches","loadInBatches","files","loaders","options","context","Array","isArray","undefined","fetch","loadOneFileInBatches","promises","map","file","url","response"],"sources":["../../../../src/lib/api/load-in-batches.ts"],"sourcesContent":["import type {LoaderWithParser, LoaderOptions, LoaderContext} from '@loaders.gl/loader-utils';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {getFetchFunction} from '../loader-utils/option-utils';\n\nimport {parseInBatches} from './parse-in-batches';\n\ntype FileType = string | File | Blob | Response | (string | File | Blob | Response)[] | FileList;\n\n/**\n * Parses `data` using a specified loader\n * @param data\n * @param loaders\n * @param options\n * @param context\n */\nexport function loadInBatches(\n  files: FileType,\n  loaders?: LoaderWithParser | LoaderWithParser[] | LoaderOptions,\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<AsyncIterable<any>>;\n\nexport function loadInBatches(\n  files: FileType[] | FileList,\n  loaders?: LoaderWithParser | LoaderWithParser[] | LoaderOptions,\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<AsyncIterable<any>>;\n\nexport function loadInBatches(files, loaders, options, context) {\n  // Signature: load(url, options)\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined; // context not supported in short signature\n    options = loaders;\n    loaders = null;\n  }\n\n  // Select fetch function\n  const fetch = getFetchFunction(options || {});\n\n  // Single url/file\n  if (!Array.isArray(files)) {\n    return loadOneFileInBatches(files, loaders, options, fetch);\n  }\n\n  // Multiple URLs / files\n  const promises = files.map((file) => loadOneFileInBatches(file, loaders, options, fetch));\n\n  // No point in waiting here for all responses before starting to stream individual streams?\n  return promises;\n}\n\nasync function loadOneFileInBatches(file, loaders, options, fetch) {\n  if (typeof file === 'string') {\n    const url = file;\n    const response = await fetch(url);\n    return await parseInBatches(response, loaders, options);\n  }\n  return await parseInBatches(file, loaders, options);\n}\n"]},"metadata":{},"sourceType":"module"}