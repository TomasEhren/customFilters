{"ast":null,"code":"import { Framebuffer, Texture2D, isWebGL2, readPixelsToArray, cssToDeviceRatio, cssToDevicePixels } from '@luma.gl/core';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport { getClosestObject, getUniqueObjects } from './picking/query-object';\nimport { processPickInfo, getLayerPickingInfo, getEmptyPickingInfo } from './picking/pick-info';\nexport default class DeckPicker {\n  constructor(gl) {\n    this.gl = gl;\n    this.pickingFBO = null;\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.layerFilter = null;\n    this.lastPickedInfo = {\n      index: -1,\n      layerId: null,\n      info: null\n    };\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props) {\n      this.layerFilter = props.layerFilter;\n    }\n\n    if ('_pickable' in props) {\n      this._pickable = props._pickable;\n    }\n  }\n\n  finalize() {\n    if (this.pickingFBO) {\n      this.pickingFBO.delete();\n    }\n\n    if (this.depthFBO) {\n      this.depthFBO.color.delete();\n      this.depthFBO.delete();\n    }\n  }\n\n  pickObject(opts) {\n    return this._pickClosestObject(opts);\n  }\n\n  pickObjects(opts) {\n    return this._pickVisibleObjects(opts);\n  }\n\n  getLastPickedObject(_ref) {\n    let {\n      x,\n      y,\n      layers,\n      viewports\n    } = _ref;\n    let lastPickedInfo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.lastPickedInfo.info;\n    const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;\n    const lastPickedViewportId = lastPickedInfo && lastPickedInfo.viewport && lastPickedInfo.viewport.id;\n    const layer = lastPickedLayerId ? layers.find(l => l.id === lastPickedLayerId) : null;\n    const viewport = lastPickedViewportId && viewports.find(v => v.id === lastPickedViewportId) || viewports[0];\n    const coordinate = viewport && viewport.unproject([x - viewport.x, y - viewport.y]);\n    const info = {\n      x,\n      y,\n      viewport,\n      coordinate,\n      layer\n    };\n    return { ...lastPickedInfo,\n      ...info\n    };\n  }\n\n  _resizeBuffer() {\n    const {\n      gl\n    } = this;\n\n    if (!this.pickingFBO) {\n      this.pickingFBO = new Framebuffer(gl);\n\n      if (Framebuffer.isSupported(gl, {\n        colorBufferFloat: true\n      })) {\n        this.depthFBO = new Framebuffer(gl);\n        this.depthFBO.attach({\n          [36064]: new Texture2D(gl, {\n            format: isWebGL2(gl) ? 34836 : 6408,\n            type: 5126\n          })\n        });\n      }\n    }\n\n    this.pickingFBO.resize({\n      width: gl.canvas.width,\n      height: gl.canvas.height\n    });\n\n    if (this.depthFBO) {\n      this.depthFBO.resize({\n        width: gl.canvas.width,\n        height: gl.canvas.height\n      });\n    }\n\n    return this.pickingFBO;\n  }\n\n  _getPickable(layers) {\n    if (this._pickable === false) {\n      return null;\n    }\n\n    const pickableLayers = layers.filter(layer => layer.isPickable() && !layer.isComposite);\n    return pickableLayers.length ? pickableLayers : null;\n  }\n\n  _pickClosestObject(_ref2) {\n    let {\n      layers,\n      views,\n      viewports,\n      x,\n      y,\n      radius = 0,\n      depth = 1,\n      mode = 'query',\n      unproject3D,\n      onViewportActive,\n      effects\n    } = _ref2;\n    layers = this._getPickable(layers);\n\n    if (!layers) {\n      return {\n        result: [],\n        emptyInfo: getEmptyPickingInfo({\n          viewports,\n          x,\n          y\n        })\n      };\n    }\n\n    this._resizeBuffer();\n\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const devicePixelRange = cssToDevicePixels(this.gl, [x, y], true);\n    const devicePixel = [devicePixelRange.x + Math.floor(devicePixelRange.width / 2), devicePixelRange.y + Math.floor(devicePixelRange.height / 2)];\n    const deviceRadius = Math.round(radius * pixelRatio);\n    const {\n      width,\n      height\n    } = this.pickingFBO;\n\n    const deviceRect = this._getPickingRect({\n      deviceX: devicePixel[0],\n      deviceY: devicePixel[1],\n      deviceRadius,\n      deviceWidth: width,\n      deviceHeight: height\n    });\n\n    let infos;\n    const result = [];\n    const affectedLayers = new Set();\n\n    for (let i = 0; i < depth; i++) {\n      const pickedResult = deviceRect && this._drawAndSample({\n        layers,\n        views,\n        viewports,\n        onViewportActive,\n        deviceRect,\n        effects,\n        pass: \"picking:\".concat(mode),\n        redrawReason: mode\n      });\n\n      const pickInfo = getClosestObject({ ...pickedResult,\n        deviceX: devicePixel[0],\n        deviceY: devicePixel[1],\n        deviceRadius,\n        deviceRect\n      });\n      let z;\n\n      if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {\n        const pickedResultPass2 = this._drawAndSample({\n          layers: [pickInfo.pickedLayer],\n          views,\n          viewports,\n          onViewportActive,\n          deviceRect: {\n            x: pickInfo.pickedX,\n            y: pickInfo.pickedY,\n            width: 1,\n            height: 1\n          },\n          effects,\n          pass: \"picking:\".concat(mode),\n          redrawReason: 'pick-z',\n          pickZ: true\n        });\n\n        z = pickedResultPass2.pickedColors[0];\n      }\n\n      if (pickInfo.pickedLayer && i + 1 < depth) {\n        affectedLayers.add(pickInfo.pickedLayer);\n        pickInfo.pickedLayer.disablePickingIndex(pickInfo.pickedObjectIndex);\n      }\n\n      infos = processPickInfo({\n        pickInfo,\n        lastPickedInfo: this.lastPickedInfo,\n        mode,\n        layers,\n        viewports,\n        x,\n        y,\n        z,\n        pixelRatio\n      });\n\n      for (const info of infos.values()) {\n        if (info.layer) {\n          result.push(info);\n        }\n      }\n\n      if (!pickInfo.pickedColor) {\n        break;\n      }\n    }\n\n    for (const layer of affectedLayers) {\n      layer.restorePickingColors();\n    }\n\n    return {\n      result,\n      emptyInfo: infos && infos.get(null)\n    };\n  }\n\n  _pickVisibleObjects(_ref3) {\n    let {\n      layers,\n      views,\n      viewports,\n      x,\n      y,\n      width = 1,\n      height = 1,\n      mode = 'query',\n      maxObjects = null,\n      onViewportActive,\n      effects\n    } = _ref3;\n    layers = this._getPickable(layers);\n\n    if (!layers) {\n      return [];\n    }\n\n    this._resizeBuffer();\n\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const leftTop = cssToDevicePixels(this.gl, [x, y], true);\n    const deviceLeft = leftTop.x;\n    const deviceTop = leftTop.y + leftTop.height;\n    const rightBottom = cssToDevicePixels(this.gl, [x + width, y + height], true);\n    const deviceRight = rightBottom.x + rightBottom.width;\n    const deviceBottom = rightBottom.y;\n    const deviceRect = {\n      x: deviceLeft,\n      y: deviceBottom,\n      width: deviceRight - deviceLeft,\n      height: deviceTop - deviceBottom\n    };\n\n    const pickedResult = this._drawAndSample({\n      layers,\n      views,\n      viewports,\n      onViewportActive,\n      deviceRect,\n      effects,\n      pass: \"picking:\".concat(mode),\n      redrawReason: mode\n    });\n\n    const pickInfos = getUniqueObjects(pickedResult);\n    const uniqueInfos = new Map();\n    const isMaxObjects = Number.isFinite(maxObjects);\n\n    for (let i = 0; i < pickInfos.length; i++) {\n      if (isMaxObjects && uniqueInfos.size >= maxObjects) {\n        break;\n      }\n\n      const pickInfo = pickInfos[i];\n      let info = {\n        color: pickInfo.pickedColor,\n        layer: null,\n        index: pickInfo.pickedObjectIndex,\n        picked: true,\n        x,\n        y,\n        width,\n        height,\n        pixelRatio\n      };\n      info = getLayerPickingInfo({\n        layer: pickInfo.pickedLayer,\n        info,\n        mode\n      });\n\n      if (!uniqueInfos.has(info.object)) {\n        uniqueInfos.set(info.object, info);\n      }\n    }\n\n    return Array.from(uniqueInfos.values());\n  }\n\n  _drawAndSample(_ref4) {\n    let {\n      layers,\n      views,\n      viewports,\n      onViewportActive,\n      deviceRect,\n      effects,\n      pass,\n      redrawReason,\n      pickZ\n    } = _ref4;\n    const pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;\n    const {\n      decodePickingColor\n    } = this.pickLayersPass.render({\n      layers,\n      layerFilter: this.layerFilter,\n      views,\n      viewports,\n      onViewportActive,\n      pickingFBO,\n      deviceRect,\n      effects,\n      pass,\n      redrawReason,\n      pickZ\n    });\n    const {\n      x,\n      y,\n      width,\n      height\n    } = deviceRect;\n    const pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);\n    readPixelsToArray(pickingFBO, {\n      sourceX: x,\n      sourceY: y,\n      sourceWidth: width,\n      sourceHeight: height,\n      target: pickedColors\n    });\n    return {\n      pickedColors,\n      decodePickingColor\n    };\n  }\n\n  _getPickingRect(_ref5) {\n    let {\n      deviceX,\n      deviceY,\n      deviceRadius,\n      deviceWidth,\n      deviceHeight\n    } = _ref5;\n    const x = Math.max(0, deviceX - deviceRadius);\n    const y = Math.max(0, deviceY - deviceRadius);\n    const width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x;\n    const height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y;\n\n    if (width <= 0 || height <= 0) {\n      return null;\n    }\n\n    return {\n      x,\n      y,\n      width,\n      height\n    };\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Framebuffer","Texture2D","isWebGL2","readPixelsToArray","cssToDeviceRatio","cssToDevicePixels","PickLayersPass","getClosestObject","getUniqueObjects","processPickInfo","getLayerPickingInfo","getEmptyPickingInfo","DeckPicker","constructor","gl","pickingFBO","pickLayersPass","layerFilter","lastPickedInfo","index","layerId","info","setProps","props","_pickable","finalize","delete","depthFBO","color","pickObject","opts","_pickClosestObject","pickObjects","_pickVisibleObjects","getLastPickedObject","x","y","layers","viewports","lastPickedLayerId","layer","id","lastPickedViewportId","viewport","find","l","v","coordinate","unproject","_resizeBuffer","isSupported","colorBufferFloat","attach","format","type","resize","width","canvas","height","_getPickable","pickableLayers","filter","isPickable","isComposite","length","views","radius","depth","mode","unproject3D","onViewportActive","effects","result","emptyInfo","pixelRatio","devicePixelRange","devicePixel","Math","floor","deviceRadius","round","deviceRect","_getPickingRect","deviceX","deviceY","deviceWidth","deviceHeight","infos","affectedLayers","Set","i","pickedResult","_drawAndSample","pass","redrawReason","pickInfo","z","pickedLayer","pickedResultPass2","pickedX","pickedY","pickZ","pickedColors","add","disablePickingIndex","pickedObjectIndex","values","push","pickedColor","restorePickingColors","get","maxObjects","leftTop","deviceLeft","deviceTop","rightBottom","deviceRight","deviceBottom","pickInfos","uniqueInfos","Map","isMaxObjects","Number","isFinite","size","picked","has","object","set","Array","from","decodePickingColor","render","Float32Array","Uint8Array","sourceX","sourceY","sourceWidth","sourceHeight","target","max","min"],"sources":["../../../src/lib/deck-picker.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Framebuffer,\n  Texture2D,\n  isWebGL2,\n  readPixelsToArray,\n  cssToDeviceRatio,\n  cssToDevicePixels\n} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport {getClosestObject, getUniqueObjects} from './picking/query-object';\nimport {processPickInfo, getLayerPickingInfo, getEmptyPickingInfo} from './picking/pick-info';\n\nexport default class DeckPicker {\n  constructor(gl) {\n    this.gl = gl;\n    this.pickingFBO = null;\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.layerFilter = null;\n    this.lastPickedInfo = {\n      // For callback tracking and auto highlight\n      index: -1,\n      layerId: null,\n      info: null\n    };\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props) {\n      this.layerFilter = props.layerFilter;\n    }\n\n    if ('_pickable' in props) {\n      this._pickable = props._pickable;\n    }\n  }\n\n  finalize() {\n    if (this.pickingFBO) {\n      this.pickingFBO.delete();\n    }\n    if (this.depthFBO) {\n      this.depthFBO.color.delete();\n      this.depthFBO.delete();\n    }\n  }\n\n  // Pick the closest info at given coordinate\n  pickObject(opts) {\n    return this._pickClosestObject(opts);\n  }\n\n  // Get all unique infos within a bounding box\n  pickObjects(opts) {\n    return this._pickVisibleObjects(opts);\n  }\n\n  // Returns a new picking info object by assuming the last picked object is still picked\n  getLastPickedObject({x, y, layers, viewports}, lastPickedInfo = this.lastPickedInfo.info) {\n    const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;\n    const lastPickedViewportId =\n      lastPickedInfo && lastPickedInfo.viewport && lastPickedInfo.viewport.id;\n    const layer = lastPickedLayerId ? layers.find(l => l.id === lastPickedLayerId) : null;\n    const viewport =\n      (lastPickedViewportId && viewports.find(v => v.id === lastPickedViewportId)) || viewports[0];\n    const coordinate = viewport && viewport.unproject([x - viewport.x, y - viewport.y]);\n\n    const info = {\n      x,\n      y,\n      viewport,\n      coordinate,\n      layer\n    };\n\n    return {...lastPickedInfo, ...info};\n  }\n\n  // Private\n  _resizeBuffer() {\n    const {gl} = this;\n\n    // Create a frame buffer if not already available\n    if (!this.pickingFBO) {\n      this.pickingFBO = new Framebuffer(gl);\n      if (Framebuffer.isSupported(gl, {colorBufferFloat: true})) {\n        this.depthFBO = new Framebuffer(gl);\n        this.depthFBO.attach({\n          [GL.COLOR_ATTACHMENT0]: new Texture2D(gl, {\n            format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n            type: GL.FLOAT\n          })\n        });\n      }\n    }\n    // Resize it to current canvas size (this is a noop if size hasn't changed)\n    this.pickingFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    if (this.depthFBO) {\n      this.depthFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    }\n    return this.pickingFBO;\n  }\n\n  // picking can only handle up to 255 layers. Drop non-pickable/invisible layers from the list.\n  _getPickable(layers) {\n    if (this._pickable === false) {\n      return null;\n    }\n    const pickableLayers = layers.filter(layer => layer.isPickable() && !layer.isComposite);\n    return pickableLayers.length ? pickableLayers : null;\n  }\n\n  // Pick the closest object at the given (x,y) coordinate\n  // eslint-disable-next-line max-statements,complexity\n  _pickClosestObject({\n    layers,\n    views,\n    viewports,\n    x,\n    y,\n    radius = 0,\n    depth = 1,\n    mode = 'query',\n    unproject3D,\n    onViewportActive,\n    effects\n  }) {\n    layers = this._getPickable(layers);\n\n    if (!layers) {\n      return {\n        result: [],\n        emptyInfo: getEmptyPickingInfo({viewports, x, y})\n      };\n    }\n\n    this._resizeBuffer();\n\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // Top-left coordinates [x, y] to bottom-left coordinates [deviceX, deviceY]\n    // And compensate for pixelRatio\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const devicePixelRange = cssToDevicePixels(this.gl, [x, y], true);\n    const devicePixel = [\n      devicePixelRange.x + Math.floor(devicePixelRange.width / 2),\n      devicePixelRange.y + Math.floor(devicePixelRange.height / 2)\n    ];\n\n    const deviceRadius = Math.round(radius * pixelRatio);\n    const {width, height} = this.pickingFBO;\n    const deviceRect = this._getPickingRect({\n      deviceX: devicePixel[0],\n      deviceY: devicePixel[1],\n      deviceRadius,\n      deviceWidth: width,\n      deviceHeight: height\n    });\n\n    let infos;\n    const result = [];\n    const affectedLayers = new Set();\n\n    for (let i = 0; i < depth; i++) {\n      const pickedResult =\n        deviceRect &&\n        this._drawAndSample({\n          layers,\n          views,\n          viewports,\n          onViewportActive,\n          deviceRect,\n          effects,\n          pass: `picking:${mode}`,\n          redrawReason: mode\n        });\n\n      const pickInfo = getClosestObject({\n        ...pickedResult,\n        deviceX: devicePixel[0],\n        deviceY: devicePixel[1],\n        deviceRadius,\n        deviceRect\n      });\n\n      let z;\n      if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {\n        const pickedResultPass2 = this._drawAndSample({\n          layers: [pickInfo.pickedLayer],\n          views,\n          viewports,\n          onViewportActive,\n          deviceRect: {x: pickInfo.pickedX, y: pickInfo.pickedY, width: 1, height: 1},\n          effects,\n          pass: `picking:${mode}`,\n          redrawReason: 'pick-z',\n          pickZ: true\n        });\n        // picked value is in common space (pixels) from the camera target (viewport.position)\n        // convert it to meters from the ground\n        z = pickedResultPass2.pickedColors[0];\n      }\n\n      // Only exclude if we need to run picking again.\n      // We need to run picking again if an object is detected AND\n      // we have not exhausted the requested depth.\n      if (pickInfo.pickedLayer && i + 1 < depth) {\n        affectedLayers.add(pickInfo.pickedLayer);\n        pickInfo.pickedLayer.disablePickingIndex(pickInfo.pickedObjectIndex);\n      }\n\n      // This logic needs to run even if no object is picked.\n      infos = processPickInfo({\n        pickInfo,\n        lastPickedInfo: this.lastPickedInfo,\n        mode,\n        layers,\n        viewports,\n        x,\n        y,\n        z,\n        pixelRatio\n      });\n\n      for (const info of infos.values()) {\n        if (info.layer) {\n          result.push(info);\n        }\n      }\n\n      // If no object is picked stop.\n      if (!pickInfo.pickedColor) {\n        break;\n      }\n    }\n\n    // reset only affected buffers\n    for (const layer of affectedLayers) {\n      layer.restorePickingColors();\n    }\n\n    return {result, emptyInfo: infos && infos.get(null)};\n  }\n\n  // Pick all objects within the given bounding box\n  _pickVisibleObjects({\n    layers,\n    views,\n    viewports,\n    x,\n    y,\n    width = 1,\n    height = 1,\n    mode = 'query',\n    maxObjects = null,\n    onViewportActive,\n    effects\n  }) {\n    layers = this._getPickable(layers);\n\n    if (!layers) {\n      return [];\n    }\n\n    this._resizeBuffer();\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // And compensate for pixelRatio\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const leftTop = cssToDevicePixels(this.gl, [x, y], true);\n\n    // take left and top (y inverted in device pixels) from start location\n    const deviceLeft = leftTop.x;\n    const deviceTop = leftTop.y + leftTop.height;\n\n    // take right and bottom (y inverted in device pixels) from end location\n    const rightBottom = cssToDevicePixels(this.gl, [x + width, y + height], true);\n    const deviceRight = rightBottom.x + rightBottom.width;\n    const deviceBottom = rightBottom.y;\n\n    const deviceRect = {\n      x: deviceLeft,\n      y: deviceBottom,\n      // deviceTop and deviceRight represent the first pixel outside the desired rect\n      width: deviceRight - deviceLeft,\n      height: deviceTop - deviceBottom\n    };\n\n    const pickedResult = this._drawAndSample({\n      layers,\n      views,\n      viewports,\n      onViewportActive,\n      deviceRect,\n      effects,\n      pass: `picking:${mode}`,\n      redrawReason: mode\n    });\n\n    const pickInfos = getUniqueObjects(pickedResult);\n\n    // Only return unique infos, identified by info.object\n    const uniqueInfos = new Map();\n\n    const isMaxObjects = Number.isFinite(maxObjects);\n\n    for (let i = 0; i < pickInfos.length; i++) {\n      if (isMaxObjects && uniqueInfos.size >= maxObjects) {\n        break;\n      }\n      const pickInfo = pickInfos[i];\n      let info = {\n        color: pickInfo.pickedColor,\n        layer: null,\n        index: pickInfo.pickedObjectIndex,\n        picked: true,\n        x,\n        y,\n        width,\n        height,\n        pixelRatio\n      };\n\n      info = getLayerPickingInfo({layer: pickInfo.pickedLayer, info, mode});\n      if (!uniqueInfos.has(info.object)) {\n        uniqueInfos.set(info.object, info);\n      }\n    }\n\n    return Array.from(uniqueInfos.values());\n  }\n\n  // returns pickedColor or null if no pickable layers found.\n  _drawAndSample({\n    layers,\n    views,\n    viewports,\n    onViewportActive,\n    deviceRect,\n    effects,\n    pass,\n    redrawReason,\n    pickZ\n  }) {\n    const pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;\n\n    const {decodePickingColor} = this.pickLayersPass.render({\n      layers,\n      layerFilter: this.layerFilter,\n      views,\n      viewports,\n      onViewportActive,\n      pickingFBO,\n      deviceRect,\n      effects,\n      pass,\n      redrawReason,\n      pickZ\n    });\n\n    // Read from an already rendered picking buffer\n    // Returns an Uint8ClampedArray of picked pixels\n    const {x, y, width, height} = deviceRect;\n    const pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);\n    readPixelsToArray(pickingFBO, {\n      sourceX: x,\n      sourceY: y,\n      sourceWidth: width,\n      sourceHeight: height,\n      target: pickedColors\n    });\n\n    return {pickedColors, decodePickingColor};\n  }\n\n  // Calculate a picking rect centered on deviceX and deviceY and clipped to device\n  // Returns null if pixel is outside of device\n  _getPickingRect({deviceX, deviceY, deviceRadius, deviceWidth, deviceHeight}) {\n    // Create a box of size `radius * 2 + 1` centered at [deviceX, deviceY]\n    const x = Math.max(0, deviceX - deviceRadius);\n    const y = Math.max(0, deviceY - deviceRadius);\n    const width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x;\n    const height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y;\n\n    // x, y out of bounds.\n    if (width <= 0 || height <= 0) {\n      return null;\n    }\n\n    return {x, y, width, height};\n  }\n}\n"]},"metadata":{},"sourceType":"module"}