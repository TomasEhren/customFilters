{"ast":null,"code":"import { loadBasisEncoderModule } from '../parsers/basis-module-loader';\nexport async function encodeKTX2BasisTexture(image) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    useSRGB = false,\n    qualityLevel = 10,\n    encodeUASTC = false,\n    mipmaps = false\n  } = options;\n  const {\n    BasisEncoder\n  } = await loadBasisEncoderModule(options);\n  const basisEncoder = new BasisEncoder();\n\n  try {\n    const basisFileData = new Uint8Array(image.width * image.height * 4);\n    basisEncoder.setCreateKTX2File(true);\n    basisEncoder.setKTX2UASTCSupercompression(true);\n    basisEncoder.setKTX2SRGBTransferFunc(true);\n    basisEncoder.setSliceSourceImage(0, image.data, image.width, image.height, false);\n    basisEncoder.setPerceptual(useSRGB);\n    basisEncoder.setMipSRGB(useSRGB);\n    basisEncoder.setQualityLevel(qualityLevel);\n    basisEncoder.setUASTC(encodeUASTC);\n    basisEncoder.setMipGen(mipmaps);\n    const numOutputBytes = basisEncoder.encode(basisFileData);\n    const actualKTX2FileData = basisFileData.subarray(0, numOutputBytes).buffer;\n    return actualKTX2FileData;\n  } catch (error) {\n    console.error('Basis Universal Supercompressed GPU Texture encoder Error: ', error);\n    throw error;\n  } finally {\n    basisEncoder.delete();\n  }\n}","map":{"version":3,"mappings":"AACA,SAAQA,sBAAR,QAAqC,gCAArC;AASA,OAAO,eAAeC,sBAAf,CACLC,KADK,EAGiB;EAAA,IADtBC,OACsB,uEADP,EACO;EAEtB,MAAM;IAACC,OAAO,GAAG,KAAX;IAAkBC,YAAY,GAAG,EAAjC;IAAqCC,WAAW,GAAG,KAAnD;IAA0DC,OAAO,GAAG;EAApE,IAA6EJ,OAAnF;EACA,MAAM;IAACK;EAAD,IAAiB,MAAMR,sBAAsB,CAACG,OAAD,CAAnD;EACA,MAAMM,YAAY,GAAG,IAAID,YAAJ,EAArB;;EAEA,IAAI;IACF,MAAME,aAAa,GAAG,IAAIC,UAAJ,CAAeT,KAAK,CAACU,KAANV,GAAcA,KAAK,CAACW,MAApBX,GAA6B,CAA5C,CAAtB;IACAO,YAAY,CAACK,iBAAbL,CAA+B,IAA/BA;IACAA,YAAY,CAACM,4BAAbN,CAA0C,IAA1CA;IACAA,YAAY,CAACO,uBAAbP,CAAqC,IAArCA;IAEAA,YAAY,CAACQ,mBAAbR,CAAiC,CAAjCA,EAAoCP,KAAK,CAACgB,IAA1CT,EAAgDP,KAAK,CAACU,KAAtDH,EAA6DP,KAAK,CAACW,MAAnEJ,EAA2E,KAA3EA;IACAA,YAAY,CAACU,aAAbV,CAA2BL,OAA3BK;IACAA,YAAY,CAACW,UAAbX,CAAwBL,OAAxBK;IACAA,YAAY,CAACY,eAAbZ,CAA6BJ,YAA7BI;IACAA,YAAY,CAACa,QAAbb,CAAsBH,WAAtBG;IACAA,YAAY,CAACc,SAAbd,CAAuBF,OAAvBE;IAEA,MAAMe,cAAc,GAAGf,YAAY,CAACgB,MAAbhB,CAAoBC,aAApBD,CAAvB;IAEA,MAAMiB,kBAAkB,GAAGhB,aAAa,CAACiB,QAAdjB,CAAuB,CAAvBA,EAA0Bc,cAA1Bd,EAA0CkB,MAArE;IACA,OAAOF,kBAAP;EAhBF,EAiBE,OAAOG,KAAP,EAAc;IAEdC,OAAO,CAACD,KAARC,CAAc,6DAAdA,EAA6ED,KAA7EC;IACA,MAAMD,KAAN;EApBF,UAqBU;IACRpB,YAAY,CAACsB,MAAbtB;EACD;AACF","names":["loadBasisEncoderModule","encodeKTX2BasisTexture","image","options","useSRGB","qualityLevel","encodeUASTC","mipmaps","BasisEncoder","basisEncoder","basisFileData","Uint8Array","width","height","setCreateKTX2File","setKTX2UASTCSupercompression","setKTX2SRGBTransferFunc","setSliceSourceImage","data","setPerceptual","setMipSRGB","setQualityLevel","setUASTC","setMipGen","numOutputBytes","encode","actualKTX2FileData","subarray","buffer","error","console","delete"],"sources":["../../../../src/lib/encoders/encode-ktx2-basis-texture.ts"],"sourcesContent":["import type {ImageDataType} from '@loaders.gl/images';\nimport {loadBasisEncoderModule} from '../parsers/basis-module-loader';\n\n/**\n * Encodes image to Basis Universal Supercompressed GPU Texture.\n * Code example is taken from here - https://github.com/BinomialLLC/basis_universal/blob/master/webgl/ktx2_encode_test/index.html#L279\n * BasisEncoder API - https://github.com/BinomialLLC/basis_universal/blob/master/webgl/transcoder/basis_wrappers.cpp#L1712\n * @param image\n * @param options\n */\nexport async function encodeKTX2BasisTexture(\n  image: ImageDataType,\n  options: any = {}\n): Promise<ArrayBuffer> {\n  // TODO remove default values after writer options will be normalized like it done in load module.\n  const {useSRGB = false, qualityLevel = 10, encodeUASTC = false, mipmaps = false} = options;\n  const {BasisEncoder} = await loadBasisEncoderModule(options);\n  const basisEncoder = new BasisEncoder();\n\n  try {\n    const basisFileData = new Uint8Array(image.width * image.height * 4);\n    basisEncoder.setCreateKTX2File(true);\n    basisEncoder.setKTX2UASTCSupercompression(true);\n    basisEncoder.setKTX2SRGBTransferFunc(true);\n\n    basisEncoder.setSliceSourceImage(0, image.data, image.width, image.height, false);\n    basisEncoder.setPerceptual(useSRGB);\n    basisEncoder.setMipSRGB(useSRGB);\n    basisEncoder.setQualityLevel(qualityLevel);\n    basisEncoder.setUASTC(encodeUASTC);\n    basisEncoder.setMipGen(mipmaps);\n\n    const numOutputBytes = basisEncoder.encode(basisFileData);\n\n    const actualKTX2FileData = basisFileData.subarray(0, numOutputBytes).buffer;\n    return actualKTX2FileData;\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error('Basis Universal Supercompressed GPU Texture encoder Error: ', error);\n    throw error;\n  } finally {\n    basisEncoder.delete();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}