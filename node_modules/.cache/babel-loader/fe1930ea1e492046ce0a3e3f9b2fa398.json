{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Layer, project32, gouraudLighting, phongLighting, picking, UNIT } from '@deck.gl/core';\nimport { Model, isWebGL2, hasFeature, FEATURES } from '@luma.gl/core';\nimport ColumnGeometry from './column-geometry';\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  diskResolution: {\n    type: 'number',\n    min: 4,\n    value: 20\n  },\n  vertices: null,\n  radius: {\n    type: 'number',\n    min: 0,\n    value: 1000\n  },\n  angle: {\n    type: 'number',\n    value: 0\n  },\n  offset: {\n    type: 'array',\n    value: [0, 0]\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusUnits: 'meters',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  material: true,\n  getColor: {\n    deprecatedFor: ['getFillColor', 'getLineColor']\n  }\n};\n\nvar ColumnLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(ColumnLayer, _Layer);\n\n  var _super = _createSuper(ColumnLayer);\n\n  function ColumnLayer() {\n    _classCallCheck(this, ColumnLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ColumnLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      var gl = this.context.gl;\n      var transpileToGLSL100 = !isWebGL2(gl);\n      var defines = {};\n      var useDerivatives = this.props.flatShading && hasFeature(gl, FEATURES.GLSL_DERIVATIVES);\n\n      if (useDerivatives) {\n        defines.FLAT_SHADING = 1;\n      }\n\n      return _get(_getPrototypeOf(ColumnLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        defines: defines,\n        transpileToGLSL100: transpileToGLSL100,\n        modules: [project32, useDerivatives ? phongLighting : gouraudLighting, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instancePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getPosition'\n        },\n        instanceElevations: {\n          size: 1,\n          transition: true,\n          accessor: 'getElevation'\n        },\n        instanceFillColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: true,\n          accessor: 'getFillColor',\n          defaultValue: DEFAULT_COLOR\n        },\n        instanceLineColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: true,\n          accessor: 'getLineColor',\n          defaultValue: DEFAULT_COLOR\n        },\n        instanceStrokeWidths: {\n          size: 1,\n          accessor: 'getLineWidth',\n          transition: true\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      _get(_getPrototypeOf(ColumnLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      var regenerateModels = changeFlags.extensionsChanged || props.flatShading !== oldProps.flatShading;\n\n      if (regenerateModels) {\n        var _this$state$model;\n\n        var gl = this.context.gl;\n        (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n        this.state.model = this._getModel(gl);\n        this.getAttributeManager().invalidateAll();\n      }\n\n      if (regenerateModels || props.diskResolution !== oldProps.diskResolution || props.vertices !== oldProps.vertices || (props.extruded || props.stroked) !== (oldProps.extruded || oldProps.stroked)) {\n        this._updateGeometry(props);\n      }\n    }\n  }, {\n    key: \"getGeometry\",\n    value: function getGeometry(diskResolution, vertices, hasThinkness) {\n      var geometry = new ColumnGeometry({\n        radius: 1,\n        height: hasThinkness ? 2 : 0,\n        vertices: vertices,\n        nradial: diskResolution\n      });\n      var meanVertexDistance = 0;\n\n      if (vertices) {\n        for (var i = 0; i < diskResolution; i++) {\n          var p = vertices[i];\n          var d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n          meanVertexDistance += d / diskResolution;\n        }\n      } else {\n        meanVertexDistance = 1;\n      }\n\n      this.setState({\n        edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n      });\n      return geometry;\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      return new Model(gl, _objectSpread(_objectSpread({}, this.getShaders()), {}, {\n        id: this.props.id,\n        isInstanced: true\n      }));\n    }\n  }, {\n    key: \"_updateGeometry\",\n    value: function _updateGeometry(_ref2) {\n      var diskResolution = _ref2.diskResolution,\n          vertices = _ref2.vertices,\n          extruded = _ref2.extruded,\n          stroked = _ref2.stroked;\n      var geometry = this.getGeometry(diskResolution, vertices, extruded || stroked);\n      this.setState({\n        fillVertexCount: geometry.attributes.POSITION.value.length / 3,\n        wireframeVertexCount: geometry.indices.value.length\n      });\n      this.state.model.setProps({\n        geometry: geometry\n      });\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref3) {\n      var uniforms = _ref3.uniforms;\n      var _this$props = this.props,\n          lineWidthUnits = _this$props.lineWidthUnits,\n          lineWidthScale = _this$props.lineWidthScale,\n          lineWidthMinPixels = _this$props.lineWidthMinPixels,\n          lineWidthMaxPixels = _this$props.lineWidthMaxPixels,\n          radiusUnits = _this$props.radiusUnits,\n          elevationScale = _this$props.elevationScale,\n          extruded = _this$props.extruded,\n          filled = _this$props.filled,\n          stroked = _this$props.stroked,\n          wireframe = _this$props.wireframe,\n          offset = _this$props.offset,\n          coverage = _this$props.coverage,\n          radius = _this$props.radius,\n          angle = _this$props.angle;\n      var _this$state = this.state,\n          model = _this$state.model,\n          fillVertexCount = _this$state.fillVertexCount,\n          wireframeVertexCount = _this$state.wireframeVertexCount,\n          edgeDistance = _this$state.edgeDistance;\n      model.setUniforms(uniforms).setUniforms({\n        radius: radius,\n        angle: angle / 180 * Math.PI,\n        offset: offset,\n        extruded: extruded,\n        coverage: coverage,\n        elevationScale: elevationScale,\n        edgeDistance: edgeDistance,\n        radiusUnits: UNIT[radiusUnits],\n        widthUnits: UNIT[lineWidthUnits],\n        widthScale: lineWidthScale,\n        widthMinPixels: lineWidthMinPixels,\n        widthMaxPixels: lineWidthMaxPixels\n      });\n\n      if (extruded && wireframe) {\n        model.setProps({\n          isIndexed: true\n        });\n        model.setVertexCount(wireframeVertexCount).setDrawMode(1).setUniforms({\n          isStroke: true\n        }).draw();\n      }\n\n      if (filled) {\n        model.setProps({\n          isIndexed: false\n        });\n        model.setVertexCount(fillVertexCount).setDrawMode(5).setUniforms({\n          isStroke: false\n        }).draw();\n      }\n\n      if (!extruded && stroked) {\n        model.setProps({\n          isIndexed: false\n        });\n        model.setVertexCount(fillVertexCount * 2 / 3).setDrawMode(5).setUniforms({\n          isStroke: true\n        }).draw();\n      }\n    }\n  }]);\n\n  return ColumnLayer;\n}(Layer);\n\nexport { ColumnLayer as default };\nColumnLayer.layerName = 'ColumnLayer';\nColumnLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["Layer","project32","gouraudLighting","phongLighting","picking","UNIT","Model","isWebGL2","hasFeature","FEATURES","ColumnGeometry","vs","fs","DEFAULT_COLOR","defaultProps","diskResolution","type","min","value","vertices","radius","angle","offset","coverage","max","elevationScale","radiusUnits","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","extruded","wireframe","filled","stroked","getPosition","x","position","getFillColor","getLineColor","getLineWidth","getElevation","material","getColor","deprecatedFor","ColumnLayer","getShaders","gl","context","transpileToGLSL100","defines","useDerivatives","props","flatShading","GLSL_DERIVATIVES","FLAT_SHADING","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceElevations","instanceFillColors","colorFormat","length","normalized","defaultValue","instanceLineColors","instanceStrokeWidths","updateState","oldProps","changeFlags","regenerateModels","extensionsChanged","state","model","delete","_getModel","invalidateAll","_updateGeometry","getGeometry","hasThinkness","geometry","height","nradial","meanVertexDistance","i","p","d","Math","sqrt","setState","edgeDistance","cos","PI","id","isInstanced","fillVertexCount","attributes","POSITION","wireframeVertexCount","indices","setProps","draw","uniforms","setUniforms","widthUnits","widthScale","widthMinPixels","widthMaxPixels","isIndexed","setVertexCount","setDrawMode","isStroke","layerName"],"sources":["../../../src/column-layer/column-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, phongLighting, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, isWebGL2, hasFeature, FEATURES} from '@luma.gl/core';\nimport ColumnGeometry from './column-geometry';\n\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  diskResolution: {type: 'number', min: 4, value: 20},\n  vertices: null,\n  radius: {type: 'number', min: 0, value: 1000},\n  angle: {type: 'number', value: 0},\n  offset: {type: 'array', value: [0, 0]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  radiusUnits: 'meters',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n  getElevation: {type: 'accessor', value: 1000},\n  material: true,\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\nexport default class ColumnLayer extends Layer {\n  getShaders() {\n    const {gl} = this.context;\n    const transpileToGLSL100 = !isWebGL2(gl);\n    const defines = {};\n\n    const useDerivatives = this.props.flatShading && hasFeature(gl, FEATURES.GLSL_DERIVATIVES);\n    if (useDerivatives) {\n      defines.FLAT_SHADING = 1;\n    }\n    return super.getShaders({\n      vs,\n      fs,\n      defines,\n      transpileToGLSL100,\n      modules: [project32, useDerivatives ? phongLighting : gouraudLighting, picking]\n    });\n  }\n\n  /**\n   * DeckGL calls initializeState when GL context is available\n   * Essentially a deferred constructor\n   */\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getLineWidth',\n        transition: true\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const regenerateModels =\n      changeFlags.extensionsChanged || props.flatShading !== oldProps.flatShading;\n\n    if (regenerateModels) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (\n      regenerateModels ||\n      props.diskResolution !== oldProps.diskResolution ||\n      props.vertices !== oldProps.vertices ||\n      (props.extruded || props.stroked) !== (oldProps.extruded || oldProps.stroked)\n    ) {\n      this._updateGeometry(props);\n    }\n  }\n\n  getGeometry(diskResolution, vertices, hasThinkness) {\n    const geometry = new ColumnGeometry({\n      radius: 1,\n      height: hasThinkness ? 2 : 0,\n      vertices,\n      nradial: diskResolution\n    });\n\n    let meanVertexDistance = 0;\n    if (vertices) {\n      for (let i = 0; i < diskResolution; i++) {\n        const p = vertices[i];\n        const d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n        meanVertexDistance += d / diskResolution;\n      }\n    } else {\n      meanVertexDistance = 1;\n    }\n    this.setState({\n      edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n    });\n\n    return geometry;\n  }\n\n  _getModel(gl) {\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      isInstanced: true\n    });\n  }\n\n  _updateGeometry({diskResolution, vertices, extruded, stroked}) {\n    const geometry = this.getGeometry(diskResolution, vertices, extruded || stroked);\n\n    this.setState({\n      fillVertexCount: geometry.attributes.POSITION.value.length / 3,\n      wireframeVertexCount: geometry.indices.value.length\n    });\n\n    this.state.model.setProps({geometry});\n  }\n\n  draw({uniforms}) {\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      radiusUnits,\n      elevationScale,\n      extruded,\n      filled,\n      stroked,\n      wireframe,\n      offset,\n      coverage,\n      radius,\n      angle\n    } = this.props;\n    const {model, fillVertexCount, wireframeVertexCount, edgeDistance} = this.state;\n\n    model.setUniforms(uniforms).setUniforms({\n      radius,\n      angle: (angle / 180) * Math.PI,\n      offset,\n      extruded,\n      coverage,\n      elevationScale,\n      edgeDistance,\n      radiusUnits: UNIT[radiusUnits],\n      widthUnits: UNIT[lineWidthUnits],\n      widthScale: lineWidthScale,\n      widthMinPixels: lineWidthMinPixels,\n      widthMaxPixels: lineWidthMaxPixels\n    });\n\n    // When drawing 3d: draw wireframe first so it doesn't get occluded by depth test\n    if (extruded && wireframe) {\n      model.setProps({isIndexed: true});\n      model\n        .setVertexCount(wireframeVertexCount)\n        .setDrawMode(GL.LINES)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n    if (filled) {\n      model.setProps({isIndexed: false});\n      model\n        .setVertexCount(fillVertexCount)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: false})\n        .draw();\n    }\n    // When drawing 2d: draw fill before stroke so that the outline is always on top\n    if (!extruded && stroked) {\n      model.setProps({isIndexed: false});\n      // The width of the stroke is achieved by flattening the side of the cylinder.\n      // Skip the last 1/3 of the vertices which is the top.\n      model\n        .setVertexCount((fillVertexCount * 2) / 3)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n  }\n}\n\nColumnLayer.layerName = 'ColumnLayer';\nColumnLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}