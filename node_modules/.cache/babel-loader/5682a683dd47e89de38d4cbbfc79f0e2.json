{"ast":null,"code":"import _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nexport function convertMesh(mesh, shape, options) {\n  switch (shape || 'mesh') {\n    case 'mesh':\n      return mesh;\n\n    case 'columnar-table':\n      return convertMeshToColumnarTable(mesh);\n\n    default:\n      throw new Error(\"Unsupported shape \".concat(options === null || options === void 0 ? void 0 : options.shape));\n  }\n}\nexport function convertMeshToColumnarTable(mesh) {\n  var columns = {};\n\n  for (var _i = 0, _Object$entries = Object.entries(mesh.attributes); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        columnName = _Object$entries$_i[0],\n        attribute = _Object$entries$_i[1];\n\n    columns[columnName] = attribute.value;\n  }\n\n  return {\n    shape: 'columnar-table',\n    schema: mesh.schema,\n    data: columns\n  };\n}","map":{"version":3,"mappings":";AASA,OAAO,SAASA,WAAT,CACLC,IADK,EAELC,KAFK,EAGLC,OAHK,EAI8B;EACnC,QAAQD,KAAK,IAAI,MAAjB;IACE,KAAK,MAAL;MACE,OAAOD,IAAP;;IACF,KAAK,gBAAL;MACE,OAAOG,0BAA0B,CAACH,IAAD,CAAjC;;IAMF;MACE,MAAM,IAAII,KAAJ,6BAA+BF,OAA/B,SAA+BA,WAA/B,WAA+BA,GAA/B,MAA+BA,UAAO,CAAED,KAAxC,EAAN;EAXJ;AAaD;AAOD,OAAO,SAASE,0BAAT,CAAoCH,IAApC,EAA+D;EACpE,IAAMK,OAAO,GAAG,EAAhB;;EAEA,mCAAsCC,MAAM,CAACC,OAAPD,CAAeN,IAAI,CAACQ,UAApBF,CAAtC,qCAAuE;IAAlE;IAAA,IAAOG,UAAP;IAAA,IAAmBC,SAAnB;;IACHL,OAAO,CAACI,UAAD,CAAPJ,GAAsBK,SAAS,CAACC,KAAhCN;EACD;;EAED,OAAO;IACLJ,KAAK,EAAE,gBADF;IAELW,MAAM,EAAEZ,IAAI,CAACY,MAFR;IAGLC,IAAI,EAAER;EAHD,CAAP;AAKD","names":["convertMesh","mesh","shape","options","convertMeshToColumnarTable","Error","columns","Object","entries","attributes","columnName","attribute","value","schema","data"],"sources":["../../../../src/category/mesh/convert-mesh.ts"],"sourcesContent":["import type {Mesh} from './mesh-types';\nimport type {ColumnarTable, ArrowTable} from '../table/table-types';\n// import {convertMeshToArrowTable} from './mesh-to-arrow-table';\n\ntype TargetShape = 'mesh' | 'columnar-table' | 'arrow-table';\n\n/**\n * Convert a mesh to a specific shape\n */\nexport function convertMesh(\n  mesh: Mesh,\n  shape: TargetShape,\n  options?: any\n): Mesh | ColumnarTable | ArrowTable {\n  switch (shape || 'mesh') {\n    case 'mesh':\n      return mesh;\n    case 'columnar-table':\n      return convertMeshToColumnarTable(mesh);\n    // case 'arrow-table':\n    //   return {\n    //     shape: 'arrow-table',\n    //     data: convertMeshToArrowTable(mesh)\n    //   };\n    default:\n      throw new Error(`Unsupported shape ${options?.shape}`);\n  }\n}\n\n/**\n * Convert a loaders.gl Mesh to a Columnar Table\n * @param mesh\n * @returns\n */\nexport function convertMeshToColumnarTable(mesh: Mesh): ColumnarTable {\n  const columns = {};\n\n  for (const [columnName, attribute] of Object.entries(mesh.attributes)) {\n    columns[columnName] = attribute.value;\n  }\n\n  return {\n    shape: 'columnar-table',\n    schema: mesh.schema,\n    data: columns\n  };\n}\n"]},"metadata":{},"sourceType":"module"}