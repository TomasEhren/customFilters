{"ast":null,"code":"import { load } from '@loaders.gl/core';\nexport default class Resource {\n  constructor(id, data, context) {\n    this.id = id;\n    this.context = context;\n    this._loadCount = 0;\n    this._subscribers = new Set();\n    this.setData(data);\n  }\n\n  subscribe(consumer) {\n    this._subscribers.add(consumer);\n  }\n\n  unsubscribe(consumer) {\n    this._subscribers.delete(consumer);\n  }\n\n  inUse() {\n    return this._subscribers.size > 0;\n  }\n\n  delete() {}\n\n  getData() {\n    return this.isLoaded ? this._error ? Promise.reject(this._error) : this._content : this._loader.then(() => this.getData());\n  }\n\n  setData(data, forceUpdate) {\n    if (data === this._data && !forceUpdate) {\n      return;\n    }\n\n    this._data = data;\n    const loadCount = ++this._loadCount;\n    let loader = data;\n\n    if (typeof data === 'string') {\n      loader = load(data);\n    }\n\n    if (loader instanceof Promise) {\n      this.isLoaded = false;\n      this._loader = loader.then(result => {\n        if (this._loadCount === loadCount) {\n          this.isLoaded = true;\n          this._error = null;\n          this._content = result;\n        }\n      }).catch(error => {\n        if (this._loadCount === loadCount) {\n          this.isLoaded = true;\n          this._error = error || true;\n        }\n      });\n    } else {\n      this.isLoaded = true;\n      this._error = null;\n      this._content = data;\n    }\n\n    for (const subscriber of this._subscribers) {\n      subscriber.onChange(this.getData());\n    }\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAAQA,IAAR,QAAmB,kBAAnB;AAEA,eAAe,MAAMC,QAAN,CAAe;EAC5BC,WAAW,CAACC,EAAD,EAAKC,IAAL,EAAWC,OAAX,EAAoB;IAC7B,KAAKF,EAAL,GAAUA,EAAV;IACA,KAAKE,OAAL,GAAeA,OAAf;IAEA,KAAKC,UAAL,GAAkB,CAAlB;IACA,KAAKC,YAAL,GAAoB,IAAIC,GAAJ,EAApB;IAEA,KAAKC,OAAL,CAAaL,IAAb;EACD;;EAGDM,SAAS,CAACC,QAAD,EAAW;IAClB,KAAKJ,YAAL,CAAkBK,GAAlB,CAAsBD,QAAtB;EACD;;EAEDE,WAAW,CAACF,QAAD,EAAW;IACpB,KAAKJ,YAAL,CAAkBO,MAAlB,CAAyBH,QAAzB;EACD;;EAEDI,KAAK,GAAG;IACN,OAAO,KAAKR,YAAL,CAAkBS,IAAlB,GAAyB,CAAhC;EACD;;EAEDF,MAAM,GAAG,CAER;;EAEDG,OAAO,GAAG;IACR,OAAO,KAAKC,QAAL,GACH,KAAKC,MAAL,GACEC,OAAO,CAACC,MAARD,CAAe,KAAKD,MAApBC,CADF,GAEE,KAAKE,QAHJ,GAIH,KAAKC,OAAL,CAAaC,IAAb,CAAkB,MAAM,KAAKP,OAAL,EAAxB,CAJJ;EAKD;;EAEDR,OAAO,CAACL,IAAD,EAAOqB,WAAP,EAAoB;IACzB,IAAIrB,IAAI,KAAK,KAAKsB,KAAdtB,IAAuB,CAACqB,WAA5B,EAAyC;MACvC;IACD;;IACD,KAAKC,KAAL,GAAatB,IAAb;IACA,MAAMuB,SAAS,GAAG,EAAE,KAAKrB,UAAzB;IAEA,IAAIsB,MAAM,GAAGxB,IAAb;;IACA,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;MAC5BwB,MAAM,GAAG5B,IAAI,CAACI,IAAD,CAAbwB;IACD;;IACD,IAAIA,MAAM,YAAYR,OAAtB,EAA+B;MAC7B,KAAKF,QAAL,GAAgB,KAAhB;MACA,KAAKK,OAAL,GAAeK,MAAM,CAClBJ,IADYI,CACPC,MAAM,IAAI;QAEd,IAAI,KAAKvB,UAAL,KAAoBqB,SAAxB,EAAmC;UACjC,KAAKT,QAAL,GAAgB,IAAhB;UACA,KAAKC,MAAL,GAAc,IAAd;UACA,KAAKG,QAAL,GAAgBO,MAAhB;QACD;MAPU,GASZC,KATYF,CASNG,KAAK,IAAI;QACd,IAAI,KAAKzB,UAAL,KAAoBqB,SAAxB,EAAmC;UACjC,KAAKT,QAAL,GAAgB,IAAhB;UACA,KAAKC,MAAL,GAAcY,KAAK,IAAI,IAAvB;QACD;MAbU,EAAf;IAFF,OAiBO;MACL,KAAKb,QAAL,GAAgB,IAAhB;MACA,KAAKC,MAAL,GAAc,IAAd;MACA,KAAKG,QAAL,GAAgBlB,IAAhB;IACD;;IAED,KAAK,MAAM4B,UAAX,IAAyB,KAAKzB,YAA9B,EAA4C;MAC1CyB,UAAU,CAACC,QAAXD,CAAoB,KAAKf,OAAL,EAApBe;IACD;EACF;;AAzE2B","names":["load","Resource","constructor","id","data","context","_loadCount","_subscribers","Set","setData","subscribe","consumer","add","unsubscribe","delete","inUse","size","getData","isLoaded","_error","Promise","reject","_content","_loader","then","forceUpdate","_data","loadCount","loader","result","catch","error","subscriber","onChange"],"sources":["../../../../src/lib/resource/resource.js"],"sourcesContent":["import {load} from '@loaders.gl/core';\n\nexport default class Resource {\n  constructor(id, data, context) {\n    this.id = id;\n    this.context = context;\n\n    this._loadCount = 0;\n    this._subscribers = new Set();\n\n    this.setData(data);\n  }\n\n  // consumer: {onChange: Function}\n  subscribe(consumer) {\n    this._subscribers.add(consumer);\n  }\n\n  unsubscribe(consumer) {\n    this._subscribers.delete(consumer);\n  }\n\n  inUse() {\n    return this._subscribers.size > 0;\n  }\n\n  delete() {\n    // Remove any resources created\n  }\n\n  getData() {\n    return this.isLoaded\n      ? this._error\n        ? Promise.reject(this._error)\n        : this._content\n      : this._loader.then(() => this.getData());\n  }\n\n  setData(data, forceUpdate) {\n    if (data === this._data && !forceUpdate) {\n      return;\n    }\n    this._data = data;\n    const loadCount = ++this._loadCount;\n\n    let loader = data;\n    if (typeof data === 'string') {\n      loader = load(data);\n    }\n    if (loader instanceof Promise) {\n      this.isLoaded = false;\n      this._loader = loader\n        .then(result => {\n          // check if source has changed\n          if (this._loadCount === loadCount) {\n            this.isLoaded = true;\n            this._error = null;\n            this._content = result;\n          }\n        })\n        .catch(error => {\n          if (this._loadCount === loadCount) {\n            this.isLoaded = true;\n            this._error = error || true;\n          }\n        });\n    } else {\n      this.isLoaded = true;\n      this._error = null;\n      this._content = data;\n    }\n\n    for (const subscriber of this._subscribers) {\n      subscriber.onChange(this.getData());\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}