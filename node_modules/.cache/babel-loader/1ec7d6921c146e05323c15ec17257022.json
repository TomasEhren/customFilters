{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Transform } from '@luma.gl/core';\nimport GPUInterpolationTransition from '../../transitions/gpu-interpolation-transition';\nimport GPUSpringTransition from '../../transitions/gpu-spring-transition';\nimport log from '../../utils/log';\nvar TRANSITION_TYPES = {\n  interpolation: GPUInterpolationTransition,\n  spring: GPUSpringTransition\n};\n\nvar AttributeTransitionManager = /*#__PURE__*/function () {\n  function AttributeTransitionManager(gl, _ref) {\n    var id = _ref.id,\n        timeline = _ref.timeline;\n\n    _classCallCheck(this, AttributeTransitionManager);\n\n    this.id = id;\n    this.gl = gl;\n    this.timeline = timeline;\n    this.transitions = {};\n    this.needsRedraw = false;\n    this.numInstances = 1;\n    this.isSupported = Transform.isSupported(gl);\n  }\n\n  _createClass(AttributeTransitionManager, [{\n    key: \"finalize\",\n    value: function finalize() {\n      for (var attributeName in this.transitions) {\n        this._removeTransition(attributeName);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(_ref2) {\n      var attributes = _ref2.attributes,\n          transitions = _ref2.transitions,\n          numInstances = _ref2.numInstances;\n      this.numInstances = numInstances || 1;\n\n      for (var attributeName in attributes) {\n        var attribute = attributes[attributeName];\n        var settings = attribute.getTransitionSetting(transitions);\n        if (!settings) continue;\n\n        this._updateAttribute(attributeName, attribute, settings);\n      }\n\n      for (var _attributeName in this.transitions) {\n        var _attribute = attributes[_attributeName];\n\n        if (!_attribute || !_attribute.getTransitionSetting(transitions)) {\n          this._removeTransition(_attributeName);\n        }\n      }\n    }\n  }, {\n    key: \"hasAttribute\",\n    value: function hasAttribute(attributeName) {\n      var transition = this.transitions[attributeName];\n      return transition && transition.inProgress;\n    }\n  }, {\n    key: \"getAttributes\",\n    value: function getAttributes() {\n      var animatedAttributes = {};\n\n      for (var attributeName in this.transitions) {\n        var transition = this.transitions[attributeName];\n\n        if (transition.inProgress) {\n          animatedAttributes[attributeName] = transition.attributeInTransition;\n        }\n      }\n\n      return animatedAttributes;\n    }\n  }, {\n    key: \"run\",\n    value: function run() {\n      if (!this.isSupported || this.numInstances === 0) {\n        return false;\n      }\n\n      for (var attributeName in this.transitions) {\n        var updated = this.transitions[attributeName].update();\n\n        if (updated) {\n          this.needsRedraw = true;\n        }\n      }\n\n      var needsRedraw = this.needsRedraw;\n      this.needsRedraw = false;\n      return needsRedraw;\n    }\n  }, {\n    key: \"_removeTransition\",\n    value: function _removeTransition(attributeName) {\n      this.transitions[attributeName].cancel();\n      delete this.transitions[attributeName];\n    }\n  }, {\n    key: \"_updateAttribute\",\n    value: function _updateAttribute(attributeName, attribute, settings) {\n      var transition = this.transitions[attributeName];\n      var isNew = !transition || transition.type !== settings.type;\n\n      if (isNew) {\n        if (!this.isSupported) {\n          log.warn(\"WebGL2 not supported by this browser. Transition for \".concat(attributeName, \" is disabled.\"))();\n          return;\n        }\n\n        if (transition) {\n          this._removeTransition(attributeName);\n        }\n\n        var TransitionType = TRANSITION_TYPES[settings.type];\n\n        if (TransitionType) {\n          this.transitions[attributeName] = new TransitionType({\n            attribute: attribute,\n            timeline: this.timeline,\n            gl: this.gl\n          });\n        } else {\n          log.error(\"unsupported transition type '\".concat(settings.type, \"'\"))();\n          isNew = false;\n        }\n      }\n\n      if (isNew || attribute.needsRedraw()) {\n        this.needsRedraw = true;\n        this.transitions[attributeName].start(settings, this.numInstances);\n      }\n    }\n  }]);\n\n  return AttributeTransitionManager;\n}();\n\nexport { AttributeTransitionManager as default };","map":{"version":3,"mappings":"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","names":["Transform","GPUInterpolationTransition","GPUSpringTransition","log","TRANSITION_TYPES","interpolation","spring","AttributeTransitionManager","constructor","gl","id","timeline","transitions","needsRedraw","numInstances","isSupported","finalize","attributeName","_removeTransition","update","attributes","attribute","settings","getTransitionSetting","_updateAttribute","hasAttribute","transition","inProgress","getAttributes","animatedAttributes","attributeInTransition","run","updated","cancel","isNew","type","warn","TransitionType","error","start"],"sources":["../../../../src/lib/attribute/attribute-transition-manager.js"],"sourcesContent":["import {Transform} from '@luma.gl/core';\nimport GPUInterpolationTransition from '../../transitions/gpu-interpolation-transition';\nimport GPUSpringTransition from '../../transitions/gpu-spring-transition';\nimport log from '../../utils/log';\n\nconst TRANSITION_TYPES = {\n  interpolation: GPUInterpolationTransition,\n  spring: GPUSpringTransition\n};\n\nexport default class AttributeTransitionManager {\n  constructor(gl, {id, timeline}) {\n    this.id = id;\n    this.gl = gl;\n    this.timeline = timeline;\n\n    this.transitions = {};\n    this.needsRedraw = false;\n    this.numInstances = 1;\n\n    this.isSupported = Transform.isSupported(gl);\n  }\n\n  finalize() {\n    for (const attributeName in this.transitions) {\n      this._removeTransition(attributeName);\n    }\n  }\n\n  /* Public methods */\n\n  // Called when attribute manager updates\n  // Check the latest attributes for updates.\n  update({attributes, transitions, numInstances}) {\n    // Transform class will crash if elementCount is 0\n    this.numInstances = numInstances || 1;\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const settings = attribute.getTransitionSetting(transitions);\n\n      // this attribute might not support transitions?\n      if (!settings) continue; // eslint-disable-line no-continue\n      this._updateAttribute(attributeName, attribute, settings);\n    }\n\n    for (const attributeName in this.transitions) {\n      const attribute = attributes[attributeName];\n      if (!attribute || !attribute.getTransitionSetting(transitions)) {\n        // Animated attribute has been removed\n        this._removeTransition(attributeName);\n      }\n    }\n  }\n\n  // Returns `true` if attribute is transition-enabled\n  hasAttribute(attributeName) {\n    const transition = this.transitions[attributeName];\n    return transition && transition.inProgress;\n  }\n\n  // Get all the animated attributes\n  getAttributes() {\n    const animatedAttributes = {};\n\n    for (const attributeName in this.transitions) {\n      const transition = this.transitions[attributeName];\n      if (transition.inProgress) {\n        animatedAttributes[attributeName] = transition.attributeInTransition;\n      }\n    }\n\n    return animatedAttributes;\n  }\n\n  /* eslint-disable max-statements */\n  // Called every render cycle, run transform feedback\n  // Returns `true` if anything changes\n  run() {\n    if (!this.isSupported || this.numInstances === 0) {\n      return false;\n    }\n\n    for (const attributeName in this.transitions) {\n      const updated = this.transitions[attributeName].update();\n      if (updated) {\n        this.needsRedraw = true;\n      }\n    }\n\n    const needsRedraw = this.needsRedraw;\n    this.needsRedraw = false;\n    return needsRedraw;\n  }\n  /* eslint-enable max-statements */\n\n  /* Private methods */\n  _removeTransition(attributeName) {\n    this.transitions[attributeName].cancel();\n    delete this.transitions[attributeName];\n  }\n\n  // Check an attributes for updates\n  // Returns a transition object if a new transition is triggered.\n  _updateAttribute(attributeName, attribute, settings) {\n    const transition = this.transitions[attributeName];\n    // an attribute can change transition type when it updates\n    // let's remove the transition when that happens so we can create the new transition type\n    // TODO: when switching transition types, make sure to carry over the attribute's\n    // previous buffers, currentLength, startIndices, etc, to be used as the starting point\n    // for the next transition\n    let isNew = !transition || transition.type !== settings.type;\n    if (isNew) {\n      if (!this.isSupported) {\n        log.warn(\n          `WebGL2 not supported by this browser. Transition for ${attributeName} is disabled.`\n        )();\n        return;\n      }\n\n      if (transition) {\n        this._removeTransition(attributeName);\n      }\n\n      const TransitionType = TRANSITION_TYPES[settings.type];\n      if (TransitionType) {\n        this.transitions[attributeName] = new TransitionType({\n          attribute,\n          timeline: this.timeline,\n          gl: this.gl\n        });\n      } else {\n        log.error(`unsupported transition type '${settings.type}'`)();\n        isNew = false;\n      }\n    }\n\n    if (isNew || attribute.needsRedraw()) {\n      this.needsRedraw = true;\n      this.transitions[attributeName].start(settings, this.numInstances);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}