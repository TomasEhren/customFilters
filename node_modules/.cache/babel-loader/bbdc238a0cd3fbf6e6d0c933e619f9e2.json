{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { assert } from '../env-utils/assert';\nimport { getLoadableWorkerURL } from '../worker-utils/get-loadable-worker-url';\nimport { getTransferList } from '../worker-utils/get-transfer-list';\n\nvar NOOP = function NOOP() {};\n\nvar WorkerThread = /*#__PURE__*/function () {\n  function WorkerThread(props) {\n    _classCallCheck(this, WorkerThread);\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"source\", void 0);\n\n    _defineProperty(this, \"url\", void 0);\n\n    _defineProperty(this, \"terminated\", false);\n\n    _defineProperty(this, \"worker\", void 0);\n\n    _defineProperty(this, \"onMessage\", void 0);\n\n    _defineProperty(this, \"onError\", void 0);\n\n    _defineProperty(this, \"_loadableURL\", '');\n\n    var name = props.name,\n        source = props.source,\n        url = props.url;\n    assert(source || url);\n    this.name = name;\n    this.source = source;\n    this.url = url;\n    this.onMessage = NOOP;\n\n    this.onError = function (error) {\n      return console.log(error);\n    };\n\n    this.worker = this._createBrowserWorker();\n  }\n\n  _createClass(WorkerThread, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.onMessage = NOOP;\n      this.onError = NOOP;\n      this.worker.terminate();\n      this.terminated = true;\n    }\n  }, {\n    key: \"isRunning\",\n    get: function get() {\n      return Boolean(this.onMessage);\n    }\n  }, {\n    key: \"postMessage\",\n    value: function postMessage(data, transferList) {\n      transferList = transferList || getTransferList(data);\n      this.worker.postMessage(data, transferList);\n    }\n  }, {\n    key: \"_getErrorFromErrorEvent\",\n    value: function _getErrorFromErrorEvent(event) {\n      var message = 'Failed to load ';\n      message += \"worker \".concat(this.name, \" from \").concat(this.url, \". \");\n\n      if (event.message) {\n        message += \"\".concat(event.message, \" in \");\n      }\n\n      if (event.lineno) {\n        message += \":\".concat(event.lineno, \":\").concat(event.colno);\n      }\n\n      return new Error(message);\n    }\n  }, {\n    key: \"_createBrowserWorker\",\n    value: function _createBrowserWorker() {\n      var _this = this;\n\n      this._loadableURL = getLoadableWorkerURL({\n        source: this.source,\n        url: this.url\n      });\n      var worker = new Worker(this._loadableURL, {\n        name: this.name\n      });\n\n      worker.onmessage = function (event) {\n        if (!event.data) {\n          _this.onError(new Error('No data received'));\n        } else {\n          _this.onMessage(event.data);\n        }\n      };\n\n      worker.onerror = function (error) {\n        _this.onError(_this._getErrorFromErrorEvent(error));\n\n        _this.terminated = true;\n      };\n\n      worker.onmessageerror = function (event) {\n        return console.error(event);\n      };\n\n      return worker;\n    }\n  }], [{\n    key: \"isSupported\",\n    value: function isSupported() {\n      return typeof Worker !== 'undefined';\n    }\n  }]);\n\n  return WorkerThread;\n}();\n\nexport { WorkerThread as default };","map":{"version":3,"mappings":"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","names":["assert","getLoadableWorkerURL","getTransferList","NOOP","WorkerThread","constructor","props","_defineProperty","name","source","url","onMessage","onError","error","console","log","worker","_createBrowserWorker","destroy","terminate","terminated","Boolean","postMessage","data","transferList","_getErrorFromErrorEvent","event","message","lineno","colno","Error","_loadableURL","Worker","onmessage","onerror","onmessageerror"],"sources":["../../../../src/lib/worker-farm/worker-thread.ts"],"sourcesContent":["import {assert} from '../env-utils/assert';\nimport {getLoadableWorkerURL} from '../worker-utils/get-loadable-worker-url';\nimport {getTransferList} from '../worker-utils/get-transfer-list';\n\nconst NOOP = () => {};\n\nexport type WorkerThreadProps = {\n  name: string;\n  source?: string;\n  url?: string;\n};\n\n/**\n * Represents one worker thread\n */\nexport default class WorkerThread {\n  readonly name: string;\n  readonly source: string | undefined;\n  readonly url: string | undefined;\n  terminated: boolean = false;\n  worker: Worker;\n  onMessage: (message: any) => void;\n  onError: (error: Error) => void;\n\n  private _loadableURL: string = '';\n\n  static isSupported(): boolean {\n    return typeof Worker !== 'undefined';\n  }\n\n  constructor(props: WorkerThreadProps) {\n    const {name, source, url} = props;\n    assert(source || url); // Either source or url must be defined\n    this.name = name;\n    this.source = source;\n    this.url = url;\n    this.onMessage = NOOP;\n    this.onError = (error) => console.log(error); // eslint-disable-line\n\n    this.worker = this._createBrowserWorker();\n  }\n\n  /**\n   * Terminate this worker thread\n   * @note Can free up significant memory\n   */\n  destroy(): void {\n    this.onMessage = NOOP;\n    this.onError = NOOP;\n    // @ts-ignore\n    this.worker.terminate();\n    this.terminated = true;\n  }\n\n  get isRunning() {\n    return Boolean(this.onMessage);\n  }\n\n  /**\n   * Send a message to this worker thread\n   * @param data any data structure, ideally consisting mostly of transferrable objects\n   * @param transferList If not supplied, calculated automatically by traversing data\n   */\n  postMessage(data: any, transferList?: any[]): void {\n    transferList = transferList || getTransferList(data);\n    // @ts-ignore\n    this.worker.postMessage(data, transferList);\n  }\n\n  // PRIVATE\n\n  /**\n   * Generate a standard Error from an ErrorEvent\n   * @param {ErrorEvent} event\n   */\n  _getErrorFromErrorEvent(event: ErrorEvent): Error {\n    // Note Error object does not have the expected fields if loading failed completely\n    // https://developer.mozilla.org/en-US/docs/Web/API/Worker#Event_handlers\n    // https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent\n    let message = 'Failed to load ';\n    message += `worker ${this.name} from ${this.url}. `;\n    if (event.message) {\n      message += `${event.message} in `;\n    }\n    // const hasFilename = event.filename && !event.filename.startsWith('blob:');\n    // message += hasFilename ? event.filename : this.source.slice(0, 100);\n    if (event.lineno) {\n      message += `:${event.lineno}:${event.colno}`;\n    }\n    return new Error(message);\n  }\n\n  /**\n   * Creates a worker thread on the browser\n   */\n  _createBrowserWorker() {\n    this._loadableURL = getLoadableWorkerURL({source: this.source, url: this.url});\n    const worker = new Worker(this._loadableURL, {name: this.name});\n\n    worker.onmessage = (event) => {\n      if (!event.data) {\n        this.onError(new Error('No data received'));\n      } else {\n        this.onMessage(event.data);\n      }\n    };\n    // This callback represents an uncaught exception in the worker thread\n    worker.onerror = (error: ErrorEvent): void => {\n      this.onError(this._getErrorFromErrorEvent(error));\n      this.terminated = true;\n    };\n    // TODO - not clear when this would be called, for now just log in case it happens\n    worker.onmessageerror = (event) => console.error(event); // eslint-disable-line\n\n    return worker;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}