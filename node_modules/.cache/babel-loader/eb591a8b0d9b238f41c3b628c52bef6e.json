{"ast":null,"code":"import _toConsumableArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { CompositeLayer, log } from '@deck.gl/core';\nimport { SimpleMeshLayer } from '@deck.gl/mesh-layers';\nimport { COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { TerrainWorkerLoader } from '@loaders.gl/terrain';\nimport TileLayer from '../tile-layer/tile-layer';\nimport { urlType, getURLFromTemplate } from '../tile-layer/utils';\nvar DUMMY_DATA = [1];\n\nvar defaultProps = _objectSpread(_objectSpread({}, TileLayer.defaultProps), {}, {\n  elevationData: urlType,\n  texture: _objectSpread(_objectSpread({}, urlType), {}, {\n    optional: true\n  }),\n  meshMaxError: {\n    type: 'number',\n    value: 4.0\n  },\n  bounds: {\n    type: 'array',\n    value: null,\n    optional: true,\n    compare: true\n  },\n  color: {\n    type: 'color',\n    value: [255, 255, 255]\n  },\n  elevationDecoder: {\n    type: 'object',\n    value: {\n      rScaler: 1,\n      gScaler: 0,\n      bScaler: 0,\n      offset: 0\n    }\n  },\n  workerUrl: {\n    type: 'string',\n    value: null\n  },\n  wireframe: false,\n  material: true,\n  loaders: [TerrainWorkerLoader]\n});\n\nfunction urlTemplateToUpdateTrigger(template) {\n  if (Array.isArray(template)) {\n    return template.join(';');\n  }\n\n  return template;\n}\n\nvar TerrainLayer = /*#__PURE__*/function (_CompositeLayer) {\n  _inherits(TerrainLayer, _CompositeLayer);\n\n  var _super = _createSuper(TerrainLayer);\n\n  function TerrainLayer() {\n    _classCallCheck(this, TerrainLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TerrainLayer, [{\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps;\n      var elevationDataChanged = props.elevationData !== oldProps.elevationData;\n\n      if (elevationDataChanged) {\n        var elevationData = props.elevationData;\n        var isTiled = elevationData && (Array.isArray(elevationData) || elevationData.includes('{x}') && elevationData.includes('{y}'));\n        this.setState({\n          isTiled: isTiled\n        });\n      }\n\n      var shouldReload = elevationDataChanged || props.meshMaxError !== oldProps.meshMaxError || props.elevationDecoder !== oldProps.elevationDecoder || props.bounds !== oldProps.bounds;\n\n      if (!this.state.isTiled && shouldReload) {\n        var terrain = this.loadTerrain(props);\n        this.setState({\n          terrain: terrain\n        });\n      }\n\n      if (props.workerUrl) {\n        log.removed('workerUrl', 'loadOptions.terrain.workerUrl')();\n      }\n    }\n  }, {\n    key: \"loadTerrain\",\n    value: function loadTerrain(_ref2) {\n      var elevationData = _ref2.elevationData,\n          bounds = _ref2.bounds,\n          elevationDecoder = _ref2.elevationDecoder,\n          meshMaxError = _ref2.meshMaxError,\n          signal = _ref2.signal;\n\n      var _loadOptions;\n\n      if (!elevationData) {\n        return null;\n      }\n\n      var loadOptions = this.getLoadOptions();\n      loadOptions = _objectSpread(_objectSpread({}, loadOptions), {}, {\n        terrain: _objectSpread(_objectSpread({\n          skirtHeight: this.state.isTiled ? meshMaxError * 2 : 0\n        }, (_loadOptions = loadOptions) === null || _loadOptions === void 0 ? void 0 : _loadOptions.terrain), {}, {\n          bounds: bounds,\n          meshMaxError: meshMaxError,\n          elevationDecoder: elevationDecoder\n        })\n      });\n      var fetch = this.props.fetch;\n      return fetch(elevationData, {\n        propName: 'elevationData',\n        layer: this,\n        loadOptions: loadOptions,\n        signal: signal\n      });\n    }\n  }, {\n    key: \"getTiledTerrainData\",\n    value: function getTiledTerrainData(tile) {\n      var _this$props = this.props,\n          elevationData = _this$props.elevationData,\n          fetch = _this$props.fetch,\n          texture = _this$props.texture,\n          elevationDecoder = _this$props.elevationDecoder,\n          meshMaxError = _this$props.meshMaxError;\n      var viewport = this.context.viewport;\n      var dataUrl = getURLFromTemplate(elevationData, tile);\n      var textureUrl = getURLFromTemplate(texture, tile);\n      var bbox = tile.bbox,\n          signal = tile.signal;\n      var bottomLeft = viewport.isGeospatial ? viewport.projectFlat([bbox.west, bbox.south]) : [bbox.left, bbox.bottom];\n      var topRight = viewport.isGeospatial ? viewport.projectFlat([bbox.east, bbox.north]) : [bbox.right, bbox.top];\n      var bounds = [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]];\n      var terrain = this.loadTerrain({\n        elevationData: dataUrl,\n        bounds: bounds,\n        elevationDecoder: elevationDecoder,\n        meshMaxError: meshMaxError,\n        signal: signal\n      });\n      var surface = textureUrl ? fetch(textureUrl, {\n        propName: 'texture',\n        layer: this,\n        loaders: [],\n        signal: signal\n      }).catch(function (_) {\n        return null;\n      }) : Promise.resolve(null);\n      return Promise.all([terrain, surface]);\n    }\n  }, {\n    key: \"renderSubLayers\",\n    value: function renderSubLayers(props) {\n      var SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n      var data = props.data,\n          color = props.color;\n\n      if (!data) {\n        return null;\n      }\n\n      var _data = _slicedToArray(data, 2),\n          mesh = _data[0],\n          texture = _data[1];\n\n      return new SubLayerClass(props, {\n        data: DUMMY_DATA,\n        mesh: mesh,\n        texture: texture,\n        _instanced: false,\n        coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n        getPosition: function getPosition(d) {\n          return [0, 0, 0];\n        },\n        getColor: color\n      });\n    }\n  }, {\n    key: \"onViewportLoad\",\n    value: function onViewportLoad(tiles) {\n      if (!tiles) {\n        return;\n      }\n\n      var zRange = this.state.zRange;\n      var ranges = tiles.map(function (tile) {\n        return tile.content;\n      }).filter(Boolean).map(function (arr) {\n        var bounds = arr[0].header.boundingBox;\n        return bounds.map(function (bound) {\n          return bound[2];\n        });\n      });\n\n      if (ranges.length === 0) {\n        return;\n      }\n\n      var minZ = Math.min.apply(Math, _toConsumableArray(ranges.map(function (x) {\n        return x[0];\n      })));\n      var maxZ = Math.max.apply(Math, _toConsumableArray(ranges.map(function (x) {\n        return x[1];\n      })));\n\n      if (!zRange || minZ < zRange[0] || maxZ > zRange[1]) {\n        this.setState({\n          zRange: [minZ, maxZ]\n        });\n      }\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props2 = this.props,\n          color = _this$props2.color,\n          material = _this$props2.material,\n          elevationData = _this$props2.elevationData,\n          texture = _this$props2.texture,\n          wireframe = _this$props2.wireframe,\n          meshMaxError = _this$props2.meshMaxError,\n          elevationDecoder = _this$props2.elevationDecoder,\n          tileSize = _this$props2.tileSize,\n          maxZoom = _this$props2.maxZoom,\n          minZoom = _this$props2.minZoom,\n          extent = _this$props2.extent,\n          maxRequests = _this$props2.maxRequests,\n          onTileLoad = _this$props2.onTileLoad,\n          onTileUnload = _this$props2.onTileUnload,\n          onTileError = _this$props2.onTileError,\n          maxCacheSize = _this$props2.maxCacheSize,\n          maxCacheByteSize = _this$props2.maxCacheByteSize,\n          refinementStrategy = _this$props2.refinementStrategy;\n\n      if (this.state.isTiled) {\n        return new TileLayer(this.getSubLayerProps({\n          id: 'tiles'\n        }), {\n          wireframe: wireframe,\n          color: color,\n          material: material,\n          getTileData: this.getTiledTerrainData.bind(this),\n          renderSubLayers: this.renderSubLayers.bind(this),\n          updateTriggers: {\n            getTileData: {\n              elevationData: urlTemplateToUpdateTrigger(elevationData),\n              texture: urlTemplateToUpdateTrigger(texture),\n              meshMaxError: meshMaxError,\n              elevationDecoder: elevationDecoder\n            }\n          },\n          onViewportLoad: this.onViewportLoad.bind(this),\n          zRange: this.state.zRange || null,\n          tileSize: tileSize,\n          maxZoom: maxZoom,\n          minZoom: minZoom,\n          extent: extent,\n          maxRequests: maxRequests,\n          onTileLoad: onTileLoad,\n          onTileUnload: onTileUnload,\n          onTileError: onTileError,\n          maxCacheSize: maxCacheSize,\n          maxCacheByteSize: maxCacheByteSize,\n          refinementStrategy: refinementStrategy\n        });\n      }\n\n      var SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n      return new SubLayerClass(this.getSubLayerProps({\n        id: 'mesh'\n      }), {\n        data: DUMMY_DATA,\n        mesh: this.state.terrain,\n        texture: texture,\n        _instanced: false,\n        getPosition: function getPosition(d) {\n          return [0, 0, 0];\n        },\n        getColor: color,\n        material: material,\n        wireframe: wireframe\n      });\n    }\n  }]);\n\n  return TerrainLayer;\n}(CompositeLayer);\n\nexport { TerrainLayer as default };\nTerrainLayer.layerName = 'TerrainLayer';\nTerrainLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["CompositeLayer","log","SimpleMeshLayer","COORDINATE_SYSTEM","TerrainWorkerLoader","TileLayer","urlType","getURLFromTemplate","DUMMY_DATA","defaultProps","elevationData","texture","optional","meshMaxError","type","value","bounds","compare","color","elevationDecoder","rScaler","gScaler","bScaler","offset","workerUrl","wireframe","material","loaders","urlTemplateToUpdateTrigger","template","Array","isArray","join","TerrainLayer","updateState","props","oldProps","elevationDataChanged","isTiled","includes","setState","shouldReload","state","terrain","loadTerrain","removed","signal","loadOptions","getLoadOptions","skirtHeight","_loadOptions","fetch","propName","layer","getTiledTerrainData","tile","viewport","context","dataUrl","textureUrl","bbox","bottomLeft","isGeospatial","projectFlat","west","south","left","bottom","topRight","east","north","right","top","surface","catch","_","Promise","resolve","all","renderSubLayers","SubLayerClass","getSubLayerClass","data","mesh","_instanced","coordinateSystem","CARTESIAN","getPosition","d","getColor","onViewportLoad","tiles","zRange","ranges","map","content","filter","Boolean","arr","header","boundingBox","bound","length","minZ","Math","min","x","maxZ","max","renderLayers","tileSize","maxZoom","minZoom","extent","maxRequests","onTileLoad","onTileUnload","onTileError","maxCacheSize","maxCacheByteSize","refinementStrategy","getSubLayerProps","id","getTileData","bind","updateTriggers","layerName"],"sources":["../../../src/terrain-layer/terrain-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, log} from '@deck.gl/core';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {COORDINATE_SYSTEM} from '@deck.gl/core';\nimport {TerrainWorkerLoader} from '@loaders.gl/terrain';\nimport TileLayer from '../tile-layer/tile-layer';\nimport {urlType, getURLFromTemplate} from '../tile-layer/utils';\n\nconst DUMMY_DATA = [1];\n\nconst defaultProps = {\n  ...TileLayer.defaultProps,\n  // Image url that encodes height data\n  elevationData: urlType,\n  // Image url to use as texture\n  texture: {...urlType, optional: true},\n  // Martini error tolerance in meters, smaller number -> more detailed mesh\n  meshMaxError: {type: 'number', value: 4.0},\n  // Bounding box of the terrain image, [minX, minY, maxX, maxY] in world coordinates\n  bounds: {type: 'array', value: null, optional: true, compare: true},\n  // Color to use if texture is unavailable\n  color: {type: 'color', value: [255, 255, 255]},\n  // Object to decode height data, from (r, g, b) to height in meters\n  elevationDecoder: {\n    type: 'object',\n    value: {\n      rScaler: 1,\n      gScaler: 0,\n      bScaler: 0,\n      offset: 0\n    }\n  },\n  // Supply url to local terrain worker bundle. Only required if running offline and cannot access CDN.\n  workerUrl: {type: 'string', value: null},\n  // Same as SimpleMeshLayer wireframe\n  wireframe: false,\n  material: true,\n\n  loaders: [TerrainWorkerLoader]\n};\n\n// Turns array of templates into a single string to work around shallow change\nfunction urlTemplateToUpdateTrigger(template) {\n  if (Array.isArray(template)) {\n    return template.join(';');\n  }\n  return template;\n}\n\n/**\n * state: {\n *   isTiled: True renders TileLayer of many SimpleMeshLayers, false renders one SimpleMeshLayer\n *   terrain: Mesh object. Only defined when isTiled is false.\n * }\n */\nexport default class TerrainLayer extends CompositeLayer {\n  updateState({props, oldProps}) {\n    const elevationDataChanged = props.elevationData !== oldProps.elevationData;\n    if (elevationDataChanged) {\n      const {elevationData} = props;\n      const isTiled =\n        elevationData &&\n        (Array.isArray(elevationData) ||\n          (elevationData.includes('{x}') && elevationData.includes('{y}')));\n      this.setState({isTiled});\n    }\n\n    // Reloading for single terrain mesh\n    const shouldReload =\n      elevationDataChanged ||\n      props.meshMaxError !== oldProps.meshMaxError ||\n      props.elevationDecoder !== oldProps.elevationDecoder ||\n      props.bounds !== oldProps.bounds;\n\n    if (!this.state.isTiled && shouldReload) {\n      const terrain = this.loadTerrain(props);\n      this.setState({terrain});\n    }\n\n    // TODO - remove in v9\n    if (props.workerUrl) {\n      log.removed('workerUrl', 'loadOptions.terrain.workerUrl')();\n    }\n  }\n\n  loadTerrain({elevationData, bounds, elevationDecoder, meshMaxError, signal}) {\n    if (!elevationData) {\n      return null;\n    }\n    let loadOptions = this.getLoadOptions();\n    loadOptions = {\n      ...loadOptions,\n      terrain: {\n        skirtHeight: this.state.isTiled ? meshMaxError * 2 : 0,\n        ...loadOptions?.terrain,\n        bounds,\n        meshMaxError,\n        elevationDecoder\n      }\n    };\n    const {fetch} = this.props;\n    return fetch(elevationData, {propName: 'elevationData', layer: this, loadOptions, signal});\n  }\n\n  getTiledTerrainData(tile) {\n    const {elevationData, fetch, texture, elevationDecoder, meshMaxError} = this.props;\n    const {viewport} = this.context;\n    const dataUrl = getURLFromTemplate(elevationData, tile);\n    const textureUrl = getURLFromTemplate(texture, tile);\n\n    const {bbox, signal} = tile;\n    const bottomLeft = viewport.isGeospatial\n      ? viewport.projectFlat([bbox.west, bbox.south])\n      : [bbox.left, bbox.bottom];\n    const topRight = viewport.isGeospatial\n      ? viewport.projectFlat([bbox.east, bbox.north])\n      : [bbox.right, bbox.top];\n    const bounds = [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]];\n\n    const terrain = this.loadTerrain({\n      elevationData: dataUrl,\n      bounds,\n      elevationDecoder,\n      meshMaxError,\n      signal\n    });\n    const surface = textureUrl\n      ? // If surface image fails to load, the tile should still be displayed\n        fetch(textureUrl, {propName: 'texture', layer: this, loaders: [], signal}).catch(_ => null)\n      : Promise.resolve(null);\n\n    return Promise.all([terrain, surface]);\n  }\n\n  renderSubLayers(props) {\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    const {data, color} = props;\n\n    if (!data) {\n      return null;\n    }\n\n    const [mesh, texture] = data;\n\n    return new SubLayerClass(props, {\n      data: DUMMY_DATA,\n      mesh,\n      texture,\n      _instanced: false,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getPosition: d => [0, 0, 0],\n      getColor: color\n    });\n  }\n\n  // Update zRange of viewport\n  onViewportLoad(tiles) {\n    if (!tiles) {\n      return;\n    }\n\n    const {zRange} = this.state;\n    const ranges = tiles\n      .map(tile => tile.content)\n      .filter(Boolean)\n      .map(arr => {\n        const bounds = arr[0].header.boundingBox;\n        return bounds.map(bound => bound[2]);\n      });\n    if (ranges.length === 0) {\n      return;\n    }\n    const minZ = Math.min(...ranges.map(x => x[0]));\n    const maxZ = Math.max(...ranges.map(x => x[1]));\n\n    if (!zRange || minZ < zRange[0] || maxZ > zRange[1]) {\n      this.setState({zRange: [minZ, maxZ]});\n    }\n  }\n\n  renderLayers() {\n    const {\n      color,\n      material,\n      elevationData,\n      texture,\n      wireframe,\n      meshMaxError,\n      elevationDecoder,\n      tileSize,\n      maxZoom,\n      minZoom,\n      extent,\n      maxRequests,\n      onTileLoad,\n      onTileUnload,\n      onTileError,\n      maxCacheSize,\n      maxCacheByteSize,\n      refinementStrategy\n    } = this.props;\n\n    if (this.state.isTiled) {\n      return new TileLayer(\n        this.getSubLayerProps({\n          id: 'tiles'\n        }),\n        {\n          wireframe,\n          color,\n          material,\n          getTileData: this.getTiledTerrainData.bind(this),\n          renderSubLayers: this.renderSubLayers.bind(this),\n          updateTriggers: {\n            getTileData: {\n              elevationData: urlTemplateToUpdateTrigger(elevationData),\n              texture: urlTemplateToUpdateTrigger(texture),\n              meshMaxError,\n              elevationDecoder\n            }\n          },\n          onViewportLoad: this.onViewportLoad.bind(this),\n          zRange: this.state.zRange || null,\n          tileSize,\n          maxZoom,\n          minZoom,\n          extent,\n          maxRequests,\n          onTileLoad,\n          onTileUnload,\n          onTileError,\n          maxCacheSize,\n          maxCacheByteSize,\n          refinementStrategy\n        }\n      );\n    }\n\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    return new SubLayerClass(\n      this.getSubLayerProps({\n        id: 'mesh'\n      }),\n      {\n        data: DUMMY_DATA,\n        mesh: this.state.terrain,\n        texture,\n        _instanced: false,\n        getPosition: d => [0, 0, 0],\n        getColor: color,\n        material,\n        wireframe\n      }\n    );\n  }\n}\n\nTerrainLayer.layerName = 'TerrainLayer';\nTerrainLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}