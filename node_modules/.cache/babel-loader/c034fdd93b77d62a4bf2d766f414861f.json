{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport TransitionManager, { TRANSITION_EVENTS } from './transition-manager';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nvar NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nvar LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: function transitionEasing(t) {\n    return t;\n  },\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\nvar DEFAULT_INERTIA = 300;\n\nvar INERTIA_EASING = function INERTIA_EASING(t) {\n  return 1 - (1 - t) * (1 - t);\n};\n\nvar EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\nvar Controller = /*#__PURE__*/function () {\n  function Controller(ControllerState) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Controller);\n\n    _defineProperty(this, \"ControllerState\", void 0);\n\n    _defineProperty(this, \"controllerState\", null);\n\n    _defineProperty(this, \"controllerStateProps\", null);\n\n    _defineProperty(this, \"transitionManager\", void 0);\n\n    _defineProperty(this, \"_transition\", void 0);\n\n    _defineProperty(this, \"_events\", null);\n\n    _defineProperty(this, \"eventManager\", null);\n\n    _defineProperty(this, \"_interactionState\", {\n      isDragging: false\n    });\n\n    _defineProperty(this, \"_customEvents\", []);\n\n    _defineProperty(this, \"onViewStateChange\", null);\n\n    _defineProperty(this, \"onStateChange\", null);\n\n    _defineProperty(this, \"makeViewport\", void 0);\n\n    _defineProperty(this, \"_eventStartBlocked\", void 0);\n\n    _defineProperty(this, \"_state\", void 0);\n\n    _defineProperty(this, \"_panMove\", void 0);\n\n    _defineProperty(this, \"invertPan\", void 0);\n\n    _defineProperty(this, \"dragMode\", 'rotate');\n\n    _defineProperty(this, \"inertia\", 0);\n\n    _defineProperty(this, \"scrollZoom\", true);\n\n    _defineProperty(this, \"dragPan\", true);\n\n    _defineProperty(this, \"dragRotate\", true);\n\n    _defineProperty(this, \"doubleClickZoom\", true);\n\n    _defineProperty(this, \"touchZoom\", true);\n\n    _defineProperty(this, \"touchRotate\", false);\n\n    _defineProperty(this, \"keyboard\", true);\n\n    this.ControllerState = ControllerState;\n    this.transitionManager = new TransitionManager(ControllerState, _objectSpread(_objectSpread({}, options), {}, {\n      onViewStateChange: this._onTransition.bind(this),\n      onStateChange: this._setInteractionState.bind(this)\n    }));\n    var linearTransitionProps = this.linearTransitionProps;\n    this._transition = linearTransitionProps && _objectSpread(_objectSpread({}, LINEAR_TRANSITION_PROPS), {}, {\n      transitionInterpolator: new LinearInterpolator({\n        transitionProps: linearTransitionProps\n      })\n    });\n    this.handleEvent = this.handleEvent.bind(this);\n    this.setProps(options);\n  }\n\n  _createClass(Controller, [{\n    key: \"linearTransitionProps\",\n    get: function get() {\n      return null;\n    }\n  }, {\n    key: \"events\",\n    set: function set(customEvents) {\n      this.toggleEvents(this._customEvents, false);\n      this.toggleEvents(customEvents, true);\n      this._customEvents = customEvents;\n      this.setProps(this.controllerStateProps);\n    }\n  }, {\n    key: \"finalize\",\n    value: function finalize() {\n      for (var eventName in this._events) {\n        if (this._events[eventName]) {\n          this.eventManager.off(eventName, this.handleEvent);\n        }\n      }\n\n      this.transitionManager.finalize();\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(event) {\n      var ControllerState = this.ControllerState;\n      this.controllerState = new ControllerState(_objectSpread(_objectSpread({\n        makeViewport: this.makeViewport\n      }, this.controllerStateProps), this._state));\n      var eventStartBlocked = this._eventStartBlocked;\n\n      switch (event.type) {\n        case 'panstart':\n          return eventStartBlocked ? false : this._onPanStart(event);\n\n        case 'panmove':\n          return this._onPan(event);\n\n        case 'panend':\n          return this._onPanEnd(event);\n\n        case 'pinchstart':\n          return eventStartBlocked ? false : this._onPinchStart(event);\n\n        case 'pinchmove':\n          return this._onPinch(event);\n\n        case 'pinchend':\n          return this._onPinchEnd(event);\n\n        case 'tripanstart':\n          return eventStartBlocked ? false : this._onTriplePanStart(event);\n\n        case 'tripanmove':\n          return this._onTriplePan(event);\n\n        case 'tripanend':\n          return this._onTriplePanEnd(event);\n\n        case 'doubletap':\n          return this._onDoubleTap(event);\n\n        case 'wheel':\n          return this._onWheel(event);\n\n        case 'keydown':\n          return this._onKeyDown(event);\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter(event) {\n      var _this$controllerState = this.controllerStateProps,\n          x = _this$controllerState.x,\n          y = _this$controllerState.y;\n      var offsetCenter = event.offsetCenter;\n      return [offsetCenter.x - x, offsetCenter.y - y];\n    }\n  }, {\n    key: \"isPointInBounds\",\n    value: function isPointInBounds(pos, event) {\n      var _this$controllerState2 = this.controllerStateProps,\n          width = _this$controllerState2.width,\n          height = _this$controllerState2.height;\n\n      if (event && event.handled) {\n        return false;\n      }\n\n      var inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n\n      if (inside && event) {\n        event.stopPropagation();\n      }\n\n      return inside;\n    }\n  }, {\n    key: \"isFunctionKeyPressed\",\n    value: function isFunctionKeyPressed(event) {\n      var srcEvent = event.srcEvent;\n      return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n    }\n  }, {\n    key: \"isDragging\",\n    value: function isDragging() {\n      return this._interactionState.isDragging;\n    }\n  }, {\n    key: \"blockEvents\",\n    value: function blockEvents(timeout) {\n      var _this = this;\n\n      var timer = setTimeout(function () {\n        if (_this._eventStartBlocked === timer) {\n          _this._eventStartBlocked = null;\n        }\n      }, timeout);\n      this._eventStartBlocked = timer;\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      if ('onViewStateChange' in props) {\n        this.onViewStateChange = props.onViewStateChange;\n      }\n\n      if ('onStateChange' in props) {\n        this.onStateChange = props.onStateChange;\n      }\n\n      if ('makeViewport' in props) {\n        this.makeViewport = props.makeViewport;\n      }\n\n      if ('dragMode' in props) {\n        this.dragMode = props.dragMode;\n      }\n\n      this.controllerStateProps = props;\n\n      if ('eventManager' in props && this.eventManager !== props.eventManager) {\n        this.eventManager = props.eventManager;\n        this._events = {};\n        this.toggleEvents(this._customEvents, true);\n      }\n\n      if (!('transitionInterpolator' in props)) {\n        props.transitionInterpolator = this._getTransitionProps().transitionInterpolator;\n      }\n\n      this.transitionManager.processViewStateChange(props);\n      var inertia = props.inertia;\n\n      if (inertia === true) {\n        inertia = DEFAULT_INERTIA;\n      }\n\n      this.inertia = inertia;\n      var _props$scrollZoom = props.scrollZoom,\n          scrollZoom = _props$scrollZoom === void 0 ? true : _props$scrollZoom,\n          _props$dragPan = props.dragPan,\n          dragPan = _props$dragPan === void 0 ? true : _props$dragPan,\n          _props$dragRotate = props.dragRotate,\n          dragRotate = _props$dragRotate === void 0 ? true : _props$dragRotate,\n          _props$doubleClickZoo = props.doubleClickZoom,\n          doubleClickZoom = _props$doubleClickZoo === void 0 ? true : _props$doubleClickZoo,\n          _props$touchZoom = props.touchZoom,\n          touchZoom = _props$touchZoom === void 0 ? true : _props$touchZoom,\n          _props$touchRotate = props.touchRotate,\n          touchRotate = _props$touchRotate === void 0 ? false : _props$touchRotate,\n          _props$keyboard = props.keyboard,\n          keyboard = _props$keyboard === void 0 ? true : _props$keyboard;\n      var isInteractive = Boolean(this.onViewStateChange);\n      this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n      this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n      this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n      this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && touchRotate);\n      this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n      this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n      this.scrollZoom = scrollZoom;\n      this.dragPan = dragPan;\n      this.dragRotate = dragRotate;\n      this.doubleClickZoom = doubleClickZoom;\n      this.touchZoom = touchZoom;\n      this.touchRotate = touchRotate;\n      this.keyboard = keyboard;\n    }\n  }, {\n    key: \"updateTransition\",\n    value: function updateTransition() {\n      this.transitionManager.updateTransition();\n    }\n  }, {\n    key: \"toggleEvents\",\n    value: function toggleEvents(eventNames, enabled) {\n      var _this2 = this;\n\n      if (this.eventManager) {\n        eventNames.forEach(function (eventName) {\n          if (_this2._events[eventName] !== enabled) {\n            _this2._events[eventName] = enabled;\n\n            if (enabled) {\n              _this2.eventManager.on(eventName, _this2.handleEvent);\n            } else {\n              _this2.eventManager.off(eventName, _this2.handleEvent);\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"updateViewport\",\n    value: function updateViewport(newControllerState) {\n      var extraProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var interactionState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var viewState = _objectSpread(_objectSpread({}, newControllerState.getViewportProps()), extraProps);\n\n      var changed = this.controllerState !== newControllerState;\n      this._state = newControllerState.getState();\n\n      this._setInteractionState(interactionState);\n\n      if (changed) {\n        var oldViewState = this.controllerState ? this.controllerState.getViewportProps() : null;\n\n        if (this.onViewStateChange) {\n          this.onViewStateChange({\n            viewState: viewState,\n            interactionState: this._interactionState,\n            oldViewState: oldViewState\n          });\n        }\n      }\n    }\n  }, {\n    key: \"_onTransition\",\n    value: function _onTransition(params) {\n      if (this.onViewStateChange) {\n        params.interactionState = this._interactionState;\n        this.onViewStateChange(params);\n      }\n    }\n  }, {\n    key: \"_setInteractionState\",\n    value: function _setInteractionState(newStates) {\n      Object.assign(this._interactionState, newStates);\n\n      if (this.onStateChange) {\n        this.onStateChange(this._interactionState);\n      }\n    }\n  }, {\n    key: \"_onPanStart\",\n    value: function _onPanStart(event) {\n      var pos = this.getCenter(event);\n\n      if (!this.isPointInBounds(pos, event)) {\n        return false;\n      }\n\n      var alternateMode = this.isFunctionKeyPressed(event) || event.rightButton;\n\n      if (this.invertPan || this.dragMode === 'pan') {\n        alternateMode = !alternateMode;\n      }\n\n      var newControllerState = this.controllerState[alternateMode ? 'panStart' : 'rotateStart']({\n        pos: pos\n      });\n      this._panMove = alternateMode;\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPan\",\n    value: function _onPan(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);\n    }\n  }, {\n    key: \"_onPanEnd\",\n    value: function _onPanEnd(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      return this._panMove ? this._onPanMoveEnd(event) : this._onPanRotateEnd(event);\n    }\n  }, {\n    key: \"_onPanMove\",\n    value: function _onPanMove(event) {\n      if (!this.dragPan) {\n        return false;\n      }\n\n      var pos = this.getCenter(event);\n      var newControllerState = this.controllerState.pan({\n        pos: pos\n      });\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true,\n        isPanning: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPanMoveEnd\",\n    value: function _onPanMoveEnd(event) {\n      var inertia = this.inertia;\n\n      if (this.dragPan && inertia && event.velocity) {\n        var pos = this.getCenter(event);\n        var endPos = [pos[0] + event.velocityX * inertia / 2, pos[1] + event.velocityY * inertia / 2];\n        var newControllerState = this.controllerState.pan({\n          pos: endPos\n        }).panEnd();\n        this.updateViewport(newControllerState, _objectSpread(_objectSpread({}, this._getTransitionProps()), {}, {\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        }), {\n          isDragging: false,\n          isPanning: true\n        });\n      } else {\n        var _newControllerState = this.controllerState.panEnd();\n\n        this.updateViewport(_newControllerState, null, {\n          isDragging: false,\n          isPanning: false\n        });\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_onPanRotate\",\n    value: function _onPanRotate(event) {\n      if (!this.dragRotate) {\n        return false;\n      }\n\n      var pos = this.getCenter(event);\n      var newControllerState = this.controllerState.rotate({\n        pos: pos\n      });\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true,\n        isRotating: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPanRotateEnd\",\n    value: function _onPanRotateEnd(event) {\n      var inertia = this.inertia;\n\n      if (this.dragRotate && inertia && event.velocity) {\n        var pos = this.getCenter(event);\n        var endPos = [pos[0] + event.velocityX * inertia / 2, pos[1] + event.velocityY * inertia / 2];\n        var newControllerState = this.controllerState.rotate({\n          pos: endPos\n        }).rotateEnd();\n        this.updateViewport(newControllerState, _objectSpread(_objectSpread({}, this._getTransitionProps()), {}, {\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        }), {\n          isDragging: false,\n          isRotating: true\n        });\n      } else {\n        var _newControllerState2 = this.controllerState.rotateEnd();\n\n        this.updateViewport(_newControllerState2, null, {\n          isDragging: false,\n          isRotating: false\n        });\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_onWheel\",\n    value: function _onWheel(event) {\n      if (!this.scrollZoom) {\n        return false;\n      }\n\n      event.preventDefault();\n      var pos = this.getCenter(event);\n\n      if (!this.isPointInBounds(pos, event)) {\n        return false;\n      }\n\n      var _this$scrollZoom = this.scrollZoom,\n          _this$scrollZoom$spee = _this$scrollZoom.speed,\n          speed = _this$scrollZoom$spee === void 0 ? 0.01 : _this$scrollZoom$spee,\n          _this$scrollZoom$smoo = _this$scrollZoom.smooth,\n          smooth = _this$scrollZoom$smoo === void 0 ? false : _this$scrollZoom$smoo;\n      var delta = event.delta;\n      var scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n\n      if (delta < 0 && scale !== 0) {\n        scale = 1 / scale;\n      }\n\n      var newControllerState = this.controllerState.zoom({\n        pos: pos,\n        scale: scale\n      });\n      this.updateViewport(newControllerState, _objectSpread(_objectSpread({}, this._getTransitionProps({\n        around: pos\n      })), {}, {\n        transitionDuration: smooth ? 250 : 1\n      }), {\n        isZooming: true,\n        isPanning: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onTriplePanStart\",\n    value: function _onTriplePanStart(event) {\n      var pos = this.getCenter(event);\n\n      if (!this.isPointInBounds(pos, event)) {\n        return false;\n      }\n\n      var newControllerState = this.controllerState.rotateStart({\n        pos: pos\n      });\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onTriplePan\",\n    value: function _onTriplePan(event) {\n      if (!this.touchRotate) {\n        return false;\n      }\n\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      var pos = this.getCenter(event);\n      pos[0] -= event.deltaX;\n      var newControllerState = this.controllerState.rotate({\n        pos: pos\n      });\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true,\n        isRotating: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onTriplePanEnd\",\n    value: function _onTriplePanEnd(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      var inertia = this.inertia;\n\n      if (this.touchRotate && inertia && event.velocityY) {\n        var pos = this.getCenter(event);\n        var endPos = [pos[0], pos[1] += event.velocityY * inertia / 2];\n        var newControllerState = this.controllerState.rotate({\n          pos: endPos\n        });\n        this.updateViewport(newControllerState, _objectSpread(_objectSpread({}, this._getTransitionProps()), {}, {\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        }), {\n          isDragging: false,\n          isRotating: true\n        });\n        this.blockEvents(inertia);\n      } else {\n        var _newControllerState3 = this.controllerState.rotateEnd();\n\n        this.updateViewport(_newControllerState3, null, {\n          isDragging: false,\n          isRotating: false\n        });\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_onPinchStart\",\n    value: function _onPinchStart(event) {\n      var pos = this.getCenter(event);\n\n      if (!this.isPointInBounds(pos, event)) {\n        return false;\n      }\n\n      var newControllerState = this.controllerState.zoomStart({\n        pos: pos\n      }).rotateStart({\n        pos: pos\n      });\n      this._startPinchRotation = event.rotation;\n      this._lastPinchEvent = event;\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPinch\",\n    value: function _onPinch(event) {\n      if (!this.touchZoom && !this.touchRotate) {\n        return false;\n      }\n\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      var newControllerState = this.controllerState;\n\n      if (this.touchZoom) {\n        var scale = event.scale;\n        var pos = this.getCenter(event);\n        newControllerState = newControllerState.zoom({\n          pos: pos,\n          scale: scale\n        });\n      }\n\n      if (this.touchRotate) {\n        var rotation = event.rotation;\n        newControllerState = newControllerState.rotate({\n          deltaAngleX: this._startPinchRotation - rotation\n        });\n      }\n\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true,\n        isPanning: this.touchZoom,\n        isZooming: this.touchZoom,\n        isRotating: this.touchRotate\n      });\n      this._lastPinchEvent = event;\n      return true;\n    }\n  }, {\n    key: \"_onPinchEnd\",\n    value: function _onPinchEnd(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      var inertia = this.inertia,\n          _lastPinchEvent = this._lastPinchEvent;\n\n      if (this.touchZoom && inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n        var pos = this.getCenter(event);\n        var newControllerState = this.controllerState.rotateEnd();\n        var z = Math.log2(event.scale);\n\n        var velocityZ = (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n\n        var endScale = Math.pow(2, z + velocityZ * inertia / 2);\n        newControllerState = newControllerState.zoom({\n          pos: pos,\n          scale: endScale\n        }).zoomEnd();\n        this.updateViewport(newControllerState, _objectSpread(_objectSpread({}, this._getTransitionProps({\n          around: pos\n        })), {}, {\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        }), {\n          isDragging: false,\n          isPanning: this.touchZoom,\n          isZooming: this.touchZoom,\n          isRotating: false\n        });\n        this.blockEvents(inertia);\n      } else {\n        var _newControllerState4 = this.controllerState.zoomEnd().rotateEnd();\n\n        this.updateViewport(_newControllerState4, null, {\n          isDragging: false,\n          isPanning: false,\n          isZooming: false,\n          isRotating: false\n        });\n      }\n\n      this._startPinchRotation = null;\n      this._lastPinchEvent = null;\n      return true;\n    }\n  }, {\n    key: \"_onDoubleTap\",\n    value: function _onDoubleTap(event) {\n      if (!this.doubleClickZoom) {\n        return false;\n      }\n\n      var pos = this.getCenter(event);\n\n      if (!this.isPointInBounds(pos, event)) {\n        return false;\n      }\n\n      var isZoomOut = this.isFunctionKeyPressed(event);\n      var newControllerState = this.controllerState.zoom({\n        pos: pos,\n        scale: isZoomOut ? 0.5 : 2\n      });\n      this.updateViewport(newControllerState, this._getTransitionProps({\n        around: pos\n      }), {\n        isZooming: true,\n        isPanning: true\n      });\n      this.blockEvents(100);\n      return true;\n    }\n  }, {\n    key: \"_onKeyDown\",\n    value: function _onKeyDown(event) {\n      if (!this.keyboard) {\n        return false;\n      }\n\n      var funcKey = this.isFunctionKeyPressed(event);\n      var _this$keyboard = this.keyboard,\n          zoomSpeed = _this$keyboard.zoomSpeed,\n          moveSpeed = _this$keyboard.moveSpeed,\n          rotateSpeedX = _this$keyboard.rotateSpeedX,\n          rotateSpeedY = _this$keyboard.rotateSpeedY;\n      var controllerState = this.controllerState;\n      var newControllerState;\n      var interactionState = {};\n\n      switch (event.srcEvent.code) {\n        case 'Minus':\n          newControllerState = funcKey ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed) : controllerState.zoomOut(zoomSpeed);\n          interactionState.isZooming = true;\n          break;\n\n        case 'Equal':\n          newControllerState = funcKey ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed) : controllerState.zoomIn(zoomSpeed);\n          interactionState.isZooming = true;\n          break;\n\n        case 'ArrowLeft':\n          if (funcKey) {\n            newControllerState = controllerState.rotateLeft(rotateSpeedX);\n            interactionState.isRotating = true;\n          } else {\n            newControllerState = controllerState.moveLeft(moveSpeed);\n            interactionState.isPanning = true;\n          }\n\n          break;\n\n        case 'ArrowRight':\n          if (funcKey) {\n            newControllerState = controllerState.rotateRight(rotateSpeedX);\n            interactionState.isRotating = true;\n          } else {\n            newControllerState = controllerState.moveRight(moveSpeed);\n            interactionState.isPanning = true;\n          }\n\n          break;\n\n        case 'ArrowUp':\n          if (funcKey) {\n            newControllerState = controllerState.rotateUp(rotateSpeedY);\n            interactionState.isRotating = true;\n          } else {\n            newControllerState = controllerState.moveUp(moveSpeed);\n            interactionState.isPanning = true;\n          }\n\n          break;\n\n        case 'ArrowDown':\n          if (funcKey) {\n            newControllerState = controllerState.rotateDown(rotateSpeedY);\n            interactionState.isRotating = true;\n          } else {\n            newControllerState = controllerState.moveDown(moveSpeed);\n            interactionState.isPanning = true;\n          }\n\n          break;\n\n        default:\n          return false;\n      }\n\n      this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n      return true;\n    }\n  }, {\n    key: \"_getTransitionProps\",\n    value: function _getTransitionProps(opts) {\n      var _transition = this._transition;\n\n      if (!_transition) {\n        return NO_TRANSITION_PROPS;\n      }\n\n      return opts ? _objectSpread(_objectSpread({}, _transition), {}, {\n        transitionInterpolator: new LinearInterpolator(_objectSpread(_objectSpread({}, opts), {}, {\n          transitionProps: this.linearTransitionProps,\n          makeViewport: this.controllerState.makeViewport\n        }))\n      }) : _transition;\n    }\n  }]);\n\n  return Controller;\n}();\n\nexport { Controller as default };","map":{"version":3,"mappings":"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","names":["TransitionManager","TRANSITION_EVENTS","LinearInterpolator","NO_TRANSITION_PROPS","transitionDuration","LINEAR_TRANSITION_PROPS","transitionEasing","t","transitionInterruption","BREAK","DEFAULT_INERTIA","INERTIA_EASING","EVENT_TYPES","WHEEL","PAN","PINCH","TRIPLE_PAN","DOUBLE_TAP","KEYBOARD","Controller","constructor","ControllerState","options","_defineProperty","isDragging","transitionManager","onViewStateChange","_onTransition","bind","onStateChange","_setInteractionState","linearTransitionProps","_transition","transitionInterpolator","transitionProps","handleEvent","setProps","customEvents","toggleEvents","_customEvents","controllerStateProps","finalize","eventName","_events","eventManager","off","event","controllerState","makeViewport","_state","eventStartBlocked","_eventStartBlocked","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onTriplePanStart","_onTriplePan","_onTriplePanEnd","_onDoubleTap","_onWheel","_onKeyDown","getCenter","x","y","offsetCenter","isPointInBounds","pos","width","height","handled","inside","stopPropagation","isFunctionKeyPressed","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","_interactionState","blockEvents","timeout","timer","setTimeout","props","dragMode","_getTransitionProps","processViewStateChange","inertia","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","isInteractive","updateTransition","eventNames","enabled","forEach","on","updateViewport","newControllerState","extraProps","interactionState","viewState","getViewportProps","changed","getState","oldViewState","params","newStates","Object","assign","alternateMode","rightButton","invertPan","_panMove","_onPanMove","_onPanRotate","_onPanMoveEnd","_onPanRotateEnd","pan","isPanning","velocity","endPos","velocityX","velocityY","panEnd","rotate","isRotating","rotateEnd","preventDefault","speed","smooth","delta","scale","Math","exp","abs","zoom","around","isZooming","rotateStart","deltaX","zoomStart","_startPinchRotation","rotation","_lastPinchEvent","deltaAngleX","z","log2","velocityZ","deltaTime","endScale","pow","zoomEnd","isZoomOut","funcKey","zoomSpeed","moveSpeed","rotateSpeedX","rotateSpeedY","code","zoomOut","zoomIn","rotateLeft","moveLeft","rotateRight","moveRight","rotateUp","moveUp","rotateDown","moveDown","opts"],"sources":["../../../src/controllers/controller.ts"],"sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable max-statements, complexity */\nimport TransitionManager, {TRANSITION_EVENTS} from './transition-manager';\nimport LinearInterpolator from '../transitions/linear-interpolator';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\n\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\nconst DEFAULT_INERTIA = 300;\nconst INERTIA_EASING = t => 1 - (1 - t) * (1 - t);\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\ntype ControllerProps = {\n  scrollZoom?: boolean | {speed?: number; smooth?: boolean};\n  dragPan?: boolean;\n  dragRotate?: boolean;\n  doubleClickZoom?: boolean;\n  touchZoom?: boolean;\n  touchRotate?: boolean;\n  keyboard?:\n    | boolean\n    | {\n        zoomSpeed?: number; //  speed of zoom using +/- keys. Default 2.\n        moveSpeed?: number; //  speed of movement using arrow keys, in pixels.\n        rotateSpeedX?: number; //  speed of rotation using shift + left/right arrow keys, in degrees. Default 15.\n        rotateSpeedY?: number; //  speed of rotation using shift + up/down arrow keys, in degrees. Default 10.\n      };\n  dragMode?: 'pan' | 'rotate';\n  inertia?: boolean | number;\n};\n\nexport default class Controller {\n  ControllerState;\n  controllerState: Record<string, any> | null = null;\n  controllerStateProps: Record<string, any> | null = null;\n  transitionManager: TransitionManager;\n  _transition;\n  _events: Record<string, any> | null = null;\n  eventManager: any = null;\n  _interactionState = {\n    isDragging: false\n  };\n  _customEvents = [];\n  onViewStateChange = null;\n  onStateChange = null;\n\n  makeViewport;\n  _eventStartBlocked;\n  _state;\n\n  _panMove;\n  invertPan;\n  dragMode: 'pan' | 'rotate' = 'rotate';\n\n  inertia: number = 0;\n\n  scrollZoom: boolean | {speed?: number; smooth?: boolean} = true;\n  dragPan: boolean = true;\n  dragRotate: boolean = true;\n  doubleClickZoom: boolean = true;\n  touchZoom: boolean = true;\n  touchRotate: boolean = false;\n  keyboard:\n    | boolean\n    | {\n        zoomSpeed: number; //  speed of zoom using +/- keys. Default 2.\n        moveSpeed: number; //  speed of movement using arrow keys, in pixels.\n        rotateSpeedX: number; //  speed of rotation using shift + left/right arrow keys, in degrees. Default 15.\n        rotateSpeedY: number; //  speed of rotation using shift + up/down arrow keys, in degrees. Default 10.\n      } = true;\n\n  constructor(ControllerState, options: ControllerProps = {}) {\n    this.ControllerState = ControllerState;\n    this.transitionManager = new TransitionManager(ControllerState, {\n      ...options,\n      onViewStateChange: this._onTransition.bind(this),\n      onStateChange: this._setInteractionState.bind(this)\n    });\n\n    const linearTransitionProps = this.linearTransitionProps;\n    this._transition = linearTransitionProps && {\n      ...LINEAR_TRANSITION_PROPS,\n      // @ts-expect-error\n      transitionInterpolator: new LinearInterpolator({\n        transitionProps: linearTransitionProps\n      })\n    };\n\n    this.handleEvent = this.handleEvent.bind(this);\n\n    this.setProps(options);\n  }\n\n  get linearTransitionProps(): string[] | null {\n    return null;\n  }\n\n  set events(customEvents) {\n    this.toggleEvents(this._customEvents, false);\n    this.toggleEvents(customEvents, true);\n    this._customEvents = customEvents;\n    // Make sure default events are not overwritten\n    this.setProps(this.controllerStateProps);\n  }\n\n  finalize() {\n    for (const eventName in this._events) {\n      if (this._events[eventName]) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this.eventManager.off(eventName, this.handleEvent);\n      }\n    }\n    this.transitionManager.finalize();\n  }\n\n  /**\n   * Callback for events\n   * @param {hammer.Event} event\n   */\n  handleEvent(event) {\n    const {ControllerState} = this;\n    this.controllerState = new ControllerState({\n      makeViewport: this.makeViewport,\n      ...this.controllerStateProps,\n      ...this._state\n    });\n    const eventStartBlocked = this._eventStartBlocked;\n\n    switch (event.type) {\n      case 'panstart':\n        return eventStartBlocked ? false : this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return eventStartBlocked ? false : this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'tripanstart':\n        return eventStartBlocked ? false : this._onTriplePanStart(event);\n      case 'tripanmove':\n        return this._onTriplePan(event);\n      case 'tripanend':\n        return this._onTriplePanEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event) {\n    const {x, y} = this.controllerStateProps;\n    const {offsetCenter} = event;\n    return [offsetCenter.x - x, offsetCenter.y - y];\n  }\n\n  isPointInBounds(pos, event) {\n    // @ts-expect-error\n    const {width, height} = this.controllerStateProps;\n    if (event && event.handled) {\n      return false;\n    }\n\n    const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n    if (inside && event) {\n      event.stopPropagation();\n    }\n    return inside;\n  }\n\n  isFunctionKeyPressed(event) {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  isDragging() {\n    return this._interactionState.isDragging;\n  }\n\n  // When a multi-touch event ends, e.g. pinch, not all pointers are lifted at the same time.\n  // This triggers a brief `pan` event.\n  // Calling this method will temporarily disable *start events to avoid conflicting transitions.\n  blockEvents(timeout) {\n    /* global setTimeout */\n    const timer = setTimeout(() => {\n      if (this._eventStartBlocked === timer) {\n        this._eventStartBlocked = null;\n      }\n    }, timeout);\n    this._eventStartBlocked = timer;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  setProps(props) {\n    if ('onViewStateChange' in props) {\n      this.onViewStateChange = props.onViewStateChange;\n    }\n    if ('onStateChange' in props) {\n      this.onStateChange = props.onStateChange;\n    }\n    if ('makeViewport' in props) {\n      this.makeViewport = props.makeViewport;\n    }\n    if ('dragMode' in props) {\n      this.dragMode = props.dragMode;\n    }\n    this.controllerStateProps = props;\n\n    if ('eventManager' in props && this.eventManager !== props.eventManager) {\n      // EventManager has changed\n      this.eventManager = props.eventManager;\n      this._events = {};\n      this.toggleEvents(this._customEvents, true);\n    }\n\n    if (!('transitionInterpolator' in props)) {\n      // Add default transition interpolator\n      props.transitionInterpolator = this._getTransitionProps().transitionInterpolator;\n    }\n\n    this.transitionManager.processViewStateChange(props);\n\n    let {inertia} = props;\n    if (inertia === true) {\n      inertia = DEFAULT_INERTIA;\n    }\n    this.inertia = inertia;\n\n    // TODO - make sure these are not reset on every setProps\n    const {\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = props;\n\n    // Register/unregister events\n    const isInteractive = Boolean(this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && touchRotate);\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n\n  updateTransition() {\n    this.transitionManager.updateTransition();\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        // @ts-expect-error\n        if (this._events[eventName] !== enabled) {\n          // @ts-expect-error\n          this._events[eventName] = enabled;\n          if (enabled) {\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  // Private Methods\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newControllerState, extraProps = {}, interactionState = {}) {\n    const viewState = {...newControllerState.getViewportProps(), ...extraProps};\n\n    // TODO - to restore diffing, we need to include interactionState\n    const changed = this.controllerState !== newControllerState;\n    // const oldViewState = this.controllerState.getViewportProps();\n    // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);\n\n    this._state = newControllerState.getState();\n    this._setInteractionState(interactionState);\n\n    if (changed) {\n      const oldViewState = this.controllerState ? this.controllerState.getViewportProps() : null;\n      if (this.onViewStateChange) {\n        // @ts-expect-error\n        this.onViewStateChange({viewState, interactionState: this._interactionState, oldViewState});\n      }\n    }\n  }\n\n  _onTransition(params) {\n    if (this.onViewStateChange) {\n      params.interactionState = this._interactionState;\n      // @ts-expect-error\n      this.onViewStateChange(params);\n    }\n  }\n\n  _setInteractionState(newStates) {\n    Object.assign(this._interactionState, newStates);\n    if (this.onStateChange) {\n      // @ts-expect-error\n      this.onStateChange(this._interactionState);\n    }\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton;\n    if (this.invertPan || this.dragMode === 'pan') {\n      // invertPan is replaced by props.dragMode, keeping for backward compatibility\n      alternateMode = !alternateMode;\n    }\n    // @ts-expect-error\n    const newControllerState = this.controllerState[alternateMode ? 'panStart' : 'rotateStart']({\n      pos\n    });\n    this._panMove = alternateMode;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` and `panend` event.\n  _onPan(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);\n  }\n\n  _onPanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMoveEnd(event) : this._onPanRotateEnd(event);\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    // @ts-expect-error\n    const newControllerState = this.controllerState.pan({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  _onPanMoveEnd(event) {\n    const {inertia} = this;\n    if (this.dragPan && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos = [\n        pos[0] + (event.velocityX * inertia) / 2,\n        pos[1] + (event.velocityY * inertia) / 2\n      ];\n      // @ts-expect-error\n      const newControllerState = this.controllerState.pan({pos: endPos}).panEnd();\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isPanning: true\n        }\n      );\n    } else {\n      // @ts-expect-error\n      const newControllerState = this.controllerState.panEnd();\n      // @ts-expect-error\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    // @ts-expect-error\n    const newControllerState = this.controllerState.rotate({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  _onPanRotateEnd(event) {\n    const {inertia} = this;\n    if (this.dragRotate && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos = [\n        pos[0] + (event.velocityX * inertia) / 2,\n        pos[1] + (event.velocityY * inertia) / 2\n      ];\n      // @ts-expect-error\n      const newControllerState = this.controllerState.rotate({pos: endPos}).rotateEnd();\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isRotating: true\n        }\n      );\n    } else {\n      // @ts-expect-error\n      const newControllerState = this.controllerState.rotateEnd();\n      // @ts-expect-error\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n    event.preventDefault();\n\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    // @ts-expect-error\n    const {speed = 0.01, smooth = false} = this.scrollZoom;\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newControllerState = this.controllerState.zoom({pos, scale});\n    this.updateViewport(\n      newControllerState,\n      {...this._getTransitionProps({around: pos}), transitionDuration: smooth ? 250 : 1},\n      {\n        isZooming: true,\n        isPanning: true\n      }\n    );\n    return true;\n  }\n\n  _onTriplePanStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    const newControllerState = this.controllerState.rotateStart({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  _onTriplePan(event) {\n    if (!this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    pos[0] -= event.deltaX;\n\n    const newControllerState = this.controllerState.rotate({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  _onTriplePanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {inertia} = this;\n    if (this.touchRotate && inertia && event.velocityY) {\n      const pos = this.getCenter(event);\n      const endPos = [pos[0], (pos[1] += (event.velocityY * inertia) / 2)];\n      const newControllerState = this.controllerState.rotate({pos: endPos});\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isRotating: true\n        }\n      );\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const newControllerState = this.controllerState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._startPinchRotation = event.rotation;\n    this._lastPinchEvent = event;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinchmove` and `pinchend` events.\n  _onPinch(event) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    let newControllerState = this.controllerState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newControllerState = newControllerState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      newControllerState = newControllerState.rotate({\n        deltaAngleX: this._startPinchRotation - rotation\n      });\n    }\n\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: this.touchZoom,\n      isZooming: this.touchZoom,\n      isRotating: this.touchRotate\n    });\n    this._lastPinchEvent = event;\n    return true;\n  }\n\n  _onPinchEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {inertia, _lastPinchEvent} = this;\n    if (this.touchZoom && inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n      const pos = this.getCenter(event);\n      let newControllerState = this.controllerState.rotateEnd();\n      const z = Math.log2(event.scale);\n      const velocityZ =\n        (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n      const endScale = Math.pow(2, z + (velocityZ * inertia) / 2);\n      newControllerState = newControllerState.zoom({pos, scale: endScale}).zoomEnd();\n\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps({around: pos}),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isPanning: this.touchZoom,\n          isZooming: this.touchZoom,\n          isRotating: false\n        }\n      );\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false,\n        isZooming: false,\n        isRotating: false\n      });\n    }\n    this._startPinchRotation = null;\n    this._lastPinchEvent = null;\n    return true;\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newControllerState = this.controllerState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(newControllerState, this._getTransitionProps({around: pos}), {\n      isZooming: true,\n      isPanning: true\n    });\n    this.blockEvents(100);\n    return true;\n  }\n\n  // Default handler for the `keydown` event\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {zoomSpeed, moveSpeed, rotateSpeedX, rotateSpeedY} = this.keyboard;\n    const {controllerState} = this;\n    let newControllerState;\n    const interactionState = {};\n\n    switch (event.srcEvent.code) {\n      case 'Minus':\n        newControllerState = funcKey\n          ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed)\n          : controllerState.zoomOut(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'Equal':\n        newControllerState = funcKey\n          ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed)\n          : controllerState.zoomIn(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'ArrowLeft':\n        if (funcKey) {\n          newControllerState = controllerState.rotateLeft(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveLeft(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowRight':\n        if (funcKey) {\n          newControllerState = controllerState.rotateRight(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveRight(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowUp':\n        if (funcKey) {\n          newControllerState = controllerState.rotateUp(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveUp(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowDown':\n        if (funcKey) {\n          newControllerState = controllerState.rotateDown(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveDown(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      default:\n        return false;\n    }\n    this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n    return true;\n  }\n\n  _getTransitionProps(opts?) {\n    const {_transition} = this;\n\n    if (!_transition) {\n      return NO_TRANSITION_PROPS;\n    }\n\n    // Enables Transitions on double-tap and key-down events.\n    return opts\n      ? {\n        ..._transition,\n        transitionInterpolator: new LinearInterpolator({\n          ...opts,\n          transitionProps: this.linearTransitionProps,\n          makeViewport: this.controllerState.makeViewport\n        })\n      }\n      : _transition;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}