{"ast":null,"code":"import _defineProperty from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { getCompositeGLType } from '../webgl-utils/attribute-utils';\nexport function getDebugTableForProgramConfiguration(config) {\n  var table = {};\n  var header = \"Accessors for \".concat(config.id);\n\n  var _iterator = _createForOfIteratorHelper(config.attributeInfos),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var attributeInfo = _step.value;\n\n      if (attributeInfo) {\n        var glslDeclaration = getGLSLDeclaration(attributeInfo);\n        table[\"in \".concat(glslDeclaration)] = _defineProperty({}, header, JSON.stringify(attributeInfo.accessor));\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(config.varyingInfos),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var varyingInfo = _step2.value;\n\n      if (varyingInfo) {\n        var _glslDeclaration = getGLSLDeclaration(varyingInfo);\n\n        table[\"out \".concat(_glslDeclaration)] = _defineProperty({}, header, JSON.stringify(varyingInfo.accessor));\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return table;\n}\n\nfunction getGLSLDeclaration(attributeInfo) {\n  var _attributeInfo$access = attributeInfo.accessor,\n      type = _attributeInfo$access.type,\n      size = _attributeInfo$access.size;\n  var typeAndName = getCompositeGLType(type, size);\n\n  if (typeAndName) {\n    return \"\".concat(typeAndName.name, \" \").concat(attributeInfo.name);\n  }\n\n  return attributeInfo.name;\n}","map":{"version":3,"mappings":";;AAAA,SAAQA,kBAAR,QAAiC,gCAAjC;AAEA,OAAO,SAASC,oCAAT,CAA8CC,MAA9C,EAAsD;EAC3D,IAAMC,KAAK,GAAG,EAAd;EAEA,IAAMC,MAAM,2BAAoBF,MAAM,CAACG,EAA3B,CAAZ;;EAH2D,2CAK/BH,MAAM,CAACI,cALwB;EAAA;;EAAA;IAK3D,oDAAmD;MAAA,IAAxCC,aAAwC;;MACjD,IAAIA,aAAJ,EAAmB;QACjB,IAAMC,eAAe,GAAGC,kBAAkB,CAACF,aAAD,CAA1C;QACAJ,KAAK,cAAOK,eAAP,EAALL,uBAAmCC,MAAnCD,EAA4CO,IAAI,CAACC,SAALD,CAAeH,aAAa,CAACK,QAA7BF,CAA5CP;MACD;IACF;EAV0D;IAAA;EAAA;IAAA;EAAA;;EAAA,4CAYjCD,MAAM,CAACW,YAZ0B;EAAA;;EAAA;IAY3D,uDAA+C;MAAA,IAApCC,WAAoC;;MAC7C,IAAIA,WAAJ,EAAiB;QACf,IAAMN,gBAAe,GAAGC,kBAAkB,CAACK,WAAD,CAA1C;;QACAX,KAAK,eAAQK,gBAAR,EAALL,uBAAoCC,MAApCD,EAA6CO,IAAI,CAACC,SAALD,CAAeI,WAAW,CAACF,QAA3BF,CAA7CP;MACD;IACF;EAjB0D;IAAA;EAAA;IAAA;EAAA;;EAmB3D,OAAOA,KAAP;AACD;;AAED,SAASM,kBAAT,CAA4BF,aAA5B,EAA2C;EACzC,4BAAqBA,aAAa,CAACK,QAAnC;EAAA,IAAOG,IAAP,yBAAOA,IAAP;EAAA,IAAaC,IAAb,yBAAaA,IAAb;EACA,IAAMC,WAAW,GAAGjB,kBAAkB,CAACe,IAAD,EAAOC,IAAP,CAAtC;;EACA,IAAIC,WAAJ,EAAiB;IACf,iBAAUA,WAAW,CAACC,IAAtB,cAA8BX,aAAa,CAACW,IAA5C;EACD;;EACD,OAAOX,aAAa,CAACW,IAArB;AACD","names":["getCompositeGLType","getDebugTableForProgramConfiguration","config","table","header","id","attributeInfos","attributeInfo","glslDeclaration","getGLSLDeclaration","JSON","stringify","accessor","varyingInfos","varyingInfo","type","size","typeAndName","name"],"sources":["../../../src/debug/debug-program-configuration.js"],"sourcesContent":["import {getCompositeGLType} from '../webgl-utils/attribute-utils';\n\nexport function getDebugTableForProgramConfiguration(config) {\n  const table = {};\n\n  const header = `Accessors for ${config.id}`;\n\n  for (const attributeInfo of config.attributeInfos) {\n    if (attributeInfo) {\n      const glslDeclaration = getGLSLDeclaration(attributeInfo);\n      table[`in ${glslDeclaration}`] = {[header]: JSON.stringify(attributeInfo.accessor)};\n    }\n  }\n\n  for (const varyingInfo of config.varyingInfos) {\n    if (varyingInfo) {\n      const glslDeclaration = getGLSLDeclaration(varyingInfo);\n      table[`out ${glslDeclaration}`] = {[header]: JSON.stringify(varyingInfo.accessor)};\n    }\n  }\n\n  return table;\n}\n\nfunction getGLSLDeclaration(attributeInfo) {\n  const {type, size} = attributeInfo.accessor;\n  const typeAndName = getCompositeGLType(type, size);\n  if (typeAndName) {\n    return `${typeAndName.name} ${attributeInfo.name}`;\n  }\n  return attributeInfo.name;\n}\n"]},"metadata":{},"sourceType":"module"}