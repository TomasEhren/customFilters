{"ast":null,"code":"import { Layer, project32, gouraudLighting, phongLighting, picking, UNIT } from '@deck.gl/core';\nimport { Model, isWebGL2, hasFeature, FEATURES } from '@luma.gl/core';\nimport ColumnGeometry from './column-geometry';\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  diskResolution: {\n    type: 'number',\n    min: 4,\n    value: 20\n  },\n  vertices: null,\n  radius: {\n    type: 'number',\n    min: 0,\n    value: 1000\n  },\n  angle: {\n    type: 'number',\n    value: 0\n  },\n  offset: {\n    type: 'array',\n    value: [0, 0]\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusUnits: 'meters',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  material: true,\n  getColor: {\n    deprecatedFor: ['getFillColor', 'getLineColor']\n  }\n};\nexport default class ColumnLayer extends Layer {\n  getShaders() {\n    const {\n      gl\n    } = this.context;\n    const transpileToGLSL100 = !isWebGL2(gl);\n    const defines = {};\n    const useDerivatives = this.props.flatShading && hasFeature(gl, FEATURES.GLSL_DERIVATIVES);\n\n    if (useDerivatives) {\n      defines.FLAT_SHADING = 1;\n    }\n\n    return super.getShaders({\n      vs,\n      fs,\n      defines,\n      transpileToGLSL100,\n      modules: [project32, useDerivatives ? phongLighting : gouraudLighting, picking]\n    });\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getLineWidth',\n        transition: true\n      }\n    });\n  }\n\n  updateState(_ref) {\n    let {\n      props,\n      oldProps,\n      changeFlags\n    } = _ref;\n    super.updateState({\n      props,\n      oldProps,\n      changeFlags\n    });\n    const regenerateModels = changeFlags.extensionsChanged || props.flatShading !== oldProps.flatShading;\n\n    if (regenerateModels) {\n      var _this$state$model;\n\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (regenerateModels || props.diskResolution !== oldProps.diskResolution || props.vertices !== oldProps.vertices || (props.extruded || props.stroked) !== (oldProps.extruded || oldProps.stroked)) {\n      this._updateGeometry(props);\n    }\n  }\n\n  getGeometry(diskResolution, vertices, hasThinkness) {\n    const geometry = new ColumnGeometry({\n      radius: 1,\n      height: hasThinkness ? 2 : 0,\n      vertices,\n      nradial: diskResolution\n    });\n    let meanVertexDistance = 0;\n\n    if (vertices) {\n      for (let i = 0; i < diskResolution; i++) {\n        const p = vertices[i];\n        const d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n        meanVertexDistance += d / diskResolution;\n      }\n    } else {\n      meanVertexDistance = 1;\n    }\n\n    this.setState({\n      edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n    });\n    return geometry;\n  }\n\n  _getModel(gl) {\n    return new Model(gl, { ...this.getShaders(),\n      id: this.props.id,\n      isInstanced: true\n    });\n  }\n\n  _updateGeometry(_ref2) {\n    let {\n      diskResolution,\n      vertices,\n      extruded,\n      stroked\n    } = _ref2;\n    const geometry = this.getGeometry(diskResolution, vertices, extruded || stroked);\n    this.setState({\n      fillVertexCount: geometry.attributes.POSITION.value.length / 3,\n      wireframeVertexCount: geometry.indices.value.length\n    });\n    this.state.model.setProps({\n      geometry\n    });\n  }\n\n  draw(_ref3) {\n    let {\n      uniforms\n    } = _ref3;\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      radiusUnits,\n      elevationScale,\n      extruded,\n      filled,\n      stroked,\n      wireframe,\n      offset,\n      coverage,\n      radius,\n      angle\n    } = this.props;\n    const {\n      model,\n      fillVertexCount,\n      wireframeVertexCount,\n      edgeDistance\n    } = this.state;\n    model.setUniforms(uniforms).setUniforms({\n      radius,\n      angle: angle / 180 * Math.PI,\n      offset,\n      extruded,\n      coverage,\n      elevationScale,\n      edgeDistance,\n      radiusUnits: UNIT[radiusUnits],\n      widthUnits: UNIT[lineWidthUnits],\n      widthScale: lineWidthScale,\n      widthMinPixels: lineWidthMinPixels,\n      widthMaxPixels: lineWidthMaxPixels\n    });\n\n    if (extruded && wireframe) {\n      model.setProps({\n        isIndexed: true\n      });\n      model.setVertexCount(wireframeVertexCount).setDrawMode(1).setUniforms({\n        isStroke: true\n      }).draw();\n    }\n\n    if (filled) {\n      model.setProps({\n        isIndexed: false\n      });\n      model.setVertexCount(fillVertexCount).setDrawMode(5).setUniforms({\n        isStroke: false\n      }).draw();\n    }\n\n    if (!extruded && stroked) {\n      model.setProps({\n        isIndexed: false\n      });\n      model.setVertexCount(fillVertexCount * 2 / 3).setDrawMode(5).setUniforms({\n        isStroke: true\n      }).draw();\n    }\n  }\n\n}\nColumnLayer.layerName = 'ColumnLayer';\nColumnLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["Layer","project32","gouraudLighting","phongLighting","picking","UNIT","Model","isWebGL2","hasFeature","FEATURES","ColumnGeometry","vs","fs","DEFAULT_COLOR","defaultProps","diskResolution","type","min","value","vertices","radius","angle","offset","coverage","max","elevationScale","radiusUnits","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","extruded","wireframe","filled","stroked","getPosition","x","position","getFillColor","getLineColor","getLineWidth","getElevation","material","getColor","deprecatedFor","ColumnLayer","getShaders","gl","context","transpileToGLSL100","defines","useDerivatives","props","flatShading","GLSL_DERIVATIVES","FLAT_SHADING","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceElevations","instanceFillColors","colorFormat","length","normalized","defaultValue","instanceLineColors","instanceStrokeWidths","updateState","oldProps","changeFlags","regenerateModels","extensionsChanged","state","model","delete","_getModel","invalidateAll","_updateGeometry","getGeometry","hasThinkness","geometry","height","nradial","meanVertexDistance","i","p","d","Math","sqrt","setState","edgeDistance","cos","PI","id","isInstanced","fillVertexCount","attributes","POSITION","wireframeVertexCount","indices","setProps","draw","uniforms","setUniforms","widthUnits","widthScale","widthMinPixels","widthMaxPixels","isIndexed","setVertexCount","setDrawMode","isStroke","layerName"],"sources":["../../../src/column-layer/column-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, phongLighting, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, isWebGL2, hasFeature, FEATURES} from '@luma.gl/core';\nimport ColumnGeometry from './column-geometry';\n\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  diskResolution: {type: 'number', min: 4, value: 20},\n  vertices: null,\n  radius: {type: 'number', min: 0, value: 1000},\n  angle: {type: 'number', value: 0},\n  offset: {type: 'array', value: [0, 0]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  radiusUnits: 'meters',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n  getElevation: {type: 'accessor', value: 1000},\n  material: true,\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\nexport default class ColumnLayer extends Layer {\n  getShaders() {\n    const {gl} = this.context;\n    const transpileToGLSL100 = !isWebGL2(gl);\n    const defines = {};\n\n    const useDerivatives = this.props.flatShading && hasFeature(gl, FEATURES.GLSL_DERIVATIVES);\n    if (useDerivatives) {\n      defines.FLAT_SHADING = 1;\n    }\n    return super.getShaders({\n      vs,\n      fs,\n      defines,\n      transpileToGLSL100,\n      modules: [project32, useDerivatives ? phongLighting : gouraudLighting, picking]\n    });\n  }\n\n  /**\n   * DeckGL calls initializeState when GL context is available\n   * Essentially a deferred constructor\n   */\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getLineWidth',\n        transition: true\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const regenerateModels =\n      changeFlags.extensionsChanged || props.flatShading !== oldProps.flatShading;\n\n    if (regenerateModels) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (\n      regenerateModels ||\n      props.diskResolution !== oldProps.diskResolution ||\n      props.vertices !== oldProps.vertices ||\n      (props.extruded || props.stroked) !== (oldProps.extruded || oldProps.stroked)\n    ) {\n      this._updateGeometry(props);\n    }\n  }\n\n  getGeometry(diskResolution, vertices, hasThinkness) {\n    const geometry = new ColumnGeometry({\n      radius: 1,\n      height: hasThinkness ? 2 : 0,\n      vertices,\n      nradial: diskResolution\n    });\n\n    let meanVertexDistance = 0;\n    if (vertices) {\n      for (let i = 0; i < diskResolution; i++) {\n        const p = vertices[i];\n        const d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n        meanVertexDistance += d / diskResolution;\n      }\n    } else {\n      meanVertexDistance = 1;\n    }\n    this.setState({\n      edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n    });\n\n    return geometry;\n  }\n\n  _getModel(gl) {\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      isInstanced: true\n    });\n  }\n\n  _updateGeometry({diskResolution, vertices, extruded, stroked}) {\n    const geometry = this.getGeometry(diskResolution, vertices, extruded || stroked);\n\n    this.setState({\n      fillVertexCount: geometry.attributes.POSITION.value.length / 3,\n      wireframeVertexCount: geometry.indices.value.length\n    });\n\n    this.state.model.setProps({geometry});\n  }\n\n  draw({uniforms}) {\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      radiusUnits,\n      elevationScale,\n      extruded,\n      filled,\n      stroked,\n      wireframe,\n      offset,\n      coverage,\n      radius,\n      angle\n    } = this.props;\n    const {model, fillVertexCount, wireframeVertexCount, edgeDistance} = this.state;\n\n    model.setUniforms(uniforms).setUniforms({\n      radius,\n      angle: (angle / 180) * Math.PI,\n      offset,\n      extruded,\n      coverage,\n      elevationScale,\n      edgeDistance,\n      radiusUnits: UNIT[radiusUnits],\n      widthUnits: UNIT[lineWidthUnits],\n      widthScale: lineWidthScale,\n      widthMinPixels: lineWidthMinPixels,\n      widthMaxPixels: lineWidthMaxPixels\n    });\n\n    // When drawing 3d: draw wireframe first so it doesn't get occluded by depth test\n    if (extruded && wireframe) {\n      model.setProps({isIndexed: true});\n      model\n        .setVertexCount(wireframeVertexCount)\n        .setDrawMode(GL.LINES)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n    if (filled) {\n      model.setProps({isIndexed: false});\n      model\n        .setVertexCount(fillVertexCount)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: false})\n        .draw();\n    }\n    // When drawing 2d: draw fill before stroke so that the outline is always on top\n    if (!extruded && stroked) {\n      model.setProps({isIndexed: false});\n      // The width of the stroke is achieved by flattening the side of the cylinder.\n      // Skip the last 1/3 of the vertices which is the top.\n      model\n        .setVertexCount((fillVertexCount * 2) / 3)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n  }\n}\n\nColumnLayer.layerName = 'ColumnLayer';\nColumnLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}