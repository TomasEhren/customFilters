{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = memoize; // port from @deck.gl/core\n\nfunction isEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (Array.isArray(a)) {\n    // Special treatment for arrays: compare 1-level deep\n    // This is to support equality of matrix/coordinate props\n    var len = a.length;\n\n    if (!b || b.length !== len) {\n      return false;\n    }\n\n    for (var i = 0; i < len; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n/**\n * Speed up consecutive function calls by caching the result of calls with identical input\n * https://en.wikipedia.org/wiki/Memoization\n * @param {function} compute - the function to be memoized\n */\n\n\nfunction memoize(compute) {\n  var cachedArgs = {};\n  var cachedResult;\n  return function (args) {\n    for (var key in args) {\n      if (!isEqual(args[key], cachedArgs[key])) {\n        cachedResult = compute(args);\n        cachedArgs = args;\n        break;\n      }\n    }\n\n    return cachedResult;\n  };\n}","map":{"version":3,"mappings":";;;;;8BAAA;;AACA,SAASA,OAAT,CAAiBC,CAAjB,EAAyBC,CAAzB,EAAiC;EAC/B,IAAID,CAAC,KAAKC,CAAV,EAAa;IACX,OAAO,IAAP;EACD;;EACD,IAAIC,KAAK,CAACC,OAAND,CAAcF,CAAdE,CAAJ,EAAsB;IACpB;IACA;IACA,IAAME,GAAG,GAAGJ,CAAC,CAACK,MAAd;;IACA,IAAI,CAACJ,CAAD,IAAMA,CAAC,CAACI,MAAFJ,KAAaG,GAAvB,EAA4B;MAC1B,OAAO,KAAP;IACD;;IAED,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8B;MAC5B,IAAIN,CAAC,CAACM,CAAD,CAADN,KAASC,CAAC,CAACK,CAAD,CAAd,EAAmB;QACjB,OAAO,KAAP;MACD;IACF;;IACD,OAAO,IAAP;EACD;;EACD,OAAO,KAAP;AACD;AAED;;;;;;;AAKe,SAASC,OAAT,CAAiBC,OAAjB,EAAoC;EACjD,IAAIC,UAAU,GAAG,EAAjB;EACA,IAAIC,YAAJ;EAEA,OAAO,UAACC,IAAD,EAAe;IACpB,KAAK,IAAMC,GAAX,IAAkBD,IAAlB,EAAwB;MACtB,IAAI,CAACZ,OAAO,CAACY,IAAI,CAACC,GAAD,CAAL,EAAYH,UAAU,CAACG,GAAD,CAAtB,CAAZ,EAA0C;QACxCF,YAAY,GAAGF,OAAO,CAACG,IAAD,CAAtBD;QACAD,UAAU,GAAGE,IAAbF;QACA;MACD;IACF;;IACD,OAAOC,YAAP;EARF;AAUD","names":["isEqual","a","b","Array","isArray","len","length","i","memoize","compute","cachedArgs","cachedResult","args","key"],"sources":["../src/memoize.ts"],"sourcesContent":["// port from @deck.gl/core\nfunction isEqual(a: any, b: any) {\n  if (a === b) {\n    return true;\n  }\n  if (Array.isArray(a)) {\n    // Special treatment for arrays: compare 1-level deep\n    // This is to support equality of matrix/coordinate props\n    const len = a.length;\n    if (!b || b.length !== len) {\n      return false;\n    }\n\n    for (let i = 0; i < len; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\n/**\n * Speed up consecutive function calls by caching the result of calls with identical input\n * https://en.wikipedia.org/wiki/Memoization\n * @param {function} compute - the function to be memoized\n */\nexport default function memoize(compute: Function) {\n  let cachedArgs = {};\n  let cachedResult;\n\n  return (args: any) => {\n    for (const key in args) {\n      if (!isEqual(args[key], cachedArgs[key])) {\n        cachedResult = compute(args);\n        cachedArgs = args;\n        break;\n      }\n    }\n    return cachedResult;\n  };\n}\n"]},"metadata":{},"sourceType":"script"}