{"ast":null,"code":"import { deepEqual } from '../utils/deep-equal';\nimport log from '../utils/log';\nimport { flatten } from '../utils/flatten';\nexport default class ViewManager {\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {};\n    this.controllers = {};\n    this.timeline = props.timeline;\n    this._viewports = [];\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = true;\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractionStateChange: props.onInteractionStateChange\n    };\n    Object.seal(this);\n    this.setProps(props);\n  }\n\n  finalize() {\n    for (const key in this.controllers) {\n      if (this.controllers[key]) {\n        this.controllers[key].finalize();\n      }\n    }\n\n    this.controllers = {};\n  }\n\n  needsRedraw() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      clearRedrawFlags: false\n    };\n    const redraw = this._needsRedraw;\n\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    return redraw;\n  }\n\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  updateViewStates() {\n    for (const viewId in this.controllers) {\n      const controller = this.controllers[viewId];\n\n      if (controller) {\n        controller.updateTransition();\n      }\n    }\n  }\n\n  getViewports(rect) {\n    if (rect) {\n      return this._viewports.filter(viewport => viewport.containsPixel(rect));\n    }\n\n    return this._viewports;\n  }\n\n  getViews() {\n    const viewMap = {};\n    this.views.forEach(view => {\n      viewMap[view.id] = view;\n    });\n    return viewMap;\n  }\n\n  getView(viewOrViewId) {\n    return typeof viewOrViewId === 'string' ? this.views.find(view => view.id === viewOrViewId) : viewOrViewId;\n  }\n\n  getViewState(viewId) {\n    const view = this.getView(viewId);\n    const viewState = view && this.viewState[view.getViewStateId()] || this.viewState;\n    return view ? view.filterViewState(viewState) : viewState;\n  }\n\n  getViewport(viewId) {\n    return this._viewportMap[viewId];\n  }\n\n  unproject(xyz, opts) {\n    const viewports = this.getViewports();\n    const pixel = {\n      x: xyz[0],\n      y: xyz[1]\n    };\n\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n\n      if (viewport.containsPixel(pixel)) {\n        const p = xyz.slice();\n        p[0] -= viewport.x;\n        p[1] -= viewport.y;\n        return viewport.unproject(p, opts);\n      }\n    }\n\n    return null;\n  }\n\n  setProps(props) {\n    if ('views' in props) {\n      this._setViews(props.views);\n    }\n\n    if ('viewState' in props) {\n      this._setViewState(props.viewState);\n    }\n\n    if ('width' in props || 'height' in props) {\n      this._setSize(props.width, props.height);\n    }\n\n    if (!this._isUpdating) {\n      this._update();\n    }\n  }\n\n  _update() {\n    this._isUpdating = true;\n\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n\n      this._rebuildViewports();\n    }\n\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n\n      this._rebuildViewports();\n    }\n\n    this._isUpdating = false;\n  }\n\n  _setSize(width, height) {\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.setNeedsUpdate('Size changed');\n    }\n  }\n\n  _setViews(views) {\n    views = flatten(views, Boolean);\n\n    const viewsChanged = this._diffViews(views, this.views);\n\n    if (viewsChanged) {\n      this.setNeedsUpdate('views changed');\n    }\n\n    this.views = views;\n  }\n\n  _setViewState(viewState) {\n    if (viewState) {\n      const viewStateChanged = !deepEqual(viewState, this.viewState);\n\n      if (viewStateChanged) {\n        this.setNeedsUpdate('viewState changed');\n      }\n\n      this.viewState = viewState;\n    } else {\n      log.warn('missing `viewState` or `initialViewState`')();\n    }\n  }\n\n  _onViewStateChange(viewId, event) {\n    event.viewId = viewId;\n\n    if (this._eventCallbacks.onViewStateChange) {\n      this._eventCallbacks.onViewStateChange(event);\n    }\n  }\n\n  _createController(view, props) {\n    const Controller = props.type;\n    const controller = new Controller({\n      timeline: this.timeline,\n      eventManager: this._eventManager,\n      onViewStateChange: this._onViewStateChange.bind(this, props.id),\n      onStateChange: this._eventCallbacks.onInteractionStateChange,\n      makeViewport: viewState => view._getViewport(viewState, {\n        width: viewState.width,\n        height: viewState.height\n      }),\n      ...props\n    });\n    return controller;\n  }\n\n  _updateController(view, viewState, viewport, controller) {\n    let controllerProps = view.controller;\n\n    if (controllerProps) {\n      controllerProps = { ...viewState,\n        ...view.props,\n        ...controllerProps,\n        id: view.id,\n        x: viewport.x,\n        y: viewport.y,\n        width: viewport.width,\n        height: viewport.height\n      };\n\n      if (controller) {\n        controller.setProps(controllerProps);\n      } else {\n        controller = this._createController(view, controllerProps);\n      }\n\n      return controller;\n    }\n\n    return null;\n  }\n\n  _rebuildViewports() {\n    const {\n      width,\n      height,\n      views\n    } = this;\n    const oldControllers = this.controllers;\n    this._viewports = [];\n    this.controllers = {};\n    let invalidateControllers = false;\n\n    for (let i = views.length; i--;) {\n      const view = views[i];\n      const viewState = this.getViewState(view);\n      const viewport = view.makeViewport({\n        width,\n        height,\n        viewState\n      });\n      let oldController = oldControllers[view.id];\n\n      if (view.controller && !oldController) {\n        invalidateControllers = true;\n      }\n\n      if ((invalidateControllers || !view.controller) && oldController) {\n        oldController.finalize();\n        oldController = null;\n      }\n\n      this.controllers[view.id] = this._updateController(view, viewState, viewport, oldController);\n\n      this._viewports.unshift(viewport);\n    }\n\n    for (const id in oldControllers) {\n      if (oldControllers[id] && !this.controllers[id]) {\n        oldControllers[id].finalize();\n      }\n    }\n\n    this._buildViewportMap();\n  }\n\n  _buildViewportMap() {\n    this._viewportMap = {};\n\n    this._viewports.forEach(viewport => {\n      if (viewport.id) {\n        this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;\n      }\n    });\n  }\n\n  _diffViews(newViews, oldViews) {\n    if (newViews.length !== oldViews.length) {\n      return true;\n    }\n\n    return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n  }\n\n}","map":{"version":3,"mappings":"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","names":["deepEqual","log","flatten","ViewManager","constructor","props","views","width","height","viewState","controllers","timeline","_viewports","_viewportMap","_isUpdating","_needsRedraw","_needsUpdate","_eventManager","eventManager","_eventCallbacks","onViewStateChange","onInteractionStateChange","Object","seal","setProps","finalize","key","needsRedraw","opts","clearRedrawFlags","redraw","setNeedsUpdate","reason","updateViewStates","viewId","controller","updateTransition","getViewports","rect","filter","viewport","containsPixel","getViews","viewMap","forEach","view","id","getView","viewOrViewId","find","getViewState","getViewStateId","filterViewState","getViewport","unproject","xyz","viewports","pixel","x","y","i","length","p","slice","_setViews","_setViewState","_setSize","_update","_rebuildViewports","Boolean","viewsChanged","_diffViews","viewStateChanged","warn","_onViewStateChange","event","_createController","Controller","type","bind","onStateChange","makeViewport","_getViewport","_updateController","controllerProps","oldControllers","invalidateControllers","oldController","unshift","_buildViewportMap","newViews","oldViews","some","_","equals"],"sources":["../../../src/lib/view-manager.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {deepEqual} from '../utils/deep-equal';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\n\nexport default class ViewManager {\n  constructor(props = {}) {\n    // List of view descriptors, gets re-evaluated when width/height changes\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {};\n    this.controllers = {};\n    this.timeline = props.timeline;\n\n    this._viewports = []; // Generated viewports\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = true;\n\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractionStateChange: props.onInteractionStateChange\n    };\n\n    Object.seal(this);\n\n    // Init with default map viewport\n    this.setProps(props);\n  }\n\n  finalize() {\n    for (const key in this.controllers) {\n      if (this.controllers[key]) {\n        this.controllers[key].finalize();\n      }\n    }\n    this.controllers = {};\n  }\n\n  // Check if a redraw is needed\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Checks each viewport for transition updates\n  updateViewStates() {\n    for (const viewId in this.controllers) {\n      const controller = this.controllers[viewId];\n      if (controller) {\n        controller.updateTransition();\n      }\n    }\n  }\n\n  /** Get a set of viewports for a given width and height\n   * TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props\n   * @param rect (object, optional) - filter the viewports\n   *   + not provided - return all viewports\n   *   + {x, y} - only return viewports that contain this pixel\n   *   + {x, y, width, height} - only return viewports that overlap with this rectangle\n   */\n  getViewports(rect) {\n    if (rect) {\n      return this._viewports.filter(viewport => viewport.containsPixel(rect));\n    }\n    return this._viewports;\n  }\n\n  getViews() {\n    const viewMap = {};\n    this.views.forEach(view => {\n      viewMap[view.id] = view;\n    });\n    return viewMap;\n  }\n\n  // Resolves a viewId string to a View, if already a View returns it.\n  getView(viewOrViewId) {\n    return typeof viewOrViewId === 'string'\n      ? this.views.find(view => view.id === viewOrViewId)\n      : viewOrViewId;\n  }\n\n  // Returns the viewState for a specific viewId. Matches the viewState by\n  // 1. view.viewStateId\n  // 2. view.id\n  // 3. root viewState\n  // then applies the view's filter if any\n  getViewState(viewId) {\n    const view = this.getView(viewId);\n    // Backward compatibility: view state for single view\n    const viewState = (view && this.viewState[view.getViewStateId()]) || this.viewState;\n    return view ? view.filterViewState(viewState) : viewState;\n  }\n\n  getViewport(viewId) {\n    return this._viewportMap[viewId];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, opts) {\n    const viewports = this.getViewports();\n    const pixel = {x: xyz[0], y: xyz[1]};\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.containsPixel(pixel)) {\n        const p = xyz.slice();\n        p[0] -= viewport.x;\n        p[1] -= viewport.y;\n        return viewport.unproject(p, opts);\n      }\n    }\n    return null;\n  }\n\n  setProps(props) {\n    if ('views' in props) {\n      this._setViews(props.views);\n    }\n\n    // TODO - support multiple view states\n    if ('viewState' in props) {\n      this._setViewState(props.viewState);\n    }\n\n    if ('width' in props || 'height' in props) {\n      this._setSize(props.width, props.height);\n    }\n\n    // Important: avoid invoking _update() inside itself\n    // Nested updates result in unexpected side effects inside _rebuildViewports()\n    // when using auto control in pure-js\n    if (!this._isUpdating) {\n      this._update();\n    }\n  }\n\n  _update() {\n    this._isUpdating = true;\n\n    // Only rebuild viewports if the update flag is set\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    // If viewport transition(s) are triggered during viewports update, controller(s)\n    // will immediately call `onViewStateChange` which calls `viewManager.setProps` again.\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    this._isUpdating = false;\n  }\n\n  _setSize(width, height) {\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.setNeedsUpdate('Size changed');\n    }\n  }\n\n  // Update the view descriptor list and set change flag if needed\n  // Does not actually rebuild the `Viewport`s until `getViewports` is called\n  _setViews(views) {\n    views = flatten(views, Boolean);\n\n    const viewsChanged = this._diffViews(views, this.views);\n    if (viewsChanged) {\n      this.setNeedsUpdate('views changed');\n    }\n\n    this.views = views;\n  }\n\n  _setViewState(viewState) {\n    if (viewState) {\n      const viewStateChanged = !deepEqual(viewState, this.viewState);\n\n      if (viewStateChanged) {\n        this.setNeedsUpdate('viewState changed');\n      }\n\n      this.viewState = viewState;\n    } else {\n      log.warn('missing `viewState` or `initialViewState`')();\n    }\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  _onViewStateChange(viewId, event) {\n    event.viewId = viewId;\n    if (this._eventCallbacks.onViewStateChange) {\n      this._eventCallbacks.onViewStateChange(event);\n    }\n  }\n\n  _createController(view, props) {\n    const Controller = props.type;\n\n    const controller = new Controller({\n      timeline: this.timeline,\n      eventManager: this._eventManager,\n      // Set an internal callback that calls the prop callback if provided\n      onViewStateChange: this._onViewStateChange.bind(this, props.id),\n      onStateChange: this._eventCallbacks.onInteractionStateChange,\n      makeViewport: viewState =>\n        view._getViewport(viewState, {\n          width: viewState.width,\n          height: viewState.height\n        }),\n      ...props\n    });\n\n    return controller;\n  }\n\n  _updateController(view, viewState, viewport, controller) {\n    let controllerProps = view.controller;\n    if (controllerProps) {\n      controllerProps = {\n        ...viewState,\n        ...view.props,\n        ...controllerProps,\n        id: view.id,\n        x: viewport.x,\n        y: viewport.y,\n        width: viewport.width,\n        height: viewport.height\n      };\n\n      // TODO - check if view / controller type has changed, and replace the controller\n      if (controller) {\n        controller.setProps(controllerProps);\n      } else {\n        controller = this._createController(view, controllerProps);\n      }\n      return controller;\n    }\n    return null;\n  }\n\n  // Rebuilds viewports from descriptors towards a certain window size\n  _rebuildViewports() {\n    const {width, height, views} = this;\n\n    const oldControllers = this.controllers;\n    this._viewports = [];\n    this.controllers = {};\n\n    let invalidateControllers = false;\n    // Create controllers in reverse order, so that views on top receive events first\n    for (let i = views.length; i--; ) {\n      const view = views[i];\n      const viewState = this.getViewState(view);\n      const viewport = view.makeViewport({width, height, viewState});\n\n      let oldController = oldControllers[view.id];\n      if (view.controller && !oldController) {\n        // When a new controller is added, invalidate all controllers below it so that\n        // events are registered in the correct order\n        invalidateControllers = true;\n      }\n      if ((invalidateControllers || !view.controller) && oldController) {\n        // Remove and reattach invalidated controller\n        oldController.finalize();\n        oldController = null;\n      }\n\n      // Update the controller\n      this.controllers[view.id] = this._updateController(view, viewState, viewport, oldController);\n\n      this._viewports.unshift(viewport);\n    }\n\n    // Remove unused controllers\n    for (const id in oldControllers) {\n      if (oldControllers[id] && !this.controllers[id]) {\n        oldControllers[id].finalize();\n      }\n    }\n\n    this._buildViewportMap();\n  }\n\n  _buildViewportMap() {\n    // Build a view id to view index\n    this._viewportMap = {};\n    this._viewports.forEach(viewport => {\n      if (viewport.id) {\n        // TODO - issue warning if multiple viewports use same id\n        this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;\n      }\n    });\n  }\n\n  // Check if viewport array has changed, returns true if any change\n  // Note that descriptors can be the same\n  _diffViews(newViews, oldViews) {\n    if (newViews.length !== oldViews.length) {\n      return true;\n    }\n\n    return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}