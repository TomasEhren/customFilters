{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { INPUT_EVENT_TYPES } from '../constants';\nvar MOUSE_EVENTS = INPUT_EVENT_TYPES.MOUSE_EVENTS;\nvar MOVE_EVENT_TYPE = 'pointermove';\nvar OVER_EVENT_TYPE = 'pointerover';\nvar OUT_EVENT_TYPE = 'pointerout';\nvar LEAVE_EVENT_TYPE = 'pointerleave';\n\nvar MoveInput = /*#__PURE__*/function () {\n  function MoveInput(element, callback) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, MoveInput);\n\n    this.element = element;\n    this.callback = callback;\n    this.pressed = false;\n    this.options = Object.assign({\n      enable: true\n    }, options);\n    this.enableMoveEvent = this.options.enable;\n    this.enableLeaveEvent = this.options.enable;\n    this.enableOutEvent = this.options.enable;\n    this.enableOverEvent = this.options.enable;\n    this.events = MOUSE_EVENTS.concat(options.events || []);\n    this.handleEvent = this.handleEvent.bind(this);\n    this.events.forEach(function (event) {\n      return element.addEventListener(event, _this.handleEvent);\n    });\n  }\n\n  _createClass(MoveInput, [{\n    key: \"destroy\",\n    value: function destroy() {\n      var _this2 = this;\n\n      this.events.forEach(function (event) {\n        return _this2.element.removeEventListener(event, _this2.handleEvent);\n      });\n    }\n  }, {\n    key: \"enableEventType\",\n    value: function enableEventType(eventType, enabled) {\n      if (eventType === MOVE_EVENT_TYPE) {\n        this.enableMoveEvent = enabled;\n      }\n\n      if (eventType === OVER_EVENT_TYPE) {\n        this.enableOverEvent = enabled;\n      }\n\n      if (eventType === OUT_EVENT_TYPE) {\n        this.enableOutEvent = enabled;\n      }\n\n      if (eventType === LEAVE_EVENT_TYPE) {\n        this.enableLeaveEvent = enabled;\n      }\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(event) {\n      this.handleOverEvent(event);\n      this.handleOutEvent(event);\n      this.handleLeaveEvent(event);\n      this.handleMoveEvent(event);\n    }\n  }, {\n    key: \"handleOverEvent\",\n    value: function handleOverEvent(event) {\n      if (this.enableOverEvent) {\n        if (event.type === 'mouseover') {\n          this.callback({\n            type: OVER_EVENT_TYPE,\n            srcEvent: event,\n            pointerType: 'mouse',\n            target: event.target\n          });\n        }\n      }\n    }\n  }, {\n    key: \"handleOutEvent\",\n    value: function handleOutEvent(event) {\n      if (this.enableOutEvent) {\n        if (event.type === 'mouseout') {\n          this.callback({\n            type: OUT_EVENT_TYPE,\n            srcEvent: event,\n            pointerType: 'mouse',\n            target: event.target\n          });\n        }\n      }\n    }\n  }, {\n    key: \"handleLeaveEvent\",\n    value: function handleLeaveEvent(event) {\n      if (this.enableLeaveEvent) {\n        if (event.type === 'mouseleave') {\n          this.callback({\n            type: LEAVE_EVENT_TYPE,\n            srcEvent: event,\n            pointerType: 'mouse',\n            target: event.target\n          });\n        }\n      }\n    }\n  }, {\n    key: \"handleMoveEvent\",\n    value: function handleMoveEvent(event) {\n      if (this.enableMoveEvent) {\n        switch (event.type) {\n          case 'mousedown':\n            if (event.button >= 0) {\n              this.pressed = true;\n            }\n\n            break;\n\n          case 'mousemove':\n            if (event.which === 0) {\n              this.pressed = false;\n            }\n\n            if (!this.pressed) {\n              this.callback({\n                type: MOVE_EVENT_TYPE,\n                srcEvent: event,\n                pointerType: 'mouse',\n                target: event.target\n              });\n            }\n\n            break;\n\n          case 'mouseup':\n            this.pressed = false;\n            break;\n\n          default:\n        }\n      }\n    }\n  }]);\n\n  return MoveInput;\n}();\n\nexport { MoveInput as default };","map":{"version":3,"mappings":"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","names":["INPUT_EVENT_TYPES","MOUSE_EVENTS","MOVE_EVENT_TYPE","OVER_EVENT_TYPE","OUT_EVENT_TYPE","LEAVE_EVENT_TYPE","MoveInput","constructor","element","callback","options","pressed","Object","assign","enable","enableMoveEvent","enableLeaveEvent","enableOutEvent","enableOverEvent","events","concat","handleEvent","bind","forEach","event","addEventListener","destroy","removeEventListener","enableEventType","eventType","enabled","handleOverEvent","handleOutEvent","handleLeaveEvent","handleMoveEvent","type","srcEvent","pointerType","target","button","which"],"sources":["../../../src/inputs/move-input.js"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {INPUT_EVENT_TYPES} from '../constants';\n\nconst {MOUSE_EVENTS} = INPUT_EVENT_TYPES;\nconst MOVE_EVENT_TYPE = 'pointermove';\nconst OVER_EVENT_TYPE = 'pointerover';\nconst OUT_EVENT_TYPE = 'pointerout';\nconst LEAVE_EVENT_TYPE = 'pointerleave';\n\n/**\n * Hammer.js swallows 'move' events (for pointer/touch/mouse)\n * when the pointer is not down. This class sets up a handler\n * specifically for these events to work around this limitation.\n * Note that this could be extended to more intelligently handle\n * move events across input types, e.g. storing multiple simultaneous\n * pointer/touch events, calculating speed/direction, etc.\n */\nexport default class MoveInput {\n  constructor(element, callback, options = {}) {\n    this.element = element;\n    this.callback = callback;\n    this.pressed = false;\n\n    this.options = Object.assign({enable: true}, options);\n    this.enableMoveEvent = this.options.enable;\n    this.enableLeaveEvent = this.options.enable;\n    this.enableOutEvent = this.options.enable;\n    this.enableOverEvent = this.options.enable;\n\n    this.events = MOUSE_EVENTS.concat(options.events || []);\n\n    this.handleEvent = this.handleEvent.bind(this);\n    this.events.forEach(event => element.addEventListener(event, this.handleEvent));\n  }\n\n  destroy() {\n    this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n  }\n\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n  enableEventType(eventType, enabled) {\n    if (eventType === MOVE_EVENT_TYPE) {\n      this.enableMoveEvent = enabled;\n    }\n    if (eventType === OVER_EVENT_TYPE) {\n      this.enableOverEvent = enabled;\n    }\n    if (eventType === OUT_EVENT_TYPE) {\n      this.enableOutEvent = enabled;\n    }\n    if (eventType === LEAVE_EVENT_TYPE) {\n      this.enableLeaveEvent = enabled;\n    }\n  }\n\n  handleEvent(event) {\n    this.handleOverEvent(event);\n    this.handleOutEvent(event);\n    this.handleLeaveEvent(event);\n    this.handleMoveEvent(event);\n  }\n\n  handleOverEvent(event) {\n    if (this.enableOverEvent) {\n      if (event.type === 'mouseover') {\n        this.callback({\n          type: OVER_EVENT_TYPE,\n          srcEvent: event,\n          pointerType: 'mouse',\n          target: event.target\n        });\n      }\n    }\n  }\n\n  handleOutEvent(event) {\n    if (this.enableOutEvent) {\n      if (event.type === 'mouseout') {\n        this.callback({\n          type: OUT_EVENT_TYPE,\n          srcEvent: event,\n          pointerType: 'mouse',\n          target: event.target\n        });\n      }\n    }\n  }\n\n  handleLeaveEvent(event) {\n    if (this.enableLeaveEvent) {\n      if (event.type === 'mouseleave') {\n        this.callback({\n          type: LEAVE_EVENT_TYPE,\n          srcEvent: event,\n          pointerType: 'mouse',\n          target: event.target\n        });\n      }\n    }\n  }\n\n  handleMoveEvent(event) {\n    if (this.enableMoveEvent) {\n      switch (event.type) {\n        case 'mousedown':\n          if (event.button >= 0) {\n            // Button is down\n            this.pressed = true;\n          }\n          break;\n        case 'mousemove':\n          // Move events use `which` to track the button being pressed\n          if (event.which === 0) {\n            // Button is not down\n            this.pressed = false;\n          }\n          if (!this.pressed) {\n            // Drag events are emitted by hammer already\n            // we just need to emit the move event on hover\n            this.callback({\n              type: MOVE_EVENT_TYPE,\n              srcEvent: event,\n              pointerType: 'mouse',\n              target: event.target\n            });\n          }\n          break;\n        case 'mouseup':\n          this.pressed = false;\n          break;\n        default:\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}