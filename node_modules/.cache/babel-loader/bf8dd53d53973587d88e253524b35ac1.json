{"ast":null,"code":"import { calculatePickingColors } from './geojson-binary';\n\nfunction createEmptyLayerProps() {\n  return {\n    points: {},\n    lines: {},\n    polygons: {},\n    polygonsOutline: {}\n  };\n}\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\nexport function createLayerPropsFromFeatures(features, featuresDiff) {\n  const layerProps = createEmptyLayerProps();\n  const {\n    pointFeatures,\n    lineFeatures,\n    polygonFeatures,\n    polygonOutlineFeatures\n  } = features;\n  layerProps.points.data = pointFeatures;\n\n  layerProps.points._dataDiff = featuresDiff.pointFeatures && (() => featuresDiff.pointFeatures);\n\n  layerProps.points.getPosition = getCoordinates;\n  layerProps.lines.data = lineFeatures;\n\n  layerProps.lines._dataDiff = featuresDiff.lineFeatures && (() => featuresDiff.lineFeatures);\n\n  layerProps.lines.getPath = getCoordinates;\n  layerProps.polygons.data = polygonFeatures;\n\n  layerProps.polygons._dataDiff = featuresDiff.polygonFeatures && (() => featuresDiff.polygonFeatures);\n\n  layerProps.polygons.getPolygon = getCoordinates;\n  layerProps.polygonsOutline.data = polygonOutlineFeatures;\n\n  layerProps.polygonsOutline._dataDiff = featuresDiff.polygonOutlineFeatures && (() => featuresDiff.polygonOutlineFeatures);\n\n  layerProps.polygonsOutline.getPath = getCoordinates;\n  return layerProps;\n}\nexport function createLayerPropsFromBinary(geojsonBinary, encodePickingColor) {\n  const layerProps = createEmptyLayerProps();\n  const {\n    points,\n    lines,\n    polygons\n  } = geojsonBinary;\n  const customPickingColors = calculatePickingColors(geojsonBinary, encodePickingColor);\n  layerProps.points.data = {\n    length: points.positions.value.length / points.positions.size,\n    attributes: { ...points.attributes,\n      getPosition: points.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.points\n      }\n    },\n    properties: points.properties,\n    numericProps: points.numericProps,\n    featureIds: points.featureIds\n  };\n  layerProps.lines.data = {\n    length: lines.pathIndices.value.length - 1,\n    startIndices: lines.pathIndices.value,\n    attributes: { ...lines.attributes,\n      getPath: lines.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.lines\n      }\n    },\n    properties: lines.properties,\n    numericProps: lines.numericProps,\n    featureIds: lines.featureIds\n  };\n  layerProps.lines._pathType = 'open';\n  layerProps.polygons.data = {\n    length: polygons.polygonIndices.value.length - 1,\n    startIndices: polygons.polygonIndices.value,\n    attributes: { ...polygons.attributes,\n      getPolygon: polygons.positions,\n      pickingColors: {\n        size: 3,\n        value: customPickingColors.polygons\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  };\n  layerProps.polygons._normalize = false;\n\n  if (polygons.triangles) {\n    layerProps.polygons.data.attributes.indices = polygons.triangles.value;\n  }\n\n  layerProps.polygonsOutline.data = {\n    length: polygons.primitivePolygonIndices.value.length - 1,\n    startIndices: polygons.primitivePolygonIndices.value,\n    attributes: { ...polygons.attributes,\n      getPath: polygons.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.polygons\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  };\n  layerProps.polygonsOutline._pathType = 'open';\n  return layerProps;\n}","map":{"version":3,"mappings":"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","names":["calculatePickingColors","createEmptyLayerProps","points","lines","polygons","polygonsOutline","getCoordinates","f","geometry","coordinates","createLayerPropsFromFeatures","features","featuresDiff","layerProps","pointFeatures","lineFeatures","polygonFeatures","polygonOutlineFeatures","data","_dataDiff","getPosition","getPath","getPolygon","createLayerPropsFromBinary","geojsonBinary","encodePickingColor","customPickingColors","length","positions","value","size","attributes","instancePickingColors","properties","numericProps","featureIds","pathIndices","startIndices","_pathType","polygonIndices","pickingColors","_normalize","triangles","indices","primitivePolygonIndices"],"sources":["../../../src/geojson-layer/geojson-layer-props.js"],"sourcesContent":["import {calculatePickingColors} from './geojson-binary';\n\nfunction createEmptyLayerProps() {\n  return {\n    points: {},\n    lines: {},\n    polygons: {},\n    polygonsOutline: {}\n  };\n}\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\nexport function createLayerPropsFromFeatures(features, featuresDiff) {\n  const layerProps = createEmptyLayerProps();\n  const {pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures} = features;\n\n  layerProps.points.data = pointFeatures;\n  layerProps.points._dataDiff = featuresDiff.pointFeatures && (() => featuresDiff.pointFeatures);\n  layerProps.points.getPosition = getCoordinates;\n\n  layerProps.lines.data = lineFeatures;\n  layerProps.lines._dataDiff = featuresDiff.lineFeatures && (() => featuresDiff.lineFeatures);\n  layerProps.lines.getPath = getCoordinates;\n\n  layerProps.polygons.data = polygonFeatures;\n  layerProps.polygons._dataDiff =\n    featuresDiff.polygonFeatures && (() => featuresDiff.polygonFeatures);\n  layerProps.polygons.getPolygon = getCoordinates;\n\n  layerProps.polygonsOutline.data = polygonOutlineFeatures;\n  layerProps.polygonsOutline._dataDiff =\n    featuresDiff.polygonOutlineFeatures && (() => featuresDiff.polygonOutlineFeatures);\n  layerProps.polygonsOutline.getPath = getCoordinates;\n\n  return layerProps;\n}\n\nexport function createLayerPropsFromBinary(geojsonBinary, encodePickingColor) {\n  // The binary data format is documented here\n  // https://github.com/visgl/loaders.gl/blob/master/modules/gis/docs/api-reference/geojson-to-binary.md\n  // It is the default output from the `MVTLoader` and can also be obtained\n  // from GeoJSON by using the `geojsonToBinary` utility function.\n  const layerProps = createEmptyLayerProps();\n  const {points, lines, polygons} = geojsonBinary;\n\n  const customPickingColors = calculatePickingColors(geojsonBinary, encodePickingColor);\n\n  layerProps.points.data = {\n    length: points.positions.value.length / points.positions.size,\n    attributes: {\n      ...points.attributes,\n      getPosition: points.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.points\n      }\n    },\n    properties: points.properties,\n    numericProps: points.numericProps,\n    featureIds: points.featureIds\n  };\n\n  layerProps.lines.data = {\n    length: lines.pathIndices.value.length - 1,\n    startIndices: lines.pathIndices.value,\n    attributes: {\n      ...lines.attributes,\n      getPath: lines.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.lines\n      }\n    },\n    properties: lines.properties,\n    numericProps: lines.numericProps,\n    featureIds: lines.featureIds\n  };\n  layerProps.lines._pathType = 'open';\n\n  layerProps.polygons.data = {\n    length: polygons.polygonIndices.value.length - 1,\n    startIndices: polygons.polygonIndices.value,\n    attributes: {\n      ...polygons.attributes,\n      getPolygon: polygons.positions,\n      pickingColors: {\n        size: 3,\n        value: customPickingColors.polygons\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  };\n  layerProps.polygons._normalize = false;\n  if (polygons.triangles) {\n    layerProps.polygons.data.attributes.indices = polygons.triangles.value;\n  }\n\n  layerProps.polygonsOutline.data = {\n    length: polygons.primitivePolygonIndices.value.length - 1,\n    startIndices: polygons.primitivePolygonIndices.value,\n    attributes: {\n      ...polygons.attributes,\n      getPath: polygons.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.polygons\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  };\n  layerProps.polygonsOutline._pathType = 'open';\n\n  return layerProps;\n}\n"]},"metadata":{},"sourceType":"module"}