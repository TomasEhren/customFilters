{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { CompositeLayer, createIterable, log } from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nimport { replaceInRange } from '../utils';\nvar defaultLineColor = [0, 0, 0, 255];\nvar defaultFillColor = [0, 0, 0, 255];\nvar defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n  getPolygon: {\n    type: 'accessor',\n    value: function value(f) {\n      return f.polygon;\n    }\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: defaultFillColor\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: defaultLineColor\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  material: true\n};\n\nvar PolygonLayer = /*#__PURE__*/function (_CompositeLayer) {\n  _inherits(PolygonLayer, _CompositeLayer);\n\n  var _super = _createSuper(PolygonLayer);\n\n  function PolygonLayer() {\n    _classCallCheck(this, PolygonLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PolygonLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        paths: []\n      };\n\n      if (this.props.getLineDashArray) {\n        log.removed('getLineDashArray', 'PathStyleExtension')();\n      }\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var _this = this;\n\n      var oldProps = _ref.oldProps,\n          props = _ref.props,\n          changeFlags = _ref.changeFlags;\n      var geometryChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon);\n\n      if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n        var paths = this.state.paths.slice();\n        var pathsDiff = changeFlags.dataChanged.map(function (dataRange) {\n          return replaceInRange({\n            data: paths,\n            getIndex: function getIndex(p) {\n              return p.__source.index;\n            },\n            dataRange: dataRange,\n            replace: _this._getPaths(dataRange)\n          });\n        });\n        this.setState({\n          paths: paths,\n          pathsDiff: pathsDiff\n        });\n      } else if (geometryChanged) {\n        this.setState({\n          paths: this._getPaths(),\n          pathsDiff: null\n        });\n      }\n    }\n  }, {\n    key: \"_getPaths\",\n    value: function _getPaths() {\n      var dataRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _this$props = this.props,\n          data = _this$props.data,\n          getPolygon = _this$props.getPolygon,\n          positionFormat = _this$props.positionFormat,\n          _normalize = _this$props._normalize;\n      var paths = [];\n      var positionSize = positionFormat === 'XY' ? 2 : 3;\n      var startRow = dataRange.startRow,\n          endRow = dataRange.endRow;\n\n      var _createIterable = createIterable(data, startRow, endRow),\n          iterable = _createIterable.iterable,\n          objectInfo = _createIterable.objectInfo;\n\n      var _iterator = _createForOfIteratorHelper(iterable),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var object = _step.value;\n          objectInfo.index++;\n          var polygon = getPolygon(object, objectInfo);\n\n          if (_normalize) {\n            polygon = Polygon.normalize(polygon, positionSize);\n          }\n\n          var _polygon = polygon,\n              holeIndices = _polygon.holeIndices;\n          var positions = polygon.positions || polygon;\n\n          if (holeIndices) {\n            for (var i = 0; i <= holeIndices.length; i++) {\n              var path = positions.slice(holeIndices[i - 1] || 0, holeIndices[i] || positions.length);\n              paths.push(this.getSubLayerRow({\n                path: path\n              }, object, objectInfo.index));\n            }\n          } else {\n            paths.push(this.getSubLayerRow({\n              path: positions\n            }, object, objectInfo.index));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return paths;\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props2 = this.props,\n          data = _this$props2.data,\n          _dataDiff = _this$props2._dataDiff,\n          stroked = _this$props2.stroked,\n          filled = _this$props2.filled,\n          extruded = _this$props2.extruded,\n          wireframe = _this$props2.wireframe,\n          _normalize = _this$props2._normalize,\n          _windingOrder = _this$props2._windingOrder,\n          elevationScale = _this$props2.elevationScale,\n          transitions = _this$props2.transitions,\n          positionFormat = _this$props2.positionFormat;\n      var _this$props3 = this.props,\n          lineWidthUnits = _this$props3.lineWidthUnits,\n          lineWidthScale = _this$props3.lineWidthScale,\n          lineWidthMinPixels = _this$props3.lineWidthMinPixels,\n          lineWidthMaxPixels = _this$props3.lineWidthMaxPixels,\n          lineJointRounded = _this$props3.lineJointRounded,\n          lineMiterLimit = _this$props3.lineMiterLimit,\n          lineDashJustified = _this$props3.lineDashJustified;\n      var _this$props4 = this.props,\n          getFillColor = _this$props4.getFillColor,\n          getLineColor = _this$props4.getLineColor,\n          getLineWidth = _this$props4.getLineWidth,\n          getLineDashArray = _this$props4.getLineDashArray,\n          getElevation = _this$props4.getElevation,\n          getPolygon = _this$props4.getPolygon,\n          updateTriggers = _this$props4.updateTriggers,\n          material = _this$props4.material;\n      var _this$state = this.state,\n          paths = _this$state.paths,\n          pathsDiff = _this$state.pathsDiff;\n      var FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n      var StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n      var polygonLayer = this.shouldRenderSubLayer('fill', paths) && new FillLayer({\n        _dataDiff: _dataDiff,\n        extruded: extruded,\n        elevationScale: elevationScale,\n        filled: filled,\n        wireframe: wireframe,\n        _normalize: _normalize,\n        _windingOrder: _windingOrder,\n        getElevation: getElevation,\n        getFillColor: getFillColor,\n        getLineColor: extruded && wireframe ? getLineColor : defaultLineColor,\n        material: material,\n        transitions: transitions\n      }, this.getSubLayerProps({\n        id: 'fill',\n        updateTriggers: {\n          getPolygon: updateTriggers.getPolygon,\n          getElevation: updateTriggers.getElevation,\n          getFillColor: updateTriggers.getFillColor,\n          lineColors: extruded && wireframe,\n          getLineColor: updateTriggers.getLineColor\n        }\n      }), {\n        data: data,\n        positionFormat: positionFormat,\n        getPolygon: getPolygon\n      });\n      var polygonLineLayer = !extruded && stroked && this.shouldRenderSubLayer('stroke', paths) && new StrokeLayer({\n        _dataDiff: pathsDiff && function () {\n          return pathsDiff;\n        },\n        widthUnits: lineWidthUnits,\n        widthScale: lineWidthScale,\n        widthMinPixels: lineWidthMinPixels,\n        widthMaxPixels: lineWidthMaxPixels,\n        jointRounded: lineJointRounded,\n        miterLimit: lineMiterLimit,\n        dashJustified: lineDashJustified,\n        _pathType: 'loop',\n        transitions: transitions && {\n          getWidth: transitions.getLineWidth,\n          getColor: transitions.getLineColor,\n          getPath: transitions.getPolygon\n        },\n        getColor: this.getSubLayerAccessor(getLineColor),\n        getWidth: this.getSubLayerAccessor(getLineWidth),\n        getDashArray: this.getSubLayerAccessor(getLineDashArray)\n      }, this.getSubLayerProps({\n        id: 'stroke',\n        updateTriggers: {\n          getWidth: updateTriggers.getLineWidth,\n          getColor: updateTriggers.getLineColor,\n          getDashArray: updateTriggers.getLineDashArray\n        }\n      }), {\n        data: paths,\n        positionFormat: positionFormat,\n        getPath: function getPath(x) {\n          return x.path;\n        }\n      });\n      return [!extruded && polygonLayer, polygonLineLayer, extruded && polygonLayer];\n    }\n  }]);\n\n  return PolygonLayer;\n}(CompositeLayer);\n\nexport { PolygonLayer as default };\nPolygonLayer.layerName = 'PolygonLayer';\nPolygonLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["CompositeLayer","createIterable","log","SolidPolygonLayer","PathLayer","Polygon","replaceInRange","defaultLineColor","defaultFillColor","defaultProps","stroked","filled","extruded","elevationScale","wireframe","_normalize","_windingOrder","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","getPolygon","type","value","f","polygon","getFillColor","getLineColor","getLineWidth","getElevation","material","PolygonLayer","initializeState","state","paths","props","getLineDashArray","removed","updateState","oldProps","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","Array","isArray","slice","pathsDiff","map","dataRange","data","getIndex","p","__source","index","replace","_getPaths","setState","positionFormat","positionSize","startRow","endRow","iterable","objectInfo","object","normalize","holeIndices","positions","i","length","path","push","getSubLayerRow","renderLayers","_dataDiff","transitions","lineDashJustified","updateTriggers","FillLayer","getSubLayerClass","StrokeLayer","polygonLayer","shouldRenderSubLayer","getSubLayerProps","id","lineColors","polygonLineLayer","widthUnits","widthScale","widthMinPixels","widthMaxPixels","jointRounded","miterLimit","dashJustified","_pathType","getWidth","getColor","getPath","getSubLayerAccessor","getDashArray","x","layerName"],"sources":["../../../src/polygon-layer/polygon-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, createIterable, log} from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nimport {replaceInRange} from '../utils';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point, line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\nexport default class PolygonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      paths: []\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n      const paths = this.state.paths.slice();\n      const pathsDiff = changeFlags.dataChanged.map(dataRange =>\n        replaceInRange({\n          data: paths,\n          getIndex: p => p.__source.index,\n          dataRange,\n          replace: this._getPaths(dataRange)\n        })\n      );\n      this.setState({paths, pathsDiff});\n    } else if (geometryChanged) {\n      this.setState({\n        paths: this._getPaths(),\n        pathsDiff: null\n      });\n    }\n  }\n\n  _getPaths(dataRange = {}) {\n    const {data, getPolygon, positionFormat, _normalize} = this.props;\n    const paths = [];\n    const positionSize = positionFormat === 'XY' ? 2 : 3;\n    const {startRow, endRow} = dataRange;\n\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      let polygon = getPolygon(object, objectInfo);\n      if (_normalize) {\n        polygon = Polygon.normalize(polygon, positionSize);\n      }\n      const {holeIndices} = polygon;\n      const positions = polygon.positions || polygon;\n\n      if (holeIndices) {\n        // split the positions array into `holeIndices.length + 1` rings\n        // holeIndices[-1] falls back to 0\n        // holeIndices[holeIndices.length] falls back to positions.length\n        for (let i = 0; i <= holeIndices.length; i++) {\n          const path = positions.slice(holeIndices[i - 1] || 0, holeIndices[i] || positions.length);\n          paths.push(this.getSubLayerRow({path}, object, objectInfo.index));\n        }\n      } else {\n        paths.push(this.getSubLayerRow({path: positions}, object, objectInfo.index));\n      }\n    }\n    return paths;\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    // Layer composition props\n    const {\n      data,\n      _dataDiff,\n      stroked,\n      filled,\n      extruded,\n      wireframe,\n      _normalize,\n      _windingOrder,\n      elevationScale,\n      transitions,\n      positionFormat\n    } = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      material\n    } = this.props;\n\n    const {paths, pathsDiff} = this.state;\n\n    const FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n    const StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n\n    // Filled Polygon Layer\n    const polygonLayer =\n      this.shouldRenderSubLayer('fill', paths) &&\n      new FillLayer(\n        {\n          _dataDiff,\n          extruded,\n          elevationScale,\n\n          filled,\n          wireframe,\n          _normalize,\n          _windingOrder,\n\n          getElevation,\n          getFillColor,\n          getLineColor: extruded && wireframe ? getLineColor : defaultLineColor,\n\n          material,\n          transitions\n        },\n        this.getSubLayerProps({\n          id: 'fill',\n          updateTriggers: {\n            getPolygon: updateTriggers.getPolygon,\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            // using a legacy API to invalid lineColor attributes\n            // if (extruded && wireframe) has changed\n            lineColors: extruded && wireframe,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data,\n          positionFormat,\n          getPolygon\n        }\n      );\n\n    // Polygon line layer\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('stroke', paths) &&\n      new StrokeLayer(\n        {\n          _dataDiff: pathsDiff && (() => pathsDiff),\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          jointRounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          // Already normalized\n          _pathType: 'loop',\n\n          transitions: transitions && {\n            getWidth: transitions.getLineWidth,\n            getColor: transitions.getLineColor,\n            getPath: transitions.getPolygon\n          },\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray)\n        },\n        this.getSubLayerProps({\n          id: 'stroke',\n          updateTriggers: {\n            getWidth: updateTriggers.getLineWidth,\n            getColor: updateTriggers.getLineColor,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: paths,\n          positionFormat,\n          getPath: x => x.path\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonLayer,\n      polygonLineLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n\nPolygonLayer.layerName = 'PolygonLayer';\nPolygonLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}