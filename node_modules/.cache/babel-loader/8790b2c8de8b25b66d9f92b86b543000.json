{"ast":null,"code":"import { log } from '@deck.gl/core';\nexport function getGeojsonFeatures(geojson) {\n  if (Array.isArray(geojson)) {\n    return geojson;\n  }\n\n  log.assert(geojson.type, 'GeoJSON does not have type');\n\n  switch (geojson.type) {\n    case 'Feature':\n      return [geojson];\n\n    case 'FeatureCollection':\n      log.assert(Array.isArray(geojson.features), 'GeoJSON does not have features array');\n      return geojson.features;\n\n    default:\n      return [{\n        geometry: geojson\n      }];\n  }\n}\nexport function separateGeojsonFeatures(features, wrapFeature) {\n  var dataRange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var separated = {\n    pointFeatures: [],\n    lineFeatures: [],\n    polygonFeatures: [],\n    polygonOutlineFeatures: []\n  };\n  var _dataRange$startRow = dataRange.startRow,\n      startRow = _dataRange$startRow === void 0 ? 0 : _dataRange$startRow,\n      _dataRange$endRow = dataRange.endRow,\n      endRow = _dataRange$endRow === void 0 ? features.length : _dataRange$endRow;\n\n  for (var featureIndex = startRow; featureIndex < endRow; featureIndex++) {\n    var feature = features[featureIndex];\n    log.assert(feature && feature.geometry, 'GeoJSON does not have geometry');\n    var geometry = feature.geometry;\n\n    if (geometry.type === 'GeometryCollection') {\n      log.assert(Array.isArray(geometry.geometries), 'GeoJSON does not have geometries array');\n      var geometries = geometry.geometries;\n\n      for (var i = 0; i < geometries.length; i++) {\n        var subGeometry = geometries[i];\n        separateGeometry(subGeometry, separated, wrapFeature, feature, featureIndex);\n      }\n    } else {\n      separateGeometry(geometry, separated, wrapFeature, feature, featureIndex);\n    }\n  }\n\n  return separated;\n}\n\nfunction separateGeometry(geometry, separated, wrapFeature, sourceFeature, sourceFeatureIndex) {\n  var type = geometry.type,\n      coordinates = geometry.coordinates;\n  var pointFeatures = separated.pointFeatures,\n      lineFeatures = separated.lineFeatures,\n      polygonFeatures = separated.polygonFeatures,\n      polygonOutlineFeatures = separated.polygonOutlineFeatures;\n\n  if (!validateGeometry(type, coordinates)) {\n    log.warn(\"\".concat(type, \" coordinates are malformed\"))();\n    return;\n  }\n\n  switch (type) {\n    case 'Point':\n      pointFeatures.push(wrapFeature({\n        geometry: geometry\n      }, sourceFeature, sourceFeatureIndex));\n      break;\n\n    case 'MultiPoint':\n      coordinates.forEach(function (point) {\n        pointFeatures.push(wrapFeature({\n          geometry: {\n            type: 'Point',\n            coordinates: point\n          }\n        }, sourceFeature, sourceFeatureIndex));\n      });\n      break;\n\n    case 'LineString':\n      lineFeatures.push(wrapFeature({\n        geometry: geometry\n      }, sourceFeature, sourceFeatureIndex));\n      break;\n\n    case 'MultiLineString':\n      coordinates.forEach(function (path) {\n        lineFeatures.push(wrapFeature({\n          geometry: {\n            type: 'LineString',\n            coordinates: path\n          }\n        }, sourceFeature, sourceFeatureIndex));\n      });\n      break;\n\n    case 'Polygon':\n      polygonFeatures.push(wrapFeature({\n        geometry: geometry\n      }, sourceFeature, sourceFeatureIndex));\n      coordinates.forEach(function (path) {\n        polygonOutlineFeatures.push(wrapFeature({\n          geometry: {\n            type: 'LineString',\n            coordinates: path\n          }\n        }, sourceFeature, sourceFeatureIndex));\n      });\n      break;\n\n    case 'MultiPolygon':\n      coordinates.forEach(function (polygon) {\n        polygonFeatures.push(wrapFeature({\n          geometry: {\n            type: 'Polygon',\n            coordinates: polygon\n          }\n        }, sourceFeature, sourceFeatureIndex));\n        polygon.forEach(function (path) {\n          polygonOutlineFeatures.push(wrapFeature({\n            geometry: {\n              type: 'LineString',\n              coordinates: path\n            }\n          }, sourceFeature, sourceFeatureIndex));\n        });\n      });\n      break;\n\n    default:\n  }\n}\n\nvar COORDINATE_NEST_LEVEL = {\n  Point: 1,\n  MultiPoint: 2,\n  LineString: 2,\n  MultiLineString: 3,\n  Polygon: 3,\n  MultiPolygon: 4\n};\nexport function validateGeometry(type, coordinates) {\n  var nestLevel = COORDINATE_NEST_LEVEL[type];\n  log.assert(nestLevel, \"Unknown GeoJSON type \".concat(type));\n\n  while (coordinates && --nestLevel > 0) {\n    coordinates = coordinates[0];\n  }\n\n  return coordinates && Number.isFinite(coordinates[0]);\n}","map":{"version":3,"mappings":"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","names":["log","getGeojsonFeatures","geojson","Array","isArray","assert","type","features","geometry","separateGeojsonFeatures","wrapFeature","dataRange","separated","pointFeatures","lineFeatures","polygonFeatures","polygonOutlineFeatures","startRow","endRow","length","featureIndex","feature","geometries","i","subGeometry","separateGeometry","sourceFeature","sourceFeatureIndex","coordinates","validateGeometry","warn","push","forEach","point","path","polygon","COORDINATE_NEST_LEVEL","Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","nestLevel","Number","isFinite"],"sources":["../../../src/geojson-layer/geojson.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {log} from '@deck.gl/core';\n\n/**\n * \"Normalizes\" complete or partial GeoJSON data into iterable list of features\n * Can accept GeoJSON geometry or \"Feature\", \"FeatureCollection\" in addition\n * to plain arrays and iterables.\n * Works by extracting the feature array or wrapping single objects in an array,\n * so that subsequent code can simply iterate over features.\n *\n * @param {object} geojson - geojson data\n * @param {Object|Array} data - geojson object (FeatureCollection, Feature or\n *  Geometry) or array of features\n * @return {Array|\"iteratable\"} - iterable list of features\n */\nexport function getGeojsonFeatures(geojson) {\n  // If array, assume this is a list of features\n  if (Array.isArray(geojson)) {\n    return geojson;\n  }\n\n  log.assert(geojson.type, 'GeoJSON does not have type');\n\n  switch (geojson.type) {\n    case 'Feature':\n      // Wrap the feature in a 'Features' array\n      return [geojson];\n    case 'FeatureCollection':\n      // Just return the 'Features' array from the collection\n      log.assert(Array.isArray(geojson.features), 'GeoJSON does not have features array');\n      return geojson.features;\n    default:\n      // Assume it's a geometry, we'll check type in separateGeojsonFeatures\n      // Wrap the geometry object in a 'Feature' object and wrap in an array\n      return [{geometry: geojson}];\n  }\n}\n\n// Linearize\nexport function separateGeojsonFeatures(features, wrapFeature, dataRange = {}) {\n  const separated = {\n    pointFeatures: [],\n    lineFeatures: [],\n    polygonFeatures: [],\n    polygonOutlineFeatures: []\n  };\n  const {startRow = 0, endRow = features.length} = dataRange;\n\n  for (let featureIndex = startRow; featureIndex < endRow; featureIndex++) {\n    const feature = features[featureIndex];\n\n    log.assert(feature && feature.geometry, 'GeoJSON does not have geometry');\n\n    const {geometry} = feature;\n\n    if (geometry.type === 'GeometryCollection') {\n      log.assert(Array.isArray(geometry.geometries), 'GeoJSON does not have geometries array');\n      const {geometries} = geometry;\n      for (let i = 0; i < geometries.length; i++) {\n        const subGeometry = geometries[i];\n        separateGeometry(subGeometry, separated, wrapFeature, feature, featureIndex);\n      }\n    } else {\n      separateGeometry(geometry, separated, wrapFeature, feature, featureIndex);\n    }\n  }\n\n  return separated;\n}\n\nfunction separateGeometry(geometry, separated, wrapFeature, sourceFeature, sourceFeatureIndex) {\n  const {type, coordinates} = geometry;\n  const {pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures} = separated;\n\n  if (!validateGeometry(type, coordinates)) {\n    // Avoid hard failure if some features are malformed\n    log.warn(`${type} coordinates are malformed`)();\n    return;\n  }\n\n  // Split each feature, but keep track of the source feature and index (for Multi* geometries)\n  switch (type) {\n    case 'Point':\n      pointFeatures.push(\n        wrapFeature(\n          {\n            geometry\n          },\n          sourceFeature,\n          sourceFeatureIndex\n        )\n      );\n      break;\n    case 'MultiPoint':\n      coordinates.forEach(point => {\n        pointFeatures.push(\n          wrapFeature(\n            {\n              geometry: {type: 'Point', coordinates: point}\n            },\n            sourceFeature,\n            sourceFeatureIndex\n          )\n        );\n      });\n      break;\n    case 'LineString':\n      lineFeatures.push(\n        wrapFeature(\n          {\n            geometry\n          },\n          sourceFeature,\n          sourceFeatureIndex\n        )\n      );\n      break;\n    case 'MultiLineString':\n      // Break multilinestrings into multiple lines\n      coordinates.forEach(path => {\n        lineFeatures.push(\n          wrapFeature(\n            {\n              geometry: {type: 'LineString', coordinates: path}\n            },\n            sourceFeature,\n            sourceFeatureIndex\n          )\n        );\n      });\n      break;\n    case 'Polygon':\n      polygonFeatures.push(\n        wrapFeature(\n          {\n            geometry\n          },\n          sourceFeature,\n          sourceFeatureIndex\n        )\n      );\n      // Break polygon into multiple lines\n      coordinates.forEach(path => {\n        polygonOutlineFeatures.push(\n          wrapFeature(\n            {\n              geometry: {type: 'LineString', coordinates: path}\n            },\n            sourceFeature,\n            sourceFeatureIndex\n          )\n        );\n      });\n      break;\n    case 'MultiPolygon':\n      // Break multipolygons into multiple polygons\n      coordinates.forEach(polygon => {\n        polygonFeatures.push(\n          wrapFeature(\n            {\n              geometry: {type: 'Polygon', coordinates: polygon}\n            },\n            sourceFeature,\n            sourceFeatureIndex\n          )\n        );\n        // Break polygon into multiple lines\n        polygon.forEach(path => {\n          polygonOutlineFeatures.push(\n            wrapFeature(\n              {\n                geometry: {type: 'LineString', coordinates: path}\n              },\n              sourceFeature,\n              sourceFeatureIndex\n            )\n          );\n        });\n      });\n      break;\n    default:\n  }\n}\n\n/**\n * Simple GeoJSON validation util. For perf reasons we do not validate against the full spec,\n * only the following:\n   - geometry.type is supported\n   - geometry.coordinate has correct nesting level\n */\nconst COORDINATE_NEST_LEVEL = {\n  Point: 1,\n  MultiPoint: 2,\n  LineString: 2,\n  MultiLineString: 3,\n  Polygon: 3,\n  MultiPolygon: 4\n};\n\nexport function validateGeometry(type, coordinates) {\n  let nestLevel = COORDINATE_NEST_LEVEL[type];\n\n  log.assert(nestLevel, `Unknown GeoJSON type ${type}`);\n\n  while (coordinates && --nestLevel > 0) {\n    coordinates = coordinates[0];\n  }\n\n  return coordinates && Number.isFinite(coordinates[0]);\n}\n"]},"metadata":{},"sourceType":"module"}