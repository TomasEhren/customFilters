{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Layer, project32, gouraudLighting, picking, COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { Model, Geometry, hasFeatures, FEATURES } from '@luma.gl/core';\nimport PolygonTesselator from './polygon-tesselator';\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  getPolygon: {\n    type: 'accessor',\n    value: function value(f) {\n      return f.polygon;\n    }\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  material: true\n};\nvar ATTRIBUTE_TRANSITION = {\n  enter: function enter(value, chunk) {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nvar SolidPolygonLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(SolidPolygonLayer, _Layer);\n\n  var _super = _createSuper(SolidPolygonLayer);\n\n  function SolidPolygonLayer() {\n    _classCallCheck(this, SolidPolygonLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SolidPolygonLayer, [{\n    key: \"getShaders\",\n    value: function getShaders(type) {\n      return _get(_getPrototypeOf(SolidPolygonLayer.prototype), \"getShaders\", this).call(this, {\n        vs: type === 'top' ? vsTop : vsSide,\n        fs: fs,\n        defines: {\n          RING_WINDING_ORDER_CW: !this.props._normalize && this.props._windingOrder === 'CCW' ? 0 : 1\n        },\n        modules: [project32, gouraudLighting, picking]\n      });\n    }\n  }, {\n    key: \"wrapLongitude\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var _this = this;\n\n      var _this$context = this.context,\n          gl = _this$context.gl,\n          viewport = _this$context.viewport;\n      var coordinateSystem = this.props.coordinateSystem;\n\n      if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n        coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n      }\n\n      this.setState({\n        numInstances: 0,\n        polygonTesselator: new PolygonTesselator({\n          preproject: coordinateSystem === COORDINATE_SYSTEM.LNGLAT && viewport.projectFlat,\n          fp64: this.use64bitPositions(),\n          IndexType: !gl || hasFeatures(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n        })\n      });\n      var attributeManager = this.getAttributeManager();\n      var noAlloc = true;\n      attributeManager.remove(['instancePickingColors']);\n      attributeManager.add({\n        indices: {\n          size: 1,\n          isIndexed: true,\n          update: this.calculateIndices,\n          noAlloc: noAlloc\n        },\n        positions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: ATTRIBUTE_TRANSITION,\n          accessor: 'getPolygon',\n          update: this.calculatePositions,\n          noAlloc: noAlloc,\n          shaderAttributes: {\n            positions: {\n              vertexOffset: 0,\n              divisor: 0\n            },\n            instancePositions: {\n              vertexOffset: 0,\n              divisor: 1\n            },\n            nextPositions: {\n              vertexOffset: 1,\n              divisor: 1\n            }\n          }\n        },\n        vertexValid: {\n          size: 1,\n          divisor: 1,\n          type: 5121,\n          update: this.calculateVertexValid,\n          noAlloc: noAlloc\n        },\n        elevations: {\n          size: 1,\n          transition: ATTRIBUTE_TRANSITION,\n          accessor: 'getElevation',\n          shaderAttributes: {\n            elevations: {\n              divisor: 0\n            },\n            instanceElevations: {\n              divisor: 1\n            }\n          }\n        },\n        fillColors: {\n          alias: 'colors',\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: ATTRIBUTE_TRANSITION,\n          accessor: 'getFillColor',\n          defaultValue: DEFAULT_COLOR,\n          shaderAttributes: {\n            fillColors: {\n              divisor: 0\n            },\n            instanceFillColors: {\n              divisor: 1\n            }\n          }\n        },\n        lineColors: {\n          alias: 'colors',\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: ATTRIBUTE_TRANSITION,\n          accessor: 'getLineColor',\n          defaultValue: DEFAULT_COLOR,\n          shaderAttributes: {\n            lineColors: {\n              divisor: 0\n            },\n            instanceLineColors: {\n              divisor: 1\n            }\n          }\n        },\n        pickingColors: {\n          size: 3,\n          type: 5121,\n          accessor: function accessor(object, _ref) {\n            var index = _ref.index,\n                value = _ref.target;\n            return _this.encodePickingColor(object && object.__source ? object.__source.index : index, value);\n          },\n          shaderAttributes: {\n            pickingColors: {\n              divisor: 0\n            },\n            instancePickingColors: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(params) {\n      var info = _get(_getPrototypeOf(SolidPolygonLayer.prototype), \"getPickingInfo\", this).call(this, params);\n\n      var index = info.index;\n      var data = this.props.data;\n\n      if (data[0] && data[0].__source) {\n        info.object = data.find(function (d) {\n          return d.__source.index === index;\n        });\n      }\n\n      return info;\n    }\n  }, {\n    key: \"disablePickingIndex\",\n    value: function disablePickingIndex(objectIndex) {\n      var data = this.props.data;\n\n      if (data[0] && data[0].__source) {\n        for (var i = 0; i < data.length; i++) {\n          if (data[i].__source.index === objectIndex) {\n            this._disablePickingIndex(i);\n          }\n        }\n      } else {\n        this._disablePickingIndex(objectIndex);\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var _this$props = this.props,\n          extruded = _this$props.extruded,\n          filled = _this$props.filled,\n          wireframe = _this$props.wireframe,\n          elevationScale = _this$props.elevationScale;\n      var _this$state = this.state,\n          topModel = _this$state.topModel,\n          sideModel = _this$state.sideModel,\n          polygonTesselator = _this$state.polygonTesselator;\n\n      var renderUniforms = _objectSpread(_objectSpread({}, uniforms), {}, {\n        extruded: Boolean(extruded),\n        elevationScale: elevationScale\n      });\n\n      if (sideModel) {\n        sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n        sideModel.setUniforms(renderUniforms);\n\n        if (wireframe) {\n          sideModel.setDrawMode(3);\n          sideModel.setUniforms({\n            isWireframe: true\n          }).draw();\n        }\n\n        if (filled) {\n          sideModel.setDrawMode(6);\n          sideModel.setUniforms({\n            isWireframe: false\n          }).draw();\n        }\n      }\n\n      if (topModel) {\n        topModel.setVertexCount(polygonTesselator.vertexCount);\n        topModel.setUniforms(renderUniforms).draw();\n      }\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(updateParams) {\n      _get(_getPrototypeOf(SolidPolygonLayer.prototype), \"updateState\", this).call(this, updateParams);\n\n      this.updateGeometry(updateParams);\n      var props = updateParams.props,\n          oldProps = updateParams.oldProps,\n          changeFlags = updateParams.changeFlags;\n      var attributeManager = this.getAttributeManager();\n      var regenerateModels = changeFlags.extensionsChanged || props.filled !== oldProps.filled || props.extruded !== oldProps.extruded;\n\n      if (regenerateModels) {\n        var _this$state$models;\n\n        (_this$state$models = this.state.models) === null || _this$state$models === void 0 ? void 0 : _this$state$models.forEach(function (model) {\n          return model.delete();\n        });\n        this.setState(this._getModels(this.context.gl));\n        attributeManager.invalidateAll();\n      }\n    }\n  }, {\n    key: \"updateGeometry\",\n    value: function updateGeometry(_ref3) {\n      var props = _ref3.props,\n          oldProps = _ref3.oldProps,\n          changeFlags = _ref3.changeFlags;\n      var geometryConfigChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon);\n\n      if (geometryConfigChanged) {\n        var polygonTesselator = this.state.polygonTesselator;\n        var buffers = props.data.attributes || {};\n        polygonTesselator.updateGeometry({\n          data: props.data,\n          normalize: props._normalize,\n          geometryBuffer: buffers.getPolygon,\n          buffers: buffers,\n          getGeometry: props.getPolygon,\n          positionFormat: props.positionFormat,\n          wrapLongitude: props.wrapLongitude,\n          resolution: this.context.viewport.resolution,\n          fp64: this.use64bitPositions(),\n          dataChanged: changeFlags.dataChanged\n        });\n        this.setState({\n          numInstances: polygonTesselator.instanceCount,\n          startIndices: polygonTesselator.vertexStarts\n        });\n\n        if (!changeFlags.dataChanged) {\n          this.getAttributeManager().invalidateAll();\n        }\n      }\n    }\n  }, {\n    key: \"_getModels\",\n    value: function _getModels(gl) {\n      var _this$props2 = this.props,\n          id = _this$props2.id,\n          filled = _this$props2.filled,\n          extruded = _this$props2.extruded;\n      var topModel;\n      var sideModel;\n\n      if (filled) {\n        var shaders = this.getShaders('top');\n        shaders.defines.NON_INSTANCED_MODEL = 1;\n        topModel = new Model(gl, _objectSpread(_objectSpread({}, shaders), {}, {\n          id: \"\".concat(id, \"-top\"),\n          drawMode: 4,\n          attributes: {\n            vertexPositions: new Float32Array([0, 1])\n          },\n          uniforms: {\n            isWireframe: false,\n            isSideVertex: false\n          },\n          vertexCount: 0,\n          isIndexed: true\n        }));\n      }\n\n      if (extruded) {\n        sideModel = new Model(gl, _objectSpread(_objectSpread({}, this.getShaders('side')), {}, {\n          id: \"\".concat(id, \"-side\"),\n          geometry: new Geometry({\n            drawMode: 1,\n            vertexCount: 4,\n            attributes: {\n              vertexPositions: {\n                size: 2,\n                value: new Float32Array([1, 0, 0, 0, 0, 1, 1, 1])\n              }\n            }\n          }),\n          instanceCount: 0,\n          isInstanced: 1\n        }));\n        sideModel.userData.excludeAttributes = {\n          indices: true\n        };\n      }\n\n      return {\n        models: [sideModel, topModel].filter(Boolean),\n        topModel: topModel,\n        sideModel: sideModel\n      };\n    }\n  }, {\n    key: \"calculateIndices\",\n    value: function calculateIndices(attribute) {\n      var polygonTesselator = this.state.polygonTesselator;\n      attribute.startIndices = polygonTesselator.indexStarts;\n      attribute.value = polygonTesselator.get('indices');\n    }\n  }, {\n    key: \"calculatePositions\",\n    value: function calculatePositions(attribute) {\n      var polygonTesselator = this.state.polygonTesselator;\n      attribute.startIndices = polygonTesselator.vertexStarts;\n      attribute.value = polygonTesselator.get('positions');\n    }\n  }, {\n    key: \"calculateVertexValid\",\n    value: function calculateVertexValid(attribute) {\n      attribute.value = this.state.polygonTesselator.get('vertexValid');\n    }\n  }]);\n\n  return SolidPolygonLayer;\n}(Layer);\n\nexport { SolidPolygonLayer as default };\nSolidPolygonLayer.layerName = 'SolidPolygonLayer';\nSolidPolygonLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["Layer","project32","gouraudLighting","picking","COORDINATE_SYSTEM","Model","Geometry","hasFeatures","FEATURES","PolygonTesselator","vsTop","vsSide","fs","DEFAULT_COLOR","defaultProps","filled","extruded","wireframe","_normalize","_windingOrder","elevationScale","type","min","value","getPolygon","f","polygon","getElevation","getFillColor","getLineColor","material","ATTRIBUTE_TRANSITION","enter","chunk","length","subarray","SolidPolygonLayer","getShaders","vs","defines","RING_WINDING_ORDER_CW","props","modules","initializeState","context","gl","viewport","coordinateSystem","isGeospatial","DEFAULT","LNGLAT","setState","numInstances","polygonTesselator","preproject","projectFlat","fp64","use64bitPositions","IndexType","ELEMENT_INDEX_UINT32","Uint32Array","Uint16Array","attributeManager","getAttributeManager","noAlloc","remove","add","indices","size","isIndexed","update","calculateIndices","positions","transition","accessor","calculatePositions","shaderAttributes","vertexOffset","divisor","instancePositions","nextPositions","vertexValid","calculateVertexValid","elevations","instanceElevations","fillColors","alias","colorFormat","normalized","defaultValue","instanceFillColors","lineColors","instanceLineColors","pickingColors","object","index","target","encodePickingColor","__source","instancePickingColors","getPickingInfo","params","info","data","find","d","disablePickingIndex","objectIndex","i","_disablePickingIndex","draw","uniforms","state","topModel","sideModel","renderUniforms","Boolean","setInstanceCount","instanceCount","setUniforms","setDrawMode","isWireframe","setVertexCount","vertexCount","updateState","updateParams","updateGeometry","oldProps","changeFlags","regenerateModels","extensionsChanged","models","forEach","model","delete","_getModels","invalidateAll","geometryConfigChanged","dataChanged","updateTriggersChanged","all","buffers","attributes","normalize","geometryBuffer","getGeometry","positionFormat","wrapLongitude","resolution","startIndices","vertexStarts","id","shaders","NON_INSTANCED_MODEL","drawMode","vertexPositions","Float32Array","isSideVertex","geometry","isInstanced","userData","excludeAttributes","filter","attribute","indexStarts","get","layerName"],"sources":["../../../src/solid-polygon-layer/solid-polygon-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, hasFeatures, FEATURES} from '@luma.gl/core';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport PolygonTesselator from './polygon-tesselator';\n\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  filled: true,\n  // Whether to extrude\n  extruded: false,\n  // Whether to draw a GL.LINES wireframe of the polygon\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n\n  // elevation multiplier\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // Accessor for polygon geometry\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Accessor for extrusion height\n  getElevation: {type: 'accessor', value: 1000},\n  // Accessor for colors\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // Optional settings for 'lighting' shader module\n  material: true\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class SolidPolygonLayer extends Layer {\n  getShaders(type) {\n    return super.getShaders({\n      vs: type === 'top' ? vsTop : vsSide,\n      fs,\n      defines: {\n        RING_WINDING_ORDER_CW: !this.props._normalize && this.props._windingOrder === 'CCW' ? 0 : 1\n      },\n      modules: [project32, gouraudLighting, picking]\n    });\n  }\n\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const {gl, viewport} = this.context;\n    let {coordinateSystem} = this.props;\n    if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n      coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n    }\n\n    this.setState({\n      numInstances: 0,\n      polygonTesselator: new PolygonTesselator({\n        // Lnglat coordinates are usually projected non-linearly, which affects tesselation results\n        // Provide a preproject function if the coordinates are in lnglat\n        preproject: coordinateSystem === COORDINATE_SYSTEM.LNGLAT && viewport.projectFlat,\n        fp64: this.use64bitPositions(),\n        IndexType: !gl || hasFeatures(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n      })\n    });\n\n    const attributeManager = this.getAttributeManager();\n    const noAlloc = true;\n\n    attributeManager.remove(['instancePickingColors']);\n\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {size: 1, isIndexed: true, update: this.calculateIndices, noAlloc},\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          positions: {\n            vertexOffset: 0,\n            divisor: 0\n          },\n          instancePositions: {\n            vertexOffset: 0,\n            divisor: 1\n          },\n          nextPositions: {\n            vertexOffset: 1,\n            divisor: 1\n          }\n        }\n      },\n      vertexValid: {\n        size: 1,\n        divisor: 1,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        shaderAttributes: {\n          elevations: {\n            divisor: 0\n          },\n          instanceElevations: {\n            divisor: 1\n          }\n        }\n      },\n      fillColors: {\n        alias: 'colors',\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          fillColors: {\n            divisor: 0\n          },\n          instanceFillColors: {\n            divisor: 1\n          }\n        }\n      },\n      lineColors: {\n        alias: 'colors',\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          lineColors: {\n            divisor: 0\n          },\n          instanceLineColors: {\n            divisor: 1\n          }\n        }\n      },\n      pickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value),\n        shaderAttributes: {\n          pickingColors: {\n            divisor: 0\n          },\n          instancePickingColors: {\n            divisor: 1\n          }\n        }\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      info.object = data.find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  disablePickingIndex(objectIndex) {\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      this._disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw({uniforms}) {\n    const {extruded, filled, wireframe, elevationScale} = this.props;\n    const {topModel, sideModel, polygonTesselator} = this.state;\n\n    const renderUniforms = {\n      ...uniforms,\n      extruded: Boolean(extruded),\n      elevationScale\n    };\n\n    // Note: the order is important\n    if (sideModel) {\n      sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n      sideModel.setUniforms(renderUniforms);\n      if (wireframe) {\n        sideModel.setDrawMode(GL.LINE_STRIP);\n        sideModel.setUniforms({isWireframe: true}).draw();\n      }\n      if (filled) {\n        sideModel.setDrawMode(GL.TRIANGLE_FAN);\n        sideModel.setUniforms({isWireframe: false}).draw();\n      }\n    }\n\n    if (topModel) {\n      topModel.setVertexCount(polygonTesselator.vertexCount);\n      topModel.setUniforms(renderUniforms).draw();\n    }\n  }\n\n  updateState(updateParams) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps, changeFlags} = updateParams;\n    const attributeManager = this.getAttributeManager();\n\n    const regenerateModels =\n      changeFlags.extensionsChanged ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded;\n\n    if (regenerateModels) {\n      this.state.models?.forEach(model => model.delete());\n\n      this.setState(this._getModels(this.context.gl));\n      attributeManager.invalidateAll();\n    }\n  }\n\n  updateGeometry({props, oldProps, changeFlags}) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      const {polygonTesselator} = this.state;\n      const buffers = props.data.attributes || {};\n      polygonTesselator.updateGeometry({\n        data: props.data,\n        normalize: props._normalize,\n        geometryBuffer: buffers.getPolygon,\n        buffers,\n        getGeometry: props.getPolygon,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        fp64: this.use64bitPositions(),\n        dataChanged: changeFlags.dataChanged\n      });\n\n      this.setState({\n        numInstances: polygonTesselator.instanceCount,\n        startIndices: polygonTesselator.vertexStarts\n      });\n\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }\n\n  _getModels(gl) {\n    const {id, filled, extruded} = this.props;\n\n    let topModel;\n    let sideModel;\n\n    if (filled) {\n      const shaders = this.getShaders('top');\n      shaders.defines.NON_INSTANCED_MODEL = 1;\n\n      topModel = new Model(gl, {\n        ...shaders,\n        id: `${id}-top`,\n        drawMode: GL.TRIANGLES,\n        attributes: {\n          vertexPositions: new Float32Array([0, 1])\n        },\n        uniforms: {\n          isWireframe: false,\n          isSideVertex: false\n        },\n        vertexCount: 0,\n        isIndexed: true\n      });\n    }\n    if (extruded) {\n      sideModel = new Model(gl, {\n        ...this.getShaders('side'),\n        id: `${id}-side`,\n        geometry: new Geometry({\n          drawMode: GL.LINES,\n          vertexCount: 4,\n          attributes: {\n            // top right - top left - bootom left - bottom right\n            vertexPositions: {\n              size: 2,\n              value: new Float32Array([1, 0, 0, 0, 0, 1, 1, 1])\n            }\n          }\n        }),\n        instanceCount: 0,\n        isInstanced: 1\n      });\n\n      sideModel.userData.excludeAttributes = {indices: true};\n    }\n\n    return {\n      models: [sideModel, topModel].filter(Boolean),\n      topModel,\n      sideModel\n    };\n  }\n\n  calculateIndices(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.indexStarts;\n    attribute.value = polygonTesselator.get('indices');\n  }\n\n  calculatePositions(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.vertexStarts;\n    attribute.value = polygonTesselator.get('positions');\n  }\n\n  calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.get('vertexValid');\n  }\n}\n\nSolidPolygonLayer.layerName = 'SolidPolygonLayer';\nSolidPolygonLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}