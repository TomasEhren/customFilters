{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport WorkerPool from './worker-pool';\nimport WorkerThread from './worker-thread';\nvar DEFAULT_PROPS = {\n  maxConcurrency: 3,\n  maxMobileConcurrency: 1,\n  onDebug: function onDebug() {},\n  reuseWorkers: true\n};\n\nvar WorkerFarm = /*#__PURE__*/function () {\n  function WorkerFarm(props) {\n    _classCallCheck(this, WorkerFarm);\n\n    _defineProperty(this, \"props\", void 0);\n\n    _defineProperty(this, \"workerPools\", new Map());\n\n    this.props = _objectSpread({}, DEFAULT_PROPS);\n    this.setProps(props);\n    this.workerPools = new Map();\n  }\n\n  _createClass(WorkerFarm, [{\n    key: \"destroy\",\n    value: function destroy() {\n      var _iterator = _createForOfIteratorHelper(this.workerPools.values()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var workerPool = _step.value;\n          workerPool.destroy();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      this.props = _objectSpread(_objectSpread({}, this.props), props);\n\n      var _iterator2 = _createForOfIteratorHelper(this.workerPools.values()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var workerPool = _step2.value;\n          workerPool.setProps(this._getWorkerPoolProps());\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"getWorkerPool\",\n    value: function getWorkerPool(options) {\n      var name = options.name,\n          source = options.source,\n          url = options.url;\n      var workerPool = this.workerPools.get(name);\n\n      if (!workerPool) {\n        workerPool = new WorkerPool({\n          name: name,\n          source: source,\n          url: url\n        });\n        workerPool.setProps(this._getWorkerPoolProps());\n        this.workerPools.set(name, workerPool);\n      }\n\n      return workerPool;\n    }\n  }, {\n    key: \"_getWorkerPoolProps\",\n    value: function _getWorkerPoolProps() {\n      return {\n        maxConcurrency: this.props.maxConcurrency,\n        maxMobileConcurrency: this.props.maxMobileConcurrency,\n        reuseWorkers: this.props.reuseWorkers,\n        onDebug: this.props.onDebug\n      };\n    }\n  }], [{\n    key: \"isSupported\",\n    value: function isSupported() {\n      return WorkerThread.isSupported();\n    }\n  }, {\n    key: \"getWorkerFarm\",\n    value: function getWorkerFarm() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      WorkerFarm._workerFarm = WorkerFarm._workerFarm || new WorkerFarm({});\n\n      WorkerFarm._workerFarm.setProps(props);\n\n      return WorkerFarm._workerFarm;\n    }\n  }]);\n\n  return WorkerFarm;\n}();\n\nexport { WorkerFarm as default };\n\n_defineProperty(WorkerFarm, \"_workerFarm\", void 0);","map":{"version":3,"mappings":";;;;;AAAA,OAAOA,UAAP,MAAuB,eAAvB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AAYA,IAAMC,aAA8B,GAAG;EACrCC,cAAc,EAAE,CADqB;EAErCC,oBAAoB,EAAE,CAFe;EAGrCC,OAAO,EAAE,mBAAM,CAHsB;EAIrCC,YAAY,EAAE;AAJuB,CAAvC;;IAUqBC,U;EAmBXC,oBAAYC,KAAZD,EAAoC;IAAA;;IAAAE;;IAAAA,qCAjBtB,IAAIC,GAAJ,EAiBsB;;IAC1C,KAAKF,KAAL,qBAAiBP,aAAjB;IACA,KAAKU,QAAL,CAAcH,KAAd;IAEA,KAAKI,WAAL,GAAmB,IAAIF,GAAJ,EAAnB;EACD;;;;WAMDG,mBAAgB;MAAA,2CACW,KAAKD,WAAL,CAAiBE,MAAjB,EADX;MAAA;;MAAA;QACd,oDAAoD;UAAA,IAAzCC,UAAyC;UAClDA,UAAU,CAACF,OAAXE;QACD;MAHa;QAAA;MAAA;QAAA;MAAA;IAIf;;;WAMDJ,kBAASH,KAATG,EAAuC;MACrC,KAAKH,KAAL,mCAAiB,KAAKA,KAAtB,GAAgCA,KAAhC;;MADqC,4CAGZ,KAAKI,WAAL,CAAiBE,MAAjB,EAHY;MAAA;;MAAA;QAGrC,uDAAoD;UAAA,IAAzCC,UAAyC;UAClDA,UAAU,CAACJ,QAAXI,CAAoB,KAAKC,mBAAL,EAApBD;QACD;MALoC;QAAA;MAAA;QAAA;MAAA;IAMtC;;;WAWDE,uBAAcC,OAAdD,EAAkF;MAChF,IAAOE,IAAP,GAA4BD,OAA5B,CAAOC,IAAP;MAAA,IAAaC,MAAb,GAA4BF,OAA5B,CAAaE,MAAb;MAAA,IAAqBC,GAArB,GAA4BH,OAA5B,CAAqBG,GAArB;MACA,IAAIN,UAAU,GAAG,KAAKH,WAAL,CAAiBU,GAAjB,CAAqBH,IAArB,CAAjB;;MACA,IAAI,CAACJ,UAAL,EAAiB;QACfA,UAAU,GAAG,IAAIhB,UAAJ,CAAe;UAC1BoB,IAD0B,EAC1BA,IAD0B;UAE1BC,MAF0B,EAE1BA,MAF0B;UAG1BC;QAH0B,CAAf,CAAbN;QAKAA,UAAU,CAACJ,QAAXI,CAAoB,KAAKC,mBAAL,EAApBD;QACA,KAAKH,WAAL,CAAiBW,GAAjB,CAAqBJ,IAArB,EAA2BJ,UAA3B;MACD;;MACD,OAAOA,UAAP;IACD;;;WAEDC,+BAAsB;MACpB,OAAO;QACLd,cAAc,EAAE,KAAKM,KAAL,CAAWN,cADtB;QAELC,oBAAoB,EAAE,KAAKK,KAAL,CAAWL,oBAF5B;QAGLE,YAAY,EAAE,KAAKG,KAAL,CAAWH,YAHpB;QAILD,OAAO,EAAE,KAAKI,KAAL,CAAWJ;MAJf,CAAP;IAMD;;;WAxEiB,uBAAY;MAC5B,OAAOJ,YAAY,CAACwB,WAAbxB,EAAP;IACD;;;WAGmB,yBAA0C;MAAA,IAAzCQ,KAAyC,uEAAhB,EAAgB;MAC5DF,UAAU,CAACmB,WAAXnB,GAAyBA,UAAU,CAACmB,WAAXnB,IAA0B,IAAIA,UAAJ,CAAe,EAAf,CAAnDA;;MACAA,UAAU,CAACmB,WAAXnB,CAAuBK,QAAvBL,CAAgCE,KAAhCF;;MACA,OAAOA,UAAU,CAACmB,WAAlB;IACD;;;;;;SAhBkBnB,U;;gBAAAA,Y","names":["WorkerPool","WorkerThread","DEFAULT_PROPS","maxConcurrency","maxMobileConcurrency","onDebug","reuseWorkers","WorkerFarm","constructor","props","_defineProperty","Map","setProps","workerPools","destroy","values","workerPool","_getWorkerPoolProps","getWorkerPool","options","name","source","url","get","set","isSupported","_workerFarm"],"sources":["../../../../src/lib/worker-farm/worker-farm.ts"],"sourcesContent":["import WorkerPool from './worker-pool';\nimport WorkerThread from './worker-thread';\n\n/**\n * @param maxConcurrency {number} - max count of workers\n */\nexport type WorkerFarmProps = {\n  maxConcurrency?: number;\n  maxMobileConcurrency?: number;\n  reuseWorkers?: boolean;\n  onDebug?: () => void;\n};\n\nconst DEFAULT_PROPS: WorkerFarmProps = {\n  maxConcurrency: 3,\n  maxMobileConcurrency: 1,\n  onDebug: () => {},\n  reuseWorkers: true\n};\n\n/**\n * Process multiple jobs with a \"farm\" of different workers in worker pools.\n */\nexport default class WorkerFarm {\n  private props: WorkerFarmProps;\n  private workerPools = new Map<string, WorkerPool>();\n  // singleton\n  private static _workerFarm?: WorkerFarm;\n\n  /** Check if Workers are supported */\n  static isSupported(): boolean {\n    return WorkerThread.isSupported();\n  }\n\n  /** Get the singleton instance of the global worker farm */\n  static getWorkerFarm(props: WorkerFarmProps = {}): WorkerFarm {\n    WorkerFarm._workerFarm = WorkerFarm._workerFarm || new WorkerFarm({});\n    WorkerFarm._workerFarm.setProps(props);\n    return WorkerFarm._workerFarm;\n  }\n\n  /** get global instance with WorkerFarm.getWorkerFarm() */\n  private constructor(props: WorkerFarmProps) {\n    this.props = {...DEFAULT_PROPS};\n    this.setProps(props);\n    /** @type Map<string, WorkerPool>} */\n    this.workerPools = new Map();\n  }\n\n  /**\n   * Terminate all workers in the farm\n   * @note Can free up significant memory\n   */\n  destroy(): void {\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.destroy();\n    }\n  }\n\n  /**\n   * Set props used when initializing worker pools\n   * @param props\n   */\n  setProps(props: WorkerFarmProps): void {\n    this.props = {...this.props, ...props};\n    // Update worker pool props\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.setProps(this._getWorkerPoolProps());\n    }\n  }\n\n  /**\n   * Returns a worker pool for the specified worker\n   * @param options - only used first time for a specific worker name\n   * @param options.name - the name of the worker - used to identify worker pool\n   * @param options.url -\n   * @param options.source -\n   * @example\n   *   const job = WorkerFarm.getWorkerFarm().getWorkerPool({name, url}).startJob(...);\n   */\n  getWorkerPool(options: {name: string; source?: string; url?: string}): WorkerPool {\n    const {name, source, url} = options;\n    let workerPool = this.workerPools.get(name);\n    if (!workerPool) {\n      workerPool = new WorkerPool({\n        name,\n        source,\n        url\n      });\n      workerPool.setProps(this._getWorkerPoolProps());\n      this.workerPools.set(name, workerPool);\n    }\n    return workerPool;\n  }\n\n  _getWorkerPoolProps() {\n    return {\n      maxConcurrency: this.props.maxConcurrency,\n      maxMobileConcurrency: this.props.maxMobileConcurrency,\n      reuseWorkers: this.props.reuseWorkers,\n      onDebug: this.props.onDebug\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}