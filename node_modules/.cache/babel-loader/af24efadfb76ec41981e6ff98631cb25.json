{"ast":null,"code":"import { Vector3 } from '@math.gl/core';\nimport * as mat4 from 'gl-matrix/mat4';\nimport { INTERSECTION } from '../../constants';\nconst scratchVector = new Vector3();\nconst scratchVector2 = new Vector3();\nexport default class BoundingSphere {\n  constructor() {\n    let center = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0, 0, 0];\n    let radius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.0;\n    this.radius = -0;\n    this.center = new Vector3();\n    this.fromCenterRadius(center, radius);\n  }\n\n  fromCenterRadius(center, radius) {\n    this.center.from(center);\n    this.radius = radius;\n    return this;\n  }\n\n  fromCornerPoints(corner, oppositeCorner) {\n    oppositeCorner = scratchVector.from(oppositeCorner);\n    this.center = new Vector3().from(corner).add(oppositeCorner).scale(0.5);\n    this.radius = this.center.distance(oppositeCorner);\n    return this;\n  }\n\n  equals(right) {\n    return this === right || Boolean(right) && this.center.equals(right.center) && this.radius === right.radius;\n  }\n\n  clone() {\n    return new BoundingSphere(this.center, this.radius);\n  }\n\n  union(boundingSphere) {\n    const leftCenter = this.center;\n    const leftRadius = this.radius;\n    const rightCenter = boundingSphere.center;\n    const rightRadius = boundingSphere.radius;\n    const toRightCenter = scratchVector.copy(rightCenter).subtract(leftCenter);\n    const centerSeparation = toRightCenter.magnitude();\n\n    if (leftRadius >= centerSeparation + rightRadius) {\n      return this.clone();\n    }\n\n    if (rightRadius >= centerSeparation + leftRadius) {\n      return boundingSphere.clone();\n    }\n\n    const halfDistanceBetweenTangentPoints = (leftRadius + centerSeparation + rightRadius) * 0.5;\n    scratchVector2.copy(toRightCenter).scale((-leftRadius + halfDistanceBetweenTangentPoints) / centerSeparation).add(leftCenter);\n    this.center.copy(scratchVector2);\n    this.radius = halfDistanceBetweenTangentPoints;\n    return this;\n  }\n\n  expand(point) {\n    point = scratchVector.from(point);\n    const radius = point.subtract(this.center).magnitude();\n\n    if (radius > this.radius) {\n      this.radius = radius;\n    }\n\n    return this;\n  }\n\n  transform(transform) {\n    this.center.transform(transform);\n    const scale = mat4.getScaling(scratchVector, transform);\n    this.radius = Math.max(scale[0], Math.max(scale[1], scale[2])) * this.radius;\n    return this;\n  }\n\n  distanceSquaredTo(point) {\n    const d = this.distanceTo(point);\n    return d * d;\n  }\n\n  distanceTo(point) {\n    point = scratchVector.from(point);\n    const delta = point.subtract(this.center);\n    return Math.max(0, delta.len() - this.radius);\n  }\n\n  intersectPlane(plane) {\n    const center = this.center;\n    const radius = this.radius;\n    const normal = plane.normal;\n    const distanceToPlane = normal.dot(center) + plane.distance;\n\n    if (distanceToPlane < -radius) {\n      return INTERSECTION.OUTSIDE;\n    }\n\n    if (distanceToPlane < radius) {\n      return INTERSECTION.INTERSECTING;\n    }\n\n    return INTERSECTION.INSIDE;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Vector3","mat4","INTERSECTION","scratchVector","scratchVector2","BoundingSphere","constructor","center","radius","fromCenterRadius","from","fromCornerPoints","corner","oppositeCorner","add","scale","distance","equals","right","Boolean","clone","union","boundingSphere","leftCenter","leftRadius","rightCenter","rightRadius","toRightCenter","copy","subtract","centerSeparation","magnitude","halfDistanceBetweenTangentPoints","expand","point","transform","getScaling","Math","max","distanceSquaredTo","d","distanceTo","delta","len","intersectPlane","plane","normal","distanceToPlane","dot","OUTSIDE","INTERSECTING","INSIDE"],"sources":["../../../../src/lib/bounding-volumes/bounding-sphere.js"],"sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Vector3} from '@math.gl/core';\nimport * as mat4 from 'gl-matrix/mat4';\nimport {INTERSECTION} from '../../constants';\n\n// import Rectangle from './rectangle';\n\n// const defaultProjection = new GeographicProjection();\n// const fromRectangle2DLowerLeft = new Vector3();\n// const fromRectangle2DUpperRight = new Vector3();\n// const fromRectangle2DSouthwest = new Cartographic();\n// const fromRectangle2DNortheast = new Cartographic();\n\n// const fromRectangle3DScratch = [];\n\nconst scratchVector = new Vector3();\nconst scratchVector2 = new Vector3();\n\nexport default class BoundingSphere {\n  constructor(center = [0, 0, 0], radius = 0.0) {\n    this.radius = -0;\n    this.center = new Vector3();\n    this.fromCenterRadius(center, radius);\n  }\n\n  fromCenterRadius(center, radius) {\n    this.center.from(center);\n    this.radius = radius;\n    return this;\n  }\n\n  fromCornerPoints(corner, oppositeCorner) {\n    oppositeCorner = scratchVector.from(oppositeCorner);\n    this.center = new Vector3().from(corner).add(oppositeCorner).scale(0.5);\n    this.radius = this.center.distance(oppositeCorner);\n    return this;\n  }\n\n  equals(right) {\n    return (\n      this === right ||\n      (Boolean(right) && this.center.equals(right.center) && this.radius === right.radius)\n    );\n  }\n\n  clone() {\n    return new BoundingSphere(this.center, this.radius);\n  }\n\n  union(boundingSphere) {\n    const leftCenter = this.center;\n    const leftRadius = this.radius;\n    const rightCenter = boundingSphere.center;\n    const rightRadius = boundingSphere.radius;\n\n    const toRightCenter = scratchVector.copy(rightCenter).subtract(leftCenter);\n    const centerSeparation = toRightCenter.magnitude();\n\n    if (leftRadius >= centerSeparation + rightRadius) {\n      // Left sphere wins.\n      return this.clone();\n    }\n\n    if (rightRadius >= centerSeparation + leftRadius) {\n      // Right sphere wins.\n      return boundingSphere.clone();\n    }\n\n    // There are two tangent points, one on far side of each sphere.\n    const halfDistanceBetweenTangentPoints = (leftRadius + centerSeparation + rightRadius) * 0.5;\n\n    // Compute the center point halfway between the two tangent points.\n    scratchVector2\n      .copy(toRightCenter)\n      .scale((-leftRadius + halfDistanceBetweenTangentPoints) / centerSeparation)\n      .add(leftCenter);\n\n    this.center.copy(scratchVector2);\n    this.radius = halfDistanceBetweenTangentPoints;\n\n    return this;\n  }\n\n  expand(point) {\n    point = scratchVector.from(point);\n    const radius = point.subtract(this.center).magnitude();\n    if (radius > this.radius) {\n      this.radius = radius;\n    }\n    return this;\n  }\n\n  transform(transform) {\n    this.center.transform(transform);\n    const scale = mat4.getScaling(scratchVector, transform);\n    this.radius = Math.max(scale[0], Math.max(scale[1], scale[2])) * this.radius;\n    return this;\n  }\n\n  // Computes the estimated distance squared from the closest point on a bounding sphere to a point.\n  distanceSquaredTo(point) {\n    const d = this.distanceTo(point);\n    return d * d;\n  }\n\n  distanceTo(point) {\n    point = scratchVector.from(point);\n    const delta = point.subtract(this.center);\n    return Math.max(0, delta.len() - this.radius);\n  }\n\n  // Determines which side of a plane a sphere is located.\n  intersectPlane(plane) {\n    const center = this.center;\n    const radius = this.radius;\n    const normal = plane.normal;\n    const distanceToPlane = normal.dot(center) + plane.distance;\n\n    // The center point is negative side of the plane normal\n    if (distanceToPlane < -radius) {\n      return INTERSECTION.OUTSIDE;\n    }\n    // The center point is positive side of the plane, but radius extends beyond it; partial overlap\n    if (distanceToPlane < radius) {\n      return INTERSECTION.INTERSECTING;\n    }\n    // The center point and radius is positive side of the plane\n    return INTERSECTION.INSIDE;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}