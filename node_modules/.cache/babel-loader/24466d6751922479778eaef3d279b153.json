{"ast":null,"code":"import _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { DracoLoader as DracoWorkerLoader } from './draco-loader';\nimport DracoParser from './lib/draco-parser';\nimport { loadDracoDecoderModule } from './lib/draco-module-loader';\nexport { DracoWriter } from './draco-writer';\nexport { DracoWorkerLoader };\nexport var DracoLoader = _objectSpread(_objectSpread({}, DracoWorkerLoader), {}, {\n  parse: parse\n});\n\nfunction parse(_x, _x2) {\n  return _parse.apply(this, arguments);\n}\n\nfunction _parse() {\n  _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(arrayBuffer, options) {\n    var _yield$loadDracoDecod, draco, dracoParser;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return loadDracoDecoderModule(options);\n\n          case 2:\n            _yield$loadDracoDecod = _context.sent;\n            draco = _yield$loadDracoDecod.draco;\n            dracoParser = new DracoParser(draco);\n            _context.prev = 5;\n            return _context.abrupt(\"return\", dracoParser.parseSync(arrayBuffer, options === null || options === void 0 ? void 0 : options.draco));\n\n          case 7:\n            _context.prev = 7;\n            dracoParser.destroy();\n            return _context.finish(7);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5,, 7, 10]]);\n  }));\n  return _parse.apply(this, arguments);\n}\n\nexport var _TypecheckDracoLoader = DracoLoader;","map":{"version":3,"mappings":";;;AAGA,SAAQA,WAAW,IAAIC,iBAAvB,QAA+C,gBAA/C;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,SAAQC,sBAAR,QAAqC,2BAArC;AASA,SAAQC,WAAR,QAA0B,gBAA1B;AAKA,SAAQH,iBAAR;AAKA,OAAO,IAAMD,WAAW,mCACnBC,iBADmB;EAEtBI;AAFsB,EAAjB;;SAKQA,K;;;;;oEAAf,iBAAqBC,WAArB,EAA+CC,OAA/C;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OACwBJ,sBAAsB,CAACI,OAAD,CAD9C;;UAAA;YAAA;YACSC,KADT,yBACSA,KADT;YAEQC,WAFR,GAEsB,IAAIP,WAAJ,CAAgBM,KAAhB,CAFtB;YAAA;YAAA,iCAIWC,WAAW,CAACC,SAAZD,CAAsBH,WAAtBG,EAAmCF,OAAnC,SAAmCA,WAAnC,WAAmCA,GAAnC,MAAmCA,UAAO,CAAEC,KAA5CC,CAJX;;UAAA;YAAA;YAMIA,WAAW,CAACE,OAAZF;YANJ;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAWA,OAAO,IAAMG,qBAAuC,GAAGZ,WAAhD","names":["DracoLoader","DracoWorkerLoader","DracoParser","loadDracoDecoderModule","DracoWriter","parse","arrayBuffer","options","draco","dracoParser","parseSync","destroy","_TypecheckDracoLoader"],"sources":["../../src/index.ts"],"sourcesContent":["import type {LoaderWithParser} from '@loaders.gl/loader-utils';\nimport type {DracoMesh, DracoLoaderData} from './lib/draco-types';\nimport type {DracoLoaderOptions} from './draco-loader';\nimport {DracoLoader as DracoWorkerLoader} from './draco-loader';\nimport DracoParser from './lib/draco-parser';\nimport {loadDracoDecoderModule} from './lib/draco-module-loader';\n\n// Draco data types\n\nexport type {DracoMesh, DracoLoaderData};\n\n// Draco Writer\n\nexport type {DracoWriterOptions} from './draco-writer';\nexport {DracoWriter} from './draco-writer';\n\n// Draco Loader\n\nexport type {DracoLoaderOptions};\nexport {DracoWorkerLoader};\n\n/**\n * Loader for Draco3D compressed geometries\n */\nexport const DracoLoader = {\n  ...DracoWorkerLoader,\n  parse\n};\n\nasync function parse(arrayBuffer: ArrayBuffer, options?: DracoLoaderOptions): Promise<DracoMesh> {\n  const {draco} = await loadDracoDecoderModule(options);\n  const dracoParser = new DracoParser(draco);\n  try {\n    return dracoParser.parseSync(arrayBuffer, options?.draco);\n  } finally {\n    dracoParser.destroy();\n  }\n}\n\n// TYPE TESTS - TODO find a better way than exporting junk\nexport const _TypecheckDracoLoader: LoaderWithParser = DracoLoader;\n"]},"metadata":{},"sourceType":"module"}