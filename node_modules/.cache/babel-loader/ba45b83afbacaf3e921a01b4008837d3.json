{"ast":null,"code":"import _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport View from './view';\nimport Viewport from '../viewports/viewport';\nimport { Matrix4 } from '@math.gl/core';\nimport { pixelsToWorld, fovyToAltitude } from '@math.gl/web-mercator';\nimport OrbitController from '../controllers/orbit-controller';\nvar DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction getViewMatrix(_ref) {\n  var height = _ref.height,\n      focalDistance = _ref.focalDistance,\n      orbitAxis = _ref.orbitAxis,\n      rotationX = _ref.rotationX,\n      rotationOrbit = _ref.rotationOrbit,\n      zoom = _ref.zoom;\n  var up = orbitAxis === 'Z' ? [0, 0, 1] : [0, 1, 0];\n  var eye = orbitAxis === 'Z' ? [0, -focalDistance, 0] : [0, 0, focalDistance];\n  var viewMatrix = new Matrix4().lookAt({\n    eye: eye,\n    up: up\n  });\n  viewMatrix.rotateX(rotationX * DEGREES_TO_RADIANS);\n\n  if (orbitAxis === 'Z') {\n    viewMatrix.rotateZ(rotationOrbit * DEGREES_TO_RADIANS);\n  } else {\n    viewMatrix.rotateY(rotationOrbit * DEGREES_TO_RADIANS);\n  }\n\n  var projectionScale = Math.pow(2, zoom) / (height || 1);\n  viewMatrix.scale(projectionScale);\n  return viewMatrix;\n}\n\nvar OrbitViewport = /*#__PURE__*/function (_Viewport) {\n  _inherits(OrbitViewport, _Viewport);\n\n  var _super = _createSuper(OrbitViewport);\n\n  function OrbitViewport(props) {\n    var _this;\n\n    _classCallCheck(this, OrbitViewport);\n\n    var height = props.height,\n        projectionMatrix = props.projectionMatrix,\n        _props$fovy = props.fovy,\n        fovy = _props$fovy === void 0 ? 50 : _props$fovy,\n        orbitAxis = props.orbitAxis,\n        _props$target = props.target,\n        target = _props$target === void 0 ? [0, 0, 0] : _props$target,\n        _props$rotationX = props.rotationX,\n        rotationX = _props$rotationX === void 0 ? 0 : _props$rotationX,\n        _props$rotationOrbit = props.rotationOrbit,\n        rotationOrbit = _props$rotationOrbit === void 0 ? 0 : _props$rotationOrbit,\n        _props$zoom = props.zoom,\n        zoom = _props$zoom === void 0 ? 0 : _props$zoom;\n    var focalDistance = projectionMatrix ? projectionMatrix[5] / 2 : fovyToAltitude(fovy);\n    _this = _super.call(this, _objectSpread(_objectSpread({}, props), {}, {\n      longitude: null,\n      viewMatrix: getViewMatrix({\n        height: height,\n        focalDistance: focalDistance,\n        orbitAxis: orbitAxis,\n        rotationX: rotationX,\n        rotationOrbit: rotationOrbit,\n        zoom: zoom\n      }),\n      fovy: fovy,\n      focalDistance: focalDistance,\n      position: target,\n      zoom: zoom\n    }));\n\n    _defineProperty(_assertThisInitialized(_this), \"projectedCenter\", void 0);\n\n    _this.projectedCenter = _this.project(_this.center);\n    return _this;\n  }\n\n  _createClass(OrbitViewport, [{\n    key: \"unproject\",\n    value: function unproject(xyz) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$topLeft = _ref2.topLeft,\n          topLeft = _ref2$topLeft === void 0 ? true : _ref2$topLeft;\n\n      var _xyz = _slicedToArray(xyz, 3),\n          x = _xyz[0],\n          y = _xyz[1],\n          _xyz$ = _xyz[2],\n          z = _xyz$ === void 0 ? this.projectedCenter[2] : _xyz$;\n\n      var y2 = topLeft ? y : this.height - y;\n\n      var _pixelsToWorld = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix),\n          _pixelsToWorld2 = _slicedToArray(_pixelsToWorld, 3),\n          X = _pixelsToWorld2[0],\n          Y = _pixelsToWorld2[1],\n          Z = _pixelsToWorld2[2];\n\n      return [X, Y, Z];\n    }\n  }, {\n    key: \"panByPosition\",\n    value: function panByPosition(coords, pixel) {\n      var p0 = this.project(coords);\n      var nextCenter = [this.width / 2 + p0[0] - pixel[0], this.height / 2 + p0[1] - pixel[1], this.projectedCenter[2]];\n      return {\n        target: this.unproject(nextCenter)\n      };\n    }\n  }]);\n\n  return OrbitViewport;\n}(Viewport);\n\n_defineProperty(OrbitViewport, \"displayName\", 'OrbitView');\n\nvar OrbitView = /*#__PURE__*/function (_View) {\n  _inherits(OrbitView, _View);\n\n  var _super2 = _createSuper(OrbitView);\n\n  function OrbitView() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, OrbitView);\n\n    var _props$orbitAxis = props.orbitAxis,\n        orbitAxis = _props$orbitAxis === void 0 ? 'Z' : _props$orbitAxis;\n    return _super2.call(this, _objectSpread(_objectSpread({}, props), {}, {\n      orbitAxis: orbitAxis,\n      type: OrbitViewport\n    }));\n  }\n\n  _createClass(OrbitView, [{\n    key: \"controller\",\n    get: function get() {\n      return this._getControllerProps({\n        type: OrbitController\n      });\n    }\n  }]);\n\n  return OrbitView;\n}(View);\n\nexport { OrbitView as default };","map":{"version":3,"mappings":"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","names":["View","Viewport","Matrix4","pixelsToWorld","fovyToAltitude","OrbitController","DEGREES_TO_RADIANS","Math","PI","getViewMatrix","height","focalDistance","orbitAxis","rotationX","rotationOrbit","zoom","up","eye","viewMatrix","lookAt","rotateX","rotateZ","rotateY","projectionScale","pow","scale","OrbitViewport","constructor","props","projectionMatrix","fovy","target","longitude","position","_defineProperty","projectedCenter","project","center","unproject","xyz","topLeft","x","y","z","y2","pixelUnprojectionMatrix","X","Y","Z","panByPosition","coords","pixel","p0","nextCenter","width","OrbitView","type","_getControllerProps"],"sources":["../../../src/views/orbit-view.ts"],"sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\n\nimport {Matrix4} from '@math.gl/core';\nimport {pixelsToWorld, fovyToAltitude} from '@math.gl/web-mercator';\nimport OrbitController from '../controllers/orbit-controller';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction getViewMatrix({height, focalDistance, orbitAxis, rotationX, rotationOrbit, zoom}) {\n  // We position the camera so that one common space unit (world space unit scaled by zoom)\n  // at the target maps to one screen pixel.\n  // This is a similar technique to that used in web mercator projection\n  // By doing so we are able to convert between common space and screen space sizes efficiently\n  // in the vertex shader.\n  const up = orbitAxis === 'Z' ? [0, 0, 1] : [0, 1, 0];\n  const eye = orbitAxis === 'Z' ? [0, -focalDistance, 0] : [0, 0, focalDistance];\n\n  const viewMatrix = new Matrix4().lookAt({eye, up});\n\n  viewMatrix.rotateX(rotationX * DEGREES_TO_RADIANS);\n  if (orbitAxis === 'Z') {\n    viewMatrix.rotateZ(rotationOrbit * DEGREES_TO_RADIANS);\n  } else {\n    viewMatrix.rotateY(rotationOrbit * DEGREES_TO_RADIANS);\n  }\n\n  // When height increases, we need to increase the distance from the camera to the target to\n  // keep the 1:1 mapping. However, this also changes the projected depth of each position by\n  // moving them further away between the near/far plane.\n  // Without modifying the default near/far planes, we instead scale down the common space to\n  // remove the distortion to the depth field.\n  const projectionScale = Math.pow(2, zoom) / (height || 1);\n  viewMatrix.scale(projectionScale);\n\n  return viewMatrix;\n}\n\nclass OrbitViewport extends Viewport {\n  static displayName = 'OrbitView';\n\n  projectedCenter;\n\n  constructor(props) {\n    const {\n      height,\n\n      projectionMatrix,\n\n      fovy = 50, // For setting camera position\n      orbitAxis, // Orbit axis with 360 degrees rotating freedom, can only be 'Y' or 'Z'\n      target = [0, 0, 0], // Which point is camera looking at, default origin\n\n      rotationX = 0, // Rotating angle around X axis\n      rotationOrbit = 0, // Rotating angle around orbit axis\n\n      zoom = 0\n    } = props;\n\n    const focalDistance = projectionMatrix ? projectionMatrix[5] / 2 : fovyToAltitude(fovy);\n\n    super({\n      ...props,\n      // in case viewState contains longitude/latitude values,\n      // make sure that the base Viewport class does not treat this as a geospatial viewport\n      longitude: null,\n      viewMatrix: getViewMatrix({\n        height,\n        focalDistance,\n        orbitAxis,\n        rotationX,\n        rotationOrbit,\n        zoom\n      }),\n      fovy,\n      focalDistance,\n      position: target,\n      zoom\n    });\n\n    this.projectedCenter = this.project(this.center);\n  }\n\n  unproject(xyz, {topLeft = true} = {}) {\n    const [x, y, z = this.projectedCenter[2]] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const [X, Y, Z] = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix);\n    return [X, Y, Z];\n  }\n\n  panByPosition(coords, pixel) {\n    const p0 = this.project(coords);\n    const nextCenter = [\n      this.width / 2 + p0[0] - pixel[0],\n      this.height / 2 + p0[1] - pixel[1],\n      this.projectedCenter[2]\n    ];\n    return {\n      target: this.unproject(nextCenter)\n    };\n  }\n}\n\nexport default class OrbitView extends View {\n  constructor(props = {}) {\n    // @ts-expect-error\n    const {orbitAxis = 'Z'} = props;\n\n    super({\n      ...props,\n      orbitAxis,\n      type: OrbitViewport\n    });\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: OrbitController\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}