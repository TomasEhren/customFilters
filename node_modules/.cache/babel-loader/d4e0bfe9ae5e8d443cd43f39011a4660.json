{"ast":null,"code":"import _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { WorkerFarm, getWorkerURL } from '@loaders.gl/worker-utils';\nexport function canParseWithWorker(loader, options) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n\n  return loader.worker && (options === null || options === void 0 ? void 0 : options.worker);\n}\nexport function parseWithWorker(_x, _x2, _x3, _x4, _x5) {\n  return _parseWithWorker.apply(this, arguments);\n}\n\nfunction _parseWithWorker() {\n  _parseWithWorker = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(loader, data, options, context, parseOnMainThread) {\n    var name, url, workerFarm, workerPool, job, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            name = loader.id;\n            url = getWorkerURL(loader, options);\n            workerFarm = WorkerFarm.getWorkerFarm(options);\n            workerPool = workerFarm.getWorkerPool({\n              name: name,\n              url: url\n            });\n            options = JSON.parse(JSON.stringify(options));\n            _context.next = 7;\n            return workerPool.startJob('process-on-worker', onMessage.bind(null, parseOnMainThread));\n\n          case 7:\n            job = _context.sent;\n            job.postMessage('process', {\n              input: data,\n              options: options\n            });\n            _context.next = 11;\n            return job.result;\n\n          case 11:\n            result = _context.sent;\n            _context.next = 14;\n            return result.result;\n\n          case 14:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseWithWorker.apply(this, arguments);\n}\n\nfunction onMessage(_x6, _x7, _x8, _x9) {\n  return _onMessage.apply(this, arguments);\n}\n\nfunction _onMessage() {\n  _onMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(parseOnMainThread, job, type, payload) {\n    var id, input, options, result, message;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.t0 = type;\n            _context2.next = _context2.t0 === 'done' ? 3 : _context2.t0 === 'error' ? 5 : _context2.t0 === 'process' ? 7 : 20;\n            break;\n\n          case 3:\n            job.done(payload);\n            return _context2.abrupt(\"break\", 21);\n\n          case 5:\n            job.error(new Error(payload.error));\n            return _context2.abrupt(\"break\", 21);\n\n          case 7:\n            id = payload.id, input = payload.input, options = payload.options;\n            _context2.prev = 8;\n            _context2.next = 11;\n            return parseOnMainThread(input, options);\n\n          case 11:\n            result = _context2.sent;\n            job.postMessage('done', {\n              id: id,\n              result: result\n            });\n            _context2.next = 19;\n            break;\n\n          case 15:\n            _context2.prev = 15;\n            _context2.t1 = _context2[\"catch\"](8);\n            message = _context2.t1 instanceof Error ? _context2.t1.message : 'unknown error';\n            job.postMessage('error', {\n              id: id,\n              error: message\n            });\n\n          case 19:\n            return _context2.abrupt(\"break\", 21);\n\n          case 20:\n            console.warn(\"parse-with-worker unknown message \".concat(type));\n\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[8, 15]]);\n  }));\n  return _onMessage.apply(this, arguments);\n}","map":{"version":3,"mappings":";;AAEA,SAAQA,UAAR,EAAoBC,YAApB,QAAuC,0BAAvC;AAOA,OAAO,SAASC,kBAAT,CAA4BC,MAA5B,EAA4CC,OAA5C,EAAqE;EAC1E,IAAI,CAACJ,UAAU,CAACK,WAAXL,EAAL,EAA+B;IAC7B,OAAO,KAAP;EACD;;EAED,OAAOG,MAAM,CAACG,MAAPH,KAAiBC,OAAjB,SAAiBA,WAAjB,WAAiBA,GAAjB,MAAiBA,UAAO,CAAEE,MAA1BH,CAAP;AACD;AAMD,gBAAsBI,eAAtB;EAAA;AAAA;;;8EAAO,iBACLJ,MADK,EAELK,IAFK,EAGLJ,OAHK,EAILK,OAJK,EAKLC,iBALK;IAAA;IAAA;MAAA;QAAA;UAAA;YAOCC,IAPD,GAOQR,MAAM,CAACS,EAPf;YAQCC,GARD,GAQOZ,YAAY,CAACE,MAAD,EAASC,OAAT,CARnB;YAUCU,UAVD,GAUcd,UAAU,CAACe,aAAXf,CAAyBI,OAAzBJ,CAVd;YAWCgB,UAXD,GAWcF,UAAU,CAACG,aAAXH,CAAyB;cAACH,IAAD,EAACA,IAAD;cAAOE;YAAP,CAAzBC,CAXd;YAeLV,OAAO,GAAGc,IAAI,CAACC,KAALD,CAAWA,IAAI,CAACE,SAALF,CAAed,OAAfc,CAAXA,CAAVd;YAfK;YAAA,OAiBaY,UAAU,CAACK,QAAXL,CAChB,mBADgBA,EAGhBM,SAAS,CAACC,IAAVD,CAAe,IAAfA,EAAqBZ,iBAArBY,CAHgBN,CAjBb;;UAAA;YAiBCQ,GAjBD;YAuBLA,GAAG,CAACC,WAAJD,CAAgB,SAAhBA,EAA2B;cAEzBE,KAAK,EAAElB,IAFkB;cAGzBJ;YAHyB,CAA3BoB;YAvBK;YAAA,OA6BgBA,GAAG,CAACG,MA7BpB;;UAAA;YA6BCA,MA7BD;YAAA;YAAA,OA+BQA,MAAM,CAACA,MA/Bf;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;SAwCQL,S;;;;;wEAAf,kBACEZ,iBADF,EAEEc,GAFF,EAGEI,IAHF,EAIEC,OAJF;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,eAMUD,IANV;YAAA,kCAOS,MAPT,wBAWS,OAXT,wBAeS,SAfT;YAAA;;UAAA;YAQMJ,GAAG,CAACM,IAAJN,CAASK,OAATL;YARN;;UAAA;YAYMA,GAAG,CAACO,KAAJP,CAAU,IAAIQ,KAAJ,CAAUH,OAAO,CAACE,KAAlB,CAAVP;YAZN;;UAAA;YAiBaZ,EAjBb,GAiBmCiB,OAjBnC,CAiBajB,EAjBb,EAiBiBc,KAjBjB,GAiBmCG,OAjBnC,CAiBiBH,KAjBjB,EAiBwBtB,OAjBxB,GAiBmCyB,OAjBnC,CAiBwBzB,OAjBxB;YAAA;YAAA;YAAA,OAmB6BM,iBAAiB,CAACgB,KAAD,EAAQtB,OAAR,CAnB9C;;UAAA;YAmBcuB,MAnBd;YAoBQH,GAAG,CAACC,WAAJD,CAAgB,MAAhBA,EAAwB;cAACZ,EAAD,EAACA,EAAD;cAAKe;YAAL,CAAxBH;YApBR;YAAA;;UAAA;YAAA;YAAA;YAsBcS,OAtBd,GAsBwBF,wBAAiBC,KAAjBD,GAAyBA,aAAME,OAA/BF,GAAyC,eAtBjE;YAuBQP,GAAG,CAACC,WAAJD,CAAgB,OAAhBA,EAAyB;cAACZ,EAAD,EAACA,EAAD;cAAKmB,KAAK,EAAEE;YAAZ,CAAzBT;;UAvBR;YAAA;;UAAA;YA6BMU,OAAO,CAACC,IAARD,6CAAkDN,IAAlD;;UA7BN;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","names":["WorkerFarm","getWorkerURL","canParseWithWorker","loader","options","isSupported","worker","parseWithWorker","data","context","parseOnMainThread","name","id","url","workerFarm","getWorkerFarm","workerPool","getWorkerPool","JSON","parse","stringify","startJob","onMessage","bind","job","postMessage","input","result","type","payload","done","error","Error","message","console","warn"],"sources":["../../../../src/lib/worker-loader-utils/parse-with-worker.ts"],"sourcesContent":["import type {WorkerJob, WorkerMessageType, WorkerMessagePayload} from '@loaders.gl/worker-utils';\nimport type {Loader, LoaderOptions, LoaderContext} from '../../types';\nimport {WorkerFarm, getWorkerURL} from '@loaders.gl/worker-utils';\n\n/**\n * Determines if a loader can parse with worker\n * @param loader\n * @param options\n */\nexport function canParseWithWorker(loader: Loader, options?: LoaderOptions) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n\n  return loader.worker && options?.worker;\n}\n\n/**\n * this function expects that the worker function sends certain messages,\n * this can be automated if the worker is wrapper by a call to createLoaderWorker in @loaders.gl/loader-utils.\n */\nexport async function parseWithWorker(\n  loader: Loader,\n  data: any,\n  options?: LoaderOptions,\n  context?: LoaderContext,\n  parseOnMainThread?: (arrayBuffer: ArrayBuffer, options: {[key: string]: any}) => Promise<void>\n) {\n  const name = loader.id; // TODO\n  const url = getWorkerURL(loader, options);\n\n  const workerFarm = WorkerFarm.getWorkerFarm(options);\n  const workerPool = workerFarm.getWorkerPool({name, url});\n\n  // options.log object contains functions which cannot be transferred\n  // TODO - decide how to handle logging on workers\n  options = JSON.parse(JSON.stringify(options));\n\n  const job = await workerPool.startJob(\n    'process-on-worker',\n    // @ts-expect-error\n    onMessage.bind(null, parseOnMainThread) // eslint-disable-line @typescript-eslint/no-misused-promises\n  );\n\n  job.postMessage('process', {\n    // @ts-ignore\n    input: data,\n    options\n  });\n\n  const result = await job.result;\n  // TODO - what is going on here?\n  return await result.result;\n}\n\n/**\n * Handle worker's responses to the main thread\n * @param job\n * @param type\n * @param payload\n */\nasync function onMessage(\n  parseOnMainThread: (arrayBuffer: ArrayBuffer, options?: {[key: string]: any}) => Promise<void>,\n  job: WorkerJob,\n  type: WorkerMessageType,\n  payload: WorkerMessagePayload\n) {\n  switch (type) {\n    case 'done':\n      job.done(payload);\n      break;\n\n    case 'error':\n      job.error(new Error(payload.error));\n      break;\n\n    case 'process':\n      // Worker is asking for main thread to parseO\n      const {id, input, options} = payload;\n      try {\n        const result = await parseOnMainThread(input, options);\n        job.postMessage('done', {id, result});\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'unknown error';\n        job.postMessage('error', {id, error: message});\n      }\n      break;\n\n    default:\n      // eslint-disable-next-line\n      console.warn(`parse-with-worker unknown message ${type}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}