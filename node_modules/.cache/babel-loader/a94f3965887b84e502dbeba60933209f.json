{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { assertWebGLContext, log } from '@luma.gl/gltools';\nimport { parseGLSLCompilerError, getShaderName } from '../glsl-utils';\nimport { assert } from '../utils/assert';\nimport { uid } from '../utils/utils';\nimport Resource from './resource';\nvar ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';\nexport var Shader = /*#__PURE__*/function (_Resource) {\n  _inherits(Shader, _Resource);\n\n  var _super = _createSuper(Shader);\n\n  function Shader(gl, props) {\n    var _this;\n\n    _classCallCheck(this, Shader);\n\n    assertWebGLContext(gl);\n    assert(typeof props.source === 'string', ERR_SOURCE);\n    var id = getShaderName(props.source, null) || props.id || uid(\"unnamed \".concat(Shader.getTypeName(props.shaderType)));\n    _this = _super.call(this, gl, {\n      id: id\n    });\n    _this.shaderType = props.shaderType;\n    _this.source = props.source;\n\n    _this.initialize(props);\n\n    return _this;\n  }\n\n  _createClass(Shader, [{\n    key: \"initialize\",\n    value: function initialize(_ref) {\n      var source = _ref.source;\n      var shaderName = getShaderName(source, null);\n\n      if (shaderName) {\n        this.id = uid(shaderName);\n      }\n\n      this._compile(source);\n    }\n  }, {\n    key: \"getParameter\",\n    value: function getParameter(pname) {\n      return this.gl.getShaderParameter(this.handle, pname);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(Shader.getTypeName(this.shaderType), \":\").concat(this.id);\n    }\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      return getShaderName(this.source) || 'unnamed-shader';\n    }\n  }, {\n    key: \"getSource\",\n    value: function getSource() {\n      return this.gl.getShaderSource(this.handle);\n    }\n  }, {\n    key: \"getTranslatedSource\",\n    value: function getTranslatedSource() {\n      var extension = this.gl.getExtension('WEBGL_debug_shaders');\n      return extension ? extension.getTranslatedShaderSource(this.handle) : 'No translated source available. WEBGL_debug_shaders not implemented';\n    }\n  }, {\n    key: \"_compile\",\n    value: function _compile() {\n      var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.source;\n\n      if (!source.startsWith('#version ')) {\n        source = \"#version 100\\n\".concat(source);\n      }\n\n      this.source = source;\n      this.gl.shaderSource(this.handle, this.source);\n      this.gl.compileShader(this.handle);\n      var compileStatus = this.getParameter(35713);\n\n      if (!compileStatus) {\n        var infoLog = this.gl.getShaderInfoLog(this.handle);\n\n        var _parseGLSLCompilerErr = parseGLSLCompilerError(infoLog, this.source, this.shaderType, this.id),\n            shaderName = _parseGLSLCompilerErr.shaderName,\n            errors = _parseGLSLCompilerErr.errors,\n            warnings = _parseGLSLCompilerErr.warnings;\n\n        log.error(\"GLSL compilation errors in \".concat(shaderName, \"\\n\").concat(errors))();\n        log.warn(\"GLSL compilation warnings in \".concat(shaderName, \"\\n\").concat(warnings))();\n        throw new Error(\"GLSL compilation errors in \".concat(shaderName));\n      }\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      this.gl.deleteShader(this.handle);\n    }\n  }, {\n    key: \"_getOptsFromHandle\",\n    value: function _getOptsFromHandle() {\n      return {\n        type: this.getParameter(35663),\n        source: this.getSource()\n      };\n    }\n  }], [{\n    key: \"getTypeName\",\n    value: function getTypeName(shaderType) {\n      switch (shaderType) {\n        case 35633:\n          return 'vertex-shader';\n\n        case 35632:\n          return 'fragment-shader';\n\n        default:\n          assert(false);\n          return 'unknown';\n      }\n    }\n  }]);\n\n  return Shader;\n}(Resource);\nexport var VertexShader = /*#__PURE__*/function (_Shader) {\n  _inherits(VertexShader, _Shader);\n\n  var _super2 = _createSuper(VertexShader);\n\n  function VertexShader(gl, props) {\n    _classCallCheck(this, VertexShader);\n\n    if (typeof props === 'string') {\n      props = {\n        source: props\n      };\n    }\n\n    return _super2.call(this, gl, Object.assign({}, props, {\n      shaderType: 35633\n    }));\n  }\n\n  _createClass(VertexShader, [{\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return this.gl.createShader(35633);\n    }\n  }]);\n\n  return VertexShader;\n}(Shader);\nexport var FragmentShader = /*#__PURE__*/function (_Shader2) {\n  _inherits(FragmentShader, _Shader2);\n\n  var _super3 = _createSuper(FragmentShader);\n\n  function FragmentShader(gl, props) {\n    _classCallCheck(this, FragmentShader);\n\n    if (typeof props === 'string') {\n      props = {\n        source: props\n      };\n    }\n\n    return _super3.call(this, gl, Object.assign({}, props, {\n      shaderType: 35632\n    }));\n  }\n\n  _createClass(FragmentShader, [{\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return this.gl.createShader(35632);\n    }\n  }]);\n\n  return FragmentShader;\n}(Shader);","map":{"version":3,"mappings":"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","names":["assertWebGLContext","log","parseGLSLCompilerError","getShaderName","assert","uid","Resource","ERR_SOURCE","Shader","constructor","gl","props","source","id","getTypeName","shaderType","initialize","shaderName","_compile","getParameter","pname","getShaderParameter","handle","toString","getName","getSource","getShaderSource","getTranslatedSource","extension","getExtension","getTranslatedShaderSource","startsWith","shaderSource","compileShader","compileStatus","infoLog","getShaderInfoLog","errors","warnings","error","warn","Error","_deleteHandle","deleteShader","_getOptsFromHandle","type","VertexShader","Object","assign","_createHandle","createShader","FragmentShader"],"sources":["../../../src/classes/shader.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {assertWebGLContext, log} from '@luma.gl/gltools';\nimport {parseGLSLCompilerError, getShaderName} from '../glsl-utils';\nimport {assert} from '../utils/assert';\nimport {uid} from '../utils/utils';\nimport Resource from './resource';\n\nconst ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';\n\n// For now this is an internal class\nexport class Shader extends Resource {\n  static getTypeName(shaderType) {\n    switch (shaderType) {\n      case GL.VERTEX_SHADER:\n        return 'vertex-shader';\n      case GL.FRAGMENT_SHADER:\n        return 'fragment-shader';\n      default:\n        assert(false);\n        return 'unknown';\n    }\n  }\n\n  /* eslint-disable max-statements */\n  constructor(gl, props) {\n    assertWebGLContext(gl);\n\n    // Validate arguments\n    assert(typeof props.source === 'string', ERR_SOURCE);\n\n    // Deduce an id, from shader source, or supplied id, or shader type\n    const id =\n      getShaderName(props.source, null) ||\n      props.id ||\n      uid(`unnamed ${Shader.getTypeName(props.shaderType)}`);\n\n    super(gl, {id});\n\n    this.shaderType = props.shaderType;\n    this.source = props.source;\n\n    this.initialize(props);\n  }\n\n  initialize({source}) {\n    const shaderName = getShaderName(source, null);\n    if (shaderName) {\n      this.id = uid(shaderName);\n    }\n    this._compile(source);\n  }\n\n  // Accessors\n\n  getParameter(pname) {\n    return this.gl.getShaderParameter(this.handle, pname);\n  }\n\n  toString() {\n    return `${Shader.getTypeName(this.shaderType)}:${this.id}`;\n  }\n\n  getName() {\n    return getShaderName(this.source) || 'unnamed-shader';\n  }\n\n  getSource() {\n    return this.gl.getShaderSource(this.handle);\n  }\n\n  // Debug method - Returns translated source if available\n  getTranslatedSource() {\n    const extension = this.gl.getExtension('WEBGL_debug_shaders');\n    return extension\n      ? extension.getTranslatedShaderSource(this.handle)\n      : 'No translated source available. WEBGL_debug_shaders not implemented';\n  }\n\n  // PRIVATE METHODS\n  _compile(source = this.source) {\n    if (!source.startsWith('#version ')) {\n      source = `#version 100\\n${source}`;\n    }\n    this.source = source;\n    this.gl.shaderSource(this.handle, this.source);\n    this.gl.compileShader(this.handle);\n\n    // TODO - For performance reasons, avoid checking shader compilation errors on production?\n    // TODO - Load log even when no error reported, to catch warnings?\n    // https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings\n    const compileStatus = this.getParameter(GL.COMPILE_STATUS);\n    if (!compileStatus) {\n      const infoLog = this.gl.getShaderInfoLog(this.handle);\n      const {shaderName, errors, warnings} = parseGLSLCompilerError(\n        infoLog,\n        this.source,\n        this.shaderType,\n        this.id\n      );\n      log.error(`GLSL compilation errors in ${shaderName}\\n${errors}`)();\n      log.warn(`GLSL compilation warnings in ${shaderName}\\n${warnings}`)();\n      throw new Error(`GLSL compilation errors in ${shaderName}`);\n    }\n  }\n\n  _deleteHandle() {\n    this.gl.deleteShader(this.handle);\n  }\n\n  _getOptsFromHandle() {\n    return {\n      type: this.getParameter(GL.SHADER_TYPE),\n      source: this.getSource()\n    };\n  }\n}\n\nexport class VertexShader extends Shader {\n  constructor(gl, props) {\n    // Signature: new VertexShader(gl, source)\n    if (typeof props === 'string') {\n      props = {source: props};\n    }\n    super(gl, Object.assign({}, props, {shaderType: GL.VERTEX_SHADER}));\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL.VERTEX_SHADER);\n  }\n}\n\nexport class FragmentShader extends Shader {\n  constructor(gl, props) {\n    // Signature: new FragmentShader(gl, source)\n    if (typeof props === 'string') {\n      props = {source: props};\n    }\n\n    super(gl, Object.assign({}, props, {shaderType: GL.FRAGMENT_SHADER}));\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL.FRAGMENT_SHADER);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}