{"ast":null,"code":"import _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nvar _parameters;\n\nimport { getBounds, boundsContain, packVertices, scaleToAspectRatio, getTextureCoordinates, getTextureParams } from './heatmap-layer-utils';\nimport { Buffer, Texture2D, Transform, getParameters, FEATURES, hasFeatures } from '@luma.gl/core';\nimport { AttributeManager, COORDINATE_SYSTEM, log } from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport AggregationLayer from '../aggregation-layer';\nimport { defaultColorRange, colorRangeToFlatArray } from '../utils/color-utils';\nimport weights_vs from './weights-vs.glsl';\nimport weights_fs from './weights-fs.glsl';\nimport vs_max from './max-vs.glsl';\nimport fs_max from './max-fs.glsl';\nvar RESOLUTION = 2;\nvar TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: (_parameters = {}, _defineProperty(_parameters, 10240, 9729), _defineProperty(_parameters, 10241, 9729), _defineProperty(_parameters, 10242, 33071), _defineProperty(_parameters, 10243, 33071), _parameters),\n  dataFormat: 6408\n};\nvar DEFAULT_COLOR_DOMAIN = [0, 0];\nvar AGGREGATION_MODE = {\n  SUM: 0,\n  MEAN: 1\n};\nvar defaultProps = {\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  intensity: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusPixels: {\n    type: 'number',\n    min: 1,\n    max: 100,\n    value: 50\n  },\n  colorRange: defaultColorRange,\n  threshold: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 0.05\n  },\n  colorDomain: {\n    type: 'array',\n    value: null,\n    optional: true\n  },\n  aggregation: 'SUM',\n  weightsTextureSize: {\n    type: 'number',\n    min: 128,\n    max: 2048,\n    value: 2048\n  },\n  debounceTimeout: {\n    type: 'number',\n    min: 0,\n    max: 1000,\n    value: 500\n  }\n};\nvar REQUIRED_FEATURES = [FEATURES.BLEND_EQUATION_MINMAX, FEATURES.TEXTURE_FLOAT];\nvar DIMENSIONS = {\n  data: {\n    props: ['radiusPixels']\n  }\n};\n\nvar HeatmapLayer = /*#__PURE__*/function (_AggregationLayer) {\n  _inherits(HeatmapLayer, _AggregationLayer);\n\n  var _super = _createSuper(HeatmapLayer);\n\n  function HeatmapLayer() {\n    _classCallCheck(this, HeatmapLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(HeatmapLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var gl = this.context.gl;\n\n      if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n        this.setState({\n          supported: false\n        });\n        log.error(\"HeatmapLayer: \".concat(this.id, \" is not supported on this browser\"))();\n        return;\n      }\n\n      _get(_getPrototypeOf(HeatmapLayer.prototype), \"initializeState\", this).call(this, DIMENSIONS);\n\n      this.setState({\n        supported: true,\n        colorDomain: DEFAULT_COLOR_DOMAIN\n      });\n\n      this._setupTextureParams();\n\n      this._setupAttributes();\n\n      this._setupResources();\n    }\n  }, {\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref) {\n      var changeFlags = _ref.changeFlags;\n      return changeFlags.somethingChanged;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      if (!this.state.supported) {\n        return;\n      }\n\n      _get(_getPrototypeOf(HeatmapLayer.prototype), \"updateState\", this).call(this, opts);\n\n      this._updateHeatmapState(opts);\n    }\n  }, {\n    key: \"_updateHeatmapState\",\n    value: function _updateHeatmapState(opts) {\n      var props = opts.props,\n          oldProps = opts.oldProps;\n\n      var changeFlags = this._getChangeFlags(opts);\n\n      if (changeFlags.dataChanged || changeFlags.viewportChanged) {\n        changeFlags.boundsChanged = this._updateBounds(changeFlags.dataChanged);\n\n        this._updateTextureRenderingBounds();\n      }\n\n      if (changeFlags.dataChanged || changeFlags.boundsChanged) {\n        clearTimeout(this.state.updateTimer);\n        this.setState({\n          isWeightMapDirty: true\n        });\n      } else if (changeFlags.viewportZoomChanged) {\n        this._debouncedUpdateWeightmap();\n      }\n\n      if (props.colorRange !== oldProps.colorRange) {\n        this._updateColorTexture(opts);\n      }\n\n      if (this.state.isWeightMapDirty) {\n        this._updateWeightmap();\n      }\n\n      this.setState({\n        zoom: opts.context.viewport.zoom\n      });\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      if (!this.state.supported) {\n        return [];\n      }\n\n      var _this$state = this.state,\n          weightsTexture = _this$state.weightsTexture,\n          triPositionBuffer = _this$state.triPositionBuffer,\n          triTexCoordBuffer = _this$state.triTexCoordBuffer,\n          maxWeightsTexture = _this$state.maxWeightsTexture,\n          colorTexture = _this$state.colorTexture,\n          colorDomain = _this$state.colorDomain;\n      var _this$props = this.props,\n          updateTriggers = _this$props.updateTriggers,\n          intensity = _this$props.intensity,\n          threshold = _this$props.threshold,\n          aggregation = _this$props.aggregation;\n      var TriangleLayerClass = this.getSubLayerClass('triangle', TriangleLayer);\n      return new TriangleLayerClass(this.getSubLayerProps({\n        id: 'triangle-layer',\n        updateTriggers: updateTriggers\n      }), {\n        coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n        data: {\n          attributes: {\n            positions: triPositionBuffer,\n            texCoords: triTexCoordBuffer\n          }\n        },\n        vertexCount: 4,\n        maxTexture: maxWeightsTexture,\n        colorTexture: colorTexture,\n        aggregationMode: AGGREGATION_MODE[aggregation] || 0,\n        texture: weightsTexture,\n        intensity: intensity,\n        threshold: threshold,\n        colorDomain: colorDomain\n      });\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      _get(_getPrototypeOf(HeatmapLayer.prototype), \"finalizeState\", this).call(this);\n\n      var _this$state2 = this.state,\n          weightsTransform = _this$state2.weightsTransform,\n          weightsTexture = _this$state2.weightsTexture,\n          maxWeightTransform = _this$state2.maxWeightTransform,\n          maxWeightsTexture = _this$state2.maxWeightsTexture,\n          triPositionBuffer = _this$state2.triPositionBuffer,\n          triTexCoordBuffer = _this$state2.triTexCoordBuffer,\n          colorTexture = _this$state2.colorTexture,\n          updateTimer = _this$state2.updateTimer;\n      weightsTransform === null || weightsTransform === void 0 ? void 0 : weightsTransform.delete();\n      weightsTexture === null || weightsTexture === void 0 ? void 0 : weightsTexture.delete();\n      maxWeightTransform === null || maxWeightTransform === void 0 ? void 0 : maxWeightTransform.delete();\n      maxWeightsTexture === null || maxWeightsTexture === void 0 ? void 0 : maxWeightsTexture.delete();\n      triPositionBuffer === null || triPositionBuffer === void 0 ? void 0 : triPositionBuffer.delete();\n      triTexCoordBuffer === null || triTexCoordBuffer === void 0 ? void 0 : triTexCoordBuffer.delete();\n      colorTexture === null || colorTexture === void 0 ? void 0 : colorTexture.delete();\n\n      if (updateTimer) {\n        clearTimeout(updateTimer);\n      }\n    }\n  }, {\n    key: \"_getAttributeManager\",\n    value: function _getAttributeManager() {\n      return new AttributeManager(this.context.gl, {\n        id: this.props.id,\n        stats: this.context.stats\n      });\n    }\n  }, {\n    key: \"_getChangeFlags\",\n    value: function _getChangeFlags(opts) {\n      var changeFlags = {};\n      var dimensions = this.state.dimensions;\n      changeFlags.dataChanged = this.isAttributeChanged() || this.isAggregationDirty(opts, {\n        compareAll: true,\n        dimension: dimensions.data\n      });\n      changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n      var zoom = this.state.zoom;\n\n      if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n        changeFlags.viewportZoomChanged = true;\n      }\n\n      return changeFlags;\n    }\n  }, {\n    key: \"_createTextures\",\n    value: function _createTextures() {\n      var gl = this.context.gl;\n      var _this$state3 = this.state,\n          textureSize = _this$state3.textureSize,\n          format = _this$state3.format,\n          type = _this$state3.type;\n      this.setState({\n        weightsTexture: new Texture2D(gl, _objectSpread({\n          width: textureSize,\n          height: textureSize,\n          format: format,\n          type: type\n        }, TEXTURE_OPTIONS)),\n        maxWeightsTexture: new Texture2D(gl, _objectSpread({\n          format: format,\n          type: type\n        }, TEXTURE_OPTIONS))\n      });\n    }\n  }, {\n    key: \"_setupAttributes\",\n    value: function _setupAttributes() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add({\n        positions: {\n          size: 3,\n          type: 5130,\n          accessor: 'getPosition'\n        },\n        weights: {\n          size: 1,\n          accessor: 'getWeight'\n        }\n      });\n      this.setState({\n        positionAttributeName: 'positions'\n      });\n    }\n  }, {\n    key: \"_setupTextureParams\",\n    value: function _setupTextureParams() {\n      var gl = this.context.gl;\n      var weightsTextureSize = this.props.weightsTextureSize;\n      var textureSize = Math.min(weightsTextureSize, getParameters(gl, 3379));\n      var floatTargetSupport = hasFeatures(gl, FEATURES.COLOR_ATTACHMENT_RGBA32F);\n\n      var _getTextureParams = getTextureParams({\n        gl: gl,\n        floatTargetSupport: floatTargetSupport\n      }),\n          format = _getTextureParams.format,\n          type = _getTextureParams.type;\n\n      var weightsScale = floatTargetSupport ? 1 : 1 / 255;\n      this.setState({\n        textureSize: textureSize,\n        format: format,\n        type: type,\n        weightsScale: weightsScale\n      });\n\n      if (!floatTargetSupport) {\n        log.warn(\"HeatmapLayer: \".concat(this.id, \" rendering to float texture not supported, fallingback to low precession format\"))();\n      }\n    }\n  }, {\n    key: \"getShaders\",\n    value: function getShaders(type) {\n      return _get(_getPrototypeOf(HeatmapLayer.prototype), \"getShaders\", this).call(this, type === 'max-weights-transform' ? {\n        vs: vs_max,\n        _fs: fs_max\n      } : {\n        vs: weights_vs,\n        _fs: weights_fs\n      });\n    }\n  }, {\n    key: \"_createWeightsTransform\",\n    value: function _createWeightsTransform() {\n      var shaders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var _weightsTransform;\n\n      var gl = this.context.gl;\n      var weightsTransform = this.state.weightsTransform;\n      var weightsTexture = this.state.weightsTexture;\n      (_weightsTransform = weightsTransform) === null || _weightsTransform === void 0 ? void 0 : _weightsTransform.delete();\n      weightsTransform = new Transform(gl, _objectSpread({\n        id: \"\".concat(this.id, \"-weights-transform\"),\n        elementCount: 1,\n        _targetTexture: weightsTexture,\n        _targetTextureVarying: 'weightsTexture'\n      }, shaders));\n      this.setState({\n        weightsTransform: weightsTransform\n      });\n    }\n  }, {\n    key: \"_setupResources\",\n    value: function _setupResources() {\n      var gl = this.context.gl;\n\n      this._createTextures();\n\n      var _this$state4 = this.state,\n          textureSize = _this$state4.textureSize,\n          weightsTexture = _this$state4.weightsTexture,\n          maxWeightsTexture = _this$state4.maxWeightsTexture;\n      var weightsTransformShaders = this.getShaders('weights-transform');\n\n      this._createWeightsTransform(weightsTransformShaders);\n\n      var maxWeightsTransformShaders = this.getShaders('max-weights-transform');\n      var maxWeightTransform = new Transform(gl, _objectSpread(_objectSpread({\n        id: \"\".concat(this.id, \"-max-weights-transform\"),\n        _sourceTextures: {\n          inTexture: weightsTexture\n        },\n        _targetTexture: maxWeightsTexture,\n        _targetTextureVarying: 'outTexture'\n      }, maxWeightsTransformShaders), {}, {\n        elementCount: textureSize * textureSize\n      }));\n      this.setState({\n        weightsTexture: weightsTexture,\n        maxWeightsTexture: maxWeightsTexture,\n        maxWeightTransform: maxWeightTransform,\n        zoom: null,\n        triPositionBuffer: new Buffer(gl, {\n          byteLength: 48,\n          accessor: {\n            size: 3\n          }\n        }),\n        triTexCoordBuffer: new Buffer(gl, {\n          byteLength: 48,\n          accessor: {\n            size: 2\n          }\n        })\n      });\n    }\n  }, {\n    key: \"updateShaders\",\n    value: function updateShaders(shaderOptions) {\n      this._createWeightsTransform(shaderOptions);\n    }\n  }, {\n    key: \"_updateMaxWeightValue\",\n    value: function _updateMaxWeightValue() {\n      var maxWeightTransform = this.state.maxWeightTransform;\n      maxWeightTransform.run({\n        parameters: {\n          blend: true,\n          depthTest: false,\n          blendFunc: [1, 1],\n          blendEquation: 32776\n        }\n      });\n    }\n  }, {\n    key: \"_updateBounds\",\n    value: function _updateBounds() {\n      var forceUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var viewport = this.context.viewport;\n      var viewportCorners = [viewport.unproject([0, 0]), viewport.unproject([viewport.width, 0]), viewport.unproject([viewport.width, viewport.height]), viewport.unproject([0, viewport.height])].map(function (p) {\n        return p.map(Math.fround);\n      });\n      var visibleWorldBounds = getBounds(viewportCorners);\n      var newState = {\n        visibleWorldBounds: visibleWorldBounds,\n        viewportCorners: viewportCorners\n      };\n      var boundsChanged = false;\n\n      if (forceUpdate || !this.state.worldBounds || !boundsContain(this.state.worldBounds, visibleWorldBounds)) {\n        var scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n\n        var worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n\n        if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n          worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n          worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n          worldBounds[0] = Math.max(worldBounds[0], -360);\n          worldBounds[2] = Math.min(worldBounds[2], 360);\n        }\n\n        var normalizedCommonBounds = this._worldToCommonBounds(worldBounds);\n\n        newState.worldBounds = worldBounds;\n        newState.normalizedCommonBounds = normalizedCommonBounds;\n        boundsChanged = true;\n      }\n\n      this.setState(newState);\n      return boundsChanged;\n    }\n  }, {\n    key: \"_updateTextureRenderingBounds\",\n    value: function _updateTextureRenderingBounds() {\n      var _this$state5 = this.state,\n          triPositionBuffer = _this$state5.triPositionBuffer,\n          triTexCoordBuffer = _this$state5.triTexCoordBuffer,\n          normalizedCommonBounds = _this$state5.normalizedCommonBounds,\n          viewportCorners = _this$state5.viewportCorners;\n      var viewport = this.context.viewport;\n      triPositionBuffer.subData(packVertices(viewportCorners, 3));\n      var textureBounds = viewportCorners.map(function (p) {\n        return getTextureCoordinates(viewport.projectPosition(p), normalizedCommonBounds);\n      });\n      triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n    }\n  }, {\n    key: \"_updateColorTexture\",\n    value: function _updateColorTexture(opts) {\n      var colorRange = opts.props.colorRange;\n      var colorTexture = this.state.colorTexture;\n      var colors = colorRangeToFlatArray(colorRange, false, Uint8Array);\n\n      if (colorTexture) {\n        colorTexture.setImageData({\n          data: colors,\n          width: colorRange.length\n        });\n      } else {\n        colorTexture = new Texture2D(this.context.gl, _objectSpread({\n          data: colors,\n          width: colorRange.length,\n          height: 1\n        }, TEXTURE_OPTIONS));\n      }\n\n      this.setState({\n        colorTexture: colorTexture\n      });\n    }\n  }, {\n    key: \"_updateWeightmap\",\n    value: function _updateWeightmap() {\n      var _weightsTexture$setPa;\n\n      var _this$props2 = this.props,\n          radiusPixels = _this$props2.radiusPixels,\n          colorDomain = _this$props2.colorDomain,\n          aggregation = _this$props2.aggregation;\n      var _this$state6 = this.state,\n          weightsTransform = _this$state6.weightsTransform,\n          worldBounds = _this$state6.worldBounds,\n          textureSize = _this$state6.textureSize,\n          weightsTexture = _this$state6.weightsTexture,\n          weightsScale = _this$state6.weightsScale;\n      this.state.isWeightMapDirty = false;\n\n      var commonBounds = this._worldToCommonBounds(worldBounds, {\n        useLayerCoordinateSystem: true\n      });\n\n      if (colorDomain && aggregation === 'SUM') {\n        var viewport = this.context.viewport;\n        var metersPerPixel = viewport.distanceScales.metersPerUnit[2] * (commonBounds[2] - commonBounds[0]) / textureSize;\n        this.state.colorDomain = colorDomain.map(function (x) {\n          return x * metersPerPixel * weightsScale;\n        });\n      } else {\n        this.state.colorDomain = colorDomain || DEFAULT_COLOR_DOMAIN;\n      }\n\n      var uniforms = {\n        radiusPixels: radiusPixels,\n        commonBounds: commonBounds,\n        textureWidth: textureSize,\n        weightsScale: weightsScale\n      };\n      weightsTransform.update({\n        elementCount: this.getNumInstances()\n      });\n      weightsTransform.run({\n        uniforms: uniforms,\n        parameters: {\n          blend: true,\n          depthTest: false,\n          blendFunc: [1, 1],\n          blendEquation: 32774\n        },\n        clearRenderTarget: true,\n        attributes: this.getAttributes(),\n        moduleSettings: this.getModuleSettings()\n      });\n\n      this._updateMaxWeightValue();\n\n      weightsTexture.setParameters((_weightsTexture$setPa = {}, _defineProperty(_weightsTexture$setPa, 10240, 9729), _defineProperty(_weightsTexture$setPa, 10241, 9729), _weightsTexture$setPa));\n    }\n  }, {\n    key: \"_debouncedUpdateWeightmap\",\n    value: function _debouncedUpdateWeightmap() {\n      var fromTimer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var updateTimer = this.state.updateTimer;\n      var debounceTimeout = this.props.debounceTimeout;\n\n      if (fromTimer) {\n        updateTimer = null;\n\n        this._updateBounds(true);\n\n        this._updateTextureRenderingBounds();\n\n        this.setState({\n          isWeightMapDirty: true\n        });\n      } else {\n        this.setState({\n          isWeightMapDirty: false\n        });\n        clearTimeout(updateTimer);\n        updateTimer = setTimeout(this._debouncedUpdateWeightmap.bind(this, true), debounceTimeout);\n      }\n\n      this.setState({\n        updateTimer: updateTimer\n      });\n    }\n  }, {\n    key: \"_worldToCommonBounds\",\n    value: function _worldToCommonBounds(worldBounds) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _opts$useLayerCoordin = opts.useLayerCoordinateSystem,\n          useLayerCoordinateSystem = _opts$useLayerCoordin === void 0 ? false : _opts$useLayerCoordin;\n\n      var _worldBounds = _slicedToArray(worldBounds, 4),\n          minLong = _worldBounds[0],\n          minLat = _worldBounds[1],\n          maxLong = _worldBounds[2],\n          maxLat = _worldBounds[3];\n\n      var viewport = this.context.viewport;\n      var textureSize = this.state.textureSize;\n      var coordinateSystem = this.props.coordinateSystem;\n      var offsetMode = useLayerCoordinateSystem && (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS || coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS);\n      var offsetOriginCommon = offsetMode ? viewport.projectPosition(this.props.coordinateOrigin) : [0, 0];\n      var size = textureSize * RESOLUTION / viewport.scale;\n      var bottomLeftCommon;\n      var topRightCommon;\n\n      if (useLayerCoordinateSystem && !offsetMode) {\n        bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);\n        topRightCommon = this.projectPosition([maxLong, maxLat, 0]);\n      } else {\n        bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);\n        topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);\n      }\n\n      return scaleToAspectRatio([bottomLeftCommon[0] - offsetOriginCommon[0], bottomLeftCommon[1] - offsetOriginCommon[1], topRightCommon[0] - offsetOriginCommon[0], topRightCommon[1] - offsetOriginCommon[1]], size, size);\n    }\n  }, {\n    key: \"_commonToWorldBounds\",\n    value: function _commonToWorldBounds(commonBounds) {\n      var _commonBounds = _slicedToArray(commonBounds, 4),\n          xMin = _commonBounds[0],\n          yMin = _commonBounds[1],\n          xMax = _commonBounds[2],\n          yMax = _commonBounds[3];\n\n      var viewport = this.context.viewport;\n      var bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);\n      var topRightWorld = viewport.unprojectPosition([xMax, yMax]);\n      return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));\n    }\n  }]);\n\n  return HeatmapLayer;\n}(AggregationLayer);\n\nexport { HeatmapLayer as default };\nHeatmapLayer.layerName = 'HeatmapLayer';\nHeatmapLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["getBounds","boundsContain","packVertices","scaleToAspectRatio","getTextureCoordinates","getTextureParams","Buffer","Texture2D","Transform","getParameters","FEATURES","hasFeatures","AttributeManager","COORDINATE_SYSTEM","log","TriangleLayer","AggregationLayer","defaultColorRange","colorRangeToFlatArray","weights_vs","weights_fs","vs_max","fs_max","RESOLUTION","TEXTURE_OPTIONS","mipmaps","parameters","dataFormat","DEFAULT_COLOR_DOMAIN","AGGREGATION_MODE","SUM","MEAN","defaultProps","getPosition","type","value","x","position","getWeight","intensity","min","radiusPixels","max","colorRange","threshold","colorDomain","optional","aggregation","weightsTextureSize","debounceTimeout","REQUIRED_FEATURES","BLEND_EQUATION_MINMAX","TEXTURE_FLOAT","DIMENSIONS","data","props","HeatmapLayer","initializeState","gl","context","setState","supported","error","id","_setupTextureParams","_setupAttributes","_setupResources","shouldUpdateState","changeFlags","somethingChanged","updateState","opts","state","_updateHeatmapState","oldProps","_getChangeFlags","dataChanged","viewportChanged","boundsChanged","_updateBounds","_updateTextureRenderingBounds","clearTimeout","updateTimer","isWeightMapDirty","viewportZoomChanged","_debouncedUpdateWeightmap","_updateColorTexture","_updateWeightmap","zoom","viewport","renderLayers","weightsTexture","triPositionBuffer","triTexCoordBuffer","maxWeightsTexture","colorTexture","updateTriggers","TriangleLayerClass","getSubLayerClass","getSubLayerProps","coordinateSystem","DEFAULT","attributes","positions","texCoords","vertexCount","maxTexture","aggregationMode","texture","finalizeState","weightsTransform","maxWeightTransform","delete","_getAttributeManager","stats","dimensions","isAttributeChanged","isAggregationDirty","compareAll","dimension","_createTextures","textureSize","format","width","height","attributeManager","getAttributeManager","add","size","accessor","weights","positionAttributeName","Math","floatTargetSupport","COLOR_ATTACHMENT_RGBA32F","weightsScale","warn","getShaders","vs","_fs","_createWeightsTransform","shaders","elementCount","_targetTexture","_targetTextureVarying","weightsTransformShaders","maxWeightsTransformShaders","_sourceTextures","inTexture","byteLength","updateShaders","shaderOptions","_updateMaxWeightValue","run","blend","depthTest","blendFunc","blendEquation","forceUpdate","viewportCorners","unproject","map","p","fround","visibleWorldBounds","newState","worldBounds","scaledCommonBounds","_worldToCommonBounds","_commonToWorldBounds","LNGLAT","normalizedCommonBounds","subData","textureBounds","projectPosition","colors","Uint8Array","setImageData","length","commonBounds","useLayerCoordinateSystem","metersPerPixel","distanceScales","metersPerUnit","uniforms","textureWidth","update","getNumInstances","clearRenderTarget","getAttributes","moduleSettings","getModuleSettings","setParameters","fromTimer","setTimeout","bind","minLong","minLat","maxLong","maxLat","offsetMode","LNGLAT_OFFSETS","METER_OFFSETS","offsetOriginCommon","coordinateOrigin","scale","bottomLeftCommon","topRightCommon","xMin","yMin","xMax","yMax","bottomLeftWorld","unprojectPosition","topRightWorld","slice","concat","layerName"],"sources":["../../../src/heatmap-layer/heatmap-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global setTimeout clearTimeout */\nimport GL from '@luma.gl/constants';\nimport {\n  getBounds,\n  boundsContain,\n  packVertices,\n  scaleToAspectRatio,\n  getTextureCoordinates,\n  getTextureParams\n} from './heatmap-layer-utils';\nimport {Buffer, Texture2D, Transform, getParameters, FEATURES, hasFeatures} from '@luma.gl/core';\nimport {AttributeManager, COORDINATE_SYSTEM, log} from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport AggregationLayer from '../aggregation-layer';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport weights_vs from './weights-vs.glsl';\nimport weights_fs from './weights-fs.glsl';\nimport vs_max from './max-vs.glsl';\nimport fs_max from './max-fs.glsl';\n\nconst RESOLUTION = 2; // (number of common space pixels) / (number texels)\nconst TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: {\n    [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n    [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n  },\n  dataFormat: GL.RGBA\n};\nconst DEFAULT_COLOR_DOMAIN = [0, 0];\nconst AGGREGATION_MODE = {\n  SUM: 0,\n  MEAN: 1\n};\n\nconst defaultProps = {\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: 1},\n  intensity: {type: 'number', min: 0, value: 1},\n  radiusPixels: {type: 'number', min: 1, max: 100, value: 50},\n  colorRange: defaultColorRange,\n  threshold: {type: 'number', min: 0, max: 1, value: 0.05},\n  colorDomain: {type: 'array', value: null, optional: true},\n  // 'SUM' or 'MEAN'\n  aggregation: 'SUM',\n  weightsTextureSize: {type: 'number', min: 128, max: 2048, value: 2048},\n  debounceTimeout: {type: 'number', min: 0, max: 1000, value: 500}\n};\n\nconst REQUIRED_FEATURES = [\n  FEATURES.BLEND_EQUATION_MINMAX, // max weight calculation\n  FEATURES.TEXTURE_FLOAT // weight-map as texture\n  // FEATURES.FLOAT_BLEND, // implictly supported when TEXTURE_FLOAT is supported\n];\n\nconst DIMENSIONS = {\n  data: {\n    props: ['radiusPixels']\n  }\n};\n\nexport default class HeatmapLayer extends AggregationLayer {\n  initializeState() {\n    const {gl} = this.context;\n    if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n      this.setState({supported: false});\n      log.error(`HeatmapLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    super.initializeState(DIMENSIONS);\n    this.setState({supported: true, colorDomain: DEFAULT_COLOR_DOMAIN});\n    this._setupTextureParams();\n    this._setupAttributes();\n    this._setupResources();\n  }\n\n  shouldUpdateState({changeFlags}) {\n    // Need to be updated when viewport changes\n    return changeFlags.somethingChanged;\n  }\n\n  /* eslint-disable max-statements,complexity */\n  updateState(opts) {\n    if (!this.state.supported) {\n      return;\n    }\n    super.updateState(opts);\n    this._updateHeatmapState(opts);\n  }\n\n  _updateHeatmapState(opts) {\n    const {props, oldProps} = opts;\n    const changeFlags = this._getChangeFlags(opts);\n\n    if (changeFlags.dataChanged || changeFlags.viewportChanged) {\n      // if data is changed, do not debounce and immediately update the weight map\n      changeFlags.boundsChanged = this._updateBounds(changeFlags.dataChanged);\n      this._updateTextureRenderingBounds();\n    }\n\n    if (changeFlags.dataChanged || changeFlags.boundsChanged) {\n      // Update weight map immediately\n      clearTimeout(this.state.updateTimer);\n      this.setState({isWeightMapDirty: true});\n    } else if (changeFlags.viewportZoomChanged) {\n      // Update weight map when zoom stops\n      this._debouncedUpdateWeightmap();\n    }\n\n    if (props.colorRange !== oldProps.colorRange) {\n      this._updateColorTexture(opts);\n    }\n\n    if (this.state.isWeightMapDirty) {\n      this._updateWeightmap();\n    }\n\n    this.setState({zoom: opts.context.viewport.zoom});\n  }\n\n  renderLayers() {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {\n      weightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      maxWeightsTexture,\n      colorTexture,\n      colorDomain\n    } = this.state;\n    const {updateTriggers, intensity, threshold, aggregation} = this.props;\n\n    const TriangleLayerClass = this.getSubLayerClass('triangle', TriangleLayer);\n\n    return new TriangleLayerClass(\n      this.getSubLayerProps({\n        id: 'triangle-layer',\n        updateTriggers\n      }),\n      {\n        // position buffer is filled with world coordinates generated from viewport.unproject\n        // i.e. LNGLAT if geospatial, CARTESIAN otherwise\n        coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n        data: {\n          attributes: {\n            positions: triPositionBuffer,\n            texCoords: triTexCoordBuffer\n          }\n        },\n        vertexCount: 4,\n        maxTexture: maxWeightsTexture,\n        colorTexture,\n        aggregationMode: AGGREGATION_MODE[aggregation] || 0,\n        texture: weightsTexture,\n        intensity,\n        threshold,\n        colorDomain\n      }\n    );\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    const {\n      weightsTransform,\n      weightsTexture,\n      maxWeightTransform,\n      maxWeightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      colorTexture,\n      updateTimer\n    } = this.state;\n    weightsTransform?.delete();\n    weightsTexture?.delete();\n    maxWeightTransform?.delete();\n    maxWeightsTexture?.delete();\n    triPositionBuffer?.delete();\n    triTexCoordBuffer?.delete();\n    colorTexture?.delete();\n    if (updateTimer) {\n      clearTimeout(updateTimer);\n    }\n  }\n\n  // PRIVATE\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n  _getChangeFlags(opts) {\n    const changeFlags = {};\n    const {dimensions} = this.state;\n    changeFlags.dataChanged =\n      this.isAttributeChanged() || // if any attribute is changed\n      this.isAggregationDirty(opts, {\n        compareAll: true,\n        dimension: dimensions.data\n      });\n    changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n\n    const {zoom} = this.state;\n    if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n      changeFlags.viewportZoomChanged = true;\n    }\n\n    return changeFlags;\n  }\n\n  _createTextures() {\n    const {gl} = this.context;\n    const {textureSize, format, type} = this.state;\n\n    this.setState({\n      weightsTexture: new Texture2D(gl, {\n        width: textureSize,\n        height: textureSize,\n        format,\n        type,\n        ...TEXTURE_OPTIONS\n      }),\n      maxWeightsTexture: new Texture2D(gl, {format, type, ...TEXTURE_OPTIONS}) // 1 X 1 texture,\n    });\n  }\n\n  _setupAttributes() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, type: GL.DOUBLE, accessor: 'getPosition'},\n      weights: {size: 1, accessor: 'getWeight'}\n    });\n    this.setState({positionAttributeName: 'positions'});\n  }\n\n  _setupTextureParams() {\n    const {gl} = this.context;\n    const {weightsTextureSize} = this.props;\n\n    const textureSize = Math.min(weightsTextureSize, getParameters(gl, gl.MAX_TEXTURE_SIZE));\n    const floatTargetSupport = hasFeatures(gl, FEATURES.COLOR_ATTACHMENT_RGBA32F);\n    const {format, type} = getTextureParams({gl, floatTargetSupport});\n    const weightsScale = floatTargetSupport ? 1 : 1 / 255;\n    this.setState({textureSize, format, type, weightsScale});\n    if (!floatTargetSupport) {\n      log.warn(\n        `HeatmapLayer: ${this.id} rendering to float texture not supported, fallingback to low precession format`\n      )();\n    }\n  }\n\n  getShaders(type) {\n    return super.getShaders(\n      type === 'max-weights-transform'\n        ? {\n            vs: vs_max,\n            _fs: fs_max\n          }\n        : {\n            vs: weights_vs,\n            _fs: weights_fs\n          }\n    );\n  }\n\n  _createWeightsTransform(shaders = {}) {\n    const {gl} = this.context;\n    let {weightsTransform} = this.state;\n    const {weightsTexture} = this.state;\n    weightsTransform?.delete();\n\n    weightsTransform = new Transform(gl, {\n      id: `${this.id}-weights-transform`,\n      elementCount: 1,\n      _targetTexture: weightsTexture,\n      _targetTextureVarying: 'weightsTexture',\n      ...shaders\n    });\n    this.setState({weightsTransform});\n  }\n\n  _setupResources() {\n    const {gl} = this.context;\n    this._createTextures();\n    const {textureSize, weightsTexture, maxWeightsTexture} = this.state;\n\n    const weightsTransformShaders = this.getShaders('weights-transform');\n    this._createWeightsTransform(weightsTransformShaders);\n\n    const maxWeightsTransformShaders = this.getShaders('max-weights-transform');\n    const maxWeightTransform = new Transform(gl, {\n      id: `${this.id}-max-weights-transform`,\n      _sourceTextures: {\n        inTexture: weightsTexture\n      },\n      _targetTexture: maxWeightsTexture,\n      _targetTextureVarying: 'outTexture',\n      ...maxWeightsTransformShaders,\n      elementCount: textureSize * textureSize\n    });\n\n    this.setState({\n      weightsTexture,\n      maxWeightsTexture,\n      maxWeightTransform,\n      zoom: null,\n      triPositionBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 3}\n      }),\n      triTexCoordBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 2}\n      })\n    });\n  }\n\n  // overwrite super class method to update transform model\n  updateShaders(shaderOptions) {\n    // sahder params (modules, injects) changed, update model object\n    this._createWeightsTransform(shaderOptions);\n  }\n\n  _updateMaxWeightValue() {\n    const {maxWeightTransform} = this.state;\n    maxWeightTransform.run({\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.MAX\n      }\n    });\n  }\n\n  // Computes world bounds area that needs to be processed for generate heatmap\n  _updateBounds(forceUpdate = false) {\n    const {viewport} = this.context;\n\n    // Unproject all 4 corners of the current screen coordinates into world coordinates (lng/lat)\n    // Takes care of viewport has non zero bearing/pitch (i.e axis not aligned with world coordiante system)\n    const viewportCorners = [\n      viewport.unproject([0, 0]),\n      viewport.unproject([viewport.width, 0]),\n      viewport.unproject([viewport.width, viewport.height]),\n      viewport.unproject([0, viewport.height])\n    ].map(p => p.map(Math.fround));\n\n    // #1: get world bounds for current viewport extends\n    const visibleWorldBounds = getBounds(viewportCorners); // TODO: Change to visible bounds\n\n    const newState = {visibleWorldBounds, viewportCorners};\n    let boundsChanged = false;\n\n    if (\n      forceUpdate ||\n      !this.state.worldBounds ||\n      !boundsContain(this.state.worldBounds, visibleWorldBounds)\n    ) {\n      // #2 : convert world bounds to common (Flat) bounds\n      // #3 : extend common bounds to match aspect ratio with viewport\n      const scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n\n      // #4 :convert aligned common bounds to world bounds\n      const worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n\n      // Clip webmercator projection limits\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n        worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n        worldBounds[0] = Math.max(worldBounds[0], -360);\n        worldBounds[2] = Math.min(worldBounds[2], 360);\n      }\n\n      // #5: now convert world bounds to common using Layer's coordiante system and origin\n      const normalizedCommonBounds = this._worldToCommonBounds(worldBounds);\n\n      newState.worldBounds = worldBounds;\n      newState.normalizedCommonBounds = normalizedCommonBounds;\n\n      boundsChanged = true;\n    }\n    this.setState(newState);\n    return boundsChanged;\n  }\n\n  _updateTextureRenderingBounds() {\n    // Just render visible portion of the texture\n    const {triPositionBuffer, triTexCoordBuffer, normalizedCommonBounds, viewportCorners} =\n      this.state;\n\n    const {viewport} = this.context;\n\n    triPositionBuffer.subData(packVertices(viewportCorners, 3));\n\n    const textureBounds = viewportCorners.map(p =>\n      getTextureCoordinates(viewport.projectPosition(p), normalizedCommonBounds)\n    );\n    triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n  }\n\n  _updateColorTexture(opts) {\n    const {colorRange} = opts.props;\n    let {colorTexture} = this.state;\n    const colors = colorRangeToFlatArray(colorRange, false, Uint8Array);\n\n    if (colorTexture) {\n      colorTexture.setImageData({\n        data: colors,\n        width: colorRange.length\n      });\n    } else {\n      colorTexture = new Texture2D(this.context.gl, {\n        data: colors,\n        width: colorRange.length,\n        height: 1,\n        ...TEXTURE_OPTIONS\n      });\n    }\n    this.setState({colorTexture});\n  }\n\n  _updateWeightmap() {\n    const {radiusPixels, colorDomain, aggregation} = this.props;\n    const {weightsTransform, worldBounds, textureSize, weightsTexture, weightsScale} = this.state;\n    this.state.isWeightMapDirty = false;\n\n    // convert world bounds to common using Layer's coordiante system and origin\n    const commonBounds = this._worldToCommonBounds(worldBounds, {\n      useLayerCoordinateSystem: true\n    });\n\n    if (colorDomain && aggregation === 'SUM') {\n      // scale color domain to weight per pixel\n      const {viewport} = this.context;\n      const metersPerPixel =\n        (viewport.distanceScales.metersPerUnit[2] * (commonBounds[2] - commonBounds[0])) /\n        textureSize;\n      this.state.colorDomain = colorDomain.map(x => x * metersPerPixel * weightsScale);\n    } else {\n      this.state.colorDomain = colorDomain || DEFAULT_COLOR_DOMAIN;\n    }\n\n    const uniforms = {\n      radiusPixels,\n      commonBounds,\n      textureWidth: textureSize,\n      weightsScale\n    };\n    // Attribute manager sets data array count as instaceCount on model\n    // we need to set that as elementCount on 'weightsTransform'\n    weightsTransform.update({\n      elementCount: this.getNumInstances()\n    });\n    weightsTransform.run({\n      uniforms,\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.FUNC_ADD\n      },\n      clearRenderTarget: true,\n      attributes: this.getAttributes(),\n      moduleSettings: this.getModuleSettings()\n    });\n    this._updateMaxWeightValue();\n\n    // reset filtering parameters (TODO: remove once luma issue#1193 is fixed)\n    weightsTexture.setParameters({\n      [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n      [GL.TEXTURE_MIN_FILTER]: GL.LINEAR\n    });\n  }\n\n  _debouncedUpdateWeightmap(fromTimer = false) {\n    let {updateTimer} = this.state;\n    const {debounceTimeout} = this.props;\n\n    if (fromTimer) {\n      updateTimer = null;\n      // update\n      this._updateBounds(true);\n      this._updateTextureRenderingBounds();\n      this.setState({isWeightMapDirty: true});\n    } else {\n      this.setState({isWeightMapDirty: false});\n      clearTimeout(updateTimer);\n      updateTimer = setTimeout(this._debouncedUpdateWeightmap.bind(this, true), debounceTimeout);\n    }\n\n    this.setState({updateTimer});\n  }\n\n  // input: worldBounds: [minLong, minLat, maxLong, maxLat]\n  // input: opts.useLayerCoordinateSystem : layers coordiante system is used\n  // optput: commonBounds: [minX, minY, maxX, maxY] scaled to fit the current texture\n  _worldToCommonBounds(worldBounds, opts = {}) {\n    const {useLayerCoordinateSystem = false} = opts;\n    const [minLong, minLat, maxLong, maxLat] = worldBounds;\n    const {viewport} = this.context;\n    const {textureSize} = this.state;\n    const {coordinateSystem} = this.props;\n\n    const offsetMode =\n      useLayerCoordinateSystem &&\n      (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS ||\n        coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS);\n    const offsetOriginCommon = offsetMode\n      ? viewport.projectPosition(this.props.coordinateOrigin)\n      : [0, 0];\n    const size = (textureSize * RESOLUTION) / viewport.scale;\n\n    let bottomLeftCommon;\n    let topRightCommon;\n\n    // Y-axis is flipped between World and Common bounds\n    if (useLayerCoordinateSystem && !offsetMode) {\n      bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);\n      topRightCommon = this.projectPosition([maxLong, maxLat, 0]);\n    } else {\n      bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);\n      topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);\n    }\n    // Ignore z component\n    return scaleToAspectRatio(\n      [\n        bottomLeftCommon[0] - offsetOriginCommon[0],\n        bottomLeftCommon[1] - offsetOriginCommon[1],\n        topRightCommon[0] - offsetOriginCommon[0],\n        topRightCommon[1] - offsetOriginCommon[1]\n      ],\n      size,\n      size\n    );\n  }\n\n  // input commonBounds: [xMin, yMin, xMax, yMax]\n  // output worldBounds: [minLong, minLat, maxLong, maxLat]\n  _commonToWorldBounds(commonBounds) {\n    const [xMin, yMin, xMax, yMax] = commonBounds;\n    const {viewport} = this.context;\n    const bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);\n    const topRightWorld = viewport.unprojectPosition([xMax, yMax]);\n\n    return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));\n  }\n}\n\nHeatmapLayer.layerName = 'HeatmapLayer';\nHeatmapLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}