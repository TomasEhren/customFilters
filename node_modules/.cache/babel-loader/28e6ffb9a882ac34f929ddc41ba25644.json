{"ast":null,"code":"import _defineProperty from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport Buffer from '../classes/buffer';\nimport { getKey } from '../webgl-utils/constants-to-keys';\nimport { getCompositeGLType } from '../webgl-utils/attribute-utils';\nimport { formatValue } from '../utils/format-value';\nexport function getDebugTableForVertexArray(_ref) {\n  var vertexArray = _ref.vertexArray,\n      _ref$header = _ref.header,\n      header = _ref$header === void 0 ? 'Attributes' : _ref$header;\n\n  if (!vertexArray.configuration) {\n    return {};\n  }\n\n  var table = {};\n\n  if (vertexArray.elements) {\n    table.ELEMENT_ARRAY_BUFFER = getDebugTableRow(vertexArray, vertexArray.elements, null, header);\n  }\n\n  var attributes = vertexArray.values;\n\n  for (var attributeLocation in attributes) {\n    var info = vertexArray._getAttributeInfo(attributeLocation);\n\n    if (info) {\n      var rowHeader = \"\".concat(attributeLocation, \": \").concat(info.name);\n      var accessor = vertexArray.accessors[info.location];\n\n      if (accessor) {\n        rowHeader = \"\".concat(attributeLocation, \": \").concat(getGLSLDeclaration(info.name, accessor));\n      }\n\n      table[rowHeader] = getDebugTableRow(vertexArray, attributes[attributeLocation], accessor, header);\n    }\n  }\n\n  return table;\n}\n\nfunction getDebugTableRow(vertexArray, attribute, accessor, header) {\n  var _ref4;\n\n  var gl = vertexArray.gl;\n\n  if (!attribute) {\n    var _ref2;\n\n    return _ref2 = {}, _defineProperty(_ref2, header, 'null'), _defineProperty(_ref2, 'Format ', 'N/A'), _ref2;\n  }\n\n  var type = 'NOT PROVIDED';\n  var size = 1;\n  var verts = 0;\n  var bytes = 0;\n  var isInteger;\n  var marker;\n  var value;\n\n  if (accessor) {\n    type = accessor.type;\n    size = accessor.size;\n    type = String(type).replace('Array', '');\n    isInteger = type.indexOf('nt') !== -1;\n  }\n\n  if (attribute instanceof Buffer) {\n    var _ref3;\n\n    var buffer = attribute;\n\n    var _buffer$getDebugData = buffer.getDebugData(),\n        data = _buffer$getDebugData.data,\n        changed = _buffer$getDebugData.changed;\n\n    marker = changed ? '*' : '';\n    value = data;\n    bytes = buffer.byteLength;\n    verts = bytes / data.BYTES_PER_ELEMENT / size;\n    var format;\n\n    if (accessor) {\n      var instanced = accessor.divisor > 0;\n      format = \"\".concat(instanced ? 'I ' : 'P ', \" \").concat(verts, \" (x\").concat(size, \"=\").concat(bytes, \" bytes \").concat(getKey(gl, type), \")\");\n    } else {\n      isInteger = true;\n      format = \"\".concat(bytes, \" bytes\");\n    }\n\n    return _ref3 = {}, _defineProperty(_ref3, header, \"\".concat(marker).concat(formatValue(value, {\n      size: size,\n      isInteger: isInteger\n    }))), _defineProperty(_ref3, 'Format ', format), _ref3;\n  }\n\n  value = attribute;\n  size = attribute.length;\n  type = String(attribute.constructor.name).replace('Array', '');\n  isInteger = type.indexOf('nt') !== -1;\n  return _ref4 = {}, _defineProperty(_ref4, header, \"\".concat(formatValue(value, {\n    size: size,\n    isInteger: isInteger\n  }), \" (constant)\")), _defineProperty(_ref4, 'Format ', \"\".concat(size, \"x\").concat(type, \" (constant)\")), _ref4;\n}\n\nfunction getGLSLDeclaration(name, accessor) {\n  var type = accessor.type,\n      size = accessor.size;\n  var typeAndName = getCompositeGLType(type, size);\n  return typeAndName ? \"\".concat(name, \" (\").concat(typeAndName.name, \")\") : name;\n}","map":{"version":3,"mappings":"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","names":["Buffer","getKey","getCompositeGLType","formatValue","getDebugTableForVertexArray","vertexArray","header","configuration","table","elements","ELEMENT_ARRAY_BUFFER","getDebugTableRow","attributes","values","attributeLocation","info","_getAttributeInfo","rowHeader","name","accessor","accessors","location","getGLSLDeclaration","attribute","gl","type","size","verts","bytes","isInteger","marker","value","String","replace","indexOf","buffer","getDebugData","data","changed","byteLength","BYTES_PER_ELEMENT","format","instanced","divisor","length","constructor","typeAndName"],"sources":["../../../src/debug/debug-vertex-array.js"],"sourcesContent":["import Buffer from '../classes/buffer';\nimport {getKey} from '../webgl-utils/constants-to-keys';\nimport {getCompositeGLType} from '../webgl-utils/attribute-utils';\nimport {formatValue} from '../utils/format-value';\n\n// Creates object suitable as input for console.table\nexport function getDebugTableForVertexArray({vertexArray, header = 'Attributes'}) {\n  if (!vertexArray.configuration) {\n    return {};\n  }\n\n  const table = {}; // {[header]: {}};\n\n  // Add index (elements) if available\n  if (vertexArray.elements) {\n    // const elements = Object.assign({size: 1}, vertexArray.elements);\n    table.ELEMENT_ARRAY_BUFFER = getDebugTableRow(vertexArray, vertexArray.elements, null, header);\n  }\n\n  // Add used attributes\n  const attributes = vertexArray.values;\n\n  for (const attributeLocation in attributes) {\n    const info = vertexArray._getAttributeInfo(attributeLocation);\n    if (info) {\n      let rowHeader = `${attributeLocation}: ${info.name}`;\n      const accessor = vertexArray.accessors[info.location];\n      if (accessor) {\n        rowHeader = `${attributeLocation}: ${getGLSLDeclaration(info.name, accessor)}`;\n      }\n      table[rowHeader] = getDebugTableRow(\n        vertexArray,\n        attributes[attributeLocation],\n        accessor,\n        header\n      );\n    }\n  }\n\n  return table;\n}\n\n/* eslint-disable max-statements */\nfunction getDebugTableRow(vertexArray, attribute, accessor, header) {\n  const {gl} = vertexArray;\n\n  if (!attribute) {\n    return {\n      [header]: 'null',\n      'Format ': 'N/A'\n    };\n  }\n\n  let type = 'NOT PROVIDED';\n  let size = 1;\n  let verts = 0;\n  let bytes = 0;\n\n  let isInteger;\n  let marker;\n  let value;\n\n  if (accessor) {\n    type = accessor.type;\n    size = accessor.size;\n\n    // Generate a type name by dropping Array from Float32Array etc.\n    type = String(type).replace('Array', '');\n\n    // Look for 'nt' to detect integer types, e.g. Int32Array, Uint32Array\n    isInteger = type.indexOf('nt') !== -1;\n  }\n\n  if (attribute instanceof Buffer) {\n    const buffer = attribute;\n\n    const {data, changed} = buffer.getDebugData();\n    marker = changed ? '*' : '';\n\n    value = data;\n    // @ts-ignore\n    bytes = buffer.byteLength;\n    // @ts-ignore\n    verts = bytes / data.BYTES_PER_ELEMENT / size;\n\n    let format;\n\n    if (accessor) {\n      const instanced = accessor.divisor > 0;\n      format = `${instanced ? 'I ' : 'P '} ${verts} (x${size}=${bytes} bytes ${getKey(gl, type)})`;\n    } else {\n      // element buffer\n      isInteger = true;\n      format = `${bytes} bytes`;\n    }\n\n    return {\n      [header]: `${marker}${formatValue(value, {size, isInteger})}`,\n      'Format ': format\n    };\n  }\n\n  // CONSTANT VALUE\n  value = attribute;\n  size = attribute.length;\n  // Generate a type name by dropping Array from Float32Array etc.\n  type = String(attribute.constructor.name).replace('Array', '');\n  // Look for 'nt' to detect integer types, e.g. Int32Array, Uint32Array\n  isInteger = type.indexOf('nt') !== -1;\n\n  return {\n    [header]: `${formatValue(value, {size, isInteger})} (constant)`,\n    'Format ': `${size}x${type} (constant)`\n  };\n}\n/* eslint-ensable max-statements */\n\nfunction getGLSLDeclaration(name, accessor) {\n  const {type, size} = accessor;\n  const typeAndName = getCompositeGLType(type, size);\n  return typeAndName ? `${name} (${typeAndName.name})` : name;\n}\n"]},"metadata":{},"sourceType":"module"}