{"ast":null,"code":"import _get from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { clamp } from '@math.gl/core';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport { normalizeViewportProps } from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\nvar PITCH_MOUSE_THRESHOLD = 5;\nvar PITCH_ACCEL = 1.2;\nvar DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5,\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60,\n  position: [0, 0, 0]\n};\nexport var MapState = /*#__PURE__*/function (_ViewState) {\n  _inherits(MapState, _ViewState);\n\n  var _super = _createSuper(MapState);\n\n  function MapState(options) {\n    var _this;\n\n    _classCallCheck(this, MapState);\n\n    options = _objectSpread(_objectSpread({}, DEFAULT_STATE), options);\n\n    var _ref = options || {},\n        makeViewport = _ref.makeViewport,\n        width = _ref.width,\n        height = _ref.height,\n        latitude = _ref.latitude,\n        longitude = _ref.longitude,\n        zoom = _ref.zoom,\n        bearing = _ref.bearing,\n        pitch = _ref.pitch,\n        altitude = _ref.altitude,\n        position = _ref.position,\n        maxZoom = _ref.maxZoom,\n        minZoom = _ref.minZoom,\n        maxPitch = _ref.maxPitch,\n        minPitch = _ref.minPitch,\n        startPanLngLat = _ref.startPanLngLat,\n        startZoomLngLat = _ref.startZoomLngLat,\n        startRotatePos = _ref.startRotatePos,\n        startBearing = _ref.startBearing,\n        startPitch = _ref.startPitch,\n        startZoom = _ref.startZoom,\n        normalize = _ref.normalize;\n\n    assert(Number.isFinite(longitude));\n    assert(Number.isFinite(latitude));\n    assert(Number.isFinite(zoom));\n    _this = _super.call(this, {\n      width: width,\n      height: height,\n      latitude: latitude,\n      longitude: longitude,\n      zoom: zoom,\n      bearing: bearing,\n      pitch: pitch,\n      altitude: altitude,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n      maxPitch: maxPitch,\n      minPitch: minPitch,\n      normalize: normalize,\n      position: position\n    });\n    _this._state = {\n      startPanLngLat: startPanLngLat,\n      startZoomLngLat: startZoomLngLat,\n      startRotatePos: startRotatePos,\n      startBearing: startBearing,\n      startPitch: startPitch,\n      startZoom: startZoom\n    };\n    _this.makeViewport = makeViewport;\n    return _this;\n  }\n\n  _createClass(MapState, [{\n    key: \"panStart\",\n    value: function panStart(_ref2) {\n      var pos = _ref2.pos;\n      return this._getUpdatedState({\n        startPanLngLat: this._unproject(pos)\n      });\n    }\n  }, {\n    key: \"pan\",\n    value: function pan(_ref3) {\n      var pos = _ref3.pos,\n          startPos = _ref3.startPos;\n\n      var startPanLngLat = this._state.startPanLngLat || this._unproject(startPos);\n\n      if (!startPanLngLat) {\n        return this;\n      }\n\n      var viewport = this.makeViewport(this._viewportProps);\n      var newProps = viewport.panByPosition(startPanLngLat, pos);\n      return this._getUpdatedState(newProps);\n    }\n  }, {\n    key: \"panEnd\",\n    value: function panEnd() {\n      return this._getUpdatedState({\n        startPanLngLat: null\n      });\n    }\n  }, {\n    key: \"rotateStart\",\n    value: function rotateStart(_ref4) {\n      var pos = _ref4.pos;\n      return this._getUpdatedState({\n        startRotatePos: pos,\n        startBearing: this._viewportProps.bearing,\n        startPitch: this._viewportProps.pitch\n      });\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(_ref5) {\n      var pos = _ref5.pos,\n          _ref5$deltaAngleX = _ref5.deltaAngleX,\n          deltaAngleX = _ref5$deltaAngleX === void 0 ? 0 : _ref5$deltaAngleX,\n          _ref5$deltaAngleY = _ref5.deltaAngleY,\n          deltaAngleY = _ref5$deltaAngleY === void 0 ? 0 : _ref5$deltaAngleY;\n      var _this$_state = this._state,\n          startRotatePos = _this$_state.startRotatePos,\n          startBearing = _this$_state.startBearing,\n          startPitch = _this$_state.startPitch;\n\n      if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n        return this;\n      }\n\n      var newRotation;\n\n      if (pos) {\n        newRotation = this._calculateNewPitchAndBearing(_objectSpread(_objectSpread({}, this._getRotationParams(pos, startRotatePos)), {}, {\n          startBearing: startBearing,\n          startPitch: startPitch\n        }));\n      } else {\n        newRotation = {\n          bearing: startBearing + deltaAngleX,\n          pitch: startPitch + deltaAngleY\n        };\n      }\n\n      return this._getUpdatedState(newRotation);\n    }\n  }, {\n    key: \"rotateEnd\",\n    value: function rotateEnd() {\n      return this._getUpdatedState({\n        startBearing: null,\n        startPitch: null\n      });\n    }\n  }, {\n    key: \"zoomStart\",\n    value: function zoomStart(_ref6) {\n      var pos = _ref6.pos;\n      return this._getUpdatedState({\n        startZoomLngLat: this._unproject(pos),\n        startZoom: this._viewportProps.zoom\n      });\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(_ref7) {\n      var pos = _ref7.pos,\n          startPos = _ref7.startPos,\n          scale = _ref7.scale;\n      var _this$_state2 = this._state,\n          startZoom = _this$_state2.startZoom,\n          startZoomLngLat = _this$_state2.startZoomLngLat;\n\n      if (!Number.isFinite(startZoom)) {\n        startZoom = this._viewportProps.zoom;\n        startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n      }\n\n      var zoom = this._calculateNewZoom({\n        scale: scale,\n        startZoom: startZoom\n      });\n\n      var zoomedViewport = this.makeViewport(_objectSpread(_objectSpread({}, this._viewportProps), {}, {\n        zoom: zoom\n      }));\n      return this._getUpdatedState(_objectSpread({\n        zoom: zoom\n      }, zoomedViewport.panByPosition(startZoomLngLat, pos)));\n    }\n  }, {\n    key: \"zoomEnd\",\n    value: function zoomEnd() {\n      return this._getUpdatedState({\n        startZoomLngLat: null,\n        startZoom: null\n      });\n    }\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      return this._zoomFromCenter(speed);\n    }\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      return this._zoomFromCenter(1 / speed);\n    }\n  }, {\n    key: \"moveLeft\",\n    value: function moveLeft() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n      return this._panFromCenter([speed, 0]);\n    }\n  }, {\n    key: \"moveRight\",\n    value: function moveRight() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n      return this._panFromCenter([-speed, 0]);\n    }\n  }, {\n    key: \"moveUp\",\n    value: function moveUp() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n      return this._panFromCenter([0, speed]);\n    }\n  }, {\n    key: \"moveDown\",\n    value: function moveDown() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n      return this._panFromCenter([0, -speed]);\n    }\n  }, {\n    key: \"rotateLeft\",\n    value: function rotateLeft() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n      return this._getUpdatedState({\n        bearing: this._viewportProps.bearing - speed\n      });\n    }\n  }, {\n    key: \"rotateRight\",\n    value: function rotateRight() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n      return this._getUpdatedState({\n        bearing: this._viewportProps.bearing + speed\n      });\n    }\n  }, {\n    key: \"rotateUp\",\n    value: function rotateUp() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      return this._getUpdatedState({\n        pitch: this._viewportProps.pitch + speed\n      });\n    }\n  }, {\n    key: \"rotateDown\",\n    value: function rotateDown() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      return this._getUpdatedState({\n        pitch: this._viewportProps.pitch - speed\n      });\n    }\n  }, {\n    key: \"shortestPathFrom\",\n    value: function shortestPathFrom(viewState) {\n      var fromProps = viewState.getViewportProps();\n\n      var props = _objectSpread({}, this._viewportProps);\n\n      var bearing = props.bearing,\n          longitude = props.longitude;\n\n      if (Math.abs(bearing - fromProps.bearing) > 180) {\n        props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n      }\n\n      if (Math.abs(longitude - fromProps.longitude) > 180) {\n        props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n      }\n\n      return props;\n    }\n  }, {\n    key: \"_zoomFromCenter\",\n    value: function _zoomFromCenter(scale) {\n      var _this$_viewportProps = this._viewportProps,\n          width = _this$_viewportProps.width,\n          height = _this$_viewportProps.height;\n      return this.zoom({\n        pos: [width / 2, height / 2],\n        scale: scale\n      });\n    }\n  }, {\n    key: \"_panFromCenter\",\n    value: function _panFromCenter(offset) {\n      var _this$_viewportProps2 = this._viewportProps,\n          width = _this$_viewportProps2.width,\n          height = _this$_viewportProps2.height;\n      return this.pan({\n        startPos: [width / 2, height / 2],\n        pos: [width / 2 + offset[0], height / 2 + offset[1]]\n      });\n    }\n  }, {\n    key: \"_getUpdatedState\",\n    value: function _getUpdatedState(newProps) {\n      return new this.constructor(_objectSpread(_objectSpread(_objectSpread({\n        makeViewport: this.makeViewport\n      }, this._viewportProps), this._state), newProps));\n    }\n  }, {\n    key: \"_applyConstraints\",\n    value: function _applyConstraints(props) {\n      var maxZoom = props.maxZoom,\n          minZoom = props.minZoom,\n          zoom = props.zoom;\n      props.zoom = clamp(zoom, minZoom, maxZoom);\n      var maxPitch = props.maxPitch,\n          minPitch = props.minPitch,\n          pitch = props.pitch;\n      props.pitch = clamp(pitch, minPitch, maxPitch);\n      var _props$normalize = props.normalize,\n          normalize = _props$normalize === void 0 ? true : _props$normalize;\n\n      if (normalize) {\n        Object.assign(props, normalizeViewportProps(props));\n      }\n\n      return props;\n    }\n  }, {\n    key: \"_unproject\",\n    value: function _unproject(pos) {\n      var viewport = this.makeViewport(this._viewportProps);\n      return pos && viewport.unproject(pos);\n    }\n  }, {\n    key: \"_calculateNewZoom\",\n    value: function _calculateNewZoom(_ref8) {\n      var scale = _ref8.scale,\n          startZoom = _ref8.startZoom;\n      var _this$_viewportProps3 = this._viewportProps,\n          maxZoom = _this$_viewportProps3.maxZoom,\n          minZoom = _this$_viewportProps3.minZoom;\n      var zoom = startZoom + Math.log2(scale);\n      return clamp(zoom, minZoom, maxZoom);\n    }\n  }, {\n    key: \"_calculateNewPitchAndBearing\",\n    value: function _calculateNewPitchAndBearing(_ref9) {\n      var deltaScaleX = _ref9.deltaScaleX,\n          deltaScaleY = _ref9.deltaScaleY,\n          startBearing = _ref9.startBearing,\n          startPitch = _ref9.startPitch;\n      deltaScaleY = clamp(deltaScaleY, -1, 1);\n      var _this$_viewportProps4 = this._viewportProps,\n          minPitch = _this$_viewportProps4.minPitch,\n          maxPitch = _this$_viewportProps4.maxPitch;\n      var bearing = startBearing + 180 * deltaScaleX;\n      var pitch = startPitch;\n\n      if (deltaScaleY > 0) {\n        pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n      } else if (deltaScaleY < 0) {\n        pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n      }\n\n      return {\n        pitch: pitch,\n        bearing: bearing\n      };\n    }\n  }, {\n    key: \"_getRotationParams\",\n    value: function _getRotationParams(pos, startPos) {\n      var deltaX = pos[0] - startPos[0];\n      var deltaY = pos[1] - startPos[1];\n      var centerY = pos[1];\n      var startY = startPos[1];\n      var _this$_viewportProps5 = this._viewportProps,\n          width = _this$_viewportProps5.width,\n          height = _this$_viewportProps5.height;\n      var deltaScaleX = deltaX / width;\n      var deltaScaleY = 0;\n\n      if (deltaY > 0) {\n        if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n          deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL;\n        }\n      } else if (deltaY < 0) {\n        if (startY > PITCH_MOUSE_THRESHOLD) {\n          deltaScaleY = 1 - centerY / startY;\n        }\n      }\n\n      deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n      return {\n        deltaScaleX: deltaScaleX,\n        deltaScaleY: deltaScaleY\n      };\n    }\n  }]);\n\n  return MapState;\n}(ViewState);\n\nvar MapController = /*#__PURE__*/function (_Controller) {\n  _inherits(MapController, _Controller);\n\n  var _super2 = _createSuper(MapController);\n\n  function MapController(props) {\n    _classCallCheck(this, MapController);\n\n    props.dragMode = props.dragMode || 'pan';\n    return _super2.call(this, MapState, props);\n  }\n\n  _createClass(MapController, [{\n    key: \"setProps\",\n    value: function setProps(props) {\n      props.position = props.position || [0, 0, 0];\n      var oldProps = this.controllerStateProps;\n\n      _get(_getPrototypeOf(MapController.prototype), \"setProps\", this).call(this, props);\n\n      var dimensionChanged = !oldProps || oldProps.height !== props.height;\n\n      if (dimensionChanged) {\n        this.updateViewport(new this.ControllerState(_objectSpread(_objectSpread({\n          makeViewport: this.makeViewport\n        }, this.controllerStateProps), this._state)));\n      }\n    }\n  }, {\n    key: \"linearTransitionProps\",\n    get: function get() {\n      return ['longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'];\n    }\n  }]);\n\n  return MapController;\n}(Controller);\n\nexport { MapController as default };","map":{"version":3,"mappings":";;;;;;;AAAA,SAAQA,KAAR,QAAoB,eAApB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAAQC,sBAAR,QAAqC,uBAArC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,IAAMC,qBAAqB,GAAG,CAA9B;AACA,IAAMC,WAAW,GAAG,GAApB;AAEA,IAAMC,aAAa,GAAG;EACpBC,KAAK,EAAE,CADa;EAEpBC,OAAO,EAAE,CAFW;EAGpBC,QAAQ,EAAE,GAHU;EAIpBC,OAAO,EAAE,CAJW;EAKpBC,OAAO,EAAE,EALW;EAMpBC,QAAQ,EAAE,CANU;EAOpBC,QAAQ,EAAE,EAPU;EAQpBC,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AARU,CAAtB;AAgEA,WAAaC,QAAb;EAAA;;EAAA;;EACEC,kBAAYC,OAAZD,EAAqC;IAAA;;IAAA;;IAEnCC,OAAO,mCAAOX,aAAP,GAAyBW,OAAzB,CAAPA;;IACA,WAiDIA,OAAO,IAAI,EAjDf;IAAA,IACEC,YADF,QACEA,YADF;IAAA,IAKEC,KALF,QAKEA,KALF;IAAA,IAOEC,MAPF,QAOEA,MAPF;IAAA,IASEC,QATF,QASEA,QATF;IAAA,IAWEC,SAXF,QAWEA,SAXF;IAAA,IAaEC,IAbF,QAaEA,IAbF;IAAA,IAeEf,OAfF,QAeEA,OAfF;IAAA,IAiBED,KAjBF,QAiBEA,KAjBF;IAAA,IAuBEE,QAvBF,QAuBEA,QAvBF;IAAA,IAyBEK,QAzBF,QAyBEA,QAzBF;IAAA,IA4BEH,OA5BF,QA4BEA,OA5BF;IAAA,IA6BED,OA7BF,QA6BEA,OA7BF;IAAA,IA8BEG,QA9BF,QA8BEA,QA9BF;IAAA,IA+BED,QA/BF,QA+BEA,QA/BF;IAAA,IAmCEY,cAnCF,QAmCEA,cAnCF;IAAA,IAqCEC,eArCF,QAqCEA,eArCF;IAAA,IAuCEC,cAvCF,QAuCEA,cAvCF;IAAA,IAyCEC,YAzCF,QAyCEA,YAzCF;IAAA,IA2CEC,UA3CF,QA2CEA,UA3CF;IAAA,IA6CEC,SA7CF,QA6CEA,SA7CF;IAAA,IAgDEC,SAhDF,QAgDEA,SAhDF;;IAmDA3B,MAAM,CAAC4B,MAAM,CAACC,QAAPD,CAAgBT,SAAhBS,CAAD,CAAN5B;IACAA,MAAM,CAAC4B,MAAM,CAACC,QAAPD,CAAgBV,QAAhBU,CAAD,CAAN5B;IACAA,MAAM,CAAC4B,MAAM,CAACC,QAAPD,CAAgBR,IAAhBQ,CAAD,CAAN5B;IAEA,0BAAM;MACJgB,KADI,EACJA,KADI;MAEJC,MAFI,EAEJA,MAFI;MAGJC,QAHI,EAGJA,QAHI;MAIJC,SAJI,EAIJA,SAJI;MAKJC,IALI,EAKJA,IALI;MAMJf,OANI,EAMJA,OANI;MAOJD,KAPI,EAOJA,KAPI;MAQJE,QARI,EAQJA,QARI;MASJE,OATI,EASJA,OATI;MAUJD,OAVI,EAUJA,OAVI;MAWJG,QAXI,EAWJA,QAXI;MAYJD,QAZI,EAYJA,QAZI;MAaJkB,SAbI,EAaJA,SAbI;MAcJhB;IAdI,CAAN;IAiBA,MAAKmB,MAAL,GAAc;MACZT,cADY,EACZA,cADY;MAEZC,eAFY,EAEZA,eAFY;MAGZC,cAHY,EAGZA,cAHY;MAIZC,YAJY,EAIZA,YAJY;MAKZC,UALY,EAKZA,UALY;MAMZC;IANY,CAAd;IASA,MAAKX,YAAL,GAAoBA,YAApB;IApFmC;EAqFpC;;EAtFH;IAAA;IAAA,OA4FEgB,yBAAgB;MAAA,IAANC,GAAM,SAANA,GAAM;MACd,OAAO,KAAKC,gBAAL,CAAsB;QAC3BZ,cAAc,EAAE,KAAKa,UAAL,CAAgBF,GAAhB;MADW,CAAtB,CAAP;IAGD;EAhGH;IAAA;IAAA,OAwGEG,oBAAqB;MAAA,IAAhBH,GAAgB,SAAhBA,GAAgB;MAAA,IAAXI,QAAW,SAAXA,QAAW;;MACnB,IAAMf,cAAc,GAAG,KAAKS,MAAL,CAAYT,cAAZ,IAA8B,KAAKa,UAAL,CAAgBE,QAAhB,CAArD;;MAEA,IAAI,CAACf,cAAL,EAAqB;QACnB,OAAO,IAAP;MACD;;MAED,IAAMgB,QAAQ,GAAG,KAAKtB,YAAL,CAAkB,KAAKuB,cAAvB,CAAjB;MACA,IAAMC,QAAQ,GAAGF,QAAQ,CAACG,aAATH,CAAuBhB,cAAvBgB,EAAuCL,GAAvCK,CAAjB;MAEA,OAAO,KAAKJ,gBAAL,CAAsBM,QAAtB,CAAP;IACD;EAnHH;IAAA;IAAA,OAyHEE,kBAAS;MACP,OAAO,KAAKR,gBAAL,CAAsB;QAC3BZ,cAAc,EAAE;MADW,CAAtB,CAAP;IAGD;EA7HH;IAAA;IAAA,OAmIEqB,4BAAmB;MAAA,IAANV,GAAM,SAANA,GAAM;MACjB,OAAO,KAAKC,gBAAL,CAAsB;QAC3BV,cAAc,EAAES,GADW;QAE3BR,YAAY,EAAE,KAAKc,cAAL,CAAoBjC,OAFP;QAG3BoB,UAAU,EAAE,KAAKa,cAAL,CAAoBlC;MAHL,CAAtB,CAAP;IAKD;EAzIH;IAAA;IAAA,OA+IEuC,uBAAgD;MAAA,IAAxCX,GAAwC,SAAxCA,GAAwC;MAAA,8BAAnCY,WAAmC;MAAA,IAAnCA,WAAmC,kCAArB,CAAqB;MAAA,8BAAlBC,WAAkB;MAAA,IAAlBA,WAAkB,kCAAJ,CAAI;MAC9C,mBAAmD,KAAKf,MAAxD;MAAA,IAAOP,cAAP,gBAAOA,cAAP;MAAA,IAAuBC,YAAvB,gBAAuBA,YAAvB;MAAA,IAAqCC,UAArC,gBAAqCA,UAArC;;MAEA,IAAI,CAACF,cAAD,IAAmB,CAACK,MAAM,CAACC,QAAPD,CAAgBJ,YAAhBI,CAApB,IAAqD,CAACA,MAAM,CAACC,QAAPD,CAAgBH,UAAhBG,CAA1D,EAAuF;QACrF,OAAO,IAAP;MACD;;MACD,IAAIkB,WAAJ;;MACA,IAAId,GAAJ,EAAS;QACPc,WAAW,GAAG,KAAKC,4BAAL,iCACT,KAAKC,kBAAL,CAAwBhB,GAAxB,EAA6BT,cAA7B,CADS;UAEZC,YAF8C,EAE9CA,YAFY;UAGZC;QAHY,GAAdqB;MADF,OAMO;QACLA,WAAW,GAAG;UACZzC,OAAO,EAAEmB,YAAY,GAAGoB,WADZ;UAEZxC,KAAK,EAAEqB,UAAU,GAAGoB;QAFR,CAAdC;MAID;;MACD,OAAO,KAAKb,gBAAL,CAAsBa,WAAtB,CAAP;IACD;EAnKH;IAAA;IAAA,OAyKEG,qBAAY;MACV,OAAO,KAAKhB,gBAAL,CAAsB;QAC3BT,YAAY,EAAE,IADa;QAE3BC,UAAU,EAAE;MAFe,CAAtB,CAAP;IAID;EA9KH;IAAA;IAAA,OAoLEyB,0BAAiB;MAAA,IAANlB,GAAM,SAANA,GAAM;MACf,OAAO,KAAKC,gBAAL,CAAsB;QAC3BX,eAAe,EAAE,KAAKY,UAAL,CAAgBF,GAAhB,CADU;QAE3BN,SAAS,EAAE,KAAKY,cAAL,CAAoBlB;MAFJ,CAAtB,CAAP;IAID;EAzLH;IAAA;IAAA,OAmMEA,qBAA6B;MAAA,IAAvBY,GAAuB,SAAvBA,GAAuB;MAAA,IAAlBI,QAAkB,SAAlBA,QAAkB;MAAA,IAARe,KAAQ,SAARA,KAAQ;MAE3B,oBAAmC,KAAKrB,MAAxC;MAAA,IAAKJ,SAAL,iBAAKA,SAAL;MAAA,IAAgBJ,eAAhB,iBAAgBA,eAAhB;;MAEA,IAAI,CAACM,MAAM,CAACC,QAAPD,CAAgBF,SAAhBE,CAAL,EAAiC;QAO/BF,SAAS,GAAG,KAAKY,cAAL,CAAoBlB,IAAhCM;QACAJ,eAAe,GAAG,KAAKY,UAAL,CAAgBE,QAAhB,KAA6B,KAAKF,UAAL,CAAgBF,GAAhB,CAA/CV;MACD;;MAED,IAAMF,IAAI,GAAG,KAAKgC,iBAAL,CAAuB;QAACD,KAAD,EAACA,KAAD;QAAQzB;MAAR,CAAvB,CAAb;;MAEA,IAAM2B,cAAc,GAAG,KAAKtC,YAAL,iCAAsB,KAAKuB,cAA3B;QAA2ClB;MAA3C,GAAvB;MAEA,OAAO,KAAKa,gBAAL;QACLb,IAD2B,EAC3BA;MADK,GAEFiC,cAAc,CAACb,aAAfa,CAA6B/B,eAA7B+B,EAA8CrB,GAA9CqB,CAFE,EAAP;IAID;EA1NH;IAAA;IAAA,OAgOEC,mBAAU;MACR,OAAO,KAAKrB,gBAAL,CAAsB;QAC3BX,eAAe,EAAE,IADU;QAE3BI,SAAS,EAAE;MAFgB,CAAtB,CAAP;IAID;EArOH;IAAA;IAAA,OAuOE6B,kBAAkB;MAAA,IAAXC,KAAW,uEAAH,CAAG;MAChB,OAAO,KAAKC,eAAL,CAAqBD,KAArB,CAAP;IACD;EAzOH;IAAA;IAAA,OA2OEE,mBAAmB;MAAA,IAAXF,KAAW,uEAAH,CAAG;MACjB,OAAO,KAAKC,eAAL,CAAqB,IAAID,KAAzB,CAAP;IACD;EA7OH;IAAA;IAAA,OA+OEG,oBAAsB;MAAA,IAAbH,KAAa,uEAAL,GAAK;MACpB,OAAO,KAAKI,cAAL,CAAoB,CAACJ,KAAD,EAAQ,CAAR,CAApB,CAAP;IACD;EAjPH;IAAA;IAAA,OAmPEK,qBAAuB;MAAA,IAAbL,KAAa,uEAAL,GAAK;MACrB,OAAO,KAAKI,cAAL,CAAoB,CAAC,CAACJ,KAAF,EAAS,CAAT,CAApB,CAAP;IACD;EArPH;IAAA;IAAA,OAuPEM,kBAAoB;MAAA,IAAbN,KAAa,uEAAL,GAAK;MAClB,OAAO,KAAKI,cAAL,CAAoB,CAAC,CAAD,EAAIJ,KAAJ,CAApB,CAAP;IACD;EAzPH;IAAA;IAAA,OA2PEO,oBAAsB;MAAA,IAAbP,KAAa,uEAAL,GAAK;MACpB,OAAO,KAAKI,cAAL,CAAoB,CAAC,CAAD,EAAI,CAACJ,KAAL,CAApB,CAAP;IACD;EA7PH;IAAA;IAAA,OA+PEQ,sBAAuB;MAAA,IAAZR,KAAY,uEAAJ,EAAI;MACrB,OAAO,KAAKvB,gBAAL,CAAsB;QAC3B5B,OAAO,EAAE,KAAKiC,cAAL,CAAoBjC,OAApB,GAA8BmD;MADZ,CAAtB,CAAP;IAGD;EAnQH;IAAA;IAAA,OAqQES,uBAAwB;MAAA,IAAZT,KAAY,uEAAJ,EAAI;MACtB,OAAO,KAAKvB,gBAAL,CAAsB;QAC3B5B,OAAO,EAAE,KAAKiC,cAAL,CAAoBjC,OAApB,GAA8BmD;MADZ,CAAtB,CAAP;IAGD;EAzQH;IAAA;IAAA,OA2QEU,oBAAqB;MAAA,IAAZV,KAAY,uEAAJ,EAAI;MACnB,OAAO,KAAKvB,gBAAL,CAAsB;QAC3B7B,KAAK,EAAE,KAAKkC,cAAL,CAAoBlC,KAApB,GAA4BoD;MADR,CAAtB,CAAP;IAGD;EA/QH;IAAA;IAAA,OAiREW,sBAAuB;MAAA,IAAZX,KAAY,uEAAJ,EAAI;MACrB,OAAO,KAAKvB,gBAAL,CAAsB;QAC3B7B,KAAK,EAAE,KAAKkC,cAAL,CAAoBlC,KAApB,GAA4BoD;MADR,CAAtB,CAAP;IAGD;EArRH;IAAA;IAAA,OAuREY,0BAAiBC,SAAjBD,EAA4B;MAE1B,IAAME,SAAS,GAAGD,SAAS,CAACE,gBAAVF,EAAlB;;MACA,IAAMG,KAAK,qBAAO,KAAKlC,cAAZ,CAAX;;MACA,IAAOjC,OAAP,GAA6BmE,KAA7B,CAAOnE,OAAP;MAAA,IAAgBc,SAAhB,GAA6BqD,KAA7B,CAAgBrD,SAAhB;;MAEA,IAAIsD,IAAI,CAACC,GAALD,CAASpE,OAAO,GAAGiE,SAAS,CAACjE,OAA7BoE,IAAwC,GAA5C,EAAiD;QAC/CD,KAAK,CAACnE,OAANmE,GAAgBnE,OAAO,GAAG,CAAVA,GAAcA,OAAO,GAAG,GAAxBA,GAA8BA,OAAO,GAAG,GAAxDmE;MACD;;MACD,IAAIC,IAAI,CAACC,GAALD,CAAStD,SAAS,GAAGmD,SAAS,CAACnD,SAA/BsD,IAA4C,GAAhD,EAAqD;QACnDD,KAAK,CAACrD,SAANqD,GAAkBrD,SAAS,GAAG,CAAZA,GAAgBA,SAAS,GAAG,GAA5BA,GAAkCA,SAAS,GAAG,GAAhEqD;MACD;;MACD,OAAOA,KAAP;IACD;EApSH;IAAA;IAAA,OAwSEf,yBAAgBN,KAAhBM,EAAuB;MACrB,2BAAwB,KAAKnB,cAA7B;MAAA,IAAOtB,KAAP,wBAAOA,KAAP;MAAA,IAAcC,MAAd,wBAAcA,MAAd;MACA,OAAO,KAAKG,IAAL,CAAU;QACfY,GAAG,EAAE,CAAChB,KAAK,GAAG,CAAT,EAAYC,MAAM,GAAG,CAArB,CADU;QAEfkC;MAFe,CAAV,CAAP;IAID;EA9SH;IAAA;IAAA,OAgTES,wBAAee,MAAff,EAAuB;MACrB,4BAAwB,KAAKtB,cAA7B;MAAA,IAAOtB,KAAP,yBAAOA,KAAP;MAAA,IAAcC,MAAd,yBAAcA,MAAd;MACA,OAAO,KAAKkB,GAAL,CAAS;QACdC,QAAQ,EAAE,CAACpB,KAAK,GAAG,CAAT,EAAYC,MAAM,GAAG,CAArB,CADI;QAEde,GAAG,EAAE,CAAChB,KAAK,GAAG,CAARA,GAAY2D,MAAM,CAAC,CAAD,CAAnB,EAAwB1D,MAAM,GAAG,CAATA,GAAa0D,MAAM,CAAC,CAAD,CAA3C;MAFS,CAAT,CAAP;IAID;EAtTH;IAAA;IAAA,OAwTE1C,0BAAiBM,QAAjBN,EAA2B;MAEzB,OAAO,IAAI,KAAKpB,WAAT;QACLE,YAAY,EAAE,KAAKA;MADd,GAEF,KAAKuB,cAFH,GAGF,KAAKR,MAHH,GAIFS,QAJE,EAAP;IAMD;EAhUH;IAAA;IAAA,OAmUEqC,2BAAkBJ,KAAlBI,EAAyB;MAEvB,IAAOpE,OAAP,GAAiCgE,KAAjC,CAAOhE,OAAP;MAAA,IAAgBD,OAAhB,GAAiCiE,KAAjC,CAAgBjE,OAAhB;MAAA,IAAyBa,IAAzB,GAAiCoD,KAAjC,CAAyBpD,IAAzB;MACAoD,KAAK,CAACpD,IAANoD,GAAa5E,KAAK,CAACwB,IAAD,EAAOb,OAAP,EAAgBC,OAAhB,CAAlBgE;MAGA,IAAO9D,QAAP,GAAoC8D,KAApC,CAAO9D,QAAP;MAAA,IAAiBD,QAAjB,GAAoC+D,KAApC,CAAiB/D,QAAjB;MAAA,IAA2BL,KAA3B,GAAoCoE,KAApC,CAA2BpE,KAA3B;MACAoE,KAAK,CAACpE,KAANoE,GAAc5E,KAAK,CAACQ,KAAD,EAAQK,QAAR,EAAkBC,QAAlB,CAAnB8D;MAGA,uBAA2BA,KAA3B,CAAO7C,SAAP;MAAA,IAAOA,SAAP,iCAAmB,IAAnB;;MACA,IAAIA,SAAJ,EAAe;QACbkD,MAAM,CAACC,MAAPD,CAAcL,KAAdK,EAAqB9E,sBAAsB,CAACyE,KAAD,CAA3CK;MACD;;MAED,OAAOL,KAAP;IACD;EAnVH;IAAA;IAAA,OAqVEtC,oBAAWF,GAAXE,EAAgB;MACd,IAAMG,QAAQ,GAAG,KAAKtB,YAAL,CAAkB,KAAKuB,cAAvB,CAAjB;MACA,OAAON,GAAG,IAAIK,QAAQ,CAAC0C,SAAT1C,CAAmBL,GAAnBK,CAAd;IACD;EAxVH;IAAA;IAAA,OA2VEe,kCAAsC;MAAA,IAAnBD,KAAmB,SAAnBA,KAAmB;MAAA,IAAZzB,SAAY,SAAZA,SAAY;MACpC,4BAA2B,KAAKY,cAAhC;MAAA,IAAO9B,OAAP,yBAAOA,OAAP;MAAA,IAAgBD,OAAhB,yBAAgBA,OAAhB;MACA,IAAMa,IAAI,GAAGM,SAAS,GAAG+C,IAAI,CAACO,IAALP,CAAUtB,KAAVsB,CAAzB;MACA,OAAO7E,KAAK,CAACwB,IAAD,EAAOb,OAAP,EAAgBC,OAAhB,CAAZ;IACD;EA/VH;IAAA;IAAA,OAkWEuC,6CAAmF;MAAA,IAArDkC,WAAqD,SAArDA,WAAqD;MAAA,IAAxCC,WAAwC,SAAxCA,WAAwC;MAAA,IAA3B1D,YAA2B,SAA3BA,YAA2B;MAAA,IAAbC,UAAa,SAAbA,UAAa;MAGjFyD,WAAW,GAAGtF,KAAK,CAACsF,WAAD,EAAc,CAAC,CAAf,EAAkB,CAAlB,CAAnBA;MAEA,4BAA6B,KAAK5C,cAAlC;MAAA,IAAO7B,QAAP,yBAAOA,QAAP;MAAA,IAAiBC,QAAjB,yBAAiBA,QAAjB;MAEA,IAAML,OAAO,GAAGmB,YAAY,GAAG,MAAMyD,WAArC;MACA,IAAI7E,KAAK,GAAGqB,UAAZ;;MACA,IAAIyD,WAAW,GAAG,CAAlB,EAAqB;QAEnB9E,KAAK,GAAGqB,UAAU,GAAGyD,WAAW,IAAIxE,QAAQ,GAAGe,UAAf,CAAhCrB;MAFF,OAGO,IAAI8E,WAAW,GAAG,CAAlB,EAAqB;QAE1B9E,KAAK,GAAGqB,UAAU,GAAGyD,WAAW,IAAIzE,QAAQ,GAAGgB,UAAf,CAAhCrB;MACD;;MAED,OAAO;QACLA,KADK,EACLA,KADK;QAELC;MAFK,CAAP;IAID;EAvXH;IAAA;IAAA,OAyXE2C,4BAAmBhB,GAAnBgB,EAAwBZ,QAAxBY,EAAkC;MAChC,IAAMmC,MAAM,GAAGnD,GAAG,CAAC,CAAD,CAAHA,GAASI,QAAQ,CAAC,CAAD,CAAhC;MACA,IAAMgD,MAAM,GAAGpD,GAAG,CAAC,CAAD,CAAHA,GAASI,QAAQ,CAAC,CAAD,CAAhC;MACA,IAAMiD,OAAO,GAAGrD,GAAG,CAAC,CAAD,CAAnB;MACA,IAAMsD,MAAM,GAAGlD,QAAQ,CAAC,CAAD,CAAvB;MACA,4BAAwB,KAAKE,cAA7B;MAAA,IAAOtB,KAAP,yBAAOA,KAAP;MAAA,IAAcC,MAAd,yBAAcA,MAAd;MAEA,IAAMgE,WAAW,GAAGE,MAAM,GAAGnE,KAA7B;MACA,IAAIkE,WAAW,GAAG,CAAlB;;MAEA,IAAIE,MAAM,GAAG,CAAb,EAAgB;QACd,IAAIX,IAAI,CAACC,GAALD,CAASxD,MAAM,GAAGqE,MAAlBb,IAA4BxE,qBAAhC,EAAuD;UAErDiF,WAAW,GAAIE,MAAM,IAAIE,MAAM,GAAGrE,MAAb,CAANmE,GAA8BlF,WAA7CgF;QACD;MAJH,OAKO,IAAIE,MAAM,GAAG,CAAb,EAAgB;QACrB,IAAIE,MAAM,GAAGrF,qBAAb,EAAoC;UAElCiF,WAAW,GAAG,IAAIG,OAAO,GAAGC,MAA5BJ;QACD;MACF;;MACDA,WAAW,GAAGT,IAAI,CAACc,GAALd,CAAS,CAATA,EAAYA,IAAI,CAACe,GAALf,CAAS,CAAC,CAAVA,EAAaS,WAAbT,CAAZA,CAAdS;MACA,OAAO;QAACD,WAAD,EAACA,WAAD;QAAcC;MAAd,CAAP;IACD;EAhZH;;EAAA;AAAA,EAA8BpF,SAA9B;;IAmZqB2F,a;;;;;EACnB5E,uBAAY2D,KAAZ3D,EAAmB;IAAA;;IACjB2D,KAAK,CAACkB,QAANlB,GAAiBA,KAAK,CAACkB,QAANlB,IAAkB,KAAnCA;IADiB,0BAEX5D,QAFW,EAED4D,KAFC;EAGlB;;;;WAEDmB,kBAASnB,KAATmB,EAAgB;MACdnB,KAAK,CAAC7D,QAAN6D,GAAiBA,KAAK,CAAC7D,QAAN6D,IAAkB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAnCA;MACA,IAAMoB,QAAQ,GAAG,KAAKC,oBAAtB;;MAEA,4EAAerB,KAAf;;MAEA,IAAMsB,gBAAgB,GAAG,CAACF,QAAD,IAAaA,QAAQ,CAAC3E,MAAT2E,KAAoBpB,KAAK,CAACvD,MAAhE;;MACA,IAAI6E,gBAAJ,EAAsB;QAEpB,KAAKC,cAAL,CACE,IAAI,KAAKC,eAAT;UACEjF,YAAY,EAAE,KAAKA;QADrB,GAEK,KAAK8E,oBAFV,GAGK,KAAK/D,MAHV,EADF;MAOD;IACF;;;SAEwB,eAAG;MAC1B,OAAO,CAAC,WAAD,EAAc,UAAd,EAA0B,MAA1B,EAAkC,SAAlC,EAA6C,OAA7C,EAAsD,UAAtD,CAAP;IACD;;;;EA3BwCjC,U;;SAAtB4F,a","names":["clamp","Controller","ViewState","normalizeViewportProps","assert","PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","DEFAULT_STATE","pitch","bearing","altitude","minZoom","maxZoom","minPitch","maxPitch","position","MapState","constructor","options","makeViewport","width","height","latitude","longitude","zoom","startPanLngLat","startZoomLngLat","startRotatePos","startBearing","startPitch","startZoom","normalize","Number","isFinite","_state","panStart","pos","_getUpdatedState","_unproject","pan","startPos","viewport","_viewportProps","newProps","panByPosition","panEnd","rotateStart","rotate","deltaAngleX","deltaAngleY","newRotation","_calculateNewPitchAndBearing","_getRotationParams","rotateEnd","zoomStart","scale","_calculateNewZoom","zoomedViewport","zoomEnd","zoomIn","speed","_zoomFromCenter","zoomOut","moveLeft","_panFromCenter","moveRight","moveUp","moveDown","rotateLeft","rotateRight","rotateUp","rotateDown","shortestPathFrom","viewState","fromProps","getViewportProps","props","Math","abs","offset","_applyConstraints","Object","assign","unproject","log2","deltaScaleX","deltaScaleY","deltaX","deltaY","centerY","startY","min","max","MapController","dragMode","setProps","oldProps","controllerStateProps","dimensionChanged","updateViewport","ControllerState"],"sources":["../../../src/controllers/map-controller.ts"],"sourcesContent":["import {clamp} from '@math.gl/core';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport {normalizeViewportProps} from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\n\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5,\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60,\n  position: [0, 0, 0]\n};\n\ntype MapStateProps = {\n  makeViewport;\n\n  /** Mapbox viewport properties */\n  /** The width of the viewport */\n  width;\n  /** The height of the viewport */\n  height;\n  /** The latitude at the center of the viewport */\n  latitude;\n  /** The longitude at the center of the viewport */\n  longitude;\n  /** The tile zoom level of the map. */\n  zoom;\n  /** The bearing of the viewport in degrees */\n  bearing?: number;\n  /** The pitch of the viewport in degrees */\n  pitch?: number;\n  /**\n   * Specify the altitude of the viewport camera\n   * Unit: map heights, default 1.5\n   * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n   */\n  altitude?: number;\n  /** Viewport position */\n  position?: [number, number, number];\n\n  /** Viewport constraints */\n  maxZoom?: number;\n  minZoom?: number;\n  maxPitch?: number;\n  minPitch?: number;\n\n  /** Interaction states, required to calculate change during transform */\n  /* The point on map being grabbed when the operation first started */\n  startPanLngLat;\n  /* Center of the zoom when the operation first started */\n  startZoomLngLat;\n  /* Pointer position when rotation started */\n  startRotatePos;\n  /** Bearing when current perspective rotate operation started */\n  startBearing;\n  /** Pitch when current perspective rotate operation started */\n  startPitch;\n  /** Zoom when current zoom operation started */\n  startZoom;\n\n  /** Normalize viewport props to fit map height into viewport. Default `true` */\n  normalize;\n};\n\n/* Utils */\n\nexport class MapState extends ViewState {\n  constructor(options?: MapStateProps) {\n    // @ts-expect-error\n    options = {...DEFAULT_STATE, ...options};\n    const {\n      makeViewport,\n\n      /** Mapbox viewport properties */\n      /** The width of the viewport */\n      width,\n      /** The height of the viewport */\n      height,\n      /** The latitude at the center of the viewport */\n      latitude,\n      /** The longitude at the center of the viewport */\n      longitude,\n      /** The tile zoom level of the map. */\n      zoom,\n      /** The bearing of the viewport in degrees */\n      bearing,\n      /** The pitch of the viewport in degrees */\n      pitch,\n      /**\n       * Specify the altitude of the viewport camera\n       * Unit: map heights, default 1.5\n       * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n       */\n      altitude,\n      /** Viewport position */\n      position,\n\n      /** Viewport constraints */\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n\n      /** Interaction states, required to calculate change during transform */\n      /* The point on map being grabbed when the operation first started */\n      startPanLngLat,\n      /* Center of the zoom when the operation first started */\n      startZoomLngLat,\n      /* Pointer position when rotation started */\n      startRotatePos,\n      /** Bearing when current perspective rotate operation started */\n      startBearing,\n      /** Pitch when current perspective rotate operation started */\n      startPitch,\n      /** Zoom when current zoom operation started */\n      startZoom,\n\n      /** Normalize viewport props to fit map height into viewport. Default `true` */\n      normalize\n    } = options || {};\n\n    assert(Number.isFinite(longitude)); // `longitude` must be supplied\n    assert(Number.isFinite(latitude)); // `latitude` must be supplied\n    assert(Number.isFinite(zoom)); // `zoom` must be supplied\n\n    super({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n      normalize,\n      position\n    });\n\n    this._state = {\n      startPanLngLat,\n      startZoomLngLat,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n\n    this.makeViewport = makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}) {\n    const startPanLngLat = this._state.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this._viewportProps);\n    const newProps = viewport.panByPosition(startPanLngLat, pos);\n\n    return this._getUpdatedState(newProps);\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startBearing, startPitch} = this._state;\n\n    if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n    let newRotation;\n    if (pos) {\n      newRotation = this._calculateNewPitchAndBearing({\n        ...this._getRotationParams(pos, startRotatePos),\n        startBearing,\n        startPitch\n      });\n    } else {\n      newRotation = {\n        bearing: startBearing + deltaAngleX,\n        pitch: startPitch + deltaAngleY\n      };\n    }\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._state;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    const zoom = this._calculateNewZoom({scale, startZoom});\n\n    const zoomedViewport = this.makeViewport({...this._viewportProps, zoom});\n\n    return this._getUpdatedState({\n      zoom,\n      ...zoomedViewport.panByPosition(startZoomLngLat, pos)\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this._zoomFromCenter(speed);\n  }\n\n  zoomOut(speed = 2) {\n    return this._zoomFromCenter(1 / speed);\n  }\n\n  moveLeft(speed = 100) {\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveRight(speed = 100) {\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveUp(speed = 100) {\n    return this._panFromCenter([0, speed]);\n  }\n\n  moveDown(speed = 100) {\n    return this._panFromCenter([0, -speed]);\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - speed\n    });\n  }\n\n  shortestPathFrom(viewState) {\n    // const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n    const fromProps = viewState.getViewportProps();\n    const props = {...this._viewportProps};\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n\n  _zoomFromCenter(scale) {\n    const {width, height} = this._viewportProps;\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {width, height} = this._viewportProps;\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this._viewportProps,\n      ...this._state,\n      ...newProps\n    });\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize viewport props to fit map height into viewport\n    const {normalize = true} = props;\n    if (normalize) {\n      Object.assign(props, normalizeViewportProps(props));\n    }\n\n    return props;\n  }\n\n  _unproject(pos) {\n    const viewport = this.makeViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({deltaScaleX, deltaScaleY, startBearing, startPitch}) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n\n  _getRotationParams(pos, startPos) {\n    const deltaX = pos[0] - startPos[0];\n    const deltaY = pos[1] - startPos[1];\n    const centerY = pos[1];\n    const startY = startPos[1];\n    const {width, height} = this._viewportProps;\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n    return {deltaScaleX, deltaScaleY};\n  }\n}\n\nexport default class MapController extends Controller {\n  constructor(props) {\n    props.dragMode = props.dragMode || 'pan';\n    super(MapState, props);\n  }\n\n  setProps(props) {\n    props.position = props.position || [0, 0, 0];\n    const oldProps = this.controllerStateProps;\n\n    super.setProps(props);\n\n    const dimensionChanged = !oldProps || oldProps.height !== props.height;\n    if (dimensionChanged) {\n      // Dimensions changed, normalize the props\n      this.updateViewport(\n        new this.ControllerState({\n          makeViewport: this.makeViewport,\n          ...this.controllerStateProps,\n          ...this._state\n        })\n      );\n    }\n  }\n\n  get linearTransitionProps() {\n    return ['longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}