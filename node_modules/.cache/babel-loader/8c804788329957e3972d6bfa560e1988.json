{"ast":null,"code":"const VERSION = typeof \"3.1.8\" !== 'undefined' ? \"3.1.8\" : 'latest';\nimport { loadLibrary } from '@loaders.gl/worker-utils';\nconst BASIS_CDN_ENCODER_WASM = \"https://unpkg.com/@loaders.gl/textures@\".concat(VERSION, \"/dist/libs/basis_encoder.wasm\");\nconst BASIS_CDN_ENCODER_JS = \"https://unpkg.com/@loaders.gl/textures@\".concat(VERSION, \"/dist/libs/basis_encoder.js\");\nlet loadBasisTranscoderPromise;\nexport async function loadBasisTrascoderModule(options) {\n  const modules = options.modules || {};\n\n  if (modules.basis) {\n    return modules.basis;\n  }\n\n  loadBasisTranscoderPromise = loadBasisTranscoderPromise || loadBasisTrascoder(options);\n  return await loadBasisTranscoderPromise;\n}\n\nasync function loadBasisTrascoder(options) {\n  let BASIS = null;\n  let wasmBinary = null;\n  [BASIS, wasmBinary] = await Promise.all([await loadLibrary('basis_transcoder.js', 'textures', options), await loadLibrary('basis_transcoder.wasm', 'textures', options)]);\n  BASIS = BASIS || globalThis.BASIS;\n  return await initializeBasisTrascoderModule(BASIS, wasmBinary);\n}\n\nfunction initializeBasisTrascoderModule(BasisModule, wasmBinary) {\n  const options = {};\n\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise(resolve => {\n    BasisModule(options).then(module => {\n      const {\n        BasisFile,\n        initializeBasis\n      } = module;\n      initializeBasis();\n      resolve({\n        BasisFile\n      });\n    });\n  });\n}\n\nlet loadBasisEncoderPromise;\nexport async function loadBasisEncoderModule(options) {\n  const modules = options.modules || {};\n\n  if (modules.basisEncoder) {\n    return modules.basisEncoder;\n  }\n\n  loadBasisEncoderPromise = loadBasisEncoderPromise || loadBasisEncoder(options);\n  return await loadBasisEncoderPromise;\n}\n\nasync function loadBasisEncoder(options) {\n  let BASIS_ENCODER = null;\n  let wasmBinary = null;\n  [BASIS_ENCODER, wasmBinary] = await Promise.all([await loadLibrary(BASIS_CDN_ENCODER_JS, 'textures', options), await loadLibrary(BASIS_CDN_ENCODER_WASM, 'textures', options)]);\n  BASIS_ENCODER = BASIS_ENCODER || globalThis.BASIS;\n  return await initializeBasisEncoderModule(BASIS_ENCODER, wasmBinary);\n}\n\nfunction initializeBasisEncoderModule(BasisEncoderModule, wasmBinary) {\n  const options = {};\n\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise(resolve => {\n    BasisEncoderModule(options).then(module => {\n      const {\n        BasisFile,\n        KTX2File,\n        initializeBasis,\n        BasisEncoder\n      } = module;\n      initializeBasis();\n      resolve({\n        BasisFile,\n        KTX2File,\n        BasisEncoder\n      });\n    });\n  });\n}","map":{"version":3,"mappings":"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","names":["VERSION","loadLibrary","BASIS_CDN_ENCODER_WASM","BASIS_CDN_ENCODER_JS","loadBasisTranscoderPromise","loadBasisTrascoderModule","options","modules","basis","loadBasisTrascoder","BASIS","wasmBinary","Promise","all","globalThis","initializeBasisTrascoderModule","BasisModule","resolve","then","module","BasisFile","initializeBasis","loadBasisEncoderPromise","loadBasisEncoderModule","basisEncoder","loadBasisEncoder","BASIS_ENCODER","initializeBasisEncoderModule","BasisEncoderModule","KTX2File","BasisEncoder"],"sources":["../../../../src/lib/parsers/basis-module-loader.ts"],"sourcesContent":["// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\n// @ts-nocheck\nimport {loadLibrary} from '@loaders.gl/worker-utils';\n\nconst BASIS_CDN_ENCODER_WASM = `https://unpkg.com/@loaders.gl/textures@${VERSION}/dist/libs/basis_encoder.wasm`;\nconst BASIS_CDN_ENCODER_JS = `https://unpkg.com/@loaders.gl/textures@${VERSION}/dist/libs/basis_encoder.js`;\n\nlet loadBasisTranscoderPromise;\n\n/**\n * Loads wasm transcoder module\n * @param options\n * @returns {BasisFile} promise\n */\nexport async function loadBasisTrascoderModule(options) {\n  const modules = options.modules || {};\n  if (modules.basis) {\n    return modules.basis;\n  }\n\n  loadBasisTranscoderPromise = loadBasisTranscoderPromise || loadBasisTrascoder(options);\n  return await loadBasisTranscoderPromise;\n}\n\n/**\n * Loads wasm transcoder module\n * @param options\n * @returns {BasisFile} promise\n */\nasync function loadBasisTrascoder(options) {\n  let BASIS = null;\n  let wasmBinary = null;\n\n  [BASIS, wasmBinary] = await Promise.all([\n    await loadLibrary('basis_transcoder.js', 'textures', options),\n    await loadLibrary('basis_transcoder.wasm', 'textures', options)\n  ]);\n\n  // Depends on how import happened...\n  // @ts-ignore TS2339: Property does not exist on type\n  BASIS = BASIS || globalThis.BASIS;\n  return await initializeBasisTrascoderModule(BASIS, wasmBinary);\n}\n\n/**\n * Initialize wasm transcoder module\n * @param BasisModule - js part of the module\n * @param wasmBinary - wasm part of the module\n * @returns {BasisFile} promise\n */\nfunction initializeBasisTrascoderModule(BasisModule, wasmBinary) {\n  const options: {wasmBinary?} = {};\n\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise((resolve) => {\n    // if you try to return BasisModule the browser crashes!\n    BasisModule(options).then((module) => {\n      const {BasisFile, initializeBasis} = module;\n      initializeBasis();\n      resolve({BasisFile});\n    });\n  });\n}\n\nlet loadBasisEncoderPromise;\n\n/**\n * Loads wasm encoder module\n * @param options\n * @returns {BasisFile, KTX2File} promise\n */\nexport async function loadBasisEncoderModule(options) {\n  const modules = options.modules || {};\n  if (modules.basisEncoder) {\n    return modules.basisEncoder;\n  }\n\n  loadBasisEncoderPromise = loadBasisEncoderPromise || loadBasisEncoder(options);\n  return await loadBasisEncoderPromise;\n}\n\n/**\n * Loads wasm encoder module\n * @param options\n * @returns {BasisFile, KTX2File} promise\n */\nasync function loadBasisEncoder(options) {\n  let BASIS_ENCODER = null;\n  let wasmBinary = null;\n\n  [BASIS_ENCODER, wasmBinary] = await Promise.all([\n    await loadLibrary(BASIS_CDN_ENCODER_JS, 'textures', options),\n    await loadLibrary(BASIS_CDN_ENCODER_WASM, 'textures', options)\n  ]);\n\n  // Depends on how import happened...\n  // @ts-ignore TS2339: Property does not exist on type\n  BASIS_ENCODER = BASIS_ENCODER || globalThis.BASIS;\n  return await initializeBasisEncoderModule(BASIS_ENCODER, wasmBinary);\n}\n\n/**\n * Initialize wasm transcoder module\n * @param BasisEncoderModule - js part of the module\n * @param wasmBinary - wasm part of the module\n * @returns {BasisFile, KTX2File} promise\n */\nfunction initializeBasisEncoderModule(BasisEncoderModule, wasmBinary) {\n  const options: {wasmBinary?} = {};\n\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise((resolve) => {\n    // if you try to return BasisModule the browser crashes!\n    BasisEncoderModule(options).then((module) => {\n      const {BasisFile, KTX2File, initializeBasis, BasisEncoder} = module;\n      initializeBasis();\n      resolve({BasisFile, KTX2File, BasisEncoder});\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}