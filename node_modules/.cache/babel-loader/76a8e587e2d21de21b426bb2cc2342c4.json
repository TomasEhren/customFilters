{"ast":null,"code":"import debug from '../debug';\nimport DrawLayersPass from '../passes/draw-layers-pass';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport { Framebuffer } from '@luma.gl/core';\nconst TRACE_RENDER_LAYERS = 'deckRenderer.renderLayers';\nexport default class DeckRenderer {\n  constructor(gl) {\n    this.gl = gl;\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n    this.drawLayersPass = new DrawLayersPass(gl);\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.renderCount = 0;\n    this._needsRedraw = 'Initial render';\n    this.renderBuffers = [];\n    this.lastPostProcessEffect = null;\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props && this.layerFilter !== props.layerFilter) {\n      this.layerFilter = props.layerFilter;\n      this._needsRedraw = 'layerFilter changed';\n    }\n\n    if ('drawPickingColors' in props && this.drawPickingColors !== props.drawPickingColors) {\n      this.drawPickingColors = props.drawPickingColors;\n      this._needsRedraw = 'drawPickingColors changed';\n    }\n  }\n\n  renderLayers(opts) {\n    const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n    opts.layerFilter = opts.layerFilter || this.layerFilter;\n    opts.effects = opts.effects || [];\n    opts.target = opts.target || Framebuffer.getDefaultFramebuffer(this.gl);\n\n    this._preRender(opts.effects, opts);\n\n    const outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : opts.target;\n    const renderStats = layerPass.render({ ...opts,\n      target: outputBuffer\n    });\n\n    this._postRender(opts.effects, opts);\n\n    this.renderCount++;\n    debug(TRACE_RENDER_LAYERS, this, renderStats, opts);\n  }\n\n  needsRedraw() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      clearRedrawFlags: false\n    };\n    const redraw = this._needsRedraw;\n\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    return redraw;\n  }\n\n  finalize() {\n    const {\n      renderBuffers\n    } = this;\n\n    for (const buffer of renderBuffers) {\n      buffer.delete();\n    }\n\n    renderBuffers.length = 0;\n  }\n\n  _preRender(effects, opts) {\n    let lastPostProcessEffect = null;\n\n    for (const effect of effects) {\n      effect.preRender(this.gl, opts);\n\n      if (effect.postRender) {\n        lastPostProcessEffect = effect;\n      }\n    }\n\n    if (lastPostProcessEffect) {\n      this._resizeRenderBuffers();\n    }\n\n    this.lastPostProcessEffect = lastPostProcessEffect;\n  }\n\n  _resizeRenderBuffers() {\n    const {\n      renderBuffers\n    } = this;\n\n    if (renderBuffers.length === 0) {\n      renderBuffers.push(new Framebuffer(this.gl), new Framebuffer(this.gl));\n    }\n\n    for (const buffer of renderBuffers) {\n      buffer.resize();\n    }\n  }\n\n  _postRender(effects, opts) {\n    const {\n      renderBuffers\n    } = this;\n    const params = {\n      inputBuffer: renderBuffers[0],\n      swapBuffer: renderBuffers[1],\n      target: null\n    };\n\n    for (const effect of effects) {\n      if (effect.postRender) {\n        if (effect === this.lastPostProcessEffect) {\n          params.target = opts.target;\n          effect.postRender(this.gl, params);\n          break;\n        }\n\n        const buffer = effect.postRender(this.gl, params);\n        params.inputBuffer = buffer;\n        params.swapBuffer = buffer === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];\n      }\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["debug","DrawLayersPass","PickLayersPass","Framebuffer","TRACE_RENDER_LAYERS","DeckRenderer","constructor","gl","layerFilter","drawPickingColors","drawLayersPass","pickLayersPass","renderCount","_needsRedraw","renderBuffers","lastPostProcessEffect","setProps","props","renderLayers","opts","layerPass","effects","target","getDefaultFramebuffer","_preRender","outputBuffer","renderStats","render","_postRender","needsRedraw","clearRedrawFlags","redraw","finalize","buffer","delete","length","effect","preRender","postRender","_resizeRenderBuffers","push","resize","params","inputBuffer","swapBuffer"],"sources":["../../../src/lib/deck-renderer.js"],"sourcesContent":["import debug from '../debug';\nimport DrawLayersPass from '../passes/draw-layers-pass';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport {Framebuffer} from '@luma.gl/core';\n\nconst TRACE_RENDER_LAYERS = 'deckRenderer.renderLayers';\n\nexport default class DeckRenderer {\n  constructor(gl) {\n    this.gl = gl;\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n    this.drawLayersPass = new DrawLayersPass(gl);\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.renderCount = 0;\n    this._needsRedraw = 'Initial render';\n    this.renderBuffers = [];\n    this.lastPostProcessEffect = null;\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props && this.layerFilter !== props.layerFilter) {\n      this.layerFilter = props.layerFilter;\n      this._needsRedraw = 'layerFilter changed';\n    }\n\n    if ('drawPickingColors' in props && this.drawPickingColors !== props.drawPickingColors) {\n      this.drawPickingColors = props.drawPickingColors;\n      this._needsRedraw = 'drawPickingColors changed';\n    }\n  }\n\n  /*\n    target,\n    layers,\n    viewports,\n    onViewportActive,\n    views,\n    redrawReason,\n    clearCanvas,\n    effects,\n    pass,\n    stats\n  */\n  renderLayers(opts) {\n    const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n\n    opts.layerFilter = opts.layerFilter || this.layerFilter;\n    opts.effects = opts.effects || [];\n    opts.target = opts.target || Framebuffer.getDefaultFramebuffer(this.gl);\n\n    this._preRender(opts.effects, opts);\n\n    const outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : opts.target;\n    const renderStats = layerPass.render({...opts, target: outputBuffer});\n\n    this._postRender(opts.effects, opts);\n\n    this.renderCount++;\n\n    debug(TRACE_RENDER_LAYERS, this, renderStats, opts);\n  }\n\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  finalize() {\n    const {renderBuffers} = this;\n    for (const buffer of renderBuffers) {\n      buffer.delete();\n    }\n    renderBuffers.length = 0;\n  }\n\n  // Private\n  _preRender(effects, opts) {\n    let lastPostProcessEffect = null;\n\n    for (const effect of effects) {\n      effect.preRender(this.gl, opts);\n      if (effect.postRender) {\n        lastPostProcessEffect = effect;\n      }\n    }\n\n    if (lastPostProcessEffect) {\n      this._resizeRenderBuffers();\n    }\n    this.lastPostProcessEffect = lastPostProcessEffect;\n  }\n\n  _resizeRenderBuffers() {\n    const {renderBuffers} = this;\n    if (renderBuffers.length === 0) {\n      renderBuffers.push(new Framebuffer(this.gl), new Framebuffer(this.gl));\n    }\n    for (const buffer of renderBuffers) {\n      buffer.resize();\n    }\n  }\n\n  _postRender(effects, opts) {\n    const {renderBuffers} = this;\n    const params = {\n      inputBuffer: renderBuffers[0],\n      swapBuffer: renderBuffers[1],\n      target: null\n    };\n    for (const effect of effects) {\n      if (effect.postRender) {\n        if (effect === this.lastPostProcessEffect) {\n          params.target = opts.target;\n          effect.postRender(this.gl, params);\n          break;\n        }\n        const buffer = effect.postRender(this.gl, params);\n        params.inputBuffer = buffer;\n        params.swapBuffer = buffer === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}