{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport Transition from '../transitions/transition';\n\nvar noop = function noop() {};\n\nexport var TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3\n};\nvar DEFAULT_PROPS = {\n  transitionEasing: function transitionEasing(t) {\n    return t;\n  },\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop\n};\n\nvar TransitionManager = /*#__PURE__*/function () {\n  function TransitionManager(ControllerState) {\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, TransitionManager);\n\n    this.ControllerState = ControllerState;\n    this.props = _objectSpread(_objectSpread({}, DEFAULT_PROPS), props);\n    this.propsInTransition = null;\n    this.transition = new Transition(props.timeline);\n    this.onViewStateChange = props.onViewStateChange || noop;\n    this.onStateChange = props.onStateChange || noop;\n    this._onTransitionUpdate = this._onTransitionUpdate.bind(this);\n  }\n\n  _createClass(TransitionManager, [{\n    key: \"finalize\",\n    value: function finalize() {\n      this.transition.cancel();\n    }\n  }, {\n    key: \"getViewportInTransition\",\n    value: function getViewportInTransition() {\n      return this.propsInTransition;\n    }\n  }, {\n    key: \"processViewStateChange\",\n    value: function processViewStateChange(nextProps) {\n      var transitionTriggered = false;\n      var currentProps = this.props;\n      nextProps = _objectSpread(_objectSpread({}, DEFAULT_PROPS), nextProps);\n      this.props = nextProps;\n\n      if (this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n        return transitionTriggered;\n      }\n\n      if (this._isTransitionEnabled(nextProps)) {\n        var _this$transition$sett = this.transition.settings,\n            interruption = _this$transition$sett.interruption,\n            endProps = _this$transition$sett.endProps;\n\n        var startProps = _objectSpread(_objectSpread({}, currentProps), interruption === TRANSITION_EVENTS.SNAP_TO_END ? endProps : this.propsInTransition || currentProps);\n\n        this._triggerTransition(startProps, nextProps);\n\n        transitionTriggered = true;\n      } else {\n        this.transition.cancel();\n      }\n\n      return transitionTriggered;\n    }\n  }, {\n    key: \"updateTransition\",\n    value: function updateTransition() {\n      this.transition.update();\n    }\n  }, {\n    key: \"_isTransitionEnabled\",\n    value: function _isTransitionEnabled(props) {\n      var transitionDuration = props.transitionDuration,\n          transitionInterpolator = props.transitionInterpolator;\n      return (transitionDuration > 0 || transitionDuration === 'auto') && Boolean(transitionInterpolator);\n    }\n  }, {\n    key: \"_isUpdateDueToCurrentTransition\",\n    value: function _isUpdateDueToCurrentTransition(props) {\n      if (this.transition.inProgress) {\n        return this.transition.settings.interpolator.arePropsEqual(props, this.propsInTransition);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_shouldIgnoreViewportChange\",\n    value: function _shouldIgnoreViewportChange(currentProps, nextProps) {\n      if (this.transition.inProgress) {\n        return this.transition.settings.interruption === TRANSITION_EVENTS.IGNORE || this._isUpdateDueToCurrentTransition(nextProps);\n      } else if (this._isTransitionEnabled(nextProps)) {\n        return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_triggerTransition\",\n    value: function _triggerTransition(startProps, endProps) {\n      var startViewstate = new this.ControllerState(startProps);\n      var endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n      var transitionInterpolator = endProps.transitionInterpolator;\n      var duration = transitionInterpolator.getDuration ? transitionInterpolator.getDuration(startProps, endProps) : endProps.transitionDuration;\n\n      if (duration === 0) {\n        return;\n      }\n\n      var initialProps = endProps.transitionInterpolator.initializeProps(startProps, endViewStateProps);\n      this.propsInTransition = {};\n      this.duration = duration;\n      this.transition.start({\n        duration: duration,\n        easing: endProps.transitionEasing,\n        interpolator: endProps.transitionInterpolator,\n        interruption: endProps.transitionInterruption,\n        startProps: initialProps.start,\n        endProps: initialProps.end,\n        onStart: endProps.onTransitionStart,\n        onUpdate: this._onTransitionUpdate,\n        onInterrupt: this._onTransitionEnd(endProps.onTransitionInterrupt),\n        onEnd: this._onTransitionEnd(endProps.onTransitionEnd)\n      });\n      this.onStateChange({\n        inTransition: true\n      });\n      this.updateTransition();\n    }\n  }, {\n    key: \"_onTransitionEnd\",\n    value: function _onTransitionEnd(callback) {\n      var _this = this;\n\n      return function (transition) {\n        _this.propsInTransition = null;\n\n        _this.onStateChange({\n          inTransition: false,\n          isZooming: false,\n          isPanning: false,\n          isRotating: false\n        });\n\n        callback(transition);\n      };\n    }\n  }, {\n    key: \"_onTransitionUpdate\",\n    value: function _onTransitionUpdate(transition) {\n      var time = transition.time,\n          _transition$settings = transition.settings,\n          interpolator = _transition$settings.interpolator,\n          startProps = _transition$settings.startProps,\n          endProps = _transition$settings.endProps,\n          duration = _transition$settings.duration,\n          easing = _transition$settings.easing;\n      var t = easing(time / duration);\n      var viewport = interpolator.interpolateProps(startProps, endProps, t);\n      this.propsInTransition = new this.ControllerState(_objectSpread(_objectSpread({}, this.props), viewport)).getViewportProps();\n      this.onViewStateChange({\n        viewState: this.propsInTransition,\n        oldViewState: this.props\n      });\n    }\n  }]);\n\n  return TransitionManager;\n}();\n\nexport { TransitionManager as default };","map":{"version":3,"mappings":"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","names":["Transition","noop","TRANSITION_EVENTS","BREAK","SNAP_TO_END","IGNORE","DEFAULT_PROPS","transitionEasing","t","transitionInterruption","onTransitionStart","onTransitionInterrupt","onTransitionEnd","TransitionManager","constructor","ControllerState","props","propsInTransition","transition","timeline","onViewStateChange","onStateChange","_onTransitionUpdate","bind","finalize","cancel","getViewportInTransition","processViewStateChange","nextProps","transitionTriggered","currentProps","_shouldIgnoreViewportChange","_isTransitionEnabled","settings","interruption","endProps","startProps","_triggerTransition","updateTransition","update","transitionDuration","transitionInterpolator","Boolean","_isUpdateDueToCurrentTransition","inProgress","interpolator","arePropsEqual","startViewstate","endViewStateProps","shortestPathFrom","duration","getDuration","initialProps","initializeProps","start","easing","end","onStart","onUpdate","onInterrupt","_onTransitionEnd","onEnd","inTransition","callback","isZooming","isPanning","isRotating","time","viewport","interpolateProps","getViewportProps","viewState","oldViewState"],"sources":["../../../src/controllers/transition-manager.js"],"sourcesContent":["import Transition from '../transitions/transition';\n\nconst noop = () => {};\n\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3\n};\n\nconst DEFAULT_PROPS = {\n  transitionEasing: t => t,\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop\n};\n\nexport default class TransitionManager {\n  constructor(ControllerState, props = {}) {\n    this.ControllerState = ControllerState;\n    this.props = {...DEFAULT_PROPS, ...props};\n    this.propsInTransition = null;\n    this.transition = new Transition(props.timeline);\n\n    this.onViewStateChange = props.onViewStateChange || noop;\n    this.onStateChange = props.onStateChange || noop;\n\n    this._onTransitionUpdate = this._onTransitionUpdate.bind(this);\n  }\n\n  finalize() {\n    this.transition.cancel();\n  }\n\n  // Returns current transitioned viewport.\n  getViewportInTransition() {\n    return this.propsInTransition;\n  }\n\n  // Process the vewiport change, either ignore or trigger a new transition.\n  // Return true if a new transition is triggered, false otherwise.\n  processViewStateChange(nextProps) {\n    let transitionTriggered = false;\n    const currentProps = this.props;\n    // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.\n    nextProps = {...DEFAULT_PROPS, ...nextProps};\n    this.props = nextProps;\n\n    // NOTE: Be cautious re-ordering statements in this function.\n    if (this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return transitionTriggered;\n    }\n\n    if (this._isTransitionEnabled(nextProps)) {\n      const {interruption, endProps} = this.transition.settings;\n      const startProps = {\n        ...currentProps,\n        ...(interruption === TRANSITION_EVENTS.SNAP_TO_END\n          ? endProps\n          : this.propsInTransition || currentProps)\n      };\n\n      this._triggerTransition(startProps, nextProps);\n\n      transitionTriggered = true;\n    } else {\n      this.transition.cancel();\n    }\n\n    return transitionTriggered;\n  }\n\n  updateTransition() {\n    this.transition.update();\n  }\n\n  // Helper methods\n\n  _isTransitionEnabled(props) {\n    const {transitionDuration, transitionInterpolator} = props;\n    return (\n      (transitionDuration > 0 || transitionDuration === 'auto') && Boolean(transitionInterpolator)\n    );\n  }\n\n  _isUpdateDueToCurrentTransition(props) {\n    if (this.transition.inProgress) {\n      return this.transition.settings.interpolator.arePropsEqual(props, this.propsInTransition);\n    }\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps, nextProps) {\n    if (this.transition.inProgress) {\n      // Ignore update if it is requested to be ignored\n      return (\n        this.transition.settings.interruption === TRANSITION_EVENTS.IGNORE ||\n        // Ignore update if it is due to current active transition.\n        this._isUpdateDueToCurrentTransition(nextProps)\n      );\n    } else if (this._isTransitionEnabled(nextProps)) {\n      // Ignore if none of the viewport props changed.\n      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n    }\n    return true;\n  }\n\n  _triggerTransition(startProps, endProps) {\n    const startViewstate = new this.ControllerState(startProps);\n    const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n\n    // update transitionDuration for 'auto' mode\n    const {transitionInterpolator} = endProps;\n    const duration = transitionInterpolator.getDuration\n      ? transitionInterpolator.getDuration(startProps, endProps)\n      : endProps.transitionDuration;\n\n    if (duration === 0) {\n      return;\n    }\n\n    const initialProps = endProps.transitionInterpolator.initializeProps(\n      startProps,\n      endViewStateProps\n    );\n\n    this.propsInTransition = {};\n    this.duration = duration;\n    this.transition.start({\n      duration,\n      easing: endProps.transitionEasing,\n      interpolator: endProps.transitionInterpolator,\n      interruption: endProps.transitionInterruption,\n\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n\n      onStart: endProps.onTransitionStart,\n      onUpdate: this._onTransitionUpdate,\n      onInterrupt: this._onTransitionEnd(endProps.onTransitionInterrupt),\n      onEnd: this._onTransitionEnd(endProps.onTransitionEnd)\n    });\n\n    this.onStateChange({inTransition: true});\n\n    this.updateTransition();\n  }\n\n  _onTransitionEnd(callback) {\n    return transition => {\n      this.propsInTransition = null;\n\n      this.onStateChange({\n        inTransition: false,\n        isZooming: false,\n        isPanning: false,\n        isRotating: false\n      });\n\n      callback(transition);\n    };\n  }\n\n  _onTransitionUpdate(transition) {\n    // NOTE: Be cautious re-ordering statements in this function.\n    const {\n      time,\n      settings: {interpolator, startProps, endProps, duration, easing}\n    } = transition;\n    const t = easing(time / duration);\n    const viewport = interpolator.interpolateProps(startProps, endProps, t);\n\n    // This gurantees all props (e.g. bearing, longitude) are normalized\n    // So when viewports are compared they are in same range.\n    this.propsInTransition = new this.ControllerState({\n      ...this.props,\n      ...viewport\n    }).getViewportProps();\n\n    this.onViewStateChange({\n      viewState: this.propsInTransition,\n      oldViewState: this.props\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}