{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { isWebGL2 } from '@luma.gl/gltools';\nimport { Buffer, TransformFeedback } from '@luma.gl/webgl';\nimport { assert } from '@luma.gl/webgl';\n\nvar BufferTransform = /*#__PURE__*/function () {\n  function BufferTransform(gl) {\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, BufferTransform);\n\n    this.gl = gl;\n    this.currentIndex = 0;\n    this.feedbackMap = {};\n    this.varyings = null;\n    this.bindings = [];\n    this.resources = {};\n\n    this._initialize(props);\n\n    Object.seal(this);\n  }\n\n  _createClass(BufferTransform, [{\n    key: \"setupResources\",\n    value: function setupResources(opts) {\n      var _iterator = _createForOfIteratorHelper(this.bindings),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var binding = _step.value;\n\n          this._setupTransformFeedback(binding, opts);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"updateModelProps\",\n    value: function updateModelProps() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var varyings = this.varyings;\n\n      if (varyings.length > 0) {\n        props = Object.assign({}, props, {\n          varyings: varyings\n        });\n      }\n\n      return props;\n    }\n  }, {\n    key: \"getDrawOptions\",\n    value: function getDrawOptions() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var binding = this.bindings[this.currentIndex];\n      var sourceBuffers = binding.sourceBuffers,\n          transformFeedback = binding.transformFeedback;\n      var attributes = Object.assign({}, sourceBuffers, opts.attributes);\n      return {\n        attributes: attributes,\n        transformFeedback: transformFeedback\n      };\n    }\n  }, {\n    key: \"swap\",\n    value: function swap() {\n      if (this.feedbackMap) {\n        this.currentIndex = this._getNextIndex();\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      this._setupBuffers(opts);\n    }\n  }, {\n    key: \"getBuffer\",\n    value: function getBuffer(varyingName) {\n      var feedbackBuffers = this.bindings[this.currentIndex].feedbackBuffers;\n      var bufferOrParams = varyingName ? feedbackBuffers[varyingName] : null;\n\n      if (!bufferOrParams) {\n        return null;\n      }\n\n      return bufferOrParams instanceof Buffer ? bufferOrParams : bufferOrParams.buffer;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var varyingName = options.varyingName;\n      var buffer = this.getBuffer(varyingName);\n\n      if (buffer) {\n        return buffer.getData();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      for (var name in this.resources) {\n        this.resources[name].delete();\n      }\n    }\n  }, {\n    key: \"_initialize\",\n    value: function _initialize() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      this._setupBuffers(props);\n\n      this.varyings = props.varyings || Object.keys(this.bindings[this.currentIndex].feedbackBuffers);\n\n      if (this.varyings.length > 0) {\n        assert(isWebGL2(this.gl));\n      }\n    }\n  }, {\n    key: \"_getFeedbackBuffers\",\n    value: function _getFeedbackBuffers(props) {\n      var _props$sourceBuffers = props.sourceBuffers,\n          sourceBuffers = _props$sourceBuffers === void 0 ? {} : _props$sourceBuffers;\n      var feedbackBuffers = {};\n\n      if (this.bindings[this.currentIndex]) {\n        Object.assign(feedbackBuffers, this.bindings[this.currentIndex].feedbackBuffers);\n      }\n\n      if (this.feedbackMap) {\n        for (var sourceName in this.feedbackMap) {\n          var feedbackName = this.feedbackMap[sourceName];\n\n          if (sourceName in sourceBuffers) {\n            feedbackBuffers[feedbackName] = sourceName;\n          }\n        }\n      }\n\n      Object.assign(feedbackBuffers, props.feedbackBuffers);\n\n      for (var bufferName in feedbackBuffers) {\n        var bufferOrRef = feedbackBuffers[bufferName];\n\n        if (typeof bufferOrRef === 'string') {\n          var sourceBuffer = sourceBuffers[bufferOrRef];\n          var byteLength = sourceBuffer.byteLength,\n              usage = sourceBuffer.usage,\n              accessor = sourceBuffer.accessor;\n          feedbackBuffers[bufferName] = this._createNewBuffer(bufferName, {\n            byteLength: byteLength,\n            usage: usage,\n            accessor: accessor\n          });\n        }\n      }\n\n      return feedbackBuffers;\n    }\n  }, {\n    key: \"_setupBuffers\",\n    value: function _setupBuffers() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _props$sourceBuffers2 = props.sourceBuffers,\n          sourceBuffers = _props$sourceBuffers2 === void 0 ? null : _props$sourceBuffers2;\n      Object.assign(this.feedbackMap, props.feedbackMap);\n\n      var feedbackBuffers = this._getFeedbackBuffers(props);\n\n      this._updateBindings({\n        sourceBuffers: sourceBuffers,\n        feedbackBuffers: feedbackBuffers\n      });\n    }\n  }, {\n    key: \"_setupTransformFeedback\",\n    value: function _setupTransformFeedback(binding, _ref) {\n      var model = _ref.model;\n      var program = model.program;\n      binding.transformFeedback = new TransformFeedback(this.gl, {\n        program: program,\n        buffers: binding.feedbackBuffers\n      });\n    }\n  }, {\n    key: \"_updateBindings\",\n    value: function _updateBindings(opts) {\n      this.bindings[this.currentIndex] = this._updateBinding(this.bindings[this.currentIndex], opts);\n\n      if (this.feedbackMap) {\n        var _this$_swapBuffers = this._swapBuffers(this.bindings[this.currentIndex]),\n            sourceBuffers = _this$_swapBuffers.sourceBuffers,\n            feedbackBuffers = _this$_swapBuffers.feedbackBuffers;\n\n        var nextIndex = this._getNextIndex();\n\n        this.bindings[nextIndex] = this._updateBinding(this.bindings[nextIndex], {\n          sourceBuffers: sourceBuffers,\n          feedbackBuffers: feedbackBuffers\n        });\n      }\n    }\n  }, {\n    key: \"_updateBinding\",\n    value: function _updateBinding(binding, opts) {\n      if (!binding) {\n        return {\n          sourceBuffers: Object.assign({}, opts.sourceBuffers),\n          feedbackBuffers: Object.assign({}, opts.feedbackBuffers)\n        };\n      }\n\n      Object.assign(binding.sourceBuffers, opts.sourceBuffers);\n      Object.assign(binding.feedbackBuffers, opts.feedbackBuffers);\n\n      if (binding.transformFeedback) {\n        binding.transformFeedback.setBuffers(binding.feedbackBuffers);\n      }\n\n      return binding;\n    }\n  }, {\n    key: \"_swapBuffers\",\n    value: function _swapBuffers(opts) {\n      if (!this.feedbackMap) {\n        return null;\n      }\n\n      var sourceBuffers = Object.assign({}, opts.sourceBuffers);\n      var feedbackBuffers = Object.assign({}, opts.feedbackBuffers);\n\n      for (var srcName in this.feedbackMap) {\n        var dstName = this.feedbackMap[srcName];\n        sourceBuffers[srcName] = opts.feedbackBuffers[dstName];\n        feedbackBuffers[dstName] = opts.sourceBuffers[srcName];\n        assert(feedbackBuffers[dstName] instanceof Buffer);\n      }\n\n      return {\n        sourceBuffers: sourceBuffers,\n        feedbackBuffers: feedbackBuffers\n      };\n    }\n  }, {\n    key: \"_createNewBuffer\",\n    value: function _createNewBuffer(name, opts) {\n      var buffer = new Buffer(this.gl, opts);\n\n      if (this.resources[name]) {\n        this.resources[name].delete();\n      }\n\n      this.resources[name] = buffer;\n      return buffer;\n    }\n  }, {\n    key: \"_getNextIndex\",\n    value: function _getNextIndex() {\n      return (this.currentIndex + 1) % 2;\n    }\n  }]);\n\n  return BufferTransform;\n}();\n\nexport { BufferTransform as default };","map":{"version":3,"mappings":"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","names":["isWebGL2","Buffer","TransformFeedback","assert","BufferTransform","constructor","gl","props","currentIndex","feedbackMap","varyings","bindings","resources","_initialize","Object","seal","setupResources","opts","binding","_setupTransformFeedback","updateModelProps","length","assign","getDrawOptions","sourceBuffers","transformFeedback","attributes","swap","_getNextIndex","update","_setupBuffers","getBuffer","varyingName","feedbackBuffers","bufferOrParams","buffer","getData","options","delete","name","keys","_getFeedbackBuffers","sourceName","feedbackName","bufferName","bufferOrRef","sourceBuffer","byteLength","usage","accessor","_createNewBuffer","_updateBindings","model","program","buffers","_updateBinding","_swapBuffers","nextIndex","setBuffers","srcName","dstName"],"sources":["../../../src/transform/buffer-transform.js"],"sourcesContent":["import {isWebGL2} from '@luma.gl/gltools';\nimport {Buffer, TransformFeedback} from '@luma.gl/webgl';\nimport {assert} from '@luma.gl/webgl';\n\nexport default class BufferTransform {\n  constructor(gl, props = {}) {\n    this.gl = gl;\n    this.currentIndex = 0;\n    this.feedbackMap = {};\n    this.varyings = null; // varyings array\n    this.bindings = []; // each element is an object : {sourceBuffers, feedbackBuffers, transformFeedback}\n\n    this.resources = {}; // resources to be deleted\n\n    this._initialize(props);\n    Object.seal(this);\n  }\n\n  setupResources(opts) {\n    for (const binding of this.bindings) {\n      this._setupTransformFeedback(binding, opts);\n    }\n  }\n\n  updateModelProps(props = {}) {\n    const {varyings} = this;\n    if (varyings.length > 0) {\n      props = Object.assign({}, props, {varyings});\n    }\n    return props;\n  }\n\n  getDrawOptions(opts = {}) {\n    const binding = this.bindings[this.currentIndex];\n    const {sourceBuffers, transformFeedback} = binding;\n    const attributes = Object.assign({}, sourceBuffers, opts.attributes);\n\n    return {attributes, transformFeedback};\n  }\n\n  swap() {\n    if (this.feedbackMap) {\n      this.currentIndex = this._getNextIndex();\n      return true;\n    }\n    return false;\n  }\n\n  // update source and/or feedbackBuffers\n  update(opts = {}) {\n    this._setupBuffers(opts);\n  }\n\n  // returns current feedbackBuffer of given name\n  getBuffer(varyingName) {\n    const {feedbackBuffers} = this.bindings[this.currentIndex];\n    const bufferOrParams = varyingName ? feedbackBuffers[varyingName] : null;\n    if (!bufferOrParams) {\n      return null;\n    }\n    return bufferOrParams instanceof Buffer ? bufferOrParams : bufferOrParams.buffer;\n  }\n\n  getData(options = {}) {\n    const {varyingName} = options;\n    const buffer = this.getBuffer(varyingName);\n    if (buffer) {\n      return buffer.getData();\n    }\n    return null;\n  }\n\n  // Delete owned resources.\n  delete() {\n    for (const name in this.resources) {\n      this.resources[name].delete();\n    }\n  }\n\n  // Private\n\n  _initialize(props = {}) {\n    this._setupBuffers(props);\n    this.varyings = props.varyings || Object.keys(this.bindings[this.currentIndex].feedbackBuffers);\n    if (this.varyings.length > 0) {\n      // if writting to buffers make sure it is WebGL2\n      assert(isWebGL2(this.gl));\n    }\n  }\n\n  // auto create feedback buffers if requested\n  _getFeedbackBuffers(props) {\n    const {sourceBuffers = {}} = props;\n    const feedbackBuffers = {};\n    if (this.bindings[this.currentIndex]) {\n      // this gurantees a partial feedback buffer set doesn't update\n      // previously set buffers during auto creation mode.\n      Object.assign(feedbackBuffers, this.bindings[this.currentIndex].feedbackBuffers);\n    }\n    if (this.feedbackMap) {\n      // feedbackMap is defined as sourceBuffer as key and feedbackBuffer name as object\n      for (const sourceName in this.feedbackMap) {\n        const feedbackName = this.feedbackMap[sourceName];\n        if (sourceName in sourceBuffers) {\n          feedbackBuffers[feedbackName] = sourceName;\n        }\n      }\n    }\n    Object.assign(feedbackBuffers, props.feedbackBuffers);\n    for (const bufferName in feedbackBuffers) {\n      const bufferOrRef = feedbackBuffers[bufferName];\n      if (typeof bufferOrRef === 'string') {\n        // Create new buffer with same layout and settings as source buffer\n        const sourceBuffer = sourceBuffers[bufferOrRef];\n        const {byteLength, usage, accessor} = sourceBuffer;\n        feedbackBuffers[bufferName] = this._createNewBuffer(bufferName, {\n          byteLength,\n          usage,\n          accessor\n        });\n      }\n    }\n\n    return feedbackBuffers;\n  }\n\n  _setupBuffers(props = {}) {\n    const {sourceBuffers = null} = props;\n    Object.assign(this.feedbackMap, props.feedbackMap);\n    const feedbackBuffers = this._getFeedbackBuffers(props);\n    this._updateBindings({sourceBuffers, feedbackBuffers});\n  }\n\n  _setupTransformFeedback(binding, {model}) {\n    const {program} = model;\n    binding.transformFeedback = new TransformFeedback(this.gl, {\n      program,\n      buffers: binding.feedbackBuffers\n    });\n  }\n\n  _updateBindings(opts) {\n    this.bindings[this.currentIndex] = this._updateBinding(this.bindings[this.currentIndex], opts);\n    if (this.feedbackMap) {\n      const {sourceBuffers, feedbackBuffers} = this._swapBuffers(this.bindings[this.currentIndex]);\n      const nextIndex = this._getNextIndex();\n      this.bindings[nextIndex] = this._updateBinding(this.bindings[nextIndex], {\n        sourceBuffers,\n        feedbackBuffers\n      });\n    }\n  }\n\n  _updateBinding(binding, opts) {\n    if (!binding) {\n      return {\n        sourceBuffers: Object.assign({}, opts.sourceBuffers),\n        feedbackBuffers: Object.assign({}, opts.feedbackBuffers)\n      };\n    }\n    Object.assign(binding.sourceBuffers, opts.sourceBuffers);\n    Object.assign(binding.feedbackBuffers, opts.feedbackBuffers);\n    if (binding.transformFeedback) {\n      binding.transformFeedback.setBuffers(binding.feedbackBuffers);\n    }\n    return binding;\n  }\n\n  _swapBuffers(opts) {\n    if (!this.feedbackMap) {\n      return null;\n    }\n    const sourceBuffers = Object.assign({}, opts.sourceBuffers);\n    const feedbackBuffers = Object.assign({}, opts.feedbackBuffers);\n    for (const srcName in this.feedbackMap) {\n      const dstName = this.feedbackMap[srcName];\n      sourceBuffers[srcName] = opts.feedbackBuffers[dstName];\n      feedbackBuffers[dstName] = opts.sourceBuffers[srcName];\n\n      // make sure the new destination buffer is a Buffer object\n      assert(feedbackBuffers[dstName] instanceof Buffer);\n    }\n    return {sourceBuffers, feedbackBuffers};\n  }\n\n  // Create a buffer and add to list of buffers to be deleted.\n  _createNewBuffer(name, opts) {\n    const buffer = new Buffer(this.gl, opts);\n    if (this.resources[name]) {\n      this.resources[name].delete();\n    }\n    this.resources[name] = buffer;\n    return buffer;\n  }\n\n  _getNextIndex() {\n    return (this.currentIndex + 1) % 2;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}