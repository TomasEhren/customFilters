{"ast":null,"code":"import * as fs from '../node/fs';\nexport default class NodeFileSystem {\n  constructor(options) {\n    this.fetch = options._fetch;\n  }\n\n  async readdir() {\n    let dirname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '.';\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n    return await fs.readdir(dirname, options);\n  }\n\n  async stat(path, options) {\n    const info = await fs.stat(path, options);\n    return {\n      size: Number(info.size),\n      isDirectory: () => false,\n      info\n    };\n  }\n\n  async fetch(path, options) {\n    const fallbackFetch = options.fetch || this.fetch;\n    return fallbackFetch(path, options);\n  }\n\n  async open(path, flags, mode) {\n    return await fs.open(path, flags);\n  }\n\n  async close(fd) {\n    return await fs.close(fd);\n  }\n\n  async fstat(fd) {\n    const info = await fs.fstat(fd);\n    return info;\n  }\n\n  async read(fd, _ref) {\n    let {\n      buffer = null,\n      offset = 0,\n      length = buffer.byteLength,\n      position = null\n    } = _ref;\n    let totalBytesRead = 0;\n\n    while (totalBytesRead < length) {\n      const {\n        bytesRead\n      } = await fs.read(fd, buffer, offset + totalBytesRead, length - totalBytesRead, position + totalBytesRead);\n      totalBytesRead += bytesRead;\n    }\n\n    return {\n      bytesRead: totalBytesRead,\n      buffer\n    };\n  }\n\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,YAApB;AAuBA,eAAe,MAAMC,cAAN,CAAyE;EAEtFC,WAAW,CAACC,OAAD,EAAgC;IACzC,KAAKC,KAAL,GAAaD,OAAO,CAACE,MAArB;EACD;;EAEY,MAAPC,OAAO,GAA8C;IAAA,IAA7CC,OAA6C,uEAAnC,GAAmC;IAAA,IAA9BJ,OAA8B;IACzD,OAAO,MAAMH,EAAE,CAACM,OAAHN,CAAWO,OAAXP,EAAoBG,OAApBH,CAAb;EACD;;EAES,MAAJQ,IAAI,CAACC,IAAD,EAAeN,OAAf,EAA4C;IACpD,MAAMO,IAAI,GAAG,MAAMV,EAAE,CAACQ,IAAHR,CAAQS,IAART,EAAcG,OAAdH,CAAnB;IACA,OAAO;MAACW,IAAI,EAAEC,MAAM,CAACF,IAAI,CAACC,IAAN,CAAb;MAA0BE,WAAW,EAAE,MAAM,KAA7C;MAAoDH;IAApD,CAAP;EACD;;EAEU,MAALN,KAAK,CAACK,IAAD,EAAeN,OAAf,EAA8C;IAGvD,MAAMW,aAAa,GAAGX,OAAO,CAACC,KAARD,IAAiB,KAAKC,KAA5C;IACA,OAAOU,aAAa,CAACL,IAAD,EAAON,OAAP,CAApB;EACD;;EAGS,MAAJY,IAAI,CAACN,IAAD,EAAeO,KAAf,EAAuCC,IAAvC,EAAoE;IAC5E,OAAO,MAAMjB,EAAE,CAACe,IAAHf,CAAQS,IAART,EAAcgB,KAAdhB,CAAb;EACD;;EAEU,MAALkB,KAAK,CAACC,EAAD,EAA4B;IACrC,OAAO,MAAMnB,EAAE,CAACkB,KAAHlB,CAASmB,EAATnB,CAAb;EACD;;EAEU,MAALoB,KAAK,CAACD,EAAD,EAA4B;IACrC,MAAMT,IAAI,GAAG,MAAMV,EAAE,CAACoB,KAAHpB,CAASmB,EAATnB,CAAnB;IACA,OAAOU,IAAP;EACD;;EAES,MAAJW,IAAI,CACRF,EADQ,QAIsC;IAAA,IAD9C;MAACG,MAAM,GAAG,IAAV;MAAgBC,MAAM,GAAG,CAAzB;MAA4BC,MAAM,GAAGF,MAAM,CAACG,UAA5C;MAAwDC,QAAQ,GAAG;IAAnE,CAC8C;IAC9C,IAAIC,cAAc,GAAG,CAArB;;IAEA,OAAOA,cAAc,GAAGH,MAAxB,EAAgC;MAC9B,MAAM;QAACI;MAAD,IAAc,MAAM5B,EAAE,CAACqB,IAAHrB,CACxBmB,EADwBnB,EAExBsB,MAFwBtB,EAGxBuB,MAAM,GAAGI,cAHe3B,EAIxBwB,MAAM,GAAGG,cAJe3B,EAKxB0B,QAAQ,GAAGC,cALa3B,CAA1B;MAOA2B,cAAc,IAAIC,SAAlBD;IACD;;IACD,OAAO;MAACC,SAAS,EAAED,cAAZ;MAA4BL;IAA5B,CAAP;EACD;;AAtDqF","names":["fs","NodeFileSystem","constructor","options","fetch","_fetch","readdir","dirname","stat","path","info","size","Number","isDirectory","fallbackFetch","open","flags","mode","close","fd","fstat","read","buffer","offset","length","byteLength","position","totalBytesRead","bytesRead"],"sources":["../../../../src/lib/filesystems/node-filesystem.ts"],"sourcesContent":["import * as fs from '../node/fs';\nimport {IFileSystem, IRandomAccessReadFileSystem} from '../../types';\n// import {fetchFile} from \"../fetch/fetch-file\"\n// import {selectLoader} from \"../api/select-loader\";\n\ntype Stat = {\n  size: number;\n  isDirectory: () => boolean;\n  info?: fs.Stats;\n};\n\ntype ReadOptions = {\n  buffer?: Buffer;\n  offset?: number;\n  length?: number;\n  position?: number;\n};\n\n/**\n * FileSystem pass-through for Node.js\n * Compatible with BrowserFileSystem.\n * @param options\n */\nexport default class NodeFileSystem implements IFileSystem, IRandomAccessReadFileSystem {\n  // implements IFileSystem\n  constructor(options: {[key: string]: any}) {\n    this.fetch = options._fetch;\n  }\n\n  async readdir(dirname = '.', options?: {}): Promise<any[]> {\n    return await fs.readdir(dirname, options);\n  }\n\n  async stat(path: string, options?: {}): Promise<Stat> {\n    const info = await fs.stat(path, options);\n    return {size: Number(info.size), isDirectory: () => false, info};\n  }\n\n  async fetch(path: string, options: {[key: string]: any}) {\n    // Falls back to handle https:/http:/data: etc fetches\n    // eslint-disable-next-line\n    const fallbackFetch = options.fetch || this.fetch;\n    return fallbackFetch(path, options);\n  }\n\n  // implements IRandomAccessFileSystem\n  async open(path: string, flags: string | number, mode?: any): Promise<number> {\n    return await fs.open(path, flags);\n  }\n\n  async close(fd: number): Promise<void> {\n    return await fs.close(fd);\n  }\n\n  async fstat(fd: number): Promise<Stat> {\n    const info = await fs.fstat(fd);\n    return info;\n  }\n\n  async read(\n    fd: number,\n    // @ts-ignore Possibly null\n    {buffer = null, offset = 0, length = buffer.byteLength, position = null}: ReadOptions\n  ): Promise<{bytesRead: number; buffer: Buffer}> {\n    let totalBytesRead = 0;\n    // Read in loop until we get required number of bytes\n    while (totalBytesRead < length) {\n      const {bytesRead} = await fs.read(\n        fd,\n        buffer,\n        offset + totalBytesRead,\n        length - totalBytesRead,\n        position + totalBytesRead\n      );\n      totalBytesRead += bytesRead;\n    }\n    return {bytesRead: totalBytesRead, buffer};\n  }\n}\n"]},"metadata":{},"sourceType":"module"}