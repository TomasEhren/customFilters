{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './arc-layer-vertex.glsl';\nimport fs from './arc-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  getSourcePosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.sourcePosition;\n    }\n  },\n  getTargetPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.targetPosition;\n    }\n  },\n  getSourceColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getTargetColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getHeight: {\n    type: 'accessor',\n    value: 1\n  },\n  getTilt: {\n    type: 'accessor',\n    value: 0\n  },\n  greatCircle: false,\n  widthUnits: 'pixels',\n  widthScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  widthMinPixels: {\n    type: 'number',\n    value: 0,\n    min: 0\n  },\n  widthMaxPixels: {\n    type: 'number',\n    value: Number.MAX_SAFE_INTEGER,\n    min: 0\n  }\n};\n\nvar ArcLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(ArcLayer, _Layer);\n\n  var _super = _createSuper(ArcLayer);\n\n  function ArcLayer() {\n    _classCallCheck(this, ArcLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ArcLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _get(_getPrototypeOf(ArcLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, picking]\n      });\n    }\n  }, {\n    key: \"wrapLongitude\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instanceSourcePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getSourcePosition'\n        },\n        instanceTargetPositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getTargetPosition'\n        },\n        instanceSourceColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: true,\n          accessor: 'getSourceColor',\n          defaultValue: DEFAULT_COLOR\n        },\n        instanceTargetColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: true,\n          accessor: 'getTargetColor',\n          defaultValue: DEFAULT_COLOR\n        },\n        instanceWidths: {\n          size: 1,\n          transition: true,\n          accessor: 'getWidth',\n          defaultValue: 1\n        },\n        instanceHeights: {\n          size: 1,\n          transition: true,\n          accessor: 'getHeight',\n          defaultValue: 1\n        },\n        instanceTilts: {\n          size: 1,\n          transition: true,\n          accessor: 'getTilt',\n          defaultValue: 0\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      _get(_getPrototypeOf(ArcLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      if (changeFlags.extensionsChanged) {\n        var _this$state$model;\n\n        var gl = this.context.gl;\n        (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n        this.state.model = this._getModel(gl);\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var _this$props = this.props,\n          widthUnits = _this$props.widthUnits,\n          widthScale = _this$props.widthScale,\n          widthMinPixels = _this$props.widthMinPixels,\n          widthMaxPixels = _this$props.widthMaxPixels,\n          greatCircle = _this$props.greatCircle,\n          wrapLongitude = _this$props.wrapLongitude;\n      this.state.model.setUniforms(uniforms).setUniforms({\n        greatCircle: greatCircle,\n        widthUnits: UNIT[widthUnits],\n        widthScale: widthScale,\n        widthMinPixels: widthMinPixels,\n        widthMaxPixels: widthMaxPixels,\n        useShortestPath: wrapLongitude\n      }).draw();\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var positions = [];\n      var NUM_SEGMENTS = 50;\n\n      for (var i = 0; i < NUM_SEGMENTS; i++) {\n        positions = positions.concat([i, 1, 0, i, -1, 0]);\n      }\n\n      var model = new Model(gl, _objectSpread(_objectSpread({}, this.getShaders()), {}, {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 5,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true\n      }));\n      model.setUniforms({\n        numSegments: NUM_SEGMENTS\n      });\n      return model;\n    }\n  }]);\n\n  return ArcLayer;\n}(Layer);\n\nexport { ArcLayer as default };\nArcLayer.layerName = 'ArcLayer';\nArcLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["Layer","project32","picking","UNIT","Model","Geometry","vs","fs","DEFAULT_COLOR","defaultProps","getSourcePosition","type","value","x","sourcePosition","getTargetPosition","targetPosition","getSourceColor","getTargetColor","getWidth","getHeight","getTilt","greatCircle","widthUnits","widthScale","min","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","ArcLayer","getShaders","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instanceSourcePositions","size","fp64","use64bitPositions","transition","accessor","instanceTargetPositions","instanceSourceColors","props","colorFormat","length","normalized","defaultValue","instanceTargetColors","instanceWidths","instanceHeights","instanceTilts","updateState","oldProps","changeFlags","extensionsChanged","gl","context","state","model","delete","_getModel","invalidateAll","draw","uniforms","wrapLongitude","setUniforms","useShortestPath","positions","NUM_SEGMENTS","i","concat","id","geometry","drawMode","attributes","Float32Array","isInstanced","numSegments","layerName"],"sources":["../../../src/arc-layer/arc-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, UNIT} from '@deck.gl/core';\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './arc-layer-vertex.glsl';\nimport fs from './arc-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  getSourcePosition: {type: 'accessor', value: x => x.sourcePosition},\n  getTargetPosition: {type: 'accessor', value: x => x.targetPosition},\n  getSourceColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getTargetColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n  getHeight: {type: 'accessor', value: 1},\n  getTilt: {type: 'accessor', value: 0},\n\n  greatCircle: false,\n\n  widthUnits: 'pixels',\n  widthScale: {type: 'number', value: 1, min: 0},\n  widthMinPixels: {type: 'number', value: 0, min: 0},\n  widthMaxPixels: {type: 'number', value: Number.MAX_SAFE_INTEGER, min: 0}\n};\n\nexport default class ArcLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]}); // 'project' module added by default.\n  }\n\n  // This layer has its own wrapLongitude logic\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceSourceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getSourceColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceTargetColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getTargetColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      },\n      instanceHeights: {\n        size: 1,\n        transition: true,\n        accessor: 'getHeight',\n        defaultValue: 1\n      },\n      instanceTilts: {\n        size: 1,\n        transition: true,\n        accessor: 'getTilt',\n        defaultValue: 0\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    // Re-generate model if geometry changed\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {widthUnits, widthScale, widthMinPixels, widthMaxPixels, greatCircle, wrapLongitude} =\n      this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        greatCircle,\n        widthUnits: UNIT[widthUnits],\n        widthScale,\n        widthMinPixels,\n        widthMaxPixels,\n        useShortestPath: wrapLongitude\n      })\n      .draw();\n  }\n\n  _getModel(gl) {\n    let positions = [];\n    const NUM_SEGMENTS = 50;\n    /*\n     *  (0, -1)-------------_(1, -1)\n     *       |          _,-\"  |\n     *       o      _,-\"      o\n     *       |  _,-\"          |\n     *   (0, 1)\"-------------(1, 1)\n     */\n    for (let i = 0; i < NUM_SEGMENTS; i++) {\n      positions = positions.concat([i, 1, 0, i, -1, 0]);\n    }\n\n    const model = new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_STRIP,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n\n    model.setUniforms({numSegments: NUM_SEGMENTS});\n\n    return model;\n  }\n}\n\nArcLayer.layerName = 'ArcLayer';\nArcLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}