{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { LayerExtension } from '@deck.gl/core';\nimport { shaderModule, shaderModule64 } from './shader-module';\nimport * as aggregator from './aggregator';\nimport { readPixelsToArray, clear } from '@luma.gl/core';\nvar defaultProps = {\n  getFilterValue: {\n    type: 'accessor',\n    value: 0\n  },\n  onFilteredItemsChange: {\n    type: 'function',\n    value: null,\n    compare: false\n  },\n  filterEnabled: true,\n  filterRange: [-1, 1],\n  filterSoftRange: null,\n  filterTransformSize: true,\n  filterTransformColor: true\n};\nvar DATA_TYPE_FROM_SIZE = {\n  1: 'float',\n  2: 'vec2',\n  3: 'vec3',\n  4: 'vec4'\n};\n\nvar DataFilterExtension = /*#__PURE__*/function (_LayerExtension) {\n  _inherits(DataFilterExtension, _LayerExtension);\n\n  var _super = _createSuper(DataFilterExtension);\n\n  function DataFilterExtension() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$filterSize = _ref.filterSize,\n        filterSize = _ref$filterSize === void 0 ? 1 : _ref$filterSize,\n        _ref$fp = _ref.fp64,\n        fp64 = _ref$fp === void 0 ? false : _ref$fp,\n        _ref$countItems = _ref.countItems,\n        countItems = _ref$countItems === void 0 ? false : _ref$countItems;\n\n    _classCallCheck(this, DataFilterExtension);\n\n    if (!DATA_TYPE_FROM_SIZE[filterSize]) {\n      throw new Error('filterSize out of range');\n    }\n\n    return _super.call(this, {\n      filterSize: filterSize,\n      fp64: fp64,\n      countItems: countItems\n    });\n  }\n\n  _createClass(DataFilterExtension, [{\n    key: \"getShaders\",\n    value: function getShaders(extension) {\n      var _extension$opts = extension.opts,\n          filterSize = _extension$opts.filterSize,\n          fp64 = _extension$opts.fp64;\n      return {\n        modules: [fp64 ? shaderModule64 : shaderModule],\n        defines: {\n          DATAFILTER_TYPE: DATA_TYPE_FROM_SIZE[filterSize],\n          DATAFILTER_DOUBLE: Boolean(fp64)\n        }\n      };\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState(context, extension) {\n      var attributeManager = this.getAttributeManager();\n\n      if (attributeManager) {\n        attributeManager.add({\n          filterValues: {\n            size: extension.opts.filterSize,\n            type: extension.opts.fp64 ? 5130 : 5126,\n            accessor: 'getFilterValue',\n            shaderAttributes: {\n              filterValues: {\n                divisor: 0\n              },\n              instanceFilterValues: {\n                divisor: 1\n              }\n            }\n          }\n        });\n      }\n\n      var gl = this.context.gl;\n\n      if (attributeManager && extension.opts.countItems) {\n        var useFloatTarget = aggregator.supportsFloatTarget(gl);\n        attributeManager.add({\n          filterIndices: {\n            size: useFloatTarget ? 1 : 2,\n            vertexOffset: 1,\n            type: 5121,\n            normalized: true,\n            accessor: function accessor(object, _ref2) {\n              var index = _ref2.index;\n              var i = object && object.__source ? object.__source.index : index;\n              return useFloatTarget ? (i + 1) % 255 : [(i + 1) % 255, Math.floor(i / 255) % 255];\n            },\n            shaderAttributes: {\n              filterPrevIndices: {\n                vertexOffset: 0\n              },\n              filterIndices: {\n                vertexOffset: 1\n              }\n            }\n          }\n        });\n        var filterFBO = aggregator.getFramebuffer(gl, useFloatTarget);\n        var filterModel = aggregator.getModel(gl, extension.getShaders(extension), useFloatTarget);\n        this.setState({\n          filterFBO: filterFBO,\n          filterModel: filterModel\n        });\n      }\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref3) {\n      var props = _ref3.props,\n          oldProps = _ref3.oldProps;\n\n      if (this.state.filterModel) {\n        var attributeManager = this.getAttributeManager();\n        var filterNeedsUpdate = attributeManager.attributes.filterValues.needsUpdate() || props.filterEnabled !== oldProps.filterEnabled || props.filterRange !== oldProps.filterRange || props.filterSoftRange !== oldProps.filterSoftRange;\n\n        if (filterNeedsUpdate) {\n          this.setState({\n            filterNeedsUpdate: filterNeedsUpdate\n          });\n        }\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(params, extension) {\n      var _this$state = this.state,\n          filterFBO = _this$state.filterFBO,\n          filterModel = _this$state.filterModel,\n          filterNeedsUpdate = _this$state.filterNeedsUpdate;\n      var onFilteredItemsChange = this.props.onFilteredItemsChange;\n\n      if (filterNeedsUpdate && onFilteredItemsChange && filterModel) {\n        var _this$getAttributeMan = this.getAttributeManager(),\n            _this$getAttributeMan2 = _this$getAttributeMan.attributes,\n            filterValues = _this$getAttributeMan2.filterValues,\n            filterIndices = _this$getAttributeMan2.filterIndices;\n\n        filterModel.setVertexCount(this.getNumInstances());\n        var gl = this.context.gl;\n        clear(gl, {\n          framebuffer: filterFBO,\n          color: [0, 0, 0, 0]\n        });\n        filterModel.updateModuleSettings(params.moduleParameters).setAttributes(_objectSpread(_objectSpread({}, filterValues.getShaderAttributes()), filterIndices && filterIndices.getShaderAttributes())).draw({\n          framebuffer: filterFBO,\n          parameters: _objectSpread(_objectSpread({}, aggregator.parameters), {}, {\n            viewport: [0, 0, filterFBO.width, filterFBO.height]\n          })\n        });\n        var color = readPixelsToArray(filterFBO);\n        var count = 0;\n\n        for (var i = 0; i < color.length; i++) {\n          count += color[i];\n        }\n\n        onFilteredItemsChange({\n          id: this.id,\n          count: count\n        });\n        this.state.filterNeedsUpdate = false;\n      }\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      var _this$state2 = this.state,\n          filterFBO = _this$state2.filterFBO,\n          filterModel = _this$state2.filterModel;\n\n      if (filterFBO) {\n        filterFBO.color.delete();\n        filterFBO.delete();\n        filterModel.delete();\n      }\n    }\n  }]);\n\n  return DataFilterExtension;\n}(LayerExtension);\n\nexport { DataFilterExtension as default };\nDataFilterExtension.extensionName = 'DataFilterExtension';\nDataFilterExtension.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["LayerExtension","shaderModule","shaderModule64","aggregator","readPixelsToArray","clear","defaultProps","getFilterValue","type","value","onFilteredItemsChange","compare","filterEnabled","filterRange","filterSoftRange","filterTransformSize","filterTransformColor","DATA_TYPE_FROM_SIZE","DataFilterExtension","constructor","filterSize","fp64","countItems","Error","getShaders","extension","opts","modules","defines","DATAFILTER_TYPE","DATAFILTER_DOUBLE","Boolean","initializeState","context","attributeManager","getAttributeManager","add","filterValues","size","accessor","shaderAttributes","divisor","instanceFilterValues","gl","useFloatTarget","supportsFloatTarget","filterIndices","vertexOffset","normalized","object","index","i","__source","Math","floor","filterPrevIndices","filterFBO","getFramebuffer","filterModel","getModel","setState","updateState","props","oldProps","state","filterNeedsUpdate","attributes","needsUpdate","draw","params","setVertexCount","getNumInstances","framebuffer","color","updateModuleSettings","moduleParameters","setAttributes","getShaderAttributes","parameters","viewport","width","height","count","length","id","finalizeState","delete","extensionName"],"sources":["../../../src/data-filter/data-filter.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerExtension} from '@deck.gl/core';\nimport {shaderModule, shaderModule64} from './shader-module';\nimport * as aggregator from './aggregator';\nimport {readPixelsToArray, clear} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nconst defaultProps = {\n  getFilterValue: {type: 'accessor', value: 0},\n  onFilteredItemsChange: {type: 'function', value: null, compare: false},\n\n  filterEnabled: true,\n  filterRange: [-1, 1],\n  filterSoftRange: null,\n  filterTransformSize: true,\n  filterTransformColor: true\n};\n\nconst DATA_TYPE_FROM_SIZE = {\n  1: 'float',\n  2: 'vec2',\n  3: 'vec3',\n  4: 'vec4'\n};\n\nexport default class DataFilterExtension extends LayerExtension {\n  constructor({filterSize = 1, fp64 = false, countItems = false} = {}) {\n    if (!DATA_TYPE_FROM_SIZE[filterSize]) {\n      throw new Error('filterSize out of range');\n    }\n\n    super({filterSize, fp64, countItems});\n  }\n\n  getShaders(extension) {\n    const {filterSize, fp64} = extension.opts;\n\n    return {\n      modules: [fp64 ? shaderModule64 : shaderModule],\n      defines: {\n        DATAFILTER_TYPE: DATA_TYPE_FROM_SIZE[filterSize],\n        DATAFILTER_DOUBLE: Boolean(fp64)\n      }\n    };\n  }\n\n  initializeState(context, extension) {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.add({\n        filterValues: {\n          size: extension.opts.filterSize,\n          type: extension.opts.fp64 ? GL.DOUBLE : GL.FLOAT,\n          accessor: 'getFilterValue',\n          shaderAttributes: {\n            filterValues: {\n              divisor: 0\n            },\n            instanceFilterValues: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n\n    const {gl} = this.context;\n    if (attributeManager && extension.opts.countItems) {\n      const useFloatTarget = aggregator.supportsFloatTarget(gl);\n      // This attribute is needed for variable-width data, e.g. Path, SolidPolygon, Text\n      // The vertex shader checks if a vertex has the same \"index\" as the previous vertex\n      // so that we only write one count cross multiple vertices of the same object\n      attributeManager.add({\n        filterIndices: {\n          size: useFloatTarget ? 1 : 2,\n          vertexOffset: 1,\n          type: GL.UNSIGNED_BYTE,\n          normalized: true,\n          accessor: (object, {index}) => {\n            const i = object && object.__source ? object.__source.index : index;\n            return useFloatTarget ? (i + 1) % 255 : [(i + 1) % 255, Math.floor(i / 255) % 255];\n          },\n          shaderAttributes: {\n            filterPrevIndices: {\n              vertexOffset: 0\n            },\n            filterIndices: {\n              vertexOffset: 1\n            }\n          }\n        }\n      });\n\n      const filterFBO = aggregator.getFramebuffer(gl, useFloatTarget);\n      const filterModel = aggregator.getModel(gl, extension.getShaders(extension), useFloatTarget);\n      this.setState({filterFBO, filterModel});\n    }\n  }\n\n  updateState({props, oldProps}) {\n    if (this.state.filterModel) {\n      const attributeManager = this.getAttributeManager();\n      const filterNeedsUpdate =\n        attributeManager.attributes.filterValues.needsUpdate() ||\n        props.filterEnabled !== oldProps.filterEnabled ||\n        props.filterRange !== oldProps.filterRange ||\n        props.filterSoftRange !== oldProps.filterSoftRange;\n      if (filterNeedsUpdate) {\n        this.setState({filterNeedsUpdate});\n      }\n    }\n  }\n\n  draw(params, extension) {\n    const {filterFBO, filterModel, filterNeedsUpdate} = this.state;\n    const {onFilteredItemsChange} = this.props;\n    if (filterNeedsUpdate && onFilteredItemsChange && filterModel) {\n      const {\n        attributes: {filterValues, filterIndices}\n      } = this.getAttributeManager();\n      filterModel.setVertexCount(this.getNumInstances());\n\n      const {gl} = this.context;\n      clear(gl, {framebuffer: filterFBO, color: [0, 0, 0, 0]});\n\n      filterModel\n        .updateModuleSettings(params.moduleParameters)\n        .setAttributes({\n          ...filterValues.getShaderAttributes(),\n          ...(filterIndices && filterIndices.getShaderAttributes())\n        })\n        .draw({\n          framebuffer: filterFBO,\n          parameters: {\n            ...aggregator.parameters,\n            viewport: [0, 0, filterFBO.width, filterFBO.height]\n          }\n        });\n      const color = readPixelsToArray(filterFBO);\n      let count = 0;\n      for (let i = 0; i < color.length; i++) {\n        count += color[i];\n      }\n      onFilteredItemsChange({id: this.id, count});\n\n      this.state.filterNeedsUpdate = false;\n    }\n  }\n\n  finalizeState() {\n    const {filterFBO, filterModel} = this.state;\n    if (filterFBO) {\n      filterFBO.color.delete();\n      filterFBO.delete();\n      filterModel.delete();\n    }\n  }\n}\n\nDataFilterExtension.extensionName = 'DataFilterExtension';\nDataFilterExtension.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}