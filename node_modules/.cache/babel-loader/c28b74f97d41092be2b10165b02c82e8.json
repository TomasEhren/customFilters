{"ast":null,"code":"import _defineProperty from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nvar _DEFAULT_MAPS_URL_FOR;\n\nexport var DEFAULT_USER_COMPONENT_IN_URL = '{user}';\nexport var DEFAULT_REGION_COMPONENT_IN_URL = '{region}';\nexport var API_VERSIONS = {\n  V1: 'v1',\n  V2: 'v2',\n  V3: 'v3'\n};\nexport var DEFAULT_MAPS_URL_FORMAT = (_DEFAULT_MAPS_URL_FOR = {}, _defineProperty(_DEFAULT_MAPS_URL_FOR, API_VERSIONS.V1, \"https://\".concat(DEFAULT_USER_COMPONENT_IN_URL, \".carto.com/api/v1/map\")), _defineProperty(_DEFAULT_MAPS_URL_FOR, API_VERSIONS.V2, \"https://maps-api-v2.\".concat(DEFAULT_REGION_COMPONENT_IN_URL, \".carto.com/user/\").concat(DEFAULT_USER_COMPONENT_IN_URL)), _DEFAULT_MAPS_URL_FOR);\nexport var MAP_TYPES = {\n  QUERY: 'query',\n  TABLE: 'table',\n  TILESET: 'tileset'\n};\nexport var COLUMNS_SUPPORT = [MAP_TYPES.TABLE];\nexport var GEO_COLUMN_SUPPORT = [MAP_TYPES.QUERY, MAP_TYPES.TABLE];\nexport var FORMATS = {\n  GEOJSON: 'geojson',\n  NDJSON: 'ndjson',\n  TILEJSON: 'tilejson',\n  JSON: 'json'\n};\nexport var TILE_FORMATS = {\n  MVT: 'mvt',\n  GEOJSON: 'geojson',\n  BINARY: 'binary'\n};\nexport var SchemaFieldType;\n\n(function (SchemaFieldType) {\n  SchemaFieldType[\"Number\"] = \"number\";\n  SchemaFieldType[\"Bigint\"] = \"bigint\";\n  SchemaFieldType[\"String\"] = \"string\";\n  SchemaFieldType[\"Geometry\"] = \"geometry\";\n  SchemaFieldType[\"Timestamp\"] = \"timestamp\";\n  SchemaFieldType[\"Object\"] = \"object\";\n  SchemaFieldType[\"Boolean\"] = \"boolean\";\n  SchemaFieldType[\"Variant\"] = \"variant\";\n  SchemaFieldType[\"Unknown\"] = \"unknown\";\n})(SchemaFieldType || (SchemaFieldType = {}));\n\nexport function encodeParameter(name, value) {\n  return \"\".concat(name, \"=\").concat(encodeURIComponent(value));\n}","map":{"version":3,"mappings":";;;;AAAA,OAAO,IAAMA,6BAA6B,GAAG,QAAtC;AACP,OAAO,IAAMC,+BAA+B,GAAG,UAAxC;AAGP,OAAO,IAAMC,YAAY,GAAG;EAC1BC,EAAE,EAAE,IADsB;EAE1BC,EAAE,EAAE,IAFsB;EAG1BC,EAAE,EAAE;AAHsB,CAArB;AAOP,OAAO,IAAMC,uBAAuB,uEACjCJ,YAAY,CAACC,EADoB,EAClC,kBAA8BH,6BAA9B,0BADkC,0CAEjCE,YAAY,CAACE,EAFoB,EAElC,8BAA0CH,+BAA1C,6BAA4FD,6BAA5F,CAFkC,yBAA7B;AAKP,OAAO,IAAMO,SAAS,GAAG;EACvBC,KAAK,EAAE,OADgB;EAEvBC,KAAK,EAAE,OAFgB;EAGvBC,OAAO,EAAE;AAHc,CAAlB;AAMP,OAAO,IAAMC,eAAe,GAAG,CAACJ,SAAS,CAACE,KAAX,CAAxB;AACP,OAAO,IAAMG,kBAAkB,GAAG,CAACL,SAAS,CAACC,KAAX,EAAkBD,SAAS,CAACE,KAA5B,CAA3B;AAGP,OAAO,IAAMI,OAAO,GAAG;EACrBC,OAAO,EAAE,SADY;EAErBC,MAAM,EAAE,QAFa;EAGrBC,QAAQ,EAAE,UAHW;EAIrBC,IAAI,EAAE;AAJe,CAAhB;AASP,OAAO,IAAMC,YAAY,GAAG;EAC1BC,GAAG,EAAE,KADqB;EAE1BL,OAAO,EAAE,SAFiB;EAG1BM,MAAM,EAAE;AAHkB,CAArB;AAOP,WAAYC,eAAZ;;WAAYA,iB;EAAAA,e,UAAAA,G,QAAAA;EAAAA,e,UAAAA,G,QAAAA;EAAAA,e,UAAAA,G,QAAAA;EAAAA,e,YAAAA,G,UAAAA;EAAAA,e,aAAAA,G,WAAAA;EAAAA,e,UAAAA,G,QAAAA;EAAAA,e,WAAAA,G,SAAAA;EAAAA,e,WAAAA,G,SAAAA;EAAAA,e,WAAAA,G,SAAAA;GAAAA,e,KAAAA,e;;AAiCZ,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAAuCC,KAAvC,EAAiF;EACtF,iBAAUD,IAAV,cAAkBE,kBAAkB,CAACD,KAAD,CAApC;AACD","names":["DEFAULT_USER_COMPONENT_IN_URL","DEFAULT_REGION_COMPONENT_IN_URL","API_VERSIONS","V1","V2","V3","DEFAULT_MAPS_URL_FORMAT","MAP_TYPES","QUERY","TABLE","TILESET","COLUMNS_SUPPORT","GEO_COLUMN_SUPPORT","FORMATS","GEOJSON","NDJSON","TILEJSON","JSON","TILE_FORMATS","MVT","BINARY","SchemaFieldType","encodeParameter","name","value","encodeURIComponent"],"sources":["../../../src/api/maps-api-common.ts"],"sourcesContent":["export const DEFAULT_USER_COMPONENT_IN_URL = '{user}';\nexport const DEFAULT_REGION_COMPONENT_IN_URL = '{region}';\n\nexport type ValuesOf<T extends {}> = T[keyof T];\nexport const API_VERSIONS = {\n  V1: 'v1',\n  V2: 'v2',\n  V3: 'v3'\n} as const;\nexport type ApiVersion = ValuesOf<typeof API_VERSIONS>;\n\nexport const DEFAULT_MAPS_URL_FORMAT = {\n  [API_VERSIONS.V1]: `https://${DEFAULT_USER_COMPONENT_IN_URL}.carto.com/api/v1/map`,\n  [API_VERSIONS.V2]: `https://maps-api-v2.${DEFAULT_REGION_COMPONENT_IN_URL}.carto.com/user/${DEFAULT_USER_COMPONENT_IN_URL}`\n} as const;\n\nexport const MAP_TYPES = {\n  QUERY: 'query',\n  TABLE: 'table',\n  TILESET: 'tileset'\n} as const;\nexport type MapType = ValuesOf<typeof MAP_TYPES>;\nexport const COLUMNS_SUPPORT = [MAP_TYPES.TABLE];\nexport const GEO_COLUMN_SUPPORT = [MAP_TYPES.QUERY, MAP_TYPES.TABLE];\n\n// AVAILABLE FORMATS\nexport const FORMATS = {\n  GEOJSON: 'geojson',\n  NDJSON: 'ndjson',\n  TILEJSON: 'tilejson',\n  JSON: 'json'\n} as const;\nexport type Format = ValuesOf<typeof FORMATS>;\n\n// AVAILABLE FORMATS FOR TILES\nexport const TILE_FORMATS = {\n  MVT: 'mvt',\n  GEOJSON: 'geojson',\n  BINARY: 'binary'\n} as const;\nexport type TileFormat = ValuesOf<typeof TILE_FORMATS>;\n\nexport enum SchemaFieldType {\n  Number = 'number',\n  Bigint = 'bigint',\n  String = 'string',\n  Geometry = 'geometry',\n  Timestamp = 'timestamp',\n  Object = 'object',\n  Boolean = 'boolean',\n  Variant = 'variant',\n  Unknown = 'unknown'\n}\nexport interface SchemaField {\n  name: string;\n  type: SchemaFieldType; // Field type in the CARTO stack, common for all providers\n}\n\nexport interface MapInstantiation extends MapInstantiationFormats {\n  nrows: number;\n  size?: number;\n  schema?: SchemaField[];\n}\n\ntype MapInstantiationFormats = Record<\n  Format,\n  {\n    url: string[];\n    error?: any;\n  }\n>;\n\n/**\n * Simple encode parameter\n */\nexport function encodeParameter(name: string, value: string | boolean | number): string {\n  return `${name}=${encodeURIComponent(value)}`;\n}\n"]},"metadata":{},"sourceType":"module"}