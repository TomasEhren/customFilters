{"ast":null,"code":"import { COORDINATE_SYSTEM, LayerExtension, log } from '@deck.gl/core';\nimport mask from './shader-module';\nconst defaultProps = {\n  maskId: ''\n};\nexport default class MaskExtension extends LayerExtension {\n  getShaders() {\n    let maskByInstance = ('instancePositions' in this.getAttributeManager().attributes);\n\n    if ('maskByInstance' in this.props) {\n      maskByInstance = this.props.maskByInstance;\n    }\n\n    this.state.maskByInstance = maskByInstance;\n    return {\n      modules: [mask]\n    };\n  }\n\n  draw(_ref) {\n    let {\n      uniforms,\n      context,\n      moduleParameters\n    } = _ref;\n    uniforms.mask_maskByInstance = this.state.maskByInstance;\n    const {\n      maskId\n    } = this.props;\n    const {\n      maskChannels\n    } = moduleParameters;\n    const {\n      viewport\n    } = context;\n\n    if (maskChannels && maskChannels[maskId]) {\n      const {\n        index,\n        bounds,\n        coordinateOrigin: fromCoordinateOrigin\n      } = maskChannels[maskId];\n      let {\n        coordinateSystem: fromCoordinateSystem\n      } = maskChannels[maskId];\n      uniforms.mask_enabled = true;\n      uniforms.mask_channel = index;\n\n      if (fromCoordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n        fromCoordinateSystem = viewport.isGeospatial ? COORDINATE_SYSTEM.LNGLAT : COORDINATE_SYSTEM.CARTESIAN;\n      }\n\n      const opts = {\n        modelMatrix: null,\n        fromCoordinateOrigin,\n        fromCoordinateSystem\n      };\n      const bl = this.projectPosition([bounds[0], bounds[1], 0], opts);\n      const tr = this.projectPosition([bounds[2], bounds[3], 0], opts);\n      uniforms.mask_bounds = [bl[0], bl[1], tr[0], tr[1]];\n    } else {\n      if (maskId) {\n        log.warn(\"Could not find a mask layer with id: \".concat(maskId))();\n      }\n\n      uniforms.mask_enabled = false;\n    }\n  }\n\n}\nMaskExtension.extensionName = 'MaskExtension';\nMaskExtension.defaultProps = defaultProps;","map":{"version":3,"mappings":"AAAA,SAAQA,iBAAR,EAA2BC,cAA3B,EAA2CC,GAA3C,QAAqD,eAArD;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AAEA,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAE;AADW,CAArB;AAIA,eAAe,MAAMC,aAAN,SAA4BL,cAA5B,CAA2C;EACxDM,UAAU,GAAG;IAEX,IAAIC,cAAc,IAAG,uBAAuB,KAAKC,mBAAL,GAA2BC,UAArD,CAAlB;;IAEA,IAAI,oBAAoB,KAAKC,KAA7B,EAAoC;MAClCH,cAAc,GAAG,KAAKG,KAAL,CAAWH,cAA5BA;IACD;;IACD,KAAKI,KAAL,CAAWJ,cAAX,GAA4BA,cAA5B;IAEA,OAAO;MACLK,OAAO,EAAE,CAACV,IAAD;IADJ,CAAP;EAGD;;EAEDW,IAAI,OAAwC;IAAA,IAAvC;MAACC,QAAD;MAAWC,OAAX;MAAoBC;IAApB,CAAuC;IAC1CF,QAAQ,CAACG,mBAATH,GAA+B,KAAKH,KAAL,CAAWJ,cAA1CO;IACA,MAAM;MAACV;IAAD,IAAW,KAAKM,KAAtB;IACA,MAAM;MAACQ;IAAD,IAAiBF,gBAAvB;IACA,MAAM;MAACG;IAAD,IAAaJ,OAAnB;;IACA,IAAIG,YAAY,IAAIA,YAAY,CAACd,MAAD,CAAhC,EAA0C;MACxC,MAAM;QAACgB,KAAD;QAAQC,MAAR;QAAgBC,gBAAgB,EAAEC;MAAlC,IAA0DL,YAAY,CAACd,MAAD,CAA5E;MACA,IAAI;QAACoB,gBAAgB,EAAEC;MAAnB,IAA2CP,YAAY,CAACd,MAAD,CAA3D;MACAU,QAAQ,CAACY,YAATZ,GAAwB,IAAxBA;MACAA,QAAQ,CAACa,YAATb,GAAwBM,KAAxBN;;MAEA,IAAIW,oBAAoB,KAAK1B,iBAAiB,CAAC6B,OAA/C,EAAwD;QACtDH,oBAAoB,GAAGN,QAAQ,CAACU,YAATV,GACnBpB,iBAAiB,CAAC+B,MADCX,GAEnBpB,iBAAiB,CAACgC,SAFtBN;MAGD;;MACD,MAAMO,IAAI,GAAG;QAACC,WAAW,EAAE,IAAd;QAAoBV,oBAApB;QAA0CE;MAA1C,CAAb;MACA,MAAMS,EAAE,GAAG,KAAKC,eAAL,CAAqB,CAACd,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,EAAuB,CAAvB,CAArB,EAAgDW,IAAhD,CAAX;MACA,MAAMI,EAAE,GAAG,KAAKD,eAAL,CAAqB,CAACd,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,EAAuB,CAAvB,CAArB,EAAgDW,IAAhD,CAAX;MACAlB,QAAQ,CAACuB,WAATvB,GAAuB,CAACoB,EAAE,CAAC,CAAD,CAAH,EAAQA,EAAE,CAAC,CAAD,CAAV,EAAeE,EAAE,CAAC,CAAD,CAAjB,EAAsBA,EAAE,CAAC,CAAD,CAAxB,CAAvBtB;IAdF,OAeO;MACL,IAAIV,MAAJ,EAAY;QACVH,GAAG,CAACqC,IAAJrC,gDAAiDG,MAAjD;MACD;;MACDU,QAAQ,CAACY,YAATZ,GAAwB,KAAxBA;IACD;EACF;;AAzCuD;AA4C1DT,aAAa,CAACkC,aAAdlC,GAA8B,eAA9BA;AACAA,aAAa,CAACF,YAAdE,GAA6BF,YAA7BE","names":["COORDINATE_SYSTEM","LayerExtension","log","mask","defaultProps","maskId","MaskExtension","getShaders","maskByInstance","getAttributeManager","attributes","props","state","modules","draw","uniforms","context","moduleParameters","mask_maskByInstance","maskChannels","viewport","index","bounds","coordinateOrigin","fromCoordinateOrigin","coordinateSystem","fromCoordinateSystem","mask_enabled","mask_channel","DEFAULT","isGeospatial","LNGLAT","CARTESIAN","opts","modelMatrix","bl","projectPosition","tr","mask_bounds","warn","extensionName"],"sources":["../../../src/mask/mask.js"],"sourcesContent":["import {COORDINATE_SYSTEM, LayerExtension, log} from '@deck.gl/core';\nimport mask from './shader-module';\n\nconst defaultProps = {\n  maskId: ''\n};\n\nexport default class MaskExtension extends LayerExtension {\n  getShaders() {\n    // Infer by geometry if 'maskByInstance' prop isn't explictly set\n    let maskByInstance = 'instancePositions' in this.getAttributeManager().attributes;\n    // Users can override by setting the `maskByInstance` prop\n    if ('maskByInstance' in this.props) {\n      maskByInstance = this.props.maskByInstance;\n    }\n    this.state.maskByInstance = maskByInstance;\n\n    return {\n      modules: [mask]\n    };\n  }\n\n  draw({uniforms, context, moduleParameters}) {\n    uniforms.mask_maskByInstance = this.state.maskByInstance;\n    const {maskId} = this.props;\n    const {maskChannels} = moduleParameters;\n    const {viewport} = context;\n    if (maskChannels && maskChannels[maskId]) {\n      const {index, bounds, coordinateOrigin: fromCoordinateOrigin} = maskChannels[maskId];\n      let {coordinateSystem: fromCoordinateSystem} = maskChannels[maskId];\n      uniforms.mask_enabled = true;\n      uniforms.mask_channel = index;\n\n      if (fromCoordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n        fromCoordinateSystem = viewport.isGeospatial\n          ? COORDINATE_SYSTEM.LNGLAT\n          : COORDINATE_SYSTEM.CARTESIAN;\n      }\n      const opts = {modelMatrix: null, fromCoordinateOrigin, fromCoordinateSystem};\n      const bl = this.projectPosition([bounds[0], bounds[1], 0], opts);\n      const tr = this.projectPosition([bounds[2], bounds[3], 0], opts);\n      uniforms.mask_bounds = [bl[0], bl[1], tr[0], tr[1]];\n    } else {\n      if (maskId) {\n        log.warn(`Could not find a mask layer with id: ${maskId}`)();\n      }\n      uniforms.mask_enabled = false;\n    }\n  }\n}\n\nMaskExtension.extensionName = 'MaskExtension';\nMaskExtension.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}