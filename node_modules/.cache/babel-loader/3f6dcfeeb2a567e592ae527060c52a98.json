{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { isWebGL2, assertWebGLContext } from '@luma.gl/gltools';\nimport { lumaStats } from '../init';\nimport { getKey, getKeyValue } from '../webgl-utils/constants-to-keys';\nimport { assert } from '../utils/assert';\nimport { uid } from '../utils/utils';\nimport { stubRemovedMethods as _stubRemovedMethods } from '../utils/stub-methods';\nvar ERR_RESOURCE_METHOD_UNDEFINED = 'Resource subclass must define virtual methods';\n\nvar Resource = /*#__PURE__*/function () {\n  function Resource(gl) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Resource);\n\n    assertWebGLContext(gl);\n    var id = opts.id,\n        _opts$userData = opts.userData,\n        userData = _opts$userData === void 0 ? {} : _opts$userData;\n    this.gl = gl;\n    this.gl2 = gl;\n    this.id = id || uid(this.constructor.name);\n    this.userData = userData;\n    this._bound = false;\n    this._handle = opts.handle;\n\n    if (this._handle === undefined) {\n      this._handle = this._createHandle();\n    }\n\n    this.byteLength = 0;\n\n    this._addStats();\n  }\n\n  _createClass(Resource, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.constructor.name, \"(\").concat(this.id, \")\");\n    }\n  }, {\n    key: \"handle\",\n    get: function get() {\n      return this._handle;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$deleteChildren = _ref.deleteChildren,\n          deleteChildren = _ref$deleteChildren === void 0 ? false : _ref$deleteChildren;\n\n      var children = this._handle && this._deleteHandle(this._handle);\n\n      if (this._handle) {\n        this._removeStats();\n      }\n\n      this._handle = null;\n\n      if (children && deleteChildren) {\n        children.filter(Boolean).forEach(function (child) {\n          return child.delete();\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"bind\",\n    value: function bind() {\n      var funcOrHandle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.handle;\n\n      if (typeof funcOrHandle !== 'function') {\n        this._bindHandle(funcOrHandle);\n\n        return this;\n      }\n\n      var value;\n\n      if (!this._bound) {\n        this._bindHandle(this.handle);\n\n        this._bound = true;\n        value = funcOrHandle();\n        this._bound = false;\n\n        this._bindHandle(null);\n      } else {\n        value = funcOrHandle();\n      }\n\n      return value;\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      this.bind(null);\n    }\n  }, {\n    key: \"getParameter\",\n    value: function getParameter(pname) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      pname = getKeyValue(this.gl, pname);\n      assert(pname);\n      var parameters = this.constructor.PARAMETERS || {};\n      var parameter = parameters[pname];\n\n      if (parameter) {\n        var isWebgl2 = isWebGL2(this.gl);\n        var parameterAvailable = (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n        if (!parameterAvailable) {\n          var webgl1Default = parameter.webgl1;\n          var webgl2Default = 'webgl2' in parameter ? parameter.webgl2 : parameter.webgl1;\n          var defaultValue = isWebgl2 ? webgl2Default : webgl1Default;\n          return defaultValue;\n        }\n      }\n\n      return this._getParameter(pname, opts);\n    }\n  }, {\n    key: \"getParameters\",\n    value: function getParameters() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var parameters = options.parameters,\n          keys = options.keys;\n      var PARAMETERS = this.constructor.PARAMETERS || {};\n      var isWebgl2 = isWebGL2(this.gl);\n      var values = {};\n      var parameterKeys = parameters || Object.keys(PARAMETERS);\n\n      var _iterator = _createForOfIteratorHelper(parameterKeys),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var pname = _step.value;\n          var parameter = PARAMETERS[pname];\n          var parameterAvailable = parameter && (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n          if (parameterAvailable) {\n            var key = keys ? getKey(this.gl, pname) : pname;\n            values[key] = this.getParameter(pname, options);\n\n            if (keys && parameter.type === 'GLenum') {\n              values[key] = getKey(this.gl, values[key]);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return values;\n    }\n  }, {\n    key: \"setParameter\",\n    value: function setParameter(pname, value) {\n      pname = getKeyValue(this.gl, pname);\n      assert(pname);\n      var parameters = this.constructor.PARAMETERS || {};\n      var parameter = parameters[pname];\n\n      if (parameter) {\n        var isWebgl2 = isWebGL2(this.gl);\n        var parameterAvailable = (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n        if (!parameterAvailable) {\n          throw new Error('Parameter not available on this platform');\n        }\n\n        if (parameter.type === 'GLenum') {\n          value = getKeyValue(value);\n        }\n      }\n\n      this._setParameter(pname, value);\n\n      return this;\n    }\n  }, {\n    key: \"setParameters\",\n    value: function setParameters(parameters) {\n      for (var pname in parameters) {\n        this.setParameter(pname, parameters[pname]);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"stubRemovedMethods\",\n    value: function stubRemovedMethods(className, version, methodNames) {\n      return _stubRemovedMethods(this, className, version, methodNames);\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize(opts) {}\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n    }\n  }, {\n    key: \"_bindHandle\",\n    value: function _bindHandle(handle) {\n      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n    }\n  }, {\n    key: \"_getOptsFromHandle\",\n    value: function _getOptsFromHandle() {\n      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n    }\n  }, {\n    key: \"_getParameter\",\n    value: function _getParameter(pname, opts) {\n      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n    }\n  }, {\n    key: \"_setParameter\",\n    value: function _setParameter(pname, value) {\n      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n    }\n  }, {\n    key: \"_context\",\n    value: function _context() {\n      this.gl.luma = this.gl.luma || {};\n      return this.gl.luma;\n    }\n  }, {\n    key: \"_addStats\",\n    value: function _addStats() {\n      var name = this.constructor.name;\n      var stats = lumaStats.get('Resource Counts');\n      stats.get('Resources Created').incrementCount();\n      stats.get(\"\".concat(name, \"s Created\")).incrementCount();\n      stats.get(\"\".concat(name, \"s Active\")).incrementCount();\n    }\n  }, {\n    key: \"_removeStats\",\n    value: function _removeStats() {\n      var name = this.constructor.name;\n      var stats = lumaStats.get('Resource Counts');\n      stats.get(\"\".concat(name, \"s Active\")).decrementCount();\n    }\n  }, {\n    key: \"_trackAllocatedMemory\",\n    value: function _trackAllocatedMemory(bytes) {\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.constructor.name;\n      var stats = lumaStats.get('Memory Usage');\n      stats.get('GPU Memory').addCount(bytes);\n      stats.get(\"\".concat(name, \" Memory\")).addCount(bytes);\n      this.byteLength = bytes;\n    }\n  }, {\n    key: \"_trackDeallocatedMemory\",\n    value: function _trackDeallocatedMemory() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.constructor.name;\n      var stats = lumaStats.get('Memory Usage');\n      stats.get('GPU Memory').subtractCount(this.byteLength);\n      stats.get(\"\".concat(name, \" Memory\")).subtractCount(this.byteLength);\n      this.byteLength = 0;\n    }\n  }]);\n\n  return Resource;\n}();\n\nexport { Resource as default };","map":{"version":3,"mappings":"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","names":["isWebGL2","assertWebGLContext","lumaStats","getKey","getKeyValue","assert","uid","stubRemovedMethods","ERR_RESOURCE_METHOD_UNDEFINED","Resource","constructor","gl","opts","id","userData","gl2","name","_bound","_handle","handle","undefined","_createHandle","byteLength","_addStats","toString","delete","deleteChildren","children","_deleteHandle","_removeStats","filter","Boolean","forEach","child","bind","funcOrHandle","_bindHandle","value","unbind","getParameter","pname","parameters","PARAMETERS","parameter","isWebgl2","parameterAvailable","getExtension","extension","webgl1Default","webgl1","webgl2Default","webgl2","defaultValue","_getParameter","getParameters","options","keys","values","parameterKeys","Object","key","type","setParameter","Error","_setParameter","setParameters","className","version","methodNames","initialize","_getOptsFromHandle","_context","luma","stats","get","incrementCount","decrementCount","_trackAllocatedMemory","bytes","addCount","_trackDeallocatedMemory","subtractCount"],"sources":["../../../src/classes/resource.js"],"sourcesContent":["import {isWebGL2, assertWebGLContext} from '@luma.gl/gltools';\nimport {lumaStats} from '../init';\nimport {getKey, getKeyValue} from '../webgl-utils/constants-to-keys';\nimport {assert} from '../utils/assert';\nimport {uid} from '../utils/utils';\nimport {stubRemovedMethods} from '../utils/stub-methods';\n\nconst ERR_RESOURCE_METHOD_UNDEFINED = 'Resource subclass must define virtual methods';\n\n// TODO - Handle context loss\n// function glGetContextLossCount(gl) {\n//   return (gl.luma && gl.luma.glCount) || 0;\n// }\n\nexport default class Resource {\n  constructor(gl, opts = {}) {\n    assertWebGLContext(gl);\n\n    const {id, userData = {}} = opts;\n    this.gl = gl;\n    // @ts-ignore\n    this.gl2 = gl;\n    // this.ext = polyfillContext(gl);\n    this.id = id || uid(this.constructor.name);\n    this.userData = userData;\n    this._bound = false;\n\n    // Set the handle\n    // If handle was provided, use it, otherwise create a new handle\n\n    // TODO - Stores the handle with context loss information\n    // this.glCount = glGetContextLossCount(this.gl);\n\n    // Default VertexArray needs to be created with null handle, so compare against undefined\n    this._handle = opts.handle;\n    if (this._handle === undefined) {\n      this._handle = this._createHandle();\n    }\n\n    // Only meaningful for resources that allocate GPU memory\n    this.byteLength = 0;\n\n    this._addStats();\n  }\n\n  toString() {\n    return `${this.constructor.name}(${this.id})`;\n  }\n\n  get handle() {\n    // TODO - Add context loss handling\n    // Will regenerate and reinitialize the handle if necessary\n    // const glCount = glGetContextLossCount(this.gl);\n    // if (this.glCount !== glCount) {\n    //   this._handle = this._createHandle(this.opts);\n    //   this._glCount = glCount;\n    //   // Reinitialize object\n    //   this.initialize(this.opts);\n    // }\n    return this._handle;\n  }\n\n  delete({deleteChildren = false} = {}) {\n    // Delete this object, and get refs to any children\n    // @ts-ignore\n    const children = this._handle && this._deleteHandle(this._handle);\n    if (this._handle) {\n      this._removeStats();\n    }\n    this._handle = null;\n\n    // Optionally, recursively delete the children\n    // @ts-ignore\n    if (children && deleteChildren) {\n      // @ts-ignore\n      children.filter(Boolean).forEach(child => child.delete());\n    }\n\n    return this;\n  }\n\n  bind(funcOrHandle = this.handle) {\n    if (typeof funcOrHandle !== 'function') {\n      this._bindHandle(funcOrHandle);\n      return this;\n    }\n\n    let value;\n\n    if (!this._bound) {\n      this._bindHandle(this.handle);\n      this._bound = true;\n\n      value = funcOrHandle();\n\n      this._bound = false;\n      this._bindHandle(null);\n    } else {\n      value = funcOrHandle();\n    }\n\n    return value;\n  }\n\n  unbind() {\n    this.bind(null);\n  }\n\n  /**\n   * Query a Resource parameter\n   *\n   * @param {GLenum} pname\n   * @return {GLint|GLfloat|GLenum} param\n   */\n  getParameter(pname, opts = {}) {\n    pname = getKeyValue(this.gl, pname);\n    assert(pname);\n\n    // @ts-ignore\n    const parameters = this.constructor.PARAMETERS || {};\n\n    // Use parameter definitions to handle unsupported parameters\n    const parameter = parameters[pname];\n    if (parameter) {\n      const isWebgl2 = isWebGL2(this.gl);\n\n      // Check if we can query for this parameter\n      const parameterAvailable =\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        const webgl1Default = parameter.webgl1;\n        const webgl2Default = 'webgl2' in parameter ? parameter.webgl2 : parameter.webgl1;\n        const defaultValue = isWebgl2 ? webgl2Default : webgl1Default;\n        return defaultValue;\n      }\n    }\n\n    // If unknown parameter - Could be a valid parameter not covered by PARAMS\n    // Attempt to query for it and let WebGL report errors\n    return this._getParameter(pname, opts);\n  }\n\n  // Many resources support a getParameter call -\n  // getParameters will get all parameters - slow but useful for debugging\n  // eslint-disable-next-line complexity\n  getParameters(options = {}) {\n    const {parameters, keys} = options;\n\n    // Get parameter definitions for this Resource\n    // @ts-ignore\n    const PARAMETERS = this.constructor.PARAMETERS || {};\n\n    const isWebgl2 = isWebGL2(this.gl);\n\n    const values = {};\n\n    // Query all parameters if no list provided\n    const parameterKeys = parameters || Object.keys(PARAMETERS);\n\n    // WEBGL limits\n    for (const pname of parameterKeys) {\n      const parameter = PARAMETERS[pname];\n\n      // Check if this parameter is available on this platform\n      const parameterAvailable =\n        parameter &&\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (parameterAvailable) {\n        const key = keys ? getKey(this.gl, pname) : pname;\n        values[key] = this.getParameter(pname, options);\n        if (keys && parameter.type === 'GLenum') {\n          values[key] = getKey(this.gl, values[key]);\n        }\n      }\n    }\n\n    return values;\n  }\n\n  /**\n   * Update a Resource setting\n   *\n   * @todo - cache parameter to avoid issuing WebGL calls?\n   *\n   * @param {string} pname - parameter (GL constant, value or key)\n   * @param {GLint|GLfloat|GLenum} value\n   * @return {Resource} returns self to enable chaining\n   */\n  setParameter(pname, value) {\n    pname = getKeyValue(this.gl, pname);\n    assert(pname);\n\n    // @ts-ignore\n    const parameters = this.constructor.PARAMETERS || {};\n\n    const parameter = parameters[pname];\n    if (parameter) {\n      const isWebgl2 = isWebGL2(this.gl);\n\n      // Check if this parameter is available on this platform\n      const parameterAvailable =\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        throw new Error('Parameter not available on this platform');\n      }\n\n      // Handle string keys\n      if (parameter.type === 'GLenum') {\n        value = getKeyValue(value);\n      }\n    }\n\n    // If unknown parameter - Could be a valid parameter not covered by PARAMS\n    // attempt to set it and let WebGL report errors\n    this._setParameter(pname, value);\n    return this;\n  }\n\n  /*\n   * Batch update resource parameters\n   * Assumes the subclass supports a setParameter call\n   */\n  setParameters(parameters) {\n    for (const pname in parameters) {\n      this.setParameter(pname, parameters[pname]);\n    }\n    return this;\n  }\n\n  // Install stubs for removed methods\n  stubRemovedMethods(className, version, methodNames) {\n    return stubRemovedMethods(this, className, version, methodNames);\n  }\n\n  // PUBLIC VIRTUAL METHODS\n  initialize(opts) {}\n\n  // PROTECTED METHODS - These must be overridden by subclass\n  _createHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _deleteHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _bindHandle(handle) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _getOptsFromHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  /** @returns {number} */\n  _getParameter(pname, opts) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _setParameter(pname, value) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  // PRIVATE METHODS\n\n  _context() {\n    this.gl.luma = this.gl.luma || {};\n    return this.gl.luma;\n  }\n\n  _addStats() {\n    const name = this.constructor.name;\n    const stats = lumaStats.get('Resource Counts');\n\n    stats.get('Resources Created').incrementCount();\n    stats.get(`${name}s Created`).incrementCount();\n    stats.get(`${name}s Active`).incrementCount();\n  }\n\n  _removeStats() {\n    const name = this.constructor.name;\n    const stats = lumaStats.get('Resource Counts');\n\n    stats.get(`${name}s Active`).decrementCount();\n  }\n\n  _trackAllocatedMemory(bytes, name = this.constructor.name) {\n    const stats = lumaStats.get('Memory Usage');\n\n    stats.get('GPU Memory').addCount(bytes);\n    stats.get(`${name} Memory`).addCount(bytes);\n    this.byteLength = bytes;\n  }\n\n  _trackDeallocatedMemory(name = this.constructor.name) {\n    const stats = lumaStats.get('Memory Usage');\n\n    stats.get('GPU Memory').subtractCount(this.byteLength);\n    stats.get(`${name} Memory`).subtractCount(this.byteLength);\n    this.byteLength = 0;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}