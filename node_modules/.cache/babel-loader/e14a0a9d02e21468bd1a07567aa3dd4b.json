{"ast":null,"code":"import Layer from './layer';\nimport debug from '../debug';\nimport { flatten } from '../utils/flatten';\nconst TRACE_RENDER_LAYERS = 'compositeLayer.renderLayers';\nexport default class CompositeLayer extends Layer {\n  get isComposite() {\n    return true;\n  }\n\n  get isLoaded() {\n    return super.isLoaded && this.getSubLayers().every(layer => layer.isLoaded);\n  }\n\n  getSubLayers() {\n    return this.internalState && this.internalState.subLayers || [];\n  }\n\n  initializeState() {}\n\n  setState(updateObject) {\n    super.setState(updateObject);\n    this.setNeedsUpdate();\n  }\n\n  getPickingInfo(_ref) {\n    let {\n      info\n    } = _ref;\n    const {\n      object\n    } = info;\n    const isDataWrapped = object && object.__source && object.__source.parent && object.__source.parent.id === this.id;\n\n    if (!isDataWrapped) {\n      return info;\n    }\n\n    info.object = object.__source.object;\n    info.index = object.__source.index;\n    return info;\n  }\n\n  renderLayers() {\n    return null;\n  }\n\n  filterSubLayer(context) {\n    return true;\n  }\n\n  shouldRenderSubLayer(id, data) {\n    return data && data.length;\n  }\n\n  getSubLayerClass(id, DefaultLayerClass) {\n    const {\n      _subLayerProps: overridingProps\n    } = this.props;\n    return overridingProps && overridingProps[id] && overridingProps[id].type || DefaultLayerClass;\n  }\n\n  getSubLayerRow(row, sourceObject, sourceObjectIndex) {\n    row.__source = {\n      parent: this,\n      object: sourceObject,\n      index: sourceObjectIndex\n    };\n    return row;\n  }\n\n  getSubLayerAccessor(accessor) {\n    if (typeof accessor === 'function') {\n      const objectInfo = {\n        data: this.props.data,\n        target: []\n      };\n      return (x, i) => {\n        if (x && x.__source) {\n          objectInfo.index = x.__source.index;\n          return accessor(x.__source.object, objectInfo);\n        }\n\n        return accessor(x, i);\n      };\n    }\n\n    return accessor;\n  }\n\n  getSubLayerProps() {\n    let sublayerProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation,\n      _subLayerProps: overridingProps\n    } = this.props;\n    const newProps = {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation\n    };\n    const overridingSublayerProps = overridingProps && overridingProps[sublayerProps.id];\n    const overridingSublayerTriggers = overridingSublayerProps && overridingSublayerProps.updateTriggers;\n    const sublayerId = sublayerProps.id || 'sublayer';\n\n    if (overridingSublayerProps) {\n      const propTypes = this.constructor._propTypes;\n      const subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};\n\n      for (const key in overridingSublayerProps) {\n        const propType = subLayerPropTypes[key] || propTypes[key];\n\n        if (propType && propType.type === 'accessor') {\n          overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);\n        }\n      }\n    }\n\n    Object.assign(newProps, sublayerProps, overridingSublayerProps);\n    newProps.id = \"\".concat(this.props.id, \"-\").concat(sublayerId);\n    newProps.updateTriggers = {\n      all: this.props.updateTriggers.all,\n      ...sublayerProps.updateTriggers,\n      ...overridingSublayerTriggers\n    };\n\n    for (const extension of extensions) {\n      const passThroughProps = extension.getSubLayerProps.call(this, extension);\n\n      if (passThroughProps) {\n        Object.assign(newProps, passThroughProps, {\n          updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)\n        });\n      }\n    }\n\n    return newProps;\n  }\n\n  _updateAutoHighlight(info) {\n    for (const layer of this.getSubLayers()) {\n      layer.updateAutoHighlight(info);\n    }\n  }\n\n  _getAttributeManager() {\n    return null;\n  }\n\n  _renderLayers() {\n    let {\n      subLayers\n    } = this.internalState;\n    const shouldUpdate = !subLayers || this.needsUpdate();\n\n    if (shouldUpdate) {\n      subLayers = this.renderLayers();\n      subLayers = flatten(subLayers, Boolean);\n      this.internalState.subLayers = subLayers;\n    }\n\n    debug(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);\n\n    for (const layer of subLayers) {\n      layer.parent = this;\n    }\n  }\n\n}\nCompositeLayer.layerName = 'CompositeLayer';","map":{"version":3,"mappings":"AAmBA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAAQC,OAAR,QAAsB,kBAAtB;AAEA,MAAMC,mBAAmB,GAAG,6BAA5B;AAEA,eAAe,MAAMC,cAAN,SAA6BJ,KAA7B,CAAmC;EACjC,IAAXK,WAAW,GAAG;IAChB,OAAO,IAAP;EACD;;EAEW,IAARC,QAAQ,GAAG;IACb,OAAO,MAAMA,QAAN,IAAkB,KAAKC,YAAL,GAAoBC,KAApB,CAA0BC,KAAK,IAAIA,KAAK,CAACH,QAAzC,CAAzB;EACD;;EAEDC,YAAY,GAAG;IACb,OAAQ,KAAKG,aAAL,IAAsB,KAAKA,aAAL,CAAmBC,SAAzC,IAAuD,EAA/D;EACD;;EAIDC,eAAe,GAAG,CAAE;;EAGpBC,QAAQ,CAACC,YAAD,EAAe;IACrB,MAAMD,QAAN,CAAeC,YAAf;IAMA,KAAKC,cAAL;EACD;;EAMDC,cAAc,OAAS;IAAA,IAAR;MAACC;IAAD,CAAQ;IACrB,MAAM;MAACC;IAAD,IAAWD,IAAjB;IACA,MAAME,aAAa,GACjBD,MAAM,IAAIA,MAAM,CAACE,QAAjBF,IAA6BA,MAAM,CAACE,QAAPF,CAAgBG,MAA7CH,IAAuDA,MAAM,CAACE,QAAPF,CAAgBG,MAAhBH,CAAuBI,EAAvBJ,KAA8B,KAAKI,EAD5F;;IAGA,IAAI,CAACH,aAAL,EAAoB;MAClB,OAAOF,IAAP;IACD;;IAGDA,IAAI,CAACC,MAALD,GAAcC,MAAM,CAACE,QAAPF,CAAgBA,MAA9BD;IACAA,IAAI,CAACM,KAALN,GAAaC,MAAM,CAACE,QAAPF,CAAgBK,KAA7BN;IAEA,OAAOA,IAAP;EACD;;EAGDO,YAAY,GAAG;IACb,OAAO,IAAP;EACD;;EAUDC,cAAc,CAACC,OAAD,EAAU;IACtB,OAAO,IAAP;EACD;;EAGDC,oBAAoB,CAACL,EAAD,EAAKM,IAAL,EAAW;IAC7B,OAAOA,IAAI,IAAIA,IAAI,CAACC,MAApB;EACD;;EAGDC,gBAAgB,CAACR,EAAD,EAAKS,iBAAL,EAAwB;IACtC,MAAM;MAACC,cAAc,EAAEC;IAAjB,IAAoC,KAAKC,KAA/C;IAEA,OACGD,eAAe,IAAIA,eAAe,CAACX,EAAD,CAAlCW,IAA0CA,eAAe,CAACX,EAAD,CAAfW,CAAoBE,IAA9DF,IAAuEF,iBAD1E;EAGD;;EAIDK,cAAc,CAACC,GAAD,EAAMC,YAAN,EAAoBC,iBAApB,EAAuC;IACnDF,GAAG,CAACjB,QAAJiB,GAAe;MACbhB,MAAM,EAAE,IADK;MAEbH,MAAM,EAAEoB,YAFK;MAGbf,KAAK,EAAEgB;IAHM,CAAfF;IAKA,OAAOA,GAAP;EACD;;EAKDG,mBAAmB,CAACC,QAAD,EAAW;IAC5B,IAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;MAClC,MAAMC,UAAU,GAAG;QACjBd,IAAI,EAAE,KAAKM,KAAL,CAAWN,IADA;QAEjBe,MAAM,EAAE;MAFS,CAAnB;MAIA,OAAO,CAACC,CAAD,EAAIC,CAAJ,KAAU;QACf,IAAID,CAAC,IAAIA,CAAC,CAACxB,QAAX,EAAqB;UACnBsB,UAAU,CAACnB,KAAXmB,GAAmBE,CAAC,CAACxB,QAAFwB,CAAWrB,KAA9BmB;UACA,OAAOD,QAAQ,CAACG,CAAC,CAACxB,QAAFwB,CAAW1B,MAAZ,EAAoBwB,UAApB,CAAf;QACD;;QACD,OAAOD,QAAQ,CAACG,CAAD,EAAIC,CAAJ,CAAf;MALF;IAOD;;IACD,OAAOJ,QAAP;EACD;;EAIDK,gBAAgB,GAAqB;IAAA,IAApBC,aAAoB,uEAAJ,EAAI;IACnC,MAAM;MACJC,OADI;MAEJC,QAFI;MAGJC,OAHI;MAIJC,UAJI;MAKJC,gBALI;MAMJC,sBANI;MAOJC,aAPI;MAQJC,cARI;MASJC,gBATI;MAUJC,gBAVI;MAWJC,aAXI;MAYJC,cAZI;MAaJC,WAbI;MAcJC,UAdI;MAeJC,KAfI;MAgBJC,SAhBI;MAiBJ/B,cAAc,EAAEC;IAjBZ,IAkBF,KAAKC,KAlBT;IAmBA,MAAM8B,QAAQ,GAAG;MACfhB,OADe;MAEfC,QAFe;MAGfC,OAHe;MAIfC,UAJe;MAKfC,gBALe;MAMfC,sBANe;MAOfC,aAPe;MAQfC,cARe;MASfC,gBATe;MAUfC,gBAVe;MAWfC,aAXe;MAYfC,cAZe;MAafC,WAbe;MAcfC,UAde;MAefC,KAfe;MAgBfC;IAhBe,CAAjB;IAmBA,MAAME,uBAAuB,GAAGhC,eAAe,IAAIA,eAAe,CAACc,aAAa,CAACzB,EAAf,CAAlE;IACA,MAAM4C,0BAA0B,GAC9BD,uBAAuB,IAAIA,uBAAuB,CAACE,cADrD;IAEA,MAAMC,UAAU,GAAGrB,aAAa,CAACzB,EAAdyB,IAAoB,UAAvC;;IAEA,IAAIkB,uBAAJ,EAA6B;MAC3B,MAAMI,SAAS,GAAG,KAAKC,WAAL,CAAiBC,UAAnC;MACA,MAAMC,iBAAiB,GAAGzB,aAAa,CAACZ,IAAdY,GAAqBA,aAAa,CAACZ,IAAdY,CAAmBwB,UAAxCxB,GAAqD,EAA/E;;MACA,KAAK,MAAM0B,GAAX,IAAkBR,uBAAlB,EAA2C;QACzC,MAAMS,QAAQ,GAAGF,iBAAiB,CAACC,GAAD,CAAjBD,IAA0BH,SAAS,CAACI,GAAD,CAApD;;QAEA,IAAIC,QAAQ,IAAIA,QAAQ,CAACvC,IAATuC,KAAkB,UAAlC,EAA8C;UAC5CT,uBAAuB,CAACQ,GAAD,CAAvBR,GAA+B,KAAKzB,mBAAL,CAAyByB,uBAAuB,CAACQ,GAAD,CAAhD,CAA/BR;QACD;MACF;IACF;;IAEDU,MAAM,CAACC,MAAPD,CACEX,QADFW,EAEE5B,aAFF4B,EAIEV,uBAJFU;IAMAX,QAAQ,CAAC1C,EAAT0C,aAAiB,KAAK9B,KAAL,CAAWZ,EAA5B,cAAkC8C,UAAlC;IACAJ,QAAQ,CAACG,cAATH,GAA0B;MACxBa,GAAG,EAAE,KAAK3C,KAAL,CAAWiC,cAAX,CAA0BU,GADP;MAExB,GAAG9B,aAAa,CAACoB,cAFO;MAGxB,GAAGD;IAHqB,CAA1BF;;IAOA,KAAK,MAAMc,SAAX,IAAwBjB,UAAxB,EAAoC;MAClC,MAAMkB,gBAAgB,GAAGD,SAAS,CAAChC,gBAAVgC,CAA2BE,IAA3BF,CAAgC,IAAhCA,EAAsCA,SAAtCA,CAAzB;;MACA,IAAIC,gBAAJ,EAAsB;QACpBJ,MAAM,CAACC,MAAPD,CAAcX,QAAdW,EAAwBI,gBAAxBJ,EAA0C;UACxCR,cAAc,EAAEQ,MAAM,CAACC,MAAPD,CAAcX,QAAQ,CAACG,cAAvBQ,EAAuCI,gBAAgB,CAACZ,cAAxDQ;QADwB,CAA1CA;MAGD;IACF;;IAED,OAAOX,QAAP;EACD;;EAEDiB,oBAAoB,CAAChE,IAAD,EAAO;IACzB,KAAK,MAAMR,KAAX,IAAoB,KAAKF,YAAL,EAApB,EAAyC;MACvCE,KAAK,CAACyE,mBAANzE,CAA0BQ,IAA1BR;IACD;EACF;;EAED0E,oBAAoB,GAAG;IACrB,OAAO,IAAP;EACD;;EAGDC,aAAa,GAAG;IACd,IAAI;MAACzE;IAAD,IAAc,KAAKD,aAAvB;IACA,MAAM2E,YAAY,GAAG,CAAC1E,SAAD,IAAc,KAAK2E,WAAL,EAAnC;;IACA,IAAID,YAAJ,EAAkB;MAChB1E,SAAS,GAAG,KAAKa,YAAL,EAAZb;MAIAA,SAAS,GAAGT,OAAO,CAACS,SAAD,EAAY4E,OAAZ,CAAnB5E;MACA,KAAKD,aAAL,CAAmBC,SAAnB,GAA+BA,SAA/B;IACD;;IACDV,KAAK,CAACE,mBAAD,EAAsB,IAAtB,EAA4BkF,YAA5B,EAA0C1E,SAA1C,CAALV;;IAIA,KAAK,MAAMQ,KAAX,IAAoBE,SAApB,EAA+B;MAC7BF,KAAK,CAACY,MAANZ,GAAe,IAAfA;IACD;EACF;;AA/N+C;AAkOlDL,cAAc,CAACoF,SAAfpF,GAA2B,gBAA3BA","names":["Layer","debug","flatten","TRACE_RENDER_LAYERS","CompositeLayer","isComposite","isLoaded","getSubLayers","every","layer","internalState","subLayers","initializeState","setState","updateObject","setNeedsUpdate","getPickingInfo","info","object","isDataWrapped","__source","parent","id","index","renderLayers","filterSubLayer","context","shouldRenderSubLayer","data","length","getSubLayerClass","DefaultLayerClass","_subLayerProps","overridingProps","props","type","getSubLayerRow","row","sourceObject","sourceObjectIndex","getSubLayerAccessor","accessor","objectInfo","target","x","i","getSubLayerProps","sublayerProps","opacity","pickable","visible","parameters","getPolygonOffset","highlightedObjectIndex","autoHighlight","highlightColor","coordinateSystem","coordinateOrigin","wrapLongitude","positionFormat","modelMatrix","extensions","fetch","operation","newProps","overridingSublayerProps","overridingSublayerTriggers","updateTriggers","sublayerId","propTypes","constructor","_propTypes","subLayerPropTypes","key","propType","Object","assign","all","extension","passThroughProps","call","_updateAutoHighlight","updateAutoHighlight","_getAttributeManager","_renderLayers","shouldUpdate","needsUpdate","Boolean","layerName"],"sources":["../../../src/lib/composite-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport Layer from './layer';\nimport debug from '../debug';\nimport {flatten} from '../utils/flatten';\n\nconst TRACE_RENDER_LAYERS = 'compositeLayer.renderLayers';\n\nexport default class CompositeLayer extends Layer {\n  get isComposite() {\n    return true;\n  }\n\n  get isLoaded() {\n    return super.isLoaded && this.getSubLayers().every(layer => layer.isLoaded);\n  }\n\n  getSubLayers() {\n    return (this.internalState && this.internalState.subLayers) || [];\n  }\n\n  // initializeState is usually not needed for composite layers\n  // Provide empty definition to disable check for missing definition\n  initializeState() {}\n\n  // Updates selected state members and marks the composite layer to need rerender\n  setState(updateObject) {\n    super.setState(updateObject);\n    // Trigger a layer update\n    // Although conceptually layer.draw and compositeLayer.renderLayers are equivalent,\n    // they are executed during different lifecycles.\n    // draw can be called without calling updateState (e.g. most viewport changes),\n    // while renderLayers can only be called during a recursive layer update.\n    this.setNeedsUpdate();\n  }\n\n  // called to augment the info object that is bubbled up from a sublayer\n  // override Layer.getPickingInfo() because decoding / setting uniform do\n  // not apply to a composite layer.\n  // @return null to cancel event\n  getPickingInfo({info}) {\n    const {object} = info;\n    const isDataWrapped =\n      object && object.__source && object.__source.parent && object.__source.parent.id === this.id;\n\n    if (!isDataWrapped) {\n      return info;\n    }\n\n    // override object with picked data\n    info.object = object.__source.object;\n    info.index = object.__source.index;\n\n    return info;\n  }\n\n  // Implement to generate subLayers\n  renderLayers() {\n    return null;\n  }\n\n  /**\n   * Filters sub layers at draw time\n   * @param {Layer} context.layer - sub layer instance\n   * @param {Viewport} context.viewport - the viewport being rendered in\n   * @param {Boolean} context.isPicking - whether it is a picking pass\n   * @param {String} context.pass - the current pass\n   * @return {Boolean} true if the sub layer should be drawn\n   */\n  filterSubLayer(context) {\n    return true;\n  }\n\n  // Returns true if sub layer needs to be rendered\n  shouldRenderSubLayer(id, data) {\n    return data && data.length;\n  }\n\n  // Returns sub layer class for a specific sublayer\n  getSubLayerClass(id, DefaultLayerClass) {\n    const {_subLayerProps: overridingProps} = this.props;\n\n    return (\n      (overridingProps && overridingProps[id] && overridingProps[id].type) || DefaultLayerClass\n    );\n  }\n\n  // When casting user data into another format to pass to sublayers,\n  // add reference to the original object and object index\n  getSubLayerRow(row, sourceObject, sourceObjectIndex) {\n    row.__source = {\n      parent: this,\n      object: sourceObject,\n      index: sourceObjectIndex\n    };\n    return row;\n  }\n\n  // Some composite layers cast user data into another format before passing to sublayers\n  // We need to unwrap them before calling the accessor so that they see the original data\n  // objects\n  getSubLayerAccessor(accessor) {\n    if (typeof accessor === 'function') {\n      const objectInfo = {\n        data: this.props.data,\n        target: []\n      };\n      return (x, i) => {\n        if (x && x.__source) {\n          objectInfo.index = x.__source.index;\n          return accessor(x.__source.object, objectInfo);\n        }\n        return accessor(x, i);\n      };\n    }\n    return accessor;\n  }\n\n  // Returns sub layer props for a specific sublayer\n  // eslint-disable-next-line complexity\n  getSubLayerProps(sublayerProps = {}) {\n    const {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation,\n      _subLayerProps: overridingProps\n    } = this.props;\n    const newProps = {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation\n    };\n\n    const overridingSublayerProps = overridingProps && overridingProps[sublayerProps.id];\n    const overridingSublayerTriggers =\n      overridingSublayerProps && overridingSublayerProps.updateTriggers;\n    const sublayerId = sublayerProps.id || 'sublayer';\n\n    if (overridingSublayerProps) {\n      const propTypes = this.constructor._propTypes;\n      const subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};\n      for (const key in overridingSublayerProps) {\n        const propType = subLayerPropTypes[key] || propTypes[key];\n        // eslint-disable-next-line\n        if (propType && propType.type === 'accessor') {\n          overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);\n        }\n      }\n    }\n\n    Object.assign(\n      newProps,\n      sublayerProps,\n      // experimental feature that allows users to override sublayer props via parent layer prop\n      overridingSublayerProps\n    );\n    newProps.id = `${this.props.id}-${sublayerId}`;\n    newProps.updateTriggers = {\n      all: this.props.updateTriggers.all,\n      ...sublayerProps.updateTriggers,\n      ...overridingSublayerTriggers\n    };\n\n    // Pass through extension props\n    for (const extension of extensions) {\n      const passThroughProps = extension.getSubLayerProps.call(this, extension);\n      if (passThroughProps) {\n        Object.assign(newProps, passThroughProps, {\n          updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)\n        });\n      }\n    }\n\n    return newProps;\n  }\n\n  _updateAutoHighlight(info) {\n    for (const layer of this.getSubLayers()) {\n      layer.updateAutoHighlight(info);\n    }\n  }\n\n  _getAttributeManager() {\n    return null;\n  }\n\n  // Called by layer manager to render subLayers\n  _renderLayers() {\n    let {subLayers} = this.internalState;\n    const shouldUpdate = !subLayers || this.needsUpdate();\n    if (shouldUpdate) {\n      subLayers = this.renderLayers();\n      // Flatten the returned array, removing any null, undefined or false\n      // this allows layers to render sublayers conditionally\n      // (see CompositeLayer.renderLayers docs)\n      subLayers = flatten(subLayers, Boolean);\n      this.internalState.subLayers = subLayers;\n    }\n    debug(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);\n\n    // populate reference to parent layer (this layer)\n    // NOTE: needs to be done even when reusing layers as the parent may have changed\n    for (const layer of subLayers) {\n      layer.parent = this;\n    }\n  }\n}\n\nCompositeLayer.layerName = 'CompositeLayer';\n"]},"metadata":{},"sourceType":"module"}