{"ast":null,"code":"import { PathLayer } from '@deck.gl/layers';\nconst defaultProps = {\n  fadeTrail: true,\n  trailLength: {\n    type: 'number',\n    value: 120,\n    min: 0\n  },\n  currentTime: {\n    type: 'number',\n    value: 0,\n    min: 0\n  },\n  getTimestamps: {\n    type: 'accessor',\n    value: null\n  }\n};\nexport default class TripsLayer extends PathLayer {\n  getShaders() {\n    const shaders = super.getShaders();\n    shaders.inject = {\n      'vs:#decl': \"uniform float trailLength;\\nattribute float instanceTimestamps;\\nattribute float instanceNextTimestamps;\\nvarying float vTime;\\n\",\n      'vs:#main-end': \"vTime = instanceTimestamps + (instanceNextTimestamps - instanceTimestamps) * vPathPosition.y / vPathLength;\\n\",\n      'fs:#decl': \"uniform bool fadeTrail;\\nuniform float trailLength;\\nuniform float currentTime;\\nvarying float vTime;\\n\",\n      'fs:#main-start': \"if(vTime > currentTime || (fadeTrail && (vTime < currentTime - trailLength))) {\\n  discard;\\n}\\n\",\n      'fs:DECKGL_FILTER_COLOR': \"if(fadeTrail) {\\n  color.a *= 1.0 - (currentTime - vTime) / trailLength;\\n}\\n\"\n    };\n    return shaders;\n  }\n\n  initializeState(params) {\n    super.initializeState(params);\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      timestamps: {\n        size: 1,\n        accessor: 'getTimestamps',\n        shaderAttributes: {\n          instanceTimestamps: {\n            vertexOffset: 0\n          },\n          instanceNextTimestamps: {\n            vertexOffset: 1\n          }\n        }\n      }\n    });\n  }\n\n  draw(params) {\n    const {\n      fadeTrail,\n      trailLength,\n      currentTime\n    } = this.props;\n    params.uniforms = { ...params.uniforms,\n      fadeTrail,\n      trailLength,\n      currentTime\n    };\n    super.draw(params);\n  }\n\n}\nTripsLayer.layerName = 'TripsLayer';\nTripsLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"AAoBA,SAAQA,SAAR,QAAwB,iBAAxB;AAEA,MAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE,IADQ;EAEnBC,WAAW,EAAE;IAACC,IAAI,EAAE,QAAP;IAAiBC,KAAK,EAAE,GAAxB;IAA6BC,GAAG,EAAE;EAAlC,CAFM;EAGnBC,WAAW,EAAE;IAACH,IAAI,EAAE,QAAP;IAAiBC,KAAK,EAAE,CAAxB;IAA2BC,GAAG,EAAE;EAAhC,CAHM;EAInBE,aAAa,EAAE;IAACJ,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAE;EAA1B;AAJI,CAArB;AAOA,eAAe,MAAMI,UAAN,SAAyBT,SAAzB,CAAmC;EAChDU,UAAU,GAAG;IACX,MAAMC,OAAO,GAAG,MAAMD,UAAN,EAAhB;IACAC,OAAO,CAACC,MAARD,GAAiB;MACf,8IADe;MAQf,+HARe;MAWf,qHAXe;MAkBf,oHAlBe;MAwBf;IAxBe,CAAjBA;IA8BA,OAAOA,OAAP;EACD;;EAEDE,eAAe,CAACC,MAAD,EAAS;IACtB,MAAMD,eAAN,CAAsBC,MAAtB;IAEA,MAAMC,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;IACAD,gBAAgB,CAACE,YAAjBF,CAA8B;MAC5BG,UAAU,EAAE;QACVC,IAAI,EAAE,CADI;QAEVC,QAAQ,EAAE,eAFA;QAGVC,gBAAgB,EAAE;UAChBC,kBAAkB,EAAE;YAClBC,YAAY,EAAE;UADI,CADJ;UAIhBC,sBAAsB,EAAE;YACtBD,YAAY,EAAE;UADQ;QAJR;MAHR;IADgB,CAA9BR;EAcD;;EAEDU,IAAI,CAACX,MAAD,EAAS;IACX,MAAM;MAACZ,SAAD;MAAYC,WAAZ;MAAyBI;IAAzB,IAAwC,KAAKmB,KAAnD;IAEAZ,MAAM,CAACa,QAAPb,GAAkB,EAChB,GAAGA,MAAM,CAACa,QADM;MAEhBzB,SAFgB;MAGhBC,WAHgB;MAIhBI;IAJgB,CAAlBO;IAOA,MAAMW,IAAN,CAAWX,MAAX;EACD;;AAnE+C;AAsElDL,UAAU,CAACmB,SAAXnB,GAAuB,YAAvBA;AACAA,UAAU,CAACR,YAAXQ,GAA0BR,YAA1BQ","names":["PathLayer","defaultProps","fadeTrail","trailLength","type","value","min","currentTime","getTimestamps","TripsLayer","getShaders","shaders","inject","initializeState","params","attributeManager","getAttributeManager","addInstanced","timestamps","size","accessor","shaderAttributes","instanceTimestamps","vertexOffset","instanceNextTimestamps","draw","props","uniforms","layerName"],"sources":["../../../src/trips-layer/trips-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {PathLayer} from '@deck.gl/layers';\n\nconst defaultProps = {\n  fadeTrail: true,\n  trailLength: {type: 'number', value: 120, min: 0},\n  currentTime: {type: 'number', value: 0, min: 0},\n  getTimestamps: {type: 'accessor', value: null}\n};\n\nexport default class TripsLayer extends PathLayer {\n  getShaders() {\n    const shaders = super.getShaders();\n    shaders.inject = {\n      'vs:#decl': `\\\nuniform float trailLength;\nattribute float instanceTimestamps;\nattribute float instanceNextTimestamps;\nvarying float vTime;\n`,\n      // Timestamp of the vertex\n      'vs:#main-end': `\\\nvTime = instanceTimestamps + (instanceNextTimestamps - instanceTimestamps) * vPathPosition.y / vPathLength;\n`,\n      'fs:#decl': `\\\nuniform bool fadeTrail;\nuniform float trailLength;\nuniform float currentTime;\nvarying float vTime;\n`,\n      // Drop the segments outside of the time window\n      'fs:#main-start': `\\\nif(vTime > currentTime || (fadeTrail && (vTime < currentTime - trailLength))) {\n  discard;\n}\n`,\n      // Fade the color (currentTime - 100%, end of trail - 0%)\n      'fs:DECKGL_FILTER_COLOR': `\\\nif(fadeTrail) {\n  color.a *= 1.0 - (currentTime - vTime) / trailLength;\n}\n`\n    };\n    return shaders;\n  }\n\n  initializeState(params) {\n    super.initializeState(params);\n\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      timestamps: {\n        size: 1,\n        accessor: 'getTimestamps',\n        shaderAttributes: {\n          instanceTimestamps: {\n            vertexOffset: 0\n          },\n          instanceNextTimestamps: {\n            vertexOffset: 1\n          }\n        }\n      }\n    });\n  }\n\n  draw(params) {\n    const {fadeTrail, trailLength, currentTime} = this.props;\n\n    params.uniforms = {\n      ...params.uniforms,\n      fadeTrail,\n      trailLength,\n      currentTime\n    };\n\n    super.draw(params);\n  }\n}\n\nTripsLayer.layerName = 'TripsLayer';\nTripsLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}