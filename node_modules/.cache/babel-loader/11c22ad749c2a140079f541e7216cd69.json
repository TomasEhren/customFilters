{"ast":null,"code":"import MathArray from './math-array';\nimport { checkNumber } from '../../lib/validators';\nimport { config } from '../../lib/common';\nimport assert from '../../lib/assert';\nexport default class Matrix extends MathArray {\n  get ELEMENTS() {\n    assert(false);\n    return 0;\n  }\n\n  get RANK() {\n    assert(false);\n    return 0;\n  }\n\n  toString() {\n    let string = '[';\n\n    if (config.printRowMajor) {\n      string += 'row-major:';\n\n      for (let row = 0; row < this.RANK; ++row) {\n        for (let col = 0; col < this.RANK; ++col) {\n          string += \" \".concat(this[col * this.RANK + row]);\n        }\n      }\n    } else {\n      string += 'column-major:';\n\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        string += \" \".concat(this[i]);\n      }\n    }\n\n    string += ']';\n    return string;\n  }\n\n  getElementIndex(row, col) {\n    return col * this.RANK + row;\n  }\n\n  getElement(row, col) {\n    return this[col * this.RANK + row];\n  }\n\n  setElement(row, col, value) {\n    this[col * this.RANK + row] = checkNumber(value);\n    return this;\n  }\n\n  getColumn(columnIndex) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Array(this.RANK).fill(-0);\n    const firstIndex = columnIndex * this.RANK;\n\n    for (let i = 0; i < this.RANK; ++i) {\n      result[i] = this[firstIndex + i];\n    }\n\n    return result;\n  }\n\n  setColumn(columnIndex, columnVector) {\n    const firstIndex = columnIndex * this.RANK;\n\n    for (let i = 0; i < this.RANK; ++i) {\n      this[firstIndex + i] = columnVector[i];\n    }\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAAQC,WAAR,QAA0B,sBAA1B;AACA,SAAQC,MAAR,QAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAEA,eAAe,MAAMC,MAAN,SAAqBJ,SAArB,CAA+B;EAEhC,IAARK,QAAQ,GAAG;IACbF,MAAM,CAAC,KAAD,CAANA;IACA,OAAO,CAAP;EACD;;EAEO,IAAJG,IAAI,GAAG;IACTH,MAAM,CAAC,KAAD,CAANA;IACA,OAAO,CAAP;EACD;;EAaDI,QAAQ,GAAG;IACT,IAAIC,MAAM,GAAG,GAAb;;IACA,IAAIN,MAAM,CAACO,aAAX,EAA0B;MACxBD,MAAM,IAAI,YAAVA;;MACA,KAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKJ,IAA7B,EAAmC,EAAEI,GAArC,EAA0C;QACxC,KAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKL,IAA7B,EAAmC,EAAEK,GAArC,EAA0C;UACxCH,MAAM,eAAQ,KAAKG,GAAG,GAAG,KAAKL,IAAXK,GAAkBD,GAAvB,CAAR,CAANF;QACD;MACF;IANH,OAOO;MACLA,MAAM,IAAI,eAAVA;;MACA,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKP,QAAzB,EAAmC,EAAEO,CAArC,EAAwC;QACtCJ,MAAM,eAAQ,KAAKI,CAAL,CAAR,CAANJ;MACD;IACF;;IACDA,MAAM,IAAI,GAAVA;IACA,OAAOA,MAAP;EACD;;EAEDK,eAAe,CAACH,GAAD,EAAMC,GAAN,EAAW;IACxB,OAAOA,GAAG,GAAG,KAAKL,IAAXK,GAAkBD,GAAzB;EACD;;EAGDI,UAAU,CAACJ,GAAD,EAAMC,GAAN,EAAW;IACnB,OAAO,KAAKA,GAAG,GAAG,KAAKL,IAAXK,GAAkBD,GAAvB,CAAP;EACD;;EAGDK,UAAU,CAACL,GAAD,EAAMC,GAAN,EAAWK,KAAX,EAAkB;IAC1B,KAAKL,GAAG,GAAG,KAAKL,IAAXK,GAAkBD,GAAvB,IAA8BT,WAAW,CAACe,KAAD,CAAzC;IACA,OAAO,IAAP;EACD;;EAEDC,SAAS,CAACC,WAAD,EAAsD;IAAA,IAAxCC,MAAwC,uEAA/B,IAAIC,KAAJ,CAAU,KAAKd,IAAf,EAAqBe,IAArB,CAA0B,CAAC,CAA3B,CAA+B;IAC7D,MAAMC,UAAU,GAAGJ,WAAW,GAAG,KAAKZ,IAAtC;;IACA,KAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKN,IAAzB,EAA+B,EAAEM,CAAjC,EAAoC;MAClCO,MAAM,CAACP,CAAD,CAANO,GAAY,KAAKG,UAAU,GAAGV,CAAlB,CAAZO;IACD;;IACD,OAAOA,MAAP;EACD;;EAEDI,SAAS,CAACL,WAAD,EAAcM,YAAd,EAA4B;IACnC,MAAMF,UAAU,GAAGJ,WAAW,GAAG,KAAKZ,IAAtC;;IACA,KAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKN,IAAzB,EAA+B,EAAEM,CAAjC,EAAoC;MAClC,KAAKU,UAAU,GAAGV,CAAlB,IAAuBY,YAAY,CAACZ,CAAD,CAAnC;IACD;;IACD,OAAO,IAAP;EACD;;AAvE2C","names":["MathArray","checkNumber","config","assert","Matrix","ELEMENTS","RANK","toString","string","printRowMajor","row","col","i","getElementIndex","getElement","setElement","value","getColumn","columnIndex","result","Array","fill","firstIndex","setColumn","columnVector"],"sources":["../../../../src/classes/base/matrix.js"],"sourcesContent":["import MathArray from './math-array';\nimport {checkNumber} from '../../lib/validators';\nimport {config} from '../../lib/common';\nimport assert from '../../lib/assert';\n\nexport default class Matrix extends MathArray {\n  // Defined by derived class\n  get ELEMENTS() {\n    assert(false);\n    return 0;\n  }\n\n  get RANK() {\n    assert(false);\n    return 0;\n  }\n\n  // fromObject(object) {\n  //   const array = object.elements;\n  //   return this.fromRowMajor(array);\n  // }\n\n  // toObject(object) {\n  //   const array = object.elements;\n  //   this.toRowMajor(array);\n  //   return object;\n  // }\n\n  toString() {\n    let string = '[';\n    if (config.printRowMajor) {\n      string += 'row-major:';\n      for (let row = 0; row < this.RANK; ++row) {\n        for (let col = 0; col < this.RANK; ++col) {\n          string += ` ${this[col * this.RANK + row]}`;\n        }\n      }\n    } else {\n      string += 'column-major:';\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        string += ` ${this[i]}`;\n      }\n    }\n    string += ']';\n    return string;\n  }\n\n  getElementIndex(row, col) {\n    return col * this.RANK + row;\n  }\n\n  // By default assumes row major indices\n  getElement(row, col) {\n    return this[col * this.RANK + row];\n  }\n\n  // By default assumes row major indices\n  setElement(row, col, value) {\n    this[col * this.RANK + row] = checkNumber(value);\n    return this;\n  }\n\n  getColumn(columnIndex, result = new Array(this.RANK).fill(-0)) {\n    const firstIndex = columnIndex * this.RANK;\n    for (let i = 0; i < this.RANK; ++i) {\n      result[i] = this[firstIndex + i];\n    }\n    return result;\n  }\n\n  setColumn(columnIndex, columnVector) {\n    const firstIndex = columnIndex * this.RANK;\n    for (let i = 0; i < this.RANK; ++i) {\n      this[firstIndex + i] = columnVector[i];\n    }\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}