{"ast":null,"code":"import { Vector3 } from '@math.gl/core';\nimport { INTERSECTION } from '../../constants';\nconst scratchVector = new Vector3();\nconst scratchNormal = new Vector3();\nexport default class AxisAlignedBoundingBox {\n  constructor() {\n    let minimum = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0, 0, 0];\n    let maximum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n    let center = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    center = center || scratchVector.copy(minimum).add(maximum).scale(0.5);\n    this.center = new Vector3(center);\n    this.halfDiagonal = new Vector3(maximum).subtract(this.center);\n    this.minimum = new Vector3(minimum);\n    this.maximum = new Vector3(maximum);\n  }\n\n  clone() {\n    return new AxisAlignedBoundingBox(this.minimum, this.maximum, this.center);\n  }\n\n  equals(right) {\n    return this === right || Boolean(right) && this.minimum.equals(right.minimum) && this.maximum.equals(right.maximum);\n  }\n\n  transform(transformation) {\n    this.center.transformAsPoint(transformation);\n    this.halfDiagonal.transform(transformation);\n    this.minimum.transform(transformation);\n    this.maximum.transform(transformation);\n    return this;\n  }\n\n  intersectPlane(plane) {\n    const {\n      halfDiagonal\n    } = this;\n    const normal = scratchNormal.from(plane.normal);\n    const e = halfDiagonal.x * Math.abs(normal.x) + halfDiagonal.y * Math.abs(normal.y) + halfDiagonal.z * Math.abs(normal.z);\n    const s = this.center.dot(normal) + plane.distance;\n\n    if (s - e > 0) {\n      return INTERSECTION.INSIDE;\n    }\n\n    if (s + e < 0) {\n      return INTERSECTION.OUTSIDE;\n    }\n\n    return INTERSECTION.INTERSECTING;\n  }\n\n  distanceTo(point) {\n    return Math.sqrt(this.distanceSquaredTo(point));\n  }\n\n  distanceSquaredTo(point) {\n    const offset = scratchVector.from(point).subtract(this.center);\n    const {\n      halfDiagonal\n    } = this;\n    let distanceSquared = 0.0;\n    let d;\n    d = Math.abs(offset.x) - halfDiagonal.x;\n\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.y) - halfDiagonal.y;\n\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.z) - halfDiagonal.z;\n\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    return distanceSquared;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Vector3","INTERSECTION","scratchVector","scratchNormal","AxisAlignedBoundingBox","constructor","minimum","maximum","center","copy","add","scale","halfDiagonal","subtract","clone","equals","right","Boolean","transform","transformation","transformAsPoint","intersectPlane","plane","normal","from","e","x","Math","abs","y","z","s","dot","distance","INSIDE","OUTSIDE","INTERSECTING","distanceTo","point","sqrt","distanceSquaredTo","offset","distanceSquared","d"],"sources":["../../../../src/lib/bounding-volumes/axis-aligned-bounding-box.js"],"sourcesContent":["import {Vector3} from '@math.gl/core';\nimport {INTERSECTION} from '../../constants';\n\nconst scratchVector = new Vector3();\nconst scratchNormal = new Vector3();\n\nexport default class AxisAlignedBoundingBox {\n  constructor(minimum = [0, 0, 0], maximum = [0, 0, 0], center = null) {\n    // If center was not defined, compute it.\n    center = center || scratchVector.copy(minimum).add(maximum).scale(0.5);\n    this.center = new Vector3(center);\n    this.halfDiagonal = new Vector3(maximum).subtract(this.center);\n\n    /**\n     * The minimum point defining the bounding box.\n     * @type {Vector3}\n     * @default {@link 0, 0, 0}\n     */\n    this.minimum = new Vector3(minimum);\n\n    /**\n     * The maximum point defining the bounding box.\n     * @type {Vector3}\n     * @default {@link 0, 0, 0}\n     */\n    this.maximum = new Vector3(maximum);\n  }\n\n  /**\n   * Duplicates a AxisAlignedBoundingBox instance.\n   *\n   * @returns {AxisAlignedBoundingBox} A new AxisAlignedBoundingBox instance.\n   */\n  clone() {\n    return new AxisAlignedBoundingBox(this.minimum, this.maximum, this.center);\n  }\n\n  /**\n   * Compares the provided AxisAlignedBoundingBox componentwise and returns\n   * <code>true</code> if they are equal, <code>false</code> otherwise.\n   *\n   * @param {AxisAlignedBoundingBox} [right] The second AxisAlignedBoundingBox to compare with.\n   * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n   */\n  equals(right) {\n    return (\n      this === right ||\n      (Boolean(right) && this.minimum.equals(right.minimum) && this.maximum.equals(right.maximum))\n    );\n  }\n\n  transform(transformation) {\n    this.center.transformAsPoint(transformation);\n    // TODO - this.halfDiagonal.transformAsVector(transformation);\n    this.halfDiagonal.transform(transformation);\n    this.minimum.transform(transformation);\n    this.maximum.transform(transformation);\n    return this;\n  }\n\n  /**\n   * Determines which side of a plane a box is located.\n   */\n  intersectPlane(plane) {\n    const {halfDiagonal} = this;\n    const normal = scratchNormal.from(plane.normal);\n    const e =\n      halfDiagonal.x * Math.abs(normal.x) +\n      halfDiagonal.y * Math.abs(normal.y) +\n      halfDiagonal.z * Math.abs(normal.z);\n    const s = this.center.dot(normal) + plane.distance; // signed distance from center\n\n    if (s - e > 0) {\n      return INTERSECTION.INSIDE;\n    }\n\n    if (s + e < 0) {\n      // Not in front because normals point inward\n      return INTERSECTION.OUTSIDE;\n    }\n\n    return INTERSECTION.INTERSECTING;\n  }\n\n  // Computes the estimated distance from the closest point on a bounding box to a point.\n  distanceTo(point) {\n    return Math.sqrt(this.distanceSquaredTo(point));\n  }\n\n  // Computes the estimated distance squared from the closest point on a bounding box to a point.\n  // A simplified version of OrientedBoundingBox.distanceSquaredTo\n  distanceSquaredTo(point) {\n    const offset = scratchVector.from(point).subtract(this.center);\n    const {halfDiagonal} = this;\n\n    let distanceSquared = 0.0;\n    let d;\n\n    d = Math.abs(offset.x) - halfDiagonal.x;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.y) - halfDiagonal.y;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.z) - halfDiagonal.z;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    return distanceSquared;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}