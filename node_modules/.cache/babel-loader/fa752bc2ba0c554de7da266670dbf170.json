{"ast":null,"code":"import { CompositeLayer, AttributeManager, _compareProps as compareProps } from '@deck.gl/core';\nimport { cssToDeviceRatio } from '@luma.gl/core';\nimport { filterProps } from './utils/prop-utils';\nexport default class AggregationLayer extends CompositeLayer {\n  initializeState(dimensions) {\n    super.initializeState();\n    this.setState({\n      ignoreProps: filterProps(this.constructor._propTypes, dimensions.data.props),\n      dimensions\n    });\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n    const {\n      changeFlags\n    } = opts;\n\n    if (changeFlags.extensionsChanged) {\n      const shaders = this.getShaders({});\n\n      if (shaders && shaders.defines) {\n        shaders.defines.NON_INSTANCED_MODEL = 1;\n      }\n\n      this.updateShaders(shaders);\n    }\n\n    this._updateAttributes(opts.props);\n  }\n\n  updateAttributes(changedAttributes) {\n    this.setState({\n      changedAttributes\n    });\n  }\n\n  getAttributes() {\n    return this.getAttributeManager().getShaderAttributes();\n  }\n\n  getModuleSettings() {\n    const {\n      viewport,\n      mousePosition,\n      gl\n    } = this.context;\n    const moduleSettings = Object.assign(Object.create(this.props), {\n      viewport,\n      mousePosition,\n      pickingActive: 0,\n      devicePixelRatio: cssToDeviceRatio(gl)\n    });\n    return moduleSettings;\n  }\n\n  updateShaders(shaders) {}\n\n  isAggregationDirty(updateOpts) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      props,\n      oldProps,\n      changeFlags\n    } = updateOpts;\n    const {\n      compareAll = false,\n      dimension\n    } = params;\n    const {\n      ignoreProps\n    } = this.state;\n    const {\n      props: dataProps,\n      accessors = []\n    } = dimension;\n    const {\n      updateTriggersChanged\n    } = changeFlags;\n\n    if (changeFlags.dataChanged) {\n      return true;\n    }\n\n    if (updateTriggersChanged) {\n      if (updateTriggersChanged.all) {\n        return true;\n      }\n\n      for (const accessor of accessors) {\n        if (updateTriggersChanged[accessor]) {\n          return true;\n        }\n      }\n    }\n\n    if (compareAll) {\n      if (changeFlags.extensionsChanged) {\n        return true;\n      }\n\n      return compareProps({\n        oldProps,\n        newProps: props,\n        ignoreProps,\n        propTypes: this.constructor._propTypes\n      });\n    }\n\n    for (const name of dataProps) {\n      if (props[name] !== oldProps[name]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  isAttributeChanged(name) {\n    const {\n      changedAttributes\n    } = this.state;\n\n    if (!name) {\n      return !isObjectEmpty(changedAttributes);\n    }\n\n    return changedAttributes && changedAttributes[name] !== undefined;\n  }\n\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n}\n\nfunction isObjectEmpty(obj) {\n  let isEmpty = true;\n\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n\n  return isEmpty;\n}\n\nAggregationLayer.layerName = 'AggregationLayer';","map":{"version":3,"mappings":"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","names":["CompositeLayer","AttributeManager","_compareProps","compareProps","cssToDeviceRatio","filterProps","AggregationLayer","initializeState","dimensions","setState","ignoreProps","constructor","_propTypes","data","props","updateState","opts","changeFlags","extensionsChanged","shaders","getShaders","defines","NON_INSTANCED_MODEL","updateShaders","_updateAttributes","updateAttributes","changedAttributes","getAttributes","getAttributeManager","getShaderAttributes","getModuleSettings","viewport","mousePosition","gl","context","moduleSettings","Object","assign","create","pickingActive","devicePixelRatio","isAggregationDirty","updateOpts","params","oldProps","compareAll","dimension","state","dataProps","accessors","updateTriggersChanged","dataChanged","all","accessor","newProps","propTypes","name","isAttributeChanged","isObjectEmpty","undefined","_getAttributeManager","id","stats","obj","isEmpty","key","layerName"],"sources":["../../src/aggregation-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, AttributeManager, _compareProps as compareProps} from '@deck.gl/core';\nimport {cssToDeviceRatio} from '@luma.gl/core';\nimport {filterProps} from './utils/prop-utils';\n\nexport default class AggregationLayer extends CompositeLayer {\n  initializeState(dimensions) {\n    super.initializeState();\n\n    this.setState({\n      // Layer props , when changed doesn't require updating aggregation\n      ignoreProps: filterProps(this.constructor._propTypes, dimensions.data.props),\n      dimensions\n    });\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n    const {changeFlags} = opts;\n    if (changeFlags.extensionsChanged) {\n      const shaders = this.getShaders({});\n      if (shaders && shaders.defines) {\n        shaders.defines.NON_INSTANCED_MODEL = 1;\n      }\n      this.updateShaders(shaders);\n    }\n\n    // Explictly call to update attributes as 'CompositeLayer' doesn't call this\n    this._updateAttributes(opts.props);\n  }\n\n  updateAttributes(changedAttributes) {\n    // Super classes, can refer to state.changedAttributes to determine what\n    // attributes changed\n    this.setState({changedAttributes});\n  }\n\n  getAttributes() {\n    return this.getAttributeManager().getShaderAttributes();\n  }\n\n  getModuleSettings() {\n    // For regular layer draw this happens during draw cycle (_drawLayersInViewport) not during update cycle\n    // For aggregation layers this is called during updateState to update aggregation data\n    // NOTE: it is similar to LayerPass._getModuleParameters() but doesn't inlcude `effects` it is not needed for aggregation\n    const {viewport, mousePosition, gl} = this.context;\n    const moduleSettings = Object.assign(Object.create(this.props), {\n      viewport,\n      mousePosition,\n      pickingActive: 0,\n      devicePixelRatio: cssToDeviceRatio(gl)\n    });\n    return moduleSettings;\n  }\n\n  updateShaders(shaders) {\n    // Default implemention is empty, subclasses can update their Model objects if needed\n  }\n\n  /**\n   * Checks if aggregation is dirty\n   * @param {Object} updateOpts - object {props, oldProps, changeFlags}\n   * @param {Object} params - object {dimension, compareAll}\n   * @param {Object} params.dimension - {props, accessors} array of props and/or accessors\n   * @param {Boolean} params.compareAll - when `true` it will include non layer props for comparision\n   * @returns {Boolean} - returns true if dimensions' prop or accessor is changed\n   **/\n  isAggregationDirty(updateOpts, params = {}) {\n    const {props, oldProps, changeFlags} = updateOpts;\n    const {compareAll = false, dimension} = params;\n    const {ignoreProps} = this.state;\n    const {props: dataProps, accessors = []} = dimension;\n    const {updateTriggersChanged} = changeFlags;\n    if (changeFlags.dataChanged) {\n      return true;\n    }\n    if (updateTriggersChanged) {\n      if (updateTriggersChanged.all) {\n        return true;\n      }\n      for (const accessor of accessors) {\n        if (updateTriggersChanged[accessor]) {\n          return true;\n        }\n      }\n    }\n    if (compareAll) {\n      if (changeFlags.extensionsChanged) {\n        return true;\n      }\n      // Compare non layer props too (like extension props)\n      // ignoreprops refers to all Layer props other than aggregation props that need to be comapred\n      return compareProps({\n        oldProps,\n        newProps: props,\n        ignoreProps,\n        propTypes: this.constructor._propTypes\n      });\n    }\n    // Compare props of the dimension\n    for (const name of dataProps) {\n      if (props[name] !== oldProps[name]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks if an attribute is changed\n   * @param {String} name - name of the attribute\n   * @returns {Boolean} - `true` if attribute `name` is changed, `false` otherwise,\n   *                       If `name` is not passed or `undefiend`, `true` if any attribute is changed, `false` otherwise\n   **/\n  isAttributeChanged(name) {\n    const {changedAttributes} = this.state;\n    if (!name) {\n      // if name not specified return true if any attribute is changed\n      return !isObjectEmpty(changedAttributes);\n    }\n    return changedAttributes && changedAttributes[name] !== undefined;\n  }\n\n  // Private\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n}\n\n// Helper methods\n\n// Returns true if given object is empty, false otherwise.\nfunction isObjectEmpty(obj) {\n  let isEmpty = true;\n  /* eslint-disable no-unused-vars  */\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n  /* eslint-enable no-unused-vars  */\n  return isEmpty;\n}\n\nAggregationLayer.layerName = 'AggregationLayer';\n"]},"metadata":{},"sourceType":"module"}