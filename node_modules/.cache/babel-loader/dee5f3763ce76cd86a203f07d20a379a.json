{"ast":null,"code":"import { concatenateArrayBuffers } from '../binary-utils/array-buffer-utils';\nexport async function forEach(iterator, visitor) {\n  while (true) {\n    const {\n      done,\n      value\n    } = await iterator.next();\n\n    if (done) {\n      iterator.return();\n      return;\n    }\n\n    const cancel = visitor(value);\n\n    if (cancel) {\n      return;\n    }\n  }\n}\nexport async function concatenateArrayBuffersAsync(asyncIterator) {\n  const arrayBuffers = [];\n\n  for await (const chunk of asyncIterator) {\n    arrayBuffers.push(chunk);\n  }\n\n  return concatenateArrayBuffers(...arrayBuffers);\n}\nexport async function concatenateStringsAsync(asyncIterator) {\n  const strings = [];\n\n  for await (const chunk of asyncIterator) {\n    strings.push(chunk);\n  }\n\n  return strings.join('');\n}","map":{"version":3,"mappings":"AAAA,SAAQA,uBAAR,QAAsC,oCAAtC;AAgBA,OAAO,eAAeC,OAAf,CAAuBC,QAAvB,EAAiCC,OAAjC,EAA0C;EAE/C,OAAO,IAAP,EAAa;IACX,MAAM;MAACC,IAAD;MAAOC;IAAP,IAAgB,MAAMH,QAAQ,CAACI,IAATJ,EAA5B;;IACA,IAAIE,IAAJ,EAAU;MACRF,QAAQ,CAACK,MAATL;MACA;IACD;;IACD,MAAMM,MAAM,GAAGL,OAAO,CAACE,KAAD,CAAtB;;IACA,IAAIG,MAAJ,EAAY;MACV;IACD;EACF;AACF;AASD,OAAO,eAAeC,4BAAf,CACLC,aADK,EAEiB;EACtB,MAAMC,YAA2B,GAAG,EAApC;;EACA,WAAW,MAAMC,KAAjB,IAA0BF,aAA1B,EAAyC;IACvCC,YAAY,CAACE,IAAbF,CAAkBC,KAAlBD;EACD;;EACD,OAAOX,uBAAuB,CAAC,GAAGW,YAAJ,CAA9B;AACD;AAED,OAAO,eAAeG,uBAAf,CACLJ,aADK,EAEY;EACjB,MAAMK,OAAiB,GAAG,EAA1B;;EACA,WAAW,MAAMH,KAAjB,IAA0BF,aAA1B,EAAyC;IACvCK,OAAO,CAACF,IAARE,CAAaH,KAAbG;EACD;;EACD,OAAOA,OAAO,CAACC,IAARD,CAAa,EAAbA,CAAP;AACD","names":["concatenateArrayBuffers","forEach","iterator","visitor","done","value","next","return","cancel","concatenateArrayBuffersAsync","asyncIterator","arrayBuffers","chunk","push","concatenateStringsAsync","strings","join"],"sources":["../../../../src/lib/iterators/async-iteration.ts"],"sourcesContent":["import {concatenateArrayBuffers} from '../binary-utils/array-buffer-utils';\n\n// GENERAL UTILITIES\n\n/**\n * Iterate over async iterator, without resetting iterator if end is not reached\n * - forEach intentionally does not reset iterator if exiting loop prematurely\n *   so that iteration can continue in a second loop\n * - It is recommended to use a standard for-await as last loop to ensure\n *   iterator gets properly reset\n *\n * TODO - optimize using sync iteration if argument is an Iterable?\n *\n * @param iterator\n * @param visitor\n */\nexport async function forEach(iterator, visitor) {\n  // eslint-disable-next-line\n  while (true) {\n    const {done, value} = await iterator.next();\n    if (done) {\n      iterator.return();\n      return;\n    }\n    const cancel = visitor(value);\n    if (cancel) {\n      return;\n    }\n  }\n}\n\n// Breaking big data into iterable chunks, concatenating iterable chunks into big data objects\n\n/**\n * Concatenates all data chunks yielded by an (async) iterator\n * This function can e.g. be used to enable atomic parsers to work on (async) iterator inputs\n */\n\nexport async function concatenateArrayBuffersAsync(\n  asyncIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>\n): Promise<ArrayBuffer> {\n  const arrayBuffers: ArrayBuffer[] = [];\n  for await (const chunk of asyncIterator) {\n    arrayBuffers.push(chunk);\n  }\n  return concatenateArrayBuffers(...arrayBuffers);\n}\n\nexport async function concatenateStringsAsync(\n  asyncIterator: AsyncIterable<string> | Iterable<string>\n): Promise<string> {\n  const strings: string[] = [];\n  for await (const chunk of asyncIterator) {\n    strings.push(chunk);\n  }\n  return strings.join('');\n}\n"]},"metadata":{},"sourceType":"module"}