{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport DoublyLinkedList from '../utils/doubly-linked-list';\n\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\n\nvar TilesetCache = /*#__PURE__*/function () {\n  function TilesetCache() {\n    _classCallCheck(this, TilesetCache);\n\n    _defineProperty(this, \"_list\", void 0);\n\n    _defineProperty(this, \"_sentinel\", void 0);\n\n    _defineProperty(this, \"_trimTiles\", void 0);\n\n    this._list = new DoublyLinkedList();\n    this._sentinel = this._list.add('sentinel');\n    this._trimTiles = false;\n  }\n\n  _createClass(TilesetCache, [{\n    key: \"reset\",\n    value: function reset() {\n      this._list.splice(this._list.tail, this._sentinel);\n    }\n  }, {\n    key: \"touch\",\n    value: function touch(tile) {\n      var node = tile._cacheNode;\n\n      if (defined(node)) {\n        this._list.splice(this._sentinel, node);\n      }\n    }\n  }, {\n    key: \"add\",\n    value: function add(tileset, tile, addCallback) {\n      if (!defined(tile._cacheNode)) {\n        tile._cacheNode = this._list.add(tile);\n\n        if (addCallback) {\n          addCallback(tileset, tile);\n        }\n      }\n    }\n  }, {\n    key: \"unloadTile\",\n    value: function unloadTile(tileset, tile, unloadCallback) {\n      var node = tile._cacheNode;\n\n      if (!defined(node)) {\n        return;\n      }\n\n      this._list.remove(node);\n\n      tile._cacheNode = undefined;\n\n      if (unloadCallback) {\n        unloadCallback(tileset, tile);\n      }\n    }\n  }, {\n    key: \"unloadTiles\",\n    value: function unloadTiles(tileset, unloadCallback) {\n      var trimTiles = this._trimTiles;\n      this._trimTiles = false;\n      var list = this._list;\n      var maximumMemoryUsageInBytes = tileset.maximumMemoryUsage * 1024 * 1024;\n      var sentinel = this._sentinel;\n      var node = list.head;\n\n      while (node !== sentinel && (tileset.gpuMemoryUsageInBytes > maximumMemoryUsageInBytes || trimTiles)) {\n        var tile = node.item;\n        node = node.next;\n        this.unloadTile(tileset, tile, unloadCallback);\n      }\n    }\n  }, {\n    key: \"trim\",\n    value: function trim() {\n      this._trimTiles = true;\n    }\n  }]);\n\n  return TilesetCache;\n}();\n\nexport { TilesetCache as default };","map":{"version":3,"mappings":";;;AAGA,OAAOA,gBAAP,MAA6B,6BAA7B;;AAEA,SAASC,OAAT,CAAiBC,CAAjB,EAAoB;EAClB,OAAOA,CAAC,KAAKC,SAAND,IAAmBA,CAAC,KAAK,IAAhC;AACD;;IAOoBE,Y;EAKnBC,wBAAc;IAAA;;IAAAC;;IAAAA;;IAAAA;;IAGZ,KAAKC,KAAL,GAAa,IAAIP,gBAAJ,EAAb;IACA,KAAKQ,SAAL,GAAiB,KAAKD,KAAL,CAAWE,GAAX,CAAe,UAAf,CAAjB;IACA,KAAKC,UAAL,GAAkB,KAAlB;EACD;;;;WAEDC,iBAAQ;MAIN,KAAKJ,KAAL,CAAWK,MAAX,CAAkB,KAAKL,KAAL,CAAWM,IAA7B,EAAmC,KAAKL,SAAxC;IACD;;;WAEDM,eAAMC,IAAND,EAAY;MACV,IAAME,IAAI,GAAGD,IAAI,CAACE,UAAlB;;MACA,IAAIhB,OAAO,CAACe,IAAD,CAAX,EAAmB;QACjB,KAAKT,KAAL,CAAWK,MAAX,CAAkB,KAAKJ,SAAvB,EAAkCQ,IAAlC;MACD;IACF;;;WAEDP,aAAIS,OAAJT,EAAaM,IAAbN,EAAmBU,WAAnBV,EAAgC;MAC9B,IAAI,CAACR,OAAO,CAACc,IAAI,CAACE,UAAN,CAAZ,EAA+B;QAC7BF,IAAI,CAACE,UAALF,GAAkB,KAAKR,KAAL,CAAWE,GAAX,CAAeM,IAAf,CAAlBA;;QAEA,IAAII,WAAJ,EAAiB;UACfA,WAAW,CAACD,OAAD,EAAUH,IAAV,CAAXI;QACD;MACF;IACF;;;WAEDC,oBAAWF,OAAXE,EAAoBL,IAApBK,EAA0BC,cAA1BD,EAA2C;MACzC,IAAMJ,IAAI,GAAGD,IAAI,CAACE,UAAlB;;MACA,IAAI,CAAChB,OAAO,CAACe,IAAD,CAAZ,EAAoB;QAClB;MACD;;MAED,KAAKT,KAAL,CAAWe,MAAX,CAAkBN,IAAlB;;MACAD,IAAI,CAACE,UAALF,GAAkBZ,SAAlBY;;MACA,IAAIM,cAAJ,EAAoB;QAClBA,cAAc,CAACH,OAAD,EAAUH,IAAV,CAAdM;MACD;IACF;;;WAEDE,qBAAYL,OAAZK,EAAqBF,cAArBE,EAAqC;MACnC,IAAMC,SAAS,GAAG,KAAKd,UAAvB;MACA,KAAKA,UAAL,GAAkB,KAAlB;MAEA,IAAMe,IAAI,GAAG,KAAKlB,KAAlB;MAEA,IAAMmB,yBAAyB,GAAGR,OAAO,CAACS,kBAART,GAA6B,IAA7BA,GAAoC,IAAtE;MAKA,IAAMU,QAAQ,GAAG,KAAKpB,SAAtB;MACA,IAAIQ,IAAI,GAAGS,IAAI,CAACI,IAAhB;;MAEA,OACEb,IAAI,KAAKY,QAATZ,KACCE,OAAO,CAACY,qBAARZ,GAAgCQ,yBAAhCR,IAA6DM,SAD9DR,CADF,EAGE;QAEA,IAAMD,IAAI,GAAGC,IAAI,CAACe,IAAlB;QAEAf,IAAI,GAAGA,IAAI,CAACgB,IAAZhB;QACA,KAAKI,UAAL,CAAgBF,OAAhB,EAAyBH,IAAzB,EAA+BM,cAA/B;MACD;IACF;;;WAEDY,gBAAO;MACL,KAAKvB,UAAL,GAAkB,IAAlB;IACD;;;;;;SA9EkBN,Y","names":["DoublyLinkedList","defined","x","undefined","TilesetCache","constructor","_defineProperty","_list","_sentinel","add","_trimTiles","reset","splice","tail","touch","tile","node","_cacheNode","tileset","addCallback","unloadTile","unloadCallback","remove","unloadTiles","trimTiles","list","maximumMemoryUsageInBytes","maximumMemoryUsage","sentinel","head","gpuMemoryUsageInBytes","item","next","trim"],"sources":["../../../src/tileset/tileset-cache.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport DoublyLinkedList from '../utils/doubly-linked-list';\n\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\n\n/**\n * Stores tiles with content loaded.\n *\n * @private\n */\nexport default class TilesetCache {\n  private _list: DoublyLinkedList;\n  private _sentinel: any;\n  private _trimTiles: boolean;\n\n  constructor() {\n    // [head, sentinel) -> tiles that weren't selected this frame and may be removed from the cache\n    // (sentinel, tail] -> tiles that were selected this frame\n    this._list = new DoublyLinkedList();\n    this._sentinel = this._list.add('sentinel');\n    this._trimTiles = false;\n  }\n\n  reset() {\n    // Move sentinel node to the tail so, at the start of the frame, all tiles\n    // may be potentially replaced.  Tiles are moved to the right of the sentinel\n    // when they are selected so they will not be replaced.\n    this._list.splice(this._list.tail, this._sentinel);\n  }\n\n  touch(tile) {\n    const node = tile._cacheNode;\n    if (defined(node)) {\n      this._list.splice(this._sentinel, node);\n    }\n  }\n\n  add(tileset, tile, addCallback) {\n    if (!defined(tile._cacheNode)) {\n      tile._cacheNode = this._list.add(tile);\n\n      if (addCallback) {\n        addCallback(tileset, tile);\n      }\n    }\n  }\n\n  unloadTile(tileset, tile, unloadCallback?) {\n    const node = tile._cacheNode;\n    if (!defined(node)) {\n      return;\n    }\n\n    this._list.remove(node);\n    tile._cacheNode = undefined;\n    if (unloadCallback) {\n      unloadCallback(tileset, tile);\n    }\n  }\n\n  unloadTiles(tileset, unloadCallback) {\n    const trimTiles = this._trimTiles;\n    this._trimTiles = false;\n\n    const list = this._list;\n\n    const maximumMemoryUsageInBytes = tileset.maximumMemoryUsage * 1024 * 1024;\n\n    // Traverse the list only to the sentinel since tiles/nodes to the\n    // right of the sentinel were used this frame.\n    // The sub-list to the left of the sentinel is ordered from LRU to MRU.\n    const sentinel = this._sentinel;\n    let node = list.head;\n\n    while (\n      node !== sentinel &&\n      (tileset.gpuMemoryUsageInBytes > maximumMemoryUsageInBytes || trimTiles)\n    ) {\n      // @ts-expect-error\n      const tile = node.item;\n      // @ts-expect-error\n      node = node.next;\n      this.unloadTile(tileset, tile, unloadCallback);\n    }\n  }\n\n  trim() {\n    this._trimTiles = true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}