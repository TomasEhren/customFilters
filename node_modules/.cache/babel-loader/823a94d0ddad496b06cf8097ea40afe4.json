{"ast":null,"code":"import { GL } from '../constants';\nimport { getPrimitiveModeType } from '../primitives/modes';\nimport { assert } from '@loaders.gl/loader-utils';\nexport function* makePrimitiveIterator(indices) {\n  let attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let mode = arguments.length > 2 ? arguments[2] : undefined;\n  let start = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  let end = arguments.length > 4 ? arguments[4] : undefined;\n\n  if (indices) {\n    indices = indices.values || indices.value || indices;\n  }\n\n  if (end === undefined) {\n    end = indices ? indices.length : start;\n  }\n\n  const info = {\n    attributes,\n    type: getPrimitiveModeType(mode),\n    i1: 0,\n    i2: 0,\n    i3: 0\n  };\n  let i = start;\n\n  while (i < end) {\n    switch (mode) {\n      case GL.POINTS:\n        info.i1 = i;\n        i += 1;\n        break;\n\n      case GL.LINES:\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 2;\n        break;\n\n      case GL.LINE_STRIP:\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n\n      case GL.LINE_LOOP:\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n\n      case GL.TRIANGLES:\n        info.i1 = i;\n        info.i2 = i + 1;\n        info.i3 = i + 2;\n        i += 3;\n        break;\n\n      case GL.TRIANGLE_STRIP:\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n\n      case GL.TRIANGLE_FAN:\n        info.i1 = 1;\n        info.i2 = i;\n        info.i3 = i + 1;\n        i += 1;\n        break;\n\n      default:\n        assert(false);\n    }\n\n    if (indices) {\n      if ('i1' in info) {\n        info.i1 = indices[info.i1];\n        info.i2 = indices[info.i2];\n        info.i3 = indices[info.i3];\n      }\n    }\n\n    yield info;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAAQA,EAAR,QAAiB,cAAjB;AACA,SAAQC,oBAAR,QAAmC,qBAAnC;AACA,SAAQC,MAAR,QAAqB,0BAArB;AAsBA,OAAO,UAAUC,qBAAV,CACLC,OADK,EAM6E;EAAA,IAJlFC,UAIkF,uEAJ7D,EAI6D;EAAA,IAHlFC,IAGkF;EAAA,IAFlFC,KAEkF,uEAF1E,CAE0E;EAAA,IADlFC,GACkF;;EAElF,IAAIJ,OAAJ,EAAa;IACXA,OAAO,GAAGA,OAAO,CAACK,MAARL,IAAkBA,OAAO,CAACM,KAA1BN,IAAmCA,OAA7CA;EACD;;EAGD,IAAII,GAAG,KAAKG,SAAZ,EAAuB;IACrBH,GAAG,GAAGJ,OAAO,GAAGA,OAAO,CAACQ,MAAX,GAAoBL,KAAjCC;EACD;;EAGD,MAAMK,IAAiB,GAAG;IACxBR,UADwB;IAExBS,IAAI,EAAEb,oBAAoB,CAACK,IAAD,CAFF;IAGxBS,EAAE,EAAE,CAHoB;IAIxBC,EAAE,EAAE,CAJoB;IAKxBC,EAAE,EAAE;EALoB,CAA1B;EAQA,IAAIC,CAAC,GAAGX,KAAR;;EAEA,OAAOW,CAAC,GAAGV,GAAX,EAAgB;IACd,QAAQF,IAAR;MACE,KAAKN,EAAE,CAACmB,MAAR;QACEN,IAAI,CAACE,EAALF,GAAUK,CAAVL;QACAK,CAAC,IAAI,CAALA;QACA;;MACF,KAAKlB,EAAE,CAACoB,KAAR;QACEP,IAAI,CAACE,EAALF,GAAUK,CAAVL;QACAA,IAAI,CAACG,EAALH,GAAUK,CAAC,GAAG,CAAdL;QACAK,CAAC,IAAI,CAALA;QACA;;MACF,KAAKlB,EAAE,CAACqB,UAAR;QACER,IAAI,CAACE,EAALF,GAAUK,CAAVL;QACAA,IAAI,CAACG,EAALH,GAAUK,CAAC,GAAG,CAAdL;QACAK,CAAC,IAAI,CAALA;QACA;;MACF,KAAKlB,EAAE,CAACsB,SAAR;QACET,IAAI,CAACE,EAALF,GAAUK,CAAVL;QACAA,IAAI,CAACG,EAALH,GAAUK,CAAC,GAAG,CAAdL;QACAK,CAAC,IAAI,CAALA;QACA;;MACF,KAAKlB,EAAE,CAACuB,SAAR;QACEV,IAAI,CAACE,EAALF,GAAUK,CAAVL;QACAA,IAAI,CAACG,EAALH,GAAUK,CAAC,GAAG,CAAdL;QACAA,IAAI,CAACI,EAALJ,GAAUK,CAAC,GAAG,CAAdL;QACAK,CAAC,IAAI,CAALA;QACA;;MACF,KAAKlB,EAAE,CAACwB,cAAR;QACEX,IAAI,CAACE,EAALF,GAAUK,CAAVL;QACAA,IAAI,CAACG,EAALH,GAAUK,CAAC,GAAG,CAAdL;QACAK,CAAC,IAAI,CAALA;QACA;;MACF,KAAKlB,EAAE,CAACyB,YAAR;QACEZ,IAAI,CAACE,EAALF,GAAU,CAAVA;QACAA,IAAI,CAACG,EAALH,GAAUK,CAAVL;QACAA,IAAI,CAACI,EAALJ,GAAUK,CAAC,GAAG,CAAdL;QACAK,CAAC,IAAI,CAALA;QACA;;MAEF;QACEhB,MAAM,CAAC,KAAD,CAANA;IAvCJ;;IA2CA,IAAIE,OAAJ,EAAa;MACX,IAAI,QAAQS,IAAZ,EAAkB;QAChBA,IAAI,CAACE,EAALF,GAAUT,OAAO,CAACS,IAAI,CAACE,EAAN,CAAjBF;QACAA,IAAI,CAACG,EAALH,GAAUT,OAAO,CAACS,IAAI,CAACG,EAAN,CAAjBH;QACAA,IAAI,CAACI,EAALJ,GAAUT,OAAO,CAACS,IAAI,CAACI,EAAN,CAAjBJ;MACD;IACF;;IAED,MAAMA,IAAN;EACD;AACF","names":["GL","getPrimitiveModeType","assert","makePrimitiveIterator","indices","attributes","mode","start","end","values","value","undefined","length","info","type","i1","i2","i3","i","POINTS","LINES","LINE_STRIP","LINE_LOOP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN"],"sources":["../../../../src/geometry/iterators/primitive-iterator.ts"],"sourcesContent":["import {GL} from '../constants';\nimport {getPrimitiveModeType} from '../primitives/modes';\nimport {assert} from '@loaders.gl/loader-utils';\n\n/**\n * Iteration info for making primitive iterator\n */\ntype Information = {\n  attributes: object;\n  type: number | void;\n  i1: number;\n  i2: number;\n  i3: number;\n  primitiveIndex?: object;\n};\n/**\n * Will iterate over each primitive, expanding (dereferencing) indices\n * @param indices\n * @param attributes\n * @param mode\n * @param start\n * @param end\n */\n// eslint-disable-next-line complexity\nexport function* makePrimitiveIterator(\n  indices?: any,\n  attributes: object = {},\n  mode?: number,\n  start = 0,\n  end?: number\n): Iterable<{attributes: object; type: number; i1: number; i2: number; i3: number}> {\n  // support indices being an object with a values array\n  if (indices) {\n    indices = indices.values || indices.value || indices;\n  }\n\n  // Autodeduce length from indices\n  if (end === undefined) {\n    end = indices ? indices.length : start;\n  }\n\n  // iteration info\n  const info: Information = {\n    attributes,\n    type: getPrimitiveModeType(mode),\n    i1: 0,\n    i2: 0,\n    i3: 0\n  };\n\n  let i = start;\n  // @ts-ignore\n  while (i < end) {\n    switch (mode) {\n      case GL.POINTS: // draw single points.\n        info.i1 = i;\n        i += 1;\n        break;\n      case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 2;\n        break;\n      case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLES: // draw triangles. Each set of three vertices creates a separate triangle.\n        info.i1 = i;\n        info.i2 = i + 1;\n        info.i3 = i + 2;\n        i += 3;\n        break;\n      case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n        info.i1 = 1;\n        info.i2 = i;\n        info.i3 = i + 1;\n        i += 1;\n        break;\n\n      default:\n        assert(false);\n    }\n\n    // if indices are present, lookup actual vertices in indices\n    if (indices) {\n      if ('i1' in info) {\n        info.i1 = indices[info.i1];\n        info.i2 = indices[info.i2];\n        info.i3 = indices[info.i3];\n      }\n    }\n    // @ts-ignore\n    yield info;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}