{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { COORDINATE_SYSTEM, LayerExtension, log } from '@deck.gl/core';\nimport mask from './shader-module';\nvar defaultProps = {\n  maskId: ''\n};\n\nvar MaskExtension = /*#__PURE__*/function (_LayerExtension) {\n  _inherits(MaskExtension, _LayerExtension);\n\n  var _super = _createSuper(MaskExtension);\n\n  function MaskExtension() {\n    _classCallCheck(this, MaskExtension);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MaskExtension, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      var maskByInstance = ('instancePositions' in this.getAttributeManager().attributes);\n\n      if ('maskByInstance' in this.props) {\n        maskByInstance = this.props.maskByInstance;\n      }\n\n      this.state.maskByInstance = maskByInstance;\n      return {\n        modules: [mask]\n      };\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref) {\n      var uniforms = _ref.uniforms,\n          context = _ref.context,\n          moduleParameters = _ref.moduleParameters;\n      uniforms.mask_maskByInstance = this.state.maskByInstance;\n      var maskId = this.props.maskId;\n      var maskChannels = moduleParameters.maskChannels;\n      var viewport = context.viewport;\n\n      if (maskChannels && maskChannels[maskId]) {\n        var _maskChannels$maskId = maskChannels[maskId],\n            index = _maskChannels$maskId.index,\n            bounds = _maskChannels$maskId.bounds,\n            fromCoordinateOrigin = _maskChannels$maskId.coordinateOrigin;\n        var fromCoordinateSystem = maskChannels[maskId].coordinateSystem;\n        uniforms.mask_enabled = true;\n        uniforms.mask_channel = index;\n\n        if (fromCoordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n          fromCoordinateSystem = viewport.isGeospatial ? COORDINATE_SYSTEM.LNGLAT : COORDINATE_SYSTEM.CARTESIAN;\n        }\n\n        var opts = {\n          modelMatrix: null,\n          fromCoordinateOrigin: fromCoordinateOrigin,\n          fromCoordinateSystem: fromCoordinateSystem\n        };\n        var bl = this.projectPosition([bounds[0], bounds[1], 0], opts);\n        var tr = this.projectPosition([bounds[2], bounds[3], 0], opts);\n        uniforms.mask_bounds = [bl[0], bl[1], tr[0], tr[1]];\n      } else {\n        if (maskId) {\n          log.warn(\"Could not find a mask layer with id: \".concat(maskId))();\n        }\n\n        uniforms.mask_enabled = false;\n      }\n    }\n  }]);\n\n  return MaskExtension;\n}(LayerExtension);\n\nexport { MaskExtension as default };\nMaskExtension.extensionName = 'MaskExtension';\nMaskExtension.defaultProps = defaultProps;","map":{"version":3,"mappings":";;;;AAAA,SAAQA,iBAAR,EAA2BC,cAA3B,EAA2CC,GAA3C,QAAqD,eAArD;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AAEA,IAAMC,YAAY,GAAG;EACnBC,MAAM,EAAE;AADW,CAArB;;IAIqBC,a;;;;;;;;;;;;;WACnBC,sBAAa;MAEX,IAAIC,cAAc,IAAG,uBAAuB,KAAKC,mBAAL,GAA2BC,UAArD,CAAlB;;MAEA,IAAI,oBAAoB,KAAKC,KAA7B,EAAoC;QAClCH,cAAc,GAAG,KAAKG,KAAL,CAAWH,cAA5BA;MACD;;MACD,KAAKI,KAAL,CAAWJ,cAAX,GAA4BA,cAA5B;MAEA,OAAO;QACLK,OAAO,EAAE,CAACV,IAAD;MADJ,CAAP;IAGD;;;WAEDW,oBAA4C;MAAA,IAAtCC,QAAsC,QAAtCA,QAAsC;MAAA,IAA5BC,OAA4B,QAA5BA,OAA4B;MAAA,IAAnBC,gBAAmB,QAAnBA,gBAAmB;MAC1CF,QAAQ,CAACG,mBAATH,GAA+B,KAAKH,KAAL,CAAWJ,cAA1CO;MACA,IAAOV,MAAP,GAAiB,KAAKM,KAAtB,CAAON,MAAP;MACA,IAAOc,YAAP,GAAuBF,gBAAvB,CAAOE,YAAP;MACA,IAAOC,QAAP,GAAmBJ,OAAnB,CAAOI,QAAP;;MACA,IAAID,YAAY,IAAIA,YAAY,CAACd,MAAD,CAAhC,EAA0C;QACxC,2BAAgEc,YAAY,CAACd,MAAD,CAA5E;QAAA,IAAOgB,KAAP,wBAAOA,KAAP;QAAA,IAAcC,MAAd,wBAAcA,MAAd;QAAA,IAAwCC,oBAAxC,wBAAsBC,gBAAtB;QACA,IAAuBC,oBAAvB,GAA+CN,YAAY,CAACd,MAAD,CAA3D,CAAKqB,gBAAL;QACAX,QAAQ,CAACY,YAATZ,GAAwB,IAAxBA;QACAA,QAAQ,CAACa,YAATb,GAAwBM,KAAxBN;;QAEA,IAAIU,oBAAoB,KAAKzB,iBAAiB,CAAC6B,OAA/C,EAAwD;UACtDJ,oBAAoB,GAAGL,QAAQ,CAACU,YAATV,GACnBpB,iBAAiB,CAAC+B,MADCX,GAEnBpB,iBAAiB,CAACgC,SAFtBP;QAGD;;QACD,IAAMQ,IAAI,GAAG;UAACC,WAAW,EAAE,IAAd;UAAoBX,oBAApB,EAAoBA,oBAApB;UAA0CE;QAA1C,CAAb;QACA,IAAMU,EAAE,GAAG,KAAKC,eAAL,CAAqB,CAACd,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,EAAuB,CAAvB,CAArB,EAAgDW,IAAhD,CAAX;QACA,IAAMI,EAAE,GAAG,KAAKD,eAAL,CAAqB,CAACd,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,EAAuB,CAAvB,CAArB,EAAgDW,IAAhD,CAAX;QACAlB,QAAQ,CAACuB,WAATvB,GAAuB,CAACoB,EAAE,CAAC,CAAD,CAAH,EAAQA,EAAE,CAAC,CAAD,CAAV,EAAeE,EAAE,CAAC,CAAD,CAAjB,EAAsBA,EAAE,CAAC,CAAD,CAAxB,CAAvBtB;MAdF,OAeO;QACL,IAAIV,MAAJ,EAAY;UACVH,GAAG,CAACqC,IAAJrC,gDAAiDG,MAAjD;QACD;;QACDU,QAAQ,CAACY,YAATZ,GAAwB,KAAxBA;MACD;IACF;;;;EAzCwCd,c;;SAAtBK,a;AA4CrBA,aAAa,CAACkC,aAAdlC,GAA8B,eAA9BA;AACAA,aAAa,CAACF,YAAdE,GAA6BF,YAA7BE","names":["COORDINATE_SYSTEM","LayerExtension","log","mask","defaultProps","maskId","MaskExtension","getShaders","maskByInstance","getAttributeManager","attributes","props","state","modules","draw","uniforms","context","moduleParameters","mask_maskByInstance","maskChannels","viewport","index","bounds","fromCoordinateOrigin","coordinateOrigin","fromCoordinateSystem","coordinateSystem","mask_enabled","mask_channel","DEFAULT","isGeospatial","LNGLAT","CARTESIAN","opts","modelMatrix","bl","projectPosition","tr","mask_bounds","warn","extensionName"],"sources":["../../../src/mask/mask.js"],"sourcesContent":["import {COORDINATE_SYSTEM, LayerExtension, log} from '@deck.gl/core';\nimport mask from './shader-module';\n\nconst defaultProps = {\n  maskId: ''\n};\n\nexport default class MaskExtension extends LayerExtension {\n  getShaders() {\n    // Infer by geometry if 'maskByInstance' prop isn't explictly set\n    let maskByInstance = 'instancePositions' in this.getAttributeManager().attributes;\n    // Users can override by setting the `maskByInstance` prop\n    if ('maskByInstance' in this.props) {\n      maskByInstance = this.props.maskByInstance;\n    }\n    this.state.maskByInstance = maskByInstance;\n\n    return {\n      modules: [mask]\n    };\n  }\n\n  draw({uniforms, context, moduleParameters}) {\n    uniforms.mask_maskByInstance = this.state.maskByInstance;\n    const {maskId} = this.props;\n    const {maskChannels} = moduleParameters;\n    const {viewport} = context;\n    if (maskChannels && maskChannels[maskId]) {\n      const {index, bounds, coordinateOrigin: fromCoordinateOrigin} = maskChannels[maskId];\n      let {coordinateSystem: fromCoordinateSystem} = maskChannels[maskId];\n      uniforms.mask_enabled = true;\n      uniforms.mask_channel = index;\n\n      if (fromCoordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n        fromCoordinateSystem = viewport.isGeospatial\n          ? COORDINATE_SYSTEM.LNGLAT\n          : COORDINATE_SYSTEM.CARTESIAN;\n      }\n      const opts = {modelMatrix: null, fromCoordinateOrigin, fromCoordinateSystem};\n      const bl = this.projectPosition([bounds[0], bounds[1], 0], opts);\n      const tr = this.projectPosition([bounds[2], bounds[3], 0], opts);\n      uniforms.mask_bounds = [bl[0], bl[1], tr[0], tr[1]];\n    } else {\n      if (maskId) {\n        log.warn(`Could not find a mask layer with id: ${maskId}`)();\n      }\n      uniforms.mask_enabled = false;\n    }\n  }\n}\n\nMaskExtension.extensionName = 'MaskExtension';\nMaskExtension.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}