{"ast":null,"code":"import { log } from '@deck.gl/core';\nimport { ColumnLayer } from '@deck.gl/layers';\nimport { defaultColorRange } from '../utils/color-utils';\nimport { pointToHexbin } from './hexagon-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer from '../aggregation-layer';\n\nfunction nop() {}\n\nconst defaultProps = {\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {\n    type: 'accessor',\n    value: null\n  },\n  getColorWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  colorAggregation: 'SUM',\n  lowerPercentile: {\n    type: 'number',\n    value: 0,\n    min: 0,\n    max: 100\n  },\n  upperPercentile: {\n    type: 'number',\n    value: 100,\n    min: 0,\n    max: 100\n  },\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {\n    type: 'accessor',\n    value: null\n  },\n  getElevationWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {\n    type: 'number',\n    value: 0,\n    min: 0,\n    max: 100\n  },\n  elevationUpperPercentile: {\n    type: 'number',\n    value: 100,\n    min: 0,\n    max: 100\n  },\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n  radius: {\n    type: 'number',\n    value: 1000,\n    min: 1\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  extruded: false,\n  hexagonAggregator: pointToHexbin,\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  material: true,\n  _filterData: {\n    type: 'function',\n    value: null,\n    optional: true\n  }\n};\nexport default class HexagonLayer extends AggregationLayer {\n  initializeState() {\n    const cpuAggregator = new CPUAggregator({\n      getAggregator: props => props.hexagonAggregator,\n      getCellSize: props => props.radius\n    });\n    this.state = {\n      cpuAggregator,\n      aggregatorState: cpuAggregator.state,\n      vertices: null\n    };\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {\n        size: 3,\n        type: 5130,\n        accessor: 'getPosition'\n      }\n    });\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n\n    if (opts.changeFlags.propsOrDataChanged) {\n      const aggregatorState = this.state.cpuAggregator.updateState(opts, {\n        viewport: this.context.viewport,\n        attributes: this.getAttributes()\n      });\n\n      if (this.state.aggregatorState.layerData !== aggregatorState.layerData) {\n        const {\n          hexagonVertices\n        } = aggregatorState.layerData || {};\n        this.setState({\n          vertices: hexagonVertices && this.convertLatLngToMeterOffset(hexagonVertices)\n        });\n      }\n\n      this.setState({\n        aggregatorState\n      });\n    }\n  }\n\n  convertLatLngToMeterOffset(hexagonVertices) {\n    const {\n      viewport\n    } = this.context;\n\n    if (Array.isArray(hexagonVertices) && hexagonVertices.length === 6) {\n      const vertex0 = hexagonVertices[0];\n      const vertex3 = hexagonVertices[3];\n      const centroid = [(vertex0[0] + vertex3[0]) / 2, (vertex0[1] + vertex3[1]) / 2];\n      const centroidFlat = viewport.projectFlat(centroid);\n      const {\n        metersPerUnit\n      } = viewport.getDistanceScales(centroid);\n      const vertices = hexagonVertices.map(vt => {\n        const vtFlat = viewport.projectFlat(vt);\n        return [(vtFlat[0] - centroidFlat[0]) * metersPerUnit[0], (vtFlat[1] - centroidFlat[1]) * metersPerUnit[1]];\n      });\n      return vertices;\n    }\n\n    log.error('HexagonLayer: hexagonVertices needs to be an array of 6 points')();\n    return null;\n  }\n\n  getPickingInfo(_ref) {\n    let {\n      info\n    } = _ref;\n    return this.state.cpuAggregator.getPickingInfo({\n      info\n    });\n  }\n\n  _onGetSublayerColor(cell) {\n    return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n  }\n\n  _onGetSublayerElevation(cell) {\n    return this.state.cpuAggregator.getAccessor('elevation')(cell);\n  }\n\n  _getSublayerUpdateTriggers() {\n    return this.state.cpuAggregator.getUpdateTriggers(this.props);\n  }\n\n  renderLayers() {\n    const {\n      elevationScale,\n      extruded,\n      coverage,\n      material,\n      transitions\n    } = this.props;\n    const {\n      aggregatorState,\n      vertices\n    } = this.state;\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n\n    const updateTriggers = this._getSublayerUpdateTriggers();\n\n    const geometry = vertices ? {\n      vertices,\n      radius: 1\n    } : {\n      radius: aggregatorState.layerData.radiusCommon || 1,\n      radiusUnits: 'common',\n      angle: 90\n    };\n    return new SubLayerClass({ ...geometry,\n      diskResolution: 6,\n      elevationScale,\n      extruded,\n      coverage,\n      material,\n      getFillColor: this._onGetSublayerColor.bind(this),\n      getElevation: this._onGetSublayerElevation.bind(this),\n      transitions: transitions && {\n        getFillColor: transitions.getColorValue || transitions.getColorWeight,\n        getElevation: transitions.getElevationValue || transitions.getElevationWeight\n      }\n    }, this.getSubLayerProps({\n      id: 'hexagon-cell',\n      updateTriggers\n    }), {\n      data: aggregatorState.layerData.data\n    });\n  }\n\n}\nHexagonLayer.layerName = 'HexagonLayer';\nHexagonLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["log","ColumnLayer","defaultColorRange","pointToHexbin","CPUAggregator","AggregationLayer","nop","defaultProps","colorDomain","colorRange","getColorValue","type","value","getColorWeight","colorAggregation","lowerPercentile","min","max","upperPercentile","colorScaleType","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","getElevationWeight","elevationAggregation","elevationLowerPercentile","elevationUpperPercentile","elevationScale","elevationScaleType","onSetElevationDomain","radius","coverage","extruded","hexagonAggregator","getPosition","x","position","material","_filterData","optional","HexagonLayer","initializeState","cpuAggregator","getAggregator","props","getCellSize","state","aggregatorState","vertices","attributeManager","getAttributeManager","add","positions","size","accessor","updateState","opts","changeFlags","propsOrDataChanged","viewport","context","attributes","getAttributes","layerData","hexagonVertices","setState","convertLatLngToMeterOffset","Array","isArray","length","vertex0","vertex3","centroid","centroidFlat","projectFlat","metersPerUnit","getDistanceScales","map","vt","vtFlat","error","getPickingInfo","info","_onGetSublayerColor","cell","getAccessor","_onGetSublayerElevation","_getSublayerUpdateTriggers","getUpdateTriggers","renderLayers","transitions","SubLayerClass","getSubLayerClass","updateTriggers","geometry","radiusCommon","radiusUnits","angle","diskResolution","getFillColor","bind","getElevation","getSubLayerProps","id","data","layerName"],"sources":["../../../src/hexagon-layer/hexagon-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {log} from '@deck.gl/core';\nimport {ColumnLayer} from '@deck.gl/layers';\n\nimport {defaultColorRange} from '../utils/color-utils';\n\nimport {pointToHexbin} from './hexagon-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer from '../aggregation-layer';\n\nimport GL from '@luma.gl/constants';\n\nfunction nop() {}\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {type: 'accessor', value: null}, // default value is calcuated from `getColorWeight` and `colorAggregation`\n  getColorWeight: {type: 'accessor', value: 1},\n  colorAggregation: 'SUM',\n  lowerPercentile: {type: 'number', value: 0, min: 0, max: 100},\n  upperPercentile: {type: 'number', value: 100, min: 0, max: 100},\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {type: 'accessor', value: null}, // default value is calcuated from `getElevationWeight` and `elevationAggregation`\n  getElevationWeight: {type: 'accessor', value: 1},\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {type: 'number', value: 0, min: 0, max: 100},\n  elevationUpperPercentile: {type: 'number', value: 100, min: 0, max: 100},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n\n  radius: {type: 'number', value: 1000, min: 1},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  extruded: false,\n  hexagonAggregator: pointToHexbin,\n  getPosition: {type: 'accessor', value: x => x.position},\n  // Optional material for 'lighting' shader module\n  material: true,\n\n  // data filter\n  _filterData: {type: 'function', value: null, optional: true}\n};\n\nexport default class HexagonLayer extends AggregationLayer {\n  initializeState() {\n    const cpuAggregator = new CPUAggregator({\n      getAggregator: props => props.hexagonAggregator,\n      getCellSize: props => props.radius\n    });\n\n    this.state = {\n      cpuAggregator,\n      aggregatorState: cpuAggregator.state,\n      vertices: null\n    };\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, type: GL.DOUBLE, accessor: 'getPosition'}\n    });\n    // color and elevation attributes can't be added as attributes\n    // they are calculated using 'getValue' accessor that takes an array of pints.\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n\n    if (opts.changeFlags.propsOrDataChanged) {\n      const aggregatorState = this.state.cpuAggregator.updateState(opts, {\n        viewport: this.context.viewport,\n        attributes: this.getAttributes()\n      });\n      if (this.state.aggregatorState.layerData !== aggregatorState.layerData) {\n        // if user provided custom aggregator and returns hexagonVertices,\n        // Need to recalculate radius and angle based on vertices\n        const {hexagonVertices} = aggregatorState.layerData || {};\n        this.setState({\n          vertices: hexagonVertices && this.convertLatLngToMeterOffset(hexagonVertices)\n        });\n      }\n\n      this.setState({\n        // make a copy of the internal state of cpuAggregator for testing\n        aggregatorState\n      });\n    }\n  }\n\n  convertLatLngToMeterOffset(hexagonVertices) {\n    const {viewport} = this.context;\n    if (Array.isArray(hexagonVertices) && hexagonVertices.length === 6) {\n      // get centroid of hexagons\n      const vertex0 = hexagonVertices[0];\n      const vertex3 = hexagonVertices[3];\n\n      const centroid = [(vertex0[0] + vertex3[0]) / 2, (vertex0[1] + vertex3[1]) / 2];\n      const centroidFlat = viewport.projectFlat(centroid);\n\n      const {metersPerUnit} = viewport.getDistanceScales(centroid);\n\n      // offset all points by centroid to meter offset\n      const vertices = hexagonVertices.map(vt => {\n        const vtFlat = viewport.projectFlat(vt);\n\n        return [\n          (vtFlat[0] - centroidFlat[0]) * metersPerUnit[0],\n          (vtFlat[1] - centroidFlat[1]) * metersPerUnit[1]\n        ];\n      });\n\n      return vertices;\n    }\n\n    log.error('HexagonLayer: hexagonVertices needs to be an array of 6 points')();\n    return null;\n  }\n\n  getPickingInfo({info}) {\n    return this.state.cpuAggregator.getPickingInfo({info});\n  }\n\n  // create a method for testing\n  _onGetSublayerColor(cell) {\n    return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n  }\n\n  // create a method for testing\n  _onGetSublayerElevation(cell) {\n    return this.state.cpuAggregator.getAccessor('elevation')(cell);\n  }\n\n  _getSublayerUpdateTriggers() {\n    return this.state.cpuAggregator.getUpdateTriggers(this.props);\n  }\n\n  renderLayers() {\n    const {elevationScale, extruded, coverage, material, transitions} = this.props;\n    const {aggregatorState, vertices} = this.state;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n    const updateTriggers = this._getSublayerUpdateTriggers();\n\n    const geometry = vertices\n      ? {vertices, radius: 1}\n      : {\n          // default geometry\n          radius: aggregatorState.layerData.radiusCommon || 1,\n          radiusUnits: 'common',\n          angle: 90\n        };\n    return new SubLayerClass(\n      {\n        ...geometry,\n        diskResolution: 6,\n        elevationScale,\n        extruded,\n        coverage,\n        material,\n\n        getFillColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getFillColor: transitions.getColorValue || transitions.getColorWeight,\n          getElevation: transitions.getElevationValue || transitions.getElevationWeight\n        }\n      },\n      this.getSubLayerProps({\n        id: 'hexagon-cell',\n        updateTriggers\n      }),\n      {\n        data: aggregatorState.layerData.data\n      }\n    );\n  }\n}\n\nHexagonLayer.layerName = 'HexagonLayer';\nHexagonLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}