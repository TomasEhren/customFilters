{"ast":null,"code":"import { lerp } from '@math.gl/core';\nconst availableTransformations = {\n  Point,\n  MultiPoint,\n  LineString,\n  MultiLineString,\n  Polygon,\n  MultiPolygon\n};\n\nfunction Point(_ref, _ref2, viewport) {\n  let [pointX, pointY] = _ref;\n  let [nw, se] = _ref2;\n  const x = lerp(nw[0], se[0], pointX);\n  const y = lerp(nw[1], se[1], pointY);\n  return viewport.unprojectFlat([x, y]);\n}\n\nfunction getPoints(geometry, bbox, viewport) {\n  return geometry.map(g => Point(g, bbox, viewport));\n}\n\nfunction MultiPoint(multiPoint, bbox, viewport) {\n  return getPoints(multiPoint, bbox, viewport);\n}\n\nfunction LineString(line, bbox, viewport) {\n  return getPoints(line, bbox, viewport);\n}\n\nfunction MultiLineString(multiLineString, bbox, viewport) {\n  return multiLineString.map(lineString => LineString(lineString, bbox, viewport));\n}\n\nfunction Polygon(polygon, bbox, viewport) {\n  return polygon.map(polygonRing => getPoints(polygonRing, bbox, viewport));\n}\n\nfunction MultiPolygon(multiPolygon, bbox, viewport) {\n  return multiPolygon.map(polygon => Polygon(polygon, bbox, viewport));\n}\n\nexport function transform(geometry, bbox, viewport) {\n  const nw = viewport.projectFlat([bbox.west, bbox.north]);\n  const se = viewport.projectFlat([bbox.east, bbox.south]);\n  const projectedBbox = [nw, se];\n  return { ...geometry,\n    coordinates: availableTransformations[geometry.type](geometry.coordinates, projectedBbox, viewport)\n  };\n}","map":{"version":3,"mappings":"AAAA,SAAQA,IAAR,QAAmB,eAAnB;AAEA,MAAMC,wBAAwB,GAAG;EAC/BC,KAD+B;EAE/BC,UAF+B;EAG/BC,UAH+B;EAI/BC,eAJ+B;EAK/BC,OAL+B;EAM/BC;AAN+B,CAAjC;;AASA,SAASL,KAAT,cAA2CM,QAA3C,EAAqD;EAAA,IAAtC,CAACC,MAAD,EAASC,MAAT,CAAsC;EAAA,IAApB,CAACC,EAAD,EAAKC,EAAL,CAAoB;EACnD,MAAMC,CAAC,GAAGb,IAAI,CAACW,EAAE,CAAC,CAAD,CAAH,EAAQC,EAAE,CAAC,CAAD,CAAV,EAAeH,MAAf,CAAd;EACA,MAAMK,CAAC,GAAGd,IAAI,CAACW,EAAE,CAAC,CAAD,CAAH,EAAQC,EAAE,CAAC,CAAD,CAAV,EAAeF,MAAf,CAAd;EAEA,OAAOF,QAAQ,CAACO,aAATP,CAAuB,CAACK,CAAD,EAAIC,CAAJ,CAAvBN,CAAP;AACD;;AAED,SAASQ,SAAT,CAAmBC,QAAnB,EAA6BC,IAA7B,EAAmCV,QAAnC,EAA6C;EAC3C,OAAOS,QAAQ,CAACE,GAATF,CAAaG,CAAC,IAAIlB,KAAK,CAACkB,CAAD,EAAIF,IAAJ,EAAUV,QAAV,CAAvBS,CAAP;AACD;;AAED,SAASd,UAAT,CAAoBkB,UAApB,EAAgCH,IAAhC,EAAsCV,QAAtC,EAAgD;EAC9C,OAAOQ,SAAS,CAACK,UAAD,EAAaH,IAAb,EAAmBV,QAAnB,CAAhB;AACD;;AAED,SAASJ,UAAT,CAAoBkB,IAApB,EAA0BJ,IAA1B,EAAgCV,QAAhC,EAA0C;EACxC,OAAOQ,SAAS,CAACM,IAAD,EAAOJ,IAAP,EAAaV,QAAb,CAAhB;AACD;;AAED,SAASH,eAAT,CAAyBkB,eAAzB,EAA0CL,IAA1C,EAAgDV,QAAhD,EAA0D;EACxD,OAAOe,eAAe,CAACJ,GAAhBI,CAAoBC,UAAU,IAAIpB,UAAU,CAACoB,UAAD,EAAaN,IAAb,EAAmBV,QAAnB,CAA5Ce,CAAP;AACD;;AAED,SAASjB,OAAT,CAAiBmB,OAAjB,EAA0BP,IAA1B,EAAgCV,QAAhC,EAA0C;EACxC,OAAOiB,OAAO,CAACN,GAARM,CAAYC,WAAW,IAAIV,SAAS,CAACU,WAAD,EAAcR,IAAd,EAAoBV,QAApB,CAApCiB,CAAP;AACD;;AAED,SAASlB,YAAT,CAAsBoB,YAAtB,EAAoCT,IAApC,EAA0CV,QAA1C,EAAoD;EAClD,OAAOmB,YAAY,CAACR,GAAbQ,CAAiBF,OAAO,IAAInB,OAAO,CAACmB,OAAD,EAAUP,IAAV,EAAgBV,QAAhB,CAAnCmB,CAAP;AACD;;AAED,OAAO,SAASC,SAAT,CAAmBX,QAAnB,EAA6BC,IAA7B,EAAmCV,QAAnC,EAA6C;EAClD,MAAMG,EAAE,GAAGH,QAAQ,CAACqB,WAATrB,CAAqB,CAACU,IAAI,CAACY,IAAN,EAAYZ,IAAI,CAACa,KAAjB,CAArBvB,CAAX;EACA,MAAMI,EAAE,GAAGJ,QAAQ,CAACqB,WAATrB,CAAqB,CAACU,IAAI,CAACc,IAAN,EAAYd,IAAI,CAACe,KAAjB,CAArBzB,CAAX;EACA,MAAM0B,aAAa,GAAG,CAACvB,EAAD,EAAKC,EAAL,CAAtB;EAEA,OAAO,EACL,GAAGK,QADE;IAELkB,WAAW,EAAElC,wBAAwB,CAACgB,QAAQ,CAACmB,IAAV,CAAxBnC,CACXgB,QAAQ,CAACkB,WADElC,EAEXiC,aAFWjC,EAGXO,QAHWP;EAFR,CAAP;AAQD","names":["lerp","availableTransformations","Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","viewport","pointX","pointY","nw","se","x","y","unprojectFlat","getPoints","geometry","bbox","map","g","multiPoint","line","multiLineString","lineString","polygon","polygonRing","multiPolygon","transform","projectFlat","west","north","east","south","projectedBbox","coordinates","type"],"sources":["../../../src/mvt-layer/coordinate-transform.js"],"sourcesContent":["import {lerp} from '@math.gl/core';\n\nconst availableTransformations = {\n  Point,\n  MultiPoint,\n  LineString,\n  MultiLineString,\n  Polygon,\n  MultiPolygon\n};\n\nfunction Point([pointX, pointY], [nw, se], viewport) {\n  const x = lerp(nw[0], se[0], pointX);\n  const y = lerp(nw[1], se[1], pointY);\n\n  return viewport.unprojectFlat([x, y]);\n}\n\nfunction getPoints(geometry, bbox, viewport) {\n  return geometry.map(g => Point(g, bbox, viewport));\n}\n\nfunction MultiPoint(multiPoint, bbox, viewport) {\n  return getPoints(multiPoint, bbox, viewport);\n}\n\nfunction LineString(line, bbox, viewport) {\n  return getPoints(line, bbox, viewport);\n}\n\nfunction MultiLineString(multiLineString, bbox, viewport) {\n  return multiLineString.map(lineString => LineString(lineString, bbox, viewport));\n}\n\nfunction Polygon(polygon, bbox, viewport) {\n  return polygon.map(polygonRing => getPoints(polygonRing, bbox, viewport));\n}\n\nfunction MultiPolygon(multiPolygon, bbox, viewport) {\n  return multiPolygon.map(polygon => Polygon(polygon, bbox, viewport));\n}\n\nexport function transform(geometry, bbox, viewport) {\n  const nw = viewport.projectFlat([bbox.west, bbox.north]);\n  const se = viewport.projectFlat([bbox.east, bbox.south]);\n  const projectedBbox = [nw, se];\n\n  return {\n    ...geometry,\n    coordinates: availableTransformations[geometry.type](\n      geometry.coordinates,\n      projectedBbox,\n      viewport\n    )\n  };\n}\n"]},"metadata":{},"sourceType":"module"}