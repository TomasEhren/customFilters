{"ast":null,"code":"import _defineProperty from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nvar _DEFAULT_PARAMETERS;\n\nimport { Framebuffer, Texture2D, isWebGL2 } from '@luma.gl/core';\nvar DEFAULT_PARAMETERS = (_DEFAULT_PARAMETERS = {}, _defineProperty(_DEFAULT_PARAMETERS, 10240, 9728), _defineProperty(_DEFAULT_PARAMETERS, 10241, 9728), _DEFAULT_PARAMETERS);\nexport function getFloatTexture(gl) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _opts$width = opts.width,\n      width = _opts$width === void 0 ? 1 : _opts$width,\n      _opts$height = opts.height,\n      height = _opts$height === void 0 ? 1 : _opts$height,\n      _opts$data = opts.data,\n      data = _opts$data === void 0 ? null : _opts$data,\n      _opts$unpackFlipY = opts.unpackFlipY,\n      unpackFlipY = _opts$unpackFlipY === void 0 ? true : _opts$unpackFlipY,\n      _opts$parameters = opts.parameters,\n      parameters = _opts$parameters === void 0 ? DEFAULT_PARAMETERS : _opts$parameters;\n  var texture = new Texture2D(gl, {\n    data: data,\n    format: isWebGL2(gl) ? 34836 : 6408,\n    type: 5126,\n    border: 0,\n    mipmaps: false,\n    parameters: parameters,\n    dataFormat: 6408,\n    width: width,\n    height: height,\n    unpackFlipY: unpackFlipY\n  });\n  return texture;\n}\nexport function getFramebuffer(gl, opts) {\n  var id = opts.id,\n      _opts$width2 = opts.width,\n      width = _opts$width2 === void 0 ? 1 : _opts$width2,\n      _opts$height2 = opts.height,\n      height = _opts$height2 === void 0 ? 1 : _opts$height2,\n      texture = opts.texture;\n  var fb = new Framebuffer(gl, {\n    id: id,\n    width: width,\n    height: height,\n    attachments: _defineProperty({}, 36064, texture)\n  });\n  return fb;\n}\nexport function getFloatArray(array, size) {\n  var fillValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (!array || array.length < size) {\n    return new Float32Array(size).fill(fillValue);\n  }\n\n  return array;\n}","map":{"version":3,"mappings":";;;;AACA,SAAQA,WAAR,EAAqBC,SAArB,EAAgCC,QAAhC,QAA+C,eAA/C;AAEA,IAAMC,kBAAkB,mEACtB,KADsB,EACtB,IADsB,wCAEtB,KAFsB,EAEtB,IAFsB,uBAAxB;AAKA,OAAO,SAASC,eAAT,CAAyBC,EAAzB,EAAwC;EAAA,IAAXC,IAAW,uEAAJ,EAAI;EAC7C,kBAMIA,IANJ,CACEC,KADF;EAAA,IACEA,KADF,4BACU,CADV;EAAA,mBAMID,IANJ,CAEEE,MAFF;EAAA,IAEEA,MAFF,6BAEW,CAFX;EAAA,iBAMIF,IANJ,CAGEG,IAHF;EAAA,IAGEA,IAHF,2BAGS,IAHT;EAAA,wBAMIH,IANJ,CAIEI,WAJF;EAAA,IAIEA,WAJF,kCAIgB,IAJhB;EAAA,uBAMIJ,IANJ,CAKEK,UALF;EAAA,IAKEA,UALF,iCAKeR,kBALf;EAOA,IAAMS,OAAO,GAAG,IAAIX,SAAJ,CAAcI,EAAd,EAAkB;IAChCI,IADgC,EAChCA,IADgC;IAEhCI,MAAM,EAAEX,QAAQ,CAACG,EAAD,CAARH,eAFwB;IAGhCY,IAAI,MAH4B;IAIhCC,MAAM,EAAE,CAJwB;IAKhCC,OAAO,EAAE,KALuB;IAMhCL,UANgC,EAMhCA,UANgC;IAOhCM,UAAU,MAPsB;IAQhCV,KARgC,EAQhCA,KARgC;IAShCC,MATgC,EAShCA,MATgC;IAUhCE;EAVgC,CAAlB,CAAhB;EAYA,OAAOE,OAAP;AACD;AAED,OAAO,SAASM,cAAT,CAAwBb,EAAxB,EAA4BC,IAA5B,EAAkC;EACvC,IAAOa,EAAP,GAA6Cb,IAA7C,CAAOa,EAAP;EAAA,mBAA6Cb,IAA7C,CAAWC,KAAX;EAAA,IAAWA,KAAX,6BAAmB,CAAnB;EAAA,oBAA6CD,IAA7C,CAAsBE,MAAtB;EAAA,IAAsBA,MAAtB,8BAA+B,CAA/B;EAAA,IAAkCI,OAAlC,GAA6CN,IAA7C,CAAkCM,OAAlC;EACA,IAAMQ,EAAE,GAAG,IAAIpB,WAAJ,CAAgBK,EAAhB,EAAoB;IAC7Bc,EAD6B,EAC7BA,EAD6B;IAE7BZ,KAF6B,EAE7BA,KAF6B;IAG7BC,MAH6B,EAG7BA,MAH6B;IAI7Ba,WAAW,sBACT,KADS,EACeT,OADf;EAJkB,CAApB,CAAX;EASA,OAAOQ,EAAP;AACD;AAED,OAAO,SAASE,aAAT,CAAuBC,KAAvB,EAA8BC,IAA9B,EAAmD;EAAA,IAAfC,SAAe,uEAAH,CAAG;;EACxD,IAAI,CAACF,KAAD,IAAUA,KAAK,CAACG,MAANH,GAAeC,IAA7B,EAAmC;IACjC,OAAO,IAAIG,YAAJ,CAAiBH,IAAjB,EAAuBI,IAAvB,CAA4BH,SAA5B,CAAP;EACD;;EACD,OAAOF,KAAP;AACD","names":["Framebuffer","Texture2D","isWebGL2","DEFAULT_PARAMETERS","getFloatTexture","gl","opts","width","height","data","unpackFlipY","parameters","texture","format","type","border","mipmaps","dataFormat","getFramebuffer","id","fb","attachments","getFloatArray","array","size","fillValue","length","Float32Array","fill"],"sources":["../../../src/utils/resource-utils.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {Framebuffer, Texture2D, isWebGL2} from '@luma.gl/core';\n\nconst DEFAULT_PARAMETERS = {\n  [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n  [GL.TEXTURE_MIN_FILTER]: GL.NEAREST\n};\n\nexport function getFloatTexture(gl, opts = {}) {\n  const {\n    width = 1,\n    height = 1,\n    data = null,\n    unpackFlipY = true,\n    parameters = DEFAULT_PARAMETERS\n  } = opts;\n  const texture = new Texture2D(gl, {\n    data,\n    format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n    type: GL.FLOAT,\n    border: 0,\n    mipmaps: false,\n    parameters,\n    dataFormat: GL.RGBA,\n    width,\n    height,\n    unpackFlipY\n  });\n  return texture;\n}\n\nexport function getFramebuffer(gl, opts) {\n  const {id, width = 1, height = 1, texture} = opts;\n  const fb = new Framebuffer(gl, {\n    id,\n    width,\n    height,\n    attachments: {\n      [GL.COLOR_ATTACHMENT0]: texture\n    }\n  });\n\n  return fb;\n}\n\nexport function getFloatArray(array, size, fillValue = 0) {\n  if (!array || array.length < size) {\n    return new Float32Array(size).fill(fillValue);\n  }\n  return array;\n}\n"]},"metadata":{},"sourceType":"module"}