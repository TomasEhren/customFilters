{"ast":null,"code":"import _toConsumableArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { assert } from '@loaders.gl/loader-utils';\nimport { createTypedArrayFromAccessor } from './helpers/tile-3d-accessor-utils';\nimport { initializeHierarchy, traverseHierarchy } from './tile-3d-batch-table-hierarchy';\n\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\n\nvar clone = function clone(x, y) {\n  return x;\n};\n\nvar IGNORED_PROPERTY_FIELDS = {\n  HIERARCHY: true,\n  extensions: true,\n  extras: true\n};\n\nvar Tile3DBatchTableParser = /*#__PURE__*/function () {\n  function Tile3DBatchTableParser(json, binary, featureCount) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    _classCallCheck(this, Tile3DBatchTableParser);\n\n    var _this$json;\n\n    _defineProperty(this, \"json\", void 0);\n\n    _defineProperty(this, \"binary\", void 0);\n\n    _defineProperty(this, \"featureCount\", void 0);\n\n    _defineProperty(this, \"_extensions\", void 0);\n\n    _defineProperty(this, \"_properties\", void 0);\n\n    _defineProperty(this, \"_binaryProperties\", void 0);\n\n    _defineProperty(this, \"_hierarchy\", void 0);\n\n    assert(featureCount >= 0);\n    this.json = json || {};\n    this.binary = binary;\n    this.featureCount = featureCount;\n    this._extensions = ((_this$json = this.json) === null || _this$json === void 0 ? void 0 : _this$json.extensions) || {};\n    this._properties = {};\n\n    for (var propertyName in this.json) {\n      if (!IGNORED_PROPERTY_FIELDS[propertyName]) {\n        this._properties[propertyName] = this.json[propertyName];\n      }\n    }\n\n    this._binaryProperties = this._initializeBinaryProperties();\n\n    if (options['3DTILES_batch_table_hierarchy']) {\n      this._hierarchy = initializeHierarchy(this, this.json, this.binary);\n    }\n  }\n\n  _createClass(Tile3DBatchTableParser, [{\n    key: \"getExtension\",\n    value: function getExtension(extensionName) {\n      return this.json && this.json.extensions && this.json.extensions[extensionName];\n    }\n  }, {\n    key: \"memorySizeInBytes\",\n    value: function memorySizeInBytes() {\n      return 0;\n    }\n  }, {\n    key: \"isClass\",\n    value: function isClass(batchId, className) {\n      this._checkBatchId(batchId);\n\n      assert(typeof className === 'string', className);\n\n      if (this._hierarchy) {\n        var result = traverseHierarchy(this._hierarchy, batchId, function (hierarchy, instanceIndex) {\n          var classId = hierarchy.classIds[instanceIndex];\n          var instanceClass = hierarchy.classes[classId];\n          return instanceClass.name === className;\n        });\n        return defined(result);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isExactClass\",\n    value: function isExactClass(batchId, className) {\n      assert(typeof className === 'string', className);\n      return this.getExactClassName(batchId) === className;\n    }\n  }, {\n    key: \"getExactClassName\",\n    value: function getExactClassName(batchId) {\n      this._checkBatchId(batchId);\n\n      if (this._hierarchy) {\n        var classId = this._hierarchy.classIds[batchId];\n        var instanceClass = this._hierarchy.classes[classId];\n        return instanceClass.name;\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"hasProperty\",\n    value: function hasProperty(batchId, name) {\n      this._checkBatchId(batchId);\n\n      assert(typeof name === 'string', name);\n      return defined(this._properties[name]) || this._hasPropertyInHierarchy(batchId, name);\n    }\n  }, {\n    key: \"getPropertyNames\",\n    value: function getPropertyNames(batchId, results) {\n      var _results;\n\n      this._checkBatchId(batchId);\n\n      results = defined(results) ? results : [];\n      results.length = 0;\n      var propertyNames = Object.keys(this._properties);\n\n      (_results = results).push.apply(_results, _toConsumableArray(propertyNames));\n\n      if (this._hierarchy) {\n        this._getPropertyNamesInHierarchy(batchId, results);\n      }\n\n      return results;\n    }\n  }, {\n    key: \"getProperty\",\n    value: function getProperty(batchId, name) {\n      this._checkBatchId(batchId);\n\n      assert(typeof name === 'string', name);\n\n      if (this._binaryProperties) {\n        var binaryProperty = this._binaryProperties[name];\n\n        if (defined(binaryProperty)) {\n          return this._getBinaryProperty(binaryProperty, batchId);\n        }\n      }\n\n      var propertyValues = this._properties[name];\n\n      if (defined(propertyValues)) {\n        return clone(propertyValues[batchId], true);\n      }\n\n      if (this._hierarchy) {\n        var hierarchyProperty = this._getHierarchyProperty(batchId, name);\n\n        if (defined(hierarchyProperty)) {\n          return hierarchyProperty;\n        }\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"setProperty\",\n    value: function setProperty(batchId, name, value) {\n      var featureCount = this.featureCount;\n\n      this._checkBatchId(batchId);\n\n      assert(typeof name === 'string', name);\n\n      if (this._binaryProperties) {\n        var binaryProperty = this._binaryProperties[name];\n\n        if (binaryProperty) {\n          this._setBinaryProperty(binaryProperty, batchId, value);\n\n          return;\n        }\n      }\n\n      if (this._hierarchy) {\n        if (this._setHierarchyProperty(this, batchId, name, value)) {\n          return;\n        }\n      }\n\n      var propertyValues = this._properties[name];\n\n      if (!defined(propertyValues)) {\n        this._properties[name] = new Array(featureCount);\n        propertyValues = this._properties[name];\n      }\n\n      propertyValues[batchId] = clone(value, true);\n    }\n  }, {\n    key: \"_checkBatchId\",\n    value: function _checkBatchId(batchId) {\n      var valid = batchId >= 0 && batchId < this.featureCount;\n\n      if (!valid) {\n        throw new Error('batchId not in range [0, featureCount - 1].');\n      }\n    }\n  }, {\n    key: \"_getBinaryProperty\",\n    value: function _getBinaryProperty(binaryProperty, index) {\n      return binaryProperty.unpack(binaryProperty.typedArray, index);\n    }\n  }, {\n    key: \"_setBinaryProperty\",\n    value: function _setBinaryProperty(binaryProperty, index, value) {\n      binaryProperty.pack(value, binaryProperty.typedArray, index);\n    }\n  }, {\n    key: \"_initializeBinaryProperties\",\n    value: function _initializeBinaryProperties() {\n      var binaryProperties = null;\n\n      for (var name in this._properties) {\n        var property = this._properties[name];\n\n        var binaryProperty = this._initializeBinaryProperty(name, property);\n\n        if (binaryProperty) {\n          binaryProperties = binaryProperties || {};\n          binaryProperties[name] = binaryProperty;\n        }\n      }\n\n      return binaryProperties;\n    }\n  }, {\n    key: \"_initializeBinaryProperty\",\n    value: function _initializeBinaryProperty(name, property) {\n      if ('byteOffset' in property) {\n        var tile3DAccessor = property;\n        assert(this.binary, \"Property \".concat(name, \" requires a batch table binary.\"));\n        assert(tile3DAccessor.type, \"Property \".concat(name, \" requires a type.\"));\n        var accessor = createTypedArrayFromAccessor(tile3DAccessor, this.binary.buffer, this.binary.byteOffset | 0, this.featureCount);\n        return {\n          typedArray: accessor.values,\n          componentCount: accessor.size,\n          unpack: accessor.unpacker,\n          pack: accessor.packer\n        };\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_hasPropertyInHierarchy\",\n    value: function _hasPropertyInHierarchy(batchId, name) {\n      if (!this._hierarchy) {\n        return false;\n      }\n\n      var result = traverseHierarchy(this._hierarchy, batchId, function (hierarchy, instanceIndex) {\n        var classId = hierarchy.classIds[instanceIndex];\n        var instances = hierarchy.classes[classId].instances;\n        return defined(instances[name]);\n      });\n      return defined(result);\n    }\n  }, {\n    key: \"_getPropertyNamesInHierarchy\",\n    value: function _getPropertyNamesInHierarchy(batchId, results) {\n      traverseHierarchy(this._hierarchy, batchId, function (hierarchy, instanceIndex) {\n        var classId = hierarchy.classIds[instanceIndex];\n        var instances = hierarchy.classes[classId].instances;\n\n        for (var name in instances) {\n          if (instances.hasOwnProperty(name)) {\n            if (results.indexOf(name) === -1) {\n              results.push(name);\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"_getHierarchyProperty\",\n    value: function _getHierarchyProperty(batchId, name) {\n      var _this = this;\n\n      return traverseHierarchy(this._hierarchy, batchId, function (hierarchy, instanceIndex) {\n        var classId = hierarchy.classIds[instanceIndex];\n        var instanceClass = hierarchy.classes[classId];\n        var indexInClass = hierarchy.classIndexes[instanceIndex];\n        var propertyValues = instanceClass.instances[name];\n\n        if (defined(propertyValues)) {\n          if (defined(propertyValues.typedArray)) {\n            return _this._getBinaryProperty(propertyValues, indexInClass);\n          }\n\n          return clone(propertyValues[indexInClass], true);\n        }\n\n        return null;\n      });\n    }\n  }, {\n    key: \"_setHierarchyProperty\",\n    value: function _setHierarchyProperty(batchTable, batchId, name, value) {\n      var _this2 = this;\n\n      var result = traverseHierarchy(this._hierarchy, batchId, function (hierarchy, instanceIndex) {\n        var classId = hierarchy.classIds[instanceIndex];\n        var instanceClass = hierarchy.classes[classId];\n        var indexInClass = hierarchy.classIndexes[instanceIndex];\n        var propertyValues = instanceClass.instances[name];\n\n        if (defined(propertyValues)) {\n          assert(instanceIndex === batchId, \"Inherited property \\\"\".concat(name, \"\\\" is read-only.\"));\n\n          if (defined(propertyValues.typedArray)) {\n            _this2._setBinaryProperty(propertyValues, indexInClass, value);\n          } else {\n            propertyValues[indexInClass] = clone(value, true);\n          }\n\n          return true;\n        }\n\n        return false;\n      });\n      return defined(result);\n    }\n  }]);\n\n  return Tile3DBatchTableParser;\n}();\n\nexport { Tile3DBatchTableParser as default };","map":{"version":3,"mappings":"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","names":["assert","createTypedArrayFromAccessor","initializeHierarchy","traverseHierarchy","defined","x","undefined","clone","y","IGNORED_PROPERTY_FIELDS","HIERARCHY","extensions","extras","Tile3DBatchTableParser","constructor","json","binary","featureCount","options","_defineProperty","_extensions","_properties","propertyName","_binaryProperties","_initializeBinaryProperties","_hierarchy","getExtension","extensionName","memorySizeInBytes","isClass","batchId","className","_checkBatchId","result","hierarchy","instanceIndex","classId","classIds","instanceClass","classes","name","isExactClass","getExactClassName","hasProperty","_hasPropertyInHierarchy","getPropertyNames","results","length","propertyNames","Object","keys","push","_getPropertyNamesInHierarchy","getProperty","binaryProperty","_getBinaryProperty","propertyValues","hierarchyProperty","_getHierarchyProperty","setProperty","value","_setBinaryProperty","_setHierarchyProperty","Array","valid","Error","index","unpack","typedArray","pack","binaryProperties","property","_initializeBinaryProperty","tile3DAccessor","type","accessor","buffer","byteOffset","values","componentCount","size","unpacker","packer","instances","hasOwnProperty","indexOf","indexInClass","classIndexes","batchTable"],"sources":["../../../../src/lib/classes/tile-3d-batch-table.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {assert} from '@loaders.gl/loader-utils';\n\nimport {createTypedArrayFromAccessor} from './helpers/tile-3d-accessor-utils';\nimport {initializeHierarchy, traverseHierarchy} from './tile-3d-batch-table-hierarchy';\n\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\n\nconst clone = (x, y) => x;\n\n// These top level fields in the batch table json are not properties\nconst IGNORED_PROPERTY_FIELDS = {\n  HIERARCHY: true, // Deprecated HIERARCHY property\n  extensions: true,\n  extras: true\n};\n\n// The size of this array equals the maximum instance count among all loaded tiles, which has the potential to be large.\nexport default class Tile3DBatchTableParser {\n  json;\n  binary;\n  featureCount;\n  _extensions;\n  // Copy all top-level property fields from the json object, ignoring special fields\n  _properties;\n  _binaryProperties;\n  // TODO: hierarchy support is only partially implemented and not tested\n  _hierarchy;\n\n  constructor(json, binary, featureCount, options = {}) {\n    assert(featureCount >= 0);\n    this.json = json || {};\n    this.binary = binary;\n    this.featureCount = featureCount;\n\n    this._extensions = this.json?.extensions || {};\n\n    // Copy all top-level property fields from the json object, ignoring special fields\n    this._properties = {};\n    for (const propertyName in this.json) {\n      if (!IGNORED_PROPERTY_FIELDS[propertyName]) {\n        this._properties[propertyName] = this.json[propertyName];\n      }\n    }\n\n    this._binaryProperties = this._initializeBinaryProperties();\n\n    // TODO: hierarchy support is only partially implemented and not tested\n    if (options['3DTILES_batch_table_hierarchy']) {\n      this._hierarchy = initializeHierarchy(this, this.json, this.binary);\n    }\n  }\n\n  getExtension(extensionName) {\n    return this.json && this.json.extensions && this.json.extensions[extensionName];\n  }\n\n  memorySizeInBytes(): number {\n    return 0;\n  }\n\n  isClass(batchId, className: string): boolean {\n    this._checkBatchId(batchId);\n    assert(typeof className === 'string', className);\n\n    // extension: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      // PERFORMANCE_IDEA : cache results in the ancestor classes\n      //   to speed up this check if this area becomes a hotspot\n      // PERFORMANCE_IDEA : treat class names as integers for faster comparisons\n      const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n        const classId = hierarchy.classIds[instanceIndex];\n        const instanceClass = hierarchy.classes[classId];\n        return instanceClass.name === className;\n      });\n      return defined(result);\n    }\n\n    return false;\n  }\n\n  isExactClass(batchId, className) {\n    assert(typeof className === 'string', className);\n\n    return this.getExactClassName(batchId) === className;\n  }\n\n  getExactClassName(batchId) {\n    this._checkBatchId(batchId);\n\n    // extension: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      const classId = this._hierarchy.classIds[batchId];\n      const instanceClass = this._hierarchy.classes[classId];\n      return instanceClass.name;\n    }\n\n    return undefined;\n  }\n\n  hasProperty(batchId, name) {\n    this._checkBatchId(batchId);\n    assert(typeof name === 'string', name);\n\n    return defined(this._properties[name]) || this._hasPropertyInHierarchy(batchId, name);\n  }\n\n  getPropertyNames(batchId, results) {\n    this._checkBatchId(batchId);\n\n    results = defined(results) ? results : [];\n    results.length = 0;\n\n    const propertyNames = Object.keys(this._properties);\n    results.push(...propertyNames);\n\n    if (this._hierarchy) {\n      this._getPropertyNamesInHierarchy(batchId, results);\n    }\n\n    return results;\n  }\n\n  getProperty(batchId, name) {\n    this._checkBatchId(batchId);\n    assert(typeof name === 'string', name);\n\n    if (this._binaryProperties) {\n      const binaryProperty = this._binaryProperties[name];\n      if (defined(binaryProperty)) {\n        return this._getBinaryProperty(binaryProperty, batchId);\n      }\n    }\n\n    const propertyValues = this._properties[name];\n    if (defined(propertyValues)) {\n      return clone(propertyValues[batchId], true);\n    }\n\n    // EXTENSION: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      const hierarchyProperty = this._getHierarchyProperty(batchId, name);\n      if (defined(hierarchyProperty)) {\n        return hierarchyProperty;\n      }\n    }\n\n    return undefined;\n  }\n\n  setProperty(batchId, name, value) {\n    const featureCount = this.featureCount;\n\n    this._checkBatchId(batchId);\n    assert(typeof name === 'string', name);\n\n    if (this._binaryProperties) {\n      const binaryProperty = this._binaryProperties[name];\n      if (binaryProperty) {\n        this._setBinaryProperty(binaryProperty, batchId, value);\n        return;\n      }\n    }\n\n    // EXTENSION: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      if (this._setHierarchyProperty(this, batchId, name, value)) {\n        return;\n      }\n    }\n\n    let propertyValues = this._properties[name];\n    if (!defined(propertyValues)) {\n      // Property does not exist. Create it.\n      this._properties[name] = new Array(featureCount);\n      propertyValues = this._properties[name];\n    }\n\n    propertyValues[batchId] = clone(value, true);\n  }\n\n  // PRIVATE METHODS\n\n  _checkBatchId(batchId) {\n    const valid = batchId >= 0 && batchId < this.featureCount;\n    if (!valid) {\n      throw new Error('batchId not in range [0, featureCount - 1].');\n    }\n  }\n\n  _getBinaryProperty(binaryProperty, index) {\n    return binaryProperty.unpack(binaryProperty.typedArray, index);\n  }\n\n  _setBinaryProperty(binaryProperty, index, value) {\n    binaryProperty.pack(value, binaryProperty.typedArray, index);\n  }\n\n  _initializeBinaryProperties() {\n    let binaryProperties: Record<string, any> | null = null;\n    for (const name in this._properties) {\n      const property = this._properties[name];\n      const binaryProperty = this._initializeBinaryProperty(name, property);\n      // Store any information needed to access the binary data, including the typed array,\n      // componentCount (e.g. a VEC4 would be 4), and the type used to pack and unpack (e.g. Cartesian4).\n      if (binaryProperty) {\n        binaryProperties = binaryProperties || {};\n        binaryProperties[name] = binaryProperty;\n      }\n    }\n    return binaryProperties;\n  }\n\n  _initializeBinaryProperty(name, property) {\n    if ('byteOffset' in property) {\n      // This is a binary property\n      const tile3DAccessor = property;\n\n      assert(this.binary, `Property ${name} requires a batch table binary.`);\n      assert(tile3DAccessor.type, `Property ${name} requires a type.`);\n\n      const accessor = createTypedArrayFromAccessor(\n        tile3DAccessor,\n        this.binary.buffer,\n        this.binary.byteOffset | 0,\n        this.featureCount\n      );\n\n      // Store any information needed to access the binary data, including the typed array,\n      // componentCount (e.g. a VEC4 would be 4), and the type used to pack and unpack (e.g. Cartesian4).\n      return {\n        typedArray: accessor.values,\n        componentCount: accessor.size,\n        unpack: accessor.unpacker,\n        pack: accessor.packer\n      };\n    }\n\n    return null;\n  }\n\n  //  EXTENSION SUPPORT: 3DTILES_batch_table_hierarchy\n\n  _hasPropertyInHierarchy(batchId, name) {\n    if (!this._hierarchy) {\n      return false;\n    }\n\n    const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instances = hierarchy.classes[classId].instances;\n      return defined(instances[name]);\n    });\n\n    return defined(result);\n  }\n\n  _getPropertyNamesInHierarchy(batchId, results) {\n    traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instances = hierarchy.classes[classId].instances;\n      for (const name in instances) {\n        if (instances.hasOwnProperty(name)) {\n          if (results.indexOf(name) === -1) {\n            results.push(name);\n          }\n        }\n      }\n    });\n  }\n\n  _getHierarchyProperty(batchId, name) {\n    return traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instanceClass = hierarchy.classes[classId];\n      const indexInClass = hierarchy.classIndexes[instanceIndex];\n      const propertyValues = instanceClass.instances[name];\n      if (defined(propertyValues)) {\n        if (defined(propertyValues.typedArray)) {\n          return this._getBinaryProperty(propertyValues, indexInClass);\n        }\n        return clone(propertyValues[indexInClass], true);\n      }\n      return null;\n    });\n  }\n\n  _setHierarchyProperty(batchTable, batchId, name, value) {\n    const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instanceClass = hierarchy.classes[classId];\n      const indexInClass = hierarchy.classIndexes[instanceIndex];\n      const propertyValues = instanceClass.instances[name];\n      if (defined(propertyValues)) {\n        assert(instanceIndex === batchId, `Inherited property \"${name}\" is read-only.`);\n        if (defined(propertyValues.typedArray)) {\n          this._setBinaryProperty(propertyValues, indexInClass, value);\n        } else {\n          propertyValues[indexInClass] = clone(value, true);\n        }\n        return true;\n      }\n      return false;\n    });\n    return defined(result);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}