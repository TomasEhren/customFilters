{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { getCode, getVertices, CONTOUR_TYPE } from './marching-squares';\nexport function generateContours(_ref) {\n  var thresholdData = _ref.thresholdData,\n      colors = _ref.colors,\n      cellWeights = _ref.cellWeights,\n      gridSize = _ref.gridSize,\n      gridOrigin = _ref.gridOrigin,\n      cellSize = _ref.cellSize;\n  var contourSegments = [];\n  var contourPolygons = [];\n  var width = gridSize[0];\n  var height = gridSize[1];\n  var segmentIndex = 0;\n  var polygonIndex = 0;\n\n  var _iterator = _createForOfIteratorHelper(thresholdData),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var data = _step.value;\n      var contour = data.contour;\n      var threshold = contour.threshold;\n\n      for (var x = -1; x < width; x++) {\n        for (var y = -1; y < height; y++) {\n          var _getCode = getCode({\n            cellWeights: cellWeights,\n            threshold: threshold,\n            x: x,\n            y: y,\n            width: width,\n            height: height\n          }),\n              code = _getCode.code,\n              meanCode = _getCode.meanCode;\n\n          var opts = {\n            gridOrigin: gridOrigin,\n            cellSize: cellSize,\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            code: code,\n            meanCode: meanCode,\n            thresholdData: data\n          };\n\n          if (Array.isArray(threshold)) {\n            opts.type = CONTOUR_TYPE.ISO_BANDS;\n            var polygons = getVertices(opts);\n\n            var _iterator2 = _createForOfIteratorHelper(polygons),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var polygon = _step2.value;\n                contourPolygons[polygonIndex++] = {\n                  vertices: polygon,\n                  contour: contour\n                };\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          } else {\n            opts.type = CONTOUR_TYPE.ISO_LINES;\n            var vertices = getVertices(opts);\n\n            for (var i = 0; i < vertices.length; i += 2) {\n              contourSegments[segmentIndex++] = {\n                start: vertices[i],\n                end: vertices[i + 1],\n                contour: contour\n              };\n            }\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    contourSegments: contourSegments,\n    contourPolygons: contourPolygons\n  };\n}","map":{"version":3,"mappings":"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","names":["getCode","getVertices","CONTOUR_TYPE","generateContours","thresholdData","colors","cellWeights","gridSize","gridOrigin","cellSize","contourSegments","contourPolygons","width","height","segmentIndex","polygonIndex","data","contour","threshold","x","y","code","meanCode","opts","Array","isArray","type","ISO_BANDS","polygons","polygon","vertices","ISO_LINES","i","length","start","end"],"sources":["../../../src/contour-layer/contour-utils.js"],"sourcesContent":["import {getCode, getVertices, CONTOUR_TYPE} from './marching-squares';\n\n// Given all the cell weights, generates contours for each threshold.\n/* eslint-disable max-depth */\nexport function generateContours({\n  thresholdData,\n  colors,\n  cellWeights,\n  gridSize,\n  gridOrigin,\n  cellSize\n}) {\n  const contourSegments = [];\n  const contourPolygons = [];\n  const width = gridSize[0];\n  const height = gridSize[1];\n  let segmentIndex = 0;\n  let polygonIndex = 0;\n\n  for (const data of thresholdData) {\n    const {contour} = data;\n    const {threshold} = contour;\n    for (let x = -1; x < width; x++) {\n      for (let y = -1; y < height; y++) {\n        // Get the MarchingSquares code based on neighbor cell weights.\n        const {code, meanCode} = getCode({\n          cellWeights,\n          threshold,\n          x,\n          y,\n          width,\n          height\n        });\n        const opts = {\n          gridOrigin,\n          cellSize,\n          x,\n          y,\n          width,\n          height,\n          code,\n          meanCode,\n          thresholdData: data\n        };\n        if (Array.isArray(threshold)) {\n          opts.type = CONTOUR_TYPE.ISO_BANDS;\n          const polygons = getVertices(opts);\n          for (const polygon of polygons) {\n            contourPolygons[polygonIndex++] = {\n              vertices: polygon,\n              contour\n            };\n          }\n        } else {\n          // Get the intersection vertices based on MarchingSquares code.\n          opts.type = CONTOUR_TYPE.ISO_LINES;\n          const vertices = getVertices(opts);\n          for (let i = 0; i < vertices.length; i += 2) {\n            contourSegments[segmentIndex++] = {\n              start: vertices[i],\n              end: vertices[i + 1],\n              contour\n            };\n          }\n        }\n      }\n    }\n  }\n  return {contourSegments, contourPolygons};\n}\n/* eslint-enable max-depth */\n"]},"metadata":{},"sourceType":"module"}