{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Matrix4, Vector3 } from '@math.gl/core';\nimport { Ellipsoid } from '@math.gl/geospatial';\nimport { Stats } from '@probe.gl/stats';\nimport { RequestScheduler, assert, path } from '@loaders.gl/loader-utils';\nimport TilesetCache from './tileset-cache';\nimport { calculateTransformProps } from './helpers/transform-utils';\nimport { getFrameState } from './helpers/frame-state';\nimport { getZoomFromBoundingVolume } from './helpers/zoom';\nimport Tile3D from './tile-3d';\nimport Tileset3DTraverser from './traversers/tileset-3d-traverser';\nimport TilesetTraverser from './traversers/tileset-traverser';\nimport I3SetTraverser from './traversers/i3s-tileset-traverser';\nimport { TILESET_TYPE } from '../constants';\nconst DEFAULT_PROPS = {\n  description: '',\n  ellipsoid: Ellipsoid.WGS84,\n  modelMatrix: new Matrix4(),\n  throttleRequests: true,\n  maxRequests: 64,\n  maximumMemoryUsage: 32,\n  onTileLoad: () => {},\n  onTileUnload: () => {},\n  onTileError: () => {},\n  onTraversalComplete: selectedTiles => selectedTiles,\n  contentLoader: undefined,\n  viewDistanceScale: 1.0,\n  maximumScreenSpaceError: 8,\n  loadTiles: true,\n  updateTransforms: true,\n  viewportTraversersMap: null,\n  loadOptions: {\n    fetch: {}\n  },\n  attributions: [],\n  basePath: '',\n  i3s: {}\n};\nconst TILES_TOTAL = 'Tiles In Tileset(s)';\nconst TILES_IN_MEMORY = 'Tiles In Memory';\nconst TILES_IN_VIEW = 'Tiles In View';\nconst TILES_RENDERABLE = 'Tiles To Render';\nconst TILES_LOADED = 'Tiles Loaded';\nconst TILES_LOADING = 'Tiles Loading';\nconst TILES_UNLOADED = 'Tiles Unloaded';\nconst TILES_LOAD_FAILED = 'Failed Tile Loads';\nconst POINTS_COUNT = 'Points';\nconst TILES_GPU_MEMORY = 'Tile Memory Use';\nexport default class Tileset3D {\n  constructor(json, options) {\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"loadOptions\", void 0);\n\n    _defineProperty(this, \"type\", void 0);\n\n    _defineProperty(this, \"tileset\", void 0);\n\n    _defineProperty(this, \"loader\", void 0);\n\n    _defineProperty(this, \"url\", void 0);\n\n    _defineProperty(this, \"basePath\", void 0);\n\n    _defineProperty(this, \"modelMatrix\", void 0);\n\n    _defineProperty(this, \"ellipsoid\", void 0);\n\n    _defineProperty(this, \"lodMetricType\", void 0);\n\n    _defineProperty(this, \"lodMetricValue\", void 0);\n\n    _defineProperty(this, \"refine\", void 0);\n\n    _defineProperty(this, \"root\", void 0);\n\n    _defineProperty(this, \"roots\", void 0);\n\n    _defineProperty(this, \"asset\", void 0);\n\n    _defineProperty(this, \"description\", void 0);\n\n    _defineProperty(this, \"properties\", void 0);\n\n    _defineProperty(this, \"extras\", void 0);\n\n    _defineProperty(this, \"attributions\", void 0);\n\n    _defineProperty(this, \"credits\", void 0);\n\n    _defineProperty(this, \"stats\", void 0);\n\n    _defineProperty(this, \"traverseCounter\", void 0);\n\n    _defineProperty(this, \"geometricError\", void 0);\n\n    _defineProperty(this, \"selectedTiles\", void 0);\n\n    _defineProperty(this, \"cartographicCenter\", void 0);\n\n    _defineProperty(this, \"cartesianCenter\", void 0);\n\n    _defineProperty(this, \"zoom\", void 0);\n\n    _defineProperty(this, \"boundingVolume\", void 0);\n\n    _defineProperty(this, \"gpuMemoryUsageInBytes\", void 0);\n\n    _defineProperty(this, \"dynamicScreenSpaceErrorComputedDensity\", void 0);\n\n    _defineProperty(this, \"_traverser\", void 0);\n\n    _defineProperty(this, \"_cache\", void 0);\n\n    _defineProperty(this, \"_requestScheduler\", void 0);\n\n    _defineProperty(this, \"_frameNumber\", void 0);\n\n    _defineProperty(this, \"_queryParamsString\", void 0);\n\n    _defineProperty(this, \"_queryParams\", void 0);\n\n    _defineProperty(this, \"_extensionsUsed\", void 0);\n\n    _defineProperty(this, \"_tiles\", void 0);\n\n    _defineProperty(this, \"_pendingCount\", void 0);\n\n    _defineProperty(this, \"lastUpdatedVieports\", void 0);\n\n    _defineProperty(this, \"_requestedTiles\", void 0);\n\n    _defineProperty(this, \"_emptyTiles\", void 0);\n\n    _defineProperty(this, \"frameStateData\", void 0);\n\n    _defineProperty(this, \"maximumMemoryUsage\", void 0);\n\n    assert(json);\n    this.options = { ...DEFAULT_PROPS,\n      ...options\n    };\n    this.tileset = json;\n    this.loader = json.loader;\n    this.type = json.type;\n    this.url = json.url;\n    this.basePath = json.basePath || path.dirname(this.url);\n    this.modelMatrix = this.options.modelMatrix;\n    this.ellipsoid = this.options.ellipsoid;\n    this.lodMetricType = json.lodMetricType;\n    this.lodMetricValue = json.lodMetricValue;\n    this.refine = json.root.refine;\n    this.loadOptions = this.options.loadOptions || {};\n    this.root = null;\n    this.roots = {};\n    this.cartographicCenter = null;\n    this.cartesianCenter = null;\n    this.zoom = 1;\n    this.boundingVolume = null;\n    this.traverseCounter = 0;\n    this.geometricError = 0;\n    this._traverser = this._initializeTraverser();\n    this._cache = new TilesetCache();\n    this._requestScheduler = new RequestScheduler({\n      throttleRequests: this.options.throttleRequests,\n      maxRequests: this.options.maxRequests\n    });\n    this._frameNumber = 0;\n    this._pendingCount = 0;\n    this._tiles = {};\n    this.selectedTiles = [];\n    this._emptyTiles = [];\n    this._requestedTiles = [];\n    this.frameStateData = {};\n    this.lastUpdatedVieports = null;\n    this._queryParams = {};\n    this._queryParamsString = '';\n    this.maximumMemoryUsage = this.options.maximumMemoryUsage || 32;\n    this.gpuMemoryUsageInBytes = 0;\n    this.stats = new Stats({\n      id: this.url\n    });\n\n    this._initializeStats();\n\n    this._extensionsUsed = undefined;\n    this.dynamicScreenSpaceErrorComputedDensity = 0.0;\n    this.extras = null;\n    this.asset = {};\n    this.credits = {};\n    this.description = this.options.description || '';\n\n    this._initializeTileSet(json);\n  }\n\n  destroy() {\n    this._destroy();\n  }\n\n  isLoaded() {\n    return this._pendingCount === 0 && this._frameNumber !== 0;\n  }\n\n  get tiles() {\n    return Object.values(this._tiles);\n  }\n\n  get frameNumber() {\n    return this._frameNumber;\n  }\n\n  get queryParams() {\n    if (!this._queryParamsString) {\n      this._queryParamsString = getQueryParamString(this._queryParams);\n    }\n\n    return this._queryParamsString;\n  }\n\n  setProps(props) {\n    this.options = { ...this.options,\n      ...props\n    };\n  }\n\n  setOptions(options) {\n    this.options = { ...this.options,\n      ...options\n    };\n  }\n\n  getTileUrl(tilePath) {\n    const isDataUrl = tilePath.startsWith('data:');\n\n    if (isDataUrl) {\n      return tilePath;\n    }\n\n    return \"\".concat(tilePath).concat(this.queryParams);\n  }\n\n  hasExtension(extensionName) {\n    return Boolean(this._extensionsUsed && this._extensionsUsed.indexOf(extensionName) > -1);\n  }\n\n  update(viewports) {\n    if ('loadTiles' in this.options && !this.options.loadTiles) {\n      return;\n    }\n\n    if (this.traverseCounter > 0) {\n      return;\n    }\n\n    if (!viewports && this.lastUpdatedVieports) {\n      viewports = this.lastUpdatedVieports;\n    } else {\n      this.lastUpdatedVieports = viewports;\n    }\n\n    if (!(viewports instanceof Array)) {\n      viewports = [viewports];\n    }\n\n    this._cache.reset();\n\n    this._frameNumber++;\n    this.traverseCounter = viewports.length;\n    const viewportsToTraverse = [];\n\n    for (const viewport of viewports) {\n      const id = viewport.id;\n\n      if (this._needTraverse(id)) {\n        viewportsToTraverse.push(id);\n      } else {\n        this.traverseCounter--;\n      }\n    }\n\n    for (const viewport of viewports) {\n      const id = viewport.id;\n\n      if (!this.roots[id]) {\n        this.roots[id] = this._initializeTileHeaders(this.tileset, null);\n      }\n\n      if (!viewportsToTraverse.includes(id)) {\n        continue;\n      }\n\n      const frameState = getFrameState(viewport, this._frameNumber);\n\n      this._traverser.traverse(this.roots[id], frameState, this.options);\n    }\n  }\n\n  _needTraverse(viewportId) {\n    let traverserId = viewportId;\n\n    if (this.options.viewportTraversersMap) {\n      traverserId = this.options.viewportTraversersMap[viewportId];\n    }\n\n    if (traverserId !== viewportId) {\n      return false;\n    }\n\n    return true;\n  }\n\n  _onTraversalEnd(frameState) {\n    const id = frameState.viewport.id;\n\n    if (!this.frameStateData[id]) {\n      this.frameStateData[id] = {\n        selectedTiles: [],\n        _requestedTiles: [],\n        _emptyTiles: []\n      };\n    }\n\n    const currentFrameStateData = this.frameStateData[id];\n    const selectedTiles = Object.values(this._traverser.selectedTiles);\n    currentFrameStateData.selectedTiles = selectedTiles;\n    currentFrameStateData._requestedTiles = Object.values(this._traverser.requestedTiles);\n    currentFrameStateData._emptyTiles = Object.values(this._traverser.emptyTiles);\n    this.traverseCounter--;\n\n    if (this.traverseCounter > 0) {\n      return;\n    }\n\n    this._updateTiles();\n  }\n\n  _updateTiles() {\n    this.selectedTiles = [];\n    this._requestedTiles = [];\n    this._emptyTiles = [];\n\n    for (const frameStateKey in this.frameStateData) {\n      const frameStateDataValue = this.frameStateData[frameStateKey];\n      this.selectedTiles = this.selectedTiles.concat(frameStateDataValue.selectedTiles);\n      this._requestedTiles = this._requestedTiles.concat(frameStateDataValue._requestedTiles);\n      this._emptyTiles = this._emptyTiles.concat(frameStateDataValue._emptyTiles);\n    }\n\n    this.selectedTiles = this.options.onTraversalComplete(this.selectedTiles);\n\n    for (const tile of this.selectedTiles) {\n      this._tiles[tile.id] = tile;\n    }\n\n    this._loadTiles();\n\n    this._unloadTiles();\n\n    this._updateStats();\n  }\n\n  _tilesChanged(oldSelectedTiles, selectedTiles) {\n    if (oldSelectedTiles.length !== selectedTiles.length) {\n      return true;\n    }\n\n    const set1 = new Set(oldSelectedTiles.map(t => t.id));\n    const set2 = new Set(selectedTiles.map(t => t.id));\n    let changed = oldSelectedTiles.filter(x => !set2.has(x.id)).length > 0;\n    changed = changed || selectedTiles.filter(x => !set1.has(x.id)).length > 0;\n    return changed;\n  }\n\n  _loadTiles() {\n    for (const tile of this._requestedTiles) {\n      if (tile.contentUnloaded) {\n        this._loadTile(tile);\n      }\n    }\n  }\n\n  _unloadTiles() {\n    this._cache.unloadTiles(this, (tileset, tile) => tileset._unloadTile(tile));\n  }\n\n  _updateStats() {\n    let tilesRenderable = 0;\n    let pointsRenderable = 0;\n\n    for (const tile of this.selectedTiles) {\n      if (tile.contentAvailable && tile.content) {\n        tilesRenderable++;\n\n        if (tile.content.pointCount) {\n          pointsRenderable += tile.content.pointCount;\n        }\n      }\n    }\n\n    this.stats.get(TILES_IN_VIEW).count = this.selectedTiles.length;\n    this.stats.get(TILES_RENDERABLE).count = tilesRenderable;\n    this.stats.get(POINTS_COUNT).count = pointsRenderable;\n  }\n\n  _initializeTileSet(tilesetJson) {\n    this.root = this._initializeTileHeaders(tilesetJson, null);\n\n    if (this.type === TILESET_TYPE.TILES3D) {\n      this._initializeCesiumTileset(tilesetJson);\n    }\n\n    if (this.type === TILESET_TYPE.I3S) {\n      this._initializeI3STileset();\n    }\n\n    this._calculateViewProps();\n  }\n\n  _calculateViewProps() {\n    const root = this.root;\n    assert(root);\n    const {\n      center\n    } = root.boundingVolume;\n\n    if (!center) {\n      console.warn('center was not pre-calculated for the root tile');\n      this.cartographicCenter = new Vector3();\n      this.zoom = 1;\n      return;\n    }\n\n    this.cartographicCenter = Ellipsoid.WGS84.cartesianToCartographic(center, new Vector3());\n    this.cartesianCenter = center;\n    this.zoom = getZoomFromBoundingVolume(root.boundingVolume, this.cartographicCenter);\n  }\n\n  _initializeStats() {\n    this.stats.get(TILES_TOTAL);\n    this.stats.get(TILES_LOADING);\n    this.stats.get(TILES_IN_MEMORY);\n    this.stats.get(TILES_IN_VIEW);\n    this.stats.get(TILES_RENDERABLE);\n    this.stats.get(TILES_LOADED);\n    this.stats.get(TILES_UNLOADED);\n    this.stats.get(TILES_LOAD_FAILED);\n    this.stats.get(POINTS_COUNT, 'memory');\n    this.stats.get(TILES_GPU_MEMORY, 'memory');\n  }\n\n  _initializeTileHeaders(tilesetJson, parentTileHeader) {\n    const rootTile = new Tile3D(this, tilesetJson.root, parentTileHeader);\n\n    if (parentTileHeader) {\n      parentTileHeader.children.push(rootTile);\n      rootTile.depth = parentTileHeader.depth + 1;\n    }\n\n    if (this.type === TILESET_TYPE.TILES3D) {\n      const stack = [];\n      stack.push(rootTile);\n\n      while (stack.length > 0) {\n        const tile = stack.pop();\n        this.stats.get(TILES_TOTAL).incrementCount();\n        const children = tile.header.children || [];\n\n        for (const childHeader of children) {\n          const childTile = new Tile3D(this, childHeader, tile);\n          tile.children.push(childTile);\n          childTile.depth = tile.depth + 1;\n          stack.push(childTile);\n        }\n      }\n    }\n\n    return rootTile;\n  }\n\n  _initializeTraverser() {\n    let TraverserClass;\n    const type = this.type;\n\n    switch (type) {\n      case TILESET_TYPE.TILES3D:\n        TraverserClass = Tileset3DTraverser;\n        break;\n\n      case TILESET_TYPE.I3S:\n        TraverserClass = I3SetTraverser;\n        break;\n\n      default:\n        TraverserClass = TilesetTraverser;\n    }\n\n    return new TraverserClass({\n      basePath: this.basePath,\n      onTraversalEnd: this._onTraversalEnd.bind(this)\n    });\n  }\n\n  _destroyTileHeaders(parentTile) {\n    this._destroySubtree(parentTile);\n  }\n\n  async _loadTile(tile) {\n    let loaded;\n\n    try {\n      this._onStartTileLoading();\n\n      loaded = await tile.loadContent();\n    } catch (error) {\n      this._onTileLoadError(tile, error);\n    } finally {\n      this._onEndTileLoading();\n\n      this._onTileLoad(tile, loaded);\n    }\n  }\n\n  _onTileLoadError(tile, error) {\n    this.stats.get(TILES_LOAD_FAILED).incrementCount();\n    const message = error.message || error.toString();\n    const url = tile.url;\n    console.error(\"A 3D tile failed to load: \".concat(tile.url, \" \").concat(message));\n    this.options.onTileError(tile, message, url);\n  }\n\n  _onTileLoad(tile, loaded) {\n    if (!loaded) {\n      return;\n    }\n\n    if (tile && tile.content) {\n      calculateTransformProps(tile, tile.content);\n    }\n\n    this._addTileToCache(tile);\n\n    this.options.onTileLoad(tile);\n  }\n\n  _onStartTileLoading() {\n    this._pendingCount++;\n    this.stats.get(TILES_LOADING).incrementCount();\n  }\n\n  _onEndTileLoading() {\n    this._pendingCount--;\n    this.stats.get(TILES_LOADING).decrementCount();\n  }\n\n  _addTileToCache(tile) {\n    this._cache.add(this, tile, tileset => tileset._updateCacheStats(tile));\n  }\n\n  _updateCacheStats(tile) {\n    this.stats.get(TILES_LOADED).incrementCount();\n    this.stats.get(TILES_IN_MEMORY).incrementCount();\n    this.gpuMemoryUsageInBytes += tile.content.byteLength || 0;\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n  }\n\n  _unloadTile(tile) {\n    this.gpuMemoryUsageInBytes -= tile.content && tile.content.byteLength || 0;\n    this.stats.get(TILES_IN_MEMORY).decrementCount();\n    this.stats.get(TILES_UNLOADED).incrementCount();\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n    this.options.onTileUnload(tile);\n    tile.unloadContent();\n  }\n\n  _destroy() {\n    const stack = [];\n\n    if (this.root) {\n      stack.push(this.root);\n    }\n\n    while (stack.length > 0) {\n      const tile = stack.pop();\n\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n\n      this._destroyTile(tile);\n    }\n\n    this.root = null;\n  }\n\n  _destroySubtree(tile) {\n    const root = tile;\n    const stack = [];\n    stack.push(root);\n\n    while (stack.length > 0) {\n      tile = stack.pop();\n\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n\n      if (tile !== root) {\n        this._destroyTile(tile);\n      }\n    }\n\n    root.children = [];\n  }\n\n  _destroyTile(tile) {\n    this._cache.unloadTile(this, tile);\n\n    this._unloadTile(tile);\n\n    tile.destroy();\n  }\n\n  _initializeCesiumTileset(tilesetJson) {\n    this.asset = tilesetJson.asset;\n\n    if (!this.asset) {\n      throw new Error('Tileset must have an asset property.');\n    }\n\n    if (this.asset.version !== '0.0' && this.asset.version !== '1.0') {\n      throw new Error('The tileset must be 3D Tiles version 0.0 or 1.0.');\n    }\n\n    if ('tilesetVersion' in this.asset) {\n      this._queryParams.v = this.asset.tilesetVersion;\n    }\n\n    this.credits = {\n      attributions: this.options.attributions || []\n    };\n    this.description = this.options.description || '';\n    this.properties = tilesetJson.properties;\n    this.geometricError = tilesetJson.geometricError;\n    this._extensionsUsed = tilesetJson.extensionsUsed;\n    this.extras = tilesetJson.extras;\n  }\n\n  _initializeI3STileset() {\n    if (this.loadOptions.i3s && 'token' in this.loadOptions.i3s) {\n      this._queryParams.token = this.loadOptions.i3s.token;\n    }\n  }\n\n}\n\nfunction getQueryParamString(queryParams) {\n  const queryParamStrings = [];\n\n  for (const key of Object.keys(queryParams)) {\n    queryParamStrings.push(\"\".concat(key, \"=\").concat(queryParams[key]));\n  }\n\n  switch (queryParamStrings.length) {\n    case 0:\n      return '';\n\n    case 1:\n      return \"?\".concat(queryParamStrings[0]);\n\n    default:\n      return \"?\".concat(queryParamStrings.join('&'));\n  }\n}","map":{"version":3,"mappings":"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","names":["Matrix4","Vector3","Ellipsoid","Stats","RequestScheduler","assert","path","TilesetCache","calculateTransformProps","getFrameState","getZoomFromBoundingVolume","Tile3D","Tileset3DTraverser","TilesetTraverser","I3SetTraverser","TILESET_TYPE","DEFAULT_PROPS","description","ellipsoid","WGS84","modelMatrix","throttleRequests","maxRequests","maximumMemoryUsage","onTileLoad","onTileUnload","onTileError","onTraversalComplete","selectedTiles","contentLoader","undefined","viewDistanceScale","maximumScreenSpaceError","loadTiles","updateTransforms","viewportTraversersMap","loadOptions","fetch","attributions","basePath","i3s","TILES_TOTAL","TILES_IN_MEMORY","TILES_IN_VIEW","TILES_RENDERABLE","TILES_LOADED","TILES_LOADING","TILES_UNLOADED","TILES_LOAD_FAILED","POINTS_COUNT","TILES_GPU_MEMORY","Tileset3D","constructor","json","options","_defineProperty","tileset","loader","type","url","dirname","lodMetricType","lodMetricValue","refine","root","roots","cartographicCenter","cartesianCenter","zoom","boundingVolume","traverseCounter","geometricError","_traverser","_initializeTraverser","_cache","_requestScheduler","_frameNumber","_pendingCount","_tiles","_emptyTiles","_requestedTiles","frameStateData","lastUpdatedVieports","_queryParams","_queryParamsString","gpuMemoryUsageInBytes","stats","id","_initializeStats","_extensionsUsed","dynamicScreenSpaceErrorComputedDensity","extras","asset","credits","_initializeTileSet","destroy","_destroy","isLoaded","tiles","Object","values","frameNumber","queryParams","getQueryParamString","setProps","props","setOptions","getTileUrl","tilePath","isDataUrl","startsWith","hasExtension","extensionName","Boolean","indexOf","update","viewports","Array","reset","length","viewportsToTraverse","viewport","_needTraverse","push","_initializeTileHeaders","includes","frameState","traverse","viewportId","traverserId","_onTraversalEnd","currentFrameStateData","requestedTiles","emptyTiles","_updateTiles","frameStateKey","frameStateDataValue","concat","tile","_loadTiles","_unloadTiles","_updateStats","_tilesChanged","oldSelectedTiles","set1","Set","map","t","set2","changed","filter","x","has","contentUnloaded","_loadTile","unloadTiles","_unloadTile","tilesRenderable","pointsRenderable","contentAvailable","content","pointCount","get","count","tilesetJson","TILES3D","_initializeCesiumTileset","I3S","_initializeI3STileset","_calculateViewProps","center","console","warn","cartesianToCartographic","parentTileHeader","rootTile","children","depth","stack","pop","incrementCount","header","childHeader","childTile","TraverserClass","onTraversalEnd","bind","_destroyTileHeaders","parentTile","_destroySubtree","loaded","_onStartTileLoading","loadContent","error","_onTileLoadError","_onEndTileLoading","_onTileLoad","message","toString","_addTileToCache","decrementCount","add","_updateCacheStats","byteLength","unloadContent","child","_destroyTile","unloadTile","Error","version","v","tilesetVersion","properties","extensionsUsed","token","queryParamStrings","key","keys","join"],"sources":["../../../src/tileset/tileset-3d.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/*\n\n  The Tileset loading and rendering flow is as below,\n  A rendered (i.e. deck.gl `Tile3DLayer`) triggers `tileset.update()` after a `tileset` is loaded\n  `tileset` starts traversing the tile tree and update `requestTiles` (tiles of which content need\n  to be fetched) and `selectedTiles` (tiles ready for rendering under the current viewport).\n  `Tile3DLayer` will update rendering based on `selectedTiles`.\n  `Tile3DLayer` also listens to `onTileLoad` callback and trigger another round of `update and then traversal`\n  when new tiles are loaded.\n\n  As I3S tileset have stored `tileHeader` file (metadata) and tile content files (geometry, texture, ...) separately.\n  During each traversal, it issues `tilHeader` requests if that `tileHeader` is not yet fetched,\n  after the tile header is fulfilled, it will resume the traversal starting from the tile just fetched (not root).\n\n  Tile3DLayer\n       |\n   await load(tileset)\n       |\n   tileset.update()\n       |                async load tileHeader\n   tileset.traverse() -------------------------- Queued\n       |        resume traversal after fetched  |\n       |----------------------------------------|\n       |\n       |                     async load tile content\n  tilset.requestedTiles  ----------------------------- RequestScheduler\n                                                              |\n  tilset.selectedTiles (ready for rendering)                  |\n       |         Listen to                                    |\n    Tile3DLayer ----------- onTileLoad  ----------------------|\n       |                         |   notify new tile is available\n    updateLayers                 |\n                        tileset.update // trigger another round of update\n*/\n\nimport {Matrix4, Vector3} from '@math.gl/core';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {Stats} from '@probe.gl/stats';\nimport {\n  RequestScheduler,\n  assert,\n  path,\n  LoaderWithParser,\n  LoaderOptions\n} from '@loaders.gl/loader-utils';\nimport TilesetCache from './tileset-cache';\nimport {calculateTransformProps} from './helpers/transform-utils';\nimport {FrameState, getFrameState} from './helpers/frame-state';\nimport {getZoomFromBoundingVolume} from './helpers/zoom';\nimport Tile3D from './tile-3d';\nimport Tileset3DTraverser from './traversers/tileset-3d-traverser';\nimport TilesetTraverser from './traversers/tileset-traverser';\nimport I3SetTraverser from './traversers/i3s-tileset-traverser';\nimport {TILESET_TYPE} from '../constants';\n\nexport type Tileset3DProps = {\n  // loading\n  throttleRequests?: boolean;\n  maxRequests?: number;\n  loadOptions?: LoaderOptions;\n  loadTiles?: boolean;\n  basePath?: string;\n  maximumMemoryUsage?: number;\n\n  // Metadata\n  description?: string;\n  attributions?: string[];\n\n  // Transforms\n  ellipsoid?: object;\n  modelMatrix?: Matrix4;\n\n  // Traversal\n  maximumScreenSpaceError?: number;\n  viewportTraversersMap?: any;\n  updateTransforms?: boolean;\n  viewDistanceScale?: number;\n\n  // Callbacks\n  onTileLoad?: (tile: Tile3D) => any;\n  onTileUnload?: (tile: Tile3D) => any;\n  onTileError?: (tile: Tile3D, message: string, url: string) => any;\n  contentLoader?: (tile: Tile3D) => Promise<void>;\n  onTraversalComplete?: (selectedTiles: Tile3D[]) => Tile3D[];\n};\n\ntype Props = {\n  description: string;\n  ellipsoid: object;\n  modelMatrix: Matrix4;\n  throttleRequests: boolean;\n  maximumMemoryUsage: number;\n  onTileLoad: (tile: Tile3D) => any;\n  onTileUnload: (tile: Tile3D) => any;\n  onTileError: (tile: Tile3D, message: string, url: string) => any;\n  onTraversalComplete: (selectedTiles: Tile3D[]) => Tile3D[];\n  maximumScreenSpaceError: number;\n  viewportTraversersMap: any;\n  attributions: string[];\n  maxRequests: number;\n  loadTiles: boolean;\n  loadOptions: LoaderOptions;\n  updateTransforms: boolean;\n  viewDistanceScale: number;\n  basePath: string;\n  contentLoader?: (tile: Tile3D) => Promise<void>;\n  i3s: {[key: string]: any};\n};\n\nconst DEFAULT_PROPS: Props = {\n  description: '',\n\n  ellipsoid: Ellipsoid.WGS84,\n  // A 4x4 transformation matrix this transforms the entire tileset.\n  modelMatrix: new Matrix4(),\n\n  // Set to false to disable network request throttling\n  throttleRequests: true,\n\n  // Number of simultaneous requsts, if throttleRequests is true\n  maxRequests: 64,\n\n  maximumMemoryUsage: 32,\n\n  /**\n   * Callback. Indicates this a tile's content was loaded\n   * @param tile {TileHeader}\n   */\n  onTileLoad: () => {},\n  /**\n   * Callback. Indicates this a tile's content was unloaded\n   * @param tile {TileHeader}\n   */\n  onTileUnload: () => {},\n  onTileError: () => {},\n  /**\n   * Callback. Allows post-process selectedTiles right after traversal.\n   * @param selectedTiles {TileHeader[]}\n   * @returns TileHeader[] - output array of tiles to return to deck.gl\n   */\n  onTraversalComplete: (selectedTiles: Tile3D[]) => selectedTiles,\n\n  // Optional async tile content loader\n  contentLoader: undefined,\n\n  // View distance scale modifier\n  viewDistanceScale: 1.0,\n\n  // TODO CESIUM\n  // The maximum screen space error used to drive level of detail refinement.\n  maximumScreenSpaceError: 8,\n\n  loadTiles: true,\n  updateTransforms: true,\n  viewportTraversersMap: null,\n\n  loadOptions: {fetch: {}},\n\n  attributions: [],\n  basePath: '',\n\n  i3s: {}\n};\n\n// Tracked Stats\nconst TILES_TOTAL = 'Tiles In Tileset(s)';\nconst TILES_IN_MEMORY = 'Tiles In Memory';\nconst TILES_IN_VIEW = 'Tiles In View';\nconst TILES_RENDERABLE = 'Tiles To Render';\nconst TILES_LOADED = 'Tiles Loaded';\nconst TILES_LOADING = 'Tiles Loading';\nconst TILES_UNLOADED = 'Tiles Unloaded';\nconst TILES_LOAD_FAILED = 'Failed Tile Loads';\nconst POINTS_COUNT = 'Points';\nconst TILES_GPU_MEMORY = 'Tile Memory Use';\n\nexport default class Tileset3D {\n  // props: Tileset3DProps;\n  options: Props;\n  loadOptions: {[key: string]: any};\n\n  type: string;\n  tileset: {[key: string]: any};\n  loader: LoaderWithParser;\n  url: string;\n  basePath: string;\n  modelMatrix: Matrix4;\n  ellipsoid: any;\n  lodMetricType: string;\n  lodMetricValue: number;\n  refine: string;\n  root: Tile3D | null;\n  roots: {[key: string]: Tile3D};\n  asset: {[key: string]: any};\n\n  description: string;\n  properties: any;\n  extras: any;\n  attributions: any;\n  credits: any;\n\n  stats: Stats;\n\n  traverseCounter: number;\n  geometricError: number;\n  selectedTiles: Tile3D[];\n\n  cartographicCenter: Vector3 | null;\n  cartesianCenter: Vector3 | null;\n  zoom: number;\n  boundingVolume: any;\n\n  // METRICS\n  // The maximum amount of GPU memory (in MB) that may be used to cache tiles.\n  // Tiles not in view are unloaded to enforce private\n  // The total amount of GPU memory in bytes used by the tileset.\n  gpuMemoryUsageInBytes: any;\n  dynamicScreenSpaceErrorComputedDensity: any;\n\n  // TRAVERSAL\n  _traverser: TilesetTraverser;\n  private _cache: TilesetCache;\n  _requestScheduler: RequestScheduler;\n\n  _frameNumber: number;\n  private _queryParamsString: string;\n  private _queryParams: any;\n  private _extensionsUsed: any;\n  private _tiles: {[id: string]: Tile3D};\n\n  // counter for tracking tiles requests\n  private _pendingCount: any;\n\n  // HOLD TRAVERSAL RESULTS\n  private lastUpdatedVieports: any[] | null;\n  private _requestedTiles: any;\n  private _emptyTiles: any;\n  private frameStateData: any;\n\n  maximumMemoryUsage: number;\n\n  /**\n   * Create a new Tileset3D\n   * @param json\n   * @param props\n   */\n  // eslint-disable-next-line max-statements\n  constructor(json: any, options?: Tileset3DProps) {\n    assert(json);\n\n    // PUBLIC MEMBERS\n    this.options = {...DEFAULT_PROPS, ...options};\n    // raw data\n    this.tileset = json;\n    this.loader = json.loader;\n    // could be  3d tiles, i3s\n    this.type = json.type;\n    // The url to a tileset JSON file.\n    this.url = json.url;\n    this.basePath = json.basePath || path.dirname(this.url);\n    this.modelMatrix = this.options.modelMatrix;\n    this.ellipsoid = this.options.ellipsoid;\n\n    // Geometric error when the tree is not rendered at all\n    this.lodMetricType = json.lodMetricType;\n    this.lodMetricValue = json.lodMetricValue;\n    this.refine = json.root.refine;\n\n    this.loadOptions = this.options.loadOptions || {};\n\n    this.root = null;\n    this.roots = {};\n    // view props\n    this.cartographicCenter = null;\n    this.cartesianCenter = null;\n    this.zoom = 1;\n    this.boundingVolume = null;\n\n    // TRAVERSAL\n    this.traverseCounter = 0;\n    this.geometricError = 0;\n    this._traverser = this._initializeTraverser();\n    this._cache = new TilesetCache();\n    this._requestScheduler = new RequestScheduler({\n      throttleRequests: this.options.throttleRequests,\n      maxRequests: this.options.maxRequests\n    });\n    // update tracker\n    // increase in each update cycle\n    this._frameNumber = 0;\n\n    // counter for tracking tiles requests\n    this._pendingCount = 0;\n\n    // HOLD TRAVERSAL RESULTS\n    this._tiles = {};\n    this.selectedTiles = [];\n    this._emptyTiles = [];\n    this._requestedTiles = [];\n    this.frameStateData = {};\n    this.lastUpdatedVieports = null;\n\n    this._queryParams = {};\n    this._queryParamsString = '';\n\n    // METRICS\n    // The maximum amount of GPU memory (in MB) that may be used to cache tiles.\n    // Tiles not in view are unloaded to enforce this.\n    this.maximumMemoryUsage = this.options.maximumMemoryUsage || 32;\n    // The total amount of GPU memory in bytes used by the tileset.\n    this.gpuMemoryUsageInBytes = 0;\n    this.stats = new Stats({id: this.url});\n    this._initializeStats();\n\n    // EXTRACTED FROM TILESET\n    this._extensionsUsed = undefined;\n    this.dynamicScreenSpaceErrorComputedDensity = 0.0; // Updated based on the camera position and direction\n    // Metadata for the entire tileset\n    this.extras = null;\n    this.asset = {};\n    this.credits = {};\n    this.description = this.options.description || '';\n\n    this._initializeTileSet(json);\n  }\n\n  /** Release resources */\n  destroy(): void {\n    this._destroy();\n  }\n\n  /** Is the tileset loaded (update needs to have been called at least once) */\n  isLoaded(): boolean {\n    // Check that `_frameNumber !== 0` which means that update was called at least once\n    return this._pendingCount === 0 && this._frameNumber !== 0;\n  }\n\n  get tiles(): object[] {\n    return Object.values(this._tiles);\n  }\n\n  get frameNumber(): number {\n    return this._frameNumber;\n  }\n\n  get queryParams(): string {\n    if (!this._queryParamsString) {\n      this._queryParamsString = getQueryParamString(this._queryParams);\n    }\n    return this._queryParamsString;\n  }\n\n  setProps(props: Tileset3DProps): void {\n    this.options = {...this.options, ...props};\n  }\n\n  /** @deprecated */\n  setOptions(options: Tileset3DProps): void {\n    this.options = {...this.options, ...options};\n  }\n\n  /**\n   * Return a loadable tile url for a specific tile subpath\n   * @param tilePath a tile subpath\n   */\n  getTileUrl(tilePath: string): string {\n    const isDataUrl = tilePath.startsWith('data:');\n    if (isDataUrl) {\n      return tilePath;\n    }\n    return `${tilePath}${this.queryParams}`;\n  }\n\n  // TODO CESIUM specific\n  hasExtension(extensionName: string): boolean {\n    return Boolean(this._extensionsUsed && this._extensionsUsed.indexOf(extensionName) > -1);\n  }\n\n  /**\n   * Update visible tiles relying on a list of viewports\n   * @param viewports - list of viewports\n   */\n  // eslint-disable-next-line max-statements, complexity\n  update(viewports: any[]): void {\n    if ('loadTiles' in this.options && !this.options.loadTiles) {\n      return;\n    }\n    if (this.traverseCounter > 0) {\n      return;\n    }\n    if (!viewports && this.lastUpdatedVieports) {\n      viewports = this.lastUpdatedVieports;\n    } else {\n      this.lastUpdatedVieports = viewports;\n    }\n    if (!(viewports instanceof Array)) {\n      viewports = [viewports];\n    }\n\n    this._cache.reset();\n    this._frameNumber++;\n    this.traverseCounter = viewports.length;\n    const viewportsToTraverse: string[] = [];\n    // First loop to decrement traverseCounter\n    for (const viewport of viewports) {\n      const id = viewport.id as string;\n      if (this._needTraverse(id)) {\n        viewportsToTraverse.push(id);\n      } else {\n        this.traverseCounter--;\n      }\n    }\n\n    // Second loop to traverse\n    for (const viewport of viewports) {\n      const id = viewport.id as string;\n      if (!this.roots[id]) {\n        this.roots[id] = this._initializeTileHeaders(this.tileset, null);\n      }\n\n      if (!viewportsToTraverse.includes(id)) {\n        continue; // eslint-disable-line no-continue\n      }\n      const frameState = getFrameState(viewport, this._frameNumber);\n      this._traverser.traverse(this.roots[id], frameState, this.options);\n    }\n  }\n\n  /**\n   * Check if traversal is needed for particular viewport\n   * @param {string} viewportId - id of a viewport\n   * @return {boolean}\n   */\n  _needTraverse(viewportId: string): boolean {\n    let traverserId = viewportId;\n    if (this.options.viewportTraversersMap) {\n      traverserId = this.options.viewportTraversersMap[viewportId];\n    }\n    if (traverserId !== viewportId) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * The callback to post-process tiles after traversal procedure\n   * @param frameState - frame state for tile culling\n   */\n  _onTraversalEnd(frameState: FrameState): void {\n    const id = frameState.viewport.id;\n    if (!this.frameStateData[id]) {\n      this.frameStateData[id] = {selectedTiles: [], _requestedTiles: [], _emptyTiles: []};\n    }\n    const currentFrameStateData = this.frameStateData[id];\n    const selectedTiles = Object.values(this._traverser.selectedTiles);\n    currentFrameStateData.selectedTiles = selectedTiles;\n    currentFrameStateData._requestedTiles = Object.values(this._traverser.requestedTiles);\n    currentFrameStateData._emptyTiles = Object.values(this._traverser.emptyTiles);\n\n    this.traverseCounter--;\n    if (this.traverseCounter > 0) {\n      return;\n    }\n\n    this._updateTiles();\n  }\n\n  /**\n   * Update tiles relying on data from all traversers\n   */\n  _updateTiles(): void {\n    this.selectedTiles = [];\n    this._requestedTiles = [];\n    this._emptyTiles = [];\n\n    for (const frameStateKey in this.frameStateData) {\n      const frameStateDataValue = this.frameStateData[frameStateKey];\n      this.selectedTiles = this.selectedTiles.concat(frameStateDataValue.selectedTiles);\n      this._requestedTiles = this._requestedTiles.concat(frameStateDataValue._requestedTiles);\n      this._emptyTiles = this._emptyTiles.concat(frameStateDataValue._emptyTiles);\n    }\n\n    this.selectedTiles = this.options.onTraversalComplete(this.selectedTiles);\n\n    for (const tile of this.selectedTiles) {\n      this._tiles[tile.id] = tile;\n    }\n\n    this._loadTiles();\n    this._unloadTiles();\n    this._updateStats();\n  }\n\n  _tilesChanged(oldSelectedTiles, selectedTiles) {\n    if (oldSelectedTiles.length !== selectedTiles.length) {\n      return true;\n    }\n    const set1 = new Set(oldSelectedTiles.map((t) => t.id));\n    const set2 = new Set(selectedTiles.map((t) => t.id));\n    let changed = oldSelectedTiles.filter((x) => !set2.has(x.id)).length > 0;\n    changed = changed || selectedTiles.filter((x) => !set1.has(x.id)).length > 0;\n    return changed;\n  }\n\n  _loadTiles() {\n    // Sort requests by priority before making any requests.\n    // This makes it less likely this requests will be cancelled after being issued.\n    // requestedTiles.sort((a, b) => a._priority - b._priority);\n    for (const tile of this._requestedTiles) {\n      if (tile.contentUnloaded) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this._loadTile(tile);\n      }\n    }\n  }\n\n  _unloadTiles() {\n    // unload tiles from cache when hit maximumMemoryUsage\n    this._cache.unloadTiles(this, (tileset, tile) => tileset._unloadTile(tile));\n  }\n\n  _updateStats() {\n    let tilesRenderable = 0;\n    let pointsRenderable = 0;\n    for (const tile of this.selectedTiles) {\n      if (tile.contentAvailable && tile.content) {\n        tilesRenderable++;\n        if (tile.content.pointCount) {\n          pointsRenderable += tile.content.pointCount;\n        }\n      }\n    }\n\n    this.stats.get(TILES_IN_VIEW).count = this.selectedTiles.length;\n    this.stats.get(TILES_RENDERABLE).count = tilesRenderable;\n    this.stats.get(POINTS_COUNT).count = pointsRenderable;\n  }\n\n  _initializeTileSet(tilesetJson) {\n    this.root = this._initializeTileHeaders(tilesetJson, null);\n\n    // TODO CESIUM Specific\n    if (this.type === TILESET_TYPE.TILES3D) {\n      this._initializeCesiumTileset(tilesetJson);\n    }\n\n    if (this.type === TILESET_TYPE.I3S) {\n      this._initializeI3STileset();\n    }\n    // Calculate cartographicCenter & zoom props to help apps center view on tileset\n    this._calculateViewProps();\n  }\n\n  // Called during initialize Tileset to initialize the tileset's cartographic center (longitude, latitude) and zoom.\n  _calculateViewProps() {\n    const root = this.root as Tile3D;\n    assert(root);\n    const {center} = root.boundingVolume;\n    // TODO - handle all cases\n    if (!center) {\n      // eslint-disable-next-line\n      console.warn('center was not pre-calculated for the root tile');\n      this.cartographicCenter = new Vector3();\n      this.zoom = 1;\n      return;\n    }\n    this.cartographicCenter = Ellipsoid.WGS84.cartesianToCartographic(center, new Vector3());\n    this.cartesianCenter = center;\n    this.zoom = getZoomFromBoundingVolume(root.boundingVolume, this.cartographicCenter);\n  }\n\n  _initializeStats() {\n    this.stats.get(TILES_TOTAL);\n    this.stats.get(TILES_LOADING);\n    this.stats.get(TILES_IN_MEMORY);\n    this.stats.get(TILES_IN_VIEW);\n    this.stats.get(TILES_RENDERABLE);\n    this.stats.get(TILES_LOADED);\n    this.stats.get(TILES_UNLOADED);\n    this.stats.get(TILES_LOAD_FAILED);\n    this.stats.get(POINTS_COUNT, 'memory');\n    this.stats.get(TILES_GPU_MEMORY, 'memory');\n  }\n\n  // Installs the main tileset JSON file or a tileset JSON file referenced from a tile.\n  // eslint-disable-next-line max-statements\n  _initializeTileHeaders(tilesetJson, parentTileHeader) {\n    // A tileset JSON file referenced from a tile may exist in a different directory than the root tileset.\n    // Get the basePath relative to the external tileset.\n    const rootTile = new Tile3D(this, tilesetJson.root, parentTileHeader); // resource\n\n    // If there is a parentTileHeader, add the root of the currently loading tileset\n    // to parentTileHeader's children, and update its depth.\n    if (parentTileHeader) {\n      parentTileHeader.children.push(rootTile);\n      rootTile.depth = parentTileHeader.depth + 1;\n    }\n\n    // Cesium 3d tiles knows the hierarchy beforehand\n    if (this.type === TILESET_TYPE.TILES3D) {\n      const stack: Tile3D[] = [];\n      stack.push(rootTile);\n\n      while (stack.length > 0) {\n        const tile = stack.pop() as Tile3D;\n        this.stats.get(TILES_TOTAL).incrementCount();\n        const children = tile.header.children || [];\n        for (const childHeader of children) {\n          const childTile = new Tile3D(this, childHeader, tile);\n          tile.children.push(childTile);\n          childTile.depth = tile.depth + 1;\n          stack.push(childTile);\n        }\n      }\n    }\n\n    return rootTile;\n  }\n\n  _initializeTraverser() {\n    let TraverserClass;\n    const type = this.type;\n    switch (type) {\n      case TILESET_TYPE.TILES3D:\n        TraverserClass = Tileset3DTraverser;\n        break;\n      case TILESET_TYPE.I3S:\n        TraverserClass = I3SetTraverser;\n        break;\n      default:\n        TraverserClass = TilesetTraverser;\n    }\n\n    return new TraverserClass({\n      basePath: this.basePath,\n      onTraversalEnd: this._onTraversalEnd.bind(this)\n    });\n  }\n\n  _destroyTileHeaders(parentTile) {\n    this._destroySubtree(parentTile);\n  }\n\n  async _loadTile(tile) {\n    let loaded;\n    try {\n      this._onStartTileLoading();\n      loaded = await tile.loadContent();\n    } catch (error) {\n      this._onTileLoadError(tile, error);\n    } finally {\n      this._onEndTileLoading();\n      this._onTileLoad(tile, loaded);\n    }\n  }\n\n  _onTileLoadError(tile, error) {\n    this.stats.get(TILES_LOAD_FAILED).incrementCount();\n\n    const message = error.message || error.toString();\n    const url = tile.url;\n    // TODO - Allow for probe log to be injected instead of console?\n    console.error(`A 3D tile failed to load: ${tile.url} ${message}`); // eslint-disable-line\n    this.options.onTileError(tile, message, url);\n  }\n\n  _onTileLoad(tile, loaded) {\n    if (!loaded) {\n      return;\n    }\n\n    // add coordinateOrigin and modelMatrix to tile\n    if (tile && tile.content) {\n      calculateTransformProps(tile, tile.content);\n    }\n\n    this._addTileToCache(tile);\n    this.options.onTileLoad(tile);\n  }\n\n  _onStartTileLoading() {\n    this._pendingCount++;\n    this.stats.get(TILES_LOADING).incrementCount();\n  }\n\n  _onEndTileLoading() {\n    this._pendingCount--;\n    this.stats.get(TILES_LOADING).decrementCount();\n  }\n\n  _addTileToCache(tile) {\n    this._cache.add(this, tile, (tileset) => tileset._updateCacheStats(tile));\n  }\n\n  _updateCacheStats(tile) {\n    this.stats.get(TILES_LOADED).incrementCount();\n    this.stats.get(TILES_IN_MEMORY).incrementCount();\n\n    // Good enough? Just use the raw binary ArrayBuffer's byte length.\n    this.gpuMemoryUsageInBytes += tile.content.byteLength || 0;\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n  }\n\n  _unloadTile(tile) {\n    this.gpuMemoryUsageInBytes -= (tile.content && tile.content.byteLength) || 0;\n\n    this.stats.get(TILES_IN_MEMORY).decrementCount();\n    this.stats.get(TILES_UNLOADED).incrementCount();\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n\n    this.options.onTileUnload(tile);\n    tile.unloadContent();\n  }\n\n  // Traverse the tree and destroy all tiles\n  _destroy() {\n    const stack: Tile3D[] = [];\n\n    if (this.root) {\n      stack.push(this.root);\n    }\n\n    while (stack.length > 0) {\n      const tile: Tile3D = stack.pop() as Tile3D;\n\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n\n      this._destroyTile(tile);\n    }\n    this.root = null;\n  }\n\n  // Traverse the tree and destroy all sub tiles\n  _destroySubtree(tile) {\n    const root = tile;\n    const stack: Tile3D[] = [];\n    stack.push(root);\n    while (stack.length > 0) {\n      tile = stack.pop();\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n      if (tile !== root) {\n        this._destroyTile(tile);\n      }\n    }\n    root.children = [];\n  }\n\n  _destroyTile(tile) {\n    this._cache.unloadTile(this, tile);\n    this._unloadTile(tile);\n    tile.destroy();\n  }\n\n  _initializeCesiumTileset(tilesetJson) {\n    this.asset = tilesetJson.asset;\n    if (!this.asset) {\n      throw new Error('Tileset must have an asset property.');\n    }\n    if (this.asset.version !== '0.0' && this.asset.version !== '1.0') {\n      throw new Error('The tileset must be 3D Tiles version 0.0 or 1.0.');\n    }\n\n    // Note: `asset.tilesetVersion` is version of the tileset itself (not the version of the 3D TILES standard)\n    // We add this version as a `v=1.0` query param to fetch the right version and not get an older cached version\n    if ('tilesetVersion' in this.asset) {\n      this._queryParams.v = this.asset.tilesetVersion;\n    }\n\n    // TODO - ion resources have a credits property we can use for additional attribution.\n    this.credits = {\n      attributions: this.options.attributions || []\n    };\n    this.description = this.options.description || '';\n\n    // Gets the tileset's properties dictionary object, which contains metadata about per-feature properties.\n    this.properties = tilesetJson.properties;\n    this.geometricError = tilesetJson.geometricError;\n    this._extensionsUsed = tilesetJson.extensionsUsed;\n    // Returns the extras property at the top of the tileset JSON (application specific metadata).\n    this.extras = tilesetJson.extras;\n  }\n\n  _initializeI3STileset() {\n    if (this.loadOptions.i3s && 'token' in this.loadOptions.i3s) {\n      this._queryParams.token = this.loadOptions.i3s.token;\n    }\n  }\n}\n\nfunction getQueryParamString(queryParams): string {\n  const queryParamStrings: string[] = [];\n  for (const key of Object.keys(queryParams)) {\n    queryParamStrings.push(`${key}=${queryParams[key]}`);\n  }\n  switch (queryParamStrings.length) {\n    case 0:\n      return '';\n    case 1:\n      return `?${queryParamStrings[0]}`;\n    default:\n      return `?${queryParamStrings.join('&')}`;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}