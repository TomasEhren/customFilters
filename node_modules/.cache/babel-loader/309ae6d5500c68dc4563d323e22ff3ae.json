{"ast":null,"code":"import { Tesselator } from '@deck.gl/core';\nimport { normalizePath } from './path';\nconst START_CAP = 1;\nconst END_CAP = 2;\nconst INVALID = 4;\nexport default class PathTesselator extends Tesselator {\n  constructor(opts) {\n    super({ ...opts,\n      attributes: {\n        positions: {\n          size: 3,\n          padding: 18,\n          initialize: true,\n          type: opts.fp64 ? Float64Array : Float32Array\n        },\n        segmentTypes: {\n          size: 1,\n          type: Uint8ClampedArray\n        }\n      }\n    });\n  }\n\n  getGeometryFromBuffer(buffer) {\n    if (this.normalize) {\n      return super.getGeometryFromBuffer(buffer);\n    }\n\n    return () => null;\n  }\n\n  normalizeGeometry(path) {\n    if (this.normalize) {\n      return normalizePath(path, this.positionSize, this.opts.resolution, this.opts.wrapLongitude);\n    }\n\n    return path;\n  }\n\n  get(attributeName) {\n    return this.attributes[attributeName];\n  }\n\n  getGeometrySize(path) {\n    if (Array.isArray(path[0])) {\n      let size = 0;\n\n      for (const subPath of path) {\n        size += this.getGeometrySize(subPath);\n      }\n\n      return size;\n    }\n\n    const numPoints = this.getPathLength(path);\n\n    if (numPoints < 2) {\n      return 0;\n    }\n\n    if (this.isClosed(path)) {\n      return numPoints < 3 ? 0 : numPoints + 2;\n    }\n\n    return numPoints;\n  }\n\n  updateGeometryAttributes(path, context) {\n    if (context.geometrySize === 0) {\n      return;\n    }\n\n    if (path && Array.isArray(path[0])) {\n      for (const subPath of path) {\n        const geometrySize = this.getGeometrySize(subPath);\n        context.geometrySize = geometrySize;\n        this.updateGeometryAttributes(subPath, context);\n        context.vertexStart += geometrySize;\n      }\n    } else {\n      this._updateSegmentTypes(path, context);\n\n      this._updatePositions(path, context);\n    }\n  }\n\n  _updateSegmentTypes(path, context) {\n    const {\n      segmentTypes\n    } = this.attributes;\n    const isPathClosed = this.isClosed(path);\n    const {\n      vertexStart,\n      geometrySize\n    } = context;\n    segmentTypes.fill(0, vertexStart, vertexStart + geometrySize);\n\n    if (isPathClosed) {\n      segmentTypes[vertexStart] = INVALID;\n      segmentTypes[vertexStart + geometrySize - 2] = INVALID;\n    } else {\n      segmentTypes[vertexStart] += START_CAP;\n      segmentTypes[vertexStart + geometrySize - 2] += END_CAP;\n    }\n\n    segmentTypes[vertexStart + geometrySize - 1] = INVALID;\n  }\n\n  _updatePositions(path, context) {\n    const {\n      positions\n    } = this.attributes;\n\n    if (!positions) {\n      return;\n    }\n\n    const {\n      vertexStart,\n      geometrySize\n    } = context;\n    const p = new Array(3);\n\n    for (let i = vertexStart, ptIndex = 0; ptIndex < geometrySize; i++, ptIndex++) {\n      this.getPointOnPath(path, ptIndex, p);\n      positions[i * 3] = p[0];\n      positions[i * 3 + 1] = p[1];\n      positions[i * 3 + 2] = p[2];\n    }\n  }\n\n  getPathLength(path) {\n    return path.length / this.positionSize;\n  }\n\n  getPointOnPath(path, index) {\n    let target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    const {\n      positionSize\n    } = this;\n\n    if (index * positionSize >= path.length) {\n      index += 1 - path.length / positionSize;\n    }\n\n    const i = index * positionSize;\n    target[0] = path[i];\n    target[1] = path[i + 1];\n    target[2] = positionSize === 3 && path[i + 2] || 0;\n    return target;\n  }\n\n  isClosed(path) {\n    if (!this.normalize) {\n      return this.opts.loop;\n    }\n\n    const {\n      positionSize\n    } = this;\n    const lastPointIndex = path.length - positionSize;\n    return path[0] === path[lastPointIndex] && path[1] === path[lastPointIndex + 1] && (positionSize === 2 || path[2] === path[lastPointIndex + 2]);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Tesselator","normalizePath","START_CAP","END_CAP","INVALID","PathTesselator","constructor","opts","attributes","positions","size","padding","initialize","type","fp64","Float64Array","Float32Array","segmentTypes","Uint8ClampedArray","getGeometryFromBuffer","buffer","normalize","normalizeGeometry","path","positionSize","resolution","wrapLongitude","get","attributeName","getGeometrySize","Array","isArray","subPath","numPoints","getPathLength","isClosed","updateGeometryAttributes","context","geometrySize","vertexStart","_updateSegmentTypes","_updatePositions","isPathClosed","fill","p","i","ptIndex","getPointOnPath","length","index","target","loop","lastPointIndex"],"sources":["../../../src/path-layer/path-tesselator.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Tesselator} from '@deck.gl/core';\nimport {normalizePath} from './path';\n\nconst START_CAP = 1;\nconst END_CAP = 2;\nconst INVALID = 4;\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PathTesselator extends Tesselator {\n  constructor(opts) {\n    super({\n      ...opts,\n      attributes: {\n        // Padding covers shaderAttributes for last segment in largest case fp64\n        // additional vertex + hi & low parts, 3 * 6\n        positions: {\n          size: 3,\n          padding: 18,\n          initialize: true,\n          type: opts.fp64 ? Float64Array : Float32Array\n        },\n        segmentTypes: {size: 1, type: Uint8ClampedArray}\n      }\n    });\n  }\n\n  getGeometryFromBuffer(buffer) {\n    if (this.normalize) {\n      return super.getGeometryFromBuffer(buffer);\n    }\n    // we don't need to read the positions if no normalization\n    return () => null;\n  }\n\n  normalizeGeometry(path) {\n    if (this.normalize) {\n      return normalizePath(path, this.positionSize, this.opts.resolution, this.opts.wrapLongitude);\n    }\n    return path;\n  }\n\n  /* Getters */\n  get(attributeName) {\n    return this.attributes[attributeName];\n  }\n\n  /* Implement base Tesselator interface */\n  getGeometrySize(path) {\n    if (Array.isArray(path[0])) {\n      let size = 0;\n      for (const subPath of path) {\n        size += this.getGeometrySize(subPath);\n      }\n      return size;\n    }\n    const numPoints = this.getPathLength(path);\n    if (numPoints < 2) {\n      // invalid path\n      return 0;\n    }\n    if (this.isClosed(path)) {\n      // minimum 3 vertices\n      return numPoints < 3 ? 0 : numPoints + 2;\n    }\n    return numPoints;\n  }\n\n  updateGeometryAttributes(path, context) {\n    if (context.geometrySize === 0) {\n      return;\n    }\n    if (path && Array.isArray(path[0])) {\n      for (const subPath of path) {\n        const geometrySize = this.getGeometrySize(subPath);\n        context.geometrySize = geometrySize;\n        this.updateGeometryAttributes(subPath, context);\n        context.vertexStart += geometrySize;\n      }\n    } else {\n      this._updateSegmentTypes(path, context);\n      this._updatePositions(path, context);\n    }\n  }\n\n  _updateSegmentTypes(path, context) {\n    const {segmentTypes} = this.attributes;\n    const isPathClosed = this.isClosed(path);\n    const {vertexStart, geometrySize} = context;\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    segmentTypes.fill(0, vertexStart, vertexStart + geometrySize);\n    if (isPathClosed) {\n      segmentTypes[vertexStart] = INVALID;\n      segmentTypes[vertexStart + geometrySize - 2] = INVALID;\n    } else {\n      segmentTypes[vertexStart] += START_CAP;\n      segmentTypes[vertexStart + geometrySize - 2] += END_CAP;\n    }\n    segmentTypes[vertexStart + geometrySize - 1] = INVALID;\n  }\n\n  _updatePositions(path, context) {\n    const {positions} = this.attributes;\n    if (!positions) {\n      return;\n    }\n    const {vertexStart, geometrySize} = context;\n    const p = new Array(3);\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    for (let i = vertexStart, ptIndex = 0; ptIndex < geometrySize; i++, ptIndex++) {\n      this.getPointOnPath(path, ptIndex, p);\n      positions[i * 3] = p[0];\n      positions[i * 3 + 1] = p[1];\n      positions[i * 3 + 2] = p[2];\n    }\n  }\n\n  /* Utilities */\n  // Returns the number of points in the path\n  getPathLength(path) {\n    return path.length / this.positionSize;\n  }\n\n  // Returns a point on the path at the specified index\n  getPointOnPath(path, index, target = []) {\n    const {positionSize} = this;\n    if (index * positionSize >= path.length) {\n      // loop\n      index += 1 - path.length / positionSize;\n    }\n    const i = index * positionSize;\n    target[0] = path[i];\n    target[1] = path[i + 1];\n    target[2] = (positionSize === 3 && path[i + 2]) || 0;\n    return target;\n  }\n\n  // Returns true if the first and last points are identical\n  isClosed(path) {\n    if (!this.normalize) {\n      return this.opts.loop;\n    }\n    const {positionSize} = this;\n    const lastPointIndex = path.length - positionSize;\n    return (\n      path[0] === path[lastPointIndex] &&\n      path[1] === path[lastPointIndex + 1] &&\n      (positionSize === 2 || path[2] === path[lastPointIndex + 2])\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}