{"ast":null,"code":"const DEFAULT_CHUNK_SIZE = 256 * 1024;\nexport function* makeStringIterator(string, options) {\n  const chunkSize = (options === null || options === void 0 ? void 0 : options.chunkSize) || DEFAULT_CHUNK_SIZE;\n  let offset = 0;\n  const textEncoder = new TextEncoder();\n\n  while (offset < string.length) {\n    const chunkLength = Math.min(string.length - offset, chunkSize);\n    const chunk = string.slice(offset, offset + chunkLength);\n    offset += chunkLength;\n    yield textEncoder.encode(chunk);\n  }\n}","map":{"version":3,"mappings":"AAEA,MAAMA,kBAAkB,GAAG,MAAM,IAAjC;AAQA,OAAO,UAAUC,kBAAV,CACLC,MADK,EAELC,OAFK,EAGkB;EACvB,MAAMC,SAAS,GAAG,QAAO,SAAPD,WAAO,WAAPA,mBAAO,CAAEC,SAAT,KAAsBJ,kBAAxC;EAEA,IAAIK,MAAM,GAAG,CAAb;EACA,MAAMC,WAAW,GAAG,IAAIC,WAAJ,EAApB;;EACA,OAAOF,MAAM,GAAGH,MAAM,CAACM,MAAvB,EAA+B;IAE7B,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAALD,CAASR,MAAM,CAACM,MAAPN,GAAgBG,MAAzBK,EAAiCN,SAAjCM,CAApB;IACA,MAAME,KAAK,GAAGV,MAAM,CAACW,KAAPX,CAAaG,MAAbH,EAAqBG,MAAM,GAAGI,WAA9BP,CAAd;IACAG,MAAM,IAAII,WAAVJ;IAGA,MAAMC,WAAW,CAACQ,MAAZR,CAAmBM,KAAnBN,CAAN;EACD;AACF","names":["DEFAULT_CHUNK_SIZE","makeStringIterator","string","options","chunkSize","offset","textEncoder","TextEncoder","length","chunkLength","Math","min","chunk","slice","encode"],"sources":["../../../../src/iterators/make-iterator/make-string-iterator.ts"],"sourcesContent":["import type {IteratorOptions} from './make-iterator';\n\nconst DEFAULT_CHUNK_SIZE = 256 * 1024;\n\n/**\n * Returns an iterator that breaks a big string into chunks and yields them one-by-one as ArrayBuffers\n * @param blob string to iterate over\n * @param options\n * @param options.chunkSize\n */\nexport function* makeStringIterator(\n  string: string,\n  options?: IteratorOptions\n): Iterable<ArrayBuffer> {\n  const chunkSize = options?.chunkSize || DEFAULT_CHUNK_SIZE;\n\n  let offset = 0;\n  const textEncoder = new TextEncoder();\n  while (offset < string.length) {\n    // Create a chunk of the right size\n    const chunkLength = Math.min(string.length - offset, chunkSize);\n    const chunk = string.slice(offset, offset + chunkLength);\n    offset += chunkLength;\n\n    // yield an ArrayBuffer chunk\n    yield textEncoder.encode(chunk);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}