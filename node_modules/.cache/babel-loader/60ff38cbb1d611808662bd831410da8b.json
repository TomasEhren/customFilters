{"ast":null,"code":"// int-numberformat dependencies (support for ios v13)\nimport '@formatjs/intl-locale/polyfill';\nimport '@formatjs/intl-getcanonicallocales/polyfill'; // int-pluralrules dependencies (support for ios v12)\n\nimport '@formatjs/intl-pluralrules/polyfill';\nimport '@formatjs/intl-pluralrules/locale-data/en';\n/*\n  Note: `notation` & `compactDisplay` properties are not supported yet by Safari.\n  Those require the use of a polyfill: https://www.npmjs.com/package/@formatjs/intl-numberformat\n*/\n\nimport '@formatjs/intl-numberformat/polyfill';\nimport '@formatjs/intl-numberformat/locale-data/en';\nconst DEFAULT_LOCALE = 'en-US';\nconst CIRCLE_SVG = `<svg width=\"10px\" height=\"10px\" fill=\"#47db99\" viewBox=\"0 0 10 10\" xmlns=\"http://www.w3.org/2000/svg\">\n  <circle cx=\"5\" cy=\"5\" r=\"5\"/>\n</svg>`;\nexport const currencyFormatter = value => {\n  const _value = parseLogicalOperation(value);\n\n  return {\n    prefix: `${_value.operation} $`,\n    value: Intl.NumberFormat(DEFAULT_LOCALE, {\n      maximumFractionDigits: 2,\n      minimumFractionDigits: 2,\n      notation: 'compact',\n      compactDisplay: 'short'\n    }).format(_value.value)\n  };\n};\nexport const numberFormatter = value => {\n  const _value = parseLogicalOperation(value);\n\n  return _value.operation + Intl.NumberFormat(DEFAULT_LOCALE, {\n    maximumFractionDigits: 1,\n    minimumFractionDigits: 0,\n    notation: 'compact',\n    compactDisplay: 'short'\n  }).format(_value.value);\n};\nexport const intervalsFormatter = (value, dataIndex, ticks) => {\n  const _value = numberFormatter(value);\n\n  if (!ticks || dataIndex === undefined) return _value;\n  const intervals = moneyInterval(dataIndex, ticks);\n  return `${intervals} <br/> ${CIRCLE_SVG} ${_value}`;\n};\n\nconst parseLogicalOperation = value => {\n  if (!isNaN(value)) return {\n    value,\n    operation: ''\n  };\n\n  try {\n    // To allow formatting even values after a comparison operator\n    const numberWithComparisonOperators = /([<>]=?)[^$]?(\\d+)/gm; // eg. < 2, <2, >= 3\n\n    const regExp = new RegExp(numberWithComparisonOperators);\n    const match = regExp.exec(value);\n    let operation;\n\n    if (match) {\n      operation = match[1];\n      value = Number(match[2]);\n    }\n\n    return isNaN(value) ? {\n      value: 0,\n      operation: ''\n    } : {\n      value,\n      operation\n    };\n  } catch {\n    throw new Error(`You are using a numberFormatter on a not valid value: ${value}`);\n  }\n};\n\nconst moneyInterval = (dataIndex, ticks) => {\n  const isFirst = dataIndex === 0;\n\n  try {\n    if (isFirst || dataIndex === ticks.length) {\n      const comparison = isFirst ? '<' : '≥';\n      const formattedValue = isFirst ? currencyFormatter(ticks[dataIndex]) : currencyFormatter(ticks[dataIndex - 1]);\n      return `${comparison} ${formattedValue.prefix}${formattedValue.value}`;\n    } else {\n      dataIndex = dataIndex - 1;\n      const prevTick = currencyFormatter(ticks[dataIndex]);\n      const nextTick = currencyFormatter(ticks[dataIndex + 1]);\n      return `${prevTick.prefix}${prevTick.value} — ${nextTick.prefix}${nextTick.value}`;\n    }\n  } catch {\n    throw new Error(`You are using an \"intervalsFormatter\" on a not valid index: ${dataIndex} & for the ticks ${ticks}`);\n  }\n};","map":{"version":3,"names":["DEFAULT_LOCALE","CIRCLE_SVG","currencyFormatter","value","_value","parseLogicalOperation","prefix","operation","Intl","NumberFormat","maximumFractionDigits","minimumFractionDigits","notation","compactDisplay","format","numberFormatter","intervalsFormatter","dataIndex","ticks","undefined","intervals","moneyInterval","isNaN","numberWithComparisonOperators","regExp","RegExp","match","exec","Number","Error","isFirst","length","comparison","formattedValue","prevTick","nextTick"],"sources":["/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/src/utils/formatter.js"],"sourcesContent":["// int-numberformat dependencies (support for ios v13)\nimport '@formatjs/intl-locale/polyfill';\nimport '@formatjs/intl-getcanonicallocales/polyfill';\n\n// int-pluralrules dependencies (support for ios v12)\nimport '@formatjs/intl-pluralrules/polyfill';\nimport '@formatjs/intl-pluralrules/locale-data/en';\n\n/*\n  Note: `notation` & `compactDisplay` properties are not supported yet by Safari.\n  Those require the use of a polyfill: https://www.npmjs.com/package/@formatjs/intl-numberformat\n*/\nimport '@formatjs/intl-numberformat/polyfill';\nimport '@formatjs/intl-numberformat/locale-data/en';\n\nconst DEFAULT_LOCALE = 'en-US';\nconst CIRCLE_SVG = `<svg width=\"10px\" height=\"10px\" fill=\"#47db99\" viewBox=\"0 0 10 10\" xmlns=\"http://www.w3.org/2000/svg\">\n  <circle cx=\"5\" cy=\"5\" r=\"5\"/>\n</svg>`;\n\nexport const currencyFormatter = (value) => {\n  const _value = parseLogicalOperation(value);\n  return {\n    prefix: `${_value.operation} $`,\n    value: Intl.NumberFormat(DEFAULT_LOCALE, {\n      maximumFractionDigits: 2,\n      minimumFractionDigits: 2,\n      notation: 'compact',\n      compactDisplay: 'short',\n    }).format(_value.value),\n  };\n};\n\nexport const numberFormatter = (value) => {\n  const _value = parseLogicalOperation(value);\n  return (\n    _value.operation +\n    Intl.NumberFormat(DEFAULT_LOCALE, {\n      maximumFractionDigits: 1,\n      minimumFractionDigits: 0,\n      notation: 'compact',\n      compactDisplay: 'short',\n    }).format(_value.value)\n  );\n};\n\nexport const intervalsFormatter = (value, dataIndex, ticks) => {\n  const _value = numberFormatter(value);\n  if (!ticks || dataIndex === undefined) return _value;\n  const intervals = moneyInterval(dataIndex, ticks);\n  return `${intervals} <br/> ${CIRCLE_SVG} ${_value}`;\n};\n\nconst parseLogicalOperation = (value) => {\n  if (!isNaN(value)) return { value, operation: '' };\n\n  try {\n    // To allow formatting even values after a comparison operator\n    const numberWithComparisonOperators = /([<>]=?)[^$]?(\\d+)/gm; // eg. < 2, <2, >= 3\n    const regExp = new RegExp(numberWithComparisonOperators);\n    const match = regExp.exec(value);\n\n    let operation;\n    if (match) {\n      operation = match[1];\n      value = Number(match[2]);\n    }\n\n    return isNaN(value) ? { value: 0, operation: '' } : { value, operation };\n  } catch {\n    throw new Error(`You are using a numberFormatter on a not valid value: ${value}`);\n  }\n};\n\nconst moneyInterval = (dataIndex, ticks) => {\n  const isFirst = dataIndex === 0;\n  try {\n    if (isFirst || dataIndex === ticks.length) {\n      const comparison = isFirst ? '<' : '≥';\n      const formattedValue = isFirst\n        ? currencyFormatter(ticks[dataIndex])\n        : currencyFormatter(ticks[dataIndex - 1]);\n      return `${comparison} ${formattedValue.prefix}${formattedValue.value}`;\n    } else {\n      dataIndex = dataIndex - 1;\n      const prevTick = currencyFormatter(ticks[dataIndex]);\n      const nextTick = currencyFormatter(ticks[dataIndex + 1]);\n      return `${prevTick.prefix}${prevTick.value} — ${nextTick.prefix}${nextTick.value}`;\n    }\n  } catch {\n    throw new Error(\n      `You are using an \"intervalsFormatter\" on a not valid index: ${dataIndex} & for the ticks ${ticks}`\n    );\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}