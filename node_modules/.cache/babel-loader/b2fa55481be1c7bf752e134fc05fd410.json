{"ast":null,"code":"import { projectPosition } from '../../shaderlib/project/project-functions';\nimport { COORDINATE_SYSTEM } from '../../lib';\nconst DEFAULT_LIGHT_COLOR = [255, 255, 255];\nconst DEFAULT_LIGHT_INTENSITY = 1.0;\nconst DEFAULT_ATTENUATION = [0, 0, 1];\nconst DEFAULT_LIGHT_POSITION = [0.0, 0.0, 1.0];\nlet idCount = 0;\nexport class PointLight {\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      color = DEFAULT_LIGHT_COLOR\n    } = props;\n    const {\n      intensity = DEFAULT_LIGHT_INTENSITY\n    } = props;\n    const {\n      position = DEFAULT_LIGHT_POSITION\n    } = props;\n    this.id = props.id || \"point-\".concat(idCount++);\n    this.color = color;\n    this.intensity = intensity;\n    this.type = 'point';\n    this.position = position;\n    this.attenuation = getAttenuation(props);\n    this.projectedLight = { ...this\n    };\n  }\n\n  getProjectedLight(_ref) {\n    let {\n      layer\n    } = _ref;\n    const {\n      projectedLight\n    } = this;\n    const viewport = layer.context.viewport;\n    const {\n      coordinateSystem,\n      coordinateOrigin\n    } = layer.props;\n    const position = projectPosition(this.position, {\n      viewport,\n      coordinateSystem,\n      coordinateOrigin,\n      fromCoordinateSystem: viewport.isGeospatial ? COORDINATE_SYSTEM.LNGLAT : COORDINATE_SYSTEM.CARTESIAN,\n      fromCoordinateOrigin: [0, 0, 0]\n    });\n    projectedLight.color = this.color;\n    projectedLight.intensity = this.intensity;\n    projectedLight.position = position;\n    return projectedLight;\n  }\n\n}\n\nfunction getAttenuation(props) {\n  if ('attenuation' in props) {\n    return props.attenuation;\n  }\n\n  if ('intensity' in props) {\n    return [0, 0, props.intensity];\n  }\n\n  return DEFAULT_ATTENUATION;\n}","map":{"version":3,"mappings":"AAAA,SAAQA,eAAR,QAA8B,2CAA9B;AACA,SAAQC,iBAAR,QAAgC,WAAhC;AAEA,MAAMC,mBAAmB,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA5B;AACA,MAAMC,uBAAuB,GAAG,GAAhC;AACA,MAAMC,mBAAmB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA5B;AACA,MAAMC,sBAAsB,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA/B;AAEA,IAAIC,OAAO,GAAG,CAAd;AAEA,OAAO,MAAMC,UAAN,CAAiB;EACtBC,WAAW,GAAa;IAAA,IAAZC,KAAY,uEAAJ,EAAI;IACtB,MAAM;MAACC,KAAK,GAAGR;IAAT,IAAgCO,KAAtC;IACA,MAAM;MAACE,SAAS,GAAGR;IAAb,IAAwCM,KAA9C;IACA,MAAM;MAACG,QAAQ,GAAGP;IAAZ,IAAsCI,KAA5C;IAEA,KAAKI,EAAL,GAAUJ,KAAK,CAACI,EAANJ,oBAAqBH,OAAO,EAA5B,CAAV;IACA,KAAKI,KAAL,GAAaA,KAAb;IACA,KAAKC,SAAL,GAAiBA,SAAjB;IACA,KAAKG,IAAL,GAAY,OAAZ;IACA,KAAKF,QAAL,GAAgBA,QAAhB;IACA,KAAKG,WAAL,GAAmBC,cAAc,CAACP,KAAD,CAAjC;IACA,KAAKQ,cAAL,GAAsB,EAAC,GAAG;IAAJ,CAAtB;EACD;;EAEDC,iBAAiB,OAAU;IAAA,IAAT;MAACC;IAAD,CAAS;IACzB,MAAM;MAACF;IAAD,IAAmB,IAAzB;IACA,MAAMG,QAAQ,GAAGD,KAAK,CAACE,OAANF,CAAcC,QAA/B;IACA,MAAM;MAACE,gBAAD;MAAmBC;IAAnB,IAAuCJ,KAAK,CAACV,KAAnD;IACA,MAAMG,QAAQ,GAAGZ,eAAe,CAAC,KAAKY,QAAN,EAAgB;MAC9CQ,QAD8C;MAE9CE,gBAF8C;MAG9CC,gBAH8C;MAI9CC,oBAAoB,EAAEJ,QAAQ,CAACK,YAATL,GAClBnB,iBAAiB,CAACyB,MADAN,GAElBnB,iBAAiB,CAAC0B,SANwB;MAO9CC,oBAAoB,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;IAPwB,CAAhB,CAAhC;IASAX,cAAc,CAACP,KAAfO,GAAuB,KAAKP,KAA5BO;IACAA,cAAc,CAACN,SAAfM,GAA2B,KAAKN,SAAhCM;IACAA,cAAc,CAACL,QAAfK,GAA0BL,QAA1BK;IACA,OAAOA,cAAP;EACD;;AAhCqB;;AAmCxB,SAASD,cAAT,CAAwBP,KAAxB,EAA+B;EAC7B,IAAI,iBAAiBA,KAArB,EAA4B;IAC1B,OAAOA,KAAK,CAACM,WAAb;EACD;;EACD,IAAI,eAAeN,KAAnB,EAA0B;IACxB,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAOA,KAAK,CAACE,SAAb,CAAP;EACD;;EACD,OAAOP,mBAAP;AACD","names":["projectPosition","COORDINATE_SYSTEM","DEFAULT_LIGHT_COLOR","DEFAULT_LIGHT_INTENSITY","DEFAULT_ATTENUATION","DEFAULT_LIGHT_POSITION","idCount","PointLight","constructor","props","color","intensity","position","id","type","attenuation","getAttenuation","projectedLight","getProjectedLight","layer","viewport","context","coordinateSystem","coordinateOrigin","fromCoordinateSystem","isGeospatial","LNGLAT","CARTESIAN","fromCoordinateOrigin"],"sources":["../../../../src/effects/lighting/point-light.js"],"sourcesContent":["import {projectPosition} from '../../shaderlib/project/project-functions';\nimport {COORDINATE_SYSTEM} from '../../lib';\n\nconst DEFAULT_LIGHT_COLOR = [255, 255, 255];\nconst DEFAULT_LIGHT_INTENSITY = 1.0;\nconst DEFAULT_ATTENUATION = [0, 0, 1];\nconst DEFAULT_LIGHT_POSITION = [0.0, 0.0, 1.0];\n\nlet idCount = 0;\n\nexport class PointLight {\n  constructor(props = {}) {\n    const {color = DEFAULT_LIGHT_COLOR} = props;\n    const {intensity = DEFAULT_LIGHT_INTENSITY} = props;\n    const {position = DEFAULT_LIGHT_POSITION} = props;\n\n    this.id = props.id || `point-${idCount++}`;\n    this.color = color;\n    this.intensity = intensity;\n    this.type = 'point';\n    this.position = position;\n    this.attenuation = getAttenuation(props);\n    this.projectedLight = {...this};\n  }\n\n  getProjectedLight({layer}) {\n    const {projectedLight} = this;\n    const viewport = layer.context.viewport;\n    const {coordinateSystem, coordinateOrigin} = layer.props;\n    const position = projectPosition(this.position, {\n      viewport,\n      coordinateSystem,\n      coordinateOrigin,\n      fromCoordinateSystem: viewport.isGeospatial\n        ? COORDINATE_SYSTEM.LNGLAT\n        : COORDINATE_SYSTEM.CARTESIAN,\n      fromCoordinateOrigin: [0, 0, 0]\n    });\n    projectedLight.color = this.color;\n    projectedLight.intensity = this.intensity;\n    projectedLight.position = position;\n    return projectedLight;\n  }\n}\n\nfunction getAttenuation(props) {\n  if ('attenuation' in props) {\n    return props.attenuation;\n  }\n  if ('intensity' in props) {\n    return [0, 0, props.intensity];\n  }\n  return DEFAULT_ATTENUATION;\n}\n"]},"metadata":{},"sourceType":"module"}