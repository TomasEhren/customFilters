{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { deepEqual } from '../utils/deep-equal';\nimport log from '../utils/log';\nimport { flatten } from '../utils/flatten';\n\nvar ViewManager = /*#__PURE__*/function () {\n  function ViewManager() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ViewManager);\n\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {};\n    this.controllers = {};\n    this.timeline = props.timeline;\n    this._viewports = [];\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = true;\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractionStateChange: props.onInteractionStateChange\n    };\n    Object.seal(this);\n    this.setProps(props);\n  }\n\n  _createClass(ViewManager, [{\n    key: \"finalize\",\n    value: function finalize() {\n      for (var key in this.controllers) {\n        if (this.controllers[key]) {\n          this.controllers[key].finalize();\n        }\n      }\n\n      this.controllers = {};\n    }\n  }, {\n    key: \"needsRedraw\",\n    value: function needsRedraw() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        clearRedrawFlags: false\n      };\n      var redraw = this._needsRedraw;\n\n      if (opts.clearRedrawFlags) {\n        this._needsRedraw = false;\n      }\n\n      return redraw;\n    }\n  }, {\n    key: \"setNeedsUpdate\",\n    value: function setNeedsUpdate(reason) {\n      this._needsUpdate = this._needsUpdate || reason;\n      this._needsRedraw = this._needsRedraw || reason;\n    }\n  }, {\n    key: \"updateViewStates\",\n    value: function updateViewStates() {\n      for (var viewId in this.controllers) {\n        var controller = this.controllers[viewId];\n\n        if (controller) {\n          controller.updateTransition();\n        }\n      }\n    }\n  }, {\n    key: \"getViewports\",\n    value: function getViewports(rect) {\n      if (rect) {\n        return this._viewports.filter(function (viewport) {\n          return viewport.containsPixel(rect);\n        });\n      }\n\n      return this._viewports;\n    }\n  }, {\n    key: \"getViews\",\n    value: function getViews() {\n      var viewMap = {};\n      this.views.forEach(function (view) {\n        viewMap[view.id] = view;\n      });\n      return viewMap;\n    }\n  }, {\n    key: \"getView\",\n    value: function getView(viewOrViewId) {\n      return typeof viewOrViewId === 'string' ? this.views.find(function (view) {\n        return view.id === viewOrViewId;\n      }) : viewOrViewId;\n    }\n  }, {\n    key: \"getViewState\",\n    value: function getViewState(viewId) {\n      var view = this.getView(viewId);\n      var viewState = view && this.viewState[view.getViewStateId()] || this.viewState;\n      return view ? view.filterViewState(viewState) : viewState;\n    }\n  }, {\n    key: \"getViewport\",\n    value: function getViewport(viewId) {\n      return this._viewportMap[viewId];\n    }\n  }, {\n    key: \"unproject\",\n    value: function unproject(xyz, opts) {\n      var viewports = this.getViewports();\n      var pixel = {\n        x: xyz[0],\n        y: xyz[1]\n      };\n\n      for (var i = viewports.length - 1; i >= 0; --i) {\n        var viewport = viewports[i];\n\n        if (viewport.containsPixel(pixel)) {\n          var p = xyz.slice();\n          p[0] -= viewport.x;\n          p[1] -= viewport.y;\n          return viewport.unproject(p, opts);\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      if ('views' in props) {\n        this._setViews(props.views);\n      }\n\n      if ('viewState' in props) {\n        this._setViewState(props.viewState);\n      }\n\n      if ('width' in props || 'height' in props) {\n        this._setSize(props.width, props.height);\n      }\n\n      if (!this._isUpdating) {\n        this._update();\n      }\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      this._isUpdating = true;\n\n      if (this._needsUpdate) {\n        this._needsUpdate = false;\n\n        this._rebuildViewports();\n      }\n\n      if (this._needsUpdate) {\n        this._needsUpdate = false;\n\n        this._rebuildViewports();\n      }\n\n      this._isUpdating = false;\n    }\n  }, {\n    key: \"_setSize\",\n    value: function _setSize(width, height) {\n      if (width !== this.width || height !== this.height) {\n        this.width = width;\n        this.height = height;\n        this.setNeedsUpdate('Size changed');\n      }\n    }\n  }, {\n    key: \"_setViews\",\n    value: function _setViews(views) {\n      views = flatten(views, Boolean);\n\n      var viewsChanged = this._diffViews(views, this.views);\n\n      if (viewsChanged) {\n        this.setNeedsUpdate('views changed');\n      }\n\n      this.views = views;\n    }\n  }, {\n    key: \"_setViewState\",\n    value: function _setViewState(viewState) {\n      if (viewState) {\n        var viewStateChanged = !deepEqual(viewState, this.viewState);\n\n        if (viewStateChanged) {\n          this.setNeedsUpdate('viewState changed');\n        }\n\n        this.viewState = viewState;\n      } else {\n        log.warn('missing `viewState` or `initialViewState`')();\n      }\n    }\n  }, {\n    key: \"_onViewStateChange\",\n    value: function _onViewStateChange(viewId, event) {\n      event.viewId = viewId;\n\n      if (this._eventCallbacks.onViewStateChange) {\n        this._eventCallbacks.onViewStateChange(event);\n      }\n    }\n  }, {\n    key: \"_createController\",\n    value: function _createController(view, props) {\n      var Controller = props.type;\n      var controller = new Controller(_objectSpread({\n        timeline: this.timeline,\n        eventManager: this._eventManager,\n        onViewStateChange: this._onViewStateChange.bind(this, props.id),\n        onStateChange: this._eventCallbacks.onInteractionStateChange,\n        makeViewport: function makeViewport(viewState) {\n          return view._getViewport(viewState, {\n            width: viewState.width,\n            height: viewState.height\n          });\n        }\n      }, props));\n      return controller;\n    }\n  }, {\n    key: \"_updateController\",\n    value: function _updateController(view, viewState, viewport, controller) {\n      var controllerProps = view.controller;\n\n      if (controllerProps) {\n        controllerProps = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, viewState), view.props), controllerProps), {}, {\n          id: view.id,\n          x: viewport.x,\n          y: viewport.y,\n          width: viewport.width,\n          height: viewport.height\n        });\n\n        if (controller) {\n          controller.setProps(controllerProps);\n        } else {\n          controller = this._createController(view, controllerProps);\n        }\n\n        return controller;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_rebuildViewports\",\n    value: function _rebuildViewports() {\n      var width = this.width,\n          height = this.height,\n          views = this.views;\n      var oldControllers = this.controllers;\n      this._viewports = [];\n      this.controllers = {};\n      var invalidateControllers = false;\n\n      for (var i = views.length; i--;) {\n        var view = views[i];\n        var viewState = this.getViewState(view);\n        var viewport = view.makeViewport({\n          width: width,\n          height: height,\n          viewState: viewState\n        });\n        var oldController = oldControllers[view.id];\n\n        if (view.controller && !oldController) {\n          invalidateControllers = true;\n        }\n\n        if ((invalidateControllers || !view.controller) && oldController) {\n          oldController.finalize();\n          oldController = null;\n        }\n\n        this.controllers[view.id] = this._updateController(view, viewState, viewport, oldController);\n\n        this._viewports.unshift(viewport);\n      }\n\n      for (var id in oldControllers) {\n        if (oldControllers[id] && !this.controllers[id]) {\n          oldControllers[id].finalize();\n        }\n      }\n\n      this._buildViewportMap();\n    }\n  }, {\n    key: \"_buildViewportMap\",\n    value: function _buildViewportMap() {\n      var _this = this;\n\n      this._viewportMap = {};\n\n      this._viewports.forEach(function (viewport) {\n        if (viewport.id) {\n          _this._viewportMap[viewport.id] = _this._viewportMap[viewport.id] || viewport;\n        }\n      });\n    }\n  }, {\n    key: \"_diffViews\",\n    value: function _diffViews(newViews, oldViews) {\n      if (newViews.length !== oldViews.length) {\n        return true;\n      }\n\n      return newViews.some(function (_, i) {\n        return !newViews[i].equals(oldViews[i]);\n      });\n    }\n  }]);\n\n  return ViewManager;\n}();\n\nexport { ViewManager as default };","map":{"version":3,"mappings":"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","names":["deepEqual","log","flatten","ViewManager","constructor","props","views","width","height","viewState","controllers","timeline","_viewports","_viewportMap","_isUpdating","_needsRedraw","_needsUpdate","_eventManager","eventManager","_eventCallbacks","onViewStateChange","onInteractionStateChange","Object","seal","setProps","finalize","key","needsRedraw","opts","clearRedrawFlags","redraw","setNeedsUpdate","reason","updateViewStates","viewId","controller","updateTransition","getViewports","rect","filter","viewport","containsPixel","getViews","viewMap","forEach","view","id","getView","viewOrViewId","find","getViewState","getViewStateId","filterViewState","getViewport","unproject","xyz","viewports","pixel","x","y","i","length","p","slice","_setViews","_setViewState","_setSize","_update","_rebuildViewports","Boolean","viewsChanged","_diffViews","viewStateChanged","warn","_onViewStateChange","event","_createController","Controller","type","bind","onStateChange","makeViewport","_getViewport","_updateController","controllerProps","oldControllers","invalidateControllers","oldController","unshift","_buildViewportMap","newViews","oldViews","some","_","equals"],"sources":["../../../src/lib/view-manager.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {deepEqual} from '../utils/deep-equal';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\n\nexport default class ViewManager {\n  constructor(props = {}) {\n    // List of view descriptors, gets re-evaluated when width/height changes\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {};\n    this.controllers = {};\n    this.timeline = props.timeline;\n\n    this._viewports = []; // Generated viewports\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = true;\n\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractionStateChange: props.onInteractionStateChange\n    };\n\n    Object.seal(this);\n\n    // Init with default map viewport\n    this.setProps(props);\n  }\n\n  finalize() {\n    for (const key in this.controllers) {\n      if (this.controllers[key]) {\n        this.controllers[key].finalize();\n      }\n    }\n    this.controllers = {};\n  }\n\n  // Check if a redraw is needed\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Checks each viewport for transition updates\n  updateViewStates() {\n    for (const viewId in this.controllers) {\n      const controller = this.controllers[viewId];\n      if (controller) {\n        controller.updateTransition();\n      }\n    }\n  }\n\n  /** Get a set of viewports for a given width and height\n   * TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props\n   * @param rect (object, optional) - filter the viewports\n   *   + not provided - return all viewports\n   *   + {x, y} - only return viewports that contain this pixel\n   *   + {x, y, width, height} - only return viewports that overlap with this rectangle\n   */\n  getViewports(rect) {\n    if (rect) {\n      return this._viewports.filter(viewport => viewport.containsPixel(rect));\n    }\n    return this._viewports;\n  }\n\n  getViews() {\n    const viewMap = {};\n    this.views.forEach(view => {\n      viewMap[view.id] = view;\n    });\n    return viewMap;\n  }\n\n  // Resolves a viewId string to a View, if already a View returns it.\n  getView(viewOrViewId) {\n    return typeof viewOrViewId === 'string'\n      ? this.views.find(view => view.id === viewOrViewId)\n      : viewOrViewId;\n  }\n\n  // Returns the viewState for a specific viewId. Matches the viewState by\n  // 1. view.viewStateId\n  // 2. view.id\n  // 3. root viewState\n  // then applies the view's filter if any\n  getViewState(viewId) {\n    const view = this.getView(viewId);\n    // Backward compatibility: view state for single view\n    const viewState = (view && this.viewState[view.getViewStateId()]) || this.viewState;\n    return view ? view.filterViewState(viewState) : viewState;\n  }\n\n  getViewport(viewId) {\n    return this._viewportMap[viewId];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, opts) {\n    const viewports = this.getViewports();\n    const pixel = {x: xyz[0], y: xyz[1]};\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.containsPixel(pixel)) {\n        const p = xyz.slice();\n        p[0] -= viewport.x;\n        p[1] -= viewport.y;\n        return viewport.unproject(p, opts);\n      }\n    }\n    return null;\n  }\n\n  setProps(props) {\n    if ('views' in props) {\n      this._setViews(props.views);\n    }\n\n    // TODO - support multiple view states\n    if ('viewState' in props) {\n      this._setViewState(props.viewState);\n    }\n\n    if ('width' in props || 'height' in props) {\n      this._setSize(props.width, props.height);\n    }\n\n    // Important: avoid invoking _update() inside itself\n    // Nested updates result in unexpected side effects inside _rebuildViewports()\n    // when using auto control in pure-js\n    if (!this._isUpdating) {\n      this._update();\n    }\n  }\n\n  _update() {\n    this._isUpdating = true;\n\n    // Only rebuild viewports if the update flag is set\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    // If viewport transition(s) are triggered during viewports update, controller(s)\n    // will immediately call `onViewStateChange` which calls `viewManager.setProps` again.\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    this._isUpdating = false;\n  }\n\n  _setSize(width, height) {\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.setNeedsUpdate('Size changed');\n    }\n  }\n\n  // Update the view descriptor list and set change flag if needed\n  // Does not actually rebuild the `Viewport`s until `getViewports` is called\n  _setViews(views) {\n    views = flatten(views, Boolean);\n\n    const viewsChanged = this._diffViews(views, this.views);\n    if (viewsChanged) {\n      this.setNeedsUpdate('views changed');\n    }\n\n    this.views = views;\n  }\n\n  _setViewState(viewState) {\n    if (viewState) {\n      const viewStateChanged = !deepEqual(viewState, this.viewState);\n\n      if (viewStateChanged) {\n        this.setNeedsUpdate('viewState changed');\n      }\n\n      this.viewState = viewState;\n    } else {\n      log.warn('missing `viewState` or `initialViewState`')();\n    }\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  _onViewStateChange(viewId, event) {\n    event.viewId = viewId;\n    if (this._eventCallbacks.onViewStateChange) {\n      this._eventCallbacks.onViewStateChange(event);\n    }\n  }\n\n  _createController(view, props) {\n    const Controller = props.type;\n\n    const controller = new Controller({\n      timeline: this.timeline,\n      eventManager: this._eventManager,\n      // Set an internal callback that calls the prop callback if provided\n      onViewStateChange: this._onViewStateChange.bind(this, props.id),\n      onStateChange: this._eventCallbacks.onInteractionStateChange,\n      makeViewport: viewState =>\n        view._getViewport(viewState, {\n          width: viewState.width,\n          height: viewState.height\n        }),\n      ...props\n    });\n\n    return controller;\n  }\n\n  _updateController(view, viewState, viewport, controller) {\n    let controllerProps = view.controller;\n    if (controllerProps) {\n      controllerProps = {\n        ...viewState,\n        ...view.props,\n        ...controllerProps,\n        id: view.id,\n        x: viewport.x,\n        y: viewport.y,\n        width: viewport.width,\n        height: viewport.height\n      };\n\n      // TODO - check if view / controller type has changed, and replace the controller\n      if (controller) {\n        controller.setProps(controllerProps);\n      } else {\n        controller = this._createController(view, controllerProps);\n      }\n      return controller;\n    }\n    return null;\n  }\n\n  // Rebuilds viewports from descriptors towards a certain window size\n  _rebuildViewports() {\n    const {width, height, views} = this;\n\n    const oldControllers = this.controllers;\n    this._viewports = [];\n    this.controllers = {};\n\n    let invalidateControllers = false;\n    // Create controllers in reverse order, so that views on top receive events first\n    for (let i = views.length; i--; ) {\n      const view = views[i];\n      const viewState = this.getViewState(view);\n      const viewport = view.makeViewport({width, height, viewState});\n\n      let oldController = oldControllers[view.id];\n      if (view.controller && !oldController) {\n        // When a new controller is added, invalidate all controllers below it so that\n        // events are registered in the correct order\n        invalidateControllers = true;\n      }\n      if ((invalidateControllers || !view.controller) && oldController) {\n        // Remove and reattach invalidated controller\n        oldController.finalize();\n        oldController = null;\n      }\n\n      // Update the controller\n      this.controllers[view.id] = this._updateController(view, viewState, viewport, oldController);\n\n      this._viewports.unshift(viewport);\n    }\n\n    // Remove unused controllers\n    for (const id in oldControllers) {\n      if (oldControllers[id] && !this.controllers[id]) {\n        oldControllers[id].finalize();\n      }\n    }\n\n    this._buildViewportMap();\n  }\n\n  _buildViewportMap() {\n    // Build a view id to view index\n    this._viewportMap = {};\n    this._viewports.forEach(viewport => {\n      if (viewport.id) {\n        // TODO - issue warning if multiple viewports use same id\n        this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;\n      }\n    });\n  }\n\n  // Check if viewport array has changed, returns true if any change\n  // Note that descriptors can be the same\n  _diffViews(newViews, oldViews) {\n    if (newViews.length !== oldViews.length) {\n      return true;\n    }\n\n    return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}