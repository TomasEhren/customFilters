{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { readFeature, classifyRings } from '../../helpers/mapbox-util-functions';\n\nvar VectorTileFeature = /*#__PURE__*/function () {\n  function VectorTileFeature(pbf, end, extent, keys, values) {\n    _classCallCheck(this, VectorTileFeature);\n\n    _defineProperty(this, \"properties\", void 0);\n\n    _defineProperty(this, \"extent\", void 0);\n\n    _defineProperty(this, \"type\", void 0);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"_pbf\", void 0);\n\n    _defineProperty(this, \"_geometry\", void 0);\n\n    _defineProperty(this, \"_keys\", void 0);\n\n    _defineProperty(this, \"_values\", void 0);\n\n    this.properties = {};\n    this.extent = extent;\n    this.type = 0;\n    this.id = null;\n    this._pbf = pbf;\n    this._geometry = -1;\n    this._keys = keys;\n    this._values = values;\n    pbf.readFields(readFeature, this, end);\n  }\n\n  _createClass(VectorTileFeature, [{\n    key: \"loadGeometry\",\n    value: function loadGeometry() {\n      var pbf = this._pbf;\n      pbf.pos = this._geometry;\n      var end = pbf.readVarint() + pbf.pos;\n      var cmd = 1;\n      var length = 0;\n      var x = 0;\n      var y = 0;\n      var lines = [];\n      var line;\n\n      while (pbf.pos < end) {\n        if (length <= 0) {\n          var cmdLen = pbf.readVarint();\n          cmd = cmdLen & 0x7;\n          length = cmdLen >> 3;\n        }\n\n        length--;\n\n        if (cmd === 1 || cmd === 2) {\n          x += pbf.readSVarint();\n          y += pbf.readSVarint();\n\n          if (cmd === 1) {\n            if (line) lines.push(line);\n            line = [];\n          }\n\n          if (line) line.push([x, y]);\n        } else if (cmd === 7) {\n          if (line) {\n            line.push(line[0].slice());\n          }\n        } else {\n          throw new Error(\"unknown command \".concat(cmd));\n        }\n      }\n\n      if (line) lines.push(line);\n      return lines;\n    }\n  }, {\n    key: \"bbox\",\n    value: function bbox() {\n      var pbf = this._pbf;\n      pbf.pos = this._geometry;\n      var end = pbf.readVarint() + pbf.pos;\n      var cmd = 1;\n      var length = 0;\n      var x = 0;\n      var y = 0;\n      var x1 = Infinity;\n      var x2 = -Infinity;\n      var y1 = Infinity;\n      var y2 = -Infinity;\n\n      while (pbf.pos < end) {\n        if (length <= 0) {\n          var cmdLen = pbf.readVarint();\n          cmd = cmdLen & 0x7;\n          length = cmdLen >> 3;\n        }\n\n        length--;\n\n        if (cmd === 1 || cmd === 2) {\n          x += pbf.readSVarint();\n          y += pbf.readSVarint();\n          if (x < x1) x1 = x;\n          if (x > x2) x2 = x;\n          if (y < y1) y1 = y;\n          if (y > y2) y2 = y;\n        } else if (cmd !== 7) {\n          throw new Error(\"unknown command \".concat(cmd));\n        }\n      }\n\n      return [x1, y1, x2, y2];\n    }\n  }, {\n    key: \"_toGeoJSON\",\n    value: function _toGeoJSON(transform) {\n      var coords = this.loadGeometry();\n      var type = VectorTileFeature.types[this.type];\n      var i;\n      var j;\n\n      switch (this.type) {\n        case 1:\n          var points = [];\n\n          for (i = 0; i < coords.length; i++) {\n            points[i] = coords[i][0];\n          }\n\n          coords = points;\n          transform(coords, this);\n          break;\n\n        case 2:\n          for (i = 0; i < coords.length; i++) {\n            transform(coords[i], this);\n          }\n\n          break;\n\n        case 3:\n          coords = classifyRings(coords);\n\n          for (i = 0; i < coords.length; i++) {\n            for (j = 0; j < coords[i].length; j++) {\n              transform(coords[i][j], this);\n            }\n          }\n\n          break;\n      }\n\n      if (coords.length === 1) {\n        coords = coords[0];\n      } else {\n        type = \"Multi\".concat(type);\n      }\n\n      var result = {\n        type: 'Feature',\n        geometry: {\n          type: type,\n          coordinates: coords\n        },\n        properties: this.properties\n      };\n\n      if (this.id !== null) {\n        result.id = this.id;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"toGeoJSON\",\n    value: function toGeoJSON(options) {\n      if (typeof options === 'function') {\n        return this._toGeoJSON(options);\n      }\n\n      var x = options.x,\n          y = options.y,\n          z = options.z;\n      var size = this.extent * Math.pow(2, z);\n      var x0 = this.extent * x;\n      var y0 = this.extent * y;\n\n      function project(line) {\n        for (var j = 0; j < line.length; j++) {\n          var p = line[j];\n          p[0] = (p[0] + x0) * 360 / size - 180;\n          var y2 = 180 - (p[1] + y0) * 360 / size;\n          p[1] = 360 / Math.PI * Math.atan(Math.exp(y2 * Math.PI / 180)) - 90;\n        }\n      }\n\n      return this._toGeoJSON(project);\n    }\n  }], [{\n    key: \"types\",\n    get: function get() {\n      return ['Unknown', 'Point', 'LineString', 'Polygon'];\n    }\n  }]);\n\n  return VectorTileFeature;\n}();\n\nexport { VectorTileFeature as default };","map":{"version":3,"mappings":"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","names":["readFeature","classifyRings","VectorTileFeature","constructor","pbf","end","extent","keys","values","_defineProperty","properties","type","id","_pbf","_geometry","_keys","_values","readFields","loadGeometry","pos","readVarint","cmd","length","x","y","lines","line","cmdLen","readSVarint","push","slice","Error","bbox","x1","Infinity","x2","y1","y2","_toGeoJSON","transform","coords","types","i","j","points","result","geometry","coordinates","toGeoJSON","options","z","size","Math","pow","x0","y0","project","p","PI","atan","exp"],"sources":["../../../../src/lib/mapbox-vector-tile/vector-tile-feature.ts"],"sourcesContent":["// This code is forked from https://github.com/mapbox/vector-tile-js under BSD 3-clause license.\nimport Protobuf from 'pbf';\nimport {MvtMapboxCoordinates, MvtMapboxGeometry} from '../types';\nimport {readFeature, classifyRings} from '../../helpers/mapbox-util-functions';\n\nexport default class VectorTileFeature {\n  properties: {[x: string]: string | number | boolean | null};\n  extent: any;\n  type: number;\n  id: number | null;\n  _pbf: Protobuf;\n  _geometry: number;\n  _keys: string[];\n  _values: (string | number | boolean | null)[];\n  static get types() {\n    return ['Unknown', 'Point', 'LineString', 'Polygon'];\n  }\n\n  constructor(\n    pbf: Protobuf,\n    end: number,\n    extent: any,\n    keys: string[],\n    values: (string | number | boolean | null)[]\n  ) {\n    // Public\n    this.properties = {};\n    this.extent = extent;\n    this.type = 0;\n    this.id = null;\n\n    // Private\n    this._pbf = pbf;\n    this._geometry = -1;\n    this._keys = keys;\n    this._values = values;\n\n    pbf.readFields(readFeature, this, end);\n  }\n\n  // eslint-disable-next-line complexity, max-statements\n  loadGeometry(): MvtMapboxGeometry {\n    const pbf = this._pbf;\n    pbf.pos = this._geometry;\n\n    const end = pbf.readVarint() + pbf.pos;\n    let cmd = 1;\n    let length = 0;\n    let x = 0;\n    let y = 0;\n    const lines: number[][][] = [];\n    let line: number[][] | undefined;\n\n    while (pbf.pos < end) {\n      if (length <= 0) {\n        const cmdLen = pbf.readVarint();\n        cmd = cmdLen & 0x7;\n        length = cmdLen >> 3;\n      }\n\n      length--;\n\n      if (cmd === 1 || cmd === 2) {\n        x += pbf.readSVarint();\n        y += pbf.readSVarint();\n\n        if (cmd === 1) {\n          // moveTo\n          if (line) lines.push(line);\n          line = [];\n        }\n        if (line) line.push([x, y]);\n      } else if (cmd === 7) {\n        // Workaround for https://github.com/mapbox/mapnik-vector-tile/issues/90\n        if (line) {\n          line.push(line[0].slice()); // closePolygon\n        }\n      } else {\n        throw new Error(`unknown command ${cmd}`);\n      }\n    }\n\n    if (line) lines.push(line);\n\n    return lines;\n  }\n\n  // eslint-disable-next-line max-statements\n  bbox() {\n    const pbf = this._pbf;\n    pbf.pos = this._geometry;\n\n    const end = pbf.readVarint() + pbf.pos;\n    let cmd = 1;\n    let length = 0;\n    let x = 0;\n    let y = 0;\n    let x1 = Infinity;\n    let x2 = -Infinity;\n    let y1 = Infinity;\n    let y2 = -Infinity;\n\n    while (pbf.pos < end) {\n      if (length <= 0) {\n        const cmdLen = pbf.readVarint();\n        cmd = cmdLen & 0x7;\n        length = cmdLen >> 3;\n      }\n\n      length--;\n\n      if (cmd === 1 || cmd === 2) {\n        x += pbf.readSVarint();\n        y += pbf.readSVarint();\n        if (x < x1) x1 = x;\n        if (x > x2) x2 = x;\n        if (y < y1) y1 = y;\n        if (y > y2) y2 = y;\n      } else if (cmd !== 7) {\n        throw new Error(`unknown command ${cmd}`);\n      }\n    }\n\n    return [x1, y1, x2, y2];\n  }\n\n  _toGeoJSON(transform) {\n    let coords = this.loadGeometry();\n    let type = VectorTileFeature.types[this.type];\n    let i: number;\n    let j: number;\n\n    // eslint-disable-next-line default-case\n    switch (this.type) {\n      case 1:\n        const points: number[] = [];\n        for (i = 0; i < coords.length; i++) {\n          points[i] = coords[i][0];\n        }\n        coords = points;\n        transform(coords, this);\n        break;\n\n      case 2:\n        for (i = 0; i < coords.length; i++) {\n          transform(coords[i], this);\n        }\n        break;\n\n      case 3:\n        coords = classifyRings(coords);\n        for (i = 0; i < coords.length; i++) {\n          for (j = 0; j < coords[i].length; j++) {\n            transform(coords[i][j], this);\n          }\n        }\n        break;\n    }\n\n    if (coords.length === 1) {\n      coords = coords[0];\n    } else {\n      type = `Multi${type}`;\n    }\n\n    const result: MvtMapboxCoordinates = {\n      type: 'Feature',\n      geometry: {\n        type,\n        coordinates: coords\n      },\n      properties: this.properties\n    };\n\n    if (this.id !== null) {\n      result.id = this.id;\n    }\n\n    return result;\n  }\n\n  toGeoJSON(\n    options: {x: number; y: number; z: number} | ((data: number[], feature: {extent: any}) => void)\n  ): MvtMapboxCoordinates {\n    if (typeof options === 'function') {\n      return this._toGeoJSON(options);\n    }\n    const {x, y, z} = options;\n    const size = this.extent * Math.pow(2, z);\n    const x0 = this.extent * x;\n    const y0 = this.extent * y;\n\n    function project(line: number[]) {\n      for (let j = 0; j < line.length; j++) {\n        const p = line[j];\n        p[0] = ((p[0] + x0) * 360) / size - 180;\n        const y2 = 180 - ((p[1] + y0) * 360) / size;\n        p[1] = (360 / Math.PI) * Math.atan(Math.exp((y2 * Math.PI) / 180)) - 90;\n      }\n    }\n    return this._toGeoJSON(project);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}