{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { withParameters } from '@luma.gl/gltools';\n\nvar Display = /*#__PURE__*/function () {\n  function Display() {\n    _classCallCheck(this, Display);\n\n    this.animationLoop = null;\n  }\n\n  _createClass(Display, [{\n    key: \"getViews\",\n    value: function getViews(options) {\n      var width = options.width,\n          height = options.height;\n      return [{\n        params: {\n          viewport: [0, 0, width, height],\n          scissor: [0, 0, width, height],\n          scissorTest: true\n        }\n      }];\n    }\n  }, {\n    key: \"submitFrame\",\n    value: function submitFrame() {\n      return true;\n    }\n  }, {\n    key: \"requestAnimationFrame\",\n    value: function requestAnimationFrame(renderFrame) {\n      return false;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {}\n  }, {\n    key: \"_renderFrame\",\n    value: function _renderFrame(options) {\n      var _this = this;\n\n      var views = this.getViews(options);\n\n      if (!views) {\n        return false;\n      }\n\n      var gl = this.animationLoop.gl;\n\n      var _iterator = _createForOfIteratorHelper(views),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var view = _step.value;\n          withParameters(gl, view.params, function () {\n            return _this.animationLoop.onRender(_objectSpread(_objectSpread({}, options), view));\n          });\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.submitFrame();\n      return true;\n    }\n  }]);\n\n  return Display;\n}();\n\nexport { Display as default };","map":{"version":3,"mappings":";;;;AAAA,SAAQA,cAAR,QAA6B,kBAA7B;;IAEqBC,O;EACnBC,mBAAc;IAAA;;IAEZ,KAAKC,aAAL,GAAqB,IAArB;EACD;;;;WAEDC,kBAASC,OAATD,EAAkB;MAChB,IAAOE,KAAP,GAAwBD,OAAxB,CAAOC,KAAP;MAAA,IAAcC,MAAd,GAAwBF,OAAxB,CAAcE,MAAd;MACA,OAAO,CACL;QACEC,MAAM,EAAE;UACNC,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAOH,KAAP,EAAcC,MAAd,CADJ;UAENG,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAOJ,KAAP,EAAcC,MAAd,CAFH;UAGNI,WAAW,EAAE;QAHP;MADV,CADK,CAAP;IASD;;;WAEDC,uBAAc;MACZ,OAAO,IAAP;IACD;;;WAGDC,+BAAsBC,WAAtBD,EAAmC;MACjC,OAAO,KAAP;IACD;;;WAEDE,mBAAS,CAAE;;;WAGXC,sBAAaX,OAAbW,EAAsB;MAAA;;MACpB,IAAMC,KAAK,GAAG,KAAKb,QAAL,CAAcC,OAAd,CAAd;;MACA,IAAI,CAACY,KAAL,EAAY;QACV,OAAO,KAAP;MACD;;MAED,IAAOC,EAAP,GAAa,KAAKf,aAAlB,CAAOe,EAAP;;MANoB,2CAODD,KAPC;MAAA;;MAAA;QAAA;UAAA,IAOTE,IAPS;UAQlBnB,cAAc,CAACkB,EAAD,EAAKC,IAAI,CAACX,MAAV,EAAkB;YAAA,OAAM,MAAKL,aAAL,CAAmBiB,QAAnB,iCAAgCf,OAAhC,GAA4Cc,IAA5C,EAAN;UAAA,CAAlB,CAAdnB;QARkB;;QAOpB,oDAA0B;UAAA;QAEzB;MATmB;QAAA;MAAA;QAAA;MAAA;;MAWpB,KAAKY,WAAL;MACA,OAAO,IAAP;IACD;;;;;;SA5CkBX,O","names":["withParameters","Display","constructor","animationLoop","getViews","options","width","height","params","viewport","scissor","scissorTest","submitFrame","requestAnimationFrame","renderFrame","delete","_renderFrame","views","gl","view","onRender"],"sources":["../../../src/webvr/display.js"],"sourcesContent":["import {withParameters} from '@luma.gl/gltools';\n\nexport default class Display {\n  constructor() {\n    // TODO\n    this.animationLoop = null;\n  }\n\n  getViews(options) {\n    const {width, height} = options;\n    return [\n      {\n        params: {\n          viewport: [0, 0, width, height],\n          scissor: [0, 0, width, height],\n          scissorTest: true\n        }\n      }\n    ];\n  }\n\n  submitFrame() {\n    return true;\n  }\n\n  // return true if animation frame has been requested\n  requestAnimationFrame(renderFrame) {\n    return false;\n  }\n\n  delete() {}\n\n  // AnimationLoop calls this API\n  _renderFrame(options) {\n    const views = this.getViews(options);\n    if (!views) {\n      return false;\n    }\n\n    const {gl} = this.animationLoop;\n    for (const view of views) {\n      withParameters(gl, view.params, () => this.animationLoop.onRender({...options, ...view}));\n    }\n\n    this.submitFrame();\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}