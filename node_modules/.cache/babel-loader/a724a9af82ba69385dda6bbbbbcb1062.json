{"ast":null,"code":"import _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport log from '../utils/log';\nimport { createMat4, getCameraPosition, getFrustumPlanes as _getFrustumPlanes } from '../utils/math-utils';\nimport { Matrix4, Vector3, equals as _equals, clamp } from '@math.gl/core';\nimport * as mat4 from 'gl-matrix/mat4';\nimport { getDistanceScales as _getDistanceScales, getMeterZoom, lngLatToWorld, worldToLngLat, worldToPixels, pixelsToWorld } from '@math.gl/web-mercator';\nimport { PROJECTION_MODE } from '../lib/constants';\nvar DEGREES_TO_RADIANS = Math.PI / 180;\nvar IDENTITY = createMat4();\nvar ZERO_VECTOR = [0, 0, 0];\nvar DEFAULT_ZOOM = 0;\nvar DEFAULT_DISTANCE_SCALES = {\n  unitsPerMeter: [1, 1, 1],\n  metersPerUnit: [1, 1, 1]\n};\n\nvar Viewport = /*#__PURE__*/function () {\n  function Viewport() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Viewport);\n\n    var _opts$id = opts.id,\n        id = _opts$id === void 0 ? null : _opts$id,\n        _opts$x = opts.x,\n        x = _opts$x === void 0 ? 0 : _opts$x,\n        _opts$y = opts.y,\n        y = _opts$y === void 0 ? 0 : _opts$y,\n        _opts$width = opts.width,\n        width = _opts$width === void 0 ? 1 : _opts$width,\n        _opts$height = opts.height,\n        height = _opts$height === void 0 ? 1 : _opts$height;\n    this.id = id || this.constructor.displayName || 'viewport';\n    this.x = x;\n    this.y = y;\n    this.width = width || 1;\n    this.height = height || 1;\n    this._frustumPlanes = {};\n\n    this._initViewMatrix(opts);\n\n    this._initProjectionMatrix(opts);\n\n    this._initPixelMatrices();\n\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n    this.projectFlat = this.projectFlat.bind(this);\n    this.unprojectFlat = this.unprojectFlat.bind(this);\n  }\n\n  _createClass(Viewport, [{\n    key: \"metersPerPixel\",\n    get: function get() {\n      return this.distanceScales.metersPerUnit[2] / this.scale;\n    }\n  }, {\n    key: \"projectionMode\",\n    get: function get() {\n      if (this.isGeospatial) {\n        return this.zoom < 12 ? PROJECTION_MODE.WEB_MERCATOR : PROJECTION_MODE.WEB_MERCATOR_AUTO_OFFSET;\n      }\n\n      return PROJECTION_MODE.IDENTITY;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(viewport) {\n      if (!(viewport instanceof Viewport)) {\n        return false;\n      }\n\n      if (this === viewport) {\n        return true;\n      }\n\n      return viewport.width === this.width && viewport.height === this.height && viewport.scale === this.scale && _equals(viewport.projectionMatrix, this.projectionMatrix) && _equals(viewport.viewMatrix, this.viewMatrix);\n    }\n  }, {\n    key: \"project\",\n    value: function project(xyz) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$topLeft = _ref.topLeft,\n          topLeft = _ref$topLeft === void 0 ? true : _ref$topLeft;\n\n      var worldPosition = this.projectPosition(xyz);\n      var coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n      var _coord = _slicedToArray(coord, 2),\n          x = _coord[0],\n          y = _coord[1];\n\n      var y2 = topLeft ? y : this.height - y;\n      return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n    }\n  }, {\n    key: \"unproject\",\n    value: function unproject(xyz) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$topLeft = _ref2.topLeft,\n          topLeft = _ref2$topLeft === void 0 ? true : _ref2$topLeft,\n          targetZ = _ref2.targetZ;\n\n      var _xyz = _slicedToArray(xyz, 3),\n          x = _xyz[0],\n          y = _xyz[1],\n          z = _xyz[2];\n\n      var y2 = topLeft ? y : this.height - y;\n      var targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n      var coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n\n      var _this$unprojectPositi = this.unprojectPosition(coord),\n          _this$unprojectPositi2 = _slicedToArray(_this$unprojectPositi, 3),\n          X = _this$unprojectPositi2[0],\n          Y = _this$unprojectPositi2[1],\n          Z = _this$unprojectPositi2[2];\n\n      if (Number.isFinite(z)) {\n        return [X, Y, Z];\n      }\n\n      return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n    }\n  }, {\n    key: \"projectPosition\",\n    value: function projectPosition(xyz) {\n      var _this$projectFlat = this.projectFlat(xyz),\n          _this$projectFlat2 = _slicedToArray(_this$projectFlat, 2),\n          X = _this$projectFlat2[0],\n          Y = _this$projectFlat2[1];\n\n      var Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n      return [X, Y, Z];\n    }\n  }, {\n    key: \"unprojectPosition\",\n    value: function unprojectPosition(xyz) {\n      var _this$unprojectFlat = this.unprojectFlat(xyz),\n          _this$unprojectFlat2 = _slicedToArray(_this$unprojectFlat, 2),\n          X = _this$unprojectFlat2[0],\n          Y = _this$unprojectFlat2[1];\n\n      var Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n      return [X, Y, Z];\n    }\n  }, {\n    key: \"projectFlat\",\n    value: function projectFlat(xyz) {\n      if (this.isGeospatial) {\n        var result = lngLatToWorld(xyz);\n        result[1] = clamp(result[1], -318, 830);\n        return result;\n      }\n\n      return xyz;\n    }\n  }, {\n    key: \"unprojectFlat\",\n    value: function unprojectFlat(xyz) {\n      if (this.isGeospatial) {\n        return worldToLngLat(xyz);\n      }\n\n      return xyz;\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var unprojectOption = {\n        targetZ: options.z || 0\n      };\n      var topLeft = this.unproject([0, 0], unprojectOption);\n      var topRight = this.unproject([this.width, 0], unprojectOption);\n      var bottomLeft = this.unproject([0, this.height], unprojectOption);\n      var bottomRight = this.unproject([this.width, this.height], unprojectOption);\n      return [Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]), Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]), Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]), Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1])];\n    }\n  }, {\n    key: \"getDistanceScales\",\n    value: function getDistanceScales() {\n      var coordinateOrigin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (coordinateOrigin) {\n        return _getDistanceScales({\n          longitude: coordinateOrigin[0],\n          latitude: coordinateOrigin[1],\n          highPrecision: true\n        });\n      }\n\n      return this.distanceScales;\n    }\n  }, {\n    key: \"containsPixel\",\n    value: function containsPixel(_ref3) {\n      var x = _ref3.x,\n          y = _ref3.y,\n          _ref3$width = _ref3.width,\n          width = _ref3$width === void 0 ? 1 : _ref3$width,\n          _ref3$height = _ref3.height,\n          height = _ref3$height === void 0 ? 1 : _ref3$height;\n      return x < this.x + this.width && this.x < x + width && y < this.y + this.height && this.y < y + height;\n    }\n  }, {\n    key: \"getFrustumPlanes\",\n    value: function getFrustumPlanes() {\n      if (this._frustumPlanes.near) {\n        return this._frustumPlanes;\n      }\n\n      Object.assign(this._frustumPlanes, _getFrustumPlanes(this.viewProjectionMatrix));\n      return this._frustumPlanes;\n    }\n  }, {\n    key: \"panByPosition\",\n    value: function panByPosition(coords, pixel) {\n      return null;\n    }\n  }, {\n    key: \"getCameraPosition\",\n    value: function getCameraPosition() {\n      return this.cameraPosition;\n    }\n  }, {\n    key: \"getCameraDirection\",\n    value: function getCameraDirection() {\n      return this.cameraDirection;\n    }\n  }, {\n    key: \"getCameraUp\",\n    value: function getCameraUp() {\n      return this.cameraUp;\n    }\n  }, {\n    key: \"_createProjectionMatrix\",\n    value: function _createProjectionMatrix(_ref4) {\n      var orthographic = _ref4.orthographic,\n          fovyRadians = _ref4.fovyRadians,\n          aspect = _ref4.aspect,\n          focalDistance = _ref4.focalDistance,\n          near = _ref4.near,\n          far = _ref4.far;\n      return orthographic ? new Matrix4().orthographic({\n        fovy: fovyRadians,\n        aspect: aspect,\n        focalDistance: focalDistance,\n        near: near,\n        far: far\n      }) : new Matrix4().perspective({\n        fovy: fovyRadians,\n        aspect: aspect,\n        near: near,\n        far: far\n      });\n    }\n  }, {\n    key: \"_initViewMatrix\",\n    value: function _initViewMatrix(opts) {\n      var _opts$viewMatrix = opts.viewMatrix,\n          viewMatrix = _opts$viewMatrix === void 0 ? IDENTITY : _opts$viewMatrix,\n          _opts$longitude = opts.longitude,\n          longitude = _opts$longitude === void 0 ? null : _opts$longitude,\n          _opts$latitude = opts.latitude,\n          latitude = _opts$latitude === void 0 ? null : _opts$latitude,\n          _opts$zoom = opts.zoom,\n          zoom = _opts$zoom === void 0 ? null : _opts$zoom,\n          _opts$position = opts.position,\n          position = _opts$position === void 0 ? null : _opts$position,\n          _opts$modelMatrix = opts.modelMatrix,\n          modelMatrix = _opts$modelMatrix === void 0 ? null : _opts$modelMatrix,\n          _opts$focalDistance = opts.focalDistance,\n          focalDistance = _opts$focalDistance === void 0 ? 1 : _opts$focalDistance,\n          _opts$distanceScales = opts.distanceScales,\n          distanceScales = _opts$distanceScales === void 0 ? null : _opts$distanceScales;\n      this.isGeospatial = Number.isFinite(latitude) && Number.isFinite(longitude);\n      this.zoom = zoom;\n\n      if (!Number.isFinite(this.zoom)) {\n        this.zoom = this.isGeospatial ? getMeterZoom({\n          latitude: latitude\n        }) + Math.log2(focalDistance) : DEFAULT_ZOOM;\n      }\n\n      var scale = Math.pow(2, this.zoom);\n      this.scale = scale;\n      this.distanceScales = this.isGeospatial ? _getDistanceScales({\n        latitude: latitude,\n        longitude: longitude\n      }) : distanceScales || DEFAULT_DISTANCE_SCALES;\n      this.focalDistance = focalDistance;\n      this.distanceScales.metersPerUnit = new Vector3(this.distanceScales.metersPerUnit);\n      this.distanceScales.unitsPerMeter = new Vector3(this.distanceScales.unitsPerMeter);\n      this.position = ZERO_VECTOR;\n      this.meterOffset = ZERO_VECTOR;\n\n      if (position) {\n        this.position = position;\n        this.modelMatrix = modelMatrix;\n        this.meterOffset = modelMatrix ? modelMatrix.transformVector(position) : position;\n      }\n\n      if (this.isGeospatial) {\n        this.longitude = longitude;\n        this.latitude = latitude;\n        this.center = this._getCenterInWorld({\n          longitude: longitude,\n          latitude: latitude\n        });\n      } else {\n        this.center = position ? this.projectPosition(position) : [0, 0, 0];\n      }\n\n      this.viewMatrixUncentered = viewMatrix;\n      this.viewMatrix = new Matrix4().multiplyRight(this.viewMatrixUncentered).translate(new Vector3(this.center || ZERO_VECTOR).negate());\n    }\n  }, {\n    key: \"_getCenterInWorld\",\n    value: function _getCenterInWorld(_ref5) {\n      var longitude = _ref5.longitude,\n          latitude = _ref5.latitude;\n      var meterOffset = this.meterOffset,\n          distanceScales = this.distanceScales;\n      var center = new Vector3(this.projectPosition([longitude, latitude, 0]));\n\n      if (meterOffset) {\n        var commonPosition = new Vector3(meterOffset).scale(distanceScales.unitsPerMeter);\n        center.add(commonPosition);\n      }\n\n      return center;\n    }\n  }, {\n    key: \"_initProjectionMatrix\",\n    value: function _initProjectionMatrix(opts) {\n      var _opts$projectionMatri = opts.projectionMatrix,\n          projectionMatrix = _opts$projectionMatri === void 0 ? null : _opts$projectionMatri,\n          _opts$orthographic = opts.orthographic,\n          orthographic = _opts$orthographic === void 0 ? false : _opts$orthographic,\n          fovyRadians = opts.fovyRadians,\n          _opts$fovy = opts.fovy,\n          fovy = _opts$fovy === void 0 ? 75 : _opts$fovy,\n          _opts$near = opts.near,\n          near = _opts$near === void 0 ? 0.1 : _opts$near,\n          _opts$far = opts.far,\n          far = _opts$far === void 0 ? 1000 : _opts$far,\n          _opts$focalDistance2 = opts.focalDistance,\n          focalDistance = _opts$focalDistance2 === void 0 ? 1 : _opts$focalDistance2;\n      this.projectionMatrix = projectionMatrix || this._createProjectionMatrix({\n        orthographic: orthographic,\n        fovyRadians: fovyRadians || fovy * DEGREES_TO_RADIANS,\n        aspect: this.width / this.height,\n        focalDistance: focalDistance,\n        near: near,\n        far: far\n      });\n    }\n  }, {\n    key: \"_initPixelMatrices\",\n    value: function _initPixelMatrices() {\n      var vpm = createMat4();\n      mat4.multiply(vpm, vpm, this.projectionMatrix);\n      mat4.multiply(vpm, vpm, this.viewMatrix);\n      this.viewProjectionMatrix = vpm;\n      this.viewMatrixInverse = mat4.invert([], this.viewMatrix) || this.viewMatrix;\n      this.cameraPosition = getCameraPosition(this.viewMatrixInverse);\n      var viewportMatrix = createMat4();\n      var pixelProjectionMatrix = createMat4();\n      mat4.scale(viewportMatrix, viewportMatrix, [this.width / 2, -this.height / 2, 1]);\n      mat4.translate(viewportMatrix, viewportMatrix, [1, -1, 0]);\n      mat4.multiply(pixelProjectionMatrix, viewportMatrix, this.viewProjectionMatrix);\n      this.pixelProjectionMatrix = pixelProjectionMatrix;\n      this.viewportMatrix = viewportMatrix;\n      this.pixelUnprojectionMatrix = mat4.invert(createMat4(), this.pixelProjectionMatrix);\n\n      if (!this.pixelUnprojectionMatrix) {\n        log.warn('Pixel project matrix not invertible')();\n      }\n    }\n  }]);\n\n  return Viewport;\n}();\n\nexport { Viewport as default };\nViewport.displayName = 'Viewport';","map":{"version":3,"mappings":"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","names":["log","createMat4","getCameraPosition","getFrustumPlanes","Matrix4","Vector3","equals","clamp","mat4","getDistanceScales","getMeterZoom","lngLatToWorld","worldToLngLat","worldToPixels","pixelsToWorld","PROJECTION_MODE","DEGREES_TO_RADIANS","Math","PI","IDENTITY","ZERO_VECTOR","DEFAULT_ZOOM","DEFAULT_DISTANCE_SCALES","unitsPerMeter","metersPerUnit","Viewport","constructor","opts","id","x","y","width","height","displayName","_frustumPlanes","_initViewMatrix","_initProjectionMatrix","_initPixelMatrices","bind","project","unproject","projectPosition","unprojectPosition","projectFlat","unprojectFlat","distanceScales","scale","isGeospatial","zoom","WEB_MERCATOR","WEB_MERCATOR_AUTO_OFFSET","viewport","projectionMatrix","viewMatrix","xyz","topLeft","worldPosition","coord","pixelProjectionMatrix","y2","length","targetZ","z","targetZWorld","pixelUnprojectionMatrix","X","Y","Z","Number","isFinite","result","getBounds","options","unprojectOption","topRight","bottomLeft","bottomRight","min","max","coordinateOrigin","longitude","latitude","highPrecision","containsPixel","near","Object","assign","viewProjectionMatrix","panByPosition","coords","pixel","cameraPosition","getCameraDirection","cameraDirection","getCameraUp","cameraUp","_createProjectionMatrix","orthographic","fovyRadians","aspect","focalDistance","far","fovy","perspective","position","modelMatrix","log2","pow","meterOffset","transformVector","center","_getCenterInWorld","viewMatrixUncentered","multiplyRight","translate","negate","commonPosition","add","vpm","multiply","viewMatrixInverse","invert","viewportMatrix","warn"],"sources":["../../../src/viewports/viewport.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport log from '../utils/log';\nimport {createMat4, getCameraPosition, getFrustumPlanes} from '../utils/math-utils';\n\nimport {Matrix4, Vector3, equals, clamp} from '@math.gl/core';\nimport * as mat4 from 'gl-matrix/mat4';\n\nimport {\n  getDistanceScales,\n  getMeterZoom,\n  lngLatToWorld,\n  worldToLngLat,\n  worldToPixels,\n  pixelsToWorld\n} from '@math.gl/web-mercator';\n\nimport {PROJECTION_MODE} from '../lib/constants';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nconst IDENTITY = createMat4();\n\nconst ZERO_VECTOR = [0, 0, 0];\n\nconst DEFAULT_ZOOM = 0;\n\nconst DEFAULT_DISTANCE_SCALES = {\n  unitsPerMeter: [1, 1, 1],\n  metersPerUnit: [1, 1, 1]\n};\n\nexport default class Viewport {\n  /**\n   * @classdesc\n   * Manages coordinate system transformations for deck.gl.\n   *\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  constructor(opts = {}) {\n    const {\n      id = null,\n      // Window width/height in pixels (for pixel projection)\n      x = 0,\n      y = 0,\n      width = 1,\n      height = 1\n    } = opts;\n\n    this.id = id || this.constructor.displayName || 'viewport';\n\n    this.x = x;\n    this.y = y;\n    // Silently allow apps to send in w,h = 0,0\n    this.width = width || 1;\n    this.height = height || 1;\n    this._frustumPlanes = {};\n\n    this._initViewMatrix(opts);\n    this._initProjectionMatrix(opts);\n    this._initPixelMatrices();\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n    this.projectFlat = this.projectFlat.bind(this);\n    this.unprojectFlat = this.unprojectFlat.bind(this);\n  }\n\n  get metersPerPixel() {\n    return this.distanceScales.metersPerUnit[2] / this.scale;\n  }\n\n  get projectionMode() {\n    if (this.isGeospatial) {\n      return this.zoom < 12\n        ? PROJECTION_MODE.WEB_MERCATOR\n        : PROJECTION_MODE.WEB_MERCATOR_AUTO_OFFSET;\n    }\n    return PROJECTION_MODE.IDENTITY;\n  }\n\n  // Two viewports are equal if width and height are identical, and if\n  // their view and projection matrices are (approximately) equal.\n  equals(viewport) {\n    if (!(viewport instanceof Viewport)) {\n      return false;\n    }\n    if (this === viewport) {\n      return true;\n    }\n\n    return (\n      viewport.width === this.width &&\n      viewport.height === this.height &&\n      viewport.scale === this.scale &&\n      equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      equals(viewport.viewMatrix, this.viewMatrix)\n    );\n    // TODO - check distance scales?\n  }\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether projected coords are top left\n   * @return {Array} - [x, y] or [x, y, z] in top left coords\n   */\n  project(xyz, {topLeft = true} = {}) {\n    const worldPosition = this.projectPosition(xyz);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, {topLeft = true, targetZ} = {}) {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  projectPosition(xyz) {\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n    return [X, Y, Z];\n  }\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   * @param {Array} lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return {Array} [x,y] coordinates.\n   */\n  projectFlat(xyz) {\n    if (this.isGeospatial) {\n      // Shader clamps latitude to +-89.9, see /shaderlib/project/project.glsl.js\n      // lngLatToWorld([0, -89.9])[1] = -317.9934163758329\n      // lngLatToWorld([0, 89.9])[1] = 829.9934163758271\n      const result = lngLatToWorld(xyz);\n      result[1] = clamp(result[1], -318, 830);\n      return result;\n    }\n    return xyz;\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   * @param {object|Vector} xy - object with {x,y} members\n   *  representing point on projected map plane\n   * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xyz) {\n    if (this.isGeospatial) {\n      return worldToLngLat(xyz);\n    }\n    return xyz;\n  }\n\n  getBounds(options = {}) {\n    const unprojectOption = {targetZ: options.z || 0};\n\n    const topLeft = this.unproject([0, 0], unprojectOption);\n    const topRight = this.unproject([this.width, 0], unprojectOption);\n    const bottomLeft = this.unproject([0, this.height], unprojectOption);\n    const bottomRight = this.unproject([this.width, this.height], unprojectOption);\n\n    return [\n      Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),\n      Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]),\n      Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),\n      Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1])\n    ];\n  }\n\n  getDistanceScales(coordinateOrigin = null) {\n    if (coordinateOrigin) {\n      return getDistanceScales({\n        longitude: coordinateOrigin[0],\n        latitude: coordinateOrigin[1],\n        highPrecision: true\n      });\n    }\n    return this.distanceScales;\n  }\n\n  containsPixel({x, y, width = 1, height = 1}) {\n    return (\n      x < this.x + this.width &&\n      this.x < x + width &&\n      y < this.y + this.height &&\n      this.y < y + height\n    );\n  }\n\n  // Extract frustum planes in common space\n  getFrustumPlanes() {\n    if (this._frustumPlanes.near) {\n      return this._frustumPlanes;\n    }\n\n    Object.assign(this._frustumPlanes, getFrustumPlanes(this.viewProjectionMatrix));\n\n    return this._frustumPlanes;\n  }\n\n  // EXPERIMENTAL METHODS\n\n  /**\n   * Needed by panning and linear transition\n   * Pan the viewport to place a given world coordinate at screen point [x, y]\n   *\n   * @param {Array} coords - world coordinates\n   * @param {Array} pixel - [x,y] coordinates on screen\n   * @return {Object} props of the new viewport\n   */\n  panByPosition(coords, pixel) {\n    return null;\n  }\n\n  getCameraPosition() {\n    return this.cameraPosition;\n  }\n\n  getCameraDirection() {\n    return this.cameraDirection;\n  }\n\n  getCameraUp() {\n    return this.cameraUp;\n  }\n\n  // INTERNAL METHODS\n\n  _createProjectionMatrix({orthographic, fovyRadians, aspect, focalDistance, near, far}) {\n    return orthographic\n      ? new Matrix4().orthographic({fovy: fovyRadians, aspect, focalDistance, near, far})\n      : new Matrix4().perspective({fovy: fovyRadians, aspect, near, far});\n  }\n\n  /* eslint-disable complexity, max-statements */\n  _initViewMatrix(opts) {\n    const {\n      // view matrix\n      viewMatrix = IDENTITY,\n\n      longitude = null, // Anchor: lng lat zoom makes viewport work w/ geospatial coordinate systems\n      latitude = null,\n      zoom = null,\n\n      position = null, // Anchor position offset (in meters for geospatial viewports)\n      modelMatrix = null, // A model matrix to be applied to position, to match the layer props API\n      focalDistance = 1, // Only needed for orthographic views\n\n      distanceScales = null\n    } = opts;\n\n    // Check if we have a geospatial anchor\n    this.isGeospatial = Number.isFinite(latitude) && Number.isFinite(longitude);\n\n    this.zoom = zoom;\n    if (!Number.isFinite(this.zoom)) {\n      this.zoom = this.isGeospatial\n        ? getMeterZoom({latitude}) + Math.log2(focalDistance)\n        : DEFAULT_ZOOM;\n    }\n    const scale = Math.pow(2, this.zoom);\n    this.scale = scale;\n\n    // Calculate distance scales if lng/lat/zoom are provided\n    this.distanceScales = this.isGeospatial\n      ? getDistanceScales({latitude, longitude})\n      : distanceScales || DEFAULT_DISTANCE_SCALES;\n\n    this.focalDistance = focalDistance;\n\n    this.distanceScales.metersPerUnit = new Vector3(this.distanceScales.metersPerUnit);\n    this.distanceScales.unitsPerMeter = new Vector3(this.distanceScales.unitsPerMeter);\n\n    this.position = ZERO_VECTOR;\n    this.meterOffset = ZERO_VECTOR;\n    if (position) {\n      // Apply model matrix if supplied\n      this.position = position;\n      this.modelMatrix = modelMatrix;\n      this.meterOffset = modelMatrix ? modelMatrix.transformVector(position) : position;\n    }\n\n    if (this.isGeospatial) {\n      // Determine camera center\n      this.longitude = longitude;\n      this.latitude = latitude;\n      this.center = this._getCenterInWorld({longitude, latitude});\n    } else {\n      this.center = position ? this.projectPosition(position) : [0, 0, 0];\n    }\n    this.viewMatrixUncentered = viewMatrix;\n    // Make a centered version of the matrix for projection modes without an offset\n    this.viewMatrix = new Matrix4()\n      // Apply the uncentered view matrix\n      .multiplyRight(this.viewMatrixUncentered)\n      // And center it\n      .translate(new Vector3(this.center || ZERO_VECTOR).negate());\n  }\n  /* eslint-enable complexity, max-statements */\n\n  _getCenterInWorld({longitude, latitude}) {\n    const {meterOffset, distanceScales} = this;\n\n    // Make a centered version of the matrix for projection modes without an offset\n    const center = new Vector3(this.projectPosition([longitude, latitude, 0]));\n\n    if (meterOffset) {\n      const commonPosition = new Vector3(meterOffset)\n        // Convert to pixels in current zoom\n        .scale(distanceScales.unitsPerMeter);\n      center.add(commonPosition);\n    }\n\n    return center;\n  }\n\n  _initProjectionMatrix(opts) {\n    const {\n      // Projection matrix\n      projectionMatrix = null,\n\n      // Projection matrix parameters, used if projectionMatrix not supplied\n      orthographic = false,\n      fovyRadians,\n      fovy = 75,\n      near = 0.1, // Distance of near clipping plane\n      far = 1000, // Distance of far clipping plane\n      focalDistance = 1\n    } = opts;\n\n    this.projectionMatrix =\n      projectionMatrix ||\n      this._createProjectionMatrix({\n        orthographic,\n        fovyRadians: fovyRadians || fovy * DEGREES_TO_RADIANS,\n        aspect: this.width / this.height,\n        focalDistance,\n        near,\n        far\n      });\n  }\n\n  _initPixelMatrices() {\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, this.projectionMatrix);\n    mat4.multiply(vpm, vpm, this.viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // console.log('VPM', this.viewMatrix, this.projectionMatrix, this.viewProjectionMatrix);\n\n    // Calculate inverse view matrix\n    this.viewMatrixInverse = mat4.invert([], this.viewMatrix) || this.viewMatrix;\n\n    // Decompose camera parameters\n    this.cameraPosition = getCameraPosition(this.viewMatrixInverse);\n\n    /*\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n\n    // matrix for conversion from world location to screen (pixel) coordinates\n    const viewportMatrix = createMat4(); // matrix from NDC to viewport.\n    const pixelProjectionMatrix = createMat4(); // matrix from world space to viewport.\n    mat4.scale(viewportMatrix, viewportMatrix, [this.width / 2, -this.height / 2, 1]);\n    mat4.translate(viewportMatrix, viewportMatrix, [1, -1, 0]);\n    mat4.multiply(pixelProjectionMatrix, viewportMatrix, this.viewProjectionMatrix);\n    this.pixelProjectionMatrix = pixelProjectionMatrix;\n    this.viewportMatrix = viewportMatrix;\n\n    this.pixelUnprojectionMatrix = mat4.invert(createMat4(), this.pixelProjectionMatrix);\n    if (!this.pixelUnprojectionMatrix) {\n      log.warn('Pixel project matrix not invertible')();\n      // throw new Error('Pixel project matrix not invertible');\n    }\n  }\n}\n\nViewport.displayName = 'Viewport';\n"]},"metadata":{},"sourceType":"module"}