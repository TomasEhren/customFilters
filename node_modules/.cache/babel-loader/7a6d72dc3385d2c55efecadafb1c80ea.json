{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { equals } from '@math.gl/core';\nimport assert from '../utils/assert';\n\nvar TransitionInterpolator = /*#__PURE__*/function () {\n  function TransitionInterpolator() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, TransitionInterpolator);\n\n    if (Array.isArray(opts)) {\n      opts = {\n        compare: opts,\n        extract: opts,\n        required: opts\n      };\n    }\n\n    var _opts = opts,\n        compare = _opts.compare,\n        extract = _opts.extract,\n        required = _opts.required;\n    this._propsToCompare = compare;\n    this._propsToExtract = extract;\n    this._requiredProps = required;\n  }\n\n  _createClass(TransitionInterpolator, [{\n    key: \"arePropsEqual\",\n    value: function arePropsEqual(currentProps, nextProps) {\n      var _iterator = _createForOfIteratorHelper(this._propsToCompare || Object.keys(nextProps)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var key = _step.value;\n\n          if (!(key in currentProps) || !(key in nextProps) || !equals(currentProps[key], nextProps[key])) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return true;\n    }\n  }, {\n    key: \"initializeProps\",\n    value: function initializeProps(startProps, endProps) {\n      var result;\n\n      if (this._propsToExtract) {\n        var startViewStateProps = {};\n        var endViewStateProps = {};\n\n        var _iterator2 = _createForOfIteratorHelper(this._propsToExtract),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var key = _step2.value;\n            startViewStateProps[key] = startProps[key];\n            endViewStateProps[key] = endProps[key];\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        result = {\n          start: startViewStateProps,\n          end: endViewStateProps\n        };\n      } else {\n        result = {\n          start: startProps,\n          end: endProps\n        };\n      }\n\n      this._checkRequiredProps(result.start);\n\n      this._checkRequiredProps(result.end);\n\n      return result;\n    }\n  }, {\n    key: \"interpolateProps\",\n    value: function interpolateProps(startProps, endProps, t) {\n      return endProps;\n    }\n  }, {\n    key: \"getDuration\",\n    value: function getDuration(startProps, endProps) {\n      return endProps.transitionDuration;\n    }\n  }, {\n    key: \"_checkRequiredProps\",\n    value: function _checkRequiredProps(props) {\n      if (!this._requiredProps) {\n        return;\n      }\n\n      this._requiredProps.forEach(function (propName) {\n        var value = props[propName];\n        assert(Number.isFinite(value) || Array.isArray(value), \"\".concat(propName, \" is required for transition\"));\n      });\n    }\n  }]);\n\n  return TransitionInterpolator;\n}();\n\nexport { TransitionInterpolator as default };","map":{"version":3,"mappings":";;;AAAA,SAAQA,MAAR,QAAqB,eAArB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;IAEqBC,sB;EAQnBC,kCAAuB;IAAA,IAAXC,IAAW,uEAAJ,EAAI;;IAAA;;IACrB,IAAIC,KAAK,CAACC,OAAND,CAAcD,IAAdC,CAAJ,EAAyB;MACvBD,IAAI,GAAG;QACLG,OAAO,EAAEH,IADJ;QAELI,OAAO,EAAEJ,IAFJ;QAGLK,QAAQ,EAAEL;MAHL,CAAPA;IAKD;;IACD,YAAqCA,IAArC;IAAA,IAAOG,OAAP,SAAOA,OAAP;IAAA,IAAgBC,OAAhB,SAAgBA,OAAhB;IAAA,IAAyBC,QAAzB,SAAyBA,QAAzB;IAEA,KAAKC,eAAL,GAAuBH,OAAvB;IACA,KAAKI,eAAL,GAAuBH,OAAvB;IACA,KAAKI,cAAL,GAAsBH,QAAtB;EACD;;;;WAQDI,uBAAcC,YAAdD,EAA4BE,SAA5BF,EAAuC;MAAA,2CACnB,KAAKH,eAAL,IAAwBM,MAAM,CAACC,IAAPD,CAAYD,SAAZC,CADL;MAAA;;MAAA;QACrC,oDAAkE;UAAA,IAAvDE,GAAuD;;UAChE,IACE,EAAEA,GAAG,IAAIJ,YAAT,KACA,EAAEI,GAAG,IAAIH,SAAT,CADA,IAEA,CAACf,MAAM,CAACc,YAAY,CAACI,GAAD,CAAb,EAAoBH,SAAS,CAACG,GAAD,CAA7B,CAHT,EAIE;YACA,OAAO,KAAP;UACD;QACF;MAToC;QAAA;MAAA;QAAA;MAAA;;MAUrC,OAAO,IAAP;IACD;;;WASDC,yBAAgBC,UAAhBD,EAA4BE,QAA5BF,EAAsC;MACpC,IAAIG,MAAJ;;MAEA,IAAI,KAAKX,eAAT,EAA0B;QACxB,IAAMY,mBAAmB,GAAG,EAA5B;QACA,IAAMC,iBAAiB,GAAG,EAA1B;;QAFwB,4CAIN,KAAKb,eAJC;QAAA;;QAAA;UAIxB,uDAAwC;YAAA,IAA7BO,GAA6B;YACtCK,mBAAmB,CAACL,GAAD,CAAnBK,GAA2BH,UAAU,CAACF,GAAD,CAArCK;YACAC,iBAAiB,CAACN,GAAD,CAAjBM,GAAyBH,QAAQ,CAACH,GAAD,CAAjCM;UACD;QAPuB;UAAA;QAAA;UAAA;QAAA;;QAQxBF,MAAM,GAAG;UAACG,KAAK,EAAEF,mBAAR;UAA6BG,GAAG,EAAEF;QAAlC,CAATF;MARF,OASO;QACLA,MAAM,GAAG;UAACG,KAAK,EAAEL,UAAR;UAAoBM,GAAG,EAAEL;QAAzB,CAATC;MACD;;MAED,KAAKK,mBAAL,CAAyBL,MAAM,CAACG,KAAhC;;MACA,KAAKE,mBAAL,CAAyBL,MAAM,CAACI,GAAhC;;MAEA,OAAOJ,MAAP;IACD;;;WASDM,0BAAiBR,UAAjBQ,EAA6BP,QAA7BO,EAAuCC,CAAvCD,EAA0C;MACxC,OAAOP,QAAP;IACD;;;WAQDS,qBAAYV,UAAZU,EAAwBT,QAAxBS,EAAkC;MAChC,OAAOT,QAAQ,CAACU,kBAAhB;IACD;;;WAEDJ,6BAAoBK,KAApBL,EAA2B;MACzB,IAAI,CAAC,KAAKf,cAAV,EAA0B;QACxB;MACD;;MAED,KAAKA,cAAL,CAAoBqB,OAApB,CAA4BC,kBAAQ,EAAI;QACtC,IAAMC,KAAK,GAAGH,KAAK,CAACE,QAAD,CAAnB;QACAjC,MAAM,CACJmC,MAAM,CAACC,QAAPD,CAAgBD,KAAhBC,KAA0B/B,KAAK,CAACC,OAAND,CAAc8B,KAAd9B,CADtB,YAED6B,QAFC,iCAANjC;MAFF;IAOD;;;;;;SAxGkBC,sB","names":["equals","assert","TransitionInterpolator","constructor","opts","Array","isArray","compare","extract","required","_propsToCompare","_propsToExtract","_requiredProps","arePropsEqual","currentProps","nextProps","Object","keys","key","initializeProps","startProps","endProps","result","startViewStateProps","endViewStateProps","start","end","_checkRequiredProps","interpolateProps","t","getDuration","transitionDuration","props","forEach","propName","value","Number","isFinite"],"sources":["../../../src/transitions/transition-interpolator.js"],"sourcesContent":["import {equals} from '@math.gl/core';\nimport assert from '../utils/assert';\n\nexport default class TransitionInterpolator {\n  /**\n   * @param opts {array|object}\n   * @param opts.compare {array} - prop names used in equality check\n   * @param opts.extract {array} - prop names needed for interpolation\n   * @param opts.required {array} - prop names that must be supplied\n   * alternatively, supply one list of prop names as `opts` if all of the above are the same.\n   */\n  constructor(opts = {}) {\n    if (Array.isArray(opts)) {\n      opts = {\n        compare: opts,\n        extract: opts,\n        required: opts\n      };\n    }\n    const {compare, extract, required} = opts;\n\n    this._propsToCompare = compare;\n    this._propsToExtract = extract;\n    this._requiredProps = required;\n  }\n\n  /**\n   * Checks if two sets of props need transition in between\n   * @param currentProps {object} - a list of viewport props\n   * @param nextProps {object} - a list of viewport props\n   * @returns {bool} - true if two props are equivalent\n   */\n  arePropsEqual(currentProps, nextProps) {\n    for (const key of this._propsToCompare || Object.keys(nextProps)) {\n      if (\n        !(key in currentProps) ||\n        !(key in nextProps) ||\n        !equals(currentProps[key], nextProps[key])\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Called before transition starts to validate/pre-process start and end props\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @returns {Object} {start, end} - start and end props to be passed\n   *   to `interpolateProps`\n   */\n  initializeProps(startProps, endProps) {\n    let result;\n\n    if (this._propsToExtract) {\n      const startViewStateProps = {};\n      const endViewStateProps = {};\n\n      for (const key of this._propsToExtract) {\n        startViewStateProps[key] = startProps[key];\n        endViewStateProps[key] = endProps[key];\n      }\n      result = {start: startViewStateProps, end: endViewStateProps};\n    } else {\n      result = {start: startProps, end: endProps};\n    }\n\n    this._checkRequiredProps(result.start);\n    this._checkRequiredProps(result.end);\n\n    return result;\n  }\n\n  /**\n   * Returns viewport props in transition\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @param t {number} - a time factor between [0, 1]\n   * @returns {object} - a list of interpolated viewport props\n   */\n  interpolateProps(startProps, endProps, t) {\n    return endProps;\n  }\n\n  /**\n   * Returns transition duration\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @returns {Number} - transition duration in milliseconds\n   */\n  getDuration(startProps, endProps) {\n    return endProps.transitionDuration;\n  }\n\n  _checkRequiredProps(props) {\n    if (!this._requiredProps) {\n      return;\n    }\n\n    this._requiredProps.forEach(propName => {\n      const value = props[propName];\n      assert(\n        Number.isFinite(value) || Array.isArray(value),\n        `${propName} is required for transition`\n      );\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}