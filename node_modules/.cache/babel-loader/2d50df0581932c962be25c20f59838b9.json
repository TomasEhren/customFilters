{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { getMeshBoundingBox } from '@loaders.gl/schema';\nimport { getDracoSchema } from './utils/get-draco-schema';\nvar GEOMETRY_TYPE = {\n  TRIANGULAR_MESH: 0,\n  POINT_CLOUD: 1\n};\nvar DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP = {\n  POSITION: 'POSITION',\n  NORMAL: 'NORMAL',\n  COLOR: 'COLOR_0',\n  TEX_COORD: 'TEXCOORD_0'\n};\nvar DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP = {\n  1: Int8Array,\n  2: Uint8Array,\n  3: Int16Array,\n  4: Uint16Array,\n  5: Int32Array,\n  6: Uint32Array,\n  9: Float32Array\n};\nvar INDEX_ITEM_SIZE = 4;\n\nvar DracoParser = /*#__PURE__*/function () {\n  function DracoParser(draco) {\n    _classCallCheck(this, DracoParser);\n\n    _defineProperty(this, \"draco\", void 0);\n\n    _defineProperty(this, \"decoder\", void 0);\n\n    _defineProperty(this, \"metadataQuerier\", void 0);\n\n    this.draco = draco;\n    this.decoder = new this.draco.Decoder();\n    this.metadataQuerier = new this.draco.MetadataQuerier();\n  }\n\n  _createClass(DracoParser, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.draco.destroy(this.decoder);\n      this.draco.destroy(this.metadataQuerier);\n    }\n  }, {\n    key: \"parseSync\",\n    value: function parseSync(arrayBuffer) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var buffer = new this.draco.DecoderBuffer();\n      buffer.Init(new Int8Array(arrayBuffer), arrayBuffer.byteLength);\n\n      this._disableAttributeTransforms(options);\n\n      var geometry_type = this.decoder.GetEncodedGeometryType(buffer);\n      var dracoGeometry = geometry_type === this.draco.TRIANGULAR_MESH ? new this.draco.Mesh() : new this.draco.PointCloud();\n\n      try {\n        var dracoStatus;\n\n        switch (geometry_type) {\n          case this.draco.TRIANGULAR_MESH:\n            dracoStatus = this.decoder.DecodeBufferToMesh(buffer, dracoGeometry);\n            break;\n\n          case this.draco.POINT_CLOUD:\n            dracoStatus = this.decoder.DecodeBufferToPointCloud(buffer, dracoGeometry);\n            break;\n\n          default:\n            throw new Error('DRACO: Unknown geometry type.');\n        }\n\n        if (!dracoStatus.ok() || !dracoGeometry.ptr) {\n          var message = \"DRACO decompression failed: \".concat(dracoStatus.error_msg());\n          throw new Error(message);\n        }\n\n        var loaderData = this._getDracoLoaderData(dracoGeometry, geometry_type, options);\n\n        var geometry = this._getMeshData(dracoGeometry, loaderData, options);\n\n        var boundingBox = getMeshBoundingBox(geometry.attributes);\n        var schema = getDracoSchema(geometry.attributes, loaderData, geometry.indices);\n\n        var data = _objectSpread(_objectSpread({\n          loader: 'draco',\n          loaderData: loaderData,\n          header: {\n            vertexCount: dracoGeometry.num_points(),\n            boundingBox: boundingBox\n          }\n        }, geometry), {}, {\n          schema: schema\n        });\n\n        return data;\n      } finally {\n        this.draco.destroy(buffer);\n\n        if (dracoGeometry) {\n          this.draco.destroy(dracoGeometry);\n        }\n      }\n    }\n  }, {\n    key: \"_getDracoLoaderData\",\n    value: function _getDracoLoaderData(dracoGeometry, geometry_type, options) {\n      var metadata = this._getTopLevelMetadata(dracoGeometry);\n\n      var attributes = this._getDracoAttributes(dracoGeometry, options);\n\n      return {\n        geometry_type: geometry_type,\n        num_attributes: dracoGeometry.num_attributes(),\n        num_points: dracoGeometry.num_points(),\n        num_faces: dracoGeometry instanceof this.draco.Mesh ? dracoGeometry.num_faces() : 0,\n        metadata: metadata,\n        attributes: attributes\n      };\n    }\n  }, {\n    key: \"_getDracoAttributes\",\n    value: function _getDracoAttributes(dracoGeometry, options) {\n      var dracoAttributes = {};\n\n      for (var attributeId = 0; attributeId < dracoGeometry.num_attributes(); attributeId++) {\n        var dracoAttribute = this.decoder.GetAttribute(dracoGeometry, attributeId);\n\n        var metadata = this._getAttributeMetadata(dracoGeometry, attributeId);\n\n        dracoAttributes[dracoAttribute.unique_id()] = {\n          unique_id: dracoAttribute.unique_id(),\n          attribute_type: dracoAttribute.attribute_type(),\n          data_type: dracoAttribute.data_type(),\n          num_components: dracoAttribute.num_components(),\n          byte_offset: dracoAttribute.byte_offset(),\n          byte_stride: dracoAttribute.byte_stride(),\n          normalized: dracoAttribute.normalized(),\n          attribute_index: attributeId,\n          metadata: metadata\n        };\n\n        var quantization = this._getQuantizationTransform(dracoAttribute, options);\n\n        if (quantization) {\n          dracoAttributes[dracoAttribute.unique_id()].quantization_transform = quantization;\n        }\n\n        var octahedron = this._getOctahedronTransform(dracoAttribute, options);\n\n        if (octahedron) {\n          dracoAttributes[dracoAttribute.unique_id()].octahedron_transform = octahedron;\n        }\n      }\n\n      return dracoAttributes;\n    }\n  }, {\n    key: \"_getMeshData\",\n    value: function _getMeshData(dracoGeometry, loaderData, options) {\n      var attributes = this._getMeshAttributes(loaderData, dracoGeometry, options);\n\n      var positionAttribute = attributes.POSITION;\n\n      if (!positionAttribute) {\n        throw new Error('DRACO: No position attribute found.');\n      }\n\n      if (dracoGeometry instanceof this.draco.Mesh) {\n        switch (options.topology) {\n          case 'triangle-strip':\n            return {\n              topology: 'triangle-strip',\n              mode: 4,\n              attributes: attributes,\n              indices: {\n                value: this._getTriangleStripIndices(dracoGeometry),\n                size: 1\n              }\n            };\n\n          case 'triangle-list':\n          default:\n            return {\n              topology: 'triangle-list',\n              mode: 5,\n              attributes: attributes,\n              indices: {\n                value: this._getTriangleListIndices(dracoGeometry),\n                size: 1\n              }\n            };\n        }\n      }\n\n      return {\n        topology: 'point-list',\n        mode: 0,\n        attributes: attributes\n      };\n    }\n  }, {\n    key: \"_getMeshAttributes\",\n    value: function _getMeshAttributes(loaderData, dracoGeometry, options) {\n      var attributes = {};\n\n      for (var _i = 0, _Object$values = Object.values(loaderData.attributes); _i < _Object$values.length; _i++) {\n        var loaderAttribute = _Object$values[_i];\n\n        var attributeName = this._deduceAttributeName(loaderAttribute, options);\n\n        loaderAttribute.name = attributeName;\n\n        var _this$_getAttributeVa = this._getAttributeValues(dracoGeometry, loaderAttribute),\n            value = _this$_getAttributeVa.value,\n            size = _this$_getAttributeVa.size;\n\n        attributes[attributeName] = {\n          value: value,\n          size: size,\n          byteOffset: loaderAttribute.byte_offset,\n          byteStride: loaderAttribute.byte_stride,\n          normalized: loaderAttribute.normalized\n        };\n      }\n\n      return attributes;\n    }\n  }, {\n    key: \"_getTriangleListIndices\",\n    value: function _getTriangleListIndices(dracoGeometry) {\n      var numFaces = dracoGeometry.num_faces();\n      var numIndices = numFaces * 3;\n      var byteLength = numIndices * INDEX_ITEM_SIZE;\n\n      var ptr = this.draco._malloc(byteLength);\n\n      try {\n        this.decoder.GetTrianglesUInt32Array(dracoGeometry, byteLength, ptr);\n        return new Uint32Array(this.draco.HEAPF32.buffer, ptr, numIndices).slice();\n      } finally {\n        this.draco._free(ptr);\n      }\n    }\n  }, {\n    key: \"_getTriangleStripIndices\",\n    value: function _getTriangleStripIndices(dracoGeometry) {\n      var dracoArray = new this.draco.DracoInt32Array();\n\n      try {\n        this.decoder.GetTriangleStripsFromMesh(dracoGeometry, dracoArray);\n        return getUint32Array(dracoArray);\n      } finally {\n        this.draco.destroy(dracoArray);\n      }\n    }\n  }, {\n    key: \"_getAttributeValues\",\n    value: function _getAttributeValues(dracoGeometry, attribute) {\n      var TypedArrayCtor = DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP[attribute.data_type];\n      var numComponents = attribute.num_components;\n      var numPoints = dracoGeometry.num_points();\n      var numValues = numPoints * numComponents;\n      var byteLength = numValues * TypedArrayCtor.BYTES_PER_ELEMENT;\n      var dataType = getDracoDataType(this.draco, TypedArrayCtor);\n      var value;\n\n      var ptr = this.draco._malloc(byteLength);\n\n      try {\n        var dracoAttribute = this.decoder.GetAttribute(dracoGeometry, attribute.attribute_index);\n        this.decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, dracoAttribute, dataType, byteLength, ptr);\n        value = new TypedArrayCtor(this.draco.HEAPF32.buffer, ptr, numValues).slice();\n      } finally {\n        this.draco._free(ptr);\n      }\n\n      return {\n        value: value,\n        size: numComponents\n      };\n    }\n  }, {\n    key: \"_deduceAttributeName\",\n    value: function _deduceAttributeName(attribute, options) {\n      var uniqueId = attribute.unique_id;\n\n      for (var _i2 = 0, _Object$entries = Object.entries(options.extraAttributes || {}); _i2 < _Object$entries.length; _i2++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),\n            attributeName = _Object$entries$_i[0],\n            attributeUniqueId = _Object$entries$_i[1];\n\n        if (attributeUniqueId === uniqueId) {\n          return attributeName;\n        }\n      }\n\n      var thisAttributeType = attribute.attribute_type;\n\n      for (var dracoAttributeConstant in DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP) {\n        var attributeType = this.draco[dracoAttributeConstant];\n\n        if (attributeType === thisAttributeType) {\n          return DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP[dracoAttributeConstant];\n        }\n      }\n\n      var entryName = options.attributeNameEntry || 'name';\n\n      if (attribute.metadata[entryName]) {\n        return attribute.metadata[entryName].string;\n      }\n\n      return \"CUSTOM_ATTRIBUTE_\".concat(uniqueId);\n    }\n  }, {\n    key: \"_getTopLevelMetadata\",\n    value: function _getTopLevelMetadata(dracoGeometry) {\n      var dracoMetadata = this.decoder.GetMetadata(dracoGeometry);\n      return this._getDracoMetadata(dracoMetadata);\n    }\n  }, {\n    key: \"_getAttributeMetadata\",\n    value: function _getAttributeMetadata(dracoGeometry, attributeId) {\n      var dracoMetadata = this.decoder.GetAttributeMetadata(dracoGeometry, attributeId);\n      return this._getDracoMetadata(dracoMetadata);\n    }\n  }, {\n    key: \"_getDracoMetadata\",\n    value: function _getDracoMetadata(dracoMetadata) {\n      if (!dracoMetadata || !dracoMetadata.ptr) {\n        return {};\n      }\n\n      var result = {};\n      var numEntries = this.metadataQuerier.NumEntries(dracoMetadata);\n\n      for (var entryIndex = 0; entryIndex < numEntries; entryIndex++) {\n        var entryName = this.metadataQuerier.GetEntryName(dracoMetadata, entryIndex);\n        result[entryName] = this._getDracoMetadataField(dracoMetadata, entryName);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_getDracoMetadataField\",\n    value: function _getDracoMetadataField(dracoMetadata, entryName) {\n      var dracoArray = new this.draco.DracoInt32Array();\n\n      try {\n        this.metadataQuerier.GetIntEntryArray(dracoMetadata, entryName, dracoArray);\n        var intArray = getInt32Array(dracoArray);\n        return {\n          int: this.metadataQuerier.GetIntEntry(dracoMetadata, entryName),\n          string: this.metadataQuerier.GetStringEntry(dracoMetadata, entryName),\n          double: this.metadataQuerier.GetDoubleEntry(dracoMetadata, entryName),\n          intArray: intArray\n        };\n      } finally {\n        this.draco.destroy(dracoArray);\n      }\n    }\n  }, {\n    key: \"_disableAttributeTransforms\",\n    value: function _disableAttributeTransforms(options) {\n      var _options$quantizedAtt = options.quantizedAttributes,\n          quantizedAttributes = _options$quantizedAtt === void 0 ? [] : _options$quantizedAtt,\n          _options$octahedronAt = options.octahedronAttributes,\n          octahedronAttributes = _options$octahedronAt === void 0 ? [] : _options$octahedronAt;\n      var skipAttributes = [].concat(_toConsumableArray(quantizedAttributes), _toConsumableArray(octahedronAttributes));\n\n      var _iterator = _createForOfIteratorHelper(skipAttributes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var dracoAttributeName = _step.value;\n          this.decoder.SkipAttributeTransform(this.draco[dracoAttributeName]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"_getQuantizationTransform\",\n    value: function _getQuantizationTransform(dracoAttribute, options) {\n      var _this = this;\n\n      var _options$quantizedAtt2 = options.quantizedAttributes,\n          quantizedAttributes = _options$quantizedAtt2 === void 0 ? [] : _options$quantizedAtt2;\n      var attribute_type = dracoAttribute.attribute_type();\n      var skip = quantizedAttributes.map(function (type) {\n        return _this.decoder[type];\n      }).includes(attribute_type);\n\n      if (skip) {\n        var transform = new this.draco.AttributeQuantizationTransform();\n\n        try {\n          if (transform.InitFromAttribute(dracoAttribute)) {\n            return {\n              quantization_bits: transform.quantization_bits(),\n              range: transform.range(),\n              min_values: new Float32Array([1, 2, 3]).map(function (i) {\n                return transform.min_value(i);\n              })\n            };\n          }\n        } finally {\n          this.draco.destroy(transform);\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_getOctahedronTransform\",\n    value: function _getOctahedronTransform(dracoAttribute, options) {\n      var _this2 = this;\n\n      var _options$octahedronAt2 = options.octahedronAttributes,\n          octahedronAttributes = _options$octahedronAt2 === void 0 ? [] : _options$octahedronAt2;\n      var attribute_type = dracoAttribute.attribute_type();\n      var octahedron = octahedronAttributes.map(function (type) {\n        return _this2.decoder[type];\n      }).includes(attribute_type);\n\n      if (octahedron) {\n        var transform = new this.draco.AttributeQuantizationTransform();\n\n        try {\n          if (transform.InitFromAttribute(dracoAttribute)) {\n            return {\n              quantization_bits: transform.quantization_bits()\n            };\n          }\n        } finally {\n          this.draco.destroy(transform);\n        }\n      }\n\n      return null;\n    }\n  }]);\n\n  return DracoParser;\n}();\n\nexport { DracoParser as default };\n\nfunction getDracoDataType(draco, attributeType) {\n  switch (attributeType) {\n    case Float32Array:\n      return draco.DT_FLOAT32;\n\n    case Int8Array:\n      return draco.DT_INT8;\n\n    case Int16Array:\n      return draco.DT_INT16;\n\n    case Int32Array:\n      return draco.DT_INT32;\n\n    case Uint8Array:\n      return draco.DT_UINT8;\n\n    case Uint16Array:\n      return draco.DT_UINT16;\n\n    case Uint32Array:\n      return draco.DT_UINT32;\n\n    default:\n      return draco.DT_INVALID;\n  }\n}\n\nfunction getInt32Array(dracoArray) {\n  var numValues = dracoArray.size();\n  var intArray = new Int32Array(numValues);\n\n  for (var i = 0; i < numValues; i++) {\n    intArray[i] = dracoArray.GetValue(i);\n  }\n\n  return intArray;\n}\n\nfunction getUint32Array(dracoArray) {\n  var numValues = dracoArray.size();\n  var intArray = new Int32Array(numValues);\n\n  for (var i = 0; i < numValues; i++) {\n    intArray[i] = dracoArray.GetValue(i);\n  }\n\n  return intArray;\n}","map":{"version":3,"mappings":"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","names":["getMeshBoundingBox","getDracoSchema","GEOMETRY_TYPE","TRIANGULAR_MESH","POINT_CLOUD","DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP","POSITION","NORMAL","COLOR","TEX_COORD","DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","INDEX_ITEM_SIZE","DracoParser","constructor","draco","_defineProperty","decoder","Decoder","metadataQuerier","MetadataQuerier","destroy","parseSync","arrayBuffer","options","buffer","DecoderBuffer","Init","byteLength","_disableAttributeTransforms","geometry_type","GetEncodedGeometryType","dracoGeometry","Mesh","PointCloud","dracoStatus","DecodeBufferToMesh","DecodeBufferToPointCloud","Error","ok","ptr","message","error_msg","loaderData","_getDracoLoaderData","geometry","_getMeshData","boundingBox","attributes","schema","indices","data","loader","header","vertexCount","num_points","metadata","_getTopLevelMetadata","_getDracoAttributes","num_attributes","num_faces","dracoAttributes","attributeId","dracoAttribute","GetAttribute","_getAttributeMetadata","unique_id","attribute_type","data_type","num_components","byte_offset","byte_stride","normalized","attribute_index","quantization","_getQuantizationTransform","quantization_transform","octahedron","_getOctahedronTransform","octahedron_transform","_getMeshAttributes","positionAttribute","topology","mode","value","_getTriangleStripIndices","size","_getTriangleListIndices","Object","values","loaderAttribute","attributeName","_deduceAttributeName","name","_getAttributeValues","byteOffset","byteStride","numFaces","numIndices","_malloc","GetTrianglesUInt32Array","HEAPF32","slice","_free","dracoArray","DracoInt32Array","GetTriangleStripsFromMesh","getUint32Array","attribute","TypedArrayCtor","numComponents","numPoints","numValues","BYTES_PER_ELEMENT","dataType","getDracoDataType","GetAttributeDataArrayForAllPoints","uniqueId","entries","extraAttributes","attributeUniqueId","thisAttributeType","dracoAttributeConstant","attributeType","entryName","attributeNameEntry","string","dracoMetadata","GetMetadata","_getDracoMetadata","GetAttributeMetadata","result","numEntries","NumEntries","entryIndex","GetEntryName","_getDracoMetadataField","GetIntEntryArray","intArray","getInt32Array","int","GetIntEntry","GetStringEntry","double","GetDoubleEntry","quantizedAttributes","octahedronAttributes","skipAttributes","dracoAttributeName","SkipAttributeTransform","skip","map","type","includes","transform","AttributeQuantizationTransform","InitFromAttribute","quantization_bits","range","min_values","i","min_value","DT_FLOAT32","DT_INT8","DT_INT16","DT_INT32","DT_UINT8","DT_UINT16","DT_UINT32","DT_INVALID","GetValue"],"sources":["../../../src/lib/draco-parser.ts"],"sourcesContent":["/* eslint-disable camelcase */\n\nimport type {TypedArray, MeshAttribute, MeshGeometry} from '@loaders.gl/schema';\n\n// Draco types (input)\nimport type {\n  Draco3D,\n  Decoder,\n  Mesh,\n  PointCloud,\n  PointAttribute,\n  Metadata,\n  MetadataQuerier,\n  DracoInt32Array,\n  draco_DataType\n} from '../draco3d/draco3d-types';\n\n// Parsed data types (output)\nimport type {\n  DracoMesh,\n  DracoLoaderData,\n  DracoAttribute,\n  DracoMetadataEntry,\n  DracoQuantizationTransform,\n  DracoOctahedronTransform\n} from './draco-types';\n\nimport {getMeshBoundingBox} from '@loaders.gl/schema';\nimport {getDracoSchema} from './utils/get-draco-schema';\n\n/**\n * @param topology - How triangle indices should be generated (mesh only)\n * @param attributeNameEntry\n * @param extraAttributes\n * @param quantizedAttributes\n * @param octahedronAttributes\n */\nexport type DracoParseOptions = {\n  topology?: 'triangle-list' | 'triangle-strip';\n  attributeNameEntry?: string;\n  extraAttributes?: {[uniqueId: string]: number};\n  quantizedAttributes?: ('POSITION' | 'NORMAL' | 'COLOR' | 'TEX_COORD' | 'GENERIC')[];\n  octahedronAttributes?: ('POSITION' | 'NORMAL' | 'COLOR' | 'TEX_COORD' | 'GENERIC')[];\n};\n\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst GEOMETRY_TYPE = {\n  TRIANGULAR_MESH: 0,\n  POINT_CLOUD: 1\n};\n\n// Native Draco attribute names to GLTF attribute names.\nconst DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP = {\n  POSITION: 'POSITION',\n  NORMAL: 'NORMAL',\n  COLOR: 'COLOR_0',\n  TEX_COORD: 'TEXCOORD_0'\n};\n\nconst DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP = {\n  1: Int8Array,\n  2: Uint8Array,\n  3: Int16Array,\n  4: Uint16Array,\n  5: Int32Array,\n  6: Uint32Array,\n  9: Float32Array\n};\n\nconst INDEX_ITEM_SIZE = 4;\n\nexport default class DracoParser {\n  draco: Draco3D;\n  decoder: Decoder;\n  metadataQuerier: MetadataQuerier;\n\n  // draco - the draco decoder, either import `draco3d` or load dynamically\n  constructor(draco: Draco3D) {\n    this.draco = draco;\n    this.decoder = new this.draco.Decoder();\n    this.metadataQuerier = new this.draco.MetadataQuerier();\n  }\n\n  /**\n   * Destroy draco resources\n   */\n  destroy(): void {\n    this.draco.destroy(this.decoder);\n    this.draco.destroy(this.metadataQuerier);\n  }\n\n  /**\n   * NOTE: caller must call `destroyGeometry` on the return value after using it\n   * @param arrayBuffer\n   * @param options\n   */\n  parseSync(arrayBuffer: ArrayBuffer, options: DracoParseOptions = {}): DracoMesh {\n    const buffer = new this.draco.DecoderBuffer();\n    buffer.Init(new Int8Array(arrayBuffer), arrayBuffer.byteLength);\n\n    this._disableAttributeTransforms(options);\n\n    const geometry_type = this.decoder.GetEncodedGeometryType(buffer);\n    const dracoGeometry =\n      geometry_type === this.draco.TRIANGULAR_MESH\n        ? new this.draco.Mesh()\n        : new this.draco.PointCloud();\n\n    try {\n      let dracoStatus;\n      switch (geometry_type) {\n        case this.draco.TRIANGULAR_MESH:\n          dracoStatus = this.decoder.DecodeBufferToMesh(buffer, dracoGeometry as Mesh);\n          break;\n\n        case this.draco.POINT_CLOUD:\n          dracoStatus = this.decoder.DecodeBufferToPointCloud(buffer, dracoGeometry);\n          break;\n\n        default:\n          throw new Error('DRACO: Unknown geometry type.');\n      }\n\n      if (!dracoStatus.ok() || !dracoGeometry.ptr) {\n        const message = `DRACO decompression failed: ${dracoStatus.error_msg()}`;\n        // console.error(message);\n        throw new Error(message);\n      }\n\n      const loaderData = this._getDracoLoaderData(dracoGeometry, geometry_type, options);\n\n      const geometry = this._getMeshData(dracoGeometry, loaderData, options);\n\n      const boundingBox = getMeshBoundingBox(geometry.attributes);\n\n      const schema = getDracoSchema(geometry.attributes, loaderData, geometry.indices);\n\n      const data: DracoMesh = {\n        loader: 'draco',\n        loaderData,\n        header: {\n          vertexCount: dracoGeometry.num_points(),\n          boundingBox\n        },\n        ...geometry,\n        schema\n      };\n      return data;\n    } finally {\n      this.draco.destroy(buffer);\n      if (dracoGeometry) {\n        this.draco.destroy(dracoGeometry);\n      }\n    }\n  }\n\n  // Draco specific \"loader data\"\n\n  /**\n   * Extract\n   * @param dracoGeometry\n   * @param geometry_type\n   * @param options\n   * @returns\n   */\n  _getDracoLoaderData(\n    dracoGeometry: Mesh | PointCloud,\n    geometry_type,\n    options: DracoParseOptions\n  ): DracoLoaderData {\n    const metadata = this._getTopLevelMetadata(dracoGeometry);\n    const attributes = this._getDracoAttributes(dracoGeometry, options);\n\n    return {\n      geometry_type,\n      num_attributes: dracoGeometry.num_attributes(),\n      num_points: dracoGeometry.num_points(),\n      num_faces: dracoGeometry instanceof this.draco.Mesh ? dracoGeometry.num_faces() : 0,\n      metadata,\n      attributes\n    };\n  }\n\n  /**\n   * Extract all draco provided information and metadata for each attribute\n   * @param dracoGeometry\n   * @param options\n   * @returns\n   */\n  _getDracoAttributes(\n    dracoGeometry: Mesh | PointCloud,\n    options: DracoParseOptions\n  ): {[unique_id: number]: DracoAttribute} {\n    const dracoAttributes: {[unique_id: number]: DracoAttribute} = {};\n\n    for (let attributeId = 0; attributeId < dracoGeometry.num_attributes(); attributeId++) {\n      // Note: Draco docs do not seem clear on `GetAttribute` ids just being a zero-based index,\n      // but it does seems to work this way\n      const dracoAttribute = this.decoder.GetAttribute(dracoGeometry, attributeId);\n\n      const metadata = this._getAttributeMetadata(dracoGeometry, attributeId);\n\n      dracoAttributes[dracoAttribute.unique_id()] = {\n        unique_id: dracoAttribute.unique_id(),\n        attribute_type: dracoAttribute.attribute_type(),\n        data_type: dracoAttribute.data_type(),\n        num_components: dracoAttribute.num_components(),\n\n        byte_offset: dracoAttribute.byte_offset(),\n        byte_stride: dracoAttribute.byte_stride(),\n        normalized: dracoAttribute.normalized(),\n        attribute_index: attributeId,\n\n        metadata\n      };\n\n      // Add transformation parameters for any attributes app wants untransformed\n      const quantization = this._getQuantizationTransform(dracoAttribute, options);\n      if (quantization) {\n        dracoAttributes[dracoAttribute.unique_id()].quantization_transform = quantization;\n      }\n\n      const octahedron = this._getOctahedronTransform(dracoAttribute, options);\n      if (octahedron) {\n        dracoAttributes[dracoAttribute.unique_id()].octahedron_transform = octahedron;\n      }\n    }\n\n    return dracoAttributes;\n  }\n\n  /**\n   * Get standard loaders.gl mesh category data\n   * Extracts the geometry from draco\n   * @param dracoGeometry\n   * @param options\n   */\n  _getMeshData(\n    dracoGeometry: Mesh | PointCloud,\n    loaderData: DracoLoaderData,\n    options: DracoParseOptions\n  ): MeshGeometry {\n    const attributes = this._getMeshAttributes(loaderData, dracoGeometry, options);\n\n    const positionAttribute = attributes.POSITION;\n    if (!positionAttribute) {\n      throw new Error('DRACO: No position attribute found.');\n    }\n\n    // For meshes, we need indices to define the faces.\n    if (dracoGeometry instanceof this.draco.Mesh) {\n      switch (options.topology) {\n        case 'triangle-strip':\n          return {\n            topology: 'triangle-strip',\n            mode: 4, // GL.TRIANGLES\n            attributes,\n            indices: {\n              value: this._getTriangleStripIndices(dracoGeometry),\n              size: 1\n            }\n          };\n        case 'triangle-list':\n        default:\n          return {\n            topology: 'triangle-list',\n            mode: 5, // GL.TRIANGLE_STRIP\n            attributes,\n            indices: {\n              value: this._getTriangleListIndices(dracoGeometry),\n              size: 1\n            }\n          };\n      }\n    }\n\n    // PointCloud - must come last as Mesh inherits from PointCloud\n    return {\n      topology: 'point-list',\n      mode: 0, // GL.POINTS\n      attributes\n    };\n  }\n\n  _getMeshAttributes(\n    loaderData: DracoLoaderData,\n    dracoGeometry: Mesh | PointCloud,\n    options: DracoParseOptions\n  ): {[attributeName: string]: MeshAttribute} {\n    const attributes: {[key: string]: MeshAttribute} = {};\n\n    for (const loaderAttribute of Object.values(loaderData.attributes)) {\n      const attributeName = this._deduceAttributeName(loaderAttribute, options);\n      loaderAttribute.name = attributeName;\n      const {value, size} = this._getAttributeValues(dracoGeometry, loaderAttribute);\n      attributes[attributeName] = {\n        value,\n        size,\n        byteOffset: loaderAttribute.byte_offset,\n        byteStride: loaderAttribute.byte_stride,\n        normalized: loaderAttribute.normalized\n      };\n    }\n\n    return attributes;\n  }\n\n  // MESH INDICES EXTRACTION\n\n  /**\n   * For meshes, we need indices to define the faces.\n   * @param dracoGeometry\n   */\n  _getTriangleListIndices(dracoGeometry: Mesh) {\n    // Example on how to retrieve mesh and attributes.\n    const numFaces = dracoGeometry.num_faces();\n    const numIndices = numFaces * 3;\n    const byteLength = numIndices * INDEX_ITEM_SIZE;\n\n    const ptr = this.draco._malloc(byteLength);\n    try {\n      this.decoder.GetTrianglesUInt32Array(dracoGeometry, byteLength, ptr);\n      return new Uint32Array(this.draco.HEAPF32.buffer, ptr, numIndices).slice();\n    } finally {\n      this.draco._free(ptr);\n    }\n  }\n\n  /**\n   * For meshes, we need indices to define the faces.\n   * @param dracoGeometry\n   */\n  _getTriangleStripIndices(dracoGeometry: Mesh) {\n    const dracoArray = new this.draco.DracoInt32Array();\n    try {\n      /* const numStrips = */ this.decoder.GetTriangleStripsFromMesh(dracoGeometry, dracoArray);\n      return getUint32Array(dracoArray);\n    } finally {\n      this.draco.destroy(dracoArray);\n    }\n  }\n\n  /**\n   *\n   * @param dracoGeometry\n   * @param dracoAttribute\n   * @param attributeName\n   */\n  _getAttributeValues(\n    dracoGeometry: Mesh | PointCloud,\n    attribute: DracoAttribute\n  ): {value: TypedArray; size: number} {\n    const TypedArrayCtor = DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP[attribute.data_type];\n    const numComponents = attribute.num_components;\n    const numPoints = dracoGeometry.num_points();\n    const numValues = numPoints * numComponents;\n\n    const byteLength = numValues * TypedArrayCtor.BYTES_PER_ELEMENT;\n    const dataType = getDracoDataType(this.draco, TypedArrayCtor);\n\n    let value: TypedArray;\n\n    const ptr = this.draco._malloc(byteLength);\n    try {\n      const dracoAttribute = this.decoder.GetAttribute(dracoGeometry, attribute.attribute_index);\n      this.decoder.GetAttributeDataArrayForAllPoints(\n        dracoGeometry,\n        dracoAttribute,\n        dataType,\n        byteLength,\n        ptr\n      );\n      value = new TypedArrayCtor(this.draco.HEAPF32.buffer, ptr, numValues).slice();\n    } finally {\n      this.draco._free(ptr);\n    }\n\n    return {value, size: numComponents};\n  }\n\n  // Attribute names\n\n  /** \n   * DRACO does not store attribute names - We need to deduce an attribute name\n   * for each attribute\n  _getAttributeNames(\n    dracoGeometry: Mesh | PointCloud,\n    options: DracoParseOptions\n  ): {[unique_id: number]: string} {\n    const attributeNames: {[unique_id: number]: string} = {};\n    for (let attributeId = 0; attributeId < dracoGeometry.num_attributes(); attributeId++) {\n      const dracoAttribute = this.decoder.GetAttribute(dracoGeometry, attributeId);\n      const attributeName = this._deduceAttributeName(dracoAttribute, options);\n      attributeNames[attributeName] = attributeName;\n    }\n    return attributeNames;\n  }\n   */\n\n  /**\n   * Deduce an attribute name.\n   * @note DRACO does not save attribute names, just general type (POSITION, COLOR)\n   * to help optimize compression. We generate GLTF compatible names for the Draco-recognized\n   * types\n   * @param attributeData\n   */\n  _deduceAttributeName(attribute: DracoAttribute, options: DracoParseOptions): string {\n    // Deduce name based on application provided map\n    const uniqueId = attribute.unique_id;\n    for (const [attributeName, attributeUniqueId] of Object.entries(\n      options.extraAttributes || {}\n    )) {\n      if (attributeUniqueId === uniqueId) {\n        return attributeName;\n      }\n    }\n\n    // Deduce name based on attribute type\n    const thisAttributeType = attribute.attribute_type;\n    for (const dracoAttributeConstant in DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP) {\n      const attributeType = this.draco[dracoAttributeConstant];\n      if (attributeType === thisAttributeType) {\n        // TODO - Return unique names if there multiple attributes per type\n        // (e.g. multiple TEX_COORDS or COLORS)\n        return DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP[dracoAttributeConstant];\n      }\n    }\n\n    // Look up in metadata\n    // TODO - shouldn't this have priority?\n    const entryName = options.attributeNameEntry || 'name';\n    if (attribute.metadata[entryName]) {\n      return attribute.metadata[entryName].string;\n    }\n\n    // Attribute of \"GENERIC\" type, we need to assign some name\n    return `CUSTOM_ATTRIBUTE_${uniqueId}`;\n  }\n\n  // METADATA EXTRACTION\n\n  /** Get top level metadata */\n  _getTopLevelMetadata(dracoGeometry: Mesh | PointCloud) {\n    const dracoMetadata = this.decoder.GetMetadata(dracoGeometry);\n    return this._getDracoMetadata(dracoMetadata);\n  }\n\n  /** Get per attribute metadata */\n  _getAttributeMetadata(dracoGeometry: Mesh | PointCloud, attributeId: number) {\n    const dracoMetadata = this.decoder.GetAttributeMetadata(dracoGeometry, attributeId);\n    return this._getDracoMetadata(dracoMetadata);\n  }\n\n  /**\n   * Extract metadata field values\n   * @param dracoMetadata\n   * @returns\n   */\n  _getDracoMetadata(dracoMetadata: Metadata): {[entry: string]: DracoMetadataEntry} {\n    // The not so wonderful world of undocumented Draco APIs :(\n    if (!dracoMetadata || !dracoMetadata.ptr) {\n      return {};\n    }\n    const result = {};\n    const numEntries = this.metadataQuerier.NumEntries(dracoMetadata);\n    for (let entryIndex = 0; entryIndex < numEntries; entryIndex++) {\n      const entryName = this.metadataQuerier.GetEntryName(dracoMetadata, entryIndex);\n      result[entryName] = this._getDracoMetadataField(dracoMetadata, entryName);\n    }\n    return result;\n  }\n\n  /**\n   * Extracts possible values for one metadata entry by name\n   * @param dracoMetadata\n   * @param entryName\n   */\n  _getDracoMetadataField(dracoMetadata: Metadata, entryName: string): DracoMetadataEntry {\n    const dracoArray = new this.draco.DracoInt32Array();\n    try {\n      // Draco metadata fields can hold int32 arrays\n      this.metadataQuerier.GetIntEntryArray(dracoMetadata, entryName, dracoArray);\n      const intArray = getInt32Array(dracoArray);\n      return {\n        int: this.metadataQuerier.GetIntEntry(dracoMetadata, entryName),\n        string: this.metadataQuerier.GetStringEntry(dracoMetadata, entryName),\n        double: this.metadataQuerier.GetDoubleEntry(dracoMetadata, entryName),\n        intArray\n      };\n    } finally {\n      this.draco.destroy(dracoArray);\n    }\n  }\n\n  // QUANTIZED ATTRIBUTE SUPPORT (NO DECOMPRESSION)\n\n  /** Skip transforms for specific attribute types */\n  _disableAttributeTransforms(options: DracoParseOptions) {\n    const {quantizedAttributes = [], octahedronAttributes = []} = options;\n    const skipAttributes = [...quantizedAttributes, ...octahedronAttributes];\n    for (const dracoAttributeName of skipAttributes) {\n      this.decoder.SkipAttributeTransform(this.draco[dracoAttributeName]);\n    }\n  }\n\n  /**\n   * Extract (and apply?) Position Transform\n   * @todo not used\n   */\n  _getQuantizationTransform(\n    dracoAttribute: PointAttribute,\n    options: DracoParseOptions\n  ): DracoQuantizationTransform | null {\n    const {quantizedAttributes = []} = options;\n    const attribute_type = dracoAttribute.attribute_type();\n    const skip = quantizedAttributes.map((type) => this.decoder[type]).includes(attribute_type);\n    if (skip) {\n      const transform = new this.draco.AttributeQuantizationTransform();\n      try {\n        if (transform.InitFromAttribute(dracoAttribute)) {\n          return {\n            quantization_bits: transform.quantization_bits(),\n            range: transform.range(),\n            min_values: new Float32Array([1, 2, 3]).map((i) => transform.min_value(i))\n          };\n        }\n      } finally {\n        this.draco.destroy(transform);\n      }\n    }\n    return null;\n  }\n\n  _getOctahedronTransform(\n    dracoAttribute: PointAttribute,\n    options: DracoParseOptions\n  ): DracoOctahedronTransform | null {\n    const {octahedronAttributes = []} = options;\n    const attribute_type = dracoAttribute.attribute_type();\n    const octahedron = octahedronAttributes\n      .map((type) => this.decoder[type])\n      .includes(attribute_type);\n    if (octahedron) {\n      const transform = new this.draco.AttributeQuantizationTransform();\n      try {\n        if (transform.InitFromAttribute(dracoAttribute)) {\n          return {\n            quantization_bits: transform.quantization_bits()\n          };\n        }\n      } finally {\n        this.draco.destroy(transform);\n      }\n    }\n    return null;\n  }\n\n  // HELPERS\n}\n\n/**\n * Get draco specific data type by TypedArray constructor type\n * @param attributeType\n * @returns draco specific data type\n */\nfunction getDracoDataType(draco: Draco3D, attributeType: any): draco_DataType {\n  switch (attributeType) {\n    case Float32Array:\n      return draco.DT_FLOAT32;\n    case Int8Array:\n      return draco.DT_INT8;\n    case Int16Array:\n      return draco.DT_INT16;\n    case Int32Array:\n      return draco.DT_INT32;\n    case Uint8Array:\n      return draco.DT_UINT8;\n    case Uint16Array:\n      return draco.DT_UINT16;\n    case Uint32Array:\n      return draco.DT_UINT32;\n    default:\n      return draco.DT_INVALID;\n  }\n}\n\n/**\n * Copy a Draco int32 array into a JS typed array\n */\nfunction getInt32Array(dracoArray: DracoInt32Array): Int32Array {\n  const numValues = dracoArray.size();\n  const intArray = new Int32Array(numValues);\n  for (let i = 0; i < numValues; i++) {\n    intArray[i] = dracoArray.GetValue(i);\n  }\n  return intArray;\n}\n\n/**\n * Copy a Draco int32 array into a JS typed array\n */\nfunction getUint32Array(dracoArray: DracoInt32Array): Int32Array {\n  const numValues = dracoArray.size();\n  const intArray = new Int32Array(numValues);\n  for (let i = 0; i < numValues; i++) {\n    intArray[i] = dracoArray.GetValue(i);\n  }\n  return intArray;\n}\n"]},"metadata":{},"sourceType":"module"}