{"ast":null,"code":"import { getCode, getVertices, CONTOUR_TYPE } from './marching-squares';\nexport function generateContours(_ref) {\n  let {\n    thresholdData,\n    colors,\n    cellWeights,\n    gridSize,\n    gridOrigin,\n    cellSize\n  } = _ref;\n  const contourSegments = [];\n  const contourPolygons = [];\n  const width = gridSize[0];\n  const height = gridSize[1];\n  let segmentIndex = 0;\n  let polygonIndex = 0;\n\n  for (const data of thresholdData) {\n    const {\n      contour\n    } = data;\n    const {\n      threshold\n    } = contour;\n\n    for (let x = -1; x < width; x++) {\n      for (let y = -1; y < height; y++) {\n        const {\n          code,\n          meanCode\n        } = getCode({\n          cellWeights,\n          threshold,\n          x,\n          y,\n          width,\n          height\n        });\n        const opts = {\n          gridOrigin,\n          cellSize,\n          x,\n          y,\n          width,\n          height,\n          code,\n          meanCode,\n          thresholdData: data\n        };\n\n        if (Array.isArray(threshold)) {\n          opts.type = CONTOUR_TYPE.ISO_BANDS;\n          const polygons = getVertices(opts);\n\n          for (const polygon of polygons) {\n            contourPolygons[polygonIndex++] = {\n              vertices: polygon,\n              contour\n            };\n          }\n        } else {\n          opts.type = CONTOUR_TYPE.ISO_LINES;\n          const vertices = getVertices(opts);\n\n          for (let i = 0; i < vertices.length; i += 2) {\n            contourSegments[segmentIndex++] = {\n              start: vertices[i],\n              end: vertices[i + 1],\n              contour\n            };\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    contourSegments,\n    contourPolygons\n  };\n}","map":{"version":3,"mappings":"AAAA,SAAQA,OAAR,EAAiBC,WAAjB,EAA8BC,YAA9B,QAAiD,oBAAjD;AAIA,OAAO,SAASC,gBAAT,OAOJ;EAAA,IAP8B;IAC/BC,aAD+B;IAE/BC,MAF+B;IAG/BC,WAH+B;IAI/BC,QAJ+B;IAK/BC,UAL+B;IAM/BC;EAN+B,CAO9B;EACD,MAAMC,eAAe,GAAG,EAAxB;EACA,MAAMC,eAAe,GAAG,EAAxB;EACA,MAAMC,KAAK,GAAGL,QAAQ,CAAC,CAAD,CAAtB;EACA,MAAMM,MAAM,GAAGN,QAAQ,CAAC,CAAD,CAAvB;EACA,IAAIO,YAAY,GAAG,CAAnB;EACA,IAAIC,YAAY,GAAG,CAAnB;;EAEA,KAAK,MAAMC,IAAX,IAAmBZ,aAAnB,EAAkC;IAChC,MAAM;MAACa;IAAD,IAAYD,IAAlB;IACA,MAAM;MAACE;IAAD,IAAcD,OAApB;;IACA,KAAK,IAAIE,CAAC,GAAG,CAAC,CAAd,EAAiBA,CAAC,GAAGP,KAArB,EAA4BO,CAAC,EAA7B,EAAiC;MAC/B,KAAK,IAAIC,CAAC,GAAG,CAAC,CAAd,EAAiBA,CAAC,GAAGP,MAArB,EAA6BO,CAAC,EAA9B,EAAkC;QAEhC,MAAM;UAACC,IAAD;UAAOC;QAAP,IAAmBtB,OAAO,CAAC;UAC/BM,WAD+B;UAE/BY,SAF+B;UAG/BC,CAH+B;UAI/BC,CAJ+B;UAK/BR,KAL+B;UAM/BC;QAN+B,CAAD,CAAhC;QAQA,MAAMU,IAAI,GAAG;UACXf,UADW;UAEXC,QAFW;UAGXU,CAHW;UAIXC,CAJW;UAKXR,KALW;UAMXC,MANW;UAOXQ,IAPW;UAQXC,QARW;UASXlB,aAAa,EAAEY;QATJ,CAAb;;QAWA,IAAIQ,KAAK,CAACC,OAAND,CAAcN,SAAdM,CAAJ,EAA8B;UAC5BD,IAAI,CAACG,IAALH,GAAYrB,YAAY,CAACyB,SAAzBJ;UACA,MAAMK,QAAQ,GAAG3B,WAAW,CAACsB,IAAD,CAA5B;;UACA,KAAK,MAAMM,OAAX,IAAsBD,QAAtB,EAAgC;YAC9BjB,eAAe,CAACI,YAAY,EAAb,CAAfJ,GAAkC;cAChCmB,QAAQ,EAAED,OADsB;cAEhCZ;YAFgC,CAAlCN;UAID;QARH,OASO;UAELY,IAAI,CAACG,IAALH,GAAYrB,YAAY,CAAC6B,SAAzBR;UACA,MAAMO,QAAQ,GAAG7B,WAAW,CAACsB,IAAD,CAA5B;;UACA,KAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,IAAI,CAA1C,EAA6C;YAC3CtB,eAAe,CAACI,YAAY,EAAb,CAAfJ,GAAkC;cAChCwB,KAAK,EAAEJ,QAAQ,CAACE,CAAD,CADiB;cAEhCG,GAAG,EAAEL,QAAQ,CAACE,CAAC,GAAG,CAAL,CAFmB;cAGhCf;YAHgC,CAAlCP;UAKD;QACF;MACF;IACF;EACF;;EACD,OAAO;IAACA,eAAD;IAAkBC;EAAlB,CAAP;AACD","names":["getCode","getVertices","CONTOUR_TYPE","generateContours","thresholdData","colors","cellWeights","gridSize","gridOrigin","cellSize","contourSegments","contourPolygons","width","height","segmentIndex","polygonIndex","data","contour","threshold","x","y","code","meanCode","opts","Array","isArray","type","ISO_BANDS","polygons","polygon","vertices","ISO_LINES","i","length","start","end"],"sources":["../../../src/contour-layer/contour-utils.js"],"sourcesContent":["import {getCode, getVertices, CONTOUR_TYPE} from './marching-squares';\n\n// Given all the cell weights, generates contours for each threshold.\n/* eslint-disable max-depth */\nexport function generateContours({\n  thresholdData,\n  colors,\n  cellWeights,\n  gridSize,\n  gridOrigin,\n  cellSize\n}) {\n  const contourSegments = [];\n  const contourPolygons = [];\n  const width = gridSize[0];\n  const height = gridSize[1];\n  let segmentIndex = 0;\n  let polygonIndex = 0;\n\n  for (const data of thresholdData) {\n    const {contour} = data;\n    const {threshold} = contour;\n    for (let x = -1; x < width; x++) {\n      for (let y = -1; y < height; y++) {\n        // Get the MarchingSquares code based on neighbor cell weights.\n        const {code, meanCode} = getCode({\n          cellWeights,\n          threshold,\n          x,\n          y,\n          width,\n          height\n        });\n        const opts = {\n          gridOrigin,\n          cellSize,\n          x,\n          y,\n          width,\n          height,\n          code,\n          meanCode,\n          thresholdData: data\n        };\n        if (Array.isArray(threshold)) {\n          opts.type = CONTOUR_TYPE.ISO_BANDS;\n          const polygons = getVertices(opts);\n          for (const polygon of polygons) {\n            contourPolygons[polygonIndex++] = {\n              vertices: polygon,\n              contour\n            };\n          }\n        } else {\n          // Get the intersection vertices based on MarchingSquares code.\n          opts.type = CONTOUR_TYPE.ISO_LINES;\n          const vertices = getVertices(opts);\n          for (let i = 0; i < vertices.length; i += 2) {\n            contourSegments[segmentIndex++] = {\n              start: vertices[i],\n              end: vertices[i + 1],\n              contour\n            };\n          }\n        }\n      }\n    }\n  }\n  return {contourSegments, contourPolygons};\n}\n/* eslint-enable max-depth */\n"]},"metadata":{},"sourceType":"module"}