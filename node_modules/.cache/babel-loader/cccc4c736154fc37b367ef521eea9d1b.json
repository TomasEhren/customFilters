{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport MathArray from './math-array';\nimport { checkNumber } from '../../lib/validators';\nimport assert from '../../lib/assert';\n\nvar Vector = /*#__PURE__*/function (_MathArray) {\n  _inherits(Vector, _MathArray);\n\n  var _super = _createSuper(Vector);\n\n  function Vector() {\n    _classCallCheck(this, Vector);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Vector, [{\n    key: \"ELEMENTS\",\n    get: function get() {\n      assert(false);\n      return 0;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(vector) {\n      assert(false);\n      return this;\n    }\n  }, {\n    key: \"x\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      this[1] = checkNumber(value);\n    }\n  }, {\n    key: \"len\",\n    value: function len() {\n      return Math.sqrt(this.lengthSquared());\n    }\n  }, {\n    key: \"magnitude\",\n    value: function magnitude() {\n      return this.len();\n    }\n  }, {\n    key: \"lengthSquared\",\n    value: function lengthSquared() {\n      var length = 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        length += this[i] * this[i];\n      }\n\n      return length;\n    }\n  }, {\n    key: \"magnitudeSquared\",\n    value: function magnitudeSquared() {\n      return this.lengthSquared();\n    }\n  }, {\n    key: \"distance\",\n    value: function distance(mathArray) {\n      return Math.sqrt(this.distanceSquared(mathArray));\n    }\n  }, {\n    key: \"distanceSquared\",\n    value: function distanceSquared(mathArray) {\n      var length = 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        var dist = this[i] - mathArray[i];\n        length += dist * dist;\n      }\n\n      return checkNumber(length);\n    }\n  }, {\n    key: \"dot\",\n    value: function dot(mathArray) {\n      var product = 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        product += this[i] * mathArray[i];\n      }\n\n      return checkNumber(product);\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      var length = this.magnitude();\n\n      if (length !== 0) {\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] /= length;\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply() {\n      for (var _len = arguments.length, vectors = new Array(_len), _key = 0; _key < _len; _key++) {\n        vectors[_key] = arguments[_key];\n      }\n\n      for (var _i = 0, _vectors = vectors; _i < _vectors.length; _i++) {\n        var vector = _vectors[_i];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] *= vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"divide\",\n    value: function divide() {\n      for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        vectors[_key2] = arguments[_key2];\n      }\n\n      for (var _i2 = 0, _vectors2 = vectors; _i2 < _vectors2.length; _i2++) {\n        var vector = _vectors2[_i2];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] /= vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"lengthSq\",\n    value: function lengthSq() {\n      return this.lengthSquared();\n    }\n  }, {\n    key: \"distanceTo\",\n    value: function distanceTo(vector) {\n      return this.distance(vector);\n    }\n  }, {\n    key: \"distanceToSquared\",\n    value: function distanceToSquared(vector) {\n      return this.distanceSquared(vector);\n    }\n  }, {\n    key: \"getComponent\",\n    value: function getComponent(i) {\n      assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n      return checkNumber(this[i]);\n    }\n  }, {\n    key: \"setComponent\",\n    value: function setComponent(i, value) {\n      assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n      this[i] = value;\n      return this.check();\n    }\n  }, {\n    key: \"addVectors\",\n    value: function addVectors(a, b) {\n      return this.copy(a).add(b);\n    }\n  }, {\n    key: \"subVectors\",\n    value: function subVectors(a, b) {\n      return this.copy(a).subtract(b);\n    }\n  }, {\n    key: \"multiplyVectors\",\n    value: function multiplyVectors(a, b) {\n      return this.copy(a).multiply(b);\n    }\n  }, {\n    key: \"addScaledVector\",\n    value: function addScaledVector(a, b) {\n      return this.add(new this.constructor(a).multiplyScalar(b));\n    }\n  }]);\n\n  return Vector;\n}(MathArray);\n\nexport { Vector as default };","map":{"version":3,"mappings":"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","names":["MathArray","checkNumber","assert","Vector","copy","vector","value","len","Math","sqrt","lengthSquared","magnitude","length","i","ELEMENTS","magnitudeSquared","distance","mathArray","distanceSquared","dist","dot","product","normalize","check","multiply","vectors","divide","lengthSq","distanceTo","distanceToSquared","getComponent","setComponent","addVectors","a","b","add","subVectors","subtract","multiplyVectors","addScaledVector","constructor","multiplyScalar"],"sources":["../../../../src/classes/base/vector.js"],"sourcesContent":["import MathArray from './math-array';\nimport {checkNumber} from '../../lib/validators';\nimport assert from '../../lib/assert';\n\nexport default class Vector extends MathArray {\n  get ELEMENTS() {\n    assert(false);\n    return 0;\n  }\n\n  // VIRTUAL METHODS\n  copy(vector) {\n    assert(false);\n    return this;\n  }\n\n  // ACCESSORS\n\n  get x() {\n    return this[0];\n  }\n  set x(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get y() {\n    return this[1];\n  }\n  set y(value) {\n    this[1] = checkNumber(value);\n  }\n\n  // NOTE: `length` is a reserved word for Arrays, so we can't use `v.length()`\n  // Offer `len` and `magnitude`\n  len() {\n    return Math.sqrt(this.lengthSquared());\n  }\n\n  magnitude() {\n    return this.len();\n  }\n\n  lengthSquared() {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      length += this[i] * this[i];\n    }\n    return length;\n  }\n\n  magnitudeSquared() {\n    return this.lengthSquared();\n  }\n\n  distance(mathArray) {\n    return Math.sqrt(this.distanceSquared(mathArray));\n  }\n\n  distanceSquared(mathArray) {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const dist = this[i] - mathArray[i];\n      length += dist * dist;\n    }\n    return checkNumber(length);\n  }\n\n  dot(mathArray) {\n    let product = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      product += this[i] * mathArray[i];\n    }\n    return checkNumber(product);\n  }\n\n  // MODIFIERS\n\n  normalize() {\n    const length = this.magnitude();\n    if (length !== 0) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= length;\n      }\n    }\n    return this.check();\n  }\n\n  // negate() {\n  //   for (let i = 0; i < this.ELEMENTS; ++i) {\n  //     this[i] = -this[i];\n  //   }\n  //   return this.check();\n  // }\n\n  // inverse() {\n  //   for (let i = 0; i < this.ELEMENTS; ++i) {\n  //     this[i] = 1 / this[i];\n  //   }\n  //   return this.check();\n  // }\n\n  multiply(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  divide(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  // THREE.js compatibility\n  lengthSq() {\n    return this.lengthSquared();\n  }\n\n  distanceTo(vector) {\n    return this.distance(vector);\n  }\n\n  distanceToSquared(vector) {\n    return this.distanceSquared(vector);\n  }\n\n  getComponent(i) {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    return checkNumber(this[i]);\n  }\n\n  setComponent(i, value) {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    this[i] = value;\n    return this.check();\n  }\n\n  addVectors(a, b) {\n    return this.copy(a).add(b);\n  }\n\n  subVectors(a, b) {\n    return this.copy(a).subtract(b);\n  }\n\n  multiplyVectors(a, b) {\n    return this.copy(a).multiply(b);\n  }\n\n  addScaledVector(a, b) {\n    // @ts-ignore error TS2351: Cannot use 'new' with an expression whose type lacks a call or construct signature.\n    return this.add(new this.constructor(a).multiplyScalar(b));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}