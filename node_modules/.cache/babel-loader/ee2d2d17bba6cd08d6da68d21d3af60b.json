{"ast":null,"code":"import _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { concatenateArrayBuffersAsync } from '@loaders.gl/loader-utils';\nimport { isResponse, isReadableStream, isAsyncIterable, isIterable, isIterator, isBlob, isBuffer } from '../../javascript-utils/is-type';\nimport { makeIterator } from '../../iterators/make-iterator/make-iterator';\nimport { checkResponse, makeResponse } from '../utils/response-utils';\nvar ERR_DATA = 'Cannot convert supplied data type';\nexport function getArrayBufferOrStringFromDataSync(data, loader, options) {\n  if (loader.text && typeof data === 'string') {\n    return data;\n  }\n\n  if (isBuffer(data)) {\n    data = data.buffer;\n  }\n\n  if (data instanceof ArrayBuffer) {\n    var arrayBuffer = data;\n\n    if (loader.text && !loader.binary) {\n      var textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(arrayBuffer);\n    }\n\n    return arrayBuffer;\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    if (loader.text && !loader.binary) {\n      var _textDecoder = new TextDecoder('utf8');\n\n      return _textDecoder.decode(data);\n    }\n\n    var _arrayBuffer = data.buffer;\n    var byteLength = data.byteLength || data.length;\n\n    if (data.byteOffset !== 0 || byteLength !== _arrayBuffer.byteLength) {\n      _arrayBuffer = _arrayBuffer.slice(data.byteOffset, data.byteOffset + byteLength);\n    }\n\n    return _arrayBuffer;\n  }\n\n  throw new Error(ERR_DATA);\n}\nexport function getArrayBufferOrStringFromData(_x, _x2, _x3) {\n  return _getArrayBufferOrStringFromData.apply(this, arguments);\n}\n\nfunction _getArrayBufferOrStringFromData() {\n  _getArrayBufferOrStringFromData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, loader, options) {\n    var isArrayBuffer, response;\n    return _regeneratorRuntime.wrap(function _callee$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n\n            if (!(typeof data === 'string' || isArrayBuffer)) {\n              _context3.next = 3;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", getArrayBufferOrStringFromDataSync(data, loader, options));\n\n          case 3:\n            if (!isBlob(data)) {\n              _context3.next = 7;\n              break;\n            }\n\n            _context3.next = 6;\n            return makeResponse(data);\n\n          case 6:\n            data = _context3.sent;\n\n          case 7:\n            if (!isResponse(data)) {\n              _context3.next = 21;\n              break;\n            }\n\n            response = data;\n            _context3.next = 11;\n            return checkResponse(response);\n\n          case 11:\n            if (!loader.binary) {\n              _context3.next = 17;\n              break;\n            }\n\n            _context3.next = 14;\n            return response.arrayBuffer();\n\n          case 14:\n            _context3.t0 = _context3.sent;\n            _context3.next = 20;\n            break;\n\n          case 17:\n            _context3.next = 19;\n            return response.text();\n\n          case 19:\n            _context3.t0 = _context3.sent;\n\n          case 20:\n            return _context3.abrupt(\"return\", _context3.t0);\n\n          case 21:\n            if (isReadableStream(data)) {\n              data = makeIterator(data, options);\n            }\n\n            if (!(isIterable(data) || isAsyncIterable(data))) {\n              _context3.next = 24;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", concatenateArrayBuffersAsync(data));\n\n          case 24:\n            throw new Error(ERR_DATA);\n\n          case 25:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getArrayBufferOrStringFromData.apply(this, arguments);\n}\n\nexport function getAsyncIterableFromData(_x4, _x5) {\n  return _getAsyncIterableFromData.apply(this, arguments);\n}\n\nfunction _getAsyncIterableFromData() {\n  _getAsyncIterableFromData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data, options) {\n    var response, body;\n    return _regeneratorRuntime.wrap(function _callee2$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!isIterator(data)) {\n              _context4.next = 2;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", data);\n\n          case 2:\n            if (!isResponse(data)) {\n              _context4.next = 10;\n              break;\n            }\n\n            response = data;\n            _context4.next = 6;\n            return checkResponse(response);\n\n          case 6:\n            _context4.next = 8;\n            return response.body;\n\n          case 8:\n            body = _context4.sent;\n            return _context4.abrupt(\"return\", makeIterator(body, options));\n\n          case 10:\n            if (!(isBlob(data) || isReadableStream(data))) {\n              _context4.next = 12;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", makeIterator(data, options));\n\n          case 12:\n            if (!isAsyncIterable(data)) {\n              _context4.next = 14;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", data[Symbol.asyncIterator]());\n\n          case 14:\n            return _context4.abrupt(\"return\", getIterableFromData(data));\n\n          case 15:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getAsyncIterableFromData.apply(this, arguments);\n}\n\nexport function getReadableStream(_x6) {\n  return _getReadableStream.apply(this, arguments);\n}\n\nfunction _getReadableStream() {\n  _getReadableStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(data) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee3$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (!isReadableStream(data)) {\n              _context5.next = 2;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", data);\n\n          case 2:\n            if (!isResponse(data)) {\n              _context5.next = 4;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", data.body);\n\n          case 4:\n            _context5.next = 6;\n            return makeResponse(data);\n\n          case 6:\n            response = _context5.sent;\n            return _context5.abrupt(\"return\", response.body);\n\n          case 8:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getReadableStream.apply(this, arguments);\n}\n\nfunction getIterableFromData(data) {\n  if (ArrayBuffer.isView(data)) {\n    return /*#__PURE__*/_regeneratorRuntime.mark(function oneChunk() {\n      return _regeneratorRuntime.wrap(function oneChunk$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return data.buffer;\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, oneChunk);\n    })();\n  }\n\n  if (data instanceof ArrayBuffer) {\n    return /*#__PURE__*/_regeneratorRuntime.mark(function oneChunk() {\n      return _regeneratorRuntime.wrap(function oneChunk$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return data;\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, oneChunk);\n    })();\n  }\n\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isIterable(data)) {\n    return data[Symbol.iterator]();\n  }\n\n  throw new Error(ERR_DATA);\n}","map":{"version":3,"mappings":"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","names":["concatenateArrayBuffersAsync","isResponse","isReadableStream","isAsyncIterable","isIterable","isIterator","isBlob","isBuffer","makeIterator","checkResponse","makeResponse","ERR_DATA","getArrayBufferOrStringFromDataSync","data","loader","options","text","buffer","ArrayBuffer","arrayBuffer","binary","textDecoder","TextDecoder","decode","isView","byteLength","length","byteOffset","slice","Error","getArrayBufferOrStringFromData","isArrayBuffer","response","getAsyncIterableFromData","body","Symbol","asyncIterator","getIterableFromData","getReadableStream","oneChunk","iterator"],"sources":["../../../../src/lib/loader-utils/get-data.ts"],"sourcesContent":["import type {\n  DataType,\n  SyncDataType,\n  BatchableDataType,\n  Loader,\n  LoaderOptions\n} from '@loaders.gl/loader-utils';\nimport {concatenateArrayBuffersAsync} from '@loaders.gl/loader-utils';\nimport {\n  isResponse,\n  isReadableStream,\n  isAsyncIterable,\n  isIterable,\n  isIterator,\n  isBlob,\n  isBuffer\n} from '../../javascript-utils/is-type';\nimport {makeIterator} from '../../iterators/make-iterator/make-iterator';\nimport {checkResponse, makeResponse} from '../utils/response-utils';\n\nconst ERR_DATA = 'Cannot convert supplied data type';\n\n// eslint-disable-next-line complexity\nexport function getArrayBufferOrStringFromDataSync(\n  data: SyncDataType,\n  loader: Loader,\n  options: LoaderOptions\n): ArrayBuffer | string {\n  if (loader.text && typeof data === 'string') {\n    return data;\n  }\n\n  if (isBuffer(data)) {\n    // @ts-ignore\n    data = data.buffer;\n  }\n\n  if (data instanceof ArrayBuffer) {\n    const arrayBuffer = data;\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(arrayBuffer);\n    }\n    return arrayBuffer;\n  }\n\n  // We may need to handle offsets\n  if (ArrayBuffer.isView(data)) {\n    // TextDecoder is invoked on typed arrays and will handle offsets\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(data);\n    }\n\n    let arrayBuffer = data.buffer;\n\n    // Since we are returning the underlying arrayBuffer, we must create a new copy\n    // if this typed array / Buffer is a partial view into the ArryayBuffer\n    // TODO - this is a potentially unnecessary copy\n    const byteLength = data.byteLength || data.length;\n    if (data.byteOffset !== 0 || byteLength !== arrayBuffer.byteLength) {\n      // console.warn(`loaders.gl copying arraybuffer of length ${byteLength}`);\n      arrayBuffer = arrayBuffer.slice(data.byteOffset, data.byteOffset + byteLength);\n    }\n    return arrayBuffer;\n  }\n\n  throw new Error(ERR_DATA);\n}\n\n// Convert async iterator to a promise\nexport async function getArrayBufferOrStringFromData(\n  data: DataType,\n  loader: Loader,\n  options: LoaderOptions\n): Promise<ArrayBuffer | string> {\n  const isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n  if (typeof data === 'string' || isArrayBuffer) {\n    return getArrayBufferOrStringFromDataSync(data as string | ArrayBuffer, loader, options);\n  }\n\n  // Blobs and files are FileReader compatible\n  if (isBlob(data)) {\n    data = await makeResponse(data);\n  }\n\n  if (isResponse(data)) {\n    const response = data as Response;\n    await checkResponse(response);\n    return loader.binary ? await response.arrayBuffer() : await response.text();\n  }\n\n  if (isReadableStream(data)) {\n    // @ts-expect-error TS2559 options type\n    data = makeIterator(data as ReadableStream, options);\n  }\n\n  if (isIterable(data) || isAsyncIterable(data)) {\n    // Assume arrayBuffer iterator - attempt to concatenate\n    return concatenateArrayBuffersAsync(data as AsyncIterable<ArrayBuffer>);\n  }\n\n  throw new Error(ERR_DATA);\n}\n\nexport async function getAsyncIterableFromData(\n  data: BatchableDataType,\n  options: LoaderOptions\n): Promise<AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>> {\n  if (isIterator(data)) {\n    return data as AsyncIterable<ArrayBuffer>;\n  }\n\n  if (isResponse(data)) {\n    const response = data as Response;\n    // Note Since this function is not async, we currently can't load error message, just status\n    await checkResponse(response);\n    // TODO - bug in polyfill, body can be a Promise under Node.js\n    // eslint-disable-next-line @typescript-eslint/await-thenable\n    const body = await response.body;\n    // TODO - body can be null?\n    return makeIterator(body as ReadableStream<Uint8Array>, options as any);\n  }\n\n  if (isBlob(data) || isReadableStream(data)) {\n    return makeIterator(data as Blob | ReadableStream, options as any);\n  }\n\n  if (isAsyncIterable(data)) {\n    return data[Symbol.asyncIterator]();\n  }\n\n  return getIterableFromData(data);\n}\n\nexport async function getReadableStream(data: BatchableDataType): Promise<ReadableStream> {\n  if (isReadableStream(data)) {\n    return data as ReadableStream;\n  }\n  if (isResponse(data)) {\n    // @ts-ignore\n    return data.body;\n  }\n  const response = await makeResponse(data);\n  // @ts-ignore\n  return response.body;\n}\n\n// HELPERS\n\nfunction getIterableFromData(data) {\n  // generate an iterator that emits a single chunk\n  if (ArrayBuffer.isView(data)) {\n    return (function* oneChunk() {\n      yield data.buffer;\n    })();\n  }\n\n  if (data instanceof ArrayBuffer) {\n    return (function* oneChunk() {\n      yield data;\n    })();\n  }\n\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isIterable(data)) {\n    return data[Symbol.iterator]();\n  }\n\n  throw new Error(ERR_DATA);\n}\n"]},"metadata":{},"sourceType":"module"}