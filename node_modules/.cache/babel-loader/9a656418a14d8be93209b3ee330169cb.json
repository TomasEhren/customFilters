{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { CompositeLayer } from '@deck.gl/core';\nimport { PolygonLayer } from '@deck.gl/layers';\n\nvar defaultProps = _objectSpread({}, PolygonLayer.defaultProps);\n\nvar GeoCellLayer = /*#__PURE__*/function (_CompositeLayer) {\n  _inherits(GeoCellLayer, _CompositeLayer);\n\n  var _super = _createSuper(GeoCellLayer);\n\n  function GeoCellLayer() {\n    _classCallCheck(this, GeoCellLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(GeoCellLayer, [{\n    key: \"indexToBounds\",\n    value: function indexToBounds() {\n      return null;\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props = this.props,\n          elevationScale = _this$props.elevationScale,\n          extruded = _this$props.extruded,\n          wireframe = _this$props.wireframe,\n          filled = _this$props.filled,\n          stroked = _this$props.stroked,\n          lineWidthUnits = _this$props.lineWidthUnits,\n          lineWidthScale = _this$props.lineWidthScale,\n          lineWidthMinPixels = _this$props.lineWidthMinPixels,\n          lineWidthMaxPixels = _this$props.lineWidthMaxPixels,\n          lineJointRounded = _this$props.lineJointRounded,\n          lineMiterLimit = _this$props.lineMiterLimit,\n          lineDashJustified = _this$props.lineDashJustified,\n          getElevation = _this$props.getElevation,\n          getFillColor = _this$props.getFillColor,\n          getLineColor = _this$props.getLineColor,\n          getLineWidth = _this$props.getLineWidth;\n      var _this$props2 = this.props,\n          updateTriggers = _this$props2.updateTriggers,\n          material = _this$props2.material,\n          transitions = _this$props2.transitions;\n      var CellLayer = this.getSubLayerClass('cell', PolygonLayer);\n      return new CellLayer({\n        filled: filled,\n        wireframe: wireframe,\n        extruded: extruded,\n        elevationScale: elevationScale,\n        stroked: stroked,\n        lineWidthUnits: lineWidthUnits,\n        lineWidthScale: lineWidthScale,\n        lineWidthMinPixels: lineWidthMinPixels,\n        lineWidthMaxPixels: lineWidthMaxPixels,\n        lineJointRounded: lineJointRounded,\n        lineMiterLimit: lineMiterLimit,\n        lineDashJustified: lineDashJustified,\n        material: material,\n        transitions: transitions,\n        getElevation: getElevation,\n        getFillColor: getFillColor,\n        getLineColor: getLineColor,\n        getLineWidth: getLineWidth\n      }, this.getSubLayerProps({\n        id: 'cell',\n        updateTriggers: {\n          getElevation: updateTriggers.getElevation,\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor,\n          getLineWidth: updateTriggers.getLineWidth\n        }\n      }), this.indexToBounds());\n    }\n  }]);\n\n  return GeoCellLayer;\n}(CompositeLayer);\n\nexport { GeoCellLayer as default };\nGeoCellLayer.layerName = 'GeoCellLayer';\nGeoCellLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":";;;;;AAAA,SAAQA,cAAR,QAA6B,eAA7B;AACA,SAAQC,YAAR,QAA2B,iBAA3B;;AAEA,IAAMC,YAAY,qBACbD,YAAY,CAACC,YADA,CAAlB;;IAIqBC,Y;;;;;;;;;;;;;WAEnBC,yBAAgB;MACd,OAAO,IAAP;IACD;;;WAEDC,wBAAe;MAEb,kBAiBI,KAAKC,KAjBT;MAAA,IACEC,cADF,eACEA,cADF;MAAA,IAEEC,QAFF,eAEEA,QAFF;MAAA,IAGEC,SAHF,eAGEA,SAHF;MAAA,IAIEC,MAJF,eAIEA,MAJF;MAAA,IAKEC,OALF,eAKEA,OALF;MAAA,IAMEC,cANF,eAMEA,cANF;MAAA,IAOEC,cAPF,eAOEA,cAPF;MAAA,IAQEC,kBARF,eAQEA,kBARF;MAAA,IASEC,kBATF,eASEA,kBATF;MAAA,IAUEC,gBAVF,eAUEA,gBAVF;MAAA,IAWEC,cAXF,eAWEA,cAXF;MAAA,IAYEC,iBAZF,eAYEA,iBAZF;MAAA,IAaEC,YAbF,eAaEA,YAbF;MAAA,IAcEC,YAdF,eAcEA,YAdF;MAAA,IAeEC,YAfF,eAeEA,YAfF;MAAA,IAgBEC,YAhBF,eAgBEA,YAhBF;MAoBA,mBAAgD,KAAKhB,KAArD;MAAA,IAAOiB,cAAP,gBAAOA,cAAP;MAAA,IAAuBC,QAAvB,gBAAuBA,QAAvB;MAAA,IAAiCC,WAAjC,gBAAiCA,WAAjC;MAGA,IAAMC,SAAS,GAAG,KAAKC,gBAAL,CAAsB,MAAtB,EAA8B1B,YAA9B,CAAlB;MACA,OAAO,IAAIyB,SAAJ,CACL;QACEhB,MADF,EACEA,MADF;QAEED,SAFF,EAEEA,SAFF;QAIED,QAJF,EAIEA,QAJF;QAKED,cALF,EAKEA,cALF;QAOEI,OAPF,EAOEA,OAPF;QAQEC,cARF,EAQEA,cARF;QASEC,cATF,EASEA,cATF;QAUEC,kBAVF,EAUEA,kBAVF;QAWEC,kBAXF,EAWEA,kBAXF;QAYEC,gBAZF,EAYEA,gBAZF;QAaEC,cAbF,EAaEA,cAbF;QAcEC,iBAdF,EAcEA,iBAdF;QAgBEM,QAhBF,EAgBEA,QAhBF;QAiBEC,WAjBF,EAiBEA,WAjBF;QAmBEN,YAnBF,EAmBEA,YAnBF;QAoBEC,YApBF,EAoBEA,YApBF;QAqBEC,YArBF,EAqBEA,YArBF;QAsBEC;MAtBF,CADK,EAyBL,KAAKM,gBAAL,CAAsB;QACpBC,EAAE,EAAE,MADgB;QAEpBN,cAAc,EAAE;UACdJ,YAAY,EAAEI,cAAc,CAACJ,YADf;UAEdC,YAAY,EAAEG,cAAc,CAACH,YAFf;UAGdC,YAAY,EAAEE,cAAc,CAACF,YAHf;UAIdC,YAAY,EAAEC,cAAc,CAACD;QAJf;MAFI,CAAtB,CAzBK,EAkCL,KAAKlB,aAAL,EAlCK,CAAP;IAoCD;;;;EApEuCJ,c;;SAArBG,Y;AAuErBA,YAAY,CAAC2B,SAAb3B,GAAyB,cAAzBA;AACAA,YAAY,CAACD,YAAbC,GAA4BD,YAA5BC","names":["CompositeLayer","PolygonLayer","defaultProps","GeoCellLayer","indexToBounds","renderLayers","props","elevationScale","extruded","wireframe","filled","stroked","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","lineJointRounded","lineMiterLimit","lineDashJustified","getElevation","getFillColor","getLineColor","getLineWidth","updateTriggers","material","transitions","CellLayer","getSubLayerClass","getSubLayerProps","id","layerName"],"sources":["../../../src/geo-cell-layer/GeoCellLayer.js"],"sourcesContent":["import {CompositeLayer} from '@deck.gl/core';\nimport {PolygonLayer} from '@deck.gl/layers';\n\nconst defaultProps = {\n  ...PolygonLayer.defaultProps\n};\n\nexport default class GeoCellLayer extends CompositeLayer {\n  // Implement to generate props to create geometry\n  indexToBounds() {\n    return null;\n  }\n\n  renderLayers() {\n    // Rendering props underlying layer\n    const {\n      elevationScale,\n      extruded,\n      wireframe,\n      filled,\n      stroked,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {updateTriggers, material, transitions} = this.props;\n\n    // Filled Polygon Layer\n    const CellLayer = this.getSubLayerClass('cell', PolygonLayer);\n    return new CellLayer(\n      {\n        filled,\n        wireframe,\n\n        extruded,\n        elevationScale,\n\n        stroked,\n        lineWidthUnits,\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels,\n        lineJointRounded,\n        lineMiterLimit,\n        lineDashJustified,\n\n        material,\n        transitions,\n\n        getElevation,\n        getFillColor,\n        getLineColor,\n        getLineWidth\n      },\n      this.getSubLayerProps({\n        id: 'cell',\n        updateTriggers: {\n          getElevation: updateTriggers.getElevation,\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor,\n          getLineWidth: updateTriggers.getLineWidth\n        }\n      }),\n      this.indexToBounds()\n    );\n  }\n}\n\nGeoCellLayer.layerName = 'GeoCellLayer';\nGeoCellLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}