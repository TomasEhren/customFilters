{"ast":null,"code":"export function mergeShaders(target, source) {\n  if (!source) {\n    return target;\n  }\n\n  const result = { ...target,\n    ...source\n  };\n\n  if ('defines' in source) {\n    result.defines = { ...target.defines,\n      ...source.defines\n    };\n  }\n\n  if ('modules' in source) {\n    result.modules = (target.modules || []).concat(source.modules);\n\n    if (source.modules.some(module => module.name === 'project64')) {\n      const index = result.modules.findIndex(module => module.name === 'project32');\n\n      if (index >= 0) {\n        result.modules.splice(index, 1);\n      }\n    }\n  }\n\n  if ('inject' in source) {\n    if (!target.inject) {\n      result.inject = source.inject;\n    } else {\n      const mergedInjection = { ...target.inject\n      };\n\n      for (const key in source.inject) {\n        mergedInjection[key] = (mergedInjection[key] || '') + source.inject[key];\n      }\n\n      result.inject = mergedInjection;\n    }\n  }\n\n  return result;\n}","map":{"version":3,"mappings":"AAqBA,OAAO,SAASA,YAAT,CAAsBC,MAAtB,EAA8BC,MAA9B,EAAsC;EAC3C,IAAI,CAACA,MAAL,EAAa;IACX,OAAOD,MAAP;EACD;;EACD,MAAME,MAAM,GAAG,EAAC,GAAGF,MAAJ;IAAY,GAAGC;EAAf,CAAf;;EAEA,IAAI,aAAaA,MAAjB,EAAyB;IACvBC,MAAM,CAACC,OAAPD,GAAiB,EAAC,GAAGF,MAAM,CAACG,OAAX;MAAoB,GAAGF,MAAM,CAACE;IAA9B,CAAjBD;EACD;;EACD,IAAI,aAAaD,MAAjB,EAAyB;IACvBC,MAAM,CAACE,OAAPF,GAAiB,CAACF,MAAM,CAACI,OAAPJ,IAAkB,EAAnB,EAAuBK,MAAvB,CAA8BJ,MAAM,CAACG,OAArC,CAAjBF;;IAGA,IAAID,MAAM,CAACG,OAAPH,CAAeK,IAAfL,CAAoBM,MAAM,IAAIA,MAAM,CAACC,IAAPD,KAAgB,WAA9CN,CAAJ,EAAgE;MAC9D,MAAMQ,KAAK,GAAGP,MAAM,CAACE,OAAPF,CAAeQ,SAAfR,CAAyBK,MAAM,IAAIA,MAAM,CAACC,IAAPD,KAAgB,WAAnDL,CAAd;;MACA,IAAIO,KAAK,IAAI,CAAb,EAAgB;QACdP,MAAM,CAACE,OAAPF,CAAeS,MAAfT,CAAsBO,KAAtBP,EAA6B,CAA7BA;MACD;IACF;EACF;;EACD,IAAI,YAAYD,MAAhB,EAAwB;IACtB,IAAI,CAACD,MAAM,CAACY,MAAZ,EAAoB;MAClBV,MAAM,CAACU,MAAPV,GAAgBD,MAAM,CAACW,MAAvBV;IADF,OAEO;MACL,MAAMW,eAAe,GAAG,EAAC,GAAGb,MAAM,CAACY;MAAX,CAAxB;;MACA,KAAK,MAAME,GAAX,IAAkBb,MAAM,CAACW,MAAzB,EAAiC;QAC/BC,eAAe,CAACC,GAAD,CAAfD,GAAuB,CAACA,eAAe,CAACC,GAAD,CAAfD,IAAwB,EAAzB,IAA+BZ,MAAM,CAACW,MAAPX,CAAca,GAAdb,CAAtDY;MACD;;MACDX,MAAM,CAACU,MAAPV,GAAgBW,eAAhBX;IACD;EACF;;EACD,OAAOA,MAAP;AACD","names":["mergeShaders","target","source","result","defines","modules","concat","some","module","name","index","findIndex","splice","inject","mergedInjection","key"],"sources":["../../../src/utils/shader.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Merge two luma.gl shader descriptors\nexport function mergeShaders(target, source) {\n  if (!source) {\n    return target;\n  }\n  const result = {...target, ...source};\n\n  if ('defines' in source) {\n    result.defines = {...target.defines, ...source.defines};\n  }\n  if ('modules' in source) {\n    result.modules = (target.modules || []).concat(source.modules);\n\n    // Hack: prject32 and project64 cannot co-exist\n    if (source.modules.some(module => module.name === 'project64')) {\n      const index = result.modules.findIndex(module => module.name === 'project32');\n      if (index >= 0) {\n        result.modules.splice(index, 1);\n      }\n    }\n  }\n  if ('inject' in source) {\n    if (!target.inject) {\n      result.inject = source.inject;\n    } else {\n      const mergedInjection = {...target.inject};\n      for (const key in source.inject) {\n        mergedInjection[key] = (mergedInjection[key] || '') + source.inject[key];\n      }\n      result.inject = mergedInjection;\n    }\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}