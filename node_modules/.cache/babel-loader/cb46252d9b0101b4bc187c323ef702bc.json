{"ast":null,"code":"import { clamp } from '@math.gl/core';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport { normalizeViewportProps } from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5,\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60,\n  position: [0, 0, 0]\n};\nexport class MapState extends ViewState {\n  constructor(options) {\n    options = { ...DEFAULT_STATE,\n      ...options\n    };\n    const {\n      makeViewport,\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      position,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n      startPanLngLat,\n      startZoomLngLat,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoom,\n      normalize\n    } = options || {};\n    assert(Number.isFinite(longitude));\n    assert(Number.isFinite(latitude));\n    assert(Number.isFinite(zoom));\n    super({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n      normalize,\n      position\n    });\n    this._state = {\n      startPanLngLat,\n      startZoomLngLat,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n    this.makeViewport = makeViewport;\n  }\n\n  panStart(_ref) {\n    let {\n      pos\n    } = _ref;\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  pan(_ref2) {\n    let {\n      pos,\n      startPos\n    } = _ref2;\n\n    const startPanLngLat = this._state.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this._viewportProps);\n    const newProps = viewport.panByPosition(startPanLngLat, pos);\n    return this._getUpdatedState(newProps);\n  }\n\n  panEnd() {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  rotateStart(_ref3) {\n    let {\n      pos\n    } = _ref3;\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  rotate(_ref4) {\n    let {\n      pos,\n      deltaAngleX = 0,\n      deltaAngleY = 0\n    } = _ref4;\n    const {\n      startRotatePos,\n      startBearing,\n      startPitch\n    } = this._state;\n\n    if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    let newRotation;\n\n    if (pos) {\n      newRotation = this._calculateNewPitchAndBearing({ ...this._getRotationParams(pos, startRotatePos),\n        startBearing,\n        startPitch\n      });\n    } else {\n      newRotation = {\n        bearing: startBearing + deltaAngleX,\n        pitch: startPitch + deltaAngleY\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  zoomStart(_ref5) {\n    let {\n      pos\n    } = _ref5;\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  zoom(_ref6) {\n    let {\n      pos,\n      startPos,\n      scale\n    } = _ref6;\n    let {\n      startZoom,\n      startZoomLngLat\n    } = this._state;\n\n    if (!Number.isFinite(startZoom)) {\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    const zoom = this._calculateNewZoom({\n      scale,\n      startZoom\n    });\n\n    const zoomedViewport = this.makeViewport({ ...this._viewportProps,\n      zoom\n    });\n    return this._getUpdatedState({\n      zoom,\n      ...zoomedViewport.panByPosition(startZoomLngLat, pos)\n    });\n  }\n\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n    return this._zoomFromCenter(speed);\n  }\n\n  zoomOut() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n    return this._zoomFromCenter(1 / speed);\n  }\n\n  moveLeft() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveRight() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveUp() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n    return this._panFromCenter([0, speed]);\n  }\n\n  moveDown() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n    return this._panFromCenter([0, -speed]);\n  }\n\n  rotateLeft() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - speed\n    });\n  }\n\n  rotateRight() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + speed\n    });\n  }\n\n  rotateUp() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + speed\n    });\n  }\n\n  rotateDown() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - speed\n    });\n  }\n\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = { ...this._viewportProps\n    };\n    const {\n      bearing,\n      longitude\n    } = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n\n    return props;\n  }\n\n  _zoomFromCenter(scale) {\n    const {\n      width,\n      height\n    } = this._viewportProps;\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {\n      width,\n      height\n    } = this._viewportProps;\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this._viewportProps,\n      ...this._state,\n      ...newProps\n    });\n  }\n\n  _applyConstraints(props) {\n    const {\n      maxZoom,\n      minZoom,\n      zoom\n    } = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n    const {\n      maxPitch,\n      minPitch,\n      pitch\n    } = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n    const {\n      normalize = true\n    } = props;\n\n    if (normalize) {\n      Object.assign(props, normalizeViewportProps(props));\n    }\n\n    return props;\n  }\n\n  _unproject(pos) {\n    const viewport = this.makeViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  _calculateNewZoom(_ref7) {\n    let {\n      scale,\n      startZoom\n    } = _ref7;\n    const {\n      maxZoom,\n      minZoom\n    } = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  _calculateNewPitchAndBearing(_ref8) {\n    let {\n      deltaScaleX,\n      deltaScaleY,\n      startBearing,\n      startPitch\n    } = _ref8;\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n    const {\n      minPitch,\n      maxPitch\n    } = this._viewportProps;\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n\n    if (deltaScaleY > 0) {\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n\n  _getRotationParams(pos, startPos) {\n    const deltaX = pos[0] - startPos[0];\n    const deltaY = pos[1] - startPos[1];\n    const centerY = pos[1];\n    const startY = startPos[1];\n    const {\n      width,\n      height\n    } = this._viewportProps;\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n    return {\n      deltaScaleX,\n      deltaScaleY\n    };\n  }\n\n}\nexport default class MapController extends Controller {\n  constructor(props) {\n    props.dragMode = props.dragMode || 'pan';\n    super(MapState, props);\n  }\n\n  setProps(props) {\n    props.position = props.position || [0, 0, 0];\n    const oldProps = this.controllerStateProps;\n    super.setProps(props);\n    const dimensionChanged = !oldProps || oldProps.height !== props.height;\n\n    if (dimensionChanged) {\n      this.updateViewport(new this.ControllerState({\n        makeViewport: this.makeViewport,\n        ...this.controllerStateProps,\n        ...this._state\n      }));\n    }\n  }\n\n  get linearTransitionProps() {\n    return ['longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'];\n  }\n\n}","map":{"version":3,"mappings":"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","names":["clamp","Controller","ViewState","normalizeViewportProps","assert","PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","DEFAULT_STATE","pitch","bearing","altitude","minZoom","maxZoom","minPitch","maxPitch","position","MapState","constructor","options","makeViewport","width","height","latitude","longitude","zoom","startPanLngLat","startZoomLngLat","startRotatePos","startBearing","startPitch","startZoom","normalize","Number","isFinite","_state","panStart","pos","_getUpdatedState","_unproject","pan","startPos","viewport","_viewportProps","newProps","panByPosition","panEnd","rotateStart","rotate","deltaAngleX","deltaAngleY","newRotation","_calculateNewPitchAndBearing","_getRotationParams","rotateEnd","zoomStart","scale","_calculateNewZoom","zoomedViewport","zoomEnd","zoomIn","speed","_zoomFromCenter","zoomOut","moveLeft","_panFromCenter","moveRight","moveUp","moveDown","rotateLeft","rotateRight","rotateUp","rotateDown","shortestPathFrom","viewState","fromProps","getViewportProps","props","Math","abs","offset","_applyConstraints","Object","assign","unproject","log2","deltaScaleX","deltaScaleY","deltaX","deltaY","centerY","startY","min","max","MapController","dragMode","setProps","oldProps","controllerStateProps","dimensionChanged","updateViewport","ControllerState","linearTransitionProps"],"sources":["../../../src/controllers/map-controller.ts"],"sourcesContent":["import {clamp} from '@math.gl/core';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport {normalizeViewportProps} from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\n\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5,\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60,\n  position: [0, 0, 0]\n};\n\ntype MapStateProps = {\n  makeViewport;\n\n  /** Mapbox viewport properties */\n  /** The width of the viewport */\n  width;\n  /** The height of the viewport */\n  height;\n  /** The latitude at the center of the viewport */\n  latitude;\n  /** The longitude at the center of the viewport */\n  longitude;\n  /** The tile zoom level of the map. */\n  zoom;\n  /** The bearing of the viewport in degrees */\n  bearing?: number;\n  /** The pitch of the viewport in degrees */\n  pitch?: number;\n  /**\n   * Specify the altitude of the viewport camera\n   * Unit: map heights, default 1.5\n   * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n   */\n  altitude?: number;\n  /** Viewport position */\n  position?: [number, number, number];\n\n  /** Viewport constraints */\n  maxZoom?: number;\n  minZoom?: number;\n  maxPitch?: number;\n  minPitch?: number;\n\n  /** Interaction states, required to calculate change during transform */\n  /* The point on map being grabbed when the operation first started */\n  startPanLngLat;\n  /* Center of the zoom when the operation first started */\n  startZoomLngLat;\n  /* Pointer position when rotation started */\n  startRotatePos;\n  /** Bearing when current perspective rotate operation started */\n  startBearing;\n  /** Pitch when current perspective rotate operation started */\n  startPitch;\n  /** Zoom when current zoom operation started */\n  startZoom;\n\n  /** Normalize viewport props to fit map height into viewport. Default `true` */\n  normalize;\n};\n\n/* Utils */\n\nexport class MapState extends ViewState {\n  constructor(options?: MapStateProps) {\n    // @ts-expect-error\n    options = {...DEFAULT_STATE, ...options};\n    const {\n      makeViewport,\n\n      /** Mapbox viewport properties */\n      /** The width of the viewport */\n      width,\n      /** The height of the viewport */\n      height,\n      /** The latitude at the center of the viewport */\n      latitude,\n      /** The longitude at the center of the viewport */\n      longitude,\n      /** The tile zoom level of the map. */\n      zoom,\n      /** The bearing of the viewport in degrees */\n      bearing,\n      /** The pitch of the viewport in degrees */\n      pitch,\n      /**\n       * Specify the altitude of the viewport camera\n       * Unit: map heights, default 1.5\n       * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n       */\n      altitude,\n      /** Viewport position */\n      position,\n\n      /** Viewport constraints */\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n\n      /** Interaction states, required to calculate change during transform */\n      /* The point on map being grabbed when the operation first started */\n      startPanLngLat,\n      /* Center of the zoom when the operation first started */\n      startZoomLngLat,\n      /* Pointer position when rotation started */\n      startRotatePos,\n      /** Bearing when current perspective rotate operation started */\n      startBearing,\n      /** Pitch when current perspective rotate operation started */\n      startPitch,\n      /** Zoom when current zoom operation started */\n      startZoom,\n\n      /** Normalize viewport props to fit map height into viewport. Default `true` */\n      normalize\n    } = options || {};\n\n    assert(Number.isFinite(longitude)); // `longitude` must be supplied\n    assert(Number.isFinite(latitude)); // `latitude` must be supplied\n    assert(Number.isFinite(zoom)); // `zoom` must be supplied\n\n    super({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n      normalize,\n      position\n    });\n\n    this._state = {\n      startPanLngLat,\n      startZoomLngLat,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n\n    this.makeViewport = makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}) {\n    const startPanLngLat = this._state.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this._viewportProps);\n    const newProps = viewport.panByPosition(startPanLngLat, pos);\n\n    return this._getUpdatedState(newProps);\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startBearing, startPitch} = this._state;\n\n    if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n    let newRotation;\n    if (pos) {\n      newRotation = this._calculateNewPitchAndBearing({\n        ...this._getRotationParams(pos, startRotatePos),\n        startBearing,\n        startPitch\n      });\n    } else {\n      newRotation = {\n        bearing: startBearing + deltaAngleX,\n        pitch: startPitch + deltaAngleY\n      };\n    }\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._state;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    const zoom = this._calculateNewZoom({scale, startZoom});\n\n    const zoomedViewport = this.makeViewport({...this._viewportProps, zoom});\n\n    return this._getUpdatedState({\n      zoom,\n      ...zoomedViewport.panByPosition(startZoomLngLat, pos)\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this._zoomFromCenter(speed);\n  }\n\n  zoomOut(speed = 2) {\n    return this._zoomFromCenter(1 / speed);\n  }\n\n  moveLeft(speed = 100) {\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveRight(speed = 100) {\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveUp(speed = 100) {\n    return this._panFromCenter([0, speed]);\n  }\n\n  moveDown(speed = 100) {\n    return this._panFromCenter([0, -speed]);\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - speed\n    });\n  }\n\n  shortestPathFrom(viewState) {\n    // const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n    const fromProps = viewState.getViewportProps();\n    const props = {...this._viewportProps};\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n\n  _zoomFromCenter(scale) {\n    const {width, height} = this._viewportProps;\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {width, height} = this._viewportProps;\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this._viewportProps,\n      ...this._state,\n      ...newProps\n    });\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize viewport props to fit map height into viewport\n    const {normalize = true} = props;\n    if (normalize) {\n      Object.assign(props, normalizeViewportProps(props));\n    }\n\n    return props;\n  }\n\n  _unproject(pos) {\n    const viewport = this.makeViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({deltaScaleX, deltaScaleY, startBearing, startPitch}) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n\n  _getRotationParams(pos, startPos) {\n    const deltaX = pos[0] - startPos[0];\n    const deltaY = pos[1] - startPos[1];\n    const centerY = pos[1];\n    const startY = startPos[1];\n    const {width, height} = this._viewportProps;\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n    return {deltaScaleX, deltaScaleY};\n  }\n}\n\nexport default class MapController extends Controller {\n  constructor(props) {\n    props.dragMode = props.dragMode || 'pan';\n    super(MapState, props);\n  }\n\n  setProps(props) {\n    props.position = props.position || [0, 0, 0];\n    const oldProps = this.controllerStateProps;\n\n    super.setProps(props);\n\n    const dimensionChanged = !oldProps || oldProps.height !== props.height;\n    if (dimensionChanged) {\n      // Dimensions changed, normalize the props\n      this.updateViewport(\n        new this.ControllerState({\n          makeViewport: this.makeViewport,\n          ...this.controllerStateProps,\n          ...this._state\n        })\n      );\n    }\n  }\n\n  get linearTransitionProps() {\n    return ['longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}