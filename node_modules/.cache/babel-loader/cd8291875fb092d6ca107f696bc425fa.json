{"ast":null,"code":"export async function* makeTextDecoderIterator(arrayBufferIterator) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const textDecoder = new TextDecoder(undefined, options);\n\n  for await (const arrayBuffer of arrayBufferIterator) {\n    yield typeof arrayBuffer === 'string' ? arrayBuffer : textDecoder.decode(arrayBuffer, {\n      stream: true\n    });\n  }\n}\nexport async function* makeTextEncoderIterator(textIterator) {\n  const textEncoder = new TextEncoder();\n\n  for await (const text of textIterator) {\n    yield typeof text === 'string' ? textEncoder.encode(text) : text;\n  }\n}\nexport async function* makeLineIterator(textIterator) {\n  let previous = '';\n\n  for await (const textChunk of textIterator) {\n    previous += textChunk;\n    let eolIndex;\n\n    while ((eolIndex = previous.indexOf('\\n')) >= 0) {\n      const line = previous.slice(0, eolIndex + 1);\n      previous = previous.slice(eolIndex + 1);\n      yield line;\n    }\n  }\n\n  if (previous.length > 0) {\n    yield previous;\n  }\n}\nexport async function* makeNumberedLineIterator(lineIterator) {\n  let counter = 1;\n\n  for await (const line of lineIterator) {\n    yield {\n      counter,\n      line\n    };\n    counter++;\n  }\n}","map":{"version":3,"mappings":"AAGA,OAAO,gBAAgBA,uBAAhB,CACLC,mBADK,EAGkB;EAAA,IADvBC,OACuB,uEADO,EACP;EACvB,MAAMC,WAAW,GAAG,IAAIC,WAAJ,CAAgBC,SAAhB,EAA2BH,OAA3B,CAApB;;EACA,WAAW,MAAMI,WAAjB,IAAgCL,mBAAhC,EAAqD;IACnD,MAAM,OAAOK,WAAP,KAAuB,QAAvB,GACFA,WADE,GAEFH,WAAW,CAACI,MAAZJ,CAAmBG,WAAnBH,EAAgC;MAACK,MAAM,EAAE;IAAT,CAAhCL,CAFJ;EAGD;AACF;AAOD,OAAO,gBAAgBM,uBAAhB,CACLC,YADK,EAEuB;EAC5B,MAAMC,WAAW,GAAG,IAAIC,WAAJ,EAApB;;EACA,WAAW,MAAMC,IAAjB,IAAyBH,YAAzB,EAAuC;IACrC,MAAM,OAAOG,IAAP,KAAgB,QAAhB,GAA2BF,WAAW,CAACG,MAAZH,CAAmBE,IAAnBF,CAA3B,GAAsDE,IAA5D;EACD;AACF;AAQD,OAAO,gBAAgBE,gBAAhB,CACLL,YADK,EAEkB;EACvB,IAAIM,QAAQ,GAAG,EAAf;;EACA,WAAW,MAAMC,SAAjB,IAA8BP,YAA9B,EAA4C;IAC1CM,QAAQ,IAAIC,SAAZD;IACA,IAAIE,QAAJ;;IACA,OAAO,CAACA,QAAQ,GAAGF,QAAQ,CAACG,OAATH,CAAiB,IAAjBA,CAAZ,KAAuC,CAA9C,EAAiD;MAE/C,MAAMI,IAAI,GAAGJ,QAAQ,CAACK,KAATL,CAAe,CAAfA,EAAkBE,QAAQ,GAAG,CAA7BF,CAAb;MACAA,QAAQ,GAAGA,QAAQ,CAACK,KAATL,CAAeE,QAAQ,GAAG,CAA1BF,CAAXA;MACA,MAAMI,IAAN;IACD;EACF;;EAED,IAAIJ,QAAQ,CAACM,MAATN,GAAkB,CAAtB,EAAyB;IACvB,MAAMA,QAAN;EACD;AACF;AAQD,OAAO,gBAAgBO,wBAAhB,CACLC,YADK,EAE2C;EAChD,IAAIC,OAAO,GAAG,CAAd;;EACA,WAAW,MAAML,IAAjB,IAAyBI,YAAzB,EAAuC;IACrC,MAAM;MAACC,OAAD;MAAUL;IAAV,CAAN;IACAK,OAAO;EACR;AACF","names":["makeTextDecoderIterator","arrayBufferIterator","options","textDecoder","TextDecoder","undefined","arrayBuffer","decode","stream","makeTextEncoderIterator","textIterator","textEncoder","TextEncoder","text","encode","makeLineIterator","previous","textChunk","eolIndex","indexOf","line","slice","length","makeNumberedLineIterator","lineIterator","counter"],"sources":["../../../../src/lib/iterators/text-iterators.ts"],"sourcesContent":["// TextDecoder iterators\n// TextDecoder will keep any partial undecoded bytes between calls to `decode`\n\nexport async function* makeTextDecoderIterator(\n  arrayBufferIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>,\n  options: TextDecoderOptions = {}\n): AsyncIterable<string> {\n  const textDecoder = new TextDecoder(undefined, options);\n  for await (const arrayBuffer of arrayBufferIterator) {\n    yield typeof arrayBuffer === 'string'\n      ? arrayBuffer\n      : textDecoder.decode(arrayBuffer, {stream: true});\n  }\n}\n\n// TextEncoder iterator\n// TODO - this is not useful unless min chunk size is given\n// TextEncoder will keep any partial undecoded bytes between calls to `encode`\n// If iterator does not yield strings, assume arrayBuffer and return unencoded\n\nexport async function* makeTextEncoderIterator(\n  textIterator: AsyncIterable<string> | Iterable<ArrayBuffer>\n): AsyncIterable<ArrayBuffer> {\n  const textEncoder = new TextEncoder();\n  for await (const text of textIterator) {\n    yield typeof text === 'string' ? textEncoder.encode(text) : text;\n  }\n}\n\n/**\n * @param textIterator async iterable yielding strings\n * @returns an async iterable over lines\n * See http://2ality.com/2018/04/async-iter-nodejs.html\n */\n\nexport async function* makeLineIterator(\n  textIterator: AsyncIterable<string>\n): AsyncIterable<string> {\n  let previous = '';\n  for await (const textChunk of textIterator) {\n    previous += textChunk;\n    let eolIndex;\n    while ((eolIndex = previous.indexOf('\\n')) >= 0) {\n      // line includes the EOL\n      const line = previous.slice(0, eolIndex + 1);\n      previous = previous.slice(eolIndex + 1);\n      yield line;\n    }\n  }\n\n  if (previous.length > 0) {\n    yield previous;\n  }\n}\n\n/**\n * @param lineIterator async iterable yielding lines\n * @returns async iterable yielding numbered lines\n *\n * See http://2ality.com/2018/04/async-iter-nodejs.html\n */\nexport async function* makeNumberedLineIterator(\n  lineIterator: AsyncIterable<string>\n): AsyncIterable<{counter: number; line: string}> {\n  let counter = 1;\n  for await (const line of lineIterator) {\n    yield {counter, line};\n    counter++;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}