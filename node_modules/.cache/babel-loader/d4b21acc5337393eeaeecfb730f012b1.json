{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nconst DEFAULT_ROW_COUNT = 100;\nexport default class RowTableBatchAggregator {\n  constructor(schema, options) {\n    _defineProperty(this, \"schema\", void 0);\n\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"length\", 0);\n\n    _defineProperty(this, \"rows\", null);\n\n    _defineProperty(this, \"cursor\", 0);\n\n    _defineProperty(this, \"_headers\", []);\n\n    this.options = options;\n    this.schema = schema;\n\n    if (!Array.isArray(schema)) {\n      this._headers = [];\n\n      for (const key in schema) {\n        this._headers[schema[key].index] = schema[key].name;\n      }\n    }\n  }\n\n  rowCount() {\n    return this.length;\n  }\n\n  addArrayRow(row, cursor) {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor;\n    }\n\n    this.rows = this.rows || new Array(DEFAULT_ROW_COUNT);\n    this.rows[this.length] = row;\n    this.length++;\n  }\n\n  addObjectRow(row, cursor) {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor;\n    }\n\n    this.rows = this.rows || new Array(DEFAULT_ROW_COUNT);\n    this.rows[this.length] = row;\n    this.length++;\n  }\n\n  getBatch() {\n    let rows = this.rows;\n\n    if (!rows) {\n      return null;\n    }\n\n    rows = rows.slice(0, this.length);\n    this.rows = null;\n    const batch = {\n      shape: this.options.shape,\n      batchType: 'data',\n      data: rows,\n      length: this.length,\n      schema: this.schema,\n      cursor: this.cursor\n    };\n    return batch;\n  }\n\n}","map":{"version":3,"mappings":";AAIA,MAAMA,iBAAiB,GAAG,GAA1B;AAEA,eAAe,MAAMC,uBAAN,CAA8D;EAS3EC,WAAW,CAACC,MAAD,EAAiBC,OAAjB,EAA6C;IAAAC;;IAAAA;;IAAAA,gCALvC,CAKuC;;IAAAA,8BAJnC,IAImC;;IAAAA,gCAHvC,CAGuC;;IAAAA,kCAF3B,EAE2B;;IACtD,KAAKD,OAAL,GAAeA,OAAf;IACA,KAAKD,MAAL,GAAcA,MAAd;;IAIA,IAAI,CAACG,KAAK,CAACC,OAAND,CAAcH,MAAdG,CAAL,EAA4B;MAC1B,KAAKE,QAAL,GAAgB,EAAhB;;MACA,KAAK,MAAMC,GAAX,IAAkBN,MAAlB,EAA0B;QACxB,KAAKK,QAAL,CAAcL,MAAM,CAACM,GAAD,CAANN,CAAYO,KAA1B,IAAmCP,MAAM,CAACM,GAAD,CAANN,CAAYQ,IAA/C;MACD;IACF;EACF;;EAEDC,QAAQ,GAAW;IACjB,OAAO,KAAKC,MAAZ;EACD;;EAEDC,WAAW,CAACC,GAAD,EAAaC,MAAb,EAAoC;IAC7C,IAAIC,MAAM,CAACC,QAAPD,CAAgBD,MAAhBC,CAAJ,EAA6B;MAC3B,KAAKD,MAAL,GAAcA,MAAd;IACD;;IAED,KAAKG,IAAL,GAAY,KAAKA,IAAL,IAAa,IAAIb,KAAJ,CAAUN,iBAAV,CAAzB;IACA,KAAKmB,IAAL,CAAU,KAAKN,MAAf,IAAyBE,GAAzB;IACA,KAAKF,MAAL;EACD;;EAEDO,YAAY,CAACL,GAAD,EAAmCC,MAAnC,EAA0D;IACpE,IAAIC,MAAM,CAACC,QAAPD,CAAgBD,MAAhBC,CAAJ,EAA6B;MAC3B,KAAKD,MAAL,GAAcA,MAAd;IACD;;IAED,KAAKG,IAAL,GAAY,KAAKA,IAAL,IAAa,IAAIb,KAAJ,CAAUN,iBAAV,CAAzB;IACA,KAAKmB,IAAL,CAAU,KAAKN,MAAf,IAAyBE,GAAzB;IACA,KAAKF,MAAL;EACD;;EAEDQ,QAAQ,GAAsB;IAC5B,IAAIF,IAAI,GAAG,KAAKA,IAAhB;;IACA,IAAI,CAACA,IAAL,EAAW;MACT,OAAO,IAAP;IACD;;IAEDA,IAAI,GAAGA,IAAI,CAACG,KAALH,CAAW,CAAXA,EAAc,KAAKN,MAAnBM,CAAPA;IACA,KAAKA,IAAL,GAAY,IAAZ;IAEA,MAAMI,KAAiB,GAAG;MACxBC,KAAK,EAAE,KAAKpB,OAAL,CAAaoB,KADI;MAExBC,SAAS,EAAE,MAFa;MAGxBC,IAAI,EAAEP,IAHkB;MAIxBN,MAAM,EAAE,KAAKA,MAJW;MAKxBV,MAAM,EAAE,KAAKA,MALW;MAMxBa,MAAM,EAAE,KAAKA;IANW,CAA1B;IASA,OAAOO,KAAP;EACD;;AAlE0E","names":["DEFAULT_ROW_COUNT","RowTableBatchAggregator","constructor","schema","options","_defineProperty","Array","isArray","_headers","key","index","name","rowCount","length","addArrayRow","row","cursor","Number","isFinite","rows","addObjectRow","getBatch","slice","batch","shape","batchType","data"],"sources":["../../../../src/lib/batches/base-table-batch-aggregator.ts"],"sourcesContent":["import type {Schema} from '../schema/schema';\nimport type {TableBatch} from '../../category/table/table-types';\nimport {TableBatchAggregator, TableBatchOptions} from './table-batch-aggregator';\n\nconst DEFAULT_ROW_COUNT = 100;\n\nexport default class RowTableBatchAggregator implements TableBatchAggregator {\n  schema: Schema;\n  options: TableBatchOptions;\n\n  length: number = 0;\n  rows: any[] | null = null;\n  cursor: number = 0;\n  private _headers: string[] = [];\n\n  constructor(schema: Schema, options: TableBatchOptions) {\n    this.options = options;\n    this.schema = schema;\n\n    // schema is an array if there're no headers\n    // object if there are headers\n    if (!Array.isArray(schema)) {\n      this._headers = [];\n      for (const key in schema) {\n        this._headers[schema[key].index] = schema[key].name;\n      }\n    }\n  }\n\n  rowCount(): number {\n    return this.length;\n  }\n\n  addArrayRow(row: any[], cursor?: number): void {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor as number;\n    }\n\n    this.rows = this.rows || new Array(DEFAULT_ROW_COUNT);\n    this.rows[this.length] = row;\n    this.length++;\n  }\n\n  addObjectRow(row: {[columnName: string]: any}, cursor?: number): void {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor as number;\n    }\n\n    this.rows = this.rows || new Array(DEFAULT_ROW_COUNT);\n    this.rows[this.length] = row;\n    this.length++;\n  }\n\n  getBatch(): TableBatch | null {\n    let rows = this.rows;\n    if (!rows) {\n      return null;\n    }\n\n    rows = rows.slice(0, this.length);\n    this.rows = null;\n\n    const batch: TableBatch = {\n      shape: this.options.shape,\n      batchType: 'data',\n      data: rows,\n      length: this.length,\n      schema: this.schema,\n      cursor: this.cursor\n    };\n\n    return batch;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}