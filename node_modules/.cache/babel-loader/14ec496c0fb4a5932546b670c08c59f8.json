{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport debug from '../debug';\nimport DrawLayersPass from '../passes/draw-layers-pass';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport { Framebuffer } from '@luma.gl/core';\nvar TRACE_RENDER_LAYERS = 'deckRenderer.renderLayers';\n\nvar DeckRenderer = /*#__PURE__*/function () {\n  function DeckRenderer(gl) {\n    _classCallCheck(this, DeckRenderer);\n\n    this.gl = gl;\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n    this.drawLayersPass = new DrawLayersPass(gl);\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.renderCount = 0;\n    this._needsRedraw = 'Initial render';\n    this.renderBuffers = [];\n    this.lastPostProcessEffect = null;\n  }\n\n  _createClass(DeckRenderer, [{\n    key: \"setProps\",\n    value: function setProps(props) {\n      if ('layerFilter' in props && this.layerFilter !== props.layerFilter) {\n        this.layerFilter = props.layerFilter;\n        this._needsRedraw = 'layerFilter changed';\n      }\n\n      if ('drawPickingColors' in props && this.drawPickingColors !== props.drawPickingColors) {\n        this.drawPickingColors = props.drawPickingColors;\n        this._needsRedraw = 'drawPickingColors changed';\n      }\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers(opts) {\n      var layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n      opts.layerFilter = opts.layerFilter || this.layerFilter;\n      opts.effects = opts.effects || [];\n      opts.target = opts.target || Framebuffer.getDefaultFramebuffer(this.gl);\n\n      this._preRender(opts.effects, opts);\n\n      var outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : opts.target;\n      var renderStats = layerPass.render(_objectSpread(_objectSpread({}, opts), {}, {\n        target: outputBuffer\n      }));\n\n      this._postRender(opts.effects, opts);\n\n      this.renderCount++;\n      debug(TRACE_RENDER_LAYERS, this, renderStats, opts);\n    }\n  }, {\n    key: \"needsRedraw\",\n    value: function needsRedraw() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        clearRedrawFlags: false\n      };\n      var redraw = this._needsRedraw;\n\n      if (opts.clearRedrawFlags) {\n        this._needsRedraw = false;\n      }\n\n      return redraw;\n    }\n  }, {\n    key: \"finalize\",\n    value: function finalize() {\n      var renderBuffers = this.renderBuffers;\n\n      var _iterator = _createForOfIteratorHelper(renderBuffers),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var buffer = _step.value;\n          buffer.delete();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      renderBuffers.length = 0;\n    }\n  }, {\n    key: \"_preRender\",\n    value: function _preRender(effects, opts) {\n      var lastPostProcessEffect = null;\n\n      var _iterator2 = _createForOfIteratorHelper(effects),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var effect = _step2.value;\n          effect.preRender(this.gl, opts);\n\n          if (effect.postRender) {\n            lastPostProcessEffect = effect;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      if (lastPostProcessEffect) {\n        this._resizeRenderBuffers();\n      }\n\n      this.lastPostProcessEffect = lastPostProcessEffect;\n    }\n  }, {\n    key: \"_resizeRenderBuffers\",\n    value: function _resizeRenderBuffers() {\n      var renderBuffers = this.renderBuffers;\n\n      if (renderBuffers.length === 0) {\n        renderBuffers.push(new Framebuffer(this.gl), new Framebuffer(this.gl));\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(renderBuffers),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var buffer = _step3.value;\n          buffer.resize();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"_postRender\",\n    value: function _postRender(effects, opts) {\n      var renderBuffers = this.renderBuffers;\n      var params = {\n        inputBuffer: renderBuffers[0],\n        swapBuffer: renderBuffers[1],\n        target: null\n      };\n\n      var _iterator4 = _createForOfIteratorHelper(effects),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var effect = _step4.value;\n\n          if (effect.postRender) {\n            if (effect === this.lastPostProcessEffect) {\n              params.target = opts.target;\n              effect.postRender(this.gl, params);\n              break;\n            }\n\n            var buffer = effect.postRender(this.gl, params);\n            params.inputBuffer = buffer;\n            params.swapBuffer = buffer === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }]);\n\n  return DeckRenderer;\n}();\n\nexport { DeckRenderer as default };","map":{"version":3,"mappings":"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","names":["debug","DrawLayersPass","PickLayersPass","Framebuffer","TRACE_RENDER_LAYERS","DeckRenderer","constructor","gl","layerFilter","drawPickingColors","drawLayersPass","pickLayersPass","renderCount","_needsRedraw","renderBuffers","lastPostProcessEffect","setProps","props","renderLayers","opts","layerPass","effects","target","getDefaultFramebuffer","_preRender","outputBuffer","renderStats","render","_postRender","needsRedraw","clearRedrawFlags","redraw","finalize","buffer","delete","length","effect","preRender","postRender","_resizeRenderBuffers","push","resize","params","inputBuffer","swapBuffer"],"sources":["../../../src/lib/deck-renderer.js"],"sourcesContent":["import debug from '../debug';\nimport DrawLayersPass from '../passes/draw-layers-pass';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport {Framebuffer} from '@luma.gl/core';\n\nconst TRACE_RENDER_LAYERS = 'deckRenderer.renderLayers';\n\nexport default class DeckRenderer {\n  constructor(gl) {\n    this.gl = gl;\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n    this.drawLayersPass = new DrawLayersPass(gl);\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.renderCount = 0;\n    this._needsRedraw = 'Initial render';\n    this.renderBuffers = [];\n    this.lastPostProcessEffect = null;\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props && this.layerFilter !== props.layerFilter) {\n      this.layerFilter = props.layerFilter;\n      this._needsRedraw = 'layerFilter changed';\n    }\n\n    if ('drawPickingColors' in props && this.drawPickingColors !== props.drawPickingColors) {\n      this.drawPickingColors = props.drawPickingColors;\n      this._needsRedraw = 'drawPickingColors changed';\n    }\n  }\n\n  /*\n    target,\n    layers,\n    viewports,\n    onViewportActive,\n    views,\n    redrawReason,\n    clearCanvas,\n    effects,\n    pass,\n    stats\n  */\n  renderLayers(opts) {\n    const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n\n    opts.layerFilter = opts.layerFilter || this.layerFilter;\n    opts.effects = opts.effects || [];\n    opts.target = opts.target || Framebuffer.getDefaultFramebuffer(this.gl);\n\n    this._preRender(opts.effects, opts);\n\n    const outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : opts.target;\n    const renderStats = layerPass.render({...opts, target: outputBuffer});\n\n    this._postRender(opts.effects, opts);\n\n    this.renderCount++;\n\n    debug(TRACE_RENDER_LAYERS, this, renderStats, opts);\n  }\n\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  finalize() {\n    const {renderBuffers} = this;\n    for (const buffer of renderBuffers) {\n      buffer.delete();\n    }\n    renderBuffers.length = 0;\n  }\n\n  // Private\n  _preRender(effects, opts) {\n    let lastPostProcessEffect = null;\n\n    for (const effect of effects) {\n      effect.preRender(this.gl, opts);\n      if (effect.postRender) {\n        lastPostProcessEffect = effect;\n      }\n    }\n\n    if (lastPostProcessEffect) {\n      this._resizeRenderBuffers();\n    }\n    this.lastPostProcessEffect = lastPostProcessEffect;\n  }\n\n  _resizeRenderBuffers() {\n    const {renderBuffers} = this;\n    if (renderBuffers.length === 0) {\n      renderBuffers.push(new Framebuffer(this.gl), new Framebuffer(this.gl));\n    }\n    for (const buffer of renderBuffers) {\n      buffer.resize();\n    }\n  }\n\n  _postRender(effects, opts) {\n    const {renderBuffers} = this;\n    const params = {\n      inputBuffer: renderBuffers[0],\n      swapBuffer: renderBuffers[1],\n      target: null\n    };\n    for (const effect of effects) {\n      if (effect.postRender) {\n        if (effect === this.lastPostProcessEffect) {\n          params.target = opts.target;\n          effect.postRender(this.gl, params);\n          break;\n        }\n        const buffer = effect.postRender(this.gl, params);\n        params.inputBuffer = buffer;\n        params.swapBuffer = buffer === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}