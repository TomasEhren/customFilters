{"ast":null,"code":"import { Vector3, isArray, toRadians, toDegrees, config } from '@math.gl/core';\nimport { WGS84_CONSTANTS } from './constants';\n\nvar noop = function noop(x) {\n  return x;\n};\n\nvar scratchVector = new Vector3();\nexport function fromCartographic(cartographic, result) {\n  var map = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;\n\n  if (isArray(cartographic)) {\n    result[0] = map(cartographic[0]);\n    result[1] = map(cartographic[1]);\n    result[2] = cartographic[2];\n  } else if ('longitude' in cartographic) {\n    result[0] = map(cartographic.longitude);\n    result[1] = map(cartographic.latitude);\n    result[2] = cartographic.height;\n  } else {\n    result[0] = map(cartographic.x);\n    result[1] = map(cartographic.y);\n    result[2] = cartographic.z;\n  }\n\n  return result;\n}\nexport function fromCartographicToRadians(cartographic) {\n  var vector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scratchVector;\n  return fromCartographic(cartographic, vector, config._cartographicRadians ? noop : toRadians);\n}\nexport function fromCartographicToDegrees(cartographic) {\n  var vector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scratchVector;\n  return fromCartographic(cartographic, vector, config._cartographicRadians ? toDegrees : noop);\n}\nexport function toCartographic(vector, cartographic) {\n  var map = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;\n\n  if (isArray(cartographic)) {\n    cartographic[0] = map(vector[0]);\n    cartographic[1] = map(vector[1]);\n    cartographic[2] = vector[2];\n  } else if ('longitude' in cartographic) {\n    cartographic.longitude = map(vector[0]);\n    cartographic.latitude = map(vector[1]);\n    cartographic.height = vector[2];\n  } else {\n    cartographic.x = map(vector[0]);\n    cartographic.y = map(vector[1]);\n    cartographic.z = vector[2];\n  }\n\n  return cartographic;\n}\nexport function toCartographicFromRadians(vector, cartographic) {\n  return toCartographic(vector, cartographic, config._cartographicRadians ? noop : toDegrees);\n}\nexport function toCartographicFromDegrees(vector, cartographic) {\n  return toCartographic(vector, cartographic, config._cartographicRadians ? toRadians : noop);\n}\nexport function isWGS84(vector) {\n  if (!vector) {\n    return false;\n  }\n\n  scratchVector.from(vector);\n  var oneOverRadiiSquared = WGS84_CONSTANTS.oneOverRadiiSquared,\n      centerToleranceSquared = WGS84_CONSTANTS.centerToleranceSquared;\n  var x2 = vector[0] * vector[0] * oneOverRadiiSquared[0];\n  var y2 = vector[1] * vector[1] * oneOverRadiiSquared[1];\n  var z2 = vector[2] * vector[2] * oneOverRadiiSquared[2];\n  return Math.abs(x2 + y2 + z2 - 1) < centerToleranceSquared;\n}","map":{"version":3,"mappings":"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","names":["Vector3","isArray","toRadians","toDegrees","config","WGS84_CONSTANTS","noop","x","scratchVector","fromCartographic","cartographic","result","map","longitude","latitude","height","y","z","fromCartographicToRadians","vector","_cartographicRadians","fromCartographicToDegrees","toCartographic","toCartographicFromRadians","toCartographicFromDegrees","isWGS84","from","oneOverRadiiSquared","centerToleranceSquared","x2","y2","z2","Math","abs"],"sources":["../../src/type-utils.js"],"sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Vector3, isArray, toRadians, toDegrees, config} from '@math.gl/core';\nimport {WGS84_CONSTANTS} from './constants';\n\nconst noop = (x) => x;\n\nconst scratchVector = new Vector3();\n\nexport function fromCartographic(cartographic, result, map = noop) {\n  if (isArray(cartographic)) {\n    result[0] = map(cartographic[0]);\n    result[1] = map(cartographic[1]);\n    result[2] = cartographic[2];\n  } else if ('longitude' in cartographic) {\n    result[0] = map(cartographic.longitude);\n    result[1] = map(cartographic.latitude);\n    result[2] = cartographic.height;\n  } else {\n    result[0] = map(cartographic.x);\n    result[1] = map(cartographic.y);\n    result[2] = cartographic.z;\n  }\n  return result;\n}\n\nexport function fromCartographicToRadians(cartographic, vector = scratchVector) {\n  return fromCartographic(cartographic, vector, config._cartographicRadians ? noop : toRadians);\n}\n\nexport function fromCartographicToDegrees(cartographic, vector = scratchVector) {\n  return fromCartographic(cartographic, vector, config._cartographicRadians ? toDegrees : noop);\n}\n\nexport function toCartographic(vector, cartographic, map = noop) {\n  if (isArray(cartographic)) {\n    cartographic[0] = map(vector[0]);\n    cartographic[1] = map(vector[1]);\n    cartographic[2] = vector[2];\n  } else if ('longitude' in cartographic) {\n    cartographic.longitude = map(vector[0]);\n    cartographic.latitude = map(vector[1]);\n    cartographic.height = vector[2];\n  } else {\n    cartographic.x = map(vector[0]);\n    cartographic.y = map(vector[1]);\n    cartographic.z = vector[2];\n  }\n  return cartographic;\n}\n\nexport function toCartographicFromRadians(vector, cartographic) {\n  return toCartographic(vector, cartographic, config._cartographicRadians ? noop : toDegrees);\n}\n\nexport function toCartographicFromDegrees(vector, cartographic) {\n  return toCartographic(vector, cartographic, config._cartographicRadians ? toRadians : noop);\n}\n\nexport function isWGS84(vector) {\n  if (!vector) {\n    return false;\n  }\n  scratchVector.from(vector);\n  const {oneOverRadiiSquared, centerToleranceSquared} = WGS84_CONSTANTS;\n  const x2 = vector[0] * vector[0] * oneOverRadiiSquared[0];\n  const y2 = vector[1] * vector[1] * oneOverRadiiSquared[1];\n  const z2 = vector[2] * vector[2] * oneOverRadiiSquared[2];\n  return Math.abs(x2 + y2 + z2 - 1) < centerToleranceSquared;\n}\n"]},"metadata":{},"sourceType":"module"}