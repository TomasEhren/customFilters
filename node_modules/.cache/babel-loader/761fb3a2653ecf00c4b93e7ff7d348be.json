{"ast":null,"code":"import { BasisLoader, selectSupportedBasisFormat } from '@loaders.gl/textures';\nimport { ImageLoader } from '@loaders.gl/images';\nimport { parseJSON, sliceArrayBuffer } from '@loaders.gl/loader-utils';\nimport { assert } from '../utils/assert';\nimport { resolveUrl } from '../gltf-utils/resolve-url';\nimport { getTypedArrayForBufferView } from '../gltf-utils/get-typed-array';\nimport { preprocessExtensions, decodeExtensions } from '../api/gltf-extensions';\nimport { normalizeGLTFV1 } from '../api/normalize-gltf-v1';\nimport { postProcessGLTF } from '../api/post-process-gltf';\nimport parseGLBSync, { isGLB } from './parse-glb';\nexport function isGLTF(arrayBuffer, options) {\n  const byteOffset = 0;\n  return isGLB(arrayBuffer, byteOffset, options);\n}\nexport async function parseGLTF(gltf, arrayBufferOrString) {\n  let byteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let options = arguments.length > 3 ? arguments[3] : undefined;\n  let context = arguments.length > 4 ? arguments[4] : undefined;\n\n  var _options$gltf, _options$gltf2, _options$gltf3, _options$gltf4;\n\n  parseGLTFContainerSync(gltf, arrayBufferOrString, byteOffset, options);\n  normalizeGLTFV1(gltf, {\n    normalize: options === null || options === void 0 ? void 0 : (_options$gltf = options.gltf) === null || _options$gltf === void 0 ? void 0 : _options$gltf.normalize\n  });\n  preprocessExtensions(gltf, options, context);\n  const promises = [];\n\n  if (options !== null && options !== void 0 && (_options$gltf2 = options.gltf) !== null && _options$gltf2 !== void 0 && _options$gltf2.loadBuffers && gltf.json.buffers) {\n    await loadBuffers(gltf, options, context);\n  }\n\n  if (options !== null && options !== void 0 && (_options$gltf3 = options.gltf) !== null && _options$gltf3 !== void 0 && _options$gltf3.loadImages) {\n    const promise = loadImages(gltf, options, context);\n    promises.push(promise);\n  }\n\n  const promise = decodeExtensions(gltf, options, context);\n  promises.push(promise);\n  await Promise.all(promises);\n  return options !== null && options !== void 0 && (_options$gltf4 = options.gltf) !== null && _options$gltf4 !== void 0 && _options$gltf4.postProcess ? postProcessGLTF(gltf, options) : gltf;\n}\n\nfunction parseGLTFContainerSync(gltf, data, byteOffset, options) {\n  if (options.uri) {\n    gltf.baseUri = options.uri;\n  }\n\n  if (data instanceof ArrayBuffer && !isGLB(data, byteOffset, options)) {\n    const textDecoder = new TextDecoder();\n    data = textDecoder.decode(data);\n  }\n\n  if (typeof data === 'string') {\n    gltf.json = parseJSON(data);\n  } else if (data instanceof ArrayBuffer) {\n    const glb = {};\n    byteOffset = parseGLBSync(glb, data, byteOffset, options.glb);\n    assert(glb.type === 'glTF', \"Invalid GLB magic string \".concat(glb.type));\n    gltf._glb = glb;\n    gltf.json = glb.json;\n  } else {\n    assert(false, 'GLTF: must be ArrayBuffer or string');\n  }\n\n  const buffers = gltf.json.buffers || [];\n  gltf.buffers = new Array(buffers.length).fill(null);\n\n  if (gltf._glb && gltf._glb.header.hasBinChunk) {\n    const {\n      binChunks\n    } = gltf._glb;\n    gltf.buffers[0] = {\n      arrayBuffer: binChunks[0].arrayBuffer,\n      byteOffset: binChunks[0].byteOffset,\n      byteLength: binChunks[0].byteLength\n    };\n  }\n\n  const images = gltf.json.images || [];\n  gltf.images = new Array(images.length).fill({});\n}\n\nasync function loadBuffers(gltf, options, context) {\n  const buffers = gltf.json.buffers || [];\n\n  for (let i = 0; i < buffers.length; ++i) {\n    const buffer = buffers[i];\n\n    if (buffer.uri) {\n      var _context$fetch, _response$arrayBuffer;\n\n      const {\n        fetch\n      } = context;\n      assert(fetch);\n      const uri = resolveUrl(buffer.uri, options);\n      const response = await (context === null || context === void 0 ? void 0 : (_context$fetch = context.fetch) === null || _context$fetch === void 0 ? void 0 : _context$fetch.call(context, uri));\n      const arrayBuffer = await (response === null || response === void 0 ? void 0 : (_response$arrayBuffer = response.arrayBuffer) === null || _response$arrayBuffer === void 0 ? void 0 : _response$arrayBuffer.call(response));\n      gltf.buffers[i] = {\n        arrayBuffer,\n        byteOffset: 0,\n        byteLength: arrayBuffer.byteLength\n      };\n      delete buffer.uri;\n    }\n  }\n}\n\nasync function loadImages(gltf, options, context) {\n  const imageIndices = getReferencesImageIndices(gltf);\n  const images = gltf.json.images || [];\n  const promises = [];\n\n  for (const imageIndex of imageIndices) {\n    promises.push(loadImage(gltf, images[imageIndex], imageIndex, options, context));\n  }\n\n  return await Promise.all(promises);\n}\n\nfunction getReferencesImageIndices(gltf) {\n  const imageIndices = new Set();\n  const textures = gltf.json.textures || [];\n\n  for (const texture of textures) {\n    if (texture.source !== undefined) {\n      imageIndices.add(texture.source);\n    }\n  }\n\n  return Array.from(imageIndices).sort();\n}\n\nasync function loadImage(gltf, image, index, options, context) {\n  const {\n    fetch,\n    parse\n  } = context;\n  let arrayBuffer;\n\n  if (image.uri) {\n    const uri = resolveUrl(image.uri, options);\n    const response = await fetch(uri);\n    arrayBuffer = await response.arrayBuffer();\n  }\n\n  if (Number.isFinite(image.bufferView)) {\n    const array = getTypedArrayForBufferView(gltf.json, gltf.buffers, image.bufferView);\n    arrayBuffer = sliceArrayBuffer(array.buffer, array.byteOffset, array.byteLength);\n  }\n\n  assert(arrayBuffer, 'glTF image has no data');\n  let parsedImage = await parse(arrayBuffer, [ImageLoader, BasisLoader], {\n    mimeType: image.mimeType,\n    basis: options.basis || {\n      format: selectSupportedBasisFormat()\n    }\n  }, context);\n\n  if (parsedImage && parsedImage[0]) {\n    parsedImage = {\n      compressed: true,\n      mipmaps: false,\n      width: parsedImage[0].width,\n      height: parsedImage[0].height,\n      data: parsedImage\n    };\n  }\n\n  gltf.images = gltf.images || [];\n  gltf.images[index] = parsedImage;\n}","map":{"version":3,"mappings":"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","names":["BasisLoader","selectSupportedBasisFormat","ImageLoader","parseJSON","sliceArrayBuffer","assert","resolveUrl","getTypedArrayForBufferView","preprocessExtensions","decodeExtensions","normalizeGLTFV1","postProcessGLTF","parseGLBSync","isGLB","isGLTF","arrayBuffer","options","byteOffset","parseGLTF","gltf","arrayBufferOrString","context","parseGLTFContainerSync","normalize","_options$gltf","promises","loadBuffers","json","buffers","_options$gltf3","loadImages","promise","push","Promise","all","postProcess","data","uri","baseUri","ArrayBuffer","textDecoder","TextDecoder","decode","glb","type","_glb","Array","length","fill","header","hasBinChunk","binChunks","byteLength","images","i","buffer","fetch","response","_context$fetch","_response$arrayBuffer","imageIndices","getReferencesImageIndices","imageIndex","loadImage","Set","textures","texture","source","undefined","add","from","sort","image","index","parse","Number","isFinite","bufferView","array","parsedImage","mimeType","basis","format","compressed","mipmaps","width","height"],"sources":["../../../../src/lib/parsers/parse-gltf.ts"],"sourcesContent":["/* eslint-disable camelcase, max-statements, no-restricted-globals */\nimport type {LoaderContext} from '@loaders.gl/loader-utils';\nimport {BasisLoader, selectSupportedBasisFormat} from '@loaders.gl/textures';\nimport type {GLTFLoaderOptions} from '../../gltf-loader';\nimport type {GLB} from '../types/glb-types';\nimport type {GLTFWithBuffers} from '../types/gltf-types';\n\nimport {ImageLoader} from '@loaders.gl/images';\nimport {parseJSON, sliceArrayBuffer} from '@loaders.gl/loader-utils';\nimport {assert} from '../utils/assert';\nimport {resolveUrl} from '../gltf-utils/resolve-url';\nimport {getTypedArrayForBufferView} from '../gltf-utils/get-typed-array';\nimport {preprocessExtensions, decodeExtensions} from '../api/gltf-extensions';\nimport {normalizeGLTFV1} from '../api/normalize-gltf-v1';\nimport {postProcessGLTF} from '../api/post-process-gltf';\nimport parseGLBSync, {isGLB} from './parse-glb';\n\nexport type GLTFParseOptions = {\n  normalize?: boolean;\n  loadImages?: boolean;\n  loadBuffers?: boolean;\n  decompressMeshes?: boolean;\n  postProcess?: boolean;\n  excludeExtensions?: string[];\n};\n\n// export type GLTFOptions = {\n//   gltf?: GLTFParseOptions;\n// };\n\nexport function isGLTF(arrayBuffer, options?): boolean {\n  const byteOffset = 0;\n  return isGLB(arrayBuffer, byteOffset, options);\n}\n\nexport async function parseGLTF(\n  gltf: GLTFWithBuffers,\n  arrayBufferOrString,\n  byteOffset = 0,\n  options: GLTFLoaderOptions,\n  context: LoaderContext\n) {\n  parseGLTFContainerSync(gltf, arrayBufferOrString, byteOffset, options);\n\n  normalizeGLTFV1(gltf, {normalize: options?.gltf?.normalize});\n\n  preprocessExtensions(gltf, options, context);\n\n  const promises: Promise<any>[] = [];\n\n  // Load linked buffers asynchronously and decodes base64 buffers in parallel\n  if (options?.gltf?.loadBuffers && gltf.json.buffers) {\n    await loadBuffers(gltf, options, context);\n  }\n\n  if (options?.gltf?.loadImages) {\n    const promise = loadImages(gltf, options, context);\n    promises.push(promise);\n  }\n\n  const promise = decodeExtensions(gltf, options, context);\n  promises.push(promise);\n\n  // Parallelize image loading and buffer loading/extension decoding\n  await Promise.all(promises);\n\n  // Post processing resolves indices to objects, buffers\n  return options?.gltf?.postProcess ? postProcessGLTF(gltf, options) : gltf;\n}\n\n// `data` - can be ArrayBuffer (GLB), ArrayBuffer (Binary JSON), String (JSON), or Object (parsed JSON)\nfunction parseGLTFContainerSync(gltf, data, byteOffset, options) {\n  // Initialize gltf container\n  if (options.uri) {\n    gltf.baseUri = options.uri;\n  }\n\n  // If data is binary and starting with magic bytes, assume binary JSON text, convert to string\n  if (data instanceof ArrayBuffer && !isGLB(data, byteOffset, options)) {\n    const textDecoder = new TextDecoder();\n    data = textDecoder.decode(data);\n  }\n\n  if (typeof data === 'string') {\n    // If string, try to parse as JSON\n    gltf.json = parseJSON(data);\n  } else if (data instanceof ArrayBuffer) {\n    // If still ArrayBuffer, parse as GLB container\n    const glb: GLB = {} as GLB;\n    byteOffset = parseGLBSync(glb, data, byteOffset, options.glb);\n\n    assert(glb.type === 'glTF', `Invalid GLB magic string ${glb.type}`);\n\n    gltf._glb = glb;\n    gltf.json = glb.json;\n  } else {\n    assert(false, 'GLTF: must be ArrayBuffer or string');\n  }\n\n  // Populate buffers\n  // Create an external buffers array to hold binary data\n  const buffers = gltf.json.buffers || [];\n  gltf.buffers = new Array(buffers.length).fill(null);\n\n  // Populates JSON and some bin chunk info\n  if (gltf._glb && gltf._glb.header.hasBinChunk) {\n    const {binChunks} = gltf._glb;\n    gltf.buffers[0] = {\n      arrayBuffer: binChunks[0].arrayBuffer,\n      byteOffset: binChunks[0].byteOffset,\n      byteLength: binChunks[0].byteLength\n    };\n\n    // TODO - this modifies JSON and is a post processing thing\n    // gltf.json.buffers[0].data = gltf.buffers[0].arrayBuffer;\n    // gltf.json.buffers[0].byteOffset = gltf.buffers[0].byteOffset;\n  }\n\n  // Populate images\n  const images = gltf.json.images || [];\n  gltf.images = new Array(images.length).fill({});\n}\n\n/** Asynchronously fetch and parse buffers, store in buffers array outside of json\n * TODO - traverse gltf and determine which buffers are actually needed\n */\nasync function loadBuffers(gltf: GLTFWithBuffers, options, context: LoaderContext) {\n  // TODO\n  const buffers = gltf.json.buffers || [];\n  for (let i = 0; i < buffers.length; ++i) {\n    const buffer = buffers[i];\n    if (buffer.uri) {\n      const {fetch} = context;\n      assert(fetch);\n\n      const uri = resolveUrl(buffer.uri, options);\n      const response = await context?.fetch?.(uri);\n      const arrayBuffer = await response?.arrayBuffer?.();\n\n      gltf.buffers[i] = {\n        arrayBuffer,\n        byteOffset: 0,\n        byteLength: arrayBuffer.byteLength\n      };\n\n      delete buffer.uri;\n    }\n  }\n}\n\n/**\n * Loads all images\n * TODO - traverse gltf and determine which images are actually needed\n * @param gltf\n * @param options\n * @param context\n * @returns\n */\nasync function loadImages(gltf: GLTFWithBuffers, options, context: LoaderContext) {\n  const imageIndices = getReferencesImageIndices(gltf);\n\n  const images = gltf.json.images || [];\n\n  const promises: Promise<any>[] = [];\n  for (const imageIndex of imageIndices) {\n    promises.push(loadImage(gltf, images[imageIndex], imageIndex, options, context));\n  }\n\n  return await Promise.all(promises);\n}\n\n/** Make sure we only load images that are actually referenced by textures */\nfunction getReferencesImageIndices(gltf: GLTFWithBuffers): number[] {\n  const imageIndices = new Set<number>();\n\n  const textures = gltf.json.textures || [];\n  for (const texture of textures) {\n    if (texture.source !== undefined) {\n      imageIndices.add(texture.source);\n    }\n  }\n\n  return Array.from(imageIndices).sort();\n}\n\n/** Asynchronously fetches and parses one image, store in images array outside of json */\nasync function loadImage(\n  gltf: GLTFWithBuffers,\n  image,\n  index: number,\n  options,\n  context: LoaderContext\n) {\n  const {fetch, parse} = context;\n\n  let arrayBuffer;\n\n  if (image.uri) {\n    const uri = resolveUrl(image.uri, options);\n    const response = await fetch(uri);\n    arrayBuffer = await response.arrayBuffer();\n  }\n\n  if (Number.isFinite(image.bufferView)) {\n    const array = getTypedArrayForBufferView(gltf.json, gltf.buffers, image.bufferView);\n    arrayBuffer = sliceArrayBuffer(array.buffer, array.byteOffset, array.byteLength);\n  }\n\n  assert(arrayBuffer, 'glTF image has no data');\n\n  // Call `parse`\n  let parsedImage = await parse(\n    arrayBuffer,\n    [ImageLoader, BasisLoader],\n    {mimeType: image.mimeType, basis: options.basis || {format: selectSupportedBasisFormat()}},\n    context\n  );\n\n  if (parsedImage && parsedImage[0]) {\n    parsedImage = {\n      compressed: true,\n      mipmaps: false,\n      width: parsedImage[0].width,\n      height: parsedImage[0].height,\n      data: parsedImage\n    };\n  }\n  // TODO making sure ImageLoader is overridable by using array of loaders\n  // const parsedImage = await parse(arrayBuffer, [ImageLoader]);\n\n  // Store the loaded image\n  gltf.images = gltf.images || [];\n  gltf.images[index] = parsedImage;\n}\n"]},"metadata":{},"sourceType":"module"}