{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar EVENT_TYPE = 'contextmenu';\n\nvar ContextmenuInput = /*#__PURE__*/function () {\n  function ContextmenuInput(element, callback) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, ContextmenuInput);\n\n    this.element = element;\n    this.callback = callback;\n    this.options = Object.assign({\n      enable: true\n    }, options);\n    this.handleEvent = this.handleEvent.bind(this);\n    element.addEventListener('contextmenu', this.handleEvent);\n  }\n\n  _createClass(ContextmenuInput, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.element.removeEventListener('contextmenu', this.handleEvent);\n    }\n  }, {\n    key: \"enableEventType\",\n    value: function enableEventType(eventType, enabled) {\n      if (eventType === EVENT_TYPE) {\n        this.options.enable = enabled;\n      }\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(event) {\n      if (!this.options.enable) {\n        return;\n      }\n\n      this.callback({\n        type: EVENT_TYPE,\n        center: {\n          x: event.clientX,\n          y: event.clientY\n        },\n        srcEvent: event,\n        pointerType: 'mouse',\n        target: event.target\n      });\n    }\n  }]);\n\n  return ContextmenuInput;\n}();\n\nexport { ContextmenuInput as default };","map":{"version":3,"mappings":";;AAoBA,IAAMA,UAAU,GAAG,aAAnB;;IAEqBC,gB;EACnBC,0BAAYC,OAAZD,EAAqBE,QAArBF,EAA6C;IAAA,IAAdG,OAAc,uEAAJ,EAAI;;IAAA;;IAC3C,KAAKF,OAAL,GAAeA,OAAf;IACA,KAAKC,QAAL,GAAgBA,QAAhB;IAEA,KAAKC,OAAL,GAAeC,MAAM,CAACC,MAAPD,CAAc;MAACE,MAAM,EAAE;IAAT,CAAdF,EAA8BD,OAA9BC,CAAf;IAEA,KAAKG,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;IACAP,OAAO,CAACQ,gBAARR,CAAyB,aAAzBA,EAAwC,KAAKM,WAA7CN;EACD;;;;WAEDS,mBAAU;MACR,KAAKT,OAAL,CAAaU,mBAAb,CAAiC,aAAjC,EAAgD,KAAKJ,WAArD;IACD;;;WAMDK,yBAAgBC,SAAhBD,EAA2BE,OAA3BF,EAAoC;MAClC,IAAIC,SAAS,KAAKf,UAAlB,EAA8B;QAC5B,KAAKK,OAAL,CAAaG,MAAb,GAAsBQ,OAAtB;MACD;IACF;;;WAEDP,qBAAYQ,KAAZR,EAAmB;MACjB,IAAI,CAAC,KAAKJ,OAAL,CAAaG,MAAlB,EAA0B;QACxB;MACD;;MAED,KAAKJ,QAAL,CAAc;QACZc,IAAI,EAAElB,UADM;QAEZmB,MAAM,EAAE;UACNC,CAAC,EAAEH,KAAK,CAACI,OADH;UAENC,CAAC,EAAEL,KAAK,CAACM;QAFH,CAFI;QAMZC,QAAQ,EAAEP,KANE;QAOZQ,WAAW,EAAE,OAPD;QAQZC,MAAM,EAAET,KAAK,CAACS;MARF,CAAd;IAUD;;;;;;SAxCkBzB,gB","names":["EVENT_TYPE","ContextmenuInput","constructor","element","callback","options","Object","assign","enable","handleEvent","bind","addEventListener","destroy","removeEventListener","enableEventType","eventType","enabled","event","type","center","x","clientX","y","clientY","srcEvent","pointerType","target"],"sources":["../../../src/inputs/contextmenu-input.js"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nconst EVENT_TYPE = 'contextmenu';\n\nexport default class ContextmenuInput {\n  constructor(element, callback, options = {}) {\n    this.element = element;\n    this.callback = callback;\n\n    this.options = Object.assign({enable: true}, options);\n\n    this.handleEvent = this.handleEvent.bind(this);\n    element.addEventListener('contextmenu', this.handleEvent);\n  }\n\n  destroy() {\n    this.element.removeEventListener('contextmenu', this.handleEvent);\n  }\n\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n  enableEventType(eventType, enabled) {\n    if (eventType === EVENT_TYPE) {\n      this.options.enable = enabled;\n    }\n  }\n\n  handleEvent(event) {\n    if (!this.options.enable) {\n      return;\n    }\n\n    this.callback({\n      type: EVENT_TYPE,\n      center: {\n        x: event.clientX,\n        y: event.clientY\n      },\n      srcEvent: event,\n      pointerType: 'mouse',\n      target: event.target\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}