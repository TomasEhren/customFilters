{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(makeStringIterator);\n\nvar DEFAULT_CHUNK_SIZE = 256 * 1024;\nexport function makeStringIterator(string, options) {\n  var chunkSize, offset, textEncoder, chunkLength, chunk;\n  return _regeneratorRuntime.wrap(function makeStringIterator$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          chunkSize = (options === null || options === void 0 ? void 0 : options.chunkSize) || DEFAULT_CHUNK_SIZE;\n          offset = 0;\n          textEncoder = new TextEncoder();\n\n        case 3:\n          if (!(offset < string.length)) {\n            _context.next = 11;\n            break;\n          }\n\n          chunkLength = Math.min(string.length - offset, chunkSize);\n          chunk = string.slice(offset, offset + chunkLength);\n          offset += chunkLength;\n          _context.next = 9;\n          return textEncoder.encode(chunk);\n\n        case 9:\n          _context.next = 3;\n          break;\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"mappings":";;oDAUiBA,kB;;AARjB,IAAMC,kBAAkB,GAAG,MAAM,IAAjC;AAQA,OAAO,SAAUD,kBAAV,CACLE,MADK,EAELC,OAFK;EAAA;EAAA;IAAA;MAAA;QAAA;UAICC,SAJD,GAIa,QAAO,SAAPD,WAAO,WAAPA,mBAAO,CAAEC,SAAT,KAAsBH,kBAJnC;UAMDI,MANC,GAMQ,CANR;UAOCC,WAPD,GAOe,IAAIC,WAAJ,EAPf;;QAAA;UAAA,MAQEF,MAAM,GAAGH,MAAM,CAACM,MARlB;YAAA;YAAA;UAAA;;UAUGC,WAVH,GAUiBC,IAAI,CAACC,GAALD,CAASR,MAAM,CAACM,MAAPN,GAAgBG,MAAzBK,EAAiCN,SAAjCM,CAVjB;UAWGE,KAXH,GAWWV,MAAM,CAACW,KAAPX,CAAaG,MAAbH,EAAqBG,MAAM,GAAGI,WAA9BP,CAXX;UAYHG,MAAM,IAAII,WAAVJ;UAZG;UAeH,OAAMC,WAAW,CAACQ,MAAZR,CAAmBM,KAAnBN,CAAN;;QAfG;UAAA;UAAA;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA","names":["makeStringIterator","DEFAULT_CHUNK_SIZE","string","options","chunkSize","offset","textEncoder","TextEncoder","length","chunkLength","Math","min","chunk","slice","encode"],"sources":["../../../../src/iterators/make-iterator/make-string-iterator.ts"],"sourcesContent":["import type {IteratorOptions} from './make-iterator';\n\nconst DEFAULT_CHUNK_SIZE = 256 * 1024;\n\n/**\n * Returns an iterator that breaks a big string into chunks and yields them one-by-one as ArrayBuffers\n * @param blob string to iterate over\n * @param options\n * @param options.chunkSize\n */\nexport function* makeStringIterator(\n  string: string,\n  options?: IteratorOptions\n): Iterable<ArrayBuffer> {\n  const chunkSize = options?.chunkSize || DEFAULT_CHUNK_SIZE;\n\n  let offset = 0;\n  const textEncoder = new TextEncoder();\n  while (offset < string.length) {\n    // Create a chunk of the right size\n    const chunkLength = Math.min(string.length - offset, chunkSize);\n    const chunk = string.slice(offset, offset + chunkLength);\n    offset += chunkLength;\n\n    // yield an ArrayBuffer chunk\n    yield textEncoder.encode(chunk);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}