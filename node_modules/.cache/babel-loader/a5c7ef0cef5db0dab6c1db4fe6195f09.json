{"ast":null,"code":"import { CompositeLayer, log } from '@deck.gl/core';\nimport { replaceInRange } from '../utils';\nimport { binaryToFeatureForAccesor } from './geojson-binary';\nimport { POINT_LAYER, LINE_LAYER, POLYGON_LAYER, getDefaultProps, forwardProps } from './sub-layer-map';\nimport { getGeojsonFeatures, separateGeojsonFeatures } from './geojson';\nimport { createLayerPropsFromFeatures, createLayerPropsFromBinary } from './geojson-layer-props';\nconst FEATURE_TYPES = ['points', 'linestrings', 'polygons'];\nconst defaultProps = { ...getDefaultProps(POINT_LAYER.circle),\n  ...getDefaultProps(POINT_LAYER.icon),\n  ...getDefaultProps(POINT_LAYER.text),\n  ...getDefaultProps(LINE_LAYER),\n  ...getDefaultProps(POLYGON_LAYER),\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  iconAtlas: {\n    type: 'object',\n    value: null\n  },\n  iconMapping: {\n    type: 'object',\n    value: {}\n  },\n  getIcon: {\n    type: 'accessor',\n    value: f => f.properties.icon\n  },\n  getText: {\n    type: 'accessor',\n    value: f => f.properties.text\n  },\n  pointType: 'circle',\n  getRadius: {\n    deprecatedFor: 'getPointRadius'\n  }\n};\nexport default class GeoJsonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      layerProps: {},\n      features: {}\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState(_ref) {\n    let {\n      props,\n      changeFlags\n    } = _ref;\n\n    if (!changeFlags.dataChanged) {\n      return;\n    }\n\n    const {\n      data\n    } = this.props;\n    const binary = data && 'points' in data && 'polygons' in data && 'lines' in data;\n    this.setState({\n      binary\n    });\n\n    if (binary) {\n      this._updateStateBinary({\n        props,\n        changeFlags\n      });\n    } else {\n      this._updateStateJSON({\n        props,\n        changeFlags\n      });\n    }\n  }\n\n  _updateStateBinary(_ref2) {\n    let {\n      props,\n      changeFlags\n    } = _ref2;\n    const layerProps = createLayerPropsFromBinary(props.data, this.encodePickingColor);\n    this.setState({\n      layerProps\n    });\n  }\n\n  _updateStateJSON(_ref3) {\n    let {\n      props,\n      changeFlags\n    } = _ref3;\n    const features = getGeojsonFeatures(props.data);\n    const wrapFeature = this.getSubLayerRow.bind(this);\n    let newFeatures = {};\n    const featuresDiff = {};\n\n    if (Array.isArray(changeFlags.dataChanged)) {\n      const oldFeatures = this.state.features;\n\n      for (const key in oldFeatures) {\n        newFeatures[key] = oldFeatures[key].slice();\n        featuresDiff[key] = [];\n      }\n\n      for (const dataRange of changeFlags.dataChanged) {\n        const partialFeatures = separateGeojsonFeatures(features, wrapFeature, dataRange);\n\n        for (const key in oldFeatures) {\n          featuresDiff[key].push(replaceInRange({\n            data: newFeatures[key],\n            getIndex: f => f.__source.index,\n            dataRange,\n            replace: partialFeatures[key]\n          }));\n        }\n      }\n    } else {\n      newFeatures = separateGeojsonFeatures(features, wrapFeature);\n    }\n\n    const layerProps = createLayerPropsFromFeatures(newFeatures, featuresDiff);\n    this.setState({\n      features: newFeatures,\n      featuresDiff,\n      layerProps\n    });\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {\n      index,\n      sourceLayer\n    } = info;\n    info.featureType = FEATURE_TYPES.find(ft => sourceLayer.id.startsWith(\"\".concat(this.id, \"-\").concat(ft, \"-\")));\n\n    if (index >= 0 && sourceLayer.id.startsWith(\"\".concat(this.id, \"-points-text\")) && this.state.binary) {\n      info.index = this.props.data.points.globalFeatureIds.value[index];\n    }\n\n    return info;\n  }\n\n  _updateAutoHighlight(info) {\n    const pointLayerIdPrefix = \"\".concat(this.id, \"-points-\");\n    const sourceIsPoints = info.featureType === 'points';\n\n    for (const layer of this.getSubLayers()) {\n      if (layer.id.startsWith(pointLayerIdPrefix) === sourceIsPoints) {\n        layer.updateAutoHighlight(info);\n      }\n    }\n  }\n\n  _renderPolygonLayer() {\n    const {\n      extruded,\n      wireframe\n    } = this.props;\n    const {\n      layerProps\n    } = this.state;\n    const id = 'polygons-fill';\n    const PolygonFillLayer = this.shouldRenderSubLayer(id, layerProps.polygons.data) && this.getSubLayerClass(id, POLYGON_LAYER.type);\n\n    if (PolygonFillLayer) {\n      const forwardedProps = forwardProps(this, POLYGON_LAYER.props);\n      const useLineColor = extruded && wireframe;\n\n      if (!useLineColor) {\n        delete forwardedProps.getLineColor;\n      }\n\n      forwardedProps.updateTriggers.lineColors = useLineColor;\n      return new PolygonFillLayer(forwardedProps, this.getSubLayerProps({\n        id,\n        updateTriggers: forwardedProps.updateTriggers\n      }), layerProps.polygons);\n    }\n\n    return null;\n  }\n\n  _renderLineLayers() {\n    const {\n      extruded,\n      stroked\n    } = this.props;\n    const {\n      layerProps\n    } = this.state;\n    const polygonStrokeLayerId = 'polygons-stroke';\n    const lineStringsLayerId = 'linestrings';\n    const PolygonStrokeLayer = !extruded && stroked && this.shouldRenderSubLayer(polygonStrokeLayerId, layerProps.polygonsOutline.data) && this.getSubLayerClass(polygonStrokeLayerId, LINE_LAYER.type);\n    const LineStringsLayer = this.shouldRenderSubLayer(lineStringsLayerId, layerProps.lines.data) && this.getSubLayerClass(lineStringsLayerId, LINE_LAYER.type);\n\n    if (PolygonStrokeLayer || LineStringsLayer) {\n      const forwardedProps = forwardProps(this, LINE_LAYER.props);\n      return [PolygonStrokeLayer && new PolygonStrokeLayer(forwardedProps, this.getSubLayerProps({\n        id: polygonStrokeLayerId,\n        updateTriggers: forwardedProps.updateTriggers\n      }), layerProps.polygonsOutline), LineStringsLayer && new LineStringsLayer(forwardedProps, this.getSubLayerProps({\n        id: lineStringsLayerId,\n        updateTriggers: forwardedProps.updateTriggers\n      }), layerProps.lines)];\n    }\n\n    return null;\n  }\n\n  _renderPointLayers() {\n    const {\n      pointType\n    } = this.props;\n    const {\n      layerProps,\n      binary\n    } = this.state;\n    let {\n      highlightedObjectIndex\n    } = this.props;\n\n    if (!binary && Number.isFinite(highlightedObjectIndex)) {\n      highlightedObjectIndex = layerProps.points.data.findIndex(d => d.__source.index === highlightedObjectIndex);\n    }\n\n    const types = new Set(pointType.split('+'));\n    const pointLayers = [];\n\n    for (const type of types) {\n      const id = \"points-\".concat(type);\n      const PointLayerMapping = POINT_LAYER[type];\n      const PointsLayer = PointLayerMapping && this.shouldRenderSubLayer(id, layerProps.points.data) && this.getSubLayerClass(id, PointLayerMapping.type);\n\n      if (PointsLayer) {\n        const forwardedProps = forwardProps(this, PointLayerMapping.props);\n        let pointsLayerProps = layerProps.points;\n\n        if (type === 'text' && this.state.binary) {\n          const {\n            instancePickingColors,\n            ...rest\n          } = pointsLayerProps.data.attributes;\n          pointsLayerProps = { ...pointsLayerProps,\n            data: { ...pointsLayerProps.data,\n              attributes: rest\n            }\n          };\n        }\n\n        pointLayers.push(new PointsLayer(forwardedProps, this.getSubLayerProps({\n          id,\n          updateTriggers: forwardedProps.updateTriggers,\n          highlightedObjectIndex\n        }), pointsLayerProps));\n      }\n    }\n\n    return pointLayers;\n  }\n\n  renderLayers() {\n    const {\n      extruded\n    } = this.props;\n\n    const polygonFillLayer = this._renderPolygonLayer();\n\n    const lineLayers = this._renderLineLayers();\n\n    const pointLayers = this._renderPointLayers();\n\n    return [!extruded && polygonFillLayer, lineLayers, pointLayers, extruded && polygonFillLayer];\n  }\n\n  getSubLayerAccessor(accessor) {\n    const {\n      binary\n    } = this.state;\n\n    if (!binary || typeof accessor !== 'function') {\n      return super.getSubLayerAccessor(accessor);\n    }\n\n    return (object, info) => {\n      const {\n        data,\n        index\n      } = info;\n      const feature = binaryToFeatureForAccesor(data, index);\n      return accessor(feature, info);\n    };\n  }\n\n}\nGeoJsonLayer.layerName = 'GeoJsonLayer';\nGeoJsonLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["CompositeLayer","log","replaceInRange","binaryToFeatureForAccesor","POINT_LAYER","LINE_LAYER","POLYGON_LAYER","getDefaultProps","forwardProps","getGeojsonFeatures","separateGeojsonFeatures","createLayerPropsFromFeatures","createLayerPropsFromBinary","FEATURE_TYPES","defaultProps","circle","icon","text","stroked","filled","extruded","wireframe","iconAtlas","type","value","iconMapping","getIcon","f","properties","getText","pointType","getRadius","deprecatedFor","GeoJsonLayer","initializeState","state","layerProps","features","props","getLineDashArray","removed","updateState","changeFlags","dataChanged","data","binary","setState","_updateStateBinary","_updateStateJSON","encodePickingColor","wrapFeature","getSubLayerRow","bind","newFeatures","featuresDiff","Array","isArray","oldFeatures","key","slice","dataRange","partialFeatures","push","getIndex","__source","index","replace","getPickingInfo","params","info","sourceLayer","featureType","find","ft","id","startsWith","points","globalFeatureIds","_updateAutoHighlight","pointLayerIdPrefix","sourceIsPoints","layer","getSubLayers","updateAutoHighlight","_renderPolygonLayer","PolygonFillLayer","shouldRenderSubLayer","polygons","getSubLayerClass","forwardedProps","useLineColor","getLineColor","updateTriggers","lineColors","getSubLayerProps","_renderLineLayers","polygonStrokeLayerId","lineStringsLayerId","PolygonStrokeLayer","polygonsOutline","LineStringsLayer","lines","_renderPointLayers","highlightedObjectIndex","Number","isFinite","findIndex","d","types","Set","split","pointLayers","PointLayerMapping","PointsLayer","pointsLayerProps","instancePickingColors","rest","attributes","renderLayers","polygonFillLayer","lineLayers","getSubLayerAccessor","accessor","object","feature","layerName"],"sources":["../../../src/geojson-layer/geojson-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, log} from '@deck.gl/core';\nimport {replaceInRange} from '../utils';\nimport {binaryToFeatureForAccesor} from './geojson-binary';\nimport {\n  POINT_LAYER,\n  LINE_LAYER,\n  POLYGON_LAYER,\n  getDefaultProps,\n  forwardProps\n} from './sub-layer-map';\n\nimport {getGeojsonFeatures, separateGeojsonFeatures} from './geojson';\nimport {createLayerPropsFromFeatures, createLayerPropsFromBinary} from './geojson-layer-props';\n\nconst FEATURE_TYPES = ['points', 'linestrings', 'polygons'];\n\nconst defaultProps = {\n  ...getDefaultProps(POINT_LAYER.circle),\n  ...getDefaultProps(POINT_LAYER.icon),\n  ...getDefaultProps(POINT_LAYER.text),\n  ...getDefaultProps(LINE_LAYER),\n  ...getDefaultProps(POLYGON_LAYER),\n\n  // Overwrite sub layer defaults\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  iconAtlas: {type: 'object', value: null},\n  iconMapping: {type: 'object', value: {}},\n  getIcon: {type: 'accessor', value: f => f.properties.icon},\n  getText: {type: 'accessor', value: f => f.properties.text},\n\n  // Self props\n  pointType: 'circle',\n\n  // TODO: deprecated, remove in v9\n  getRadius: {deprecatedFor: 'getPointRadius'}\n};\n\nexport default class GeoJsonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      layerProps: {},\n      features: {}\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({props, changeFlags}) {\n    if (!changeFlags.dataChanged) {\n      return;\n    }\n    const {data} = this.props;\n    const binary = data && 'points' in data && 'polygons' in data && 'lines' in data;\n\n    this.setState({binary});\n\n    if (binary) {\n      this._updateStateBinary({props, changeFlags});\n    } else {\n      this._updateStateJSON({props, changeFlags});\n    }\n  }\n\n  _updateStateBinary({props, changeFlags}) {\n    const layerProps = createLayerPropsFromBinary(props.data, this.encodePickingColor);\n    this.setState({layerProps});\n  }\n\n  _updateStateJSON({props, changeFlags}) {\n    const features = getGeojsonFeatures(props.data);\n    const wrapFeature = this.getSubLayerRow.bind(this);\n    let newFeatures = {};\n    const featuresDiff = {};\n\n    if (Array.isArray(changeFlags.dataChanged)) {\n      const oldFeatures = this.state.features;\n      for (const key in oldFeatures) {\n        newFeatures[key] = oldFeatures[key].slice();\n        featuresDiff[key] = [];\n      }\n\n      for (const dataRange of changeFlags.dataChanged) {\n        const partialFeatures = separateGeojsonFeatures(features, wrapFeature, dataRange);\n        for (const key in oldFeatures) {\n          featuresDiff[key].push(\n            replaceInRange({\n              data: newFeatures[key],\n              getIndex: f => f.__source.index,\n              dataRange,\n              replace: partialFeatures[key]\n            })\n          );\n        }\n      }\n    } else {\n      newFeatures = separateGeojsonFeatures(features, wrapFeature);\n    }\n\n    const layerProps = createLayerPropsFromFeatures(newFeatures, featuresDiff);\n\n    this.setState({\n      features: newFeatures,\n      featuresDiff,\n      layerProps\n    });\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {index, sourceLayer} = info;\n    info.featureType = FEATURE_TYPES.find(ft => sourceLayer.id.startsWith(`${this.id}-${ft}-`));\n    if (index >= 0 && sourceLayer.id.startsWith(`${this.id}-points-text`) && this.state.binary) {\n      info.index = this.props.data.points.globalFeatureIds.value[index];\n    }\n    return info;\n  }\n\n  _updateAutoHighlight(info) {\n    // All sub layers except the points layer use source feature index to encode the picking color\n    // The points layer uses indices from the points data array.\n    const pointLayerIdPrefix = `${this.id}-points-`;\n    const sourceIsPoints = info.featureType === 'points';\n    for (const layer of this.getSubLayers()) {\n      if (layer.id.startsWith(pointLayerIdPrefix) === sourceIsPoints) {\n        layer.updateAutoHighlight(info);\n      }\n    }\n  }\n\n  _renderPolygonLayer() {\n    const {extruded, wireframe} = this.props;\n    const {layerProps} = this.state;\n    const id = 'polygons-fill';\n\n    const PolygonFillLayer =\n      this.shouldRenderSubLayer(id, layerProps.polygons.data) &&\n      this.getSubLayerClass(id, POLYGON_LAYER.type);\n\n    if (PolygonFillLayer) {\n      const forwardedProps = forwardProps(this, POLYGON_LAYER.props);\n      // Avoid building the lineColors attribute if wireframe is off\n      const useLineColor = extruded && wireframe;\n      if (!useLineColor) {\n        delete forwardedProps.getLineColor;\n      }\n      // using a legacy API to invalid lineColor attributes\n      forwardedProps.updateTriggers.lineColors = useLineColor;\n\n      return new PolygonFillLayer(\n        forwardedProps,\n        this.getSubLayerProps({\n          id,\n          updateTriggers: forwardedProps.updateTriggers\n        }),\n        layerProps.polygons\n      );\n    }\n    return null;\n  }\n\n  _renderLineLayers() {\n    const {extruded, stroked} = this.props;\n    const {layerProps} = this.state;\n    const polygonStrokeLayerId = 'polygons-stroke';\n    const lineStringsLayerId = 'linestrings';\n\n    const PolygonStrokeLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer(polygonStrokeLayerId, layerProps.polygonsOutline.data) &&\n      this.getSubLayerClass(polygonStrokeLayerId, LINE_LAYER.type);\n    const LineStringsLayer =\n      this.shouldRenderSubLayer(lineStringsLayerId, layerProps.lines.data) &&\n      this.getSubLayerClass(lineStringsLayerId, LINE_LAYER.type);\n\n    if (PolygonStrokeLayer || LineStringsLayer) {\n      const forwardedProps = forwardProps(this, LINE_LAYER.props);\n\n      return [\n        PolygonStrokeLayer &&\n          new PolygonStrokeLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id: polygonStrokeLayerId,\n              updateTriggers: forwardedProps.updateTriggers\n            }),\n            layerProps.polygonsOutline\n          ),\n\n        LineStringsLayer &&\n          new LineStringsLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id: lineStringsLayerId,\n              updateTriggers: forwardedProps.updateTriggers\n            }),\n            layerProps.lines\n          )\n      ];\n    }\n    return null;\n  }\n\n  _renderPointLayers() {\n    const {pointType} = this.props;\n    const {layerProps, binary} = this.state;\n    let {highlightedObjectIndex} = this.props;\n\n    if (!binary && Number.isFinite(highlightedObjectIndex)) {\n      highlightedObjectIndex = layerProps.points.data.findIndex(\n        d => d.__source.index === highlightedObjectIndex\n      );\n    }\n\n    // Avoid duplicate sub layer ids\n    const types = new Set(pointType.split('+'));\n    const pointLayers = [];\n    for (const type of types) {\n      const id = `points-${type}`;\n      const PointLayerMapping = POINT_LAYER[type];\n      const PointsLayer =\n        PointLayerMapping &&\n        this.shouldRenderSubLayer(id, layerProps.points.data) &&\n        this.getSubLayerClass(id, PointLayerMapping.type);\n      if (PointsLayer) {\n        const forwardedProps = forwardProps(this, PointLayerMapping.props);\n        let pointsLayerProps = layerProps.points;\n\n        if (type === 'text' && this.state.binary) {\n          // Picking colors are per-point but for text per-character are required\n          // getPickingInfo() maps back to the correct index\n          // eslint-disable-next-line no-unused-vars\n          const {instancePickingColors, ...rest} = pointsLayerProps.data.attributes;\n          pointsLayerProps = {\n            ...pointsLayerProps,\n            data: {...pointsLayerProps.data, attributes: rest}\n          };\n        }\n\n        pointLayers.push(\n          new PointsLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id,\n              updateTriggers: forwardedProps.updateTriggers,\n              highlightedObjectIndex\n            }),\n            pointsLayerProps\n          )\n        );\n      }\n    }\n    return pointLayers;\n  }\n\n  renderLayers() {\n    const {extruded} = this.props;\n\n    const polygonFillLayer = this._renderPolygonLayer();\n    const lineLayers = this._renderLineLayers();\n    const pointLayers = this._renderPointLayers();\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonFillLayer,\n      lineLayers,\n      pointLayers,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonFillLayer\n    ];\n  }\n\n  getSubLayerAccessor(accessor) {\n    const {binary} = this.state;\n    if (!binary || typeof accessor !== 'function') {\n      return super.getSubLayerAccessor(accessor);\n    }\n\n    return (object, info) => {\n      const {data, index} = info;\n      const feature = binaryToFeatureForAccesor(data, index);\n      return accessor(feature, info);\n    };\n  }\n}\n\nGeoJsonLayer.layerName = 'GeoJsonLayer';\nGeoJsonLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}