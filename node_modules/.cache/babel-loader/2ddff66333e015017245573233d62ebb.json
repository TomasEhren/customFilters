{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport { isWebGL2 } from '@luma.gl/gltools';\nimport { getScratchArray, fillArray } from '../utils/array-utils-flat';\nimport { assert } from '../utils/assert';\nimport { getBrowser } from 'probe.gl';\nvar ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';\n\nvar VertexArrayObject = /*#__PURE__*/function (_Resource) {\n  _inherits(VertexArrayObject, _Resource);\n\n  var _super = _createSuper(VertexArrayObject);\n\n  function VertexArrayObject(gl) {\n    var _this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, VertexArrayObject);\n\n    var id = opts.id || opts.program && opts.program.id;\n    _this = _super.call(this, gl, Object.assign({}, opts, {\n      id: id\n    }));\n    _this.buffer = null;\n    _this.bufferValue = null;\n    _this.isDefaultArray = opts.isDefaultArray || false;\n    _this.gl2 = gl;\n\n    _this.initialize(opts);\n\n    Object.seal(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(VertexArrayObject, [{\n    key: \"delete\",\n    value: function _delete() {\n      _get(_getPrototypeOf(VertexArrayObject.prototype), \"delete\", this).call(this);\n\n      if (this.buffer) {\n        this.buffer.delete();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"MAX_ATTRIBUTES\",\n    get: function get() {\n      return VertexArrayObject.getMaxAttributes(this.gl);\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.setProps(props);\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      return this;\n    }\n  }, {\n    key: \"setElementBuffer\",\n    value: function setElementBuffer() {\n      var _this2 = this;\n\n      var elementBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      assert(!elementBuffer || elementBuffer.target === 34963, ERR_ELEMENTS);\n      this.bind(function () {\n        _this2.gl.bindBuffer(34963, elementBuffer ? elementBuffer.handle : null);\n      });\n      return this;\n    }\n  }, {\n    key: \"setBuffer\",\n    value: function setBuffer(location, buffer, accessor) {\n      if (buffer.target === 34963) {\n        return this.setElementBuffer(buffer, accessor);\n      }\n\n      var size = accessor.size,\n          type = accessor.type,\n          stride = accessor.stride,\n          offset = accessor.offset,\n          normalized = accessor.normalized,\n          integer = accessor.integer,\n          divisor = accessor.divisor;\n      var gl = this.gl,\n          gl2 = this.gl2;\n      location = Number(location);\n      this.bind(function () {\n        gl.bindBuffer(34962, buffer.handle);\n\n        if (integer) {\n          assert(isWebGL2(gl));\n          gl2.vertexAttribIPointer(location, size, type, stride, offset);\n        } else {\n          gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n        }\n\n        gl.enableVertexAttribArray(location);\n        gl2.vertexAttribDivisor(location, divisor || 0);\n      });\n      return this;\n    }\n  }, {\n    key: \"enable\",\n    value: function enable(location) {\n      var _this3 = this;\n\n      var _enable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      var disablingAttributeZero = !_enable && location === 0 && !VertexArrayObject.isSupported(this.gl, {\n        constantAttributeZero: true\n      });\n\n      if (!disablingAttributeZero) {\n        location = Number(location);\n        this.bind(function () {\n          return _enable ? _this3.gl.enableVertexAttribArray(location) : _this3.gl.disableVertexAttribArray(location);\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getConstantBuffer\",\n    value: function getConstantBuffer(elementCount, value) {\n      var constantValue = this._normalizeConstantArrayValue(value);\n\n      var byteLength = constantValue.byteLength * elementCount;\n      var length = constantValue.length * elementCount;\n      var updateNeeded = !this.buffer;\n      this.buffer = this.buffer || new Buffer(this.gl, byteLength);\n      updateNeeded = updateNeeded || this.buffer.reallocate(byteLength);\n      updateNeeded = updateNeeded || !this._compareConstantArrayValues(constantValue, this.bufferValue);\n\n      if (updateNeeded) {\n        var typedArray = getScratchArray(value.constructor, length);\n        fillArray({\n          target: typedArray,\n          source: constantValue,\n          start: 0,\n          count: length\n        });\n        this.buffer.subData(typedArray);\n        this.bufferValue = value;\n      }\n\n      return this.buffer;\n    }\n  }, {\n    key: \"_normalizeConstantArrayValue\",\n    value: function _normalizeConstantArrayValue(arrayValue) {\n      if (Array.isArray(arrayValue)) {\n        return new Float32Array(arrayValue);\n      }\n\n      return arrayValue;\n    }\n  }, {\n    key: \"_compareConstantArrayValues\",\n    value: function _compareConstantArrayValues(v1, v2) {\n      if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {\n        return false;\n      }\n\n      for (var i = 0; i < v1.length; ++i) {\n        if (v1[i] !== v2[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      var gl2 = this.gl;\n      return gl2.createVertexArray();\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle(handle) {\n      this.gl2.deleteVertexArray(handle);\n      return [this.elements];\n    }\n  }, {\n    key: \"_bindHandle\",\n    value: function _bindHandle(handle) {\n      this.gl2.bindVertexArray(handle);\n    }\n  }, {\n    key: \"_getParameter\",\n    value: function _getParameter(pname, _ref) {\n      var _this4 = this;\n\n      var location = _ref.location;\n      assert(Number.isFinite(location));\n      return this.bind(function () {\n        switch (pname) {\n          case 34373:\n            return _this4.gl.getVertexAttribOffset(location, pname);\n\n          default:\n            return _this4.gl.getVertexAttrib(location, pname);\n        }\n      });\n    }\n  }], [{\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (options.constantAttributeZero) {\n        return isWebGL2(gl) || getBrowser() === 'Chrome';\n      }\n\n      return true;\n    }\n  }, {\n    key: \"getDefaultArray\",\n    value: function getDefaultArray(gl) {\n      gl.luma = gl.luma || {};\n\n      if (!gl.luma.defaultVertexArray) {\n        gl.luma.defaultVertexArray = new VertexArrayObject(gl, {\n          handle: null,\n          isDefaultArray: true\n        });\n      }\n\n      return gl.luma.defaultVertexArray;\n    }\n  }, {\n    key: \"getMaxAttributes\",\n    value: function getMaxAttributes(gl) {\n      VertexArrayObject.MAX_ATTRIBUTES = VertexArrayObject.MAX_ATTRIBUTES || gl.getParameter(34921);\n      return VertexArrayObject.MAX_ATTRIBUTES;\n    }\n  }, {\n    key: \"setConstant\",\n    value: function setConstant(gl, location, array) {\n      switch (array.constructor) {\n        case Float32Array:\n          VertexArrayObject._setConstantFloatArray(gl, location, array);\n\n          break;\n\n        case Int32Array:\n          VertexArrayObject._setConstantIntArray(gl, location, array);\n\n          break;\n\n        case Uint32Array:\n          VertexArrayObject._setConstantUintArray(gl, location, array);\n\n          break;\n\n        default:\n          assert(false);\n      }\n    }\n  }, {\n    key: \"_setConstantFloatArray\",\n    value: function _setConstantFloatArray(gl, location, array) {\n      switch (array.length) {\n        case 1:\n          gl.vertexAttrib1fv(location, array);\n          break;\n\n        case 2:\n          gl.vertexAttrib2fv(location, array);\n          break;\n\n        case 3:\n          gl.vertexAttrib3fv(location, array);\n          break;\n\n        case 4:\n          gl.vertexAttrib4fv(location, array);\n          break;\n\n        default:\n          assert(false);\n      }\n    }\n  }, {\n    key: \"_setConstantIntArray\",\n    value: function _setConstantIntArray(gl, location, array) {\n      assert(isWebGL2(gl));\n\n      switch (array.length) {\n        case 1:\n          gl.vertexAttribI1iv(location, array);\n          break;\n\n        case 2:\n          gl.vertexAttribI2iv(location, array);\n          break;\n\n        case 3:\n          gl.vertexAttribI3iv(location, array);\n          break;\n\n        case 4:\n          gl.vertexAttribI4iv(location, array);\n          break;\n\n        default:\n          assert(false);\n      }\n    }\n  }, {\n    key: \"_setConstantUintArray\",\n    value: function _setConstantUintArray(gl, location, array) {\n      assert(isWebGL2(gl));\n\n      switch (array.length) {\n        case 1:\n          gl.vertexAttribI1uiv(location, array);\n          break;\n\n        case 2:\n          gl.vertexAttribI2uiv(location, array);\n          break;\n\n        case 3:\n          gl.vertexAttribI3uiv(location, array);\n          break;\n\n        case 4:\n          gl.vertexAttribI4uiv(location, array);\n          break;\n\n        default:\n          assert(false);\n      }\n    }\n  }]);\n\n  return VertexArrayObject;\n}(Resource);\n\nexport { VertexArrayObject as default };","map":{"version":3,"mappings":"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","names":["Resource","Buffer","isWebGL2","getScratchArray","fillArray","assert","getBrowser","ERR_ELEMENTS","VertexArrayObject","constructor","gl","opts","id","program","Object","assign","buffer","bufferValue","isDefaultArray","gl2","initialize","seal","delete","getMaxAttributes","props","setProps","setElementBuffer","elementBuffer","target","bind","bindBuffer","handle","setBuffer","location","accessor","size","type","stride","offset","normalized","integer","divisor","Number","vertexAttribIPointer","vertexAttribPointer","enableVertexAttribArray","vertexAttribDivisor","enable","disablingAttributeZero","isSupported","constantAttributeZero","disableVertexAttribArray","getConstantBuffer","elementCount","value","constantValue","_normalizeConstantArrayValue","byteLength","length","updateNeeded","reallocate","_compareConstantArrayValues","typedArray","source","start","count","subData","arrayValue","Array","isArray","Float32Array","v1","v2","i","_createHandle","createVertexArray","_deleteHandle","deleteVertexArray","elements","_bindHandle","bindVertexArray","_getParameter","pname","isFinite","getVertexAttribOffset","getVertexAttrib","options","luma","defaultVertexArray","MAX_ATTRIBUTES","getParameter","array","_setConstantFloatArray","Int32Array","_setConstantIntArray","Uint32Array","_setConstantUintArray","vertexAttrib1fv","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttribI1iv","vertexAttribI2iv","vertexAttribI3iv","vertexAttribI4iv","vertexAttribI1uiv","vertexAttribI2uiv","vertexAttribI3uiv","vertexAttribI4uiv"],"sources":["../../../src/classes/vertex-array-object.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {getScratchArray, fillArray} from '../utils/array-utils-flat';\nimport {assert} from '../utils/assert';\nimport {getBrowser} from 'probe.gl';\n\nconst ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';\n\nexport default class VertexArrayObject extends Resource {\n  static isSupported(gl, options = {}) {\n    // Attribute 0 can not be disable on most desktop OpenGL based browsers\n    // and on iOS Safari browser.\n    if (options.constantAttributeZero) {\n      return isWebGL2(gl) || getBrowser() === 'Chrome';\n    }\n\n    // Whether additional objects can be created\n    return true;\n  }\n\n  // Returns the global (null) vertex array object. Exists even when no extension available\n  // TODO(Tarek): VAOs are now polyfilled. Deprecate this in 9.0\n  static getDefaultArray(gl) {\n    gl.luma = gl.luma || {};\n    if (!gl.luma.defaultVertexArray) {\n      gl.luma.defaultVertexArray = new VertexArrayObject(gl, {handle: null, isDefaultArray: true});\n    }\n    return gl.luma.defaultVertexArray;\n  }\n\n  static getMaxAttributes(gl) {\n    // TODO - should be cached per context\n    // @ts-ignore\n    VertexArrayObject.MAX_ATTRIBUTES =\n      // @ts-ignore\n      VertexArrayObject.MAX_ATTRIBUTES || gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    // @ts-ignore\n    return VertexArrayObject.MAX_ATTRIBUTES;\n  }\n\n  // Note: Constants are stored globally on the WebGL context, not the VAO\n  // So they need to be updated before every render\n  // TODO - use known type (in configuration or passed in) to allow non-typed arrays?\n  // TODO - remember/cache values to avoid setting them unnecessarily?\n  static setConstant(gl, location, array) {\n    switch (array.constructor) {\n      case Float32Array:\n        VertexArrayObject._setConstantFloatArray(gl, location, array);\n        break;\n      case Int32Array:\n        VertexArrayObject._setConstantIntArray(gl, location, array);\n        break;\n      case Uint32Array:\n        VertexArrayObject._setConstantUintArray(gl, location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  // Create a VertexArray\n  constructor(gl, opts = {}) {\n    // Use program's id if program but no id is supplied\n    const id = opts.id || (opts.program && opts.program.id);\n    super(gl, Object.assign({}, opts, {id}));\n\n    this.buffer = null;\n    this.bufferValue = null;\n    this.isDefaultArray = opts.isDefaultArray || false;\n\n    /** @type {WebGL2RenderingContext} */\n    this.gl2 = gl;\n\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  delete() {\n    super.delete();\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n    return this;\n  }\n\n  get MAX_ATTRIBUTES() {\n    return VertexArrayObject.getMaxAttributes(this.gl);\n  }\n\n  initialize(props = {}) {\n    return this.setProps(props);\n  }\n\n  setProps(props) {\n    // TODO: decide which props should be supported\n    return this;\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n  setElementBuffer(elementBuffer = null, opts = {}) {\n    assert(!elementBuffer || elementBuffer.target === GL.ELEMENT_ARRAY_BUFFER, ERR_ELEMENTS);\n\n    // The GL.ELEMENT_ARRAY_BUFFER_BINDING is stored on the VertexArrayObject...\n    this.bind(() => {\n      this.gl.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, elementBuffer ? elementBuffer.handle : null);\n    });\n\n    return this;\n  }\n\n  // Set a location in vertex attributes array to a bufferk, enables the location, sets divisor\n  setBuffer(location, buffer, accessor) {\n    // Check target\n    if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n      return this.setElementBuffer(buffer, accessor);\n    }\n\n    const {size, type, stride, offset, normalized, integer, divisor} = accessor;\n\n    const {gl, gl2} = this;\n    location = Number(location);\n\n    this.bind(() => {\n      // A non-zero buffer object must be bound to the GL_ARRAY_BUFFER target\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer.handle);\n\n      // WebGL2 supports *integer* data formats, i.e. GPU will see integer values\n      if (integer) {\n        assert(isWebGL2(gl));\n        gl2.vertexAttribIPointer(location, size, type, stride, offset);\n      } else {\n        // Attaches ARRAY_BUFFER with specified buffer format to location\n        gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n      }\n      gl.enableVertexAttribArray(location);\n      gl2.vertexAttribDivisor(location, divisor || 0);\n\n      // NOTE We don't unbind buffer here, typically another buffer will be bound just after\n    });\n\n    return this;\n  }\n\n  // Enabling an attribute location makes it reference the currently bound buffer\n  // Disabling an attribute location makes it reference the global constant value\n  // TODO - handle single values for size 1 attributes?\n  // TODO - convert classic arrays based on known type?\n  enable(location, enable = true) {\n    // Attribute 0 cannot be disabled in most desktop OpenGL based browsers\n    const disablingAttributeZero =\n      !enable &&\n      location === 0 &&\n      !VertexArrayObject.isSupported(this.gl, {constantAttributeZero: true});\n\n    if (!disablingAttributeZero) {\n      location = Number(location);\n      this.bind(\n        () =>\n          enable\n            ? this.gl.enableVertexAttribArray(location)\n            : this.gl.disableVertexAttribArray(location)\n      );\n    }\n    return this;\n  }\n\n  // Provide a means to create a buffer that is equivalent to a constant.\n  // NOTE: Desktop OpenGL cannot disable attribute 0.\n  // https://stackoverflow.com/questions/20305231/webgl-warning-attribute-0-is-disabled-\n  // this-has-significant-performance-penalt\n  getConstantBuffer(elementCount, value) {\n    // Create buffer only when needed, and reuse it (avoids inflating buffer creation statistics)\n\n    const constantValue = this._normalizeConstantArrayValue(value);\n\n    const byteLength = constantValue.byteLength * elementCount;\n    const length = constantValue.length * elementCount;\n\n    let updateNeeded = !this.buffer;\n\n    this.buffer = this.buffer || new Buffer(this.gl, byteLength);\n    updateNeeded = updateNeeded || this.buffer.reallocate(byteLength);\n\n    // Reallocate and update contents if needed\n    updateNeeded =\n      updateNeeded || !this._compareConstantArrayValues(constantValue, this.bufferValue);\n\n    if (updateNeeded) {\n      // Create a typed array that is big enough, and fill it with the required data\n      const typedArray = getScratchArray(value.constructor, length);\n      fillArray({target: typedArray, source: constantValue, start: 0, count: length});\n      this.buffer.subData(typedArray);\n      this.bufferValue = value;\n    }\n\n    return this.buffer;\n  }\n\n  // PRIVATE\n\n  // TODO - convert Arrays based on known type? (read type from accessor, don't assume Float32Array)\n  // TODO - handle single values for size 1 attributes?\n  _normalizeConstantArrayValue(arrayValue) {\n    if (Array.isArray(arrayValue)) {\n      return new Float32Array(arrayValue);\n    }\n    return arrayValue;\n  }\n\n  _compareConstantArrayValues(v1, v2) {\n    if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {\n      return false;\n    }\n    for (let i = 0; i < v1.length; ++i) {\n      if (v1[i] !== v2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  static _setConstantFloatArray(gl, location, array) {\n    switch (array.length) {\n      case 1:\n        gl.vertexAttrib1fv(location, array);\n        break;\n      case 2:\n        gl.vertexAttrib2fv(location, array);\n        break;\n      case 3:\n        gl.vertexAttrib3fv(location, array);\n        break;\n      case 4:\n        gl.vertexAttrib4fv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantIntArray(gl, location, array) {\n    assert(isWebGL2(gl));\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1iv(location, array);\n        break;\n      case 2:\n        gl.vertexAttribI2iv(location, array);\n        break;\n      case 3:\n        gl.vertexAttribI3iv(location, array);\n        break;\n      case 4:\n        gl.vertexAttribI4iv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantUintArray(gl, location, array) {\n    assert(isWebGL2(gl));\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1uiv(location, array);\n        break;\n      case 2:\n        gl.vertexAttribI2uiv(location, array);\n        break;\n      case 3:\n        gl.vertexAttribI3uiv(location, array);\n        break;\n      case 4:\n        gl.vertexAttribI4uiv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  // RESOURCE IMPLEMENTATION\n\n  _createHandle() {\n    /** @type {WebGL2RenderingContext} */\n    // @ts-ignore\n    const gl2 = this.gl;\n    return gl2.createVertexArray();\n  }\n\n  _deleteHandle(handle) {\n    this.gl2.deleteVertexArray(handle);\n    // @ts-ignore\n    return [this.elements];\n    // return [this.elements, ...this.buffers];\n  }\n\n  _bindHandle(handle) {\n    this.gl2.bindVertexArray(handle);\n  }\n\n  // Generic getter for information about a vertex attribute at a given position\n  _getParameter(pname, {location}) {\n    assert(Number.isFinite(location));\n    return this.bind(() => {\n      switch (pname) {\n        case GL.VERTEX_ATTRIB_ARRAY_POINTER:\n          return this.gl.getVertexAttribOffset(location, pname);\n        default:\n          return this.gl.getVertexAttrib(location, pname);\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}