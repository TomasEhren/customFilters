{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Resource from './resource';\nimport RENDERBUFFER_FORMATS from './renderbuffer-formats';\nimport { isWebGL2 } from '@luma.gl/gltools';\nimport { assert } from '../utils/assert';\n\nfunction isFormatSupported(gl, format, formats) {\n  var info = formats[format];\n\n  if (!info) {\n    return false;\n  }\n\n  var value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n\n  if (typeof value === 'string') {\n    return gl.getExtension(value);\n  }\n\n  return value;\n}\n\nvar Renderbuffer = /*#__PURE__*/function (_Resource) {\n  _inherits(Renderbuffer, _Resource);\n\n  var _super = _createSuper(Renderbuffer);\n\n  function Renderbuffer(gl) {\n    var _this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Renderbuffer);\n\n    _this = _super.call(this, gl, opts);\n\n    _this.initialize(opts);\n\n    Object.seal(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Renderbuffer, [{\n    key: \"initialize\",\n    value: function initialize(_ref) {\n      var format = _ref.format,\n          _ref$width = _ref.width,\n          width = _ref$width === void 0 ? 1 : _ref$width,\n          _ref$height = _ref.height,\n          height = _ref$height === void 0 ? 1 : _ref$height,\n          _ref$samples = _ref.samples,\n          samples = _ref$samples === void 0 ? 0 : _ref$samples;\n      assert(format, 'Needs format');\n\n      this._trackDeallocatedMemory();\n\n      this.gl.bindRenderbuffer(36161, this.handle);\n\n      if (samples !== 0 && isWebGL2(this.gl)) {\n        this.gl.renderbufferStorageMultisample(36161, samples, format, width, height);\n      } else {\n        this.gl.renderbufferStorage(36161, format, width, height);\n      }\n\n      this.format = format;\n      this.width = width;\n      this.height = height;\n      this.samples = samples;\n\n      this._trackAllocatedMemory(this.width * this.height * (this.samples || 1) * RENDERBUFFER_FORMATS[this.format].bpp);\n\n      return this;\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(_ref2) {\n      var width = _ref2.width,\n          height = _ref2.height;\n\n      if (width !== this.width || height !== this.height) {\n        return this.initialize({\n          width: width,\n          height: height,\n          format: this.format,\n          samples: this.samples\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return this.gl.createRenderbuffer();\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      this.gl.deleteRenderbuffer(this.handle);\n\n      this._trackDeallocatedMemory();\n    }\n  }, {\n    key: \"_bindHandle\",\n    value: function _bindHandle(handle) {\n      this.gl.bindRenderbuffer(36161, handle);\n    }\n  }, {\n    key: \"_syncHandle\",\n    value: function _syncHandle(handle) {\n      this.format = this.getParameter(36164);\n      this.width = this.getParameter(36162);\n      this.height = this.getParameter(36163);\n      this.samples = this.getParameter(36011);\n    }\n  }, {\n    key: \"_getParameter\",\n    value: function _getParameter(pname) {\n      this.gl.bindRenderbuffer(36161, this.handle);\n      var value = this.gl.getRenderbufferParameter(36161, pname);\n      return value;\n    }\n  }], [{\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        format: null\n      },\n          format = _ref3.format;\n\n      return !format || isFormatSupported(gl, format, RENDERBUFFER_FORMATS);\n    }\n  }, {\n    key: \"getSamplesForFormat\",\n    value: function getSamplesForFormat(gl, _ref4) {\n      var format = _ref4.format;\n      return gl.getInternalformatParameter(36161, format, 32937);\n    }\n  }]);\n\n  return Renderbuffer;\n}(Resource);\n\nexport { Renderbuffer as default };","map":{"version":3,"mappings":"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","names":["Resource","RENDERBUFFER_FORMATS","isWebGL2","assert","isFormatSupported","gl","format","formats","info","value","gl2","gl1","getExtension","Renderbuffer","constructor","opts","initialize","Object","seal","width","height","samples","_trackDeallocatedMemory","bindRenderbuffer","handle","renderbufferStorageMultisample","renderbufferStorage","_trackAllocatedMemory","bpp","resize","_createHandle","createRenderbuffer","_deleteHandle","deleteRenderbuffer","_bindHandle","_syncHandle","getParameter","_getParameter","pname","getRenderbufferParameter","getInternalformatParameter"],"sources":["../../../src/classes/renderbuffer.js"],"sourcesContent":["/* eslint-disable no-inline-comments */\nimport GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport RENDERBUFFER_FORMATS from './renderbuffer-formats';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {assert} from '../utils/assert';\n\nfunction isFormatSupported(gl, format, formats) {\n  const info = formats[format];\n  if (!info) {\n    return false;\n  }\n  const value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n  if (typeof value === 'string') {\n    return gl.getExtension(value);\n  }\n  return value;\n}\n\nexport default class Renderbuffer extends Resource {\n  static isSupported(gl, {format} = {format: null}) {\n    return !format || isFormatSupported(gl, format, RENDERBUFFER_FORMATS);\n  }\n\n  static getSamplesForFormat(gl, {format}) {\n    // Polyfilled to return [0] under WebGL1\n    return gl.getInternalformatParameter(GL.RENDERBUFFER, format, GL.SAMPLES);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // @ts-ignore\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  // Creates and initializes a renderbuffer object's data store\n  initialize({format, width = 1, height = 1, samples = 0}) {\n    assert(format, 'Needs format');\n\n    this._trackDeallocatedMemory();\n\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, this.handle);\n\n    if (samples !== 0 && isWebGL2(this.gl)) {\n      // @ts-ignore\n      this.gl.renderbufferStorageMultisample(GL.RENDERBUFFER, samples, format, width, height);\n    } else {\n      this.gl.renderbufferStorage(GL.RENDERBUFFER, format, width, height);\n    }\n\n    // this.gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n\n    this.format = format;\n    this.width = width;\n    this.height = height;\n    this.samples = samples;\n\n    this._trackAllocatedMemory(\n      this.width * this.height * (this.samples || 1) * RENDERBUFFER_FORMATS[this.format].bpp\n    );\n\n    return this;\n  }\n\n  resize({width, height}) {\n    // Don't resize if width/height haven't changed\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({width, height, format: this.format, samples: this.samples});\n    }\n    return this;\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createRenderbuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteRenderbuffer(this.handle);\n    this._trackDeallocatedMemory();\n  }\n\n  _bindHandle(handle) {\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, handle);\n  }\n\n  _syncHandle(handle) {\n    this.format = this.getParameter(GL.RENDERBUFFER_INTERNAL_FORMAT);\n    this.width = this.getParameter(GL.RENDERBUFFER_WIDTH);\n    this.height = this.getParameter(GL.RENDERBUFFER_HEIGHT);\n    this.samples = this.getParameter(GL.RENDERBUFFER_SAMPLES);\n  }\n\n  // @param {Boolean} opt.autobind=true - method call will bind/unbind object\n  // @returns {GLenum|GLint} - depends on pname\n  _getParameter(pname) {\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, this.handle);\n    const value = this.gl.getRenderbufferParameter(GL.RENDERBUFFER, pname);\n    // this.gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n    return value;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}