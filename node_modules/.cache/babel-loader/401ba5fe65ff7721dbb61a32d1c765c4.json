{"ast":null,"code":"import { assert } from '../utils/assert';\nconst TYPES = ['SCALAR', 'VEC2', 'VEC3', 'VEC4'];\nconst ARRAY_CONSTRUCTOR_TO_WEBGL_CONSTANT = [[Int8Array, 5120], [Uint8Array, 5121], [Int16Array, 5122], [Uint16Array, 5123], [Uint32Array, 5125], [Float32Array, 5126], [Float64Array, 5130]];\nconst ARRAY_TO_COMPONENT_TYPE = new Map(ARRAY_CONSTRUCTOR_TO_WEBGL_CONSTANT);\nconst ATTRIBUTE_TYPE_TO_COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\nconst ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE = {\n  5120: 1,\n  5121: 1,\n  5122: 2,\n  5123: 2,\n  5125: 4,\n  5126: 4\n};\nconst ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY = {\n  5120: Int8Array,\n  5121: Uint8Array,\n  5122: Int16Array,\n  5123: Uint16Array,\n  5125: Uint32Array,\n  5126: Float32Array\n};\nexport function getAccessorTypeFromSize(size) {\n  const type = TYPES[size - 1];\n  return type || TYPES[0];\n}\nexport function getComponentTypeFromArray(typedArray) {\n  const componentType = ARRAY_TO_COMPONENT_TYPE.get(typedArray.constructor);\n\n  if (!componentType) {\n    throw new Error('Illegal typed array');\n  }\n\n  return componentType;\n}\nexport function getAccessorArrayTypeAndLength(accessor, bufferView) {\n  const ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY[accessor.componentType];\n  const components = ATTRIBUTE_TYPE_TO_COMPONENTS[accessor.type];\n  const bytesPerComponent = ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE[accessor.componentType];\n  const length = accessor.count * components;\n  const byteLength = accessor.count * components * bytesPerComponent;\n  assert(byteLength >= 0 && byteLength <= bufferView.byteLength);\n  return {\n    ArrayType,\n    length,\n    byteLength\n  };\n}","map":{"version":3,"mappings":"AAAA,SAAQA,MAAR,QAAqB,iBAArB;AAEA,MAAMC,KAAK,GAAG,CAAC,QAAD,EAAW,MAAX,EAAmB,MAAnB,EAA2B,MAA3B,CAAd;AAcA,MAAMC,mCAAsE,GAAG,CAC7E,CAACC,SAAD,EAAY,IAAZ,CAD6E,EAE7E,CAACC,UAAD,EAAa,IAAb,CAF6E,EAG7E,CAACC,UAAD,EAAa,IAAb,CAH6E,EAI7E,CAACC,WAAD,EAAc,IAAd,CAJ6E,EAK7E,CAACC,WAAD,EAAc,IAAd,CAL6E,EAM7E,CAACC,YAAD,EAAe,IAAf,CAN6E,EAO7E,CAACC,YAAD,EAAe,IAAf,CAP6E,CAA/E;AASA,MAAMC,uBAAuB,GAAG,IAAIC,GAAJ,CAC9BT,mCAD8B,CAAhC;AAIA,MAAMU,4BAA4B,GAAG;EACnCC,MAAM,EAAE,CAD2B;EAEnCC,IAAI,EAAE,CAF6B;EAGnCC,IAAI,EAAE,CAH6B;EAInCC,IAAI,EAAE,CAJ6B;EAKnCC,IAAI,EAAE,CAL6B;EAMnCC,IAAI,EAAE,CAN6B;EAOnCC,IAAI,EAAE;AAP6B,CAArC;AAUA,MAAMC,qCAAqC,GAAG;EAC5C,MAAM,CADsC;EAE5C,MAAM,CAFsC;EAG5C,MAAM,CAHsC;EAI5C,MAAM,CAJsC;EAK5C,MAAM,CALsC;EAM5C,MAAM;AANsC,CAA9C;AASA,MAAMC,iCAAiC,GAAG;EACxC,MAAMlB,SADkC;EAExC,MAAMC,UAFkC;EAGxC,MAAMC,UAHkC;EAIxC,MAAMC,WAJkC;EAKxC,MAAMC,WALkC;EAMxC,MAAMC;AANkC,CAA1C;AASA,OAAO,SAASc,uBAAT,CAAiCC,IAAjC,EAAuC;EAC5C,MAAMC,IAAI,GAAGvB,KAAK,CAACsB,IAAI,GAAG,CAAR,CAAlB;EACA,OAAOC,IAAI,IAAIvB,KAAK,CAAC,CAAD,CAApB;AACD;AAED,OAAO,SAASwB,yBAAT,CAAmCC,UAAnC,EAA+C;EACpD,MAAMC,aAAa,GAAGjB,uBAAuB,CAACkB,GAAxBlB,CAA4BgB,UAAU,CAACG,WAAvCnB,CAAtB;;EACA,IAAI,CAACiB,aAAL,EAAoB;IAClB,MAAM,IAAIG,KAAJ,CAAU,qBAAV,CAAN;EACD;;EACD,OAAOH,aAAP;AACD;AAED,OAAO,SAASI,6BAAT,CAAuCC,QAAvC,EAAiDC,UAAjD,EAA6D;EAClE,MAAMC,SAAS,GAAGb,iCAAiC,CAACW,QAAQ,CAACL,aAAV,CAAnD;EACA,MAAMQ,UAAU,GAAGvB,4BAA4B,CAACoB,QAAQ,CAACR,IAAV,CAA/C;EACA,MAAMY,iBAAiB,GAAGhB,qCAAqC,CAACY,QAAQ,CAACL,aAAV,CAA/D;EACA,MAAMU,MAAM,GAAGL,QAAQ,CAACM,KAATN,GAAiBG,UAAhC;EACA,MAAMI,UAAU,GAAGP,QAAQ,CAACM,KAATN,GAAiBG,UAAjBH,GAA8BI,iBAAjD;EACApC,MAAM,CAACuC,UAAU,IAAI,CAAdA,IAAmBA,UAAU,IAAIN,UAAU,CAACM,UAA7C,CAANvC;EACA,OAAO;IAACkC,SAAD;IAAYG,MAAZ;IAAoBE;EAApB,CAAP;AACD","names":["assert","TYPES","ARRAY_CONSTRUCTOR_TO_WEBGL_CONSTANT","Int8Array","Uint8Array","Int16Array","Uint16Array","Uint32Array","Float32Array","Float64Array","ARRAY_TO_COMPONENT_TYPE","Map","ATTRIBUTE_TYPE_TO_COMPONENTS","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE","ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY","getAccessorTypeFromSize","size","type","getComponentTypeFromArray","typedArray","componentType","get","constructor","Error","getAccessorArrayTypeAndLength","accessor","bufferView","ArrayType","components","bytesPerComponent","length","count","byteLength"],"sources":["../../../../src/lib/gltf-utils/gltf-utils.ts"],"sourcesContent":["import {assert} from '../utils/assert';\n\nconst TYPES = ['SCALAR', 'VEC2', 'VEC3', 'VEC4'];\n\ntype TypedArrayConstructor =\n  | Int8ArrayConstructor\n  | Uint8ArrayConstructor\n  | Int16ArrayConstructor\n  | Uint16ArrayConstructor\n  | Int32ArrayConstructor\n  | Uint32ArrayConstructor\n  | Int32ArrayConstructor\n  | Uint32ArrayConstructor\n  | Float32ArrayConstructor\n  | Float64ArrayConstructor;\n\nconst ARRAY_CONSTRUCTOR_TO_WEBGL_CONSTANT: [TypedArrayConstructor, number][] = [\n  [Int8Array, 5120],\n  [Uint8Array, 5121],\n  [Int16Array, 5122],\n  [Uint16Array, 5123],\n  [Uint32Array, 5125],\n  [Float32Array, 5126],\n  [Float64Array, 5130]\n];\nconst ARRAY_TO_COMPONENT_TYPE = new Map<TypedArrayConstructor, number>(\n  ARRAY_CONSTRUCTOR_TO_WEBGL_CONSTANT\n);\n\nconst ATTRIBUTE_TYPE_TO_COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\n\nconst ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE = {\n  5120: 1,\n  5121: 1,\n  5122: 2,\n  5123: 2,\n  5125: 4,\n  5126: 4\n};\n\nconst ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY = {\n  5120: Int8Array,\n  5121: Uint8Array,\n  5122: Int16Array,\n  5123: Uint16Array,\n  5125: Uint32Array,\n  5126: Float32Array\n};\n\nexport function getAccessorTypeFromSize(size) {\n  const type = TYPES[size - 1];\n  return type || TYPES[0];\n}\n\nexport function getComponentTypeFromArray(typedArray) {\n  const componentType = ARRAY_TO_COMPONENT_TYPE.get(typedArray.constructor);\n  if (!componentType) {\n    throw new Error('Illegal typed array');\n  }\n  return componentType;\n}\n\nexport function getAccessorArrayTypeAndLength(accessor, bufferView) {\n  const ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY[accessor.componentType];\n  const components = ATTRIBUTE_TYPE_TO_COMPONENTS[accessor.type];\n  const bytesPerComponent = ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE[accessor.componentType];\n  const length = accessor.count * components;\n  const byteLength = accessor.count * components * bytesPerComponent;\n  assert(byteLength >= 0 && byteLength <= bufferView.byteLength);\n  return {ArrayType, length, byteLength};\n}\n"]},"metadata":{},"sourceType":"module"}