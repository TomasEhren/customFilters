{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nvar _SRC_TEX_PARAMETER_OV;\n\nimport { cloneTextureFrom, readPixelsToArray, getShaderVersion, Buffer, Texture2D, Framebuffer } from '@luma.gl/webgl';\nimport { _transform as transformModule, getPassthroughFS, typeToChannelCount, combineInjects } from '@luma.gl/shadertools';\nimport { updateForTextures, getSizeUniforms } from './transform-shader-utils';\nvar SRC_TEX_PARAMETER_OVERRIDES = (_SRC_TEX_PARAMETER_OV = {}, _defineProperty(_SRC_TEX_PARAMETER_OV, 10241, 9728), _defineProperty(_SRC_TEX_PARAMETER_OV, 10240, 9728), _defineProperty(_SRC_TEX_PARAMETER_OV, 10242, 33071), _defineProperty(_SRC_TEX_PARAMETER_OV, 10243, 33071), _SRC_TEX_PARAMETER_OV);\nvar FS_OUTPUT_VARIABLE = 'transform_output';\n\nvar TextureTransform = /*#__PURE__*/function () {\n  function TextureTransform(gl) {\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, TextureTransform);\n\n    this.gl = gl;\n    this.id = this.currentIndex = 0;\n    this._swapTexture = null;\n    this.targetTextureVarying = null;\n    this.targetTextureType = null;\n    this.samplerTextureMap = null;\n    this.bindings = [];\n    this.resources = {};\n\n    this._initialize(props);\n\n    Object.seal(this);\n  }\n\n  _createClass(TextureTransform, [{\n    key: \"updateModelProps\",\n    value: function updateModelProps() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var updatedModelProps = this._processVertexShader(props);\n\n      return Object.assign({}, props, updatedModelProps);\n    }\n  }, {\n    key: \"getDrawOptions\",\n    value: function getDrawOptions() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _this$bindings$this$c = this.bindings[this.currentIndex],\n          sourceBuffers = _this$bindings$this$c.sourceBuffers,\n          sourceTextures = _this$bindings$this$c.sourceTextures,\n          framebuffer = _this$bindings$this$c.framebuffer,\n          targetTexture = _this$bindings$this$c.targetTexture;\n      var attributes = Object.assign({}, sourceBuffers, opts.attributes);\n      var uniforms = Object.assign({}, opts.uniforms);\n      var parameters = Object.assign({}, opts.parameters);\n      var discard = opts.discard;\n\n      if (this.hasSourceTextures || this.hasTargetTexture) {\n        attributes.transform_elementID = this.elementIDBuffer;\n\n        for (var sampler in this.samplerTextureMap) {\n          var textureName = this.samplerTextureMap[sampler];\n          uniforms[sampler] = sourceTextures[textureName];\n        }\n\n        this._setSourceTextureParameters();\n\n        var sizeUniforms = getSizeUniforms({\n          sourceTextureMap: sourceTextures,\n          targetTextureVarying: this.targetTextureVarying,\n          targetTexture: targetTexture\n        });\n        Object.assign(uniforms, sizeUniforms);\n      }\n\n      if (this.hasTargetTexture) {\n        discard = false;\n        parameters.viewport = [0, 0, framebuffer.width, framebuffer.height];\n      }\n\n      return {\n        attributes: attributes,\n        framebuffer: framebuffer,\n        uniforms: uniforms,\n        discard: discard,\n        parameters: parameters\n      };\n    }\n  }, {\n    key: \"swap\",\n    value: function swap() {\n      if (this._swapTexture) {\n        this.currentIndex = this._getNextIndex();\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      this._setupTextures(opts);\n    }\n  }, {\n    key: \"getTargetTexture\",\n    value: function getTargetTexture() {\n      var targetTexture = this.bindings[this.currentIndex].targetTexture;\n      return targetTexture;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$packed = _ref.packed,\n          packed = _ref$packed === void 0 ? false : _ref$packed;\n\n      var framebuffer = this.bindings[this.currentIndex].framebuffer;\n      var pixels = readPixelsToArray(framebuffer);\n\n      if (!packed) {\n        return pixels;\n      }\n\n      var ArrayType = pixels.constructor;\n      var channelCount = typeToChannelCount(this.targetTextureType);\n      var packedPixels = new ArrayType(pixels.length * channelCount / 4);\n      var packCount = 0;\n\n      for (var i = 0; i < pixels.length; i += 4) {\n        for (var j = 0; j < channelCount; j++) {\n          packedPixels[packCount++] = pixels[i + j];\n        }\n      }\n\n      return packedPixels;\n    }\n  }, {\n    key: \"getFramebuffer\",\n    value: function getFramebuffer() {\n      var currentResources = this.bindings[this.currentIndex];\n      return currentResources.framebuffer;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      if (this.ownTexture) {\n        this.ownTexture.delete();\n      }\n\n      if (this.elementIDBuffer) {\n        this.elementIDBuffer.delete();\n      }\n    }\n  }, {\n    key: \"_initialize\",\n    value: function _initialize() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _targetTextureVarying = props._targetTextureVarying,\n          _swapTexture = props._swapTexture;\n      this._swapTexture = _swapTexture;\n      this.targetTextureVarying = _targetTextureVarying;\n      this.hasTargetTexture = _targetTextureVarying;\n\n      this._setupTextures(props);\n    }\n  }, {\n    key: \"_createTargetTexture\",\n    value: function _createTargetTexture(props) {\n      var sourceTextures = props.sourceTextures,\n          textureOrReference = props.textureOrReference;\n\n      if (textureOrReference instanceof Texture2D) {\n        return textureOrReference;\n      }\n\n      var refTexture = sourceTextures[textureOrReference];\n\n      if (!refTexture) {\n        return null;\n      }\n\n      this._targetRefTexName = textureOrReference;\n      return this._createNewTexture(refTexture);\n    }\n  }, {\n    key: \"_setupTextures\",\n    value: function _setupTextures() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var sourceBuffers = props.sourceBuffers,\n          _props$_sourceTexture = props._sourceTextures,\n          _sourceTextures = _props$_sourceTexture === void 0 ? {} : _props$_sourceTexture,\n          _targetTexture = props._targetTexture;\n\n      var targetTexture = this._createTargetTexture({\n        sourceTextures: _sourceTextures,\n        textureOrReference: _targetTexture\n      });\n\n      this.hasSourceTextures = this.hasSourceTextures || _sourceTextures && Object.keys(_sourceTextures).length > 0;\n\n      this._updateBindings({\n        sourceBuffers: sourceBuffers,\n        sourceTextures: _sourceTextures,\n        targetTexture: targetTexture\n      });\n\n      if ('elementCount' in props) {\n        this._updateElementIDBuffer(props.elementCount);\n      }\n    }\n  }, {\n    key: \"_updateElementIDBuffer\",\n    value: function _updateElementIDBuffer(elementCount) {\n      if (typeof elementCount !== 'number' || this.elementCount >= elementCount) {\n        return;\n      }\n\n      var elementIds = new Float32Array(elementCount);\n      elementIds.forEach(function (_, index, array) {\n        array[index] = index;\n      });\n\n      if (!this.elementIDBuffer) {\n        this.elementIDBuffer = new Buffer(this.gl, {\n          data: elementIds,\n          accessor: {\n            size: 1\n          }\n        });\n      } else {\n        this.elementIDBuffer.setData({\n          data: elementIds\n        });\n      }\n\n      this.elementCount = elementCount;\n    }\n  }, {\n    key: \"_updateBindings\",\n    value: function _updateBindings(opts) {\n      this.bindings[this.currentIndex] = this._updateBinding(this.bindings[this.currentIndex], opts);\n\n      if (this._swapTexture) {\n        var _this$_swapTextures = this._swapTextures(this.bindings[this.currentIndex]),\n            sourceTextures = _this$_swapTextures.sourceTextures,\n            targetTexture = _this$_swapTextures.targetTexture;\n\n        var nextIndex = this._getNextIndex();\n\n        this.bindings[nextIndex] = this._updateBinding(this.bindings[nextIndex], {\n          sourceTextures: sourceTextures,\n          targetTexture: targetTexture\n        });\n      }\n    }\n  }, {\n    key: \"_updateBinding\",\n    value: function _updateBinding(binding, opts) {\n      var sourceBuffers = opts.sourceBuffers,\n          sourceTextures = opts.sourceTextures,\n          targetTexture = opts.targetTexture;\n\n      if (!binding) {\n        binding = {\n          sourceBuffers: {},\n          sourceTextures: {},\n          targetTexture: null\n        };\n      }\n\n      Object.assign(binding.sourceTextures, sourceTextures);\n      Object.assign(binding.sourceBuffers, sourceBuffers);\n\n      if (targetTexture) {\n        binding.targetTexture = targetTexture;\n        var width = targetTexture.width,\n            height = targetTexture.height;\n        var _binding = binding,\n            framebuffer = _binding.framebuffer;\n\n        if (framebuffer) {\n          framebuffer.update({\n            attachments: _defineProperty({}, 36064, targetTexture),\n            resizeAttachments: false\n          });\n          framebuffer.resize({\n            width: width,\n            height: height\n          });\n        } else {\n          binding.framebuffer = new Framebuffer(this.gl, {\n            id: \"transform-framebuffer\",\n            width: width,\n            height: height,\n            attachments: _defineProperty({}, 36064, targetTexture)\n          });\n        }\n      }\n\n      return binding;\n    }\n  }, {\n    key: \"_setSourceTextureParameters\",\n    value: function _setSourceTextureParameters() {\n      var index = this.currentIndex;\n      var sourceTextures = this.bindings[index].sourceTextures;\n\n      for (var name in sourceTextures) {\n        sourceTextures[name].setParameters(SRC_TEX_PARAMETER_OVERRIDES);\n      }\n    }\n  }, {\n    key: \"_swapTextures\",\n    value: function _swapTextures(opts) {\n      if (!this._swapTexture) {\n        return null;\n      }\n\n      var sourceTextures = Object.assign({}, opts.sourceTextures);\n      sourceTextures[this._swapTexture] = opts.targetTexture;\n      var targetTexture = opts.sourceTextures[this._swapTexture];\n      return {\n        sourceTextures: sourceTextures,\n        targetTexture: targetTexture\n      };\n    }\n  }, {\n    key: \"_createNewTexture\",\n    value: function _createNewTexture(refTexture) {\n      var _parameters;\n\n      var texture = cloneTextureFrom(refTexture, {\n        parameters: (_parameters = {}, _defineProperty(_parameters, 10241, 9728), _defineProperty(_parameters, 10240, 9728), _defineProperty(_parameters, 10242, 33071), _defineProperty(_parameters, 10243, 33071), _parameters),\n        pixelStore: _defineProperty({}, 37440, false)\n      });\n\n      if (this.ownTexture) {\n        this.ownTexture.delete();\n      }\n\n      this.ownTexture = texture;\n      return texture;\n    }\n  }, {\n    key: \"_getNextIndex\",\n    value: function _getNextIndex() {\n      return (this.currentIndex + 1) % 2;\n    }\n  }, {\n    key: \"_processVertexShader\",\n    value: function _processVertexShader() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _this$bindings$this$c2 = this.bindings[this.currentIndex],\n          sourceTextures = _this$bindings$this$c2.sourceTextures,\n          targetTexture = _this$bindings$this$c2.targetTexture;\n\n      var _updateForTextures = updateForTextures({\n        vs: props.vs,\n        sourceTextureMap: sourceTextures,\n        targetTextureVarying: this.targetTextureVarying,\n        targetTexture: targetTexture\n      }),\n          vs = _updateForTextures.vs,\n          uniforms = _updateForTextures.uniforms,\n          targetTextureType = _updateForTextures.targetTextureType,\n          inject = _updateForTextures.inject,\n          samplerTextureMap = _updateForTextures.samplerTextureMap;\n\n      var combinedInject = combineInjects([props.inject || {}, inject]);\n      this.targetTextureType = targetTextureType;\n      this.samplerTextureMap = samplerTextureMap;\n      var fs = props._fs || getPassthroughFS({\n        version: getShaderVersion(vs),\n        input: this.targetTextureVarying,\n        inputType: targetTextureType,\n        output: FS_OUTPUT_VARIABLE\n      });\n      var modules = this.hasSourceTextures || this.targetTextureVarying ? [transformModule].concat(props.modules || []) : props.modules;\n      return {\n        vs: vs,\n        fs: fs,\n        modules: modules,\n        uniforms: uniforms,\n        inject: combinedInject\n      };\n    }\n  }]);\n\n  return TextureTransform;\n}();\n\nexport { TextureTransform as default };","map":{"version":3,"mappings":"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","names":["cloneTextureFrom","readPixelsToArray","getShaderVersion","Buffer","Texture2D","Framebuffer","_transform","transformModule","getPassthroughFS","typeToChannelCount","combineInjects","updateForTextures","getSizeUniforms","SRC_TEX_PARAMETER_OVERRIDES","FS_OUTPUT_VARIABLE","TextureTransform","constructor","gl","props","id","currentIndex","_swapTexture","targetTextureVarying","targetTextureType","samplerTextureMap","bindings","resources","_initialize","Object","seal","updateModelProps","updatedModelProps","_processVertexShader","assign","getDrawOptions","opts","sourceBuffers","sourceTextures","framebuffer","targetTexture","attributes","uniforms","parameters","discard","hasSourceTextures","hasTargetTexture","transform_elementID","elementIDBuffer","sampler","textureName","_setSourceTextureParameters","sizeUniforms","sourceTextureMap","viewport","width","height","swap","_getNextIndex","update","_setupTextures","getTargetTexture","getData","packed","pixels","ArrayType","channelCount","packedPixels","length","packCount","i","j","getFramebuffer","currentResources","delete","ownTexture","_targetTextureVarying","_createTargetTexture","textureOrReference","refTexture","_targetRefTexName","_createNewTexture","_sourceTextures","_targetTexture","keys","_updateBindings","_updateElementIDBuffer","elementCount","elementIds","Float32Array","forEach","_","index","array","data","accessor","size","setData","_updateBinding","_swapTextures","nextIndex","binding","attachments","resizeAttachments","resize","name","setParameters","texture","pixelStore","vs","inject","combinedInject","fs","_fs","version","input","inputType","output","modules","concat"],"sources":["../../../src/transform/texture-transform.js"],"sourcesContent":["/** @typedef {import('./transform').TransformProps} TransformProps */\nimport GL from '@luma.gl/constants';\n\nimport {\n  cloneTextureFrom,\n  readPixelsToArray,\n  getShaderVersion,\n  Buffer,\n  Texture2D,\n  Framebuffer\n} from '@luma.gl/webgl';\n\nimport {\n  _transform as transformModule,\n  getPassthroughFS,\n  typeToChannelCount,\n  combineInjects\n} from '@luma.gl/shadertools';\n\nimport {updateForTextures, getSizeUniforms} from './transform-shader-utils';\n\n// TODO: move these constants to transform-shader-utils\n// Texture parameters needed so sample can precisely pick pixel for given element id.\nconst SRC_TEX_PARAMETER_OVERRIDES = {\n  [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n  [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\nconst FS_OUTPUT_VARIABLE = 'transform_output';\n\nexport default class TextureTransform {\n  constructor(gl, props = {}) {\n    this.gl = gl;\n    this.id = this.currentIndex = 0;\n    this._swapTexture = null;\n    this.targetTextureVarying = null;\n    this.targetTextureType = null;\n    this.samplerTextureMap = null;\n    this.bindings = []; // each element is an object : {sourceTextures, targetTexture, framebuffer}\n\n    this.resources = {}; // resources to be deleted\n\n    this._initialize(props);\n    Object.seal(this);\n  }\n\n  updateModelProps(props = {}) {\n    const updatedModelProps = this._processVertexShader(props);\n    return Object.assign({}, props, updatedModelProps);\n  }\n\n  getDrawOptions(opts = {}) {\n    const {sourceBuffers, sourceTextures, framebuffer, targetTexture} = this.bindings[\n      this.currentIndex\n    ];\n\n    const attributes = Object.assign({}, sourceBuffers, opts.attributes);\n    const uniforms = Object.assign({}, opts.uniforms);\n    const parameters = Object.assign({}, opts.parameters);\n    let discard = opts.discard;\n\n    if (this.hasSourceTextures || this.hasTargetTexture) {\n      attributes.transform_elementID = this.elementIDBuffer;\n\n      for (const sampler in this.samplerTextureMap) {\n        const textureName = this.samplerTextureMap[sampler];\n        uniforms[sampler] = sourceTextures[textureName];\n      }\n      this._setSourceTextureParameters();\n      // get texture size uniforms\n      const sizeUniforms = getSizeUniforms({\n        sourceTextureMap: sourceTextures,\n        targetTextureVarying: this.targetTextureVarying,\n        targetTexture\n      });\n      Object.assign(uniforms, sizeUniforms);\n    }\n\n    if (this.hasTargetTexture) {\n      discard = false;\n      parameters.viewport = [0, 0, framebuffer.width, framebuffer.height];\n    }\n\n    return {attributes, framebuffer, uniforms, discard, parameters};\n  }\n\n  swap() {\n    if (this._swapTexture) {\n      this.currentIndex = this._getNextIndex();\n      return true;\n    }\n    return false;\n  }\n\n  // update source and/or feedbackBuffers\n  update(opts = {}) {\n    this._setupTextures(opts);\n  }\n\n  // returns current target texture\n  getTargetTexture() {\n    const {targetTexture} = this.bindings[this.currentIndex];\n    return targetTexture;\n  }\n\n  getData({packed = false} = {}) {\n    const {framebuffer} = this.bindings[this.currentIndex];\n    const pixels = readPixelsToArray(framebuffer);\n\n    if (!packed) {\n      return pixels;\n    }\n\n    // readPixels returns 4 elements for each pixel, pack the elements when requested\n    const ArrayType = pixels.constructor;\n    const channelCount = typeToChannelCount(this.targetTextureType);\n    // @ts-ignore\n    const packedPixels = new ArrayType((pixels.length * channelCount) / 4);\n    let packCount = 0;\n    for (let i = 0; i < pixels.length; i += 4) {\n      for (let j = 0; j < channelCount; j++) {\n        packedPixels[packCount++] = pixels[i + j];\n      }\n    }\n    return packedPixels;\n  }\n\n  // returns current framebuffer object that is being used.\n  getFramebuffer() {\n    const currentResources = this.bindings[this.currentIndex];\n    return currentResources.framebuffer;\n  }\n\n  // Delete owned resources.\n  delete() {\n    if (this.ownTexture) {\n      this.ownTexture.delete();\n    }\n    if (this.elementIDBuffer) {\n      this.elementIDBuffer.delete();\n    }\n  }\n\n  // Private\n\n  _initialize(props = {}) {\n    const {_targetTextureVarying, _swapTexture} = props;\n    this._swapTexture = _swapTexture;\n    this.targetTextureVarying = _targetTextureVarying;\n    this.hasTargetTexture = _targetTextureVarying;\n    this._setupTextures(props);\n  }\n\n  // auto create target texture if requested\n  _createTargetTexture(props) {\n    const {sourceTextures, textureOrReference} = props;\n    if (textureOrReference instanceof Texture2D) {\n      return textureOrReference;\n    }\n    // 'targetTexture' is a reference souce texture.\n    const refTexture = sourceTextures[textureOrReference];\n    if (!refTexture) {\n      return null;\n    }\n\n    // save reference texture name, when corresponding source texture is updated\n    // we also update target texture.\n    this._targetRefTexName = textureOrReference;\n\n    return this._createNewTexture(refTexture);\n  }\n\n  /** @param {TransformProps} props */\n  _setupTextures(props = {}) {\n    const {sourceBuffers, _sourceTextures = {}, _targetTexture} = props;\n    const targetTexture = this._createTargetTexture({\n      sourceTextures: _sourceTextures,\n      textureOrReference: _targetTexture\n    });\n    this.hasSourceTextures =\n      this.hasSourceTextures || (_sourceTextures && Object.keys(_sourceTextures).length > 0);\n    this._updateBindings({sourceBuffers, sourceTextures: _sourceTextures, targetTexture});\n    if ('elementCount' in props) {\n      this._updateElementIDBuffer(props.elementCount);\n    }\n  }\n\n  _updateElementIDBuffer(elementCount) {\n    if (typeof elementCount !== 'number' || this.elementCount >= elementCount) {\n      return;\n    }\n    // NOTE: using float so this will work with GLSL 1.0 shaders.\n    const elementIds = new Float32Array(elementCount);\n    elementIds.forEach((_, index, array) => {\n      array[index] = index;\n    });\n    if (!this.elementIDBuffer) {\n      this.elementIDBuffer = new Buffer(this.gl, {\n        data: elementIds,\n        accessor: {size: 1}\n      });\n    } else {\n      this.elementIDBuffer.setData({data: elementIds});\n    }\n    this.elementCount = elementCount;\n  }\n\n  _updateBindings(opts) {\n    this.bindings[this.currentIndex] = this._updateBinding(this.bindings[this.currentIndex], opts);\n    if (this._swapTexture) {\n      const {sourceTextures, targetTexture} = this._swapTextures(this.bindings[this.currentIndex]);\n      const nextIndex = this._getNextIndex();\n      this.bindings[nextIndex] = this._updateBinding(this.bindings[nextIndex], {\n        sourceTextures,\n        targetTexture\n      });\n    }\n  }\n\n  _updateBinding(binding, opts) {\n    const {sourceBuffers, sourceTextures, targetTexture} = opts;\n    if (!binding) {\n      binding = {\n        sourceBuffers: {},\n        sourceTextures: {},\n        targetTexture: null\n      };\n    }\n    Object.assign(binding.sourceTextures, sourceTextures);\n    Object.assign(binding.sourceBuffers, sourceBuffers);\n    if (targetTexture) {\n      binding.targetTexture = targetTexture;\n\n      const {width, height} = targetTexture;\n      const {framebuffer} = binding;\n      if (framebuffer) {\n        // First update texture without re-sizing attachments\n        framebuffer.update({\n          attachments: {[GL.COLOR_ATTACHMENT0]: targetTexture},\n          resizeAttachments: false\n        });\n        // Resize to new taget texture size\n        framebuffer.resize({width, height});\n      } else {\n        binding.framebuffer = new Framebuffer(this.gl, {\n          id: `transform-framebuffer`,\n          width,\n          height,\n          attachments: {\n            [GL.COLOR_ATTACHMENT0]: targetTexture\n          }\n        });\n      }\n    }\n    return binding;\n  }\n\n  // set texture filtering parameters on source textures.\n  _setSourceTextureParameters() {\n    const index = this.currentIndex;\n    const {sourceTextures} = this.bindings[index];\n    for (const name in sourceTextures) {\n      sourceTextures[name].setParameters(SRC_TEX_PARAMETER_OVERRIDES);\n    }\n  }\n\n  _swapTextures(opts) {\n    if (!this._swapTexture) {\n      return null;\n    }\n    const sourceTextures = Object.assign({}, opts.sourceTextures);\n    sourceTextures[this._swapTexture] = opts.targetTexture;\n\n    const targetTexture = opts.sourceTextures[this._swapTexture];\n\n    return {sourceTextures, targetTexture};\n  }\n\n  // Create a buffer and add to list of buffers to be deleted.\n  _createNewTexture(refTexture) {\n    const texture = cloneTextureFrom(refTexture, {\n      parameters: {\n        [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n        [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n      },\n      pixelStore: {\n        [GL.UNPACK_FLIP_Y_WEBGL]: false\n      }\n    });\n\n    // thre can only be one target texture\n    if (this.ownTexture) {\n      this.ownTexture.delete();\n    }\n    this.ownTexture = texture;\n\n    return texture;\n  }\n\n  _getNextIndex() {\n    return (this.currentIndex + 1) % 2;\n  }\n\n  // build and return shader releated parameters\n  _processVertexShader(props = {}) {\n    const {sourceTextures, targetTexture} = this.bindings[this.currentIndex];\n    // @ts-ignore TODO - uniforms is not present\n    const {vs, uniforms, targetTextureType, inject, samplerTextureMap} = updateForTextures({\n      vs: props.vs,\n      sourceTextureMap: sourceTextures,\n      targetTextureVarying: this.targetTextureVarying,\n      targetTexture\n    });\n    const combinedInject = combineInjects([props.inject || {}, inject]);\n    this.targetTextureType = targetTextureType;\n    this.samplerTextureMap = samplerTextureMap;\n    const fs =\n      props._fs ||\n      getPassthroughFS({\n        version: getShaderVersion(vs),\n        input: this.targetTextureVarying,\n        inputType: targetTextureType,\n        output: FS_OUTPUT_VARIABLE\n      });\n    const modules =\n      this.hasSourceTextures || this.targetTextureVarying\n        ? [transformModule].concat(props.modules || [])\n        : props.modules;\n    return {vs, fs, modules, uniforms, inject: combinedInject};\n  }\n}\n"]},"metadata":{},"sourceType":"module"}