{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { convertToArrayRow, convertToObjectRow } from '../utils/row-utils';\nvar DEFAULT_ROW_COUNT = 100;\n\nvar RowTableBatchAggregator = /*#__PURE__*/function () {\n  function RowTableBatchAggregator(schema, options) {\n    _classCallCheck(this, RowTableBatchAggregator);\n\n    _defineProperty(this, \"schema\", void 0);\n\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"length\", 0);\n\n    _defineProperty(this, \"objectRows\", null);\n\n    _defineProperty(this, \"arrayRows\", null);\n\n    _defineProperty(this, \"cursor\", 0);\n\n    _defineProperty(this, \"_headers\", []);\n\n    this.options = options;\n    this.schema = schema;\n\n    if (!Array.isArray(schema)) {\n      this._headers = [];\n\n      for (var key in schema) {\n        this._headers[schema[key].index] = schema[key].name;\n      }\n    }\n  }\n\n  _createClass(RowTableBatchAggregator, [{\n    key: \"rowCount\",\n    value: function rowCount() {\n      return this.length;\n    }\n  }, {\n    key: \"addArrayRow\",\n    value: function addArrayRow(row, cursor) {\n      if (Number.isFinite(cursor)) {\n        this.cursor = cursor;\n      }\n\n      switch (this.options.shape) {\n        case 'object-row-table':\n          var rowObject = convertToObjectRow(row, this._headers);\n          this.addObjectRow(rowObject, cursor);\n          break;\n\n        case 'array-row-table':\n          this.arrayRows = this.arrayRows || new Array(DEFAULT_ROW_COUNT);\n          this.arrayRows[this.length] = row;\n          this.length++;\n          break;\n      }\n    }\n  }, {\n    key: \"addObjectRow\",\n    value: function addObjectRow(row, cursor) {\n      if (Number.isFinite(cursor)) {\n        this.cursor = cursor;\n      }\n\n      switch (this.options.shape) {\n        case 'array-row-table':\n          var rowArray = convertToArrayRow(row, this._headers);\n          this.addArrayRow(rowArray, cursor);\n          break;\n\n        case 'object-row-table':\n          this.objectRows = this.objectRows || new Array(DEFAULT_ROW_COUNT);\n          this.objectRows[this.length] = row;\n          this.length++;\n          break;\n      }\n    }\n  }, {\n    key: \"getBatch\",\n    value: function getBatch() {\n      var rows = this.arrayRows || this.objectRows;\n\n      if (!rows) {\n        return null;\n      }\n\n      rows = rows.slice(0, this.length);\n      this.arrayRows = null;\n      this.objectRows = null;\n      return {\n        shape: this.options.shape,\n        batchType: 'data',\n        data: rows,\n        length: this.length,\n        schema: this.schema,\n        cursor: this.cursor\n      };\n    }\n  }]);\n\n  return RowTableBatchAggregator;\n}();\n\nexport { RowTableBatchAggregator as default };","map":{"version":3,"mappings":";;;AAGA,SAAQA,iBAAR,EAA2BC,kBAA3B,QAAoD,oBAApD;AAGA,IAAMC,iBAAiB,GAAG,GAA1B;;IAEqBC,uB;EAUnBC,iCAAYC,MAAZD,EAA4BE,OAA5BF,EAAwD;IAAA;;IAAAG;;IAAAA;;IAAAA,gCANvC,CAMuC;;IAAAA,oCALP,IAKO;;IAAAA,mCAJ9B,IAI8B;;IAAAA,gCAHvC,CAGuC;;IAAAA,kCAF3B,EAE2B;;IACtD,KAAKD,OAAL,GAAeA,OAAf;IACA,KAAKD,MAAL,GAAcA,MAAd;;IAIA,IAAI,CAACG,KAAK,CAACC,OAAND,CAAcH,MAAdG,CAAL,EAA4B;MAC1B,KAAKE,QAAL,GAAgB,EAAhB;;MACA,KAAK,IAAMC,GAAX,IAAkBN,MAAlB,EAA0B;QACxB,KAAKK,QAAL,CAAcL,MAAM,CAACM,GAAD,CAANN,CAAYO,KAA1B,IAAmCP,MAAM,CAACM,GAAD,CAANN,CAAYQ,IAA/C;MACD;IACF;EACF;;;;WAEDC,oBAAmB;MACjB,OAAO,KAAKC,MAAZ;IACD;;;WAEDC,qBAAYC,GAAZD,EAAwBE,MAAxBF,EAA+C;MAC7C,IAAIG,MAAM,CAACC,QAAPD,CAAgBD,MAAhBC,CAAJ,EAA6B;QAC3B,KAAKD,MAAL,GAAcA,MAAd;MACD;;MAGD,QAAQ,KAAKZ,OAAL,CAAae,KAArB;QACE,KAAK,kBAAL;UACE,IAAMC,SAAS,GAAGrB,kBAAkB,CAACgB,GAAD,EAAM,KAAKP,QAAX,CAApC;UACA,KAAKa,YAAL,CAAkBD,SAAlB,EAA6BJ,MAA7B;UACA;;QACF,KAAK,iBAAL;UACE,KAAKM,SAAL,GAAiB,KAAKA,SAAL,IAAkB,IAAIhB,KAAJ,CAAUN,iBAAV,CAAnC;UACA,KAAKsB,SAAL,CAAe,KAAKT,MAApB,IAA8BE,GAA9B;UACA,KAAKF,MAAL;UACA;MATJ;IAWD;;;WAEDQ,sBAAaN,GAAbM,EAA+CL,MAA/CK,EAAsE;MACpE,IAAIJ,MAAM,CAACC,QAAPD,CAAgBD,MAAhBC,CAAJ,EAA6B;QAC3B,KAAKD,MAAL,GAAcA,MAAd;MACD;;MAGD,QAAQ,KAAKZ,OAAL,CAAae,KAArB;QACE,KAAK,iBAAL;UACE,IAAMI,QAAQ,GAAGzB,iBAAiB,CAACiB,GAAD,EAAM,KAAKP,QAAX,CAAlC;UACA,KAAKM,WAAL,CAAiBS,QAAjB,EAA2BP,MAA3B;UACA;;QACF,KAAK,kBAAL;UACE,KAAKQ,UAAL,GAAkB,KAAKA,UAAL,IAAmB,IAAIlB,KAAJ,CAAUN,iBAAV,CAArC;UACA,KAAKwB,UAAL,CAAgB,KAAKX,MAArB,IAA+BE,GAA/B;UACA,KAAKF,MAAL;UACA;MATJ;IAWD;;;WAEDY,oBAA8B;MAC5B,IAAIC,IAAI,GAAG,KAAKJ,SAAL,IAAkB,KAAKE,UAAlC;;MACA,IAAI,CAACE,IAAL,EAAW;QACT,OAAO,IAAP;MACD;;MAEDA,IAAI,GAAGA,IAAI,CAACC,KAALD,CAAW,CAAXA,EAAc,KAAKb,MAAnBa,CAAPA;MACA,KAAKJ,SAAL,GAAiB,IAAjB;MACA,KAAKE,UAAL,GAAkB,IAAlB;MAEA,OAAO;QACLL,KAAK,EAAE,KAAKf,OAAL,CAAae,KADf;QAELS,SAAS,EAAE,MAFN;QAGLC,IAAI,EAAEH,IAHD;QAILb,MAAM,EAAE,KAAKA,MAJR;QAKLV,MAAM,EAAE,KAAKA,MALR;QAMLa,MAAM,EAAE,KAAKA;MANR,CAAP;IAQD;;;;;;SApFkBf,uB","names":["convertToArrayRow","convertToObjectRow","DEFAULT_ROW_COUNT","RowTableBatchAggregator","constructor","schema","options","_defineProperty","Array","isArray","_headers","key","index","name","rowCount","length","addArrayRow","row","cursor","Number","isFinite","shape","rowObject","addObjectRow","arrayRows","rowArray","objectRows","getBatch","rows","slice","batchType","data"],"sources":["../../../../src/lib/batches/row-table-batch-aggregator.ts"],"sourcesContent":["import type {Schema} from '../schema/schema';\nimport type {TableBatch} from '../../category/table/table-types';\n// import type {ArrayRowTableBatch, ObjectRowTableBatch} from '../../category/table';\nimport {convertToArrayRow, convertToObjectRow} from '../utils/row-utils';\nimport {TableBatchAggregator, TableBatchOptions} from './table-batch-aggregator';\n\nconst DEFAULT_ROW_COUNT = 100;\n\nexport default class RowTableBatchAggregator implements TableBatchAggregator {\n  schema: Schema;\n  options: TableBatchOptions;\n\n  length: number = 0;\n  objectRows: {[columnName: string]: any} | null = null;\n  arrayRows: any[] | null = null;\n  cursor: number = 0;\n  private _headers: string[] = [];\n\n  constructor(schema: Schema, options: TableBatchOptions) {\n    this.options = options;\n    this.schema = schema;\n\n    // schema is an array if there're no headers\n    // object if there are headers\n    if (!Array.isArray(schema)) {\n      this._headers = [];\n      for (const key in schema) {\n        this._headers[schema[key].index] = schema[key].name;\n      }\n    }\n  }\n\n  rowCount(): number {\n    return this.length;\n  }\n\n  addArrayRow(row: any[], cursor?: number): void {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor as number;\n    }\n\n    // eslint-disable-next-line default-case\n    switch (this.options.shape) {\n      case 'object-row-table':\n        const rowObject = convertToObjectRow(row, this._headers);\n        this.addObjectRow(rowObject, cursor);\n        break;\n      case 'array-row-table':\n        this.arrayRows = this.arrayRows || new Array(DEFAULT_ROW_COUNT);\n        this.arrayRows[this.length] = row;\n        this.length++;\n        break;\n    }\n  }\n\n  addObjectRow(row: {[columnName: string]: any}, cursor?: number): void {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor as number;\n    }\n\n    // eslint-disable-next-line default-case\n    switch (this.options.shape) {\n      case 'array-row-table':\n        const rowArray = convertToArrayRow(row, this._headers);\n        this.addArrayRow(rowArray, cursor);\n        break;\n      case 'object-row-table':\n        this.objectRows = this.objectRows || new Array(DEFAULT_ROW_COUNT);\n        this.objectRows[this.length] = row;\n        this.length++;\n        break;\n    }\n  }\n\n  getBatch(): TableBatch | null {\n    let rows = this.arrayRows || this.objectRows;\n    if (!rows) {\n      return null;\n    }\n\n    rows = rows.slice(0, this.length);\n    this.arrayRows = null;\n    this.objectRows = null;\n\n    return {\n      shape: this.options.shape,\n      batchType: 'data',\n      data: rows,\n      length: this.length,\n      schema: this.schema,\n      cursor: this.cursor\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}