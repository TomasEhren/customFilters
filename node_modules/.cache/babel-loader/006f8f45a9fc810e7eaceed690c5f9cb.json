{"ast":null,"code":"import getPalette, { DEFAULT_PALETTE, NULL_COLOR, OTHERS_COLOR } from './palette';\nimport { assert, getAttrValue } from './utils';\nexport default function colorCategories(_ref) {\n  let {\n    attr,\n    domain,\n    colors = DEFAULT_PALETTE,\n    nullColor = NULL_COLOR,\n    othersColor = OTHERS_COLOR\n  } = _ref;\n  assert(Array.isArray(domain), 'Expected \"domain\" to be an array of numbers or strings');\n  const colorsByCategory = {};\n  const palette = typeof colors === 'string' ? getPalette(colors, domain.length) : colors;\n\n  for (const [i, c] of domain.entries()) {\n    colorsByCategory[c] = palette[i];\n  }\n\n  return d => {\n    const value = getAttrValue(attr, d);\n    return typeof value === 'number' && Number.isFinite(value) || typeof value === 'string' ? colorsByCategory[value] || othersColor : nullColor;\n  };\n}","map":{"version":3,"mappings":"AAAA,OAAOA,UAAP,IAA2BC,eAA3B,EAA4CC,UAA5C,EAAwDC,YAAxD,QAA2E,WAA3E;AACA,SAAQC,MAAR,EAAmCC,YAAnC,QAAsD,SAAtD;AAEA,eAAe,SAASC,eAAT,OAYO;EAAA,IAZkB;IACtCC,IADsC;IAEtCC,MAFsC;IAGtCC,MAAM,GAAGR,eAH6B;IAItCS,SAAS,GAAGR,UAJ0B;IAKtCS,WAAW,GAAGR;EALwB,CAYlB;EACpBC,MAAM,CAACQ,KAAK,CAACC,OAAND,CAAcJ,MAAdI,CAAD,EAAwB,wDAAxB,CAANR;EAEA,MAAMU,gBAAgB,GAAG,EAAzB;EACA,MAAMC,OAAO,GAAG,OAAON,MAAP,KAAkB,QAAlB,GAA6BT,UAAU,CAACS,MAAD,EAASD,MAAM,CAACQ,MAAhB,CAAvC,GAAiEP,MAAjF;;EAEA,KAAK,MAAM,CAACQ,CAAD,EAAIC,CAAJ,CAAX,IAAqBV,MAAM,CAACW,OAAPX,EAArB,EAAuC;IACrCM,gBAAgB,CAACI,CAAD,CAAhBJ,GAAsBC,OAAO,CAACE,CAAD,CAA7BH;EACD;;EAED,OAAOM,CAAC,IAAI;IACV,MAAMC,KAAK,GAAGhB,YAAY,CAACE,IAAD,EAAOa,CAAP,CAA1B;IACA,OAAQ,OAAOC,KAAP,KAAiB,QAAjB,IAA6BC,MAAM,CAACC,QAAPD,CAAgBD,KAAhBC,CAA7B,IAAwD,OAAOD,KAAP,KAAiB,QAAzE,GACJP,gBAAgB,CAACO,KAAD,CAAhBP,IAA2BH,WADvB,GAEJD,SAFJ;EAFF;AAMD","names":["getPalette","DEFAULT_PALETTE","NULL_COLOR","OTHERS_COLOR","assert","getAttrValue","colorCategories","attr","domain","colors","nullColor","othersColor","Array","isArray","colorsByCategory","palette","length","i","c","entries","d","value","Number","isFinite"],"sources":["../../../src/style/color-categories-style.ts"],"sourcesContent":["import getPalette, {Color, DEFAULT_PALETTE, NULL_COLOR, OTHERS_COLOR} from './palette';\nimport {assert, AttributeSelector, getAttrValue} from './utils';\n\nexport default function colorCategories({\n  attr,\n  domain,\n  colors = DEFAULT_PALETTE,\n  nullColor = NULL_COLOR,\n  othersColor = OTHERS_COLOR\n}: {\n  attr: AttributeSelector;\n  domain: number[];\n  colors: string | Color[];\n  nullColor?: Color;\n  othersColor?: Color;\n}): AttributeSelector {\n  assert(Array.isArray(domain), 'Expected \"domain\" to be an array of numbers or strings');\n\n  const colorsByCategory = {};\n  const palette = typeof colors === 'string' ? getPalette(colors, domain.length) : colors;\n\n  for (const [i, c] of domain.entries()) {\n    colorsByCategory[c] = palette[i];\n  }\n\n  return d => {\n    const value = getAttrValue(attr, d);\n    return (typeof value === 'number' && Number.isFinite(value)) || typeof value === 'string'\n      ? colorsByCategory[value] || othersColor\n      : nullColor;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}