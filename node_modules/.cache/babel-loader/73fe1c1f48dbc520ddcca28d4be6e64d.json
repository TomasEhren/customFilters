{"ast":null,"code":"import { hasFeature, FEATURES, Buffer } from '@luma.gl/core';\nimport ShaderAttribute from './shader-attribute';\nimport { glArrayFromType } from './gl-utils';\nimport typedArrayManager from '../../utils/typed-array-manager';\nimport { toDoublePrecisionArray } from '../../utils/math-utils';\nimport log from '../../utils/log';\n\nfunction getStride(accessor) {\n  return accessor.stride || accessor.size * accessor.bytesPerElement;\n}\n\nfunction resolveShaderAttribute(baseAccessor, shaderAttributeOptions) {\n  if (shaderAttributeOptions.offset) {\n    log.removed('shaderAttribute.offset', 'vertexOffset, elementOffset')();\n  }\n\n  const stride = getStride(baseAccessor);\n  const vertexOffset = 'vertexOffset' in shaderAttributeOptions ? shaderAttributeOptions.vertexOffset : baseAccessor.vertexOffset || 0;\n  const elementOffset = shaderAttributeOptions.elementOffset || 0;\n  const offset = vertexOffset * stride + elementOffset * baseAccessor.bytesPerElement + (baseAccessor.offset || 0);\n  return { ...shaderAttributeOptions,\n    offset,\n    stride\n  };\n}\n\nfunction resolveDoublePrecisionShaderAttributes(baseAccessor, shaderAttributeOptions) {\n  const resolvedOptions = resolveShaderAttribute(baseAccessor, shaderAttributeOptions);\n  return {\n    high: resolvedOptions,\n    low: { ...resolvedOptions,\n      offset: resolvedOptions.offset + baseAccessor.size * 4\n    }\n  };\n}\n\nexport default class DataColumn {\n  constructor(gl, opts) {\n    this.gl = gl;\n    this.id = opts.id;\n    this.size = opts.size;\n    const logicalType = opts.logicalType || opts.type;\n    const doublePrecision = logicalType === 5130;\n    let {\n      defaultValue\n    } = opts;\n    defaultValue = Number.isFinite(defaultValue) ? [defaultValue] : defaultValue || new Array(this.size).fill(0);\n    opts.defaultValue = defaultValue;\n    let bufferType = logicalType;\n\n    if (doublePrecision) {\n      bufferType = 5126;\n    } else if (!bufferType && opts.isIndexed) {\n      bufferType = gl && hasFeature(gl, FEATURES.ELEMENT_INDEX_UINT32) ? 5125 : 5123;\n    } else if (!bufferType) {\n      bufferType = 5126;\n    }\n\n    opts.logicalType = logicalType;\n    opts.type = bufferType;\n    let defaultType = glArrayFromType(logicalType || bufferType || 5126);\n    this.shaderAttributes = {};\n    this.doublePrecision = doublePrecision;\n\n    if (doublePrecision && opts.fp64 === false) {\n      defaultType = Float32Array;\n    }\n\n    opts.bytesPerElement = defaultType.BYTES_PER_ELEMENT;\n    this.defaultType = defaultType;\n    this.value = null;\n    this.settings = opts;\n    this.state = {\n      externalBuffer: null,\n      bufferAccessor: opts,\n      allocatedValue: null,\n      numInstances: 0,\n      bounds: null,\n      constant: false\n    };\n    this._buffer = null;\n    this.setData(opts);\n  }\n\n  get buffer() {\n    if (!this._buffer) {\n      const {\n        isIndexed,\n        type\n      } = this.settings;\n      this._buffer = new Buffer(this.gl, {\n        id: this.id,\n        target: isIndexed ? 34963 : 34962,\n        accessor: {\n          type\n        }\n      });\n    }\n\n    return this._buffer;\n  }\n\n  get byteOffset() {\n    const accessor = this.getAccessor();\n\n    if (accessor.vertexOffset) {\n      return accessor.vertexOffset * getStride(accessor);\n    }\n\n    return 0;\n  }\n\n  get numInstances() {\n    return this.state.numInstances;\n  }\n\n  set numInstances(n) {\n    this.state.numInstances = n;\n  }\n\n  delete() {\n    if (this._buffer) {\n      this._buffer.delete();\n\n      this._buffer = null;\n    }\n\n    typedArrayManager.release(this.state.allocatedValue);\n  }\n\n  getShaderAttributes(id, options) {\n    if (this.doublePrecision) {\n      const shaderAttributes = {};\n      const isBuffer64Bit = this.value instanceof Float64Array;\n      const doubleShaderAttributeDefs = resolveDoublePrecisionShaderAttributes(this.getAccessor(), options || {});\n      shaderAttributes[id] = new ShaderAttribute(this, doubleShaderAttributeDefs.high);\n      shaderAttributes[\"\".concat(id, \"64Low\")] = isBuffer64Bit ? new ShaderAttribute(this, doubleShaderAttributeDefs.low) : new Float32Array(this.size);\n      return shaderAttributes;\n    }\n\n    if (options) {\n      const shaderAttributeDef = resolveShaderAttribute(this.getAccessor(), options);\n      return {\n        [id]: new ShaderAttribute(this, shaderAttributeDef)\n      };\n    }\n\n    return {\n      [id]: this\n    };\n  }\n\n  getBuffer() {\n    if (this.state.constant) {\n      return null;\n    }\n\n    return this.state.externalBuffer || this._buffer;\n  }\n\n  getValue() {\n    if (this.state.constant) {\n      return this.value;\n    }\n\n    return [this.getBuffer(), this.getAccessor()];\n  }\n\n  getAccessor() {\n    return this.state.bufferAccessor;\n  }\n\n  getBounds() {\n    if (this.state.bounds) {\n      return this.state.bounds;\n    }\n\n    let result = null;\n\n    if (this.state.constant) {\n      const min = this.value.slice();\n      result = [min, min];\n    } else {\n      const {\n        value,\n        numInstances,\n        size\n      } = this;\n      const len = numInstances * size;\n\n      if (value && len && value.length >= len) {\n        const min = new Array(size).fill(Infinity);\n        const max = new Array(size).fill(-Infinity);\n\n        for (let i = 0; i < len;) {\n          for (let j = 0; j < size; j++) {\n            const v = value[i++];\n            if (v < min[j]) min[j] = v;\n            if (v > max[j]) max[j] = v;\n          }\n        }\n\n        result = [min, max];\n      }\n    }\n\n    this.state.bounds = result;\n    return result;\n  }\n\n  setData(opts) {\n    const {\n      state\n    } = this;\n\n    if (ArrayBuffer.isView(opts)) {\n      opts = {\n        value: opts\n      };\n    } else if (opts instanceof Buffer) {\n      opts = {\n        buffer: opts\n      };\n    }\n\n    const accessor = { ...this.settings,\n      ...opts\n    };\n    state.bufferAccessor = accessor;\n    state.bounds = null;\n\n    if (opts.constant) {\n      let value = opts.value;\n      value = this._normalizeValue(value, [], 0);\n\n      if (this.settings.normalized) {\n        value = this._normalizeConstant(value);\n      }\n\n      const hasChanged = !state.constant || !this._areValuesEqual(value, this.value);\n\n      if (!hasChanged) {\n        return false;\n      }\n\n      state.externalBuffer = null;\n      state.constant = true;\n      this.value = value;\n    } else if (opts.buffer) {\n      const buffer = opts.buffer;\n      state.externalBuffer = buffer;\n      state.constant = false;\n      this.value = opts.value;\n      const isBuffer64Bit = opts.value instanceof Float64Array;\n      accessor.type = opts.type || buffer.accessor.type;\n      accessor.bytesPerElement = buffer.accessor.BYTES_PER_ELEMENT * (isBuffer64Bit ? 2 : 1);\n      accessor.stride = getStride(accessor);\n    } else if (opts.value) {\n      this._checkExternalBuffer(opts);\n\n      let value = opts.value;\n      state.externalBuffer = null;\n      state.constant = false;\n      this.value = value;\n      accessor.bytesPerElement = value.BYTES_PER_ELEMENT;\n      accessor.stride = getStride(accessor);\n      const {\n        buffer,\n        byteOffset\n      } = this;\n\n      if (this.doublePrecision && value instanceof Float64Array) {\n        value = toDoublePrecisionArray(value, accessor);\n      }\n\n      const requiredBufferSize = value.byteLength + byteOffset + accessor.stride * 2;\n\n      if (buffer.byteLength < requiredBufferSize) {\n        buffer.reallocate(requiredBufferSize);\n      }\n\n      buffer.setAccessor(null);\n      buffer.subData({\n        data: value,\n        offset: byteOffset\n      });\n      accessor.type = opts.type || buffer.accessor.type;\n    }\n\n    return true;\n  }\n\n  updateSubBuffer() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.state.bounds = null;\n    const {\n      value\n    } = this;\n    const {\n      startOffset = 0,\n      endOffset\n    } = opts;\n    this.buffer.subData({\n      data: this.doublePrecision && value instanceof Float64Array ? toDoublePrecisionArray(value, {\n        size: this.size,\n        startIndex: startOffset,\n        endIndex: endOffset\n      }) : value.subarray(startOffset, endOffset),\n      offset: startOffset * value.BYTES_PER_ELEMENT + this.byteOffset\n    });\n  }\n\n  allocate(_ref) {\n    let {\n      numInstances,\n      copy = false\n    } = _ref;\n    const {\n      state\n    } = this;\n    const oldValue = state.allocatedValue;\n    const value = typedArrayManager.allocate(oldValue, numInstances + 1, {\n      size: this.size,\n      type: this.defaultType,\n      copy\n    });\n    this.value = value;\n    const {\n      buffer,\n      byteOffset\n    } = this;\n\n    if (buffer.byteLength < value.byteLength + byteOffset) {\n      buffer.reallocate(value.byteLength + byteOffset);\n\n      if (copy && oldValue) {\n        buffer.subData({\n          data: oldValue instanceof Float64Array ? toDoublePrecisionArray(oldValue, this) : oldValue,\n          offset: byteOffset\n        });\n      }\n    }\n\n    state.allocatedValue = value;\n    state.constant = false;\n    state.externalBuffer = null;\n    state.bufferAccessor = this.settings;\n    return true;\n  }\n\n  _checkExternalBuffer(opts) {\n    const {\n      value\n    } = opts;\n\n    if (!opts.constant && value) {\n      const ArrayType = this.defaultType;\n      let illegalArrayType = false;\n\n      if (this.doublePrecision) {\n        illegalArrayType = value.BYTES_PER_ELEMENT < 4;\n      }\n\n      if (illegalArrayType) {\n        throw new Error(\"Attribute \".concat(this.id, \" does not support \").concat(value.constructor.name));\n      }\n\n      if (!(value instanceof ArrayType) && this.settings.normalized && !('normalized' in opts)) {\n        log.warn(\"Attribute \".concat(this.id, \" is normalized\"))();\n      }\n    }\n  }\n\n  _normalizeConstant(value) {\n    switch (this.settings.type) {\n      case 5120:\n        return new Float32Array(value).map(x => (x + 128) / 255 * 2 - 1);\n\n      case 5122:\n        return new Float32Array(value).map(x => (x + 32768) / 65535 * 2 - 1);\n\n      case 5121:\n        return new Float32Array(value).map(x => x / 255);\n\n      case 5123:\n        return new Float32Array(value).map(x => x / 65535);\n\n      default:\n        return value;\n    }\n  }\n\n  _normalizeValue(value, out, start) {\n    const {\n      defaultValue,\n      size\n    } = this.settings;\n\n    if (Number.isFinite(value)) {\n      out[start] = value;\n      return out;\n    }\n\n    if (!value) {\n      out[start] = defaultValue[0];\n      return out;\n    }\n\n    switch (size) {\n      case 4:\n        out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];\n\n      case 3:\n        out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];\n\n      case 2:\n        out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];\n\n      case 1:\n        out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];\n        break;\n\n      default:\n        let i = size;\n\n        while (--i >= 0) {\n          out[start + i] = Number.isFinite(value[i]) ? value[i] : defaultValue[i];\n        }\n\n    }\n\n    return out;\n  }\n\n  _areValuesEqual(value1, value2) {\n    if (!value1 || !value2) {\n      return false;\n    }\n\n    const {\n      size\n    } = this;\n\n    for (let i = 0; i < size; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["hasFeature","FEATURES","Buffer","ShaderAttribute","glArrayFromType","typedArrayManager","toDoublePrecisionArray","log","getStride","accessor","stride","size","bytesPerElement","resolveShaderAttribute","baseAccessor","shaderAttributeOptions","offset","removed","vertexOffset","elementOffset","resolveDoublePrecisionShaderAttributes","resolvedOptions","high","low","DataColumn","constructor","gl","opts","id","logicalType","type","doublePrecision","defaultValue","Number","isFinite","Array","fill","bufferType","isIndexed","ELEMENT_INDEX_UINT32","defaultType","shaderAttributes","fp64","Float32Array","BYTES_PER_ELEMENT","value","settings","state","externalBuffer","bufferAccessor","allocatedValue","numInstances","bounds","constant","_buffer","setData","buffer","target","byteOffset","getAccessor","n","delete","release","getShaderAttributes","options","isBuffer64Bit","Float64Array","doubleShaderAttributeDefs","shaderAttributeDef","getBuffer","getValue","getBounds","result","min","slice","len","length","Infinity","max","i","j","v","ArrayBuffer","isView","_normalizeValue","normalized","_normalizeConstant","hasChanged","_areValuesEqual","_checkExternalBuffer","requiredBufferSize","byteLength","reallocate","setAccessor","subData","data","updateSubBuffer","startOffset","endOffset","startIndex","endIndex","subarray","allocate","copy","oldValue","ArrayType","illegalArrayType","Error","name","warn","map","x","out","start","value1","value2"],"sources":["../../../../src/lib/attribute/data-column.js"],"sourcesContent":["/* eslint-disable complexity */\nimport GL from '@luma.gl/constants';\nimport {hasFeature, FEATURES, Buffer} from '@luma.gl/core';\nimport ShaderAttribute from './shader-attribute';\nimport {glArrayFromType} from './gl-utils';\nimport typedArrayManager from '../../utils/typed-array-manager';\nimport {toDoublePrecisionArray} from '../../utils/math-utils';\nimport log from '../../utils/log';\n\nfunction getStride(accessor) {\n  return accessor.stride || accessor.size * accessor.bytesPerElement;\n}\n\nfunction resolveShaderAttribute(baseAccessor, shaderAttributeOptions) {\n  if (shaderAttributeOptions.offset) {\n    log.removed('shaderAttribute.offset', 'vertexOffset, elementOffset')();\n  }\n\n  // All shader attributes share the parent's stride\n  const stride = getStride(baseAccessor);\n  // `vertexOffset` is used to access the neighboring vertex's value\n  // e.g. `nextPositions` in polygon\n  const vertexOffset =\n    'vertexOffset' in shaderAttributeOptions\n      ? shaderAttributeOptions.vertexOffset\n      : baseAccessor.vertexOffset || 0;\n  // `elementOffset` is defined when shader attribute's size is smaller than the parent's\n  // e.g. `translations` in transform matrix\n  const elementOffset = shaderAttributeOptions.elementOffset || 0;\n  const offset =\n    // offsets defined by the attribute\n    vertexOffset * stride +\n    elementOffset * baseAccessor.bytesPerElement +\n    // offsets defined by external buffers if any\n    (baseAccessor.offset || 0);\n\n  return {\n    ...shaderAttributeOptions,\n    offset,\n    stride\n  };\n}\n\nfunction resolveDoublePrecisionShaderAttributes(baseAccessor, shaderAttributeOptions) {\n  const resolvedOptions = resolveShaderAttribute(baseAccessor, shaderAttributeOptions);\n\n  return {\n    high: resolvedOptions,\n    low: {\n      ...resolvedOptions,\n      offset: resolvedOptions.offset + baseAccessor.size * 4\n    }\n  };\n}\n\nexport default class DataColumn {\n  /* eslint-disable max-statements */\n  constructor(gl, opts) {\n    this.gl = gl;\n    this.id = opts.id;\n    this.size = opts.size;\n\n    const logicalType = opts.logicalType || opts.type;\n    const doublePrecision = logicalType === GL.DOUBLE;\n\n    let {defaultValue} = opts;\n    defaultValue = Number.isFinite(defaultValue)\n      ? [defaultValue]\n      : defaultValue || new Array(this.size).fill(0);\n    opts.defaultValue = defaultValue;\n\n    let bufferType = logicalType;\n    if (doublePrecision) {\n      bufferType = GL.FLOAT;\n    } else if (!bufferType && opts.isIndexed) {\n      bufferType =\n        gl && hasFeature(gl, FEATURES.ELEMENT_INDEX_UINT32) ? GL.UNSIGNED_INT : GL.UNSIGNED_SHORT;\n    } else if (!bufferType) {\n      bufferType = GL.FLOAT;\n    }\n    opts.logicalType = logicalType;\n    opts.type = bufferType;\n\n    // This is the attribute type defined by the layer\n    // If an external buffer is provided, this.type may be overwritten\n    // But we always want to use defaultType for allocation\n    let defaultType = glArrayFromType(logicalType || bufferType || GL.FLOAT);\n    this.shaderAttributes = {};\n    this.doublePrecision = doublePrecision;\n\n    // `fp64: false` tells a double-precision attribute to allocate Float32Arrays\n    // by default when using auto-packing. This is more efficient in use cases where\n    // high precision is unnecessary, but the `64Low` attribute is still required\n    // by the shader.\n    if (doublePrecision && opts.fp64 === false) {\n      defaultType = Float32Array;\n    }\n    opts.bytesPerElement = defaultType.BYTES_PER_ELEMENT;\n\n    this.defaultType = defaultType;\n    this.value = null;\n    this.settings = opts;\n    this.state = {\n      externalBuffer: null,\n      bufferAccessor: opts,\n      allocatedValue: null,\n      numInstances: 0,\n      bounds: null,\n      constant: false\n    };\n    this._buffer = null;\n\n    this.setData(opts);\n  }\n  /* eslint-enable max-statements */\n\n  get buffer() {\n    if (!this._buffer) {\n      const {isIndexed, type} = this.settings;\n      this._buffer = new Buffer(this.gl, {\n        id: this.id,\n        target: isIndexed ? GL.ELEMENT_ARRAY_BUFFER : GL.ARRAY_BUFFER,\n        accessor: {type}\n      });\n    }\n    return this._buffer;\n  }\n\n  get byteOffset() {\n    const accessor = this.getAccessor();\n    if (accessor.vertexOffset) {\n      return accessor.vertexOffset * getStride(accessor);\n    }\n    return 0;\n  }\n\n  get numInstances() {\n    return this.state.numInstances;\n  }\n\n  set numInstances(n) {\n    this.state.numInstances = n;\n  }\n\n  delete() {\n    if (this._buffer) {\n      this._buffer.delete();\n      this._buffer = null;\n    }\n    typedArrayManager.release(this.state.allocatedValue);\n  }\n\n  getShaderAttributes(id, options) {\n    if (this.doublePrecision) {\n      const shaderAttributes = {};\n      const isBuffer64Bit = this.value instanceof Float64Array;\n\n      const doubleShaderAttributeDefs = resolveDoublePrecisionShaderAttributes(\n        this.getAccessor(),\n        options || {}\n      );\n\n      shaderAttributes[id] = new ShaderAttribute(this, doubleShaderAttributeDefs.high);\n      shaderAttributes[`${id}64Low`] = isBuffer64Bit\n        ? new ShaderAttribute(this, doubleShaderAttributeDefs.low)\n        : new Float32Array(this.size); // use constant for low part if buffer is 32-bit\n      return shaderAttributes;\n    }\n    if (options) {\n      const shaderAttributeDef = resolveShaderAttribute(this.getAccessor(), options);\n      return {[id]: new ShaderAttribute(this, shaderAttributeDef)};\n    }\n    return {[id]: this};\n  }\n\n  getBuffer() {\n    if (this.state.constant) {\n      return null;\n    }\n    return this.state.externalBuffer || this._buffer;\n  }\n\n  getValue() {\n    if (this.state.constant) {\n      return this.value;\n    }\n    return [this.getBuffer(), this.getAccessor()];\n  }\n\n  getAccessor() {\n    return this.state.bufferAccessor;\n  }\n\n  // Returns [min: Array(size), max: Array(size)]\n  /* eslint-disable max-depth */\n  getBounds() {\n    if (this.state.bounds) {\n      return this.state.bounds;\n    }\n    let result = null;\n    if (this.state.constant) {\n      const min = this.value.slice();\n      result = [min, min];\n    } else {\n      const {value, numInstances, size} = this;\n      const len = numInstances * size;\n      if (value && len && value.length >= len) {\n        const min = new Array(size).fill(Infinity);\n        const max = new Array(size).fill(-Infinity);\n        for (let i = 0; i < len; ) {\n          for (let j = 0; j < size; j++) {\n            const v = value[i++];\n            if (v < min[j]) min[j] = v;\n            if (v > max[j]) max[j] = v;\n          }\n        }\n        result = [min, max];\n      }\n    }\n    this.state.bounds = result;\n    return result;\n  }\n\n  // returns true if success\n  // eslint-disable-next-line max-statements\n  setData(opts) {\n    const {state} = this;\n    if (ArrayBuffer.isView(opts)) {\n      opts = {value: opts};\n    } else if (opts instanceof Buffer) {\n      opts = {buffer: opts};\n    }\n\n    const accessor = {...this.settings, ...opts};\n    state.bufferAccessor = accessor;\n    state.bounds = null; // clear cached bounds\n\n    if (opts.constant) {\n      // set constant\n      let value = opts.value;\n      value = this._normalizeValue(value, [], 0);\n      if (this.settings.normalized) {\n        value = this._normalizeConstant(value);\n      }\n      const hasChanged = !state.constant || !this._areValuesEqual(value, this.value);\n\n      if (!hasChanged) {\n        return false;\n      }\n      state.externalBuffer = null;\n      state.constant = true;\n      this.value = value;\n    } else if (opts.buffer) {\n      const buffer = opts.buffer;\n      state.externalBuffer = buffer;\n      state.constant = false;\n      this.value = opts.value;\n      const isBuffer64Bit = opts.value instanceof Float64Array;\n\n      // Copy the type of the buffer into the accessor\n      accessor.type = opts.type || buffer.accessor.type;\n      accessor.bytesPerElement = buffer.accessor.BYTES_PER_ELEMENT * (isBuffer64Bit ? 2 : 1);\n      accessor.stride = getStride(accessor);\n    } else if (opts.value) {\n      this._checkExternalBuffer(opts);\n\n      let value = opts.value;\n      state.externalBuffer = null;\n      state.constant = false;\n      this.value = value;\n\n      accessor.bytesPerElement = value.BYTES_PER_ELEMENT;\n      accessor.stride = getStride(accessor);\n\n      const {buffer, byteOffset} = this;\n\n      if (this.doublePrecision && value instanceof Float64Array) {\n        value = toDoublePrecisionArray(value, accessor);\n      }\n\n      // A small over allocation is used as safety margin\n      // Shader attributes may try to access this buffer with bigger offsets\n      const requiredBufferSize = value.byteLength + byteOffset + accessor.stride * 2;\n      if (buffer.byteLength < requiredBufferSize) {\n        buffer.reallocate(requiredBufferSize);\n      }\n      // Hack: force Buffer to infer data type\n      buffer.setAccessor(null);\n      buffer.subData({data: value, offset: byteOffset});\n      accessor.type = opts.type || buffer.accessor.type;\n    }\n\n    return true;\n  }\n\n  updateSubBuffer(opts = {}) {\n    this.state.bounds = null; // clear cached bounds\n\n    const {value} = this;\n    const {startOffset = 0, endOffset} = opts;\n    this.buffer.subData({\n      data:\n        this.doublePrecision && value instanceof Float64Array\n          ? toDoublePrecisionArray(value, {\n              size: this.size,\n              startIndex: startOffset,\n              endIndex: endOffset\n            })\n          : value.subarray(startOffset, endOffset),\n      offset: startOffset * value.BYTES_PER_ELEMENT + this.byteOffset\n    });\n  }\n\n  allocate({numInstances, copy = false}) {\n    const {state} = this;\n    const oldValue = state.allocatedValue;\n\n    // Allocate at least one element to ensure a valid buffer\n    const value = typedArrayManager.allocate(oldValue, numInstances + 1, {\n      size: this.size,\n      type: this.defaultType,\n      copy\n    });\n\n    this.value = value;\n\n    const {buffer, byteOffset} = this;\n\n    if (buffer.byteLength < value.byteLength + byteOffset) {\n      buffer.reallocate(value.byteLength + byteOffset);\n\n      if (copy && oldValue) {\n        // Upload the full existing attribute value to the GPU, so that updateBuffer\n        // can choose to only update a partial range.\n        // TODO - copy old buffer to new buffer on the GPU\n        buffer.subData({\n          data:\n            oldValue instanceof Float64Array ? toDoublePrecisionArray(oldValue, this) : oldValue,\n          offset: byteOffset\n        });\n      }\n    }\n\n    state.allocatedValue = value;\n    state.constant = false;\n    state.externalBuffer = null;\n    state.bufferAccessor = this.settings;\n    return true;\n  }\n\n  // PRIVATE HELPER METHODS\n  _checkExternalBuffer(opts) {\n    const {value} = opts;\n    if (!opts.constant && value) {\n      const ArrayType = this.defaultType;\n\n      let illegalArrayType = false;\n      if (this.doublePrecision) {\n        // not 32bit or 64bit\n        illegalArrayType = value.BYTES_PER_ELEMENT < 4;\n      }\n      if (illegalArrayType) {\n        throw new Error(`Attribute ${this.id} does not support ${value.constructor.name}`);\n      }\n      if (!(value instanceof ArrayType) && this.settings.normalized && !('normalized' in opts)) {\n        log.warn(`Attribute ${this.id} is normalized`)();\n      }\n    }\n  }\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer\n  _normalizeConstant(value) {\n    switch (this.settings.type) {\n      case GL.BYTE:\n        // normalize [-128, 127] to [-1, 1]\n        return new Float32Array(value).map(x => ((x + 128) / 255) * 2 - 1);\n\n      case GL.SHORT:\n        // normalize [-32768, 32767] to [-1, 1]\n        return new Float32Array(value).map(x => ((x + 32768) / 65535) * 2 - 1);\n\n      case GL.UNSIGNED_BYTE:\n        // normalize [0, 255] to [0, 1]\n        return new Float32Array(value).map(x => x / 255);\n\n      case GL.UNSIGNED_SHORT:\n        // normalize [0, 65535] to [0, 1]\n        return new Float32Array(value).map(x => x / 65535);\n\n      default:\n        // No normalization for gl.FLOAT and gl.HALF_FLOAT\n        return value;\n    }\n  }\n\n  /* check user supplied values and apply fallback */\n  _normalizeValue(value, out, start) {\n    const {defaultValue, size} = this.settings;\n\n    if (Number.isFinite(value)) {\n      out[start] = value;\n      return out;\n    }\n    if (!value) {\n      out[start] = defaultValue[0];\n      return out;\n    }\n\n    // Important - switch cases are 5x more performant than a for loop!\n    /* eslint-disable no-fallthrough, default-case */\n    switch (size) {\n      case 4:\n        out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];\n      case 3:\n        out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];\n      case 2:\n        out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];\n      case 1:\n        out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];\n        break;\n\n      default:\n        // In the rare case where the attribute size > 4, do it the slow way\n        // This is used for e.g. transform matrices\n        let i = size;\n        while (--i >= 0) {\n          out[start + i] = Number.isFinite(value[i]) ? value[i] : defaultValue[i];\n        }\n    }\n\n    return out;\n  }\n\n  _areValuesEqual(value1, value2) {\n    if (!value1 || !value2) {\n      return false;\n    }\n    const {size} = this;\n    for (let i = 0; i < size; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}