{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getTransferList } from '../worker-utils/get-transfer-list';\nvar onMessageWrapperMap = new Map();\n\nvar WorkerBody = /*#__PURE__*/function () {\n  function WorkerBody() {\n    _classCallCheck(this, WorkerBody);\n  }\n\n  _createClass(WorkerBody, null, [{\n    key: \"onmessage\",\n    set: function set(onMessage) {\n      self.onmessage = function (message) {\n        if (!isKnownMessage(message)) {\n          return;\n        }\n\n        var _message$data = message.data,\n            type = _message$data.type,\n            payload = _message$data.payload;\n        onMessage(type, payload);\n      };\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(onMessage) {\n      var onMessageWrapper = onMessageWrapperMap.get(onMessage);\n\n      if (!onMessageWrapper) {\n        onMessageWrapper = function onMessageWrapper(message) {\n          if (!isKnownMessage(message)) {\n            return;\n          }\n\n          var _message$data2 = message.data,\n              type = _message$data2.type,\n              payload = _message$data2.payload;\n          onMessage(type, payload);\n        };\n      }\n\n      self.addEventListener('message', onMessageWrapper);\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(onMessage) {\n      var onMessageWrapper = onMessageWrapperMap.get(onMessage);\n      onMessageWrapperMap.delete(onMessage);\n      self.removeEventListener('message', onMessageWrapper);\n    }\n  }, {\n    key: \"postMessage\",\n    value: function postMessage(type, payload) {\n      if (self) {\n        var data = {\n          source: 'loaders.gl',\n          type: type,\n          payload: payload\n        };\n        var transferList = getTransferList(payload);\n        self.postMessage(data, transferList);\n      }\n    }\n  }]);\n\n  return WorkerBody;\n}();\n\nexport { WorkerBody as default };\n\nfunction isKnownMessage(message) {\n  var type = message.type,\n      data = message.data;\n  return type === 'message' && data && typeof data.source === 'string' && data.source.startsWith('loaders.gl');\n}","map":{"version":3,"mappings":";;AACA,SAAQA,eAAR,QAA8B,mCAA9B;AAEA,IAAMC,mBAAmB,GAAG,IAAIC,GAAJ,EAA5B;;IAKqBC,U;;;;;;;SAIC,aAACC,SAAD,EAA6E;MAE/FC,IAAI,CAACC,SAALD,GAAkBE,iBAAD,EAAa;QAC5B,IAAI,CAACC,cAAc,CAACD,OAAD,CAAnB,EAA8B;UAC5B;QACD;;QAGD,oBAAwBA,OAAO,CAACE,IAAhC;QAAA,IAAOC,IAAP,iBAAOA,IAAP;QAAA,IAAaC,OAAb,iBAAaA,OAAb;QACAP,SAAS,CAACM,IAAD,EAAOC,OAAP,CAATP;MAPF;IASD;;;WAEsB,0BACrBA,SADqB,EAErB;MACA,IAAIQ,gBAAgB,GAAGX,mBAAmB,CAACY,GAApBZ,CAAwBG,SAAxBH,CAAvB;;MAEA,IAAI,CAACW,gBAAL,EAAuB;QACrBA,gBAAgB,GAAIL,iCAAD,EAAgC;UACjD,IAAI,CAACC,cAAc,CAACD,OAAD,CAAnB,EAA8B;YAC5B;UACD;;UAGD,qBAAwBA,OAAO,CAACE,IAAhC;UAAA,IAAOC,IAAP,kBAAOA,IAAP;UAAA,IAAaC,OAAb,kBAAaA,OAAb;UACAP,SAAS,CAACM,IAAD,EAAOC,OAAP,CAATP;QAPF;MASD;;MAGDC,IAAI,CAACS,gBAALT,CAAsB,SAAtBA,EAAiCO,gBAAjCP;IACD;;;WAEyB,6BACxBD,SADwB,EAExB;MACA,IAAMQ,gBAAgB,GAAGX,mBAAmB,CAACY,GAApBZ,CAAwBG,SAAxBH,CAAzB;MACAA,mBAAmB,CAACc,MAApBd,CAA2BG,SAA3BH;MAEAI,IAAI,CAACW,mBAALX,CAAyB,SAAzBA,EAAoCO,gBAApCP;IACD;;;WAOiB,qBAACK,IAAD,EAA0BC,OAA1B,EAA+D;MAC/E,IAAIN,IAAJ,EAAU;QACR,IAAMI,IAAuB,GAAG;UAACQ,MAAM,EAAE,YAAT;UAAuBP,IAAvB,EAAuBA,IAAvB;UAA6BC;QAA7B,CAAhC;QACA,IAAMO,YAAY,GAAGlB,eAAe,CAACW,OAAD,CAApC;QAGAN,IAAI,CAACc,WAALd,CAAiBI,IAAjBJ,EAAuBa,YAAvBb;MACD;IACF;;;;;;SA5DkBF,U;;AAgErB,SAASK,cAAT,CAAwBD,OAAxB,EAAoD;EAClD,IAAOG,IAAP,GAAqBH,OAArB,CAAOG,IAAP;EAAA,IAAaD,IAAb,GAAqBF,OAArB,CAAaE,IAAb;EACA,OACEC,IAAI,KAAK,SAATA,IACAD,IADAC,IAEA,OAAOD,IAAI,CAACQ,MAAZ,KAAuB,QAFvBP,IAGAD,IAAI,CAACQ,MAALR,CAAYW,UAAZX,CAAuB,YAAvBA,CAJF;AAMD","names":["getTransferList","onMessageWrapperMap","Map","WorkerBody","onMessage","self","onmessage","message","isKnownMessage","data","type","payload","onMessageWrapper","get","addEventListener","delete","removeEventListener","source","transferList","postMessage","startsWith"],"sources":["../../../../src/lib/worker-farm/worker-body.ts"],"sourcesContent":["import type {WorkerMessageData, WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport {getTransferList} from '../worker-utils/get-transfer-list';\n\nconst onMessageWrapperMap = new Map();\n\n/**\n * Type safe wrapper for worker code\n */\nexport default class WorkerBody {\n  /*\n   * (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n   */\n  static set onmessage(onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any) {\n    // eslint-disable-next-line no-restricted-globals\n    self.onmessage = (message) => {\n      if (!isKnownMessage(message)) {\n        return;\n      }\n\n      // Confusingly the message itself also has a 'type' field which is always set to 'message'\n      const {type, payload} = message.data;\n      onMessage(type, payload);\n    };\n  }\n\n  static addEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    let onMessageWrapper = onMessageWrapperMap.get(onMessage);\n\n    if (!onMessageWrapper) {\n      onMessageWrapper = (message: MessageEvent<any>) => {\n        if (!isKnownMessage(message)) {\n          return;\n        }\n\n        // Confusingly the message itself also has a 'type' field which is always set to 'message'\n        const {type, payload} = message.data;\n        onMessage(type, payload);\n      };\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    self.addEventListener('message', onMessageWrapper);\n  }\n\n  static removeEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    const onMessageWrapper = onMessageWrapperMap.get(onMessage);\n    onMessageWrapperMap.delete(onMessage);\n    // eslint-disable-next-line no-restricted-globals\n    self.removeEventListener('message', onMessageWrapper);\n  }\n\n  /**\n   * Send a message from a worker to creating thread (main thread)\n   * @param type\n   * @param payload\n   */\n  static postMessage(type: WorkerMessageType, payload: WorkerMessagePayload): void {\n    if (self) {\n      const data: WorkerMessageData = {source: 'loaders.gl', type, payload};\n      const transferList = getTransferList(payload);\n      // eslint-disable-next-line no-restricted-globals\n      // @ts-ignore\n      self.postMessage(data, transferList);\n    }\n  }\n}\n\n// Filter out noise messages sent to workers\nfunction isKnownMessage(message: MessageEvent<any>) {\n  const {type, data} = message;\n  return (\n    type === 'message' &&\n    data &&\n    typeof data.source === 'string' &&\n    data.source.startsWith('loaders.gl')\n  );\n}\n"]},"metadata":{},"sourceType":"module"}