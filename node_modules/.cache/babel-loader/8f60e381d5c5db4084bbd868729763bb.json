{"ast":null,"code":"import { DirectionalLight } from './directional-light';\nimport { getSunlightDirection } from './suncalc';\nexport default class SunLight extends DirectionalLight {\n  constructor(_ref) {\n    let {\n      timestamp,\n      ...others\n    } = _ref;\n    super(others);\n    this.timestamp = timestamp;\n  }\n\n  getProjectedLight(_ref2) {\n    let {\n      layer\n    } = _ref2;\n    const {\n      viewport\n    } = layer.context;\n    const isGlobe = viewport.resolution > 0;\n\n    if (isGlobe) {\n      const [x, y, z] = getSunlightDirection(this.timestamp, 0, 0);\n      this.direction = [x, -z, y];\n    } else {\n      const {\n        latitude,\n        longitude\n      } = viewport;\n      this.direction = getSunlightDirection(this.timestamp, latitude, longitude);\n    }\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAAQA,gBAAR,QAA+B,qBAA/B;AACA,SAAQC,oBAAR,QAAmC,WAAnC;AAEA,eAAe,MAAMC,QAAN,SAAuBF,gBAAvB,CAAwC;EACrDG,WAAW,OAAyB;IAAA,IAAxB;MAACC,SAAD;MAAY,GAAGC;IAAf,CAAwB;IAClC,MAAMA,MAAN;IAEA,KAAKD,SAAL,GAAiBA,SAAjB;EACD;;EAEDE,iBAAiB,QAAU;IAAA,IAAT;MAACC;IAAD,CAAS;IACzB,MAAM;MAACC;IAAD,IAAaD,KAAK,CAACE,OAAzB;IACA,MAAMC,OAAO,GAAGF,QAAQ,CAACG,UAATH,GAAsB,CAAtC;;IAEA,IAAIE,OAAJ,EAAa;MAEX,MAAM,CAACE,CAAD,EAAIC,CAAJ,EAAOC,CAAP,IAAYb,oBAAoB,CAAC,KAAKG,SAAN,EAAiB,CAAjB,EAAoB,CAApB,CAAtC;MACA,KAAKW,SAAL,GAAiB,CAACH,CAAD,EAAI,CAACE,CAAL,EAAQD,CAAR,CAAjB;IAHF,OAIO;MACL,MAAM;QAACG,QAAD;QAAWC;MAAX,IAAwBT,QAA9B;MACA,KAAKO,SAAL,GAAiBd,oBAAoB,CAAC,KAAKG,SAAN,EAAiBY,QAAjB,EAA2BC,SAA3B,CAArC;IACD;;IAED,OAAO,IAAP;EACD;;AArBoD","names":["DirectionalLight","getSunlightDirection","SunLight","constructor","timestamp","others","getProjectedLight","layer","viewport","context","isGlobe","resolution","x","y","z","direction","latitude","longitude"],"sources":["../../../../src/effects/lighting/sun-light.js"],"sourcesContent":["import {DirectionalLight} from './directional-light';\nimport {getSunlightDirection} from './suncalc';\n\nexport default class SunLight extends DirectionalLight {\n  constructor({timestamp, ...others}) {\n    super(others);\n\n    this.timestamp = timestamp;\n  }\n\n  getProjectedLight({layer}) {\n    const {viewport} = layer.context;\n    const isGlobe = viewport.resolution > 0;\n\n    if (isGlobe) {\n      // Rotate vector to align with the direction of the globe projection (up at lon:0,lat:0 is [0, -1, 0])\n      const [x, y, z] = getSunlightDirection(this.timestamp, 0, 0);\n      this.direction = [x, -z, y];\n    } else {\n      const {latitude, longitude} = viewport;\n      this.direction = getSunlightDirection(this.timestamp, latitude, longitude);\n    }\n\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}