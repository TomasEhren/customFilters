{"ast":null,"code":"import { getStringFromArrayBuffer } from './parse-utils';\nconst SIZEOF_UINT32 = 4;\nconst DEPRECATION_WARNING = 'b3dm tile in legacy format.';\nexport function parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset) {\n  const view = new DataView(arrayBuffer);\n  let batchLength;\n  tile.header = tile.header || {};\n  let featureTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n  let featureTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n  let batchTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n  let batchTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  if (batchTableJsonByteLength >= 570425344) {\n    byteOffset -= SIZEOF_UINT32 * 2;\n    batchLength = featureTableJsonByteLength;\n    batchTableJsonByteLength = featureTableBinaryByteLength;\n    batchTableBinaryByteLength = 0;\n    featureTableJsonByteLength = 0;\n    featureTableBinaryByteLength = 0;\n    console.warn(DEPRECATION_WARNING);\n  } else if (batchTableBinaryByteLength >= 570425344) {\n    byteOffset -= SIZEOF_UINT32;\n    batchLength = batchTableJsonByteLength;\n    batchTableJsonByteLength = featureTableJsonByteLength;\n    batchTableBinaryByteLength = featureTableBinaryByteLength;\n    featureTableJsonByteLength = 0;\n    featureTableBinaryByteLength = 0;\n    console.warn(DEPRECATION_WARNING);\n  }\n\n  tile.header.featureTableJsonByteLength = featureTableJsonByteLength;\n  tile.header.featureTableBinaryByteLength = featureTableBinaryByteLength;\n  tile.header.batchTableJsonByteLength = batchTableJsonByteLength;\n  tile.header.batchTableBinaryByteLength = batchTableBinaryByteLength;\n  tile.header.batchLength = batchLength;\n  return byteOffset;\n}\nexport function parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options) {\n  byteOffset = parse3DTileFeatureTable(tile, arrayBuffer, byteOffset, options);\n  byteOffset = parse3DTileBatchTable(tile, arrayBuffer, byteOffset, options);\n  return byteOffset;\n}\n\nfunction parse3DTileFeatureTable(tile, arrayBuffer, byteOffset, options) {\n  const {\n    featureTableJsonByteLength,\n    featureTableBinaryByteLength,\n    batchLength\n  } = tile.header;\n  tile.featureTableJson = {\n    BATCH_LENGTH: batchLength || 0\n  };\n\n  if (featureTableJsonByteLength > 0) {\n    const featureTableString = getStringFromArrayBuffer(arrayBuffer, byteOffset, featureTableJsonByteLength);\n    tile.featureTableJson = JSON.parse(featureTableString);\n  }\n\n  byteOffset += featureTableJsonByteLength;\n  tile.featureTableBinary = new Uint8Array(arrayBuffer, byteOffset, featureTableBinaryByteLength);\n  byteOffset += featureTableBinaryByteLength;\n  return byteOffset;\n}\n\nfunction parse3DTileBatchTable(tile, arrayBuffer, byteOffset, options) {\n  const {\n    batchTableJsonByteLength,\n    batchTableBinaryByteLength\n  } = tile.header;\n\n  if (batchTableJsonByteLength > 0) {\n    const batchTableString = getStringFromArrayBuffer(arrayBuffer, byteOffset, batchTableJsonByteLength);\n    tile.batchTableJson = JSON.parse(batchTableString);\n    byteOffset += batchTableJsonByteLength;\n\n    if (batchTableBinaryByteLength > 0) {\n      tile.batchTableBinary = new Uint8Array(arrayBuffer, byteOffset, batchTableBinaryByteLength);\n      tile.batchTableBinary = new Uint8Array(tile.batchTableBinary);\n      byteOffset += batchTableBinaryByteLength;\n    }\n  }\n\n  return byteOffset;\n}","map":{"version":3,"mappings":"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","names":["getStringFromArrayBuffer","SIZEOF_UINT32","DEPRECATION_WARNING","parse3DTileTablesHeaderSync","tile","arrayBuffer","byteOffset","view","DataView","batchLength","header","featureTableJsonByteLength","getUint32","featureTableBinaryByteLength","batchTableJsonByteLength","batchTableBinaryByteLength","console","warn","parse3DTileTablesSync","options","parse3DTileFeatureTable","parse3DTileBatchTable","featureTableJson","BATCH_LENGTH","featureTableString","JSON","parse","featureTableBinary","Uint8Array","batchTableString","batchTableJson","batchTableBinary"],"sources":["../../../../../src/lib/parsers/helpers/parse-3d-tile-tables.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {getStringFromArrayBuffer} from './parse-utils';\n\nconst SIZEOF_UINT32 = 4;\nconst DEPRECATION_WARNING = 'b3dm tile in legacy format.';\n\n// eslint-disable-next-line max-statements\nexport function parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset) {\n  const view = new DataView(arrayBuffer);\n  let batchLength;\n\n  tile.header = tile.header || {};\n\n  let featureTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  let featureTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  let batchTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  let batchTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  // First legacy header format - [batchLength] [batchTableByteLength] ('batchTableJsonByteLength': JSON starts with a quotation mark or the glTF magic)\n  // Second legacy format - [batchTableJsonByteLength] [batchTableBinaryByteLength] [batchLength] (Second legacy format is similar as first but here we check 'batchTableBinaryByteLength' instead)\n  // Current header format - [featureTableJsonByteLength] [featureTableBinaryByteLength] [batchTableJsonByteLength] [batchTableBinaryByteLength]\n  // First byte will be 0x22 or 0x67. The minimum uint32 expected is 0x22000000 = 570425344 = 570MB.\n  if (batchTableJsonByteLength >= 570425344) {\n    byteOffset -= SIZEOF_UINT32 * 2;\n    batchLength = featureTableJsonByteLength;\n    batchTableJsonByteLength = featureTableBinaryByteLength;\n    batchTableBinaryByteLength = 0;\n    featureTableJsonByteLength = 0;\n    featureTableBinaryByteLength = 0;\n\n    console.warn(DEPRECATION_WARNING); // eslint-disable-line\n  } else if (batchTableBinaryByteLength >= 570425344) {\n    byteOffset -= SIZEOF_UINT32;\n    batchLength = batchTableJsonByteLength;\n    batchTableJsonByteLength = featureTableJsonByteLength;\n    batchTableBinaryByteLength = featureTableBinaryByteLength;\n    featureTableJsonByteLength = 0;\n    featureTableBinaryByteLength = 0;\n\n    console.warn(DEPRECATION_WARNING); // eslint-disable-line\n  }\n\n  tile.header.featureTableJsonByteLength = featureTableJsonByteLength;\n  tile.header.featureTableBinaryByteLength = featureTableBinaryByteLength;\n  tile.header.batchTableJsonByteLength = batchTableJsonByteLength;\n  tile.header.batchTableBinaryByteLength = batchTableBinaryByteLength;\n  tile.header.batchLength = batchLength;\n\n  return byteOffset;\n}\n\nexport function parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options) {\n  byteOffset = parse3DTileFeatureTable(tile, arrayBuffer, byteOffset, options);\n  byteOffset = parse3DTileBatchTable(tile, arrayBuffer, byteOffset, options);\n  return byteOffset;\n}\n\nfunction parse3DTileFeatureTable(tile, arrayBuffer, byteOffset, options) {\n  const {featureTableJsonByteLength, featureTableBinaryByteLength, batchLength} = tile.header;\n\n  tile.featureTableJson = {\n    BATCH_LENGTH: batchLength || 0\n  };\n\n  if (featureTableJsonByteLength > 0) {\n    const featureTableString = getStringFromArrayBuffer(\n      arrayBuffer,\n      byteOffset,\n      featureTableJsonByteLength\n    );\n    tile.featureTableJson = JSON.parse(featureTableString);\n  }\n  byteOffset += featureTableJsonByteLength;\n\n  tile.featureTableBinary = new Uint8Array(arrayBuffer, byteOffset, featureTableBinaryByteLength);\n  byteOffset += featureTableBinaryByteLength;\n\n  /*\n  const featureTable = parseFeatureTable(featureTableJson, featureTableBinary);\n\n  const batchLength = featureTable.getGlobalProperty('BATCH_LENGTH');\n  featureTable.featuresLength = batchLength;\n  */\n\n  return byteOffset;\n}\n\nfunction parse3DTileBatchTable(tile, arrayBuffer, byteOffset, options) {\n  const {batchTableJsonByteLength, batchTableBinaryByteLength} = tile.header;\n\n  if (batchTableJsonByteLength > 0) {\n    const batchTableString = getStringFromArrayBuffer(\n      arrayBuffer,\n      byteOffset,\n      batchTableJsonByteLength\n    );\n    tile.batchTableJson = JSON.parse(batchTableString);\n    byteOffset += batchTableJsonByteLength;\n\n    if (batchTableBinaryByteLength > 0) {\n      // Has a batch table binary\n      tile.batchTableBinary = new Uint8Array(arrayBuffer, byteOffset, batchTableBinaryByteLength);\n      // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n      tile.batchTableBinary = new Uint8Array(tile.batchTableBinary);\n\n      byteOffset += batchTableBinaryByteLength;\n    }\n  }\n\n  return byteOffset;\n}\n"]},"metadata":{},"sourceType":"module"}