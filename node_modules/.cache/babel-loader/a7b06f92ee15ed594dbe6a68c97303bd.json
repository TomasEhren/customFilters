{"ast":null,"code":"import _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Viewport from './viewport';\nimport { pixelsToWorld, getViewMatrix, addMetersToLngLat as _addMetersToLngLat, getProjectionParameters, altitudeToFovy, fovyToAltitude, fitBounds as _fitBounds, getBounds as _getBounds } from '@math.gl/web-mercator';\nimport * as vec2 from 'gl-matrix/vec2';\nimport { Matrix4 } from '@math.gl/core';\nvar TILE_SIZE = 512;\nvar EARTH_CIRCUMFERENCE = 40.03e6;\nvar DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction unitsPerMeter(latitude) {\n  var latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return TILE_SIZE / EARTH_CIRCUMFERENCE / latCosine;\n}\n\nvar WebMercatorViewport = /*#__PURE__*/function (_Viewport) {\n  _inherits(WebMercatorViewport, _Viewport);\n\n  var _super = _createSuper(WebMercatorViewport);\n\n  function WebMercatorViewport() {\n    var _this;\n\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, WebMercatorViewport);\n\n    var _opts$latitude = opts.latitude,\n        latitude = _opts$latitude === void 0 ? 0 : _opts$latitude,\n        _opts$longitude = opts.longitude,\n        longitude = _opts$longitude === void 0 ? 0 : _opts$longitude,\n        _opts$zoom = opts.zoom,\n        zoom = _opts$zoom === void 0 ? 11 : _opts$zoom,\n        _opts$pitch = opts.pitch,\n        pitch = _opts$pitch === void 0 ? 0 : _opts$pitch,\n        _opts$bearing = opts.bearing,\n        bearing = _opts$bearing === void 0 ? 0 : _opts$bearing,\n        _opts$nearZMultiplier = opts.nearZMultiplier,\n        nearZMultiplier = _opts$nearZMultiplier === void 0 ? 0.1 : _opts$nearZMultiplier,\n        _opts$farZMultiplier = opts.farZMultiplier,\n        farZMultiplier = _opts$farZMultiplier === void 0 ? 1.01 : _opts$farZMultiplier,\n        _opts$orthographic = opts.orthographic,\n        orthographic = _opts$orthographic === void 0 ? false : _opts$orthographic,\n        projectionMatrix = opts.projectionMatrix,\n        _opts$repeat = opts.repeat,\n        repeat = _opts$repeat === void 0 ? false : _opts$repeat,\n        _opts$worldOffset = opts.worldOffset,\n        worldOffset = _opts$worldOffset === void 0 ? 0 : _opts$worldOffset,\n        _opts$legacyMeterSize = opts.legacyMeterSizes,\n        legacyMeterSizes = _opts$legacyMeterSize === void 0 ? false : _opts$legacyMeterSize;\n    var width = opts.width,\n        height = opts.height,\n        _opts$altitude = opts.altitude,\n        altitude = _opts$altitude === void 0 ? 1.5 : _opts$altitude;\n    var scale = Math.pow(2, zoom);\n    width = width || 1;\n    height = height || 1;\n    var fovy;\n    var projectionParameters = null;\n\n    if (projectionMatrix) {\n      altitude = projectionMatrix[5] / 2;\n      fovy = altitudeToFovy(altitude);\n    } else {\n      if (opts.fovy) {\n        fovy = opts.fovy;\n        altitude = fovyToAltitude(fovy);\n      } else {\n        fovy = altitudeToFovy(altitude);\n      }\n\n      projectionParameters = getProjectionParameters({\n        width: width,\n        height: height,\n        pitch: pitch,\n        fovy: fovy,\n        nearZMultiplier: nearZMultiplier,\n        farZMultiplier: farZMultiplier\n      });\n    }\n\n    var viewMatrixUncentered = getViewMatrix({\n      height: height,\n      pitch: pitch,\n      bearing: bearing,\n      scale: scale,\n      altitude: altitude\n    });\n\n    if (worldOffset) {\n      var viewOffset = new Matrix4().translate([512 * worldOffset, 0, 0]);\n      viewMatrixUncentered = viewOffset.multiplyLeft(viewMatrixUncentered);\n    }\n\n    _this = _super.call(this, _objectSpread(_objectSpread(_objectSpread({}, opts), {}, {\n      width: width,\n      height: height,\n      viewMatrix: viewMatrixUncentered,\n      longitude: longitude,\n      latitude: latitude,\n      zoom: zoom\n    }, projectionParameters), {}, {\n      fovy: fovy,\n      focalDistance: altitude\n    }));\n    _this.latitude = latitude;\n    _this.longitude = longitude;\n    _this.zoom = zoom;\n    _this.pitch = pitch;\n    _this.bearing = bearing;\n    _this.altitude = altitude;\n    _this.fovy = fovy;\n    _this.orthographic = orthographic;\n    _this._subViewports = repeat ? [] : null;\n    _this._pseudoMeters = legacyMeterSizes;\n    Object.freeze(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(WebMercatorViewport, [{\n    key: \"subViewports\",\n    get: function get() {\n      if (this._subViewports && !this._subViewports.length) {\n        var bounds = this.getBounds();\n        var minOffset = Math.floor((bounds[0] + 180) / 360);\n        var maxOffset = Math.ceil((bounds[2] - 180) / 360);\n\n        for (var x = minOffset; x <= maxOffset; x++) {\n          var offsetViewport = x ? new WebMercatorViewport(_objectSpread(_objectSpread({}, this), {}, {\n            worldOffset: x\n          })) : this;\n\n          this._subViewports.push(offsetViewport);\n        }\n      }\n\n      return this._subViewports;\n    }\n  }, {\n    key: \"projectPosition\",\n    value: function projectPosition(xyz) {\n      if (this._pseudoMeters) {\n        return _get(_getPrototypeOf(WebMercatorViewport.prototype), \"projectPosition\", this).call(this, xyz);\n      }\n\n      var _this$projectFlat = this.projectFlat(xyz),\n          _this$projectFlat2 = _slicedToArray(_this$projectFlat, 2),\n          X = _this$projectFlat2[0],\n          Y = _this$projectFlat2[1];\n\n      var Z = (xyz[2] || 0) * unitsPerMeter(xyz[1]);\n      return [X, Y, Z];\n    }\n  }, {\n    key: \"unprojectPosition\",\n    value: function unprojectPosition(xyz) {\n      if (this._pseudoMeters) {\n        return _get(_getPrototypeOf(WebMercatorViewport.prototype), \"unprojectPosition\", this).call(this, xyz);\n      }\n\n      var _this$unprojectFlat = this.unprojectFlat(xyz),\n          _this$unprojectFlat2 = _slicedToArray(_this$unprojectFlat, 2),\n          X = _this$unprojectFlat2[0],\n          Y = _this$unprojectFlat2[1];\n\n      var Z = (xyz[2] || 0) / unitsPerMeter(Y);\n      return [X, Y, Z];\n    }\n  }, {\n    key: \"addMetersToLngLat\",\n    value: function addMetersToLngLat(lngLatZ, xyz) {\n      return _addMetersToLngLat(lngLatZ, xyz);\n    }\n  }, {\n    key: \"panByPosition\",\n    value: function panByPosition(coords, pixel) {\n      var fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n      var toLocation = this.projectFlat(coords);\n      var translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n      var newCenter = vec2.add([], this.center, translate);\n\n      var _this$unprojectFlat3 = this.unprojectFlat(newCenter),\n          _this$unprojectFlat4 = _slicedToArray(_this$unprojectFlat3, 2),\n          longitude = _this$unprojectFlat4[0],\n          latitude = _this$unprojectFlat4[1];\n\n      return {\n        longitude: longitude,\n        latitude: latitude\n      };\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var corners = _getBounds(this, options.z || 0);\n\n      return [Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]), Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]), Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]), Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])];\n    }\n  }, {\n    key: \"fitBounds\",\n    value: function fitBounds(bounds) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var width = this.width,\n          height = this.height;\n\n      var _fitBounds2 = _fitBounds(_objectSpread({\n        width: width,\n        height: height,\n        bounds: bounds\n      }, options)),\n          longitude = _fitBounds2.longitude,\n          latitude = _fitBounds2.latitude,\n          zoom = _fitBounds2.zoom;\n\n      return new WebMercatorViewport({\n        width: width,\n        height: height,\n        longitude: longitude,\n        latitude: latitude,\n        zoom: zoom\n      });\n    }\n  }]);\n\n  return WebMercatorViewport;\n}(Viewport);\n\nexport { WebMercatorViewport as default };\nWebMercatorViewport.displayName = 'WebMercatorViewport';","map":{"version":3,"mappings":"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","names":["Viewport","pixelsToWorld","getViewMatrix","addMetersToLngLat","getProjectionParameters","altitudeToFovy","fovyToAltitude","fitBounds","getBounds","vec2","Matrix4","TILE_SIZE","EARTH_CIRCUMFERENCE","DEGREES_TO_RADIANS","Math","PI","unitsPerMeter","latitude","latCosine","cos","WebMercatorViewport","constructor","opts","longitude","zoom","pitch","bearing","nearZMultiplier","farZMultiplier","orthographic","projectionMatrix","repeat","worldOffset","legacyMeterSizes","width","height","altitude","scale","pow","fovy","projectionParameters","viewMatrixUncentered","viewOffset","translate","multiplyLeft","viewMatrix","focalDistance","_subViewports","_pseudoMeters","Object","freeze","length","bounds","minOffset","floor","maxOffset","ceil","x","offsetViewport","push","projectPosition","xyz","projectFlat","X","Y","Z","unprojectPosition","unprojectFlat","lngLatZ","panByPosition","coords","pixel","fromLocation","pixelUnprojectionMatrix","toLocation","add","negate","newCenter","center","options","corners","z","min","max","displayName"],"sources":["../../../src/viewports/web-mercator-viewport.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// View and Projection Matrix calculations for mapbox-js style\n// map view properties\nimport Viewport from './viewport';\n\nimport {\n  pixelsToWorld,\n  getViewMatrix,\n  addMetersToLngLat,\n  getProjectionParameters,\n  altitudeToFovy,\n  fovyToAltitude,\n  fitBounds,\n  getBounds\n} from '@math.gl/web-mercator';\n\n// TODO - import from math.gl\nimport * as vec2 from 'gl-matrix/vec2';\nimport {Matrix4} from '@math.gl/core';\n\nconst TILE_SIZE = 512;\nconst EARTH_CIRCUMFERENCE = 40.03e6;\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction unitsPerMeter(latitude) {\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return TILE_SIZE / EARTH_CIRCUMFERENCE / latCosine;\n}\n\nexport default class WebMercatorViewport extends Viewport {\n  /**\n   * @classdesc\n   * Creates view/projection matrices from mercator params\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  /* eslint-disable complexity, max-statements */\n  constructor(opts = {}) {\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 11,\n      pitch = 0,\n      bearing = 0,\n      nearZMultiplier = 0.1,\n      farZMultiplier = 1.01,\n      orthographic = false,\n      projectionMatrix,\n\n      repeat = false,\n      worldOffset = 0,\n\n      // backward compatibility\n      // TODO: remove in v9\n      legacyMeterSizes = false\n    } = opts;\n\n    let {width, height, altitude = 1.5} = opts;\n    const scale = Math.pow(2, zoom);\n\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    let fovy;\n    let projectionParameters = null;\n    if (projectionMatrix) {\n      altitude = projectionMatrix[5] / 2;\n      fovy = altitudeToFovy(altitude);\n    } else {\n      if (opts.fovy) {\n        fovy = opts.fovy;\n        altitude = fovyToAltitude(fovy);\n      } else {\n        fovy = altitudeToFovy(altitude);\n      }\n      projectionParameters = getProjectionParameters({\n        width,\n        height,\n        pitch,\n        fovy,\n        nearZMultiplier,\n        farZMultiplier\n      });\n    }\n\n    // The uncentered matrix allows us two move the center addition to the\n    // shader (cheap) which gives a coordinate system that has its center in\n    // the layer's center position. This makes rotations and other modelMatrx\n    // transforms much more useful.\n    let viewMatrixUncentered = getViewMatrix({\n      height,\n      pitch,\n      bearing,\n      scale,\n      altitude\n    });\n\n    if (worldOffset) {\n      const viewOffset = new Matrix4().translate([512 * worldOffset, 0, 0]);\n      viewMatrixUncentered = viewOffset.multiplyLeft(viewMatrixUncentered);\n    }\n\n    super({\n      ...opts,\n      // x, y,\n      width,\n      height,\n\n      // view matrix\n      viewMatrix: viewMatrixUncentered,\n      longitude,\n      latitude,\n      zoom,\n\n      // projection matrix parameters\n      ...projectionParameters,\n      fovy,\n      focalDistance: altitude\n    });\n\n    // Save parameters\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n\n    this.orthographic = orthographic;\n\n    this._subViewports = repeat ? [] : null;\n    this._pseudoMeters = legacyMeterSizes;\n\n    Object.freeze(this);\n  }\n  /* eslint-enable complexity, max-statements */\n\n  get subViewports() {\n    if (this._subViewports && !this._subViewports.length) {\n      // Cache sub viewports so that we only calculate them once\n      const bounds = this.getBounds();\n\n      const minOffset = Math.floor((bounds[0] + 180) / 360);\n      const maxOffset = Math.ceil((bounds[2] - 180) / 360);\n\n      for (let x = minOffset; x <= maxOffset; x++) {\n        const offsetViewport = x\n          ? new WebMercatorViewport({\n              ...this,\n              worldOffset: x\n            })\n          : this;\n        this._subViewports.push(offsetViewport);\n      }\n    }\n    return this._subViewports;\n  }\n\n  projectPosition(xyz) {\n    if (this._pseudoMeters) {\n      // Backward compatibility\n      return super.projectPosition(xyz);\n    }\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * unitsPerMeter(xyz[1]);\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    if (this._pseudoMeters) {\n      // Backward compatibility\n      return super.unprojectPosition(xyz);\n    }\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) / unitsPerMeter(Y);\n    return [X, Y, Z];\n  }\n\n  /**\n   * Add a meter delta to a base lnglat coordinate, returning a new lnglat array\n   *\n   * Note: Uses simple linear approximation around the viewport center\n   * Error increases with size of offset (roughly 1% per 100km)\n   *\n   * @param {[Number,Number]|[Number,Number,Number]) lngLatZ - base coordinate\n   * @param {[Number,Number]|[Number,Number,Number]) xyz - array of meter deltas\n   * @return {[Number,Number]|[Number,Number,Number]) array of [lng,lat,z] deltas\n   */\n  addMetersToLngLat(lngLatZ, xyz) {\n    return addMetersToLngLat(lngLatZ, xyz);\n  }\n\n  panByPosition(coords, pixel) {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(coords);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    const [longitude, latitude] = this.unprojectFlat(newCenter);\n    return {longitude, latitude};\n  }\n\n  getBounds(options = {}) {\n    const corners = getBounds(this, options.z || 0);\n\n    return [\n      Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),\n      Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]),\n      Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),\n      Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])\n    ];\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   * @param {Array} bounds - [[lon, lat], [lon, lat]]\n   * @param {Number} [options.padding] - The amount of padding in pixels to add to the given bounds.\n   * @param {Array} [options.offset] - The center of the given bounds relative to the map's center,\n   *    [x, y] measured in pixels.\n   * @returns {WebMercatorViewport}\n   */\n  fitBounds(bounds, options = {}) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds({width, height, bounds, ...options});\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n}\n\nWebMercatorViewport.displayName = 'WebMercatorViewport';\n"]},"metadata":{},"sourceType":"module"}