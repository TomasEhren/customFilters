{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction getStorage(type) {\n  try {\n    var storage = window[type];\n    var x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return storage;\n  } catch (e) {\n    return null;\n  }\n}\n\nvar LocalStorage = /*#__PURE__*/function () {\n  function LocalStorage(id) {\n    _classCallCheck(this, LocalStorage);\n\n    var defaultSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'sessionStorage';\n\n    _defineProperty(this, \"storage\", void 0);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"config\", {});\n\n    this.storage = getStorage(type);\n    this.id = id;\n    this.config = {};\n    Object.assign(this.config, defaultSettings);\n\n    this._loadConfiguration();\n  }\n\n  _createClass(LocalStorage, [{\n    key: \"getConfiguration\",\n    value: function getConfiguration() {\n      return this.config;\n    }\n  }, {\n    key: \"setConfiguration\",\n    value: function setConfiguration(configuration) {\n      this.config = {};\n      return this.updateConfiguration(configuration);\n    }\n  }, {\n    key: \"updateConfiguration\",\n    value: function updateConfiguration(configuration) {\n      Object.assign(this.config, configuration);\n\n      if (this.storage) {\n        var serialized = JSON.stringify(this.config);\n        this.storage.setItem(this.id, serialized);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_loadConfiguration\",\n    value: function _loadConfiguration() {\n      var configuration = {};\n\n      if (this.storage) {\n        var serializedConfiguration = this.storage.getItem(this.id);\n        configuration = serializedConfiguration ? JSON.parse(serializedConfiguration) : {};\n      }\n\n      Object.assign(this.config, configuration);\n      return this;\n    }\n  }]);\n\n  return LocalStorage;\n}();\n\nexport { LocalStorage as default };","map":{"version":3,"mappings":";;;;AAEA,SAASA,UAAT,CAAoBC,IAApB,EAAmC;EACjC,IAAI;IAEF,IAAMC,OAAgB,GAAGC,MAAM,CAACF,IAAD,CAA/B;IACA,IAAMG,CAAC,GAAG,kBAAV;IACAF,OAAO,CAACG,OAARH,CAAgBE,CAAhBF,EAAmBE,CAAnBF;IACAA,OAAO,CAACI,UAARJ,CAAmBE,CAAnBF;IACA,OAAOA,OAAP;EANF,EAOE,OAAOK,CAAP,EAAU;IACV,OAAO,IAAP;EACD;AACF;;IAGoBC,Y;EAKnBC,sBAAYC,EAAZD,EAA4F;IAAA;;IAAA,IAApEE,eAAoE,uEAA7B,EAA6B;IAAA,IAAzBV,IAAyB,uEAAlB,gBAAkB;;IAAAW;;IAAAA;;IAAAA,gCAF9D,EAE8D;;IAC1F,KAAKV,OAAL,GAAeF,UAAU,CAACC,IAAD,CAAzB;IACA,KAAKS,EAAL,GAAUA,EAAV;IACA,KAAKG,MAAL,GAAc,EAAd;IACAC,MAAM,CAACC,MAAPD,CAAc,KAAKD,MAAnBC,EAA2BH,eAA3BG;;IACA,KAAKE,kBAAL;EACD;;;;WAEDC,4BAAmB;MACjB,OAAO,KAAKJ,MAAZ;IACD;;;WAEDK,0BAAiBC,aAAjBD,EAAgC;MAC9B,KAAKL,MAAL,GAAc,EAAd;MACA,OAAO,KAAKO,mBAAL,CAAyBD,aAAzB,CAAP;IACD;;;WAEDC,6BAAoBD,aAApBC,EAAmC;MACjCN,MAAM,CAACC,MAAPD,CAAc,KAAKD,MAAnBC,EAA2BK,aAA3BL;;MACA,IAAI,KAAKZ,OAAT,EAAkB;QAChB,IAAMmB,UAAU,GAAGC,IAAI,CAACC,SAALD,CAAe,KAAKT,MAApBS,CAAnB;QACA,KAAKpB,OAAL,CAAaG,OAAb,CAAqB,KAAKK,EAA1B,EAA8BW,UAA9B;MACD;;MACD,OAAO,IAAP;IACD;;;WAGDL,8BAAqB;MACnB,IAAIG,aAAa,GAAG,EAApB;;MACA,IAAI,KAAKjB,OAAT,EAAkB;QAChB,IAAMsB,uBAAuB,GAAG,KAAKtB,OAAL,CAAauB,OAAb,CAAqB,KAAKf,EAA1B,CAAhC;QACAS,aAAa,GAAGK,uBAAuB,GAAGF,IAAI,CAACI,KAALJ,CAAWE,uBAAXF,CAAH,GAAyC,EAAhFH;MACD;;MACDL,MAAM,CAACC,MAAPD,CAAc,KAAKD,MAAnBC,EAA2BK,aAA3BL;MACA,OAAO,IAAP;IACD;;;;;;SAxCkBN,Y","names":["getStorage","type","storage","window","x","setItem","removeItem","e","LocalStorage","constructor","id","defaultSettings","_defineProperty","config","Object","assign","_loadConfiguration","getConfiguration","setConfiguration","configuration","updateConfiguration","serialized","JSON","stringify","serializedConfiguration","getItem","parse"],"sources":["../../../src/utils/local-storage.ts"],"sourcesContent":["// probe.gl, MIT license\n\nfunction getStorage(type): Storage {\n  try {\n    // @ts-expect-error\n    const storage: Storage = window[type];\n    const x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return storage;\n  } catch (e) {\n    return null;\n  }\n}\n\n// Store keys in local storage via simple interface\nexport default class LocalStorage {\n  storage: Storage;\n  id: string;\n  config: Record<string, any> = {};\n\n  constructor(id: string, defaultSettings: Record<string, any> = {}, type = 'sessionStorage') {\n    this.storage = getStorage(type);\n    this.id = id;\n    this.config = {};\n    Object.assign(this.config, defaultSettings);\n    this._loadConfiguration();\n  }\n\n  getConfiguration() {\n    return this.config;\n  }\n\n  setConfiguration(configuration) {\n    this.config = {};\n    return this.updateConfiguration(configuration);\n  }\n\n  updateConfiguration(configuration) {\n    Object.assign(this.config, configuration);\n    if (this.storage) {\n      const serialized = JSON.stringify(this.config);\n      this.storage.setItem(this.id, serialized);\n    }\n    return this;\n  }\n\n  // Get config from persistent store, if available\n  _loadConfiguration() {\n    let configuration = {};\n    if (this.storage) {\n      const serializedConfiguration = this.storage.getItem(this.id);\n      configuration = serializedConfiguration ? JSON.parse(serializedConfiguration) : {};\n    }\n    Object.assign(this.config, configuration);\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}