{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { createIterable } from '@deck.gl/core';\nimport { getGridOffset } from '../utils/grid-aggregation-utils';\nexport function pointToDensityGridDataCPU(props, aggregationParams) {\n  var hashInfo = pointsToGridHashing(props, aggregationParams);\n  var result = getGridLayerDataFromGridHash(hashInfo);\n  return {\n    gridHash: hashInfo.gridHash,\n    gridOffset: hashInfo.gridOffset,\n    data: result\n  };\n}\n\nfunction pointsToGridHashing(props, aggregationParams) {\n  var _props$data = props.data,\n      data = _props$data === void 0 ? [] : _props$data,\n      cellSize = props.cellSize;\n  var attributes = aggregationParams.attributes,\n      viewport = aggregationParams.viewport,\n      projectPoints = aggregationParams.projectPoints,\n      numInstances = aggregationParams.numInstances;\n  var positions = attributes.positions.value;\n\n  var _attributes$positions = attributes.positions.getAccessor(),\n      size = _attributes$positions.size;\n\n  var boundingBox = aggregationParams.boundingBox || getPositionBoundingBox(attributes.positions, numInstances);\n  var offsets = aggregationParams.posOffset || [180, 90];\n  var gridOffset = aggregationParams.gridOffset || getGridOffset(boundingBox, cellSize);\n\n  if (gridOffset.xOffset <= 0 || gridOffset.yOffset <= 0) {\n    return {\n      gridHash: {},\n      gridOffset: gridOffset\n    };\n  }\n\n  var width = viewport.width,\n      height = viewport.height;\n  var numCol = Math.ceil(width / gridOffset.xOffset);\n  var numRow = Math.ceil(height / gridOffset.yOffset);\n  var gridHash = {};\n\n  var _createIterable = createIterable(data),\n      iterable = _createIterable.iterable,\n      objectInfo = _createIterable.objectInfo;\n\n  var position = new Array(3);\n\n  var _iterator = _createForOfIteratorHelper(iterable),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var pt = _step.value;\n      objectInfo.index++;\n      position[0] = positions[objectInfo.index * size];\n      position[1] = positions[objectInfo.index * size + 1];\n      position[2] = size >= 3 ? positions[objectInfo.index * size + 2] : 0;\n\n      var _ref = projectPoints ? viewport.project(position) : position,\n          _ref2 = _slicedToArray(_ref, 2),\n          x = _ref2[0],\n          y = _ref2[1];\n\n      if (Number.isFinite(x) && Number.isFinite(y)) {\n        var yIndex = Math.floor((y + offsets[1]) / gridOffset.yOffset);\n        var xIndex = Math.floor((x + offsets[0]) / gridOffset.xOffset);\n\n        if (!projectPoints || xIndex >= 0 && xIndex < numCol && yIndex >= 0 && yIndex < numRow) {\n          var key = \"\".concat(yIndex, \"-\").concat(xIndex);\n          gridHash[key] = gridHash[key] || {\n            count: 0,\n            points: [],\n            lonIdx: xIndex,\n            latIdx: yIndex\n          };\n          gridHash[key].count += 1;\n          gridHash[key].points.push({\n            source: pt,\n            index: objectInfo.index\n          });\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    gridHash: gridHash,\n    gridOffset: gridOffset,\n    offsets: [offsets[0] * -1, offsets[1] * -1]\n  };\n}\n\nfunction getGridLayerDataFromGridHash(_ref3) {\n  var gridHash = _ref3.gridHash,\n      gridOffset = _ref3.gridOffset,\n      offsets = _ref3.offsets;\n  var data = new Array(Object.keys(gridHash).length);\n  var i = 0;\n\n  for (var key in gridHash) {\n    var idxs = key.split('-');\n    var latIdx = parseInt(idxs[0], 10);\n    var lonIdx = parseInt(idxs[1], 10);\n    var index = i++;\n    data[index] = _objectSpread({\n      index: index,\n      position: [offsets[0] + gridOffset.xOffset * lonIdx, offsets[1] + gridOffset.yOffset * latIdx]\n    }, gridHash[key]);\n  }\n\n  return data;\n}\n\nfunction getPositionBoundingBox(positionAttribute, numInstance) {\n  var positions = positionAttribute.value;\n\n  var _positionAttribute$ge = positionAttribute.getAccessor(),\n      size = _positionAttribute$ge.size;\n\n  var yMin = Infinity;\n  var yMax = -Infinity;\n  var xMin = Infinity;\n  var xMax = -Infinity;\n  var y;\n  var x;\n\n  for (var i = 0; i < numInstance; i++) {\n    x = positions[i * size];\n    y = positions[i * size + 1];\n\n    if (Number.isFinite(x) && Number.isFinite(y)) {\n      yMin = y < yMin ? y : yMin;\n      yMax = y > yMax ? y : yMax;\n      xMin = x < xMin ? x : xMin;\n      xMax = x > xMax ? x : xMax;\n    }\n  }\n\n  return {\n    xMin: xMin,\n    xMax: xMax,\n    yMin: yMin,\n    yMax: yMax\n  };\n}","map":{"version":3,"mappings":"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","names":["createIterable","getGridOffset","pointToDensityGridDataCPU","props","aggregationParams","hashInfo","pointsToGridHashing","result","getGridLayerDataFromGridHash","gridHash","gridOffset","data","cellSize","attributes","viewport","projectPoints","numInstances","positions","value","getAccessor","size","boundingBox","getPositionBoundingBox","offsets","posOffset","xOffset","yOffset","width","height","numCol","Math","ceil","numRow","iterable","objectInfo","position","Array","pt","index","project","x","y","Number","isFinite","yIndex","floor","xIndex","key","count","points","lonIdx","latIdx","push","source","Object","keys","length","i","idxs","split","parseInt","positionAttribute","numInstance","yMin","Infinity","yMax","xMin","xMax"],"sources":["../../../src/cpu-grid-layer/grid-aggregator.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {createIterable} from '@deck.gl/core';\nimport {getGridOffset} from '../utils/grid-aggregation-utils';\n\n/**\n * Calculate density grid from an array of points\n * @param {Object} props - object containing :\n * @param {Iterable} [props.data] - data objects to be aggregated\n * @param {Integer} [props.cellSize] - size of the grid cell\n *\n * @param {Object} aggregationParams - object containing :\n * @param {Object} gridOffset - {xOffset, yOffset} cell size in meters\n * @param {Integer} width - width of the grid\n * @param {Integer} height - height of the grid\n * @param {Boolean} projectPoints - `true` if doing screen space projection, `false` otherwise\n * @param {Array} attributes - attributes array containing position values\n * @param {Viewport} viewport - viewport to be used for projection\n * @param {Array} posOffset - [xOffset, yOffset] offset to be applied to positions to get cell index\n * @param {Object} boundingBox - {xMin, yMin, xMax, yMax} bounding box of input data\n *\n * @returns {object} - grid data, cell dimension\n */\nexport function pointToDensityGridDataCPU(props, aggregationParams) {\n  const hashInfo = pointsToGridHashing(props, aggregationParams);\n  const result = getGridLayerDataFromGridHash(hashInfo);\n\n  return {\n    gridHash: hashInfo.gridHash,\n    gridOffset: hashInfo.gridOffset,\n    data: result\n  };\n}\n\n/**\n * Project points into each cell, return a hash table of cells\n * @param {Iterable} points\n * @param {number} cellSize - unit size in meters\n * @param {function} getPosition - position accessor\n * @returns {object} - grid hash and cell dimension\n */\n/* eslint-disable max-statements, complexity */\nfunction pointsToGridHashing(props, aggregationParams) {\n  const {data = [], cellSize} = props;\n  const {attributes, viewport, projectPoints, numInstances} = aggregationParams;\n  const positions = attributes.positions.value;\n  const {size} = attributes.positions.getAccessor();\n  const boundingBox =\n    aggregationParams.boundingBox || getPositionBoundingBox(attributes.positions, numInstances);\n  const offsets = aggregationParams.posOffset || [180, 90];\n  const gridOffset = aggregationParams.gridOffset || getGridOffset(boundingBox, cellSize);\n\n  if (gridOffset.xOffset <= 0 || gridOffset.yOffset <= 0) {\n    return {gridHash: {}, gridOffset};\n  }\n\n  const {width, height} = viewport;\n  const numCol = Math.ceil(width / gridOffset.xOffset);\n  const numRow = Math.ceil(height / gridOffset.yOffset);\n\n  // calculate count per cell\n  const gridHash = {};\n\n  const {iterable, objectInfo} = createIterable(data);\n  const position = new Array(3);\n  for (const pt of iterable) {\n    objectInfo.index++;\n    position[0] = positions[objectInfo.index * size];\n    position[1] = positions[objectInfo.index * size + 1];\n    position[2] = size >= 3 ? positions[objectInfo.index * size + 2] : 0;\n    const [x, y] = projectPoints ? viewport.project(position) : position;\n    if (Number.isFinite(x) && Number.isFinite(y)) {\n      const yIndex = Math.floor((y + offsets[1]) / gridOffset.yOffset);\n      const xIndex = Math.floor((x + offsets[0]) / gridOffset.xOffset);\n      if (\n        !projectPoints ||\n        // when doing screen space agggregation (projectPoints = true), filter points outside of the viewport range.\n        (xIndex >= 0 && xIndex < numCol && yIndex >= 0 && yIndex < numRow)\n      ) {\n        const key = `${yIndex}-${xIndex}`;\n\n        gridHash[key] = gridHash[key] || {count: 0, points: [], lonIdx: xIndex, latIdx: yIndex};\n        gridHash[key].count += 1;\n        gridHash[key].points.push({\n          source: pt,\n          index: objectInfo.index\n        });\n      }\n    }\n  }\n\n  return {gridHash, gridOffset, offsets: [offsets[0] * -1, offsets[1] * -1]};\n}\n/* eslint-enable max-statements, complexity */\n\nfunction getGridLayerDataFromGridHash({gridHash, gridOffset, offsets}) {\n  const data = new Array(Object.keys(gridHash).length);\n  let i = 0;\n  for (const key in gridHash) {\n    const idxs = key.split('-');\n    const latIdx = parseInt(idxs[0], 10);\n    const lonIdx = parseInt(idxs[1], 10);\n    const index = i++;\n\n    data[index] = {\n      index,\n      position: [\n        offsets[0] + gridOffset.xOffset * lonIdx,\n        offsets[1] + gridOffset.yOffset * latIdx\n      ],\n      ...gridHash[key]\n    };\n  }\n  return data;\n}\n\n// Calculate bounding box of position attribute\nfunction getPositionBoundingBox(positionAttribute, numInstance) {\n  // TODO - value might not exist (e.g. attribute transition)\n  const positions = positionAttribute.value;\n  const {size} = positionAttribute.getAccessor();\n\n  let yMin = Infinity;\n  let yMax = -Infinity;\n  let xMin = Infinity;\n  let xMax = -Infinity;\n  let y;\n  let x;\n\n  for (let i = 0; i < numInstance; i++) {\n    x = positions[i * size];\n    y = positions[i * size + 1];\n    if (Number.isFinite(x) && Number.isFinite(y)) {\n      yMin = y < yMin ? y : yMin;\n      yMax = y > yMax ? y : yMax;\n      xMin = x < xMin ? x : xMin;\n      xMax = x > xMax ? x : xMax;\n    }\n  }\n\n  return {xMin, xMax, yMin, yMax};\n}\n"]},"metadata":{},"sourceType":"module"}