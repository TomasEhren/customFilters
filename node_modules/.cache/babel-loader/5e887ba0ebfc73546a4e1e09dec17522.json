{"ast":null,"code":"import _toConsumableArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport React, { createElement } from 'react';\nimport { inheritsFrom } from './inherits-from';\nimport { Layer, View } from '@deck.gl/core';\n\nfunction wrapInView(node) {\n  if (!node) {\n    return node;\n  }\n\n  if (typeof node === 'function') {\n    return createElement(View, {}, node);\n  }\n\n  if (Array.isArray(node)) {\n    return node.map(wrapInView);\n  }\n\n  if (node.type === React.Fragment) {\n    return wrapInView(node.props.children);\n  }\n\n  if (inheritsFrom(node.type, View)) {\n    return node;\n  }\n\n  return node;\n}\n\nexport default function extractJSXLayers(_ref) {\n  var children = _ref.children,\n      layers = _ref.layers,\n      views = _ref.views;\n  var reactChildren = [];\n  var jsxLayers = [];\n  var jsxViews = {};\n  React.Children.forEach(wrapInView(children), function (reactElement) {\n    if (reactElement) {\n      var ElementType = reactElement.type;\n\n      if (inheritsFrom(ElementType, Layer)) {\n        var layer = createLayer(ElementType, reactElement.props);\n        jsxLayers.push(layer);\n      } else {\n        reactChildren.push(reactElement);\n      }\n\n      if (ElementType !== View && inheritsFrom(ElementType, View) && reactElement.props.id) {\n        var view = new ElementType(reactElement.props);\n        jsxViews[view.id] = view;\n      }\n    }\n  });\n\n  if (Object.keys(jsxViews).length > 0) {\n    if (Array.isArray(views)) {\n      views.forEach(function (view) {\n        jsxViews[view.id] = view;\n      });\n    } else if (views) {\n      jsxViews[views.id] = views;\n    }\n\n    views = Object.values(jsxViews);\n  }\n\n  layers = jsxLayers.length > 0 ? [].concat(jsxLayers, _toConsumableArray(layers)) : layers;\n  return {\n    layers: layers,\n    children: reactChildren,\n    views: views\n  };\n}\n\nfunction createLayer(LayerType, reactProps) {\n  var props = {};\n  var defaultProps = LayerType.defaultProps || {};\n\n  for (var key in reactProps) {\n    if (defaultProps[key] !== reactProps[key]) {\n      props[key] = reactProps[key];\n    }\n  }\n\n  return new LayerType(props);\n}","map":{"version":3,"mappings":"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","names":["React","createElement","inheritsFrom","Layer","View","wrapInView","node","Array","isArray","map","type","Fragment","props","children","extractJSXLayers","layers","views","reactChildren","jsxLayers","jsxViews","Children","forEach","reactElement","ElementType","layer","createLayer","push","id","view","Object","keys","length","values","LayerType","reactProps","defaultProps","key"],"sources":["../../../src/utils/extract-jsx-layers.js"],"sourcesContent":["import React, {createElement} from 'react';\nimport {inheritsFrom} from './inherits-from';\nimport {Layer, View} from '@deck.gl/core';\n\n// recursively wrap render callbacks in `View`\nfunction wrapInView(node) {\n  if (!node) {\n    return node;\n  }\n  if (typeof node === 'function') {\n    // React.Children does not traverse functions.\n    // All render callbacks must be protected under a <View>\n    return createElement(View, {}, node);\n  }\n  if (Array.isArray(node)) {\n    return node.map(wrapInView);\n  }\n  if (node.type === React.Fragment) {\n    return wrapInView(node.props.children);\n  }\n  if (inheritsFrom(node.type, View)) {\n    return node;\n  }\n  return node;\n}\n\n// extracts any deck.gl layers masquerading as react elements from props.children\nexport default function extractJSXLayers({children, layers, views}) {\n  const reactChildren = []; // extract real react elements (i.e. not deck.gl layers)\n  const jsxLayers = []; // extracted layer from react children, will add to deck.gl layer array\n  const jsxViews = {};\n\n  // React.children\n  React.Children.forEach(wrapInView(children), reactElement => {\n    if (reactElement) {\n      // For some reason Children.forEach doesn't filter out `null`s\n      const ElementType = reactElement.type;\n      if (inheritsFrom(ElementType, Layer)) {\n        const layer = createLayer(ElementType, reactElement.props);\n        jsxLayers.push(layer);\n      } else {\n        reactChildren.push(reactElement);\n      }\n\n      // empty id => default view\n      if (ElementType !== View && inheritsFrom(ElementType, View) && reactElement.props.id) {\n        const view = new ElementType(reactElement.props);\n        jsxViews[view.id] = view;\n      }\n    }\n  });\n\n  // Avoid modifying views if no JSX views were found\n  if (Object.keys(jsxViews).length > 0) {\n    // If a view is specified in both views prop and JSX, use the one in views\n    if (Array.isArray(views)) {\n      views.forEach(view => {\n        jsxViews[view.id] = view;\n      });\n    } else if (views) {\n      jsxViews[views.id] = views;\n    }\n    views = Object.values(jsxViews);\n  }\n\n  // Avoid modifying layers array if no JSX layers were found\n  layers = jsxLayers.length > 0 ? [...jsxLayers, ...layers] : layers;\n\n  return {layers, children: reactChildren, views};\n}\n\nfunction createLayer(LayerType, reactProps) {\n  const props = {};\n  // Layer.defaultProps is treated as ReactElement.defaultProps and merged into react props\n  // Remove them\n  const defaultProps = LayerType.defaultProps || {};\n  for (const key in reactProps) {\n    if (defaultProps[key] !== reactProps[key]) {\n      props[key] = reactProps[key];\n    }\n  }\n  return new LayerType(props);\n}\n"]},"metadata":{},"sourceType":"module"}