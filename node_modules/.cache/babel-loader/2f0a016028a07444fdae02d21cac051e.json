{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { Tiles3DLoader } from './tiles-3d-loader';\nimport { getIonTilesetMetadata } from './lib/ion/ion';\n\nfunction preload(_x) {\n  return _preload.apply(this, arguments);\n}\n\nfunction _preload() {\n  _preload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url) {\n    var options,\n        _options,\n        accessToken,\n        assetId,\n        matched,\n        _args2 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n            options = options['cesium-ion'] || {};\n            _options = options, accessToken = _options.accessToken;\n            assetId = options.assetId;\n\n            if (!Number.isFinite(assetId)) {\n              matched = url.match(/\\/([0-9]+)\\/tileset.json/);\n              assetId = matched && matched[1];\n            }\n\n            return _context2.abrupt(\"return\", getIonTilesetMetadata(accessToken, assetId));\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _preload.apply(this, arguments);\n}\n\nexport var CesiumIonLoader = _objectSpread(_objectSpread({}, Tiles3DLoader), {}, {\n  id: 'cesium-ion',\n  name: 'Cesium Ion',\n  preload: preload,\n  parse: function () {\n    var _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, options, context) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _objectSpread({}, options);\n              options['3d-tiles'] = options['cesium-ion'];\n              options.loader = CesiumIonLoader;\n              return _context.abrupt(\"return\", Tiles3DLoader.parse(data, options, context));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function parse(_x2, _x3, _x4) {\n      return _parse.apply(this, arguments);\n    }\n\n    return parse;\n  }(),\n  options: {\n    'cesium-ion': _objectSpread(_objectSpread({}, Tiles3DLoader.options['3d-tiles']), {}, {\n      accessToken: null\n    })\n  }\n});","map":{"version":3,"mappings":";;;AACA,SAAQA,aAAR,QAA4B,mBAA5B;AACA,SAAQC,qBAAR,QAAoC,eAApC;;SAEeC,O;;;;;sEAAf,kBAAuBC,GAAvB;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;;IAAA;MAAA;QAAA;UAAA;YAA4BC,OAA5B,8DAAsC,EAAtC;YACEA,OAAO,GAAGA,OAAO,CAAC,YAAD,CAAPA,IAAyB,EAAnCA;YADF,WAGwBA,OAHxB,EAGSC,WAHT,YAGSA,WAHT;YAKMC,OALN,GAKgBF,OAAO,CAACE,OALxB;;YAME,IAAI,CAACC,MAAM,CAACC,QAAPD,CAAgBD,OAAhBC,CAAL,EAA+B;cACvBE,OADuB,GACbN,GAAG,CAACO,KAAJP,CAAU,0BAAVA,CADa;cAE7BG,OAAO,GAAGG,OAAO,IAAIA,OAAO,CAAC,CAAD,CAA5BH;YACD;;YATH,kCAUSL,qBAAqB,CAACI,WAAD,EAAcC,OAAd,CAV9B;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAgBA,OAAO,IAAMK,eAAiC,mCACzCX,aADyC;EAE5CY,EAAE,EAAE,YAFwC;EAG5CC,IAAI,EAAE,YAHsC;EAK5CX,OAL+C,EAK/CA,OAL4C;EAM5CY,KAAK;IAAA,sEAAE,iBAAOC,IAAP,EAAaX,OAAb,EAAuBY,OAAvB;MAAA;QAAA;UAAA;YAAA;cACLZ,OAAO,qBAAOA,OAAP,CAAPA;cACAA,OAAO,CAAC,UAAD,CAAPA,GAAsBA,OAAO,CAAC,YAAD,CAA7BA;cAEAA,OAAO,CAACa,MAARb,GAAiBO,eAAjBP;cAJK,iCAKEJ,aAAa,CAACc,KAAdd,CAAoBe,IAApBf,EAA0BI,OAA1BJ,EAAmCgB,OAAnChB,CALF;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAF;;IAAA;MAAA;IAAA;;IAAA;EAAA,GANuC;EAa5CI,OAAO,EAAE;IACP,8CACKJ,aAAa,CAACI,OAAdJ,CAAsB,UAAtBA,CADL;MAEEK,WAAW,EAAE;IAFf;EADO;AAbmC,EAAvC","names":["Tiles3DLoader","getIonTilesetMetadata","preload","url","options","accessToken","assetId","Number","isFinite","matched","match","CesiumIonLoader","id","name","parse","data","context","loader"],"sources":["../../src/cesium-ion-loader.ts"],"sourcesContent":["import type {LoaderWithParser} from '@loaders.gl/loader-utils';\nimport {Tiles3DLoader} from './tiles-3d-loader';\nimport {getIonTilesetMetadata} from './lib/ion/ion';\n\nasync function preload(url, options = {}) {\n  options = options['cesium-ion'] || {};\n  // @ts-ignore\n  const {accessToken} = options;\n  // @ts-ignore\n  let assetId = options.assetId;\n  if (!Number.isFinite(assetId)) {\n    const matched = url.match(/\\/([0-9]+)\\/tileset.json/);\n    assetId = matched && matched[1];\n  }\n  return getIonTilesetMetadata(accessToken, assetId);\n}\n\n/**\n * Loader for 3D tiles from Cesium ION\n */\nexport const CesiumIonLoader: LoaderWithParser = {\n  ...Tiles3DLoader,\n  id: 'cesium-ion',\n  name: 'Cesium Ion',\n  // @ts-ignore\n  preload,\n  parse: async (data, options?, context?) => {\n    options = {...options};\n    options['3d-tiles'] = options['cesium-ion'];\n    // @ts-ignore\n    options.loader = CesiumIonLoader;\n    return Tiles3DLoader.parse(data, options, context); // , loader);\n  },\n  options: {\n    'cesium-ion': {\n      ...Tiles3DLoader.options['3d-tiles'],\n      accessToken: null\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}