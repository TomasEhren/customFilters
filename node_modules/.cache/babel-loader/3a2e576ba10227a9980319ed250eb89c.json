{"ast":null,"code":"import _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { isWebGL2, assertWebGL2Context, withParameters, log } from '@luma.gl/gltools';\nimport { global } from 'probe.gl/env';\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport { TEXTURE_FORMATS, DATA_FORMAT_CHANNELS, TYPE_SIZES, isFormatSupported, isLinearFilteringSupported } from './texture-formats';\nimport { assert } from '../utils/assert';\nimport { uid, isPowerOfTwo } from '../utils/utils';\nvar NPOT_MIN_FILTERS = [9729, 9728];\n\nvar WebGLBuffer = global.WebGLBuffer || function WebGLBuffer() {};\n\nvar Texture = /*#__PURE__*/function (_Resource) {\n  _inherits(Texture, _Resource);\n\n  var _super = _createSuper(Texture);\n\n  function Texture(gl, props) {\n    var _this;\n\n    _classCallCheck(this, Texture);\n\n    var _props$id = props.id,\n        id = _props$id === void 0 ? uid('texture') : _props$id,\n        handle = props.handle,\n        target = props.target;\n    _this = _super.call(this, gl, {\n      id: id,\n      handle: handle\n    });\n    _this.target = target;\n    _this.textureUnit = undefined;\n    _this.loaded = false;\n    _this.width = undefined;\n    _this.height = undefined;\n    _this.depth = undefined;\n    _this.format = undefined;\n    _this.type = undefined;\n    _this.dataFormat = undefined;\n    _this.border = undefined;\n    _this.textureUnit = undefined;\n    _this.mipmaps = undefined;\n    return _this;\n  }\n\n  _createClass(Texture, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"Texture(\".concat(this.id, \",\").concat(this.width, \"x\").concat(this.height, \")\");\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      var _this2 = this;\n\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var data = props.data;\n\n      if (data instanceof Promise) {\n        data.then(function (resolvedImageData) {\n          return _this2.initialize(Object.assign({}, props, {\n            pixels: resolvedImageData,\n            data: resolvedImageData\n          }));\n        });\n        return this;\n      }\n\n      var isVideo = typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement;\n\n      if (isVideo && data.readyState < HTMLVideoElement.HAVE_METADATA) {\n        this._video = null;\n        data.addEventListener('loadeddata', function () {\n          return _this2.initialize(props);\n        });\n        return this;\n      }\n\n      var _props$pixels = props.pixels,\n          pixels = _props$pixels === void 0 ? null : _props$pixels,\n          _props$format = props.format,\n          format = _props$format === void 0 ? 6408 : _props$format,\n          _props$border = props.border,\n          border = _props$border === void 0 ? 0 : _props$border,\n          _props$recreate = props.recreate,\n          recreate = _props$recreate === void 0 ? false : _props$recreate,\n          _props$parameters = props.parameters,\n          parameters = _props$parameters === void 0 ? {} : _props$parameters,\n          _props$pixelStore = props.pixelStore,\n          pixelStore = _props$pixelStore === void 0 ? {} : _props$pixelStore,\n          _props$textureUnit = props.textureUnit,\n          textureUnit = _props$textureUnit === void 0 ? undefined : _props$textureUnit;\n\n      if (!data) {\n        data = pixels;\n      }\n\n      var width = props.width,\n          height = props.height,\n          dataFormat = props.dataFormat,\n          type = props.type,\n          _props$compressed = props.compressed,\n          compressed = _props$compressed === void 0 ? false : _props$compressed,\n          _props$mipmaps = props.mipmaps,\n          mipmaps = _props$mipmaps === void 0 ? true : _props$mipmaps;\n      var _props$depth = props.depth,\n          depth = _props$depth === void 0 ? 0 : _props$depth;\n\n      var _this$_deduceParamete = this._deduceParameters({\n        format: format,\n        type: type,\n        dataFormat: dataFormat,\n        compressed: compressed,\n        data: data,\n        width: width,\n        height: height\n      });\n\n      width = _this$_deduceParamete.width;\n      height = _this$_deduceParamete.height;\n      compressed = _this$_deduceParamete.compressed;\n      dataFormat = _this$_deduceParamete.dataFormat;\n      type = _this$_deduceParamete.type;\n      this.width = width;\n      this.height = height;\n      this.depth = depth;\n      this.format = format;\n      this.type = type;\n      this.dataFormat = dataFormat;\n      this.border = border;\n      this.textureUnit = textureUnit;\n\n      if (Number.isFinite(this.textureUnit)) {\n        this.gl.activeTexture(33984 + this.textureUnit);\n        this.gl.bindTexture(this.target, this.handle);\n      }\n\n      if (mipmaps && this._isNPOT()) {\n        log.warn(\"texture: \".concat(this, \" is Non-Power-Of-Two, disabling mipmaping\"))();\n        mipmaps = false;\n\n        this._updateForNPOT(parameters);\n      }\n\n      this.mipmaps = mipmaps;\n      this.setImageData({\n        data: data,\n        width: width,\n        height: height,\n        depth: depth,\n        format: format,\n        type: type,\n        dataFormat: dataFormat,\n        border: border,\n        mipmaps: mipmaps,\n        parameters: pixelStore,\n        compressed: compressed\n      });\n\n      if (mipmaps) {\n        this.generateMipmap();\n      }\n\n      this.setParameters(parameters);\n\n      if (recreate) {\n        this.data = data;\n      }\n\n      if (isVideo) {\n        this._video = {\n          video: data,\n          parameters: parameters,\n          lastTime: data.readyState >= HTMLVideoElement.HAVE_CURRENT_DATA ? data.currentTime : -1\n        };\n      }\n\n      return this;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (this._video) {\n        var _this$_video = this._video,\n            video = _this$_video.video,\n            parameters = _this$_video.parameters,\n            lastTime = _this$_video.lastTime;\n\n        if (lastTime === video.currentTime || video.readyState < HTMLVideoElement.HAVE_CURRENT_DATA) {\n          return;\n        }\n\n        this.setSubImageData({\n          data: video,\n          parameters: parameters\n        });\n\n        if (this.mipmaps) {\n          this.generateMipmap();\n        }\n\n        this._video.lastTime = video.currentTime;\n      }\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(_ref) {\n      var height = _ref.height,\n          width = _ref.width,\n          _ref$mipmaps = _ref.mipmaps,\n          mipmaps = _ref$mipmaps === void 0 ? false : _ref$mipmaps;\n\n      if (width !== this.width || height !== this.height) {\n        return this.initialize({\n          width: width,\n          height: height,\n          format: this.format,\n          type: this.type,\n          dataFormat: this.dataFormat,\n          border: this.border,\n          mipmaps: mipmaps\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"generateMipmap\",\n    value: function generateMipmap() {\n      var _this3 = this;\n\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (this._isNPOT()) {\n        log.warn(\"texture: \".concat(this, \" is Non-Power-Of-Two, disabling mipmaping\"))();\n        return this;\n      }\n\n      this.mipmaps = true;\n      this.gl.bindTexture(this.target, this.handle);\n      withParameters(this.gl, params, function () {\n        _this3.gl.generateMipmap(_this3.target);\n      });\n      this.gl.bindTexture(this.target, null);\n      return this;\n    }\n  }, {\n    key: \"setImageData\",\n    value: function setImageData(options) {\n      this._trackDeallocatedMemory('Texture');\n\n      var _options$target = options.target,\n          target = _options$target === void 0 ? this.target : _options$target,\n          _options$pixels = options.pixels,\n          pixels = _options$pixels === void 0 ? null : _options$pixels,\n          _options$level = options.level,\n          level = _options$level === void 0 ? 0 : _options$level,\n          _options$format = options.format,\n          format = _options$format === void 0 ? this.format : _options$format,\n          _options$border = options.border,\n          border = _options$border === void 0 ? this.border : _options$border,\n          _options$offset = options.offset,\n          offset = _options$offset === void 0 ? 0 : _options$offset,\n          _options$parameters = options.parameters,\n          parameters = _options$parameters === void 0 ? {} : _options$parameters;\n      var _options$data = options.data,\n          data = _options$data === void 0 ? null : _options$data,\n          _options$type = options.type,\n          type = _options$type === void 0 ? this.type : _options$type,\n          _options$width = options.width,\n          width = _options$width === void 0 ? this.width : _options$width,\n          _options$height = options.height,\n          height = _options$height === void 0 ? this.height : _options$height,\n          _options$dataFormat = options.dataFormat,\n          dataFormat = _options$dataFormat === void 0 ? this.dataFormat : _options$dataFormat,\n          _options$compressed = options.compressed,\n          compressed = _options$compressed === void 0 ? false : _options$compressed;\n\n      if (!data) {\n        data = pixels;\n      }\n\n      var _this$_deduceParamete2 = this._deduceParameters({\n        format: format,\n        type: type,\n        dataFormat: dataFormat,\n        compressed: compressed,\n        data: data,\n        width: width,\n        height: height\n      });\n\n      type = _this$_deduceParamete2.type;\n      dataFormat = _this$_deduceParamete2.dataFormat;\n      compressed = _this$_deduceParamete2.compressed;\n      width = _this$_deduceParamete2.width;\n      height = _this$_deduceParamete2.height;\n      var gl = this.gl;\n      gl.bindTexture(this.target, this.handle);\n      var dataType = null;\n\n      var _this$_getDataType = this._getDataType({\n        data: data,\n        compressed: compressed\n      });\n\n      data = _this$_getDataType.data;\n      dataType = _this$_getDataType.dataType;\n      var gl2;\n      withParameters(this.gl, parameters, function () {\n        switch (dataType) {\n          case 'null':\n            gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n            break;\n\n          case 'typed-array':\n            gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data, offset);\n            break;\n\n          case 'buffer':\n            gl2 = assertWebGL2Context(gl);\n            gl2.bindBuffer(35052, data.handle || data);\n            gl2.texImage2D(target, level, format, width, height, border, dataFormat, type, offset);\n            gl2.bindBuffer(35052, null);\n            break;\n\n          case 'browser-object':\n            if (isWebGL2(gl)) {\n              gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n            } else {\n              gl.texImage2D(target, level, format, dataFormat, type, data);\n            }\n\n            break;\n\n          case 'compressed':\n            var _iterator = _createForOfIteratorHelper(data.entries()),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var _step$value = _slicedToArray(_step.value, 2),\n                    levelIndex = _step$value[0],\n                    levelData = _step$value[1];\n\n                gl.compressedTexImage2D(target, levelIndex, levelData.format, levelData.width, levelData.height, border, levelData.data);\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n            break;\n\n          default:\n            assert(false, 'Unknown image data type');\n        }\n      });\n\n      if (data && data.byteLength) {\n        this._trackAllocatedMemory(data.byteLength, 'Texture');\n      } else {\n        var channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n        var channelSize = TYPE_SIZES[this.type] || 1;\n\n        this._trackAllocatedMemory(this.width * this.height * channels * channelSize, 'Texture');\n      }\n\n      this.loaded = true;\n      return this;\n    }\n  }, {\n    key: \"setSubImageData\",\n    value: function setSubImageData(_ref2) {\n      var _this4 = this;\n\n      var _ref2$target = _ref2.target,\n          target = _ref2$target === void 0 ? this.target : _ref2$target,\n          _ref2$pixels = _ref2.pixels,\n          pixels = _ref2$pixels === void 0 ? null : _ref2$pixels,\n          _ref2$data = _ref2.data,\n          data = _ref2$data === void 0 ? null : _ref2$data,\n          _ref2$x = _ref2.x,\n          x = _ref2$x === void 0 ? 0 : _ref2$x,\n          _ref2$y = _ref2.y,\n          y = _ref2$y === void 0 ? 0 : _ref2$y,\n          _ref2$width = _ref2.width,\n          width = _ref2$width === void 0 ? this.width : _ref2$width,\n          _ref2$height = _ref2.height,\n          height = _ref2$height === void 0 ? this.height : _ref2$height,\n          _ref2$level = _ref2.level,\n          level = _ref2$level === void 0 ? 0 : _ref2$level,\n          _ref2$format = _ref2.format,\n          format = _ref2$format === void 0 ? this.format : _ref2$format,\n          _ref2$type = _ref2.type,\n          type = _ref2$type === void 0 ? this.type : _ref2$type,\n          _ref2$dataFormat = _ref2.dataFormat,\n          dataFormat = _ref2$dataFormat === void 0 ? this.dataFormat : _ref2$dataFormat,\n          _ref2$compressed = _ref2.compressed,\n          compressed = _ref2$compressed === void 0 ? false : _ref2$compressed,\n          _ref2$offset = _ref2.offset,\n          offset = _ref2$offset === void 0 ? 0 : _ref2$offset,\n          _ref2$border = _ref2.border,\n          border = _ref2$border === void 0 ? this.border : _ref2$border,\n          _ref2$parameters = _ref2.parameters,\n          parameters = _ref2$parameters === void 0 ? {} : _ref2$parameters;\n\n      var _this$_deduceParamete3 = this._deduceParameters({\n        format: format,\n        type: type,\n        dataFormat: dataFormat,\n        compressed: compressed,\n        data: data,\n        width: width,\n        height: height\n      });\n\n      type = _this$_deduceParamete3.type;\n      dataFormat = _this$_deduceParamete3.dataFormat;\n      compressed = _this$_deduceParamete3.compressed;\n      width = _this$_deduceParamete3.width;\n      height = _this$_deduceParamete3.height;\n      assert(this.depth === 0, 'texSubImage not supported for 3D textures');\n\n      if (!data) {\n        data = pixels;\n      }\n\n      if (data && data.data) {\n        var ndarray = data;\n        data = ndarray.data;\n        width = ndarray.shape[0];\n        height = ndarray.shape[1];\n      }\n\n      if (data instanceof Buffer) {\n        data = data.handle;\n      }\n\n      this.gl.bindTexture(this.target, this.handle);\n      withParameters(this.gl, parameters, function () {\n        if (compressed) {\n          _this4.gl.compressedTexSubImage2D(target, level, x, y, width, height, format, data);\n        } else if (data === null) {\n          _this4.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, null);\n        } else if (ArrayBuffer.isView(data)) {\n          _this4.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data, offset);\n        } else if (data instanceof WebGLBuffer) {\n          var gl2 = assertWebGL2Context(_this4.gl);\n          gl2.bindBuffer(35052, data);\n          gl2.texSubImage2D(target, level, x, y, width, height, dataFormat, type, offset);\n          gl2.bindBuffer(35052, null);\n        } else if (isWebGL2(_this4.gl)) {\n          var _gl = assertWebGL2Context(_this4.gl);\n\n          _gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data);\n        } else {\n          _this4.gl.texSubImage2D(target, level, x, y, dataFormat, type, data);\n        }\n      });\n      this.gl.bindTexture(this.target, null);\n    }\n  }, {\n    key: \"copyFramebuffer\",\n    value: function copyFramebuffer() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      log.error('Texture.copyFramebuffer({...}) is no logner supported, use copyToTexture(source, target, opts})')();\n      return null;\n    }\n  }, {\n    key: \"getActiveUnit\",\n    value: function getActiveUnit() {\n      return this.gl.getParameter(34016) - 33984;\n    }\n  }, {\n    key: \"bind\",\n    value: function bind() {\n      var textureUnit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.textureUnit;\n      var gl = this.gl;\n\n      if (textureUnit !== undefined) {\n        this.textureUnit = textureUnit;\n        gl.activeTexture(33984 + textureUnit);\n      }\n\n      gl.bindTexture(this.target, this.handle);\n      return textureUnit;\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      var textureUnit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.textureUnit;\n      var gl = this.gl;\n\n      if (textureUnit !== undefined) {\n        this.textureUnit = textureUnit;\n        gl.activeTexture(33984 + textureUnit);\n      }\n\n      gl.bindTexture(this.target, null);\n      return textureUnit;\n    }\n  }, {\n    key: \"_getDataType\",\n    value: function _getDataType(_ref3) {\n      var data = _ref3.data,\n          _ref3$compressed = _ref3.compressed,\n          compressed = _ref3$compressed === void 0 ? false : _ref3$compressed;\n\n      if (compressed) {\n        return {\n          data: data,\n          dataType: 'compressed'\n        };\n      }\n\n      if (data === null) {\n        return {\n          data: data,\n          dataType: 'null'\n        };\n      }\n\n      if (ArrayBuffer.isView(data)) {\n        return {\n          data: data,\n          dataType: 'typed-array'\n        };\n      }\n\n      if (data instanceof Buffer) {\n        return {\n          data: data.handle,\n          dataType: 'buffer'\n        };\n      }\n\n      if (data instanceof WebGLBuffer) {\n        return {\n          data: data,\n          dataType: 'buffer'\n        };\n      }\n\n      return {\n        data: data,\n        dataType: 'browser-object'\n      };\n    }\n  }, {\n    key: \"_deduceParameters\",\n    value: function _deduceParameters(opts) {\n      var format = opts.format,\n          data = opts.data;\n      var width = opts.width,\n          height = opts.height,\n          dataFormat = opts.dataFormat,\n          type = opts.type,\n          compressed = opts.compressed;\n      var textureFormat = TEXTURE_FORMATS[format];\n      dataFormat = dataFormat || textureFormat && textureFormat.dataFormat;\n      type = type || textureFormat && textureFormat.types[0];\n      compressed = compressed || textureFormat && textureFormat.compressed;\n\n      var _this$_deduceImageSiz = this._deduceImageSize(data, width, height);\n\n      width = _this$_deduceImageSiz.width;\n      height = _this$_deduceImageSiz.height;\n      return {\n        dataFormat: dataFormat,\n        type: type,\n        compressed: compressed,\n        width: width,\n        height: height,\n        format: format,\n        data: data\n      };\n    }\n  }, {\n    key: \"_deduceImageSize\",\n    value: function _deduceImageSize(data, width, height) {\n      var size;\n\n      if (typeof ImageData !== 'undefined' && data instanceof ImageData) {\n        size = {\n          width: data.width,\n          height: data.height\n        };\n      } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {\n        size = {\n          width: data.naturalWidth,\n          height: data.naturalHeight\n        };\n      } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {\n        size = {\n          width: data.width,\n          height: data.height\n        };\n      } else if (typeof ImageBitmap !== 'undefined' && data instanceof ImageBitmap) {\n        size = {\n          width: data.width,\n          height: data.height\n        };\n      } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {\n        size = {\n          width: data.videoWidth,\n          height: data.videoHeight\n        };\n      } else if (!data) {\n        size = {\n          width: width >= 0 ? width : 1,\n          height: height >= 0 ? height : 1\n        };\n      } else {\n        size = {\n          width: width,\n          height: height\n        };\n      }\n\n      assert(size, 'Could not deduced texture size');\n      assert(width === undefined || size.width === width, 'Deduced texture width does not match supplied width');\n      assert(height === undefined || size.height === height, 'Deduced texture height does not match supplied height');\n      return size;\n    }\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return this.gl.createTexture();\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      this.gl.deleteTexture(this.handle);\n\n      this._trackDeallocatedMemory('Texture');\n    }\n  }, {\n    key: \"_getParameter\",\n    value: function _getParameter(pname) {\n      switch (pname) {\n        case 4096:\n          return this.width;\n\n        case 4097:\n          return this.height;\n\n        default:\n          this.gl.bindTexture(this.target, this.handle);\n          var value = this.gl.getTexParameter(this.target, pname);\n          this.gl.bindTexture(this.target, null);\n          return value;\n      }\n    }\n  }, {\n    key: \"_setParameter\",\n    value: function _setParameter(pname, param) {\n      this.gl.bindTexture(this.target, this.handle);\n      param = this._getNPOTParam(pname, param);\n\n      switch (pname) {\n        case 33082:\n        case 33083:\n          this.gl.texParameterf(this.handle, pname, param);\n          break;\n\n        case 4096:\n        case 4097:\n          assert(false);\n          break;\n\n        default:\n          this.gl.texParameteri(this.target, pname, param);\n          break;\n      }\n\n      this.gl.bindTexture(this.target, null);\n      return this;\n    }\n  }, {\n    key: \"_isNPOT\",\n    value: function _isNPOT() {\n      if (isWebGL2(this.gl)) {\n        return false;\n      }\n\n      if (!this.width || !this.height) {\n        return false;\n      }\n\n      return !isPowerOfTwo(this.width) || !isPowerOfTwo(this.height);\n    }\n  }, {\n    key: \"_updateForNPOT\",\n    value: function _updateForNPOT(parameters) {\n      if (parameters[this.gl.TEXTURE_MIN_FILTER] === undefined) {\n        parameters[this.gl.TEXTURE_MIN_FILTER] = this.gl.LINEAR;\n      }\n\n      if (parameters[this.gl.TEXTURE_WRAP_S] === undefined) {\n        parameters[this.gl.TEXTURE_WRAP_S] = this.gl.CLAMP_TO_EDGE;\n      }\n\n      if (parameters[this.gl.TEXTURE_WRAP_T] === undefined) {\n        parameters[this.gl.TEXTURE_WRAP_T] = this.gl.CLAMP_TO_EDGE;\n      }\n    }\n  }, {\n    key: \"_getNPOTParam\",\n    value: function _getNPOTParam(pname, param) {\n      if (this._isNPOT()) {\n        switch (pname) {\n          case 10241:\n            if (NPOT_MIN_FILTERS.indexOf(param) === -1) {\n              param = 9729;\n            }\n\n            break;\n\n          case 10242:\n          case 10243:\n            if (param !== 33071) {\n              param = 33071;\n            }\n\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      return param;\n    }\n  }], [{\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var format = opts.format,\n          linearFiltering = opts.linearFiltering;\n      var supported = true;\n\n      if (format) {\n        supported = supported && isFormatSupported(gl, format);\n        supported = supported && (!linearFiltering || isLinearFilteringSupported(gl, format));\n      }\n\n      return supported;\n    }\n  }]);\n\n  return Texture;\n}(Resource);\n\nexport { Texture as default };","map":{"version":3,"mappings":"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","names":["isWebGL2","assertWebGL2Context","withParameters","log","global","Resource","Buffer","TEXTURE_FORMATS","DATA_FORMAT_CHANNELS","TYPE_SIZES","isFormatSupported","isLinearFilteringSupported","assert","uid","isPowerOfTwo","NPOT_MIN_FILTERS","WebGLBuffer","Texture","constructor","gl","props","id","handle","target","textureUnit","undefined","loaded","width","height","depth","format","type","dataFormat","border","mipmaps","toString","initialize","data","Promise","then","resolvedImageData","Object","assign","pixels","isVideo","HTMLVideoElement","readyState","HAVE_METADATA","_video","addEventListener","recreate","parameters","pixelStore","compressed","_deduceParameters","Number","isFinite","activeTexture","bindTexture","_isNPOT","warn","_updateForNPOT","setImageData","generateMipmap","setParameters","video","lastTime","HAVE_CURRENT_DATA","currentTime","update","setSubImageData","resize","params","options","_trackDeallocatedMemory","level","offset","dataType","_getDataType","gl2","texImage2D","bindBuffer","entries","levelIndex","levelData","compressedTexImage2D","byteLength","_trackAllocatedMemory","channels","channelSize","x","y","ndarray","shape","compressedTexSubImage2D","texSubImage2D","ArrayBuffer","isView","copyFramebuffer","opts","error","getActiveUnit","getParameter","bind","unbind","textureFormat","types","_deduceImageSize","size","ImageData","HTMLImageElement","naturalWidth","naturalHeight","HTMLCanvasElement","ImageBitmap","videoWidth","videoHeight","_createHandle","createTexture","_deleteHandle","deleteTexture","_getParameter","pname","value","getTexParameter","_setParameter","param","_getNPOTParam","texParameterf","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","indexOf","linearFiltering","supported"],"sources":["../../../src/classes/texture.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {isWebGL2, assertWebGL2Context, withParameters, log} from '@luma.gl/gltools';\nimport {global} from 'probe.gl/env';\n\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {\n  TEXTURE_FORMATS,\n  DATA_FORMAT_CHANNELS,\n  TYPE_SIZES,\n  isFormatSupported,\n  isLinearFilteringSupported\n} from './texture-formats';\nimport {assert} from '../utils/assert';\nimport {uid, isPowerOfTwo} from '../utils/utils';\n\n// Supported min filters for NPOT texture.\nconst NPOT_MIN_FILTERS = [GL.LINEAR, GL.NEAREST];\n\n// Polyfill\n// Note (Tarek): Do we really need to support this API?\nconst WebGLBuffer = global.WebGLBuffer || function WebGLBuffer() {};\n\nexport default class Texture extends Resource {\n  static isSupported(gl, opts = {}) {\n    const {format, linearFiltering} = opts;\n    let supported = true;\n    if (format) {\n      supported = supported && isFormatSupported(gl, format);\n      supported = supported && (!linearFiltering || isLinearFilteringSupported(gl, format));\n    }\n    return supported;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n  constructor(gl, props) {\n    const {\n      id = uid('texture'),\n      handle,\n      target\n      // , magFilter, minFilter, wrapS, wrapT\n    } = props;\n\n    super(gl, {id, handle});\n\n    this.target = target;\n    this.textureUnit = undefined;\n\n    // Program.draw() checks the loaded flag of all textures to avoid\n    // Textures that are still loading from promises\n    // Set to true as soon as texture has been initialized with valid data\n    this.loaded = false;\n\n    this.width = undefined;\n    this.height = undefined;\n    this.depth = undefined;\n    this.format = undefined;\n    this.type = undefined;\n    this.dataFormat = undefined;\n    this.border = undefined;\n    this.textureUnit = undefined;\n    this.mipmaps = undefined;\n  }\n\n  toString() {\n    return `Texture(${this.id},${this.width}x${this.height})`;\n  }\n\n  /* eslint-disable max-len, max-statements */\n  initialize(props = {}) {\n    let data = props.data;\n\n    if (data instanceof Promise) {\n      data.then(resolvedImageData =>\n        this.initialize(\n          Object.assign({}, props, {\n            pixels: resolvedImageData,\n            data: resolvedImageData\n          })\n        )\n      );\n      return this;\n    }\n    const isVideo = typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement;\n    // @ts-ignore\n    if (isVideo && data.readyState < HTMLVideoElement.HAVE_METADATA) {\n      this._video = null; // Declare member before the object is sealed\n      data.addEventListener('loadeddata', () => this.initialize(props));\n      return this;\n    }\n\n    const {\n      pixels = null,\n      format = GL.RGBA,\n      border = 0,\n      recreate = false,\n      parameters = {},\n      pixelStore = {},\n      textureUnit = undefined\n    } = props;\n\n    // pixels variable is for API compatibility purpose\n    if (!data) {\n      // TODO - This looks backwards? Commenting out for now until we decide\n      // which prop to use\n      // log.deprecated('data', 'pixels')();\n      data = pixels;\n    }\n\n    let {width, height, dataFormat, type, compressed = false, mipmaps = true} = props;\n    const {depth = 0} = props;\n\n    // Deduce width and height\n    ({width, height, compressed, dataFormat, type} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    // Store opts for accessors\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n    this.format = format;\n    this.type = type;\n    this.dataFormat = dataFormat;\n    this.border = border;\n    this.textureUnit = textureUnit;\n\n    if (Number.isFinite(this.textureUnit)) {\n      this.gl.activeTexture(GL.TEXTURE0 + this.textureUnit);\n      this.gl.bindTexture(this.target, this.handle);\n    }\n\n    if (mipmaps && this._isNPOT()) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      mipmaps = false;\n\n      this._updateForNPOT(parameters);\n    }\n\n    this.mipmaps = mipmaps;\n\n    this.setImageData({\n      data,\n      width,\n      height,\n      depth,\n      format,\n      type,\n      dataFormat,\n      border,\n      mipmaps,\n      parameters: pixelStore,\n      compressed\n    });\n\n    if (mipmaps) {\n      this.generateMipmap();\n    }\n\n    // Set texture sampler parameters\n    this.setParameters(parameters);\n\n    // TODO - Store data to enable auto recreate on context loss\n    if (recreate) {\n      this.data = data;\n    }\n    if (isVideo) {\n      this._video = {\n        video: data,\n        parameters,\n        // @ts-ignore\n        lastTime: data.readyState >= HTMLVideoElement.HAVE_CURRENT_DATA ? data.currentTime : -1\n      };\n    }\n\n    return this;\n  }\n\n  update() {\n    if (this._video) {\n      const {video, parameters, lastTime} = this._video;\n      // @ts-ignore\n      if (lastTime === video.currentTime || video.readyState < HTMLVideoElement.HAVE_CURRENT_DATA) {\n        return;\n      }\n      this.setSubImageData({\n        data: video,\n        parameters\n      });\n      if (this.mipmaps) {\n        this.generateMipmap();\n      }\n      this._video.lastTime = video.currentTime;\n    }\n  }\n\n  // If size has changed, reinitializes with current format\n  // note clears image and mipmaps\n  resize({height, width, mipmaps = false}) {\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({\n        width,\n        height,\n        format: this.format,\n        type: this.type,\n        dataFormat: this.dataFormat,\n        border: this.border,\n        mipmaps\n      });\n    }\n    return this;\n  }\n\n  // Call to regenerate mipmaps after modifying texture(s)\n  generateMipmap(params = {}) {\n    if (this._isNPOT()) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      return this;\n    }\n\n    this.mipmaps = true;\n\n    this.gl.bindTexture(this.target, this.handle);\n    withParameters(this.gl, params, () => {\n      this.gl.generateMipmap(this.target);\n    });\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  /*\n   * Allocates storage\n   * @param {*} pixels -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} width -\n   * @param {GLint} height -\n   * @param {GLint} mipMapLevel -\n   * @param {GLenum} format - format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  /* eslint-disable max-len, max-statements, complexity */\n  setImageData(options) {\n    this._trackDeallocatedMemory('Texture');\n\n    const {\n      target = this.target,\n      pixels = null,\n      level = 0,\n      format = this.format,\n      border = this.border,\n      offset = 0,\n      parameters = {}\n    } = options;\n\n    let {\n      data = null,\n      type = this.type,\n      width = this.width,\n      height = this.height,\n      dataFormat = this.dataFormat,\n      compressed = false\n    } = options;\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    const {gl} = this;\n    gl.bindTexture(this.target, this.handle);\n\n    let dataType = null;\n    ({data, dataType} = this._getDataType({data, compressed}));\n\n    let gl2;\n\n    withParameters(this.gl, parameters, () => {\n      switch (dataType) {\n        case 'null':\n          gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          break;\n        case 'typed-array':\n          // Looks like this assert is not necessary, as offset is ignored under WebGL1\n          // assert((offset === 0 || isWebGL2(gl)), 'offset supported in WebGL2 only');\n          // @ts-ignore\n          gl.texImage2D(\n            target,\n            level,\n            format,\n            width,\n            height,\n            border,\n            dataFormat,\n            type,\n            data,\n            // @ts-ignore\n            offset\n          );\n          break;\n        case 'buffer':\n          // WebGL2 enables creating textures directly from a WebGL buffer\n          gl2 = assertWebGL2Context(gl);\n          gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle || data);\n          gl2.texImage2D(target, level, format, width, height, border, dataFormat, type, offset);\n          gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n          break;\n        case 'browser-object':\n          if (isWebGL2(gl)) {\n            gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          } else {\n            gl.texImage2D(target, level, format, dataFormat, type, data);\n          }\n          break;\n        case 'compressed':\n          for (const [levelIndex, levelData] of data.entries()) {\n            gl.compressedTexImage2D(\n              target,\n              levelIndex,\n              levelData.format,\n              levelData.width,\n              levelData.height,\n              border,\n              levelData.data\n            );\n          }\n\n          break;\n        default:\n          assert(false, 'Unknown image data type');\n      }\n    });\n\n    if (data && data.byteLength) {\n      this._trackAllocatedMemory(data.byteLength, 'Texture');\n    } else {\n      // NOTE(Tarek): Default to RGBA bytes\n      const channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n      const channelSize = TYPE_SIZES[this.type] || 1;\n\n      this._trackAllocatedMemory(this.width * this.height * channels * channelSize, 'Texture');\n    }\n\n    this.loaded = true;\n\n    return this;\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Redefines an area of an existing texture\n   * Note: does not allocate storage\n   */\n  /*\n   * Redefines an area of an existing texture\n   * @param {*} pixels, data -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} x - xOffset from where texture to be updated\n   * @param {GLint} y - yOffset from where texture to be updated\n   * @param {GLint} width - width of the sub image to be updated\n   * @param {GLint} height - height of the sub image to be updated\n   * @param {GLint} level - mip level to be updated\n   * @param {GLenum} format - internal format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer or ArrayBufferView\n   * @param {GLenum} dataFormat - format of image data.\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  setSubImageData({\n    target = this.target,\n    pixels = null,\n    data = null,\n    x = 0,\n    y = 0,\n    width = this.width,\n    height = this.height,\n    level = 0,\n    format = this.format,\n    type = this.type,\n    dataFormat = this.dataFormat,\n    compressed = false,\n    offset = 0,\n    border = this.border,\n    parameters = {}\n  }) {\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    assert(this.depth === 0, 'texSubImage not supported for 3D textures');\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    // Support ndarrays\n    if (data && data.data) {\n      const ndarray = data;\n      data = ndarray.data;\n      width = ndarray.shape[0];\n      height = ndarray.shape[1];\n    }\n\n    // Support buffers\n    if (data instanceof Buffer) {\n      data = data.handle;\n    }\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    withParameters(this.gl, parameters, () => {\n      // TODO - x,y parameters\n      if (compressed) {\n        this.gl.compressedTexSubImage2D(target, level, x, y, width, height, format, data);\n      } else if (data === null) {\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, null);\n      } else if (ArrayBuffer.isView(data)) {\n        // const gl2 = assertWebGL2Context(this.gl);\n        // @ts-ignore last offset parameter is ignored under WebGL1\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data, offset);\n      } else if (data instanceof WebGLBuffer) {\n        // WebGL2 allows us to create texture directly from a WebGL buffer\n        const gl2 = assertWebGL2Context(this.gl);\n        // This texImage2D signature uses currently bound GL.PIXEL_UNPACK_BUFFER\n        gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data);\n        gl2.texSubImage2D(target, level, x, y, width, height, dataFormat, type, offset);\n        gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n      } else if (isWebGL2(this.gl)) {\n        // Assume data is a browser supported object (ImageData, Canvas, ...)\n        const gl2 = assertWebGL2Context(this.gl);\n        gl2.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data);\n      } else {\n        this.gl.texSubImage2D(target, level, x, y, dataFormat, type, data);\n      }\n    });\n\n    this.gl.bindTexture(this.target, null);\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Defines a two-dimensional texture image or cube-map texture image with\n   * pixels from the current framebuffer (rather than from client memory).\n   * (gl.copyTexImage2D wrapper)\n   *\n   * Note that binding a texture into a Framebuffer's color buffer and\n   * rendering can be faster.\n   */\n  copyFramebuffer(opts = {}) {\n    log.error(\n      'Texture.copyFramebuffer({...}) is no logner supported, use copyToTexture(source, target, opts})'\n    )();\n    return null;\n  }\n\n  getActiveUnit() {\n    return this.gl.getParameter(GL.ACTIVE_TEXTURE) - GL.TEXTURE0;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n\n  bind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, this.handle);\n    return textureUnit;\n  }\n\n  unbind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, null);\n    return textureUnit;\n  }\n\n  // PRIVATE METHODS\n\n  _getDataType({data, compressed = false}) {\n    if (compressed) {\n      return {data, dataType: 'compressed'};\n    }\n    if (data === null) {\n      return {data, dataType: 'null'};\n    }\n    if (ArrayBuffer.isView(data)) {\n      return {data, dataType: 'typed-array'};\n    }\n    if (data instanceof Buffer) {\n      return {data: data.handle, dataType: 'buffer'};\n    }\n    if (data instanceof WebGLBuffer) {\n      return {data, dataType: 'buffer'};\n    }\n    // Assume data is a browser supported object (ImageData, Canvas, ...)\n    return {data, dataType: 'browser-object'};\n  }\n\n  /* Copied from texture-2d.js\n  // WebGL2\n  setPixels(opts = {}) {\n    const {\n      buffer,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n\n    // This signature of texImage2D uses currently bound GL.PIXEL_UNPACK_BUFFER\n    gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, buffer.target);\n    // And as always, we must also bind the texture itself\n    this.bind();\n\n    gl.texImage2D(gl.TEXTURE_2D,\n      mipmapLevel, format, width, height, border, format, type, buffer.target);\n\n    this.unbind();\n    gl.bindBuffer(GL.GL.PIXEL_UNPACK_BUFFER, null);\n    return this;\n  }\n\n  setImageDataFromCompressedBuffer(opts) {\n    const {\n      buffer,\n      // offset = 0,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      internalFormat = GL.RGBA,\n      // format = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n    gl.compressedTexImage2D(this.target,\n      mipmapLevel, internalFormat, width, height, border, buffer);\n    // gl.compressedTexSubImage2D(target,\n    //   level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);\n    return this;\n  }\n\n  copySubImage(opts) {\n    const {\n      // pixels,\n      // offset = 0,\n      // x,\n      // y,\n      // width,\n      // height,\n      // mipmapLevel = 0,\n      // internalFormat = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      // border = 0\n    } = opts;\n\n    // if (pixels instanceof ArrayBufferView) {\n    //   gl.texSubImage2D(target, level, x, y, width, height, format, type, pixels);\n    // }\n    // gl.texSubImage2D(target, level, x, y, format, type, ? pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLImageElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLCanvasElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLVideoElement pixels);\n    // // Additional signature in a WebGL 2 context:\n    // gl.texSubImage2D(target, level, x, y, format, type, GLintptr offset);\n  }\n  */\n\n  // HELPER METHODS\n\n  _deduceParameters(opts) {\n    const {format, data} = opts;\n    let {width, height, dataFormat, type, compressed} = opts;\n\n    // Deduce format and type from format\n    const textureFormat = TEXTURE_FORMATS[format];\n    dataFormat = dataFormat || (textureFormat && textureFormat.dataFormat);\n    type = type || (textureFormat && textureFormat.types[0]);\n\n    // Deduce compression from format\n    compressed = compressed || (textureFormat && textureFormat.compressed);\n\n    ({width, height} = this._deduceImageSize(data, width, height));\n\n    return {dataFormat, type, compressed, width, height, format, data};\n  }\n\n  // eslint-disable-next-line complexity\n  _deduceImageSize(data, width, height) {\n    let size;\n\n    if (typeof ImageData !== 'undefined' && data instanceof ImageData) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {\n      size = {width: data.naturalWidth, height: data.naturalHeight};\n    } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof ImageBitmap !== 'undefined' && data instanceof ImageBitmap) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {\n      size = {width: data.videoWidth, height: data.videoHeight};\n    } else if (!data) {\n      size = {width: width >= 0 ? width : 1, height: height >= 0 ? height : 1};\n    } else {\n      size = {width, height};\n    }\n\n    assert(size, 'Could not deduced texture size');\n    assert(\n      width === undefined || size.width === width,\n      'Deduced texture width does not match supplied width'\n    );\n    assert(\n      height === undefined || size.height === height,\n      'Deduced texture height does not match supplied height'\n    );\n\n    return size;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createTexture();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteTexture(this.handle);\n    this._trackDeallocatedMemory('Texture');\n  }\n\n  _getParameter(pname) {\n    switch (pname) {\n      case GL.TEXTURE_WIDTH:\n        return this.width;\n      case GL.TEXTURE_HEIGHT:\n        return this.height;\n      default:\n        this.gl.bindTexture(this.target, this.handle);\n        const value = this.gl.getTexParameter(this.target, pname);\n        this.gl.bindTexture(this.target, null);\n        return value;\n    }\n  }\n\n  _setParameter(pname, param) {\n    this.gl.bindTexture(this.target, this.handle);\n\n    // NOTE: Apply NPOT workaround\n    param = this._getNPOTParam(pname, param);\n\n    // Apparently there are some integer/float conversion rules that made\n    // the WebGL committe expose two parameter setting functions in JavaScript.\n    // For now, pick the float version for parameters specified as GLfloat.\n    switch (pname) {\n      case GL.TEXTURE_MIN_LOD:\n      case GL.TEXTURE_MAX_LOD:\n        this.gl.texParameterf(this.handle, pname, param);\n        break;\n\n      case GL.TEXTURE_WIDTH:\n      case GL.TEXTURE_HEIGHT:\n        assert(false);\n        break;\n\n      default:\n        this.gl.texParameteri(this.target, pname, param);\n        break;\n    }\n\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  _isNPOT() {\n    if (isWebGL2(this.gl)) {\n      // NPOT restriction is only for WebGL1\n      return false;\n    }\n    // Width and height not available, consider it is not NPOT texture\n    if (!this.width || !this.height) {\n      return false;\n    }\n    return !isPowerOfTwo(this.width) || !isPowerOfTwo(this.height);\n  }\n\n  // Update default settings which are not supported by NPOT textures.\n  _updateForNPOT(parameters) {\n    if (parameters[this.gl.TEXTURE_MIN_FILTER] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n      parameters[this.gl.TEXTURE_MIN_FILTER] = this.gl.LINEAR;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_S] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_S to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_S] = this.gl.CLAMP_TO_EDGE;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_T] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_T to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_T] = this.gl.CLAMP_TO_EDGE;\n    }\n  }\n\n  _getNPOTParam(pname, param) {\n    if (this._isNPOT()) {\n      switch (pname) {\n        case GL.TEXTURE_MIN_FILTER:\n          if (NPOT_MIN_FILTERS.indexOf(param) === -1) {\n            // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n            param = GL.LINEAR;\n          }\n          break;\n        case GL.TEXTURE_WRAP_S:\n        case GL.TEXTURE_WRAP_T:\n          if (param !== GL.CLAMP_TO_EDGE) {\n            // log.warn(`texture: ${this} is Non-Power-Of-Two, ${getKey(this.gl, pname)} to CLAMP_TO_EDGE`)();\n            param = GL.CLAMP_TO_EDGE;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    return param;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}