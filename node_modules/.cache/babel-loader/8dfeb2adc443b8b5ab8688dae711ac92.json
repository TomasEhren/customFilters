{"ast":null,"code":"import _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nexport function waitForGLTFAssets(_x) {\n  return _waitForGLTFAssets.apply(this, arguments);\n}\n\nfunction _waitForGLTFAssets() {\n  _waitForGLTFAssets = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(gltfObjects) {\n    var remaining;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            remaining = [];\n            gltfObjects.scenes.forEach(function (scene) {\n              scene.traverse(function (model) {\n                Object.values(model.model.getUniforms()).forEach(function (uniform) {\n                  if (uniform.loaded === false) {\n                    remaining.push(uniform);\n                  }\n                });\n              });\n            });\n            _context.next = 4;\n            return waitWhileCondition(function () {\n              return remaining.some(function (uniform) {\n                return !uniform.loaded;\n              });\n            });\n\n          case 4:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _waitForGLTFAssets.apply(this, arguments);\n}\n\nfunction waitWhileCondition(_x2) {\n  return _waitWhileCondition.apply(this, arguments);\n}\n\nfunction _waitWhileCondition() {\n  _waitWhileCondition = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(condition) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!condition()) {\n              _context2.next = 5;\n              break;\n            }\n\n            _context2.next = 3;\n            return new Promise(function (resolve) {\n              return requestAnimationFrame(resolve);\n            });\n\n          case 3:\n            _context2.next = 0;\n            break;\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _waitWhileCondition.apply(this, arguments);\n}","map":{"version":3,"mappings":";;AAEA,gBAAsBA,iBAAtB;EAAA;AAAA;;;gFAAO,iBAAiCC,WAAjC;IAAA;IAAA;MAAA;QAAA;UAAA;YACCC,SADD,GACa,EADb;YAGLD,WAAW,CAACE,MAAZF,CAAmBG,OAAnBH,CAA2BI,eAAK,EAAI;cAClCA,KAAK,CAACC,QAAND,CAAeE,eAAK,EAAI;gBACtBC,MAAM,CAACC,MAAPD,CAAcD,KAAK,CAACA,KAANA,CAAYG,WAAZH,EAAdC,EAAyCJ,OAAzCI,CAAiDG,iBAAO,EAAI;kBAC1D,IAAIA,OAAO,CAACC,MAARD,KAAmB,KAAvB,EAA8B;oBAC5BT,SAAS,CAACW,IAAVX,CAAeS,OAAfT;kBACD;gBAHH;cADF;YADF;YAHK;YAAA,OAaQY,kBAAkB,CAAC;cAAA,OAAMZ,SAAS,CAACa,IAAVb,CAAeS,iBAAO;gBAAA,OAAI,CAACA,OAAO,CAACC,MAAb;cAAA,CAAtBV,CAAN;YAAA,CAAD,CAb1B;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;SAgBQY,kB;;;;;iFAAf,kBAAkCE,SAAlC;IAAA;MAAA;QAAA;UAAA;YAAA,KACSA,SAAS,EADlB;cAAA;cAAA;YAAA;;YAAA;YAAA,OAEU,IAAIC,OAAJ,CAAYC,iBAAO;cAAA,OAAIC,qBAAqB,CAACD,OAAD,CAAzB;YAAA,CAAnB,CAFV;;UAAA;YAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","names":["waitForGLTFAssets","gltfObjects","remaining","scenes","forEach","scene","traverse","model","Object","values","getUniforms","uniform","loaded","push","waitWhileCondition","some","condition","Promise","resolve","requestAnimationFrame"],"sources":["../../../src/scenegraph-layer/gltf-utils.js"],"sourcesContent":["/* global requestAnimationFrame */\n\nexport async function waitForGLTFAssets(gltfObjects) {\n  const remaining = [];\n\n  gltfObjects.scenes.forEach(scene => {\n    scene.traverse(model => {\n      Object.values(model.model.getUniforms()).forEach(uniform => {\n        if (uniform.loaded === false) {\n          remaining.push(uniform);\n        }\n      });\n    });\n  });\n\n  return await waitWhileCondition(() => remaining.some(uniform => !uniform.loaded));\n}\n\nasync function waitWhileCondition(condition) {\n  while (condition()) {\n    await new Promise(resolve => requestAnimationFrame(resolve));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}