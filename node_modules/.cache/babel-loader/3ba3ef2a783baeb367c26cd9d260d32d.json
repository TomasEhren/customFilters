{"ast":null,"code":"import _defineProperty from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport Texture2D from '../classes/texture-2d';\nimport TextureCube from '../classes/texture-cube';\nimport Texture3D from '../classes/texture-3d';\nimport Framebuffer from '../classes/framebuffer';\nimport { assert } from '../utils/assert';\nexport function cloneTextureFrom(refTexture, overrides) {\n  assert(refTexture instanceof Texture2D || refTexture instanceof TextureCube || refTexture instanceof Texture3D);\n  var TextureType = refTexture.constructor;\n  var gl = refTexture.gl,\n      width = refTexture.width,\n      height = refTexture.height,\n      format = refTexture.format,\n      type = refTexture.type,\n      dataFormat = refTexture.dataFormat,\n      border = refTexture.border,\n      mipmaps = refTexture.mipmaps;\n  var textureOptions = Object.assign({\n    width: width,\n    height: height,\n    format: format,\n    type: type,\n    dataFormat: dataFormat,\n    border: border,\n    mipmaps: mipmaps\n  }, overrides);\n  return new TextureType(gl, textureOptions);\n}\nexport function toFramebuffer(texture, opts) {\n  var gl = texture.gl,\n      width = texture.width,\n      height = texture.height,\n      id = texture.id;\n  var framebuffer = new Framebuffer(gl, Object.assign({}, opts, {\n    id: \"framebuffer-for-\".concat(id),\n    width: width,\n    height: height,\n    attachments: _defineProperty({}, 36064, texture)\n  }));\n  return framebuffer;\n}","map":{"version":3,"mappings":";AACA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AAEA,SAAQC,MAAR,QAAqB,iBAArB;AAIA,OAAO,SAASC,gBAAT,CAA0BC,UAA1B,EAAsCC,SAAtC,EAAiD;EACtDH,MAAM,CACJE,UAAU,YAAYN,SAAtBM,IACEA,UAAU,YAAYL,WADxBK,IAEEA,UAAU,YAAYJ,SAHpB,CAANE;EAMA,IAAMI,WAAW,GAAGF,UAAU,CAACG,WAA/B;EAEA,IAAOC,EAAP,GAAuEJ,UAAvE,CAAOI,EAAP;EAAA,IAAWC,KAAX,GAAuEL,UAAvE,CAAWK,KAAX;EAAA,IAAkBC,MAAlB,GAAuEN,UAAvE,CAAkBM,MAAlB;EAAA,IAA0BC,MAA1B,GAAuEP,UAAvE,CAA0BO,MAA1B;EAAA,IAAkCC,IAAlC,GAAuER,UAAvE,CAAkCQ,IAAlC;EAAA,IAAwCC,UAAxC,GAAuET,UAAvE,CAAwCS,UAAxC;EAAA,IAAoDC,MAApD,GAAuEV,UAAvE,CAAoDU,MAApD;EAAA,IAA4DC,OAA5D,GAAuEX,UAAvE,CAA4DW,OAA5D;EAEA,IAAMC,cAAc,GAAGC,MAAM,CAACC,MAAPD,CACrB;IACER,KADF,EACEA,KADF;IAEEC,MAFF,EAEEA,MAFF;IAGEC,MAHF,EAGEA,MAHF;IAIEC,IAJF,EAIEA,IAJF;IAKEC,UALF,EAKEA,UALF;IAMEC,MANF,EAMEA,MANF;IAOEC;EAPF,CADqBE,EAUrBZ,SAVqBY,CAAvB;EAcA,OAAO,IAAIX,WAAJ,CAAgBE,EAAhB,EAAoBQ,cAApB,CAAP;AACD;AAKD,OAAO,SAASG,aAAT,CAAuBC,OAAvB,EAAgCC,IAAhC,EAAsC;EAC3C,IAAOb,EAAP,GAAgCY,OAAhC,CAAOZ,EAAP;EAAA,IAAWC,KAAX,GAAgCW,OAAhC,CAAWX,KAAX;EAAA,IAAkBC,MAAlB,GAAgCU,OAAhC,CAAkBV,MAAlB;EAAA,IAA0BY,EAA1B,GAAgCF,OAAhC,CAA0BE,EAA1B;EACA,IAAMC,WAAW,GAAG,IAAItB,WAAJ,CAClBO,EADkB,EAElBS,MAAM,CAACC,MAAPD,CAAc,EAAdA,EAAkBI,IAAlBJ,EAAwB;IACtBK,EAAE,4BAAqBA,EAArB,CADoB;IAEtBb,KAFsB,EAEtBA,KAFsB;IAGtBC,MAHsB,EAGtBA,MAHsB;IAItBc,WAAW,sBACT,KADS,EACeJ,OADf;EAJW,CAAxBH,CAFkB,CAApB;EAWA,OAAOM,WAAP;AACD","names":["Texture2D","TextureCube","Texture3D","Framebuffer","assert","cloneTextureFrom","refTexture","overrides","TextureType","constructor","gl","width","height","format","type","dataFormat","border","mipmaps","textureOptions","Object","assign","toFramebuffer","texture","opts","id","framebuffer","attachments"],"sources":["../../../src/webgl-utils/texture-utils.js"],"sourcesContent":["// TODO: Two subdirectories must not depend on each other (classes vs utils)!\nimport Texture2D from '../classes/texture-2d';\nimport TextureCube from '../classes/texture-cube';\nimport Texture3D from '../classes/texture-3d';\nimport Framebuffer from '../classes/framebuffer';\nimport GL from '@luma.gl/constants';\nimport {assert} from '../utils/assert';\n\n// Clone a new texture object from a reference texture object.\n/** @type {import('./texture-utils').cloneTextureFrom} */\nexport function cloneTextureFrom(refTexture, overrides) {\n  assert(\n    refTexture instanceof Texture2D ||\n      refTexture instanceof TextureCube ||\n      refTexture instanceof Texture3D\n  );\n\n  const TextureType = refTexture.constructor;\n\n  const {gl, width, height, format, type, dataFormat, border, mipmaps} = refTexture;\n\n  const textureOptions = Object.assign(\n    {\n      width,\n      height,\n      format,\n      type,\n      dataFormat,\n      border,\n      mipmaps\n    },\n    overrides\n  );\n\n  // TODO: move this to `Texture` class as instance method and use this.constructor\n  return new TextureType(gl, textureOptions);\n}\n\n// Wraps a given texture into a framebuffer object, that can be further used\n// to read data from the texture object.\n/** @type {import('./texture-utils').toFramebuffer} */\nexport function toFramebuffer(texture, opts) {\n  const {gl, width, height, id} = texture;\n  const framebuffer = new Framebuffer(\n    gl,\n    Object.assign({}, opts, {\n      id: `framebuffer-for-${id}`,\n      width,\n      height,\n      attachments: {\n        [GL.COLOR_ATTACHMENT0]: texture\n      }\n    })\n  );\n  return framebuffer;\n}\n"]},"metadata":{},"sourceType":"module"}