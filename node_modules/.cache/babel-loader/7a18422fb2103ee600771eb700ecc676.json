{"ast":null,"code":"import { CompositeLayer, createIterable } from '@deck.gl/core';\nimport MultiIconLayer from './multi-icon-layer/multi-icon-layer';\nimport FontAtlasManager, { DEFAULT_CHAR_SET, DEFAULT_FONT_FAMILY, DEFAULT_FONT_WEIGHT, DEFAULT_FONT_SIZE, DEFAULT_BUFFER, DEFAULT_RADIUS, DEFAULT_CUTOFF, setFontAtlasCacheLimit } from './font-atlas-manager';\nimport { transformParagraph, getTextFromBuffer } from './utils';\nimport TextBackgroundLayer from './text-background-layer/text-background-layer';\nconst DEFAULT_FONT_SETTINGS = {\n  fontSize: DEFAULT_FONT_SIZE,\n  buffer: DEFAULT_BUFFER,\n  sdf: false,\n  radius: DEFAULT_RADIUS,\n  cutoff: DEFAULT_CUTOFF,\n  smoothing: 0.1\n};\nconst TEXT_ANCHOR = {\n  start: 1,\n  middle: 0,\n  end: -1\n};\nconst ALIGNMENT_BASELINE = {\n  top: 1,\n  center: 0,\n  bottom: -1\n};\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst DEFAULT_LINE_HEIGHT = 1.0;\nconst FONT_SETTINGS_PROPS = ['fontSize', 'buffer', 'sdf', 'radius', 'cutoff'];\nconst defaultProps = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n  background: false,\n  getBackgroundColor: {\n    type: 'accessor',\n    value: [255, 255, 255, 255]\n  },\n  getBorderColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getBorderWidth: {\n    type: 'accessor',\n    value: 0\n  },\n  backgroundPadding: {\n    type: 'array',\n    value: [0, 0, 0, 0]\n  },\n  characterSet: {\n    type: 'object',\n    value: DEFAULT_CHAR_SET\n  },\n  fontFamily: DEFAULT_FONT_FAMILY,\n  fontWeight: DEFAULT_FONT_WEIGHT,\n  lineHeight: DEFAULT_LINE_HEIGHT,\n  outlineWidth: {\n    type: 'number',\n    value: 0,\n    min: 0\n  },\n  outlineColor: {\n    type: 'color',\n    value: DEFAULT_COLOR\n  },\n  fontSettings: {},\n  wordBreak: 'break-word',\n  maxWidth: {\n    type: 'number',\n    value: -1\n  },\n  getText: {\n    type: 'accessor',\n    value: x => x.text\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getSize: {\n    type: 'accessor',\n    value: 32\n  },\n  getAngle: {\n    type: 'accessor',\n    value: 0\n  },\n  getTextAnchor: {\n    type: 'accessor',\n    value: 'middle'\n  },\n  getAlignmentBaseline: {\n    type: 'accessor',\n    value: 'center'\n  },\n  getPixelOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  backgroundColor: {\n    deprecatedFor: ['background', 'getBackgroundColor']\n  }\n};\nexport default class TextLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      styleVersion: 0,\n      fontAtlasManager: new FontAtlasManager()\n    };\n  }\n\n  updateState(_ref) {\n    let {\n      props,\n      oldProps,\n      changeFlags\n    } = _ref;\n    const textChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText);\n    const oldCharacterSet = this.state.characterSet;\n\n    if (textChanged) {\n      this._updateText();\n    }\n\n    const fontChanged = oldCharacterSet !== this.state.characterSet || this._fontChanged(oldProps, props);\n\n    if (fontChanged) {\n      this._updateFontAtlas(oldProps, props);\n    }\n\n    const styleChanged = fontChanged || props.lineHeight !== oldProps.lineHeight || props.wordBreak !== oldProps.wordBreak || props.maxWidth !== oldProps.maxWidth;\n\n    if (styleChanged) {\n      this.setState({\n        styleVersion: this.state.styleVersion + 1\n      });\n    }\n  }\n\n  getPickingInfo(_ref2) {\n    let {\n      info\n    } = _ref2;\n    info.object = info.index >= 0 ? this.props.data[info.index] : null;\n    return info;\n  }\n\n  _updateFontAtlas(oldProps, props) {\n    const {\n      fontSettings,\n      fontFamily,\n      fontWeight\n    } = props;\n    const {\n      fontAtlasManager,\n      characterSet\n    } = this.state;\n    fontAtlasManager.setProps({ ...DEFAULT_FONT_SETTINGS,\n      ...fontSettings,\n      characterSet,\n      fontFamily,\n      fontWeight\n    });\n  }\n\n  _fontChanged(oldProps, props) {\n    if (oldProps.fontFamily !== props.fontFamily || oldProps.fontWeight !== props.fontWeight) {\n      return true;\n    }\n\n    if (oldProps.fontSettings === props.fontSettings) {\n      return false;\n    }\n\n    const oldFontSettings = oldProps.fontSettings || {};\n    const fontSettings = props.fontSettings || {};\n    return FONT_SETTINGS_PROPS.some(prop => oldFontSettings[prop] !== fontSettings[prop]);\n  }\n\n  _updateText() {\n    const {\n      data,\n      characterSet\n    } = this.props;\n    const textBuffer = data.attributes && data.attributes.getText;\n    let {\n      getText\n    } = this.props;\n    let {\n      startIndices\n    } = data;\n    let numInstances;\n    const autoCharacterSet = characterSet === 'auto' && new Set();\n\n    if (textBuffer && startIndices) {\n      const {\n        texts,\n        characterCount\n      } = getTextFromBuffer({ ...(ArrayBuffer.isView(textBuffer) ? {\n          value: textBuffer\n        } : textBuffer),\n        length: data.length,\n        startIndices,\n        characterSet: autoCharacterSet\n      });\n      numInstances = characterCount;\n\n      getText = (_, _ref3) => {\n        let {\n          index\n        } = _ref3;\n        return texts[index];\n      };\n    } else {\n      const {\n        iterable,\n        objectInfo\n      } = createIterable(data);\n      startIndices = [0];\n      numInstances = 0;\n\n      for (const object of iterable) {\n        objectInfo.index++;\n        const text = Array.from(getText(object, objectInfo) || '');\n\n        if (autoCharacterSet) {\n          text.forEach(autoCharacterSet.add, autoCharacterSet);\n        }\n\n        numInstances += text.length;\n        startIndices.push(numInstances);\n      }\n    }\n\n    this.setState({\n      getText,\n      startIndices,\n      numInstances,\n      characterSet: autoCharacterSet || characterSet\n    });\n  }\n\n  getBoundingRect(object, objectInfo) {\n    const iconMapping = this.state.fontAtlasManager.mapping;\n    const {\n      getText\n    } = this.state;\n    const {\n      wordBreak,\n      maxWidth,\n      lineHeight,\n      getTextAnchor,\n      getAlignmentBaseline\n    } = this.props;\n    const paragraph = getText(object, objectInfo) || '';\n    const {\n      size: [width, height]\n    } = transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping);\n    const anchorX = TEXT_ANCHOR[typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor];\n    const anchorY = ALIGNMENT_BASELINE[typeof getAlignmentBaseline === 'function' ? getAlignmentBaseline(object, objectInfo) : getAlignmentBaseline];\n    return [(anchorX - 1) * width / 2, (anchorY - 1) * height / 2, width, height];\n  }\n\n  getIconOffsets(object, objectInfo) {\n    const iconMapping = this.state.fontAtlasManager.mapping;\n    const {\n      getText\n    } = this.state;\n    const {\n      wordBreak,\n      maxWidth,\n      lineHeight,\n      getTextAnchor,\n      getAlignmentBaseline\n    } = this.props;\n    const paragraph = getText(object, objectInfo) || '';\n    const {\n      x,\n      y,\n      rowWidth,\n      size: [width, height]\n    } = transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping);\n    const anchorX = TEXT_ANCHOR[typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor];\n    const anchorY = ALIGNMENT_BASELINE[typeof getAlignmentBaseline === 'function' ? getAlignmentBaseline(object, objectInfo) : getAlignmentBaseline];\n    const numCharacters = x.length;\n    const offsets = new Array(numCharacters * 2);\n    let index = 0;\n\n    for (let i = 0; i < numCharacters; i++) {\n      const rowOffset = (1 - anchorX) * (width - rowWidth[i]) / 2;\n      offsets[index++] = (anchorX - 1) * width / 2 + rowOffset + x[i];\n      offsets[index++] = (anchorY - 1) * height / 2 + y[i];\n    }\n\n    return offsets;\n  }\n\n  renderLayers() {\n    const {\n      startIndices,\n      numInstances,\n      getText,\n      fontAtlasManager: {\n        scale,\n        texture,\n        mapping\n      },\n      styleVersion\n    } = this.state;\n    const {\n      data,\n      _dataDiff,\n      getPosition,\n      getColor,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      getBackgroundColor,\n      getBorderColor,\n      getBorderWidth,\n      backgroundPadding,\n      background,\n      billboard,\n      fontSettings,\n      outlineWidth,\n      outlineColor,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      transitions,\n      updateTriggers\n    } = this.props;\n    const CharactersLayerClass = this.getSubLayerClass('characters', MultiIconLayer);\n    const BackgroundLayerClass = this.getSubLayerClass('background', TextBackgroundLayer);\n    return [background && new BackgroundLayerClass({\n      getFillColor: getBackgroundColor,\n      getLineColor: getBorderColor,\n      getLineWidth: getBorderWidth,\n      padding: backgroundPadding,\n      getPosition,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      billboard,\n      sizeScale: sizeScale / this.state.fontAtlasManager.props.fontSize,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      transitions: transitions && {\n        getPosition: transitions.getPosition,\n        getAngle: transitions.getAngle,\n        getSize: transitions.getSize,\n        getFillColor: transitions.getBackgroundColor,\n        getLineColor: transitions.getBorderColor,\n        getLineWidth: transitions.getBorderWidth,\n        getPixelOffset: transitions.getPixelOffset\n      }\n    }, this.getSubLayerProps({\n      id: 'background',\n      updateTriggers: {\n        getPosition: updateTriggers.getPosition,\n        getAngle: updateTriggers.getAngle,\n        getSize: updateTriggers.getSize,\n        getFillColor: updateTriggers.getBackgroundColor,\n        getLineColor: updateTriggers.getBorderColor,\n        getLineWidth: updateTriggers.getBorderWidth,\n        getPixelOffset: updateTriggers.getPixelOffset,\n        getBoundingRect: {\n          getText: updateTriggers.getText,\n          getTextAnchor: updateTriggers.getTextAnchor,\n          getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n          styleVersion\n        }\n      }\n    }), {\n      data: data.attributes && data.attributes.background ? {\n        length: data.length,\n        attributes: data.attributes.background\n      } : data,\n      _dataDiff,\n      autoHighlight: false,\n      getBoundingRect: this.getBoundingRect.bind(this)\n    }), new CharactersLayerClass({\n      sdf: fontSettings.sdf,\n      smoothing: Number.isFinite(fontSettings.smoothing) ? fontSettings.smoothing : DEFAULT_FONT_SETTINGS.smoothing,\n      outlineWidth,\n      outlineColor,\n      iconAtlas: texture,\n      iconMapping: mapping,\n      getPosition,\n      getColor,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      billboard,\n      sizeScale: sizeScale * scale,\n      sizeUnits,\n      sizeMinPixels: sizeMinPixels * scale,\n      sizeMaxPixels: sizeMaxPixels * scale,\n      transitions: transitions && {\n        getPosition: transitions.getPosition,\n        getAngle: transitions.getAngle,\n        getColor: transitions.getColor,\n        getSize: transitions.getSize,\n        getPixelOffset: transitions.getPixelOffset\n      }\n    }, this.getSubLayerProps({\n      id: 'characters',\n      updateTriggers: {\n        getIcon: updateTriggers.getText,\n        getPosition: updateTriggers.getPosition,\n        getAngle: updateTriggers.getAngle,\n        getColor: updateTriggers.getColor,\n        getSize: updateTriggers.getSize,\n        getPixelOffset: updateTriggers.getPixelOffset,\n        getIconOffsets: {\n          getText: updateTriggers.getText,\n          getTextAnchor: updateTriggers.getTextAnchor,\n          getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n          styleVersion\n        }\n      }\n    }), {\n      data,\n      _dataDiff,\n      startIndices,\n      numInstances,\n      getIconOffsets: this.getIconOffsets.bind(this),\n      getIcon: getText\n    })];\n  }\n\n  static set fontAtlasCacheLimit(limit) {\n    setFontAtlasCacheLimit(limit);\n  }\n\n}\nTextLayer.layerName = 'TextLayer';\nTextLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["CompositeLayer","createIterable","MultiIconLayer","FontAtlasManager","DEFAULT_CHAR_SET","DEFAULT_FONT_FAMILY","DEFAULT_FONT_WEIGHT","DEFAULT_FONT_SIZE","DEFAULT_BUFFER","DEFAULT_RADIUS","DEFAULT_CUTOFF","setFontAtlasCacheLimit","transformParagraph","getTextFromBuffer","TextBackgroundLayer","DEFAULT_FONT_SETTINGS","fontSize","buffer","sdf","radius","cutoff","smoothing","TEXT_ANCHOR","start","middle","end","ALIGNMENT_BASELINE","top","center","bottom","DEFAULT_COLOR","DEFAULT_LINE_HEIGHT","FONT_SETTINGS_PROPS","defaultProps","billboard","sizeScale","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","background","getBackgroundColor","type","value","getBorderColor","getBorderWidth","backgroundPadding","characterSet","fontFamily","fontWeight","lineHeight","outlineWidth","min","outlineColor","fontSettings","wordBreak","maxWidth","getText","x","text","getPosition","position","getColor","getSize","getAngle","getTextAnchor","getAlignmentBaseline","getPixelOffset","backgroundColor","deprecatedFor","TextLayer","initializeState","state","styleVersion","fontAtlasManager","updateState","props","oldProps","changeFlags","textChanged","dataChanged","updateTriggersChanged","all","oldCharacterSet","_updateText","fontChanged","_fontChanged","_updateFontAtlas","styleChanged","setState","getPickingInfo","info","object","index","data","setProps","oldFontSettings","some","prop","textBuffer","attributes","startIndices","numInstances","autoCharacterSet","Set","texts","characterCount","ArrayBuffer","isView","length","_","iterable","objectInfo","Array","from","forEach","add","push","getBoundingRect","iconMapping","mapping","paragraph","size","width","height","anchorX","anchorY","getIconOffsets","y","rowWidth","numCharacters","offsets","i","rowOffset","renderLayers","scale","texture","_dataDiff","transitions","updateTriggers","CharactersLayerClass","getSubLayerClass","BackgroundLayerClass","getFillColor","getLineColor","getLineWidth","padding","getSubLayerProps","id","autoHighlight","bind","isFinite","iconAtlas","getIcon","fontAtlasCacheLimit","limit","layerName"],"sources":["../../../src/text-layer/text-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport MultiIconLayer from './multi-icon-layer/multi-icon-layer';\nimport FontAtlasManager, {\n  DEFAULT_CHAR_SET,\n  DEFAULT_FONT_FAMILY,\n  DEFAULT_FONT_WEIGHT,\n  DEFAULT_FONT_SIZE,\n  DEFAULT_BUFFER,\n  DEFAULT_RADIUS,\n  DEFAULT_CUTOFF,\n  setFontAtlasCacheLimit\n} from './font-atlas-manager';\nimport {transformParagraph, getTextFromBuffer} from './utils';\n\nimport TextBackgroundLayer from './text-background-layer/text-background-layer';\n\nconst DEFAULT_FONT_SETTINGS = {\n  fontSize: DEFAULT_FONT_SIZE,\n  buffer: DEFAULT_BUFFER,\n  sdf: false,\n  radius: DEFAULT_RADIUS,\n  cutoff: DEFAULT_CUTOFF,\n  smoothing: 0.1\n};\n\nconst TEXT_ANCHOR = {\n  start: 1,\n  middle: 0,\n  end: -1\n};\n\nconst ALIGNMENT_BASELINE = {\n  top: 1,\n  center: 0,\n  bottom: -1\n};\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst DEFAULT_LINE_HEIGHT = 1.0;\n\nconst FONT_SETTINGS_PROPS = ['fontSize', 'buffer', 'sdf', 'radius', 'cutoff'];\n\nconst defaultProps = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  background: false,\n  getBackgroundColor: {type: 'accessor', value: [255, 255, 255, 255]},\n  getBorderColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getBorderWidth: {type: 'accessor', value: 0},\n  backgroundPadding: {type: 'array', value: [0, 0, 0, 0]},\n\n  characterSet: {type: 'object', value: DEFAULT_CHAR_SET},\n  fontFamily: DEFAULT_FONT_FAMILY,\n  fontWeight: DEFAULT_FONT_WEIGHT,\n  lineHeight: DEFAULT_LINE_HEIGHT,\n  outlineWidth: {type: 'number', value: 0, min: 0},\n  outlineColor: {type: 'color', value: DEFAULT_COLOR},\n  fontSettings: {},\n\n  // auto wrapping options\n  wordBreak: 'break-word',\n  maxWidth: {type: 'number', value: -1},\n\n  getText: {type: 'accessor', value: x => x.text},\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 32},\n  getAngle: {type: 'accessor', value: 0},\n  getTextAnchor: {type: 'accessor', value: 'middle'},\n  getAlignmentBaseline: {type: 'accessor', value: 'center'},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n\n  // deprecated\n  backgroundColor: {deprecatedFor: ['background', 'getBackgroundColor']}\n};\n\nexport default class TextLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      styleVersion: 0,\n      fontAtlasManager: new FontAtlasManager()\n    };\n  }\n\n  // eslint-disable-next-line complexity\n  updateState({props, oldProps, changeFlags}) {\n    const textChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText));\n    const oldCharacterSet = this.state.characterSet;\n\n    if (textChanged) {\n      this._updateText();\n    }\n\n    const fontChanged =\n      oldCharacterSet !== this.state.characterSet || this._fontChanged(oldProps, props);\n\n    if (fontChanged) {\n      this._updateFontAtlas(oldProps, props);\n    }\n\n    const styleChanged =\n      fontChanged ||\n      props.lineHeight !== oldProps.lineHeight ||\n      props.wordBreak !== oldProps.wordBreak ||\n      props.maxWidth !== oldProps.maxWidth;\n\n    if (styleChanged) {\n      this.setState({\n        styleVersion: this.state.styleVersion + 1\n      });\n    }\n  }\n\n  getPickingInfo({info}) {\n    // because `TextLayer` assign the same pickingInfoIndex for one text label,\n    // here info.index refers the index of text label in props.data\n    info.object = info.index >= 0 ? this.props.data[info.index] : null;\n    return info;\n  }\n\n  _updateFontAtlas(oldProps, props) {\n    const {fontSettings, fontFamily, fontWeight} = props;\n\n    // generate test characterSet\n    const {fontAtlasManager, characterSet} = this.state;\n    fontAtlasManager.setProps({\n      ...DEFAULT_FONT_SETTINGS,\n      ...fontSettings,\n      characterSet,\n      fontFamily,\n      fontWeight\n    });\n  }\n\n  _fontChanged(oldProps, props) {\n    if (oldProps.fontFamily !== props.fontFamily || oldProps.fontWeight !== props.fontWeight) {\n      return true;\n    }\n\n    if (oldProps.fontSettings === props.fontSettings) {\n      return false;\n    }\n\n    const oldFontSettings = oldProps.fontSettings || {};\n    const fontSettings = props.fontSettings || {};\n\n    return FONT_SETTINGS_PROPS.some(prop => oldFontSettings[prop] !== fontSettings[prop]);\n  }\n\n  // Text strings are variable width objects\n  // Count characters and start offsets\n  _updateText() {\n    const {data, characterSet} = this.props;\n    const textBuffer = data.attributes && data.attributes.getText;\n    let {getText} = this.props;\n    let {startIndices} = data;\n    let numInstances;\n\n    const autoCharacterSet = characterSet === 'auto' && new Set();\n\n    if (textBuffer && startIndices) {\n      const {texts, characterCount} = getTextFromBuffer({\n        ...(ArrayBuffer.isView(textBuffer) ? {value: textBuffer} : textBuffer),\n        length: data.length,\n        startIndices,\n        characterSet: autoCharacterSet\n      });\n      numInstances = characterCount;\n      getText = (_, {index}) => texts[index];\n    } else {\n      const {iterable, objectInfo} = createIterable(data);\n      startIndices = [0];\n      numInstances = 0;\n\n      for (const object of iterable) {\n        objectInfo.index++;\n        // Break into an array of characters\n        // When dealing with double-length unicode characters, `str.length` or `str[i]` do not work\n        const text = Array.from(getText(object, objectInfo) || '');\n        if (autoCharacterSet) {\n          text.forEach(autoCharacterSet.add, autoCharacterSet);\n        }\n        numInstances += text.length;\n        startIndices.push(numInstances);\n      }\n    }\n\n    this.setState({\n      getText,\n      startIndices,\n      numInstances,\n      characterSet: autoCharacterSet || characterSet\n    });\n  }\n\n  // Returns the x, y offsets of each character in a text string\n  getBoundingRect(object, objectInfo) {\n    const iconMapping = this.state.fontAtlasManager.mapping;\n    const {getText} = this.state;\n    const {wordBreak, maxWidth, lineHeight, getTextAnchor, getAlignmentBaseline} = this.props;\n\n    const paragraph = getText(object, objectInfo) || '';\n    const {\n      size: [width, height]\n    } = transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping);\n    const anchorX =\n      TEXT_ANCHOR[\n        typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor\n      ];\n    const anchorY =\n      ALIGNMENT_BASELINE[\n        typeof getAlignmentBaseline === 'function'\n          ? getAlignmentBaseline(object, objectInfo)\n          : getAlignmentBaseline\n      ];\n\n    return [((anchorX - 1) * width) / 2, ((anchorY - 1) * height) / 2, width, height];\n  }\n\n  // Returns the x, y, w, h of each text object\n  getIconOffsets(object, objectInfo) {\n    const iconMapping = this.state.fontAtlasManager.mapping;\n    const {getText} = this.state;\n    const {wordBreak, maxWidth, lineHeight, getTextAnchor, getAlignmentBaseline} = this.props;\n\n    const paragraph = getText(object, objectInfo) || '';\n    const {\n      x,\n      y,\n      rowWidth,\n      size: [width, height]\n    } = transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping);\n    const anchorX =\n      TEXT_ANCHOR[\n        typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor\n      ];\n    const anchorY =\n      ALIGNMENT_BASELINE[\n        typeof getAlignmentBaseline === 'function'\n          ? getAlignmentBaseline(object, objectInfo)\n          : getAlignmentBaseline\n      ];\n\n    const numCharacters = x.length;\n    const offsets = new Array(numCharacters * 2);\n    let index = 0;\n\n    for (let i = 0; i < numCharacters; i++) {\n      // For a multi-line object, offset in x-direction needs consider\n      // the row offset in the paragraph and the object offset in the row\n      const rowOffset = ((1 - anchorX) * (width - rowWidth[i])) / 2;\n      offsets[index++] = ((anchorX - 1) * width) / 2 + rowOffset + x[i];\n      offsets[index++] = ((anchorY - 1) * height) / 2 + y[i];\n    }\n    return offsets;\n  }\n\n  renderLayers() {\n    const {\n      startIndices,\n      numInstances,\n      getText,\n      fontAtlasManager: {scale, texture, mapping},\n      styleVersion\n    } = this.state;\n\n    const {\n      data,\n      _dataDiff,\n      getPosition,\n      getColor,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      getBackgroundColor,\n      getBorderColor,\n      getBorderWidth,\n      backgroundPadding,\n      background,\n      billboard,\n      fontSettings,\n      outlineWidth,\n      outlineColor,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      transitions,\n      updateTriggers\n    } = this.props;\n\n    const CharactersLayerClass = this.getSubLayerClass('characters', MultiIconLayer);\n    const BackgroundLayerClass = this.getSubLayerClass('background', TextBackgroundLayer);\n\n    return [\n      background &&\n        new BackgroundLayerClass(\n          {\n            // background props\n            getFillColor: getBackgroundColor,\n            getLineColor: getBorderColor,\n            getLineWidth: getBorderWidth,\n            padding: backgroundPadding,\n\n            // props shared with characters layer\n            getPosition,\n            getSize,\n            getAngle,\n            getPixelOffset,\n            billboard,\n            sizeScale: sizeScale / this.state.fontAtlasManager.props.fontSize,\n            sizeUnits,\n            sizeMinPixels,\n            sizeMaxPixels,\n\n            transitions: transitions && {\n              getPosition: transitions.getPosition,\n              getAngle: transitions.getAngle,\n              getSize: transitions.getSize,\n              getFillColor: transitions.getBackgroundColor,\n              getLineColor: transitions.getBorderColor,\n              getLineWidth: transitions.getBorderWidth,\n              getPixelOffset: transitions.getPixelOffset\n            }\n          },\n          this.getSubLayerProps({\n            id: 'background',\n            updateTriggers: {\n              getPosition: updateTriggers.getPosition,\n              getAngle: updateTriggers.getAngle,\n              getSize: updateTriggers.getSize,\n              getFillColor: updateTriggers.getBackgroundColor,\n              getLineColor: updateTriggers.getBorderColor,\n              getLineWidth: updateTriggers.getBorderWidth,\n              getPixelOffset: updateTriggers.getPixelOffset,\n              getBoundingRect: {\n                getText: updateTriggers.getText,\n                getTextAnchor: updateTriggers.getTextAnchor,\n                getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n                styleVersion\n              }\n            }\n          }),\n          {\n            data:\n              data.attributes && data.attributes.background\n                ? {length: data.length, attributes: data.attributes.background}\n                : data,\n            _dataDiff,\n            // Maintain the same background behavior as <=8.3. Remove in v9?\n            autoHighlight: false,\n            getBoundingRect: this.getBoundingRect.bind(this)\n          }\n        ),\n      new CharactersLayerClass(\n        {\n          sdf: fontSettings.sdf,\n          smoothing: Number.isFinite(fontSettings.smoothing)\n            ? fontSettings.smoothing\n            : DEFAULT_FONT_SETTINGS.smoothing,\n          outlineWidth,\n          outlineColor,\n          iconAtlas: texture,\n          iconMapping: mapping,\n\n          getPosition,\n          getColor,\n          getSize,\n          getAngle,\n          getPixelOffset,\n\n          billboard,\n          sizeScale: sizeScale * scale,\n          sizeUnits,\n          sizeMinPixels: sizeMinPixels * scale,\n          sizeMaxPixels: sizeMaxPixels * scale,\n\n          transitions: transitions && {\n            getPosition: transitions.getPosition,\n            getAngle: transitions.getAngle,\n            getColor: transitions.getColor,\n            getSize: transitions.getSize,\n            getPixelOffset: transitions.getPixelOffset\n          }\n        },\n        this.getSubLayerProps({\n          id: 'characters',\n          updateTriggers: {\n            getIcon: updateTriggers.getText,\n            getPosition: updateTriggers.getPosition,\n            getAngle: updateTriggers.getAngle,\n            getColor: updateTriggers.getColor,\n            getSize: updateTriggers.getSize,\n            getPixelOffset: updateTriggers.getPixelOffset,\n            getIconOffsets: {\n              getText: updateTriggers.getText,\n              getTextAnchor: updateTriggers.getTextAnchor,\n              getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n              styleVersion\n            }\n          }\n        }),\n        {\n          data,\n          _dataDiff,\n          startIndices,\n          numInstances,\n          getIconOffsets: this.getIconOffsets.bind(this),\n          getIcon: getText\n        }\n      )\n    ];\n  }\n\n  static set fontAtlasCacheLimit(limit) {\n    setFontAtlasCacheLimit(limit);\n  }\n}\n\nTextLayer.layerName = 'TextLayer';\nTextLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}