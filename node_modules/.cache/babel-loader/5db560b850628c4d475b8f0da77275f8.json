{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport Matrix4 from './matrix4';\nimport Vector3 from './vector3';\nimport Euler from './euler';\n\nvar Pose = /*#__PURE__*/function () {\n  function Pose() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$x = _ref.x,\n        x = _ref$x === void 0 ? 0 : _ref$x,\n        _ref$y = _ref.y,\n        y = _ref$y === void 0 ? 0 : _ref$y,\n        _ref$z = _ref.z,\n        z = _ref$z === void 0 ? 0 : _ref$z,\n        _ref$roll = _ref.roll,\n        roll = _ref$roll === void 0 ? 0 : _ref$roll,\n        _ref$pitch = _ref.pitch,\n        pitch = _ref$pitch === void 0 ? 0 : _ref$pitch,\n        _ref$yaw = _ref.yaw,\n        yaw = _ref$yaw === void 0 ? 0 : _ref$yaw,\n        _ref$position = _ref.position,\n        position = _ref$position === void 0 ? undefined : _ref$position,\n        _ref$orientation = _ref.orientation,\n        orientation = _ref$orientation === void 0 ? undefined : _ref$orientation;\n\n    _classCallCheck(this, Pose);\n\n    if (Array.isArray(position) && position.length === 3) {\n      this.position = new Vector3(position);\n    } else {\n      this.position = new Vector3(x, y, z);\n    }\n\n    if (Array.isArray(orientation) && orientation.length === 4) {\n      this.orientation = new Euler(orientation, orientation[3]);\n    } else {\n      this.orientation = new Euler(roll, pitch, yaw, Euler.RollPitchYaw);\n    }\n  }\n\n  _createClass(Pose, [{\n    key: \"x\",\n    get: function get() {\n      return this.position.x;\n    },\n    set: function set(value) {\n      this.position.x = value;\n    }\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this.position.y;\n    },\n    set: function set(value) {\n      this.position.y = value;\n    }\n  }, {\n    key: \"z\",\n    get: function get() {\n      return this.position.z;\n    },\n    set: function set(value) {\n      this.position.z = value;\n    }\n  }, {\n    key: \"roll\",\n    get: function get() {\n      return this.orientation.roll;\n    },\n    set: function set(value) {\n      this.orientation.roll = value;\n    }\n  }, {\n    key: \"pitch\",\n    get: function get() {\n      return this.orientation.pitch;\n    },\n    set: function set(value) {\n      this.orientation.pitch = value;\n    }\n  }, {\n    key: \"yaw\",\n    get: function get() {\n      return this.orientation.yaw;\n    },\n    set: function set(value) {\n      this.orientation.yaw = value;\n    }\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      return this.position;\n    }\n  }, {\n    key: \"getOrientation\",\n    value: function getOrientation() {\n      return this.orientation;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(pose) {\n      if (!pose) {\n        return false;\n      }\n\n      return this.position.equals(pose.position) && this.orientation.equals(pose.orientation);\n    }\n  }, {\n    key: \"exactEquals\",\n    value: function exactEquals(pose) {\n      if (!pose) {\n        return false;\n      }\n\n      return this.position.exactEquals(pose.position) && this.orientation.exactEquals(pose.orientation);\n    }\n  }, {\n    key: \"getTransformationMatrix\",\n    value: function getTransformationMatrix() {\n      var sr = Math.sin(this.roll);\n      var sp = Math.sin(this.pitch);\n      var sw = Math.sin(this.yaw);\n      var cr = Math.cos(this.roll);\n      var cp = Math.cos(this.pitch);\n      var cw = Math.cos(this.yaw);\n      var matrix = new Matrix4().setRowMajor(cw * cp, -sw * cr + cw * sp * sr, sw * sr + cw * sp * cr, this.x, sw * cp, cw * cr + sw * sp * sr, -cw * sr + sw * sp * cr, this.y, -sp, cp * sr, cp * cr, this.z, 0, 0, 0, 1);\n      return matrix;\n    }\n  }, {\n    key: \"getTransformationMatrixFromPose\",\n    value: function getTransformationMatrixFromPose(pose) {\n      return new Matrix4().multiplyRight(this.getTransformationMatrix()).multiplyRight(pose.getTransformationMatrix().invert());\n    }\n  }, {\n    key: \"getTransformationMatrixToPose\",\n    value: function getTransformationMatrixToPose(pose) {\n      return new Matrix4().multiplyRight(pose.getTransformationMatrix()).multiplyRight(this.getTransformationMatrix().invert());\n    }\n  }]);\n\n  return Pose;\n}();\n\nexport { Pose as default };","map":{"version":3,"mappings":"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","names":["Matrix4","Vector3","Euler","Pose","constructor","x","y","z","roll","pitch","yaw","position","undefined","orientation","Array","isArray","length","RollPitchYaw","value","getPosition","getOrientation","equals","pose","exactEquals","getTransformationMatrix","sr","Math","sin","sp","sw","cr","cos","cp","cw","matrix","setRowMajor","getTransformationMatrixFromPose","multiplyRight","invert","getTransformationMatrixToPose"],"sources":["../../../src/classes/pose.js"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport Matrix4 from './matrix4';\nimport Vector3 from './vector3';\nimport Euler from './euler';\n\nexport default class Pose {\n  // @ts-ignore TS2740: Type '{}' is missing the following properties from type\n  constructor({\n    x = 0,\n    y = 0,\n    z = 0,\n    roll = 0,\n    pitch = 0,\n    yaw = 0,\n    position = undefined,\n    orientation = undefined\n  } = {}) {\n    if (Array.isArray(position) && position.length === 3) {\n      this.position = new Vector3(position);\n    } else {\n      this.position = new Vector3(x, y, z);\n    }\n    if (Array.isArray(orientation) && orientation.length === 4) {\n      this.orientation = new Euler(orientation, orientation[3]);\n    } else {\n      this.orientation = new Euler(roll, pitch, yaw, Euler.RollPitchYaw);\n    }\n  }\n\n  get x() {\n    return this.position.x;\n  }\n  set x(value) {\n    this.position.x = value;\n  }\n  get y() {\n    return this.position.y;\n  }\n  set y(value) {\n    this.position.y = value;\n  }\n  get z() {\n    return this.position.z;\n  }\n  set z(value) {\n    this.position.z = value;\n  }\n  get roll() {\n    return this.orientation.roll;\n  }\n  set roll(value) {\n    this.orientation.roll = value;\n  }\n  get pitch() {\n    return this.orientation.pitch;\n  }\n  set pitch(value) {\n    this.orientation.pitch = value;\n  }\n  get yaw() {\n    return this.orientation.yaw;\n  }\n  set yaw(value) {\n    this.orientation.yaw = value;\n  }\n\n  getPosition() {\n    return this.position;\n  }\n\n  getOrientation() {\n    return this.orientation;\n  }\n\n  equals(pose) {\n    if (!pose) {\n      return false;\n    }\n    return this.position.equals(pose.position) && this.orientation.equals(pose.orientation);\n  }\n\n  exactEquals(pose) {\n    if (!pose) {\n      return false;\n    }\n    return (\n      this.position.exactEquals(pose.position) && this.orientation.exactEquals(pose.orientation)\n    );\n  }\n\n  getTransformationMatrix() {\n    // setup precomputations for the sin/cos of the angles\n    const sr = Math.sin(this.roll);\n    const sp = Math.sin(this.pitch);\n    const sw = Math.sin(this.yaw);\n\n    const cr = Math.cos(this.roll);\n    const cp = Math.cos(this.pitch);\n    const cw = Math.cos(this.yaw);\n\n    const matrix = new Matrix4().setRowMajor(\n      cw * cp, // 0,0\n      -sw * cr + cw * sp * sr, // 0,1\n      sw * sr + cw * sp * cr, // 0,2\n      this.x, // 0,3\n\n      sw * cp, // 1,0\n      cw * cr + sw * sp * sr, // 1,1\n      -cw * sr + sw * sp * cr, // 1,2\n      this.y, // 1,3\n\n      -sp, // 2,0\n      cp * sr, // 2,1\n      cp * cr, // 2,2\n      this.z, // 2,3\n\n      0,\n      0,\n      0,\n      1\n    );\n\n    return matrix;\n  }\n\n  getTransformationMatrixFromPose(pose) {\n    return new Matrix4()\n      .multiplyRight(this.getTransformationMatrix())\n      .multiplyRight(pose.getTransformationMatrix().invert());\n  }\n\n  getTransformationMatrixToPose(pose) {\n    return new Matrix4()\n      .multiplyRight(pose.getTransformationMatrix())\n      .multiplyRight(this.getTransformationMatrix().invert());\n  }\n}\n"]},"metadata":{},"sourceType":"module"}