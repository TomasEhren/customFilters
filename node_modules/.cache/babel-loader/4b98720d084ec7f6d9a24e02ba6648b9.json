{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Matrix4 } from '@math.gl/core';\nimport { Buffer, Accessor, log } from '@luma.gl/webgl';\nimport GroupNode from '../scenegraph/group-node';\nimport GLTFAnimator from './gltf-animator';\nimport createGLTFModel from './create-gltf-model';\nvar ATTRIBUTE_TYPE_TO_COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\nvar DEFAULT_OPTIONS = {\n  modelOptions: {},\n  pbrDebug: false,\n  imageBasedLightingEnvironment: null,\n  lights: true,\n  useTangents: false\n};\n\nvar GLTFInstantiator = /*#__PURE__*/function () {\n  function GLTFInstantiator(gl) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, GLTFInstantiator);\n\n    this.gl = gl;\n    this.options = Object.assign({}, DEFAULT_OPTIONS, options);\n  }\n\n  _createClass(GLTFInstantiator, [{\n    key: \"instantiate\",\n    value: function instantiate(gltf) {\n      var _this = this;\n\n      this.gltf = gltf;\n      var scenes = (gltf.scenes || []).map(function (scene) {\n        return _this.createScene(scene);\n      });\n      return scenes;\n    }\n  }, {\n    key: \"createAnimator\",\n    value: function createAnimator() {\n      if (Array.isArray(this.gltf.animations)) {\n        return new GLTFAnimator(this.gltf);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"createScene\",\n    value: function createScene(gltfScene) {\n      var _this2 = this;\n\n      var gltfNodes = gltfScene.nodes || [];\n      var nodes = gltfNodes.map(function (node) {\n        return _this2.createNode(node);\n      });\n      var scene = new GroupNode({\n        id: gltfScene.name || gltfScene.id,\n        children: nodes\n      });\n      return scene;\n    }\n  }, {\n    key: \"createNode\",\n    value: function createNode(gltfNode) {\n      var _this3 = this;\n\n      if (!gltfNode._node) {\n        var gltfChildren = gltfNode.children || [];\n        var children = gltfChildren.map(function (child) {\n          return _this3.createNode(child);\n        });\n\n        if (gltfNode.mesh) {\n          children.push(this.createMesh(gltfNode.mesh));\n        }\n\n        var node = new GroupNode({\n          id: gltfNode.name || gltfNode.id,\n          children: children\n        });\n\n        if (gltfNode.matrix) {\n          node.setMatrix(gltfNode.matrix);\n        } else {\n          node.matrix.identity();\n\n          if (gltfNode.translation) {\n            node.matrix.translate(gltfNode.translation);\n          }\n\n          if (gltfNode.rotation) {\n            var rotationMatrix = new Matrix4().fromQuaternion(gltfNode.rotation);\n            node.matrix.multiplyRight(rotationMatrix);\n          }\n\n          if (gltfNode.scale) {\n            node.matrix.scale(gltfNode.scale);\n          }\n        }\n\n        gltfNode._node = node;\n      }\n\n      return gltfNode._node;\n    }\n  }, {\n    key: \"createMesh\",\n    value: function createMesh(gltfMesh) {\n      var _this4 = this;\n\n      if (!gltfMesh._mesh) {\n        var gltfPrimitives = gltfMesh.primitives || [];\n        var primitives = gltfPrimitives.map(function (gltfPrimitive, i) {\n          return _this4.createPrimitive(gltfPrimitive, i, gltfMesh);\n        });\n        var mesh = new GroupNode({\n          id: gltfMesh.name || gltfMesh.id,\n          children: primitives\n        });\n        gltfMesh._mesh = mesh;\n      }\n\n      return gltfMesh._mesh;\n    }\n  }, {\n    key: \"getVertexCount\",\n    value: function getVertexCount(attributes) {\n      log.warn('getVertexCount() not found')();\n    }\n  }, {\n    key: \"createPrimitive\",\n    value: function createPrimitive(gltfPrimitive, i, gltfMesh) {\n      return createGLTFModel(this.gl, Object.assign({\n        id: gltfPrimitive.name || \"\".concat(gltfMesh.name || gltfMesh.id, \"-primitive-\").concat(i),\n        drawMode: gltfPrimitive.mode || 4,\n        vertexCount: gltfPrimitive.indices ? gltfPrimitive.indices.count : this.getVertexCount(gltfPrimitive.attributes),\n        attributes: this.createAttributes(gltfPrimitive.attributes, gltfPrimitive.indices),\n        material: gltfPrimitive.material\n      }, this.options));\n    }\n  }, {\n    key: \"createAttributes\",\n    value: function createAttributes(attributes, indices) {\n      var _this5 = this;\n\n      var loadedAttributes = {};\n      Object.keys(attributes).forEach(function (attrName) {\n        loadedAttributes[attrName] = _this5.createAccessor(attributes[attrName], _this5.createBuffer(attributes[attrName], _this5.gl.ARRAY_BUFFER));\n      });\n\n      if (indices) {\n        loadedAttributes.indices = this.createAccessor(indices, this.createBuffer(indices, this.gl.ELEMENT_ARRAY_BUFFER));\n      }\n\n      log.info(4, 'glTF Attributes', {\n        attributes: attributes,\n        indices: indices,\n        generated: loadedAttributes\n      })();\n      return loadedAttributes;\n    }\n  }, {\n    key: \"createBuffer\",\n    value: function createBuffer(attribute, target) {\n      if (!attribute.bufferView) {\n        attribute.bufferView = {};\n      }\n\n      var bufferView = attribute.bufferView;\n\n      if (!bufferView.lumaBuffers) {\n        bufferView.lumaBuffers = {};\n      }\n\n      if (!bufferView.lumaBuffers[target]) {\n        bufferView.lumaBuffers[target] = new Buffer(this.gl, {\n          id: \"from-\".concat(bufferView.id),\n          data: bufferView.data || attribute.value,\n          target: target\n        });\n      }\n\n      return bufferView.lumaBuffers[target];\n    }\n  }, {\n    key: \"createAccessor\",\n    value: function createAccessor(accessor, buffer) {\n      return new Accessor({\n        buffer: buffer,\n        offset: accessor.byteOffset || 0,\n        stride: accessor.bufferView.byteStride || 0,\n        type: accessor.componentType,\n        size: ATTRIBUTE_TYPE_TO_COMPONENTS[accessor.type]\n      });\n    }\n  }, {\n    key: \"createSampler\",\n    value: function createSampler(gltfSampler) {\n      return gltfSampler;\n    }\n  }, {\n    key: \"needsPOT\",\n    value: function needsPOT() {\n      return false;\n    }\n  }]);\n\n  return GLTFInstantiator;\n}();\n\nexport { GLTFInstantiator as default };","map":{"version":3,"mappings":"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","names":["Matrix4","Buffer","Accessor","log","GroupNode","GLTFAnimator","createGLTFModel","ATTRIBUTE_TYPE_TO_COMPONENTS","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","DEFAULT_OPTIONS","modelOptions","pbrDebug","imageBasedLightingEnvironment","lights","useTangents","GLTFInstantiator","constructor","gl","options","Object","assign","instantiate","gltf","scenes","map","scene","createScene","createAnimator","Array","isArray","animations","gltfScene","gltfNodes","nodes","node","createNode","id","name","children","gltfNode","_node","gltfChildren","child","mesh","push","createMesh","matrix","setMatrix","identity","translation","translate","rotation","rotationMatrix","fromQuaternion","multiplyRight","scale","gltfMesh","_mesh","gltfPrimitives","primitives","gltfPrimitive","i","createPrimitive","getVertexCount","attributes","warn","drawMode","mode","vertexCount","indices","count","createAttributes","material","loadedAttributes","keys","forEach","attrName","createAccessor","createBuffer","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","info","generated","attribute","target","bufferView","lumaBuffers","data","value","accessor","buffer","offset","byteOffset","stride","byteStride","type","componentType","size","createSampler","gltfSampler","needsPOT"],"sources":["../../../src/gltf/gltf-instantiator.js"],"sourcesContent":["import {Matrix4} from '@math.gl/core';\nimport {Buffer, Accessor, log} from '@luma.gl/webgl';\nimport GroupNode from '../scenegraph/group-node';\n\nimport GLTFAnimator from './gltf-animator';\nimport createGLTFModel from './create-gltf-model';\n\n// TODO: import {ATTRIBUTE_TYPE_TO_COMPONENTS} from '@loaders.gl/gltf';\nconst ATTRIBUTE_TYPE_TO_COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\n\nconst DEFAULT_OPTIONS = {\n  modelOptions: {},\n  pbrDebug: false,\n  imageBasedLightingEnvironment: null,\n  lights: true,\n  useTangents: false\n};\n\n// GLTF instantiator for luma.gl\n// Walks the parsed and resolved glTF structure and builds a luma.gl scenegraph\nexport default class GLTFInstantiator {\n  constructor(gl, options = {}) {\n    this.gl = gl;\n    this.options = Object.assign({}, DEFAULT_OPTIONS, options);\n  }\n\n  instantiate(gltf) {\n    this.gltf = gltf;\n    const scenes = (gltf.scenes || []).map(scene => this.createScene(scene));\n    return scenes;\n  }\n\n  createAnimator() {\n    if (Array.isArray(this.gltf.animations)) {\n      return new GLTFAnimator(this.gltf);\n    }\n\n    return null;\n  }\n\n  createScene(gltfScene) {\n    const gltfNodes = gltfScene.nodes || [];\n    const nodes = gltfNodes.map(node => this.createNode(node));\n    const scene = new GroupNode({\n      id: gltfScene.name || gltfScene.id,\n      children: nodes\n    });\n    return scene;\n  }\n\n  createNode(gltfNode) {\n    if (!gltfNode._node) {\n      const gltfChildren = gltfNode.children || [];\n      const children = gltfChildren.map(child => this.createNode(child));\n\n      // Node can have children nodes and meshes at the same time\n      if (gltfNode.mesh) {\n        children.push(this.createMesh(gltfNode.mesh));\n      }\n\n      const node = new GroupNode({\n        id: gltfNode.name || gltfNode.id,\n        children\n      });\n\n      if (gltfNode.matrix) {\n        node.setMatrix(gltfNode.matrix);\n      } else {\n        node.matrix.identity();\n\n        if (gltfNode.translation) {\n          node.matrix.translate(gltfNode.translation);\n        }\n\n        if (gltfNode.rotation) {\n          const rotationMatrix = new Matrix4().fromQuaternion(gltfNode.rotation);\n          node.matrix.multiplyRight(rotationMatrix);\n        }\n\n        if (gltfNode.scale) {\n          node.matrix.scale(gltfNode.scale);\n        }\n      }\n      gltfNode._node = node;\n    }\n\n    return gltfNode._node;\n  }\n\n  createMesh(gltfMesh) {\n    // TODO: avoid changing the gltf\n    if (!gltfMesh._mesh) {\n      const gltfPrimitives = gltfMesh.primitives || [];\n      const primitives = gltfPrimitives.map((gltfPrimitive, i) =>\n        this.createPrimitive(gltfPrimitive, i, gltfMesh)\n      );\n      const mesh = new GroupNode({\n        id: gltfMesh.name || gltfMesh.id,\n        children: primitives\n      });\n      gltfMesh._mesh = mesh;\n    }\n\n    return gltfMesh._mesh;\n  }\n\n  getVertexCount(attributes) {\n    // TODO: implement this\n    log.warn('getVertexCount() not found')();\n  }\n\n  createPrimitive(gltfPrimitive, i, gltfMesh) {\n    return createGLTFModel(\n      this.gl,\n      Object.assign(\n        {\n          id: gltfPrimitive.name || `${gltfMesh.name || gltfMesh.id}-primitive-${i}`,\n          drawMode: gltfPrimitive.mode || 4,\n          vertexCount: gltfPrimitive.indices\n            ? gltfPrimitive.indices.count\n            : this.getVertexCount(gltfPrimitive.attributes),\n          attributes: this.createAttributes(gltfPrimitive.attributes, gltfPrimitive.indices),\n          material: gltfPrimitive.material\n        },\n        this.options\n      )\n    );\n  }\n\n  createAttributes(attributes, indices) {\n    const loadedAttributes = {};\n\n    Object.keys(attributes).forEach(attrName => {\n      loadedAttributes[attrName] = this.createAccessor(\n        attributes[attrName],\n        this.createBuffer(attributes[attrName], this.gl.ARRAY_BUFFER)\n      );\n    });\n\n    if (indices) {\n      loadedAttributes.indices = this.createAccessor(\n        indices,\n        this.createBuffer(indices, this.gl.ELEMENT_ARRAY_BUFFER)\n      );\n    }\n\n    log.info(4, 'glTF Attributes', {attributes, indices, generated: loadedAttributes})();\n\n    return loadedAttributes;\n  }\n\n  createBuffer(attribute, target) {\n    if (!attribute.bufferView) {\n      // Draco decoded files do not have a bufferView\n      attribute.bufferView = {};\n    }\n\n    const {bufferView} = attribute;\n    if (!bufferView.lumaBuffers) {\n      bufferView.lumaBuffers = {};\n    }\n\n    if (!bufferView.lumaBuffers[target]) {\n      bufferView.lumaBuffers[target] = new Buffer(this.gl, {\n        id: `from-${bufferView.id}`,\n        // Draco decoded files have attribute.value\n        data: bufferView.data || attribute.value,\n        target\n      });\n    }\n\n    return bufferView.lumaBuffers[target];\n  }\n\n  createAccessor(accessor, buffer) {\n    return new Accessor({\n      buffer,\n      offset: accessor.byteOffset || 0,\n      stride: accessor.bufferView.byteStride || 0,\n      type: accessor.componentType,\n      size: ATTRIBUTE_TYPE_TO_COMPONENTS[accessor.type]\n    });\n  }\n\n  // TODO - create sampler in WebGL2\n  createSampler(gltfSampler) {\n    return gltfSampler;\n  }\n\n  // Helper methods (move to GLTFLoader.resolve...?)\n\n  needsPOT() {\n    // Has a wrapping mode (either wrapS or wrapT) equal to REPEAT or MIRRORED_REPEAT, or\n    // Has a minification filter (minFilter) that uses mipmapping\n    // (NEAREST_MIPMAP_NEAREST, NEAREST_MIPMAP_LINEAR,\n    // LINEAR_MIPMAP_NEAREST, or LINEAR_MIPMAP_LINEAR).\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}