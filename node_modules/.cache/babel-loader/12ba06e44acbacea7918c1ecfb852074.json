{"ast":null,"code":"import _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Matrix4, Vector3 } from '@math.gl/core';\nimport { Ellipsoid } from '@math.gl/geospatial';\nimport { Stats } from '@probe.gl/stats';\nimport { RequestScheduler, assert, path } from '@loaders.gl/loader-utils';\nimport TilesetCache from './tileset-cache';\nimport { calculateTransformProps } from './helpers/transform-utils';\nimport { getFrameState } from './helpers/frame-state';\nimport { getZoomFromBoundingVolume } from './helpers/zoom';\nimport Tile3D from './tile-3d';\nimport Tileset3DTraverser from './traversers/tileset-3d-traverser';\nimport TilesetTraverser from './traversers/tileset-traverser';\nimport I3SetTraverser from './traversers/i3s-tileset-traverser';\nimport { TILESET_TYPE } from '../constants';\nvar DEFAULT_PROPS = {\n  description: '',\n  ellipsoid: Ellipsoid.WGS84,\n  modelMatrix: new Matrix4(),\n  throttleRequests: true,\n  maxRequests: 64,\n  maximumMemoryUsage: 32,\n  onTileLoad: function onTileLoad() {},\n  onTileUnload: function onTileUnload() {},\n  onTileError: function onTileError() {},\n  onTraversalComplete: function onTraversalComplete(selectedTiles) {\n    return selectedTiles;\n  },\n  contentLoader: undefined,\n  viewDistanceScale: 1.0,\n  maximumScreenSpaceError: 8,\n  loadTiles: true,\n  updateTransforms: true,\n  viewportTraversersMap: null,\n  loadOptions: {\n    fetch: {}\n  },\n  attributions: [],\n  basePath: '',\n  i3s: {}\n};\nvar TILES_TOTAL = 'Tiles In Tileset(s)';\nvar TILES_IN_MEMORY = 'Tiles In Memory';\nvar TILES_IN_VIEW = 'Tiles In View';\nvar TILES_RENDERABLE = 'Tiles To Render';\nvar TILES_LOADED = 'Tiles Loaded';\nvar TILES_LOADING = 'Tiles Loading';\nvar TILES_UNLOADED = 'Tiles Unloaded';\nvar TILES_LOAD_FAILED = 'Failed Tile Loads';\nvar POINTS_COUNT = 'Points';\nvar TILES_GPU_MEMORY = 'Tile Memory Use';\n\nvar Tileset3D = /*#__PURE__*/function () {\n  function Tileset3D(json, options) {\n    _classCallCheck(this, Tileset3D);\n\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"loadOptions\", void 0);\n\n    _defineProperty(this, \"type\", void 0);\n\n    _defineProperty(this, \"tileset\", void 0);\n\n    _defineProperty(this, \"loader\", void 0);\n\n    _defineProperty(this, \"url\", void 0);\n\n    _defineProperty(this, \"basePath\", void 0);\n\n    _defineProperty(this, \"modelMatrix\", void 0);\n\n    _defineProperty(this, \"ellipsoid\", void 0);\n\n    _defineProperty(this, \"lodMetricType\", void 0);\n\n    _defineProperty(this, \"lodMetricValue\", void 0);\n\n    _defineProperty(this, \"refine\", void 0);\n\n    _defineProperty(this, \"root\", void 0);\n\n    _defineProperty(this, \"roots\", void 0);\n\n    _defineProperty(this, \"asset\", void 0);\n\n    _defineProperty(this, \"description\", void 0);\n\n    _defineProperty(this, \"properties\", void 0);\n\n    _defineProperty(this, \"extras\", void 0);\n\n    _defineProperty(this, \"attributions\", void 0);\n\n    _defineProperty(this, \"credits\", void 0);\n\n    _defineProperty(this, \"stats\", void 0);\n\n    _defineProperty(this, \"traverseCounter\", void 0);\n\n    _defineProperty(this, \"geometricError\", void 0);\n\n    _defineProperty(this, \"selectedTiles\", void 0);\n\n    _defineProperty(this, \"cartographicCenter\", void 0);\n\n    _defineProperty(this, \"cartesianCenter\", void 0);\n\n    _defineProperty(this, \"zoom\", void 0);\n\n    _defineProperty(this, \"boundingVolume\", void 0);\n\n    _defineProperty(this, \"gpuMemoryUsageInBytes\", void 0);\n\n    _defineProperty(this, \"dynamicScreenSpaceErrorComputedDensity\", void 0);\n\n    _defineProperty(this, \"_traverser\", void 0);\n\n    _defineProperty(this, \"_cache\", void 0);\n\n    _defineProperty(this, \"_requestScheduler\", void 0);\n\n    _defineProperty(this, \"_frameNumber\", void 0);\n\n    _defineProperty(this, \"_queryParamsString\", void 0);\n\n    _defineProperty(this, \"_queryParams\", void 0);\n\n    _defineProperty(this, \"_extensionsUsed\", void 0);\n\n    _defineProperty(this, \"_tiles\", void 0);\n\n    _defineProperty(this, \"_pendingCount\", void 0);\n\n    _defineProperty(this, \"lastUpdatedVieports\", void 0);\n\n    _defineProperty(this, \"_requestedTiles\", void 0);\n\n    _defineProperty(this, \"_emptyTiles\", void 0);\n\n    _defineProperty(this, \"frameStateData\", void 0);\n\n    _defineProperty(this, \"maximumMemoryUsage\", void 0);\n\n    assert(json);\n    this.options = _objectSpread(_objectSpread({}, DEFAULT_PROPS), options);\n    this.tileset = json;\n    this.loader = json.loader;\n    this.type = json.type;\n    this.url = json.url;\n    this.basePath = json.basePath || path.dirname(this.url);\n    this.modelMatrix = this.options.modelMatrix;\n    this.ellipsoid = this.options.ellipsoid;\n    this.lodMetricType = json.lodMetricType;\n    this.lodMetricValue = json.lodMetricValue;\n    this.refine = json.root.refine;\n    this.loadOptions = this.options.loadOptions || {};\n    this.root = null;\n    this.roots = {};\n    this.cartographicCenter = null;\n    this.cartesianCenter = null;\n    this.zoom = 1;\n    this.boundingVolume = null;\n    this.traverseCounter = 0;\n    this.geometricError = 0;\n    this._traverser = this._initializeTraverser();\n    this._cache = new TilesetCache();\n    this._requestScheduler = new RequestScheduler({\n      throttleRequests: this.options.throttleRequests,\n      maxRequests: this.options.maxRequests\n    });\n    this._frameNumber = 0;\n    this._pendingCount = 0;\n    this._tiles = {};\n    this.selectedTiles = [];\n    this._emptyTiles = [];\n    this._requestedTiles = [];\n    this.frameStateData = {};\n    this.lastUpdatedVieports = null;\n    this._queryParams = {};\n    this._queryParamsString = '';\n    this.maximumMemoryUsage = this.options.maximumMemoryUsage || 32;\n    this.gpuMemoryUsageInBytes = 0;\n    this.stats = new Stats({\n      id: this.url\n    });\n\n    this._initializeStats();\n\n    this._extensionsUsed = undefined;\n    this.dynamicScreenSpaceErrorComputedDensity = 0.0;\n    this.extras = null;\n    this.asset = {};\n    this.credits = {};\n    this.description = this.options.description || '';\n\n    this._initializeTileSet(json);\n  }\n\n  _createClass(Tileset3D, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this._destroy();\n    }\n  }, {\n    key: \"isLoaded\",\n    value: function isLoaded() {\n      return this._pendingCount === 0 && this._frameNumber !== 0;\n    }\n  }, {\n    key: \"tiles\",\n    get: function get() {\n      return Object.values(this._tiles);\n    }\n  }, {\n    key: \"frameNumber\",\n    get: function get() {\n      return this._frameNumber;\n    }\n  }, {\n    key: \"queryParams\",\n    get: function get() {\n      if (!this._queryParamsString) {\n        this._queryParamsString = getQueryParamString(this._queryParams);\n      }\n\n      return this._queryParamsString;\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      this.options = _objectSpread(_objectSpread({}, this.options), props);\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = _objectSpread(_objectSpread({}, this.options), options);\n    }\n  }, {\n    key: \"getTileUrl\",\n    value: function getTileUrl(tilePath) {\n      var isDataUrl = tilePath.startsWith('data:');\n\n      if (isDataUrl) {\n        return tilePath;\n      }\n\n      return \"\".concat(tilePath).concat(this.queryParams);\n    }\n  }, {\n    key: \"hasExtension\",\n    value: function hasExtension(extensionName) {\n      return Boolean(this._extensionsUsed && this._extensionsUsed.indexOf(extensionName) > -1);\n    }\n  }, {\n    key: \"update\",\n    value: function update(viewports) {\n      if ('loadTiles' in this.options && !this.options.loadTiles) {\n        return;\n      }\n\n      if (this.traverseCounter > 0) {\n        return;\n      }\n\n      if (!viewports && this.lastUpdatedVieports) {\n        viewports = this.lastUpdatedVieports;\n      } else {\n        this.lastUpdatedVieports = viewports;\n      }\n\n      if (!(viewports instanceof Array)) {\n        viewports = [viewports];\n      }\n\n      this._cache.reset();\n\n      this._frameNumber++;\n      this.traverseCounter = viewports.length;\n      var viewportsToTraverse = [];\n\n      var _iterator = _createForOfIteratorHelper(viewports),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var viewport = _step.value;\n          var id = viewport.id;\n\n          if (this._needTraverse(id)) {\n            viewportsToTraverse.push(id);\n          } else {\n            this.traverseCounter--;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(viewports),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _viewport = _step2.value;\n          var _id = _viewport.id;\n\n          if (!this.roots[_id]) {\n            this.roots[_id] = this._initializeTileHeaders(this.tileset, null);\n          }\n\n          if (!viewportsToTraverse.includes(_id)) {\n            continue;\n          }\n\n          var frameState = getFrameState(_viewport, this._frameNumber);\n\n          this._traverser.traverse(this.roots[_id], frameState, this.options);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"_needTraverse\",\n    value: function _needTraverse(viewportId) {\n      var traverserId = viewportId;\n\n      if (this.options.viewportTraversersMap) {\n        traverserId = this.options.viewportTraversersMap[viewportId];\n      }\n\n      if (traverserId !== viewportId) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_onTraversalEnd\",\n    value: function _onTraversalEnd(frameState) {\n      var id = frameState.viewport.id;\n\n      if (!this.frameStateData[id]) {\n        this.frameStateData[id] = {\n          selectedTiles: [],\n          _requestedTiles: [],\n          _emptyTiles: []\n        };\n      }\n\n      var currentFrameStateData = this.frameStateData[id];\n      var selectedTiles = Object.values(this._traverser.selectedTiles);\n      currentFrameStateData.selectedTiles = selectedTiles;\n      currentFrameStateData._requestedTiles = Object.values(this._traverser.requestedTiles);\n      currentFrameStateData._emptyTiles = Object.values(this._traverser.emptyTiles);\n      this.traverseCounter--;\n\n      if (this.traverseCounter > 0) {\n        return;\n      }\n\n      this._updateTiles();\n    }\n  }, {\n    key: \"_updateTiles\",\n    value: function _updateTiles() {\n      this.selectedTiles = [];\n      this._requestedTiles = [];\n      this._emptyTiles = [];\n\n      for (var frameStateKey in this.frameStateData) {\n        var frameStateDataValue = this.frameStateData[frameStateKey];\n        this.selectedTiles = this.selectedTiles.concat(frameStateDataValue.selectedTiles);\n        this._requestedTiles = this._requestedTiles.concat(frameStateDataValue._requestedTiles);\n        this._emptyTiles = this._emptyTiles.concat(frameStateDataValue._emptyTiles);\n      }\n\n      this.selectedTiles = this.options.onTraversalComplete(this.selectedTiles);\n\n      var _iterator3 = _createForOfIteratorHelper(this.selectedTiles),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var tile = _step3.value;\n          this._tiles[tile.id] = tile;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      this._loadTiles();\n\n      this._unloadTiles();\n\n      this._updateStats();\n    }\n  }, {\n    key: \"_tilesChanged\",\n    value: function _tilesChanged(oldSelectedTiles, selectedTiles) {\n      if (oldSelectedTiles.length !== selectedTiles.length) {\n        return true;\n      }\n\n      var set1 = new Set(oldSelectedTiles.map(function (t) {\n        return t.id;\n      }));\n      var set2 = new Set(selectedTiles.map(function (t) {\n        return t.id;\n      }));\n      var changed = oldSelectedTiles.filter(function (x) {\n        return !set2.has(x.id);\n      }).length > 0;\n      changed = changed || selectedTiles.filter(function (x) {\n        return !set1.has(x.id);\n      }).length > 0;\n      return changed;\n    }\n  }, {\n    key: \"_loadTiles\",\n    value: function _loadTiles() {\n      var _iterator4 = _createForOfIteratorHelper(this._requestedTiles),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var tile = _step4.value;\n\n          if (tile.contentUnloaded) {\n            this._loadTile(tile);\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"_unloadTiles\",\n    value: function _unloadTiles() {\n      this._cache.unloadTiles(this, function (tileset, tile) {\n        return tileset._unloadTile(tile);\n      });\n    }\n  }, {\n    key: \"_updateStats\",\n    value: function _updateStats() {\n      var tilesRenderable = 0;\n      var pointsRenderable = 0;\n\n      var _iterator5 = _createForOfIteratorHelper(this.selectedTiles),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var tile = _step5.value;\n\n          if (tile.contentAvailable && tile.content) {\n            tilesRenderable++;\n\n            if (tile.content.pointCount) {\n              pointsRenderable += tile.content.pointCount;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      this.stats.get(TILES_IN_VIEW).count = this.selectedTiles.length;\n      this.stats.get(TILES_RENDERABLE).count = tilesRenderable;\n      this.stats.get(POINTS_COUNT).count = pointsRenderable;\n    }\n  }, {\n    key: \"_initializeTileSet\",\n    value: function _initializeTileSet(tilesetJson) {\n      this.root = this._initializeTileHeaders(tilesetJson, null);\n\n      if (this.type === TILESET_TYPE.TILES3D) {\n        this._initializeCesiumTileset(tilesetJson);\n      }\n\n      if (this.type === TILESET_TYPE.I3S) {\n        this._initializeI3STileset();\n      }\n\n      this._calculateViewProps();\n    }\n  }, {\n    key: \"_calculateViewProps\",\n    value: function _calculateViewProps() {\n      var root = this.root;\n      assert(root);\n      var center = root.boundingVolume.center;\n\n      if (!center) {\n        console.warn('center was not pre-calculated for the root tile');\n        this.cartographicCenter = new Vector3();\n        this.zoom = 1;\n        return;\n      }\n\n      this.cartographicCenter = Ellipsoid.WGS84.cartesianToCartographic(center, new Vector3());\n      this.cartesianCenter = center;\n      this.zoom = getZoomFromBoundingVolume(root.boundingVolume, this.cartographicCenter);\n    }\n  }, {\n    key: \"_initializeStats\",\n    value: function _initializeStats() {\n      this.stats.get(TILES_TOTAL);\n      this.stats.get(TILES_LOADING);\n      this.stats.get(TILES_IN_MEMORY);\n      this.stats.get(TILES_IN_VIEW);\n      this.stats.get(TILES_RENDERABLE);\n      this.stats.get(TILES_LOADED);\n      this.stats.get(TILES_UNLOADED);\n      this.stats.get(TILES_LOAD_FAILED);\n      this.stats.get(POINTS_COUNT, 'memory');\n      this.stats.get(TILES_GPU_MEMORY, 'memory');\n    }\n  }, {\n    key: \"_initializeTileHeaders\",\n    value: function _initializeTileHeaders(tilesetJson, parentTileHeader) {\n      var rootTile = new Tile3D(this, tilesetJson.root, parentTileHeader);\n\n      if (parentTileHeader) {\n        parentTileHeader.children.push(rootTile);\n        rootTile.depth = parentTileHeader.depth + 1;\n      }\n\n      if (this.type === TILESET_TYPE.TILES3D) {\n        var stack = [];\n        stack.push(rootTile);\n\n        while (stack.length > 0) {\n          var tile = stack.pop();\n          this.stats.get(TILES_TOTAL).incrementCount();\n          var children = tile.header.children || [];\n\n          var _iterator6 = _createForOfIteratorHelper(children),\n              _step6;\n\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var childHeader = _step6.value;\n              var childTile = new Tile3D(this, childHeader, tile);\n              tile.children.push(childTile);\n              childTile.depth = tile.depth + 1;\n              stack.push(childTile);\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n        }\n      }\n\n      return rootTile;\n    }\n  }, {\n    key: \"_initializeTraverser\",\n    value: function _initializeTraverser() {\n      var TraverserClass;\n      var type = this.type;\n\n      switch (type) {\n        case TILESET_TYPE.TILES3D:\n          TraverserClass = Tileset3DTraverser;\n          break;\n\n        case TILESET_TYPE.I3S:\n          TraverserClass = I3SetTraverser;\n          break;\n\n        default:\n          TraverserClass = TilesetTraverser;\n      }\n\n      return new TraverserClass({\n        basePath: this.basePath,\n        onTraversalEnd: this._onTraversalEnd.bind(this)\n      });\n    }\n  }, {\n    key: \"_destroyTileHeaders\",\n    value: function _destroyTileHeaders(parentTile) {\n      this._destroySubtree(parentTile);\n    }\n  }, {\n    key: \"_loadTile\",\n    value: function () {\n      var _loadTile2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tile) {\n        var loaded;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n\n                this._onStartTileLoading();\n\n                _context.next = 4;\n                return tile.loadContent();\n\n              case 4:\n                loaded = _context.sent;\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n\n                this._onTileLoadError(tile, _context.t0);\n\n              case 10:\n                _context.prev = 10;\n\n                this._onEndTileLoading();\n\n                this._onTileLoad(tile, loaded);\n\n                return _context.finish(10);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 7, 10, 14]]);\n      }));\n\n      function _loadTile(_x) {\n        return _loadTile2.apply(this, arguments);\n      }\n\n      return _loadTile;\n    }()\n  }, {\n    key: \"_onTileLoadError\",\n    value: function _onTileLoadError(tile, error) {\n      this.stats.get(TILES_LOAD_FAILED).incrementCount();\n      var message = error.message || error.toString();\n      var url = tile.url;\n      console.error(\"A 3D tile failed to load: \".concat(tile.url, \" \").concat(message));\n      this.options.onTileError(tile, message, url);\n    }\n  }, {\n    key: \"_onTileLoad\",\n    value: function _onTileLoad(tile, loaded) {\n      if (!loaded) {\n        return;\n      }\n\n      if (tile && tile.content) {\n        calculateTransformProps(tile, tile.content);\n      }\n\n      this._addTileToCache(tile);\n\n      this.options.onTileLoad(tile);\n    }\n  }, {\n    key: \"_onStartTileLoading\",\n    value: function _onStartTileLoading() {\n      this._pendingCount++;\n      this.stats.get(TILES_LOADING).incrementCount();\n    }\n  }, {\n    key: \"_onEndTileLoading\",\n    value: function _onEndTileLoading() {\n      this._pendingCount--;\n      this.stats.get(TILES_LOADING).decrementCount();\n    }\n  }, {\n    key: \"_addTileToCache\",\n    value: function _addTileToCache(tile) {\n      this._cache.add(this, tile, function (tileset) {\n        return tileset._updateCacheStats(tile);\n      });\n    }\n  }, {\n    key: \"_updateCacheStats\",\n    value: function _updateCacheStats(tile) {\n      this.stats.get(TILES_LOADED).incrementCount();\n      this.stats.get(TILES_IN_MEMORY).incrementCount();\n      this.gpuMemoryUsageInBytes += tile.content.byteLength || 0;\n      this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n    }\n  }, {\n    key: \"_unloadTile\",\n    value: function _unloadTile(tile) {\n      this.gpuMemoryUsageInBytes -= tile.content && tile.content.byteLength || 0;\n      this.stats.get(TILES_IN_MEMORY).decrementCount();\n      this.stats.get(TILES_UNLOADED).incrementCount();\n      this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n      this.options.onTileUnload(tile);\n      tile.unloadContent();\n    }\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      var stack = [];\n\n      if (this.root) {\n        stack.push(this.root);\n      }\n\n      while (stack.length > 0) {\n        var tile = stack.pop();\n\n        var _iterator7 = _createForOfIteratorHelper(tile.children),\n            _step7;\n\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var child = _step7.value;\n            stack.push(child);\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n\n        this._destroyTile(tile);\n      }\n\n      this.root = null;\n    }\n  }, {\n    key: \"_destroySubtree\",\n    value: function _destroySubtree(tile) {\n      var root = tile;\n      var stack = [];\n      stack.push(root);\n\n      while (stack.length > 0) {\n        tile = stack.pop();\n\n        var _iterator8 = _createForOfIteratorHelper(tile.children),\n            _step8;\n\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            var child = _step8.value;\n            stack.push(child);\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n\n        if (tile !== root) {\n          this._destroyTile(tile);\n        }\n      }\n\n      root.children = [];\n    }\n  }, {\n    key: \"_destroyTile\",\n    value: function _destroyTile(tile) {\n      this._cache.unloadTile(this, tile);\n\n      this._unloadTile(tile);\n\n      tile.destroy();\n    }\n  }, {\n    key: \"_initializeCesiumTileset\",\n    value: function _initializeCesiumTileset(tilesetJson) {\n      this.asset = tilesetJson.asset;\n\n      if (!this.asset) {\n        throw new Error('Tileset must have an asset property.');\n      }\n\n      if (this.asset.version !== '0.0' && this.asset.version !== '1.0') {\n        throw new Error('The tileset must be 3D Tiles version 0.0 or 1.0.');\n      }\n\n      if ('tilesetVersion' in this.asset) {\n        this._queryParams.v = this.asset.tilesetVersion;\n      }\n\n      this.credits = {\n        attributions: this.options.attributions || []\n      };\n      this.description = this.options.description || '';\n      this.properties = tilesetJson.properties;\n      this.geometricError = tilesetJson.geometricError;\n      this._extensionsUsed = tilesetJson.extensionsUsed;\n      this.extras = tilesetJson.extras;\n    }\n  }, {\n    key: \"_initializeI3STileset\",\n    value: function _initializeI3STileset() {\n      if (this.loadOptions.i3s && 'token' in this.loadOptions.i3s) {\n        this._queryParams.token = this.loadOptions.i3s.token;\n      }\n    }\n  }]);\n\n  return Tileset3D;\n}();\n\nexport { Tileset3D as default };\n\nfunction getQueryParamString(queryParams) {\n  var queryParamStrings = [];\n\n  for (var _i = 0, _Object$keys = Object.keys(queryParams); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    queryParamStrings.push(\"\".concat(key, \"=\").concat(queryParams[key]));\n  }\n\n  switch (queryParamStrings.length) {\n    case 0:\n      return '';\n\n    case 1:\n      return \"?\".concat(queryParamStrings[0]);\n\n    default:\n      return \"?\".concat(queryParamStrings.join('&'));\n  }\n}","map":{"version":3,"mappings":"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","names":["Matrix4","Vector3","Ellipsoid","Stats","RequestScheduler","assert","path","TilesetCache","calculateTransformProps","getFrameState","getZoomFromBoundingVolume","Tile3D","Tileset3DTraverser","TilesetTraverser","I3SetTraverser","TILESET_TYPE","DEFAULT_PROPS","description","ellipsoid","WGS84","modelMatrix","throttleRequests","maxRequests","maximumMemoryUsage","onTileLoad","onTileUnload","onTileError","onTraversalComplete","selectedTiles","contentLoader","undefined","viewDistanceScale","maximumScreenSpaceError","loadTiles","updateTransforms","viewportTraversersMap","loadOptions","fetch","attributions","basePath","i3s","TILES_TOTAL","TILES_IN_MEMORY","TILES_IN_VIEW","TILES_RENDERABLE","TILES_LOADED","TILES_LOADING","TILES_UNLOADED","TILES_LOAD_FAILED","POINTS_COUNT","TILES_GPU_MEMORY","Tileset3D","constructor","json","options","_defineProperty","tileset","loader","type","url","dirname","lodMetricType","lodMetricValue","refine","root","roots","cartographicCenter","cartesianCenter","zoom","boundingVolume","traverseCounter","geometricError","_traverser","_initializeTraverser","_cache","_requestScheduler","_frameNumber","_pendingCount","_tiles","_emptyTiles","_requestedTiles","frameStateData","lastUpdatedVieports","_queryParams","_queryParamsString","gpuMemoryUsageInBytes","stats","id","_initializeStats","_extensionsUsed","dynamicScreenSpaceErrorComputedDensity","extras","asset","credits","_initializeTileSet","destroy","_destroy","isLoaded","Object","values","getQueryParamString","setProps","props","setOptions","getTileUrl","tilePath","isDataUrl","startsWith","queryParams","hasExtension","extensionName","Boolean","indexOf","update","viewports","Array","reset","length","viewportsToTraverse","viewport","_needTraverse","push","_initializeTileHeaders","includes","frameState","traverse","viewportId","traverserId","_onTraversalEnd","currentFrameStateData","requestedTiles","emptyTiles","_updateTiles","frameStateKey","frameStateDataValue","concat","tile","_loadTiles","_unloadTiles","_updateStats","_tilesChanged","oldSelectedTiles","set1","Set","map","t","set2","changed","filter","x","has","contentUnloaded","_loadTile","unloadTiles","_unloadTile","tilesRenderable","pointsRenderable","contentAvailable","content","pointCount","get","count","tilesetJson","TILES3D","_initializeCesiumTileset","I3S","_initializeI3STileset","_calculateViewProps","center","console","warn","cartesianToCartographic","parentTileHeader","rootTile","children","depth","stack","pop","incrementCount","header","childHeader","childTile","TraverserClass","onTraversalEnd","bind","_destroyTileHeaders","parentTile","_destroySubtree","_onStartTileLoading","loadContent","loaded","_onTileLoadError","_onEndTileLoading","_onTileLoad","error","message","toString","_addTileToCache","decrementCount","add","_updateCacheStats","byteLength","unloadContent","child","_destroyTile","unloadTile","Error","version","v","tilesetVersion","properties","extensionsUsed","token","queryParamStrings","keys","key","join"],"sources":["../../../src/tileset/tileset-3d.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/*\n\n  The Tileset loading and rendering flow is as below,\n  A rendered (i.e. deck.gl `Tile3DLayer`) triggers `tileset.update()` after a `tileset` is loaded\n  `tileset` starts traversing the tile tree and update `requestTiles` (tiles of which content need\n  to be fetched) and `selectedTiles` (tiles ready for rendering under the current viewport).\n  `Tile3DLayer` will update rendering based on `selectedTiles`.\n  `Tile3DLayer` also listens to `onTileLoad` callback and trigger another round of `update and then traversal`\n  when new tiles are loaded.\n\n  As I3S tileset have stored `tileHeader` file (metadata) and tile content files (geometry, texture, ...) separately.\n  During each traversal, it issues `tilHeader` requests if that `tileHeader` is not yet fetched,\n  after the tile header is fulfilled, it will resume the traversal starting from the tile just fetched (not root).\n\n  Tile3DLayer\n       |\n   await load(tileset)\n       |\n   tileset.update()\n       |                async load tileHeader\n   tileset.traverse() -------------------------- Queued\n       |        resume traversal after fetched  |\n       |----------------------------------------|\n       |\n       |                     async load tile content\n  tilset.requestedTiles  ----------------------------- RequestScheduler\n                                                              |\n  tilset.selectedTiles (ready for rendering)                  |\n       |         Listen to                                    |\n    Tile3DLayer ----------- onTileLoad  ----------------------|\n       |                         |   notify new tile is available\n    updateLayers                 |\n                        tileset.update // trigger another round of update\n*/\n\nimport {Matrix4, Vector3} from '@math.gl/core';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {Stats} from '@probe.gl/stats';\nimport {\n  RequestScheduler,\n  assert,\n  path,\n  LoaderWithParser,\n  LoaderOptions\n} from '@loaders.gl/loader-utils';\nimport TilesetCache from './tileset-cache';\nimport {calculateTransformProps} from './helpers/transform-utils';\nimport {FrameState, getFrameState} from './helpers/frame-state';\nimport {getZoomFromBoundingVolume} from './helpers/zoom';\nimport Tile3D from './tile-3d';\nimport Tileset3DTraverser from './traversers/tileset-3d-traverser';\nimport TilesetTraverser from './traversers/tileset-traverser';\nimport I3SetTraverser from './traversers/i3s-tileset-traverser';\nimport {TILESET_TYPE} from '../constants';\n\nexport type Tileset3DProps = {\n  // loading\n  throttleRequests?: boolean;\n  maxRequests?: number;\n  loadOptions?: LoaderOptions;\n  loadTiles?: boolean;\n  basePath?: string;\n  maximumMemoryUsage?: number;\n\n  // Metadata\n  description?: string;\n  attributions?: string[];\n\n  // Transforms\n  ellipsoid?: object;\n  modelMatrix?: Matrix4;\n\n  // Traversal\n  maximumScreenSpaceError?: number;\n  viewportTraversersMap?: any;\n  updateTransforms?: boolean;\n  viewDistanceScale?: number;\n\n  // Callbacks\n  onTileLoad?: (tile: Tile3D) => any;\n  onTileUnload?: (tile: Tile3D) => any;\n  onTileError?: (tile: Tile3D, message: string, url: string) => any;\n  contentLoader?: (tile: Tile3D) => Promise<void>;\n  onTraversalComplete?: (selectedTiles: Tile3D[]) => Tile3D[];\n};\n\ntype Props = {\n  description: string;\n  ellipsoid: object;\n  modelMatrix: Matrix4;\n  throttleRequests: boolean;\n  maximumMemoryUsage: number;\n  onTileLoad: (tile: Tile3D) => any;\n  onTileUnload: (tile: Tile3D) => any;\n  onTileError: (tile: Tile3D, message: string, url: string) => any;\n  onTraversalComplete: (selectedTiles: Tile3D[]) => Tile3D[];\n  maximumScreenSpaceError: number;\n  viewportTraversersMap: any;\n  attributions: string[];\n  maxRequests: number;\n  loadTiles: boolean;\n  loadOptions: LoaderOptions;\n  updateTransforms: boolean;\n  viewDistanceScale: number;\n  basePath: string;\n  contentLoader?: (tile: Tile3D) => Promise<void>;\n  i3s: {[key: string]: any};\n};\n\nconst DEFAULT_PROPS: Props = {\n  description: '',\n\n  ellipsoid: Ellipsoid.WGS84,\n  // A 4x4 transformation matrix this transforms the entire tileset.\n  modelMatrix: new Matrix4(),\n\n  // Set to false to disable network request throttling\n  throttleRequests: true,\n\n  // Number of simultaneous requsts, if throttleRequests is true\n  maxRequests: 64,\n\n  maximumMemoryUsage: 32,\n\n  /**\n   * Callback. Indicates this a tile's content was loaded\n   * @param tile {TileHeader}\n   */\n  onTileLoad: () => {},\n  /**\n   * Callback. Indicates this a tile's content was unloaded\n   * @param tile {TileHeader}\n   */\n  onTileUnload: () => {},\n  onTileError: () => {},\n  /**\n   * Callback. Allows post-process selectedTiles right after traversal.\n   * @param selectedTiles {TileHeader[]}\n   * @returns TileHeader[] - output array of tiles to return to deck.gl\n   */\n  onTraversalComplete: (selectedTiles: Tile3D[]) => selectedTiles,\n\n  // Optional async tile content loader\n  contentLoader: undefined,\n\n  // View distance scale modifier\n  viewDistanceScale: 1.0,\n\n  // TODO CESIUM\n  // The maximum screen space error used to drive level of detail refinement.\n  maximumScreenSpaceError: 8,\n\n  loadTiles: true,\n  updateTransforms: true,\n  viewportTraversersMap: null,\n\n  loadOptions: {fetch: {}},\n\n  attributions: [],\n  basePath: '',\n\n  i3s: {}\n};\n\n// Tracked Stats\nconst TILES_TOTAL = 'Tiles In Tileset(s)';\nconst TILES_IN_MEMORY = 'Tiles In Memory';\nconst TILES_IN_VIEW = 'Tiles In View';\nconst TILES_RENDERABLE = 'Tiles To Render';\nconst TILES_LOADED = 'Tiles Loaded';\nconst TILES_LOADING = 'Tiles Loading';\nconst TILES_UNLOADED = 'Tiles Unloaded';\nconst TILES_LOAD_FAILED = 'Failed Tile Loads';\nconst POINTS_COUNT = 'Points';\nconst TILES_GPU_MEMORY = 'Tile Memory Use';\n\nexport default class Tileset3D {\n  // props: Tileset3DProps;\n  options: Props;\n  loadOptions: {[key: string]: any};\n\n  type: string;\n  tileset: {[key: string]: any};\n  loader: LoaderWithParser;\n  url: string;\n  basePath: string;\n  modelMatrix: Matrix4;\n  ellipsoid: any;\n  lodMetricType: string;\n  lodMetricValue: number;\n  refine: string;\n  root: Tile3D | null;\n  roots: {[key: string]: Tile3D};\n  asset: {[key: string]: any};\n\n  description: string;\n  properties: any;\n  extras: any;\n  attributions: any;\n  credits: any;\n\n  stats: Stats;\n\n  traverseCounter: number;\n  geometricError: number;\n  selectedTiles: Tile3D[];\n\n  cartographicCenter: Vector3 | null;\n  cartesianCenter: Vector3 | null;\n  zoom: number;\n  boundingVolume: any;\n\n  // METRICS\n  // The maximum amount of GPU memory (in MB) that may be used to cache tiles.\n  // Tiles not in view are unloaded to enforce private\n  // The total amount of GPU memory in bytes used by the tileset.\n  gpuMemoryUsageInBytes: any;\n  dynamicScreenSpaceErrorComputedDensity: any;\n\n  // TRAVERSAL\n  _traverser: TilesetTraverser;\n  private _cache: TilesetCache;\n  _requestScheduler: RequestScheduler;\n\n  _frameNumber: number;\n  private _queryParamsString: string;\n  private _queryParams: any;\n  private _extensionsUsed: any;\n  private _tiles: {[id: string]: Tile3D};\n\n  // counter for tracking tiles requests\n  private _pendingCount: any;\n\n  // HOLD TRAVERSAL RESULTS\n  private lastUpdatedVieports: any[] | null;\n  private _requestedTiles: any;\n  private _emptyTiles: any;\n  private frameStateData: any;\n\n  maximumMemoryUsage: number;\n\n  /**\n   * Create a new Tileset3D\n   * @param json\n   * @param props\n   */\n  // eslint-disable-next-line max-statements\n  constructor(json: any, options?: Tileset3DProps) {\n    assert(json);\n\n    // PUBLIC MEMBERS\n    this.options = {...DEFAULT_PROPS, ...options};\n    // raw data\n    this.tileset = json;\n    this.loader = json.loader;\n    // could be  3d tiles, i3s\n    this.type = json.type;\n    // The url to a tileset JSON file.\n    this.url = json.url;\n    this.basePath = json.basePath || path.dirname(this.url);\n    this.modelMatrix = this.options.modelMatrix;\n    this.ellipsoid = this.options.ellipsoid;\n\n    // Geometric error when the tree is not rendered at all\n    this.lodMetricType = json.lodMetricType;\n    this.lodMetricValue = json.lodMetricValue;\n    this.refine = json.root.refine;\n\n    this.loadOptions = this.options.loadOptions || {};\n\n    this.root = null;\n    this.roots = {};\n    // view props\n    this.cartographicCenter = null;\n    this.cartesianCenter = null;\n    this.zoom = 1;\n    this.boundingVolume = null;\n\n    // TRAVERSAL\n    this.traverseCounter = 0;\n    this.geometricError = 0;\n    this._traverser = this._initializeTraverser();\n    this._cache = new TilesetCache();\n    this._requestScheduler = new RequestScheduler({\n      throttleRequests: this.options.throttleRequests,\n      maxRequests: this.options.maxRequests\n    });\n    // update tracker\n    // increase in each update cycle\n    this._frameNumber = 0;\n\n    // counter for tracking tiles requests\n    this._pendingCount = 0;\n\n    // HOLD TRAVERSAL RESULTS\n    this._tiles = {};\n    this.selectedTiles = [];\n    this._emptyTiles = [];\n    this._requestedTiles = [];\n    this.frameStateData = {};\n    this.lastUpdatedVieports = null;\n\n    this._queryParams = {};\n    this._queryParamsString = '';\n\n    // METRICS\n    // The maximum amount of GPU memory (in MB) that may be used to cache tiles.\n    // Tiles not in view are unloaded to enforce this.\n    this.maximumMemoryUsage = this.options.maximumMemoryUsage || 32;\n    // The total amount of GPU memory in bytes used by the tileset.\n    this.gpuMemoryUsageInBytes = 0;\n    this.stats = new Stats({id: this.url});\n    this._initializeStats();\n\n    // EXTRACTED FROM TILESET\n    this._extensionsUsed = undefined;\n    this.dynamicScreenSpaceErrorComputedDensity = 0.0; // Updated based on the camera position and direction\n    // Metadata for the entire tileset\n    this.extras = null;\n    this.asset = {};\n    this.credits = {};\n    this.description = this.options.description || '';\n\n    this._initializeTileSet(json);\n  }\n\n  /** Release resources */\n  destroy(): void {\n    this._destroy();\n  }\n\n  /** Is the tileset loaded (update needs to have been called at least once) */\n  isLoaded(): boolean {\n    // Check that `_frameNumber !== 0` which means that update was called at least once\n    return this._pendingCount === 0 && this._frameNumber !== 0;\n  }\n\n  get tiles(): object[] {\n    return Object.values(this._tiles);\n  }\n\n  get frameNumber(): number {\n    return this._frameNumber;\n  }\n\n  get queryParams(): string {\n    if (!this._queryParamsString) {\n      this._queryParamsString = getQueryParamString(this._queryParams);\n    }\n    return this._queryParamsString;\n  }\n\n  setProps(props: Tileset3DProps): void {\n    this.options = {...this.options, ...props};\n  }\n\n  /** @deprecated */\n  setOptions(options: Tileset3DProps): void {\n    this.options = {...this.options, ...options};\n  }\n\n  /**\n   * Return a loadable tile url for a specific tile subpath\n   * @param tilePath a tile subpath\n   */\n  getTileUrl(tilePath: string): string {\n    const isDataUrl = tilePath.startsWith('data:');\n    if (isDataUrl) {\n      return tilePath;\n    }\n    return `${tilePath}${this.queryParams}`;\n  }\n\n  // TODO CESIUM specific\n  hasExtension(extensionName: string): boolean {\n    return Boolean(this._extensionsUsed && this._extensionsUsed.indexOf(extensionName) > -1);\n  }\n\n  /**\n   * Update visible tiles relying on a list of viewports\n   * @param viewports - list of viewports\n   */\n  // eslint-disable-next-line max-statements, complexity\n  update(viewports: any[]): void {\n    if ('loadTiles' in this.options && !this.options.loadTiles) {\n      return;\n    }\n    if (this.traverseCounter > 0) {\n      return;\n    }\n    if (!viewports && this.lastUpdatedVieports) {\n      viewports = this.lastUpdatedVieports;\n    } else {\n      this.lastUpdatedVieports = viewports;\n    }\n    if (!(viewports instanceof Array)) {\n      viewports = [viewports];\n    }\n\n    this._cache.reset();\n    this._frameNumber++;\n    this.traverseCounter = viewports.length;\n    const viewportsToTraverse: string[] = [];\n    // First loop to decrement traverseCounter\n    for (const viewport of viewports) {\n      const id = viewport.id as string;\n      if (this._needTraverse(id)) {\n        viewportsToTraverse.push(id);\n      } else {\n        this.traverseCounter--;\n      }\n    }\n\n    // Second loop to traverse\n    for (const viewport of viewports) {\n      const id = viewport.id as string;\n      if (!this.roots[id]) {\n        this.roots[id] = this._initializeTileHeaders(this.tileset, null);\n      }\n\n      if (!viewportsToTraverse.includes(id)) {\n        continue; // eslint-disable-line no-continue\n      }\n      const frameState = getFrameState(viewport, this._frameNumber);\n      this._traverser.traverse(this.roots[id], frameState, this.options);\n    }\n  }\n\n  /**\n   * Check if traversal is needed for particular viewport\n   * @param {string} viewportId - id of a viewport\n   * @return {boolean}\n   */\n  _needTraverse(viewportId: string): boolean {\n    let traverserId = viewportId;\n    if (this.options.viewportTraversersMap) {\n      traverserId = this.options.viewportTraversersMap[viewportId];\n    }\n    if (traverserId !== viewportId) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * The callback to post-process tiles after traversal procedure\n   * @param frameState - frame state for tile culling\n   */\n  _onTraversalEnd(frameState: FrameState): void {\n    const id = frameState.viewport.id;\n    if (!this.frameStateData[id]) {\n      this.frameStateData[id] = {selectedTiles: [], _requestedTiles: [], _emptyTiles: []};\n    }\n    const currentFrameStateData = this.frameStateData[id];\n    const selectedTiles = Object.values(this._traverser.selectedTiles);\n    currentFrameStateData.selectedTiles = selectedTiles;\n    currentFrameStateData._requestedTiles = Object.values(this._traverser.requestedTiles);\n    currentFrameStateData._emptyTiles = Object.values(this._traverser.emptyTiles);\n\n    this.traverseCounter--;\n    if (this.traverseCounter > 0) {\n      return;\n    }\n\n    this._updateTiles();\n  }\n\n  /**\n   * Update tiles relying on data from all traversers\n   */\n  _updateTiles(): void {\n    this.selectedTiles = [];\n    this._requestedTiles = [];\n    this._emptyTiles = [];\n\n    for (const frameStateKey in this.frameStateData) {\n      const frameStateDataValue = this.frameStateData[frameStateKey];\n      this.selectedTiles = this.selectedTiles.concat(frameStateDataValue.selectedTiles);\n      this._requestedTiles = this._requestedTiles.concat(frameStateDataValue._requestedTiles);\n      this._emptyTiles = this._emptyTiles.concat(frameStateDataValue._emptyTiles);\n    }\n\n    this.selectedTiles = this.options.onTraversalComplete(this.selectedTiles);\n\n    for (const tile of this.selectedTiles) {\n      this._tiles[tile.id] = tile;\n    }\n\n    this._loadTiles();\n    this._unloadTiles();\n    this._updateStats();\n  }\n\n  _tilesChanged(oldSelectedTiles, selectedTiles) {\n    if (oldSelectedTiles.length !== selectedTiles.length) {\n      return true;\n    }\n    const set1 = new Set(oldSelectedTiles.map((t) => t.id));\n    const set2 = new Set(selectedTiles.map((t) => t.id));\n    let changed = oldSelectedTiles.filter((x) => !set2.has(x.id)).length > 0;\n    changed = changed || selectedTiles.filter((x) => !set1.has(x.id)).length > 0;\n    return changed;\n  }\n\n  _loadTiles() {\n    // Sort requests by priority before making any requests.\n    // This makes it less likely this requests will be cancelled after being issued.\n    // requestedTiles.sort((a, b) => a._priority - b._priority);\n    for (const tile of this._requestedTiles) {\n      if (tile.contentUnloaded) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this._loadTile(tile);\n      }\n    }\n  }\n\n  _unloadTiles() {\n    // unload tiles from cache when hit maximumMemoryUsage\n    this._cache.unloadTiles(this, (tileset, tile) => tileset._unloadTile(tile));\n  }\n\n  _updateStats() {\n    let tilesRenderable = 0;\n    let pointsRenderable = 0;\n    for (const tile of this.selectedTiles) {\n      if (tile.contentAvailable && tile.content) {\n        tilesRenderable++;\n        if (tile.content.pointCount) {\n          pointsRenderable += tile.content.pointCount;\n        }\n      }\n    }\n\n    this.stats.get(TILES_IN_VIEW).count = this.selectedTiles.length;\n    this.stats.get(TILES_RENDERABLE).count = tilesRenderable;\n    this.stats.get(POINTS_COUNT).count = pointsRenderable;\n  }\n\n  _initializeTileSet(tilesetJson) {\n    this.root = this._initializeTileHeaders(tilesetJson, null);\n\n    // TODO CESIUM Specific\n    if (this.type === TILESET_TYPE.TILES3D) {\n      this._initializeCesiumTileset(tilesetJson);\n    }\n\n    if (this.type === TILESET_TYPE.I3S) {\n      this._initializeI3STileset();\n    }\n    // Calculate cartographicCenter & zoom props to help apps center view on tileset\n    this._calculateViewProps();\n  }\n\n  // Called during initialize Tileset to initialize the tileset's cartographic center (longitude, latitude) and zoom.\n  _calculateViewProps() {\n    const root = this.root as Tile3D;\n    assert(root);\n    const {center} = root.boundingVolume;\n    // TODO - handle all cases\n    if (!center) {\n      // eslint-disable-next-line\n      console.warn('center was not pre-calculated for the root tile');\n      this.cartographicCenter = new Vector3();\n      this.zoom = 1;\n      return;\n    }\n    this.cartographicCenter = Ellipsoid.WGS84.cartesianToCartographic(center, new Vector3());\n    this.cartesianCenter = center;\n    this.zoom = getZoomFromBoundingVolume(root.boundingVolume, this.cartographicCenter);\n  }\n\n  _initializeStats() {\n    this.stats.get(TILES_TOTAL);\n    this.stats.get(TILES_LOADING);\n    this.stats.get(TILES_IN_MEMORY);\n    this.stats.get(TILES_IN_VIEW);\n    this.stats.get(TILES_RENDERABLE);\n    this.stats.get(TILES_LOADED);\n    this.stats.get(TILES_UNLOADED);\n    this.stats.get(TILES_LOAD_FAILED);\n    this.stats.get(POINTS_COUNT, 'memory');\n    this.stats.get(TILES_GPU_MEMORY, 'memory');\n  }\n\n  // Installs the main tileset JSON file or a tileset JSON file referenced from a tile.\n  // eslint-disable-next-line max-statements\n  _initializeTileHeaders(tilesetJson, parentTileHeader) {\n    // A tileset JSON file referenced from a tile may exist in a different directory than the root tileset.\n    // Get the basePath relative to the external tileset.\n    const rootTile = new Tile3D(this, tilesetJson.root, parentTileHeader); // resource\n\n    // If there is a parentTileHeader, add the root of the currently loading tileset\n    // to parentTileHeader's children, and update its depth.\n    if (parentTileHeader) {\n      parentTileHeader.children.push(rootTile);\n      rootTile.depth = parentTileHeader.depth + 1;\n    }\n\n    // Cesium 3d tiles knows the hierarchy beforehand\n    if (this.type === TILESET_TYPE.TILES3D) {\n      const stack: Tile3D[] = [];\n      stack.push(rootTile);\n\n      while (stack.length > 0) {\n        const tile = stack.pop() as Tile3D;\n        this.stats.get(TILES_TOTAL).incrementCount();\n        const children = tile.header.children || [];\n        for (const childHeader of children) {\n          const childTile = new Tile3D(this, childHeader, tile);\n          tile.children.push(childTile);\n          childTile.depth = tile.depth + 1;\n          stack.push(childTile);\n        }\n      }\n    }\n\n    return rootTile;\n  }\n\n  _initializeTraverser() {\n    let TraverserClass;\n    const type = this.type;\n    switch (type) {\n      case TILESET_TYPE.TILES3D:\n        TraverserClass = Tileset3DTraverser;\n        break;\n      case TILESET_TYPE.I3S:\n        TraverserClass = I3SetTraverser;\n        break;\n      default:\n        TraverserClass = TilesetTraverser;\n    }\n\n    return new TraverserClass({\n      basePath: this.basePath,\n      onTraversalEnd: this._onTraversalEnd.bind(this)\n    });\n  }\n\n  _destroyTileHeaders(parentTile) {\n    this._destroySubtree(parentTile);\n  }\n\n  async _loadTile(tile) {\n    let loaded;\n    try {\n      this._onStartTileLoading();\n      loaded = await tile.loadContent();\n    } catch (error) {\n      this._onTileLoadError(tile, error);\n    } finally {\n      this._onEndTileLoading();\n      this._onTileLoad(tile, loaded);\n    }\n  }\n\n  _onTileLoadError(tile, error) {\n    this.stats.get(TILES_LOAD_FAILED).incrementCount();\n\n    const message = error.message || error.toString();\n    const url = tile.url;\n    // TODO - Allow for probe log to be injected instead of console?\n    console.error(`A 3D tile failed to load: ${tile.url} ${message}`); // eslint-disable-line\n    this.options.onTileError(tile, message, url);\n  }\n\n  _onTileLoad(tile, loaded) {\n    if (!loaded) {\n      return;\n    }\n\n    // add coordinateOrigin and modelMatrix to tile\n    if (tile && tile.content) {\n      calculateTransformProps(tile, tile.content);\n    }\n\n    this._addTileToCache(tile);\n    this.options.onTileLoad(tile);\n  }\n\n  _onStartTileLoading() {\n    this._pendingCount++;\n    this.stats.get(TILES_LOADING).incrementCount();\n  }\n\n  _onEndTileLoading() {\n    this._pendingCount--;\n    this.stats.get(TILES_LOADING).decrementCount();\n  }\n\n  _addTileToCache(tile) {\n    this._cache.add(this, tile, (tileset) => tileset._updateCacheStats(tile));\n  }\n\n  _updateCacheStats(tile) {\n    this.stats.get(TILES_LOADED).incrementCount();\n    this.stats.get(TILES_IN_MEMORY).incrementCount();\n\n    // Good enough? Just use the raw binary ArrayBuffer's byte length.\n    this.gpuMemoryUsageInBytes += tile.content.byteLength || 0;\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n  }\n\n  _unloadTile(tile) {\n    this.gpuMemoryUsageInBytes -= (tile.content && tile.content.byteLength) || 0;\n\n    this.stats.get(TILES_IN_MEMORY).decrementCount();\n    this.stats.get(TILES_UNLOADED).incrementCount();\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n\n    this.options.onTileUnload(tile);\n    tile.unloadContent();\n  }\n\n  // Traverse the tree and destroy all tiles\n  _destroy() {\n    const stack: Tile3D[] = [];\n\n    if (this.root) {\n      stack.push(this.root);\n    }\n\n    while (stack.length > 0) {\n      const tile: Tile3D = stack.pop() as Tile3D;\n\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n\n      this._destroyTile(tile);\n    }\n    this.root = null;\n  }\n\n  // Traverse the tree and destroy all sub tiles\n  _destroySubtree(tile) {\n    const root = tile;\n    const stack: Tile3D[] = [];\n    stack.push(root);\n    while (stack.length > 0) {\n      tile = stack.pop();\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n      if (tile !== root) {\n        this._destroyTile(tile);\n      }\n    }\n    root.children = [];\n  }\n\n  _destroyTile(tile) {\n    this._cache.unloadTile(this, tile);\n    this._unloadTile(tile);\n    tile.destroy();\n  }\n\n  _initializeCesiumTileset(tilesetJson) {\n    this.asset = tilesetJson.asset;\n    if (!this.asset) {\n      throw new Error('Tileset must have an asset property.');\n    }\n    if (this.asset.version !== '0.0' && this.asset.version !== '1.0') {\n      throw new Error('The tileset must be 3D Tiles version 0.0 or 1.0.');\n    }\n\n    // Note: `asset.tilesetVersion` is version of the tileset itself (not the version of the 3D TILES standard)\n    // We add this version as a `v=1.0` query param to fetch the right version and not get an older cached version\n    if ('tilesetVersion' in this.asset) {\n      this._queryParams.v = this.asset.tilesetVersion;\n    }\n\n    // TODO - ion resources have a credits property we can use for additional attribution.\n    this.credits = {\n      attributions: this.options.attributions || []\n    };\n    this.description = this.options.description || '';\n\n    // Gets the tileset's properties dictionary object, which contains metadata about per-feature properties.\n    this.properties = tilesetJson.properties;\n    this.geometricError = tilesetJson.geometricError;\n    this._extensionsUsed = tilesetJson.extensionsUsed;\n    // Returns the extras property at the top of the tileset JSON (application specific metadata).\n    this.extras = tilesetJson.extras;\n  }\n\n  _initializeI3STileset() {\n    if (this.loadOptions.i3s && 'token' in this.loadOptions.i3s) {\n      this._queryParams.token = this.loadOptions.i3s.token;\n    }\n  }\n}\n\nfunction getQueryParamString(queryParams): string {\n  const queryParamStrings: string[] = [];\n  for (const key of Object.keys(queryParams)) {\n    queryParamStrings.push(`${key}=${queryParams[key]}`);\n  }\n  switch (queryParamStrings.length) {\n    case 0:\n      return '';\n    case 1:\n      return `?${queryParamStrings[0]}`;\n    default:\n      return `?${queryParamStrings.join('&')}`;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}