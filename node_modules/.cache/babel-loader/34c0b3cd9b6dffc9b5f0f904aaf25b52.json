{"ast":null,"code":"import Resource from './resource';\nexport default class ResourceManager {\n  constructor(_ref) {\n    let {\n      gl,\n      protocol\n    } = _ref;\n    this.protocol = protocol || 'resource://';\n    this._context = {\n      gl,\n      resourceManager: this\n    };\n    this._resources = {};\n    this._consumers = {};\n    this._pruneRequest = null;\n  }\n\n  contains(resourceId) {\n    if (resourceId.startsWith(this.protocol)) {\n      return true;\n    }\n\n    return resourceId in this._resources;\n  }\n\n  add(_ref2) {\n    let {\n      resourceId,\n      data,\n      forceUpdate = false,\n      persistent = true\n    } = _ref2;\n    let res = this._resources[resourceId];\n\n    if (res) {\n      res.setData(data, forceUpdate);\n    } else {\n      res = new Resource(resourceId, data, this._context);\n      this._resources[resourceId] = res;\n    }\n\n    res.persistent = persistent;\n  }\n\n  remove(resourceId) {\n    const res = this._resources[resourceId];\n\n    if (res) {\n      res.delete();\n      delete this._resources[resourceId];\n    }\n  }\n\n  unsubscribe(_ref3) {\n    let {\n      consumerId\n    } = _ref3;\n    const consumer = this._consumers[consumerId];\n\n    if (consumer) {\n      for (const requestId in consumer) {\n        const request = consumer[requestId];\n\n        if (request.resource) {\n          request.resource.unsubscribe(request);\n        }\n      }\n\n      delete this._consumers[consumerId];\n      this.prune();\n    }\n  }\n\n  subscribe(_ref4) {\n    let {\n      resourceId,\n      onChange,\n      consumerId,\n      requestId = 'default'\n    } = _ref4;\n    const {\n      _resources: resources,\n      protocol\n    } = this;\n\n    if (resourceId.startsWith(protocol)) {\n      resourceId = resourceId.replace(protocol, '');\n\n      if (!resources[resourceId]) {\n        this.add({\n          resourceId,\n          data: null,\n          persistent: false\n        });\n      }\n    }\n\n    const res = resources[resourceId];\n\n    this._track(consumerId, requestId, res, onChange);\n\n    if (res) {\n      return res.getData();\n    }\n\n    return undefined;\n  }\n\n  prune() {\n    if (!this._pruneRequest) {\n      this._pruneRequest = setTimeout(() => this._prune(), 0);\n    }\n  }\n\n  finalize() {\n    for (const key in this._resources) {\n      this._resources[key].delete();\n    }\n  }\n\n  _track(consumerId, requestId, resource, onChange) {\n    const consumers = this._consumers;\n    const consumer = consumers[consumerId] = consumers[consumerId] || {};\n    const request = consumer[requestId] || {};\n\n    if (request.resource) {\n      request.resource.unsubscribe(request);\n      request.resource = null;\n      this.prune();\n    }\n\n    if (resource) {\n      consumer[requestId] = request;\n      request.onChange = onChange;\n      request.resource = resource;\n      resource.subscribe(request);\n    }\n  }\n\n  _prune() {\n    this._pruneRequest = null;\n\n    for (const key of Object.keys(this._resources)) {\n      const res = this._resources[key];\n\n      if (!res.persistent && !res.inUse()) {\n        res.delete();\n        delete this._resources[key];\n      }\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Resource","ResourceManager","constructor","gl","protocol","_context","resourceManager","_resources","_consumers","_pruneRequest","contains","resourceId","startsWith","add","data","forceUpdate","persistent","res","setData","remove","delete","unsubscribe","consumerId","consumer","requestId","request","resource","prune","subscribe","onChange","resources","replace","_track","getData","undefined","setTimeout","_prune","finalize","key","consumers","Object","keys","inUse"],"sources":["../../../../src/lib/resource/resource-manager.js"],"sourcesContent":["/* global setTimeout */\nimport Resource from './resource';\n\nexport default class ResourceManager {\n  constructor({gl, protocol}) {\n    this.protocol = protocol || 'resource://';\n\n    this._context = {\n      gl,\n      resourceManager: this\n    };\n    this._resources = {};\n    this._consumers = {};\n\n    this._pruneRequest = null;\n  }\n\n  contains(resourceId) {\n    if (resourceId.startsWith(this.protocol)) {\n      return true;\n    }\n    return resourceId in this._resources;\n  }\n\n  add({resourceId, data, forceUpdate = false, persistent = true}) {\n    let res = this._resources[resourceId];\n\n    if (res) {\n      res.setData(data, forceUpdate);\n    } else {\n      res = new Resource(resourceId, data, this._context);\n      this._resources[resourceId] = res;\n    }\n    // persistent resources can only be removed by calling `remove`\n    // non-persistent resources may be released when there are no more consumers\n    res.persistent = persistent;\n  }\n\n  remove(resourceId) {\n    const res = this._resources[resourceId];\n\n    if (res) {\n      res.delete();\n      delete this._resources[resourceId];\n    }\n  }\n\n  unsubscribe({consumerId}) {\n    const consumer = this._consumers[consumerId];\n    if (consumer) {\n      for (const requestId in consumer) {\n        const request = consumer[requestId];\n        if (request.resource) {\n          request.resource.unsubscribe(request);\n        }\n      }\n      delete this._consumers[consumerId];\n      this.prune();\n    }\n  }\n\n  subscribe({resourceId, onChange, consumerId, requestId = 'default'}) {\n    const {_resources: resources, protocol} = this;\n    if (resourceId.startsWith(protocol)) {\n      resourceId = resourceId.replace(protocol, '');\n      if (!resources[resourceId]) {\n        // Add placeholder. When this resource becomes available, the consumer will be notified.\n        this.add({resourceId, data: null, persistent: false});\n      }\n    }\n    const res = resources[resourceId];\n    this._track(consumerId, requestId, res, onChange);\n    if (res) {\n      return res.getData();\n    }\n\n    return undefined;\n  }\n\n  prune() {\n    if (!this._pruneRequest) {\n      // prune() may be called multiple times in the same animation frame.\n      // Batch multiple requests together\n      this._pruneRequest = setTimeout(() => this._prune(), 0);\n    }\n  }\n\n  finalize() {\n    for (const key in this._resources) {\n      this._resources[key].delete();\n    }\n  }\n\n  _track(consumerId, requestId, resource, onChange) {\n    const consumers = this._consumers;\n    const consumer = (consumers[consumerId] = consumers[consumerId] || {});\n    const request = consumer[requestId] || {};\n\n    if (request.resource) {\n      request.resource.unsubscribe(request);\n      request.resource = null;\n      this.prune();\n    }\n    if (resource) {\n      consumer[requestId] = request;\n      request.onChange = onChange;\n      request.resource = resource;\n      resource.subscribe(request);\n    }\n  }\n\n  _prune() {\n    this._pruneRequest = null;\n\n    for (const key of Object.keys(this._resources)) {\n      const res = this._resources[key];\n      if (!res.persistent && !res.inUse()) {\n        res.delete();\n        delete this._resources[key];\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}