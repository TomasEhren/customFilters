{"ast":null,"code":"import Transition from '../transitions/transition';\n\nconst noop = () => {};\n\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3\n};\nconst DEFAULT_PROPS = {\n  transitionEasing: t => t,\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop\n};\nexport default class TransitionManager {\n  constructor(ControllerState) {\n    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.ControllerState = ControllerState;\n    this.props = { ...DEFAULT_PROPS,\n      ...props\n    };\n    this.propsInTransition = null;\n    this.transition = new Transition(props.timeline);\n    this.onViewStateChange = props.onViewStateChange || noop;\n    this.onStateChange = props.onStateChange || noop;\n    this._onTransitionUpdate = this._onTransitionUpdate.bind(this);\n  }\n\n  finalize() {\n    this.transition.cancel();\n  }\n\n  getViewportInTransition() {\n    return this.propsInTransition;\n  }\n\n  processViewStateChange(nextProps) {\n    let transitionTriggered = false;\n    const currentProps = this.props;\n    nextProps = { ...DEFAULT_PROPS,\n      ...nextProps\n    };\n    this.props = nextProps;\n\n    if (this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return transitionTriggered;\n    }\n\n    if (this._isTransitionEnabled(nextProps)) {\n      const {\n        interruption,\n        endProps\n      } = this.transition.settings;\n      const startProps = { ...currentProps,\n        ...(interruption === TRANSITION_EVENTS.SNAP_TO_END ? endProps : this.propsInTransition || currentProps)\n      };\n\n      this._triggerTransition(startProps, nextProps);\n\n      transitionTriggered = true;\n    } else {\n      this.transition.cancel();\n    }\n\n    return transitionTriggered;\n  }\n\n  updateTransition() {\n    this.transition.update();\n  }\n\n  _isTransitionEnabled(props) {\n    const {\n      transitionDuration,\n      transitionInterpolator\n    } = props;\n    return (transitionDuration > 0 || transitionDuration === 'auto') && Boolean(transitionInterpolator);\n  }\n\n  _isUpdateDueToCurrentTransition(props) {\n    if (this.transition.inProgress) {\n      return this.transition.settings.interpolator.arePropsEqual(props, this.propsInTransition);\n    }\n\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps, nextProps) {\n    if (this.transition.inProgress) {\n      return this.transition.settings.interruption === TRANSITION_EVENTS.IGNORE || this._isUpdateDueToCurrentTransition(nextProps);\n    } else if (this._isTransitionEnabled(nextProps)) {\n      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n    }\n\n    return true;\n  }\n\n  _triggerTransition(startProps, endProps) {\n    const startViewstate = new this.ControllerState(startProps);\n    const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n    const {\n      transitionInterpolator\n    } = endProps;\n    const duration = transitionInterpolator.getDuration ? transitionInterpolator.getDuration(startProps, endProps) : endProps.transitionDuration;\n\n    if (duration === 0) {\n      return;\n    }\n\n    const initialProps = endProps.transitionInterpolator.initializeProps(startProps, endViewStateProps);\n    this.propsInTransition = {};\n    this.duration = duration;\n    this.transition.start({\n      duration,\n      easing: endProps.transitionEasing,\n      interpolator: endProps.transitionInterpolator,\n      interruption: endProps.transitionInterruption,\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n      onStart: endProps.onTransitionStart,\n      onUpdate: this._onTransitionUpdate,\n      onInterrupt: this._onTransitionEnd(endProps.onTransitionInterrupt),\n      onEnd: this._onTransitionEnd(endProps.onTransitionEnd)\n    });\n    this.onStateChange({\n      inTransition: true\n    });\n    this.updateTransition();\n  }\n\n  _onTransitionEnd(callback) {\n    return transition => {\n      this.propsInTransition = null;\n      this.onStateChange({\n        inTransition: false,\n        isZooming: false,\n        isPanning: false,\n        isRotating: false\n      });\n      callback(transition);\n    };\n  }\n\n  _onTransitionUpdate(transition) {\n    const {\n      time,\n      settings: {\n        interpolator,\n        startProps,\n        endProps,\n        duration,\n        easing\n      }\n    } = transition;\n    const t = easing(time / duration);\n    const viewport = interpolator.interpolateProps(startProps, endProps, t);\n    this.propsInTransition = new this.ControllerState({ ...this.props,\n      ...viewport\n    }).getViewportProps();\n    this.onViewStateChange({\n      viewState: this.propsInTransition,\n      oldViewState: this.props\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Transition","noop","TRANSITION_EVENTS","BREAK","SNAP_TO_END","IGNORE","DEFAULT_PROPS","transitionEasing","t","transitionInterruption","onTransitionStart","onTransitionInterrupt","onTransitionEnd","TransitionManager","constructor","ControllerState","props","propsInTransition","transition","timeline","onViewStateChange","onStateChange","_onTransitionUpdate","bind","finalize","cancel","getViewportInTransition","processViewStateChange","nextProps","transitionTriggered","currentProps","_shouldIgnoreViewportChange","_isTransitionEnabled","interruption","endProps","settings","startProps","_triggerTransition","updateTransition","update","transitionDuration","transitionInterpolator","Boolean","_isUpdateDueToCurrentTransition","inProgress","interpolator","arePropsEqual","startViewstate","endViewStateProps","shortestPathFrom","duration","getDuration","initialProps","initializeProps","start","easing","end","onStart","onUpdate","onInterrupt","_onTransitionEnd","onEnd","inTransition","callback","isZooming","isPanning","isRotating","time","viewport","interpolateProps","getViewportProps","viewState","oldViewState"],"sources":["../../../src/controllers/transition-manager.js"],"sourcesContent":["import Transition from '../transitions/transition';\n\nconst noop = () => {};\n\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3\n};\n\nconst DEFAULT_PROPS = {\n  transitionEasing: t => t,\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop\n};\n\nexport default class TransitionManager {\n  constructor(ControllerState, props = {}) {\n    this.ControllerState = ControllerState;\n    this.props = {...DEFAULT_PROPS, ...props};\n    this.propsInTransition = null;\n    this.transition = new Transition(props.timeline);\n\n    this.onViewStateChange = props.onViewStateChange || noop;\n    this.onStateChange = props.onStateChange || noop;\n\n    this._onTransitionUpdate = this._onTransitionUpdate.bind(this);\n  }\n\n  finalize() {\n    this.transition.cancel();\n  }\n\n  // Returns current transitioned viewport.\n  getViewportInTransition() {\n    return this.propsInTransition;\n  }\n\n  // Process the vewiport change, either ignore or trigger a new transition.\n  // Return true if a new transition is triggered, false otherwise.\n  processViewStateChange(nextProps) {\n    let transitionTriggered = false;\n    const currentProps = this.props;\n    // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.\n    nextProps = {...DEFAULT_PROPS, ...nextProps};\n    this.props = nextProps;\n\n    // NOTE: Be cautious re-ordering statements in this function.\n    if (this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return transitionTriggered;\n    }\n\n    if (this._isTransitionEnabled(nextProps)) {\n      const {interruption, endProps} = this.transition.settings;\n      const startProps = {\n        ...currentProps,\n        ...(interruption === TRANSITION_EVENTS.SNAP_TO_END\n          ? endProps\n          : this.propsInTransition || currentProps)\n      };\n\n      this._triggerTransition(startProps, nextProps);\n\n      transitionTriggered = true;\n    } else {\n      this.transition.cancel();\n    }\n\n    return transitionTriggered;\n  }\n\n  updateTransition() {\n    this.transition.update();\n  }\n\n  // Helper methods\n\n  _isTransitionEnabled(props) {\n    const {transitionDuration, transitionInterpolator} = props;\n    return (\n      (transitionDuration > 0 || transitionDuration === 'auto') && Boolean(transitionInterpolator)\n    );\n  }\n\n  _isUpdateDueToCurrentTransition(props) {\n    if (this.transition.inProgress) {\n      return this.transition.settings.interpolator.arePropsEqual(props, this.propsInTransition);\n    }\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps, nextProps) {\n    if (this.transition.inProgress) {\n      // Ignore update if it is requested to be ignored\n      return (\n        this.transition.settings.interruption === TRANSITION_EVENTS.IGNORE ||\n        // Ignore update if it is due to current active transition.\n        this._isUpdateDueToCurrentTransition(nextProps)\n      );\n    } else if (this._isTransitionEnabled(nextProps)) {\n      // Ignore if none of the viewport props changed.\n      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n    }\n    return true;\n  }\n\n  _triggerTransition(startProps, endProps) {\n    const startViewstate = new this.ControllerState(startProps);\n    const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n\n    // update transitionDuration for 'auto' mode\n    const {transitionInterpolator} = endProps;\n    const duration = transitionInterpolator.getDuration\n      ? transitionInterpolator.getDuration(startProps, endProps)\n      : endProps.transitionDuration;\n\n    if (duration === 0) {\n      return;\n    }\n\n    const initialProps = endProps.transitionInterpolator.initializeProps(\n      startProps,\n      endViewStateProps\n    );\n\n    this.propsInTransition = {};\n    this.duration = duration;\n    this.transition.start({\n      duration,\n      easing: endProps.transitionEasing,\n      interpolator: endProps.transitionInterpolator,\n      interruption: endProps.transitionInterruption,\n\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n\n      onStart: endProps.onTransitionStart,\n      onUpdate: this._onTransitionUpdate,\n      onInterrupt: this._onTransitionEnd(endProps.onTransitionInterrupt),\n      onEnd: this._onTransitionEnd(endProps.onTransitionEnd)\n    });\n\n    this.onStateChange({inTransition: true});\n\n    this.updateTransition();\n  }\n\n  _onTransitionEnd(callback) {\n    return transition => {\n      this.propsInTransition = null;\n\n      this.onStateChange({\n        inTransition: false,\n        isZooming: false,\n        isPanning: false,\n        isRotating: false\n      });\n\n      callback(transition);\n    };\n  }\n\n  _onTransitionUpdate(transition) {\n    // NOTE: Be cautious re-ordering statements in this function.\n    const {\n      time,\n      settings: {interpolator, startProps, endProps, duration, easing}\n    } = transition;\n    const t = easing(time / duration);\n    const viewport = interpolator.interpolateProps(startProps, endProps, t);\n\n    // This gurantees all props (e.g. bearing, longitude) are normalized\n    // So when viewports are compared they are in same range.\n    this.propsInTransition = new this.ControllerState({\n      ...this.props,\n      ...viewport\n    }).getViewportProps();\n\n    this.onViewStateChange({\n      viewState: this.propsInTransition,\n      oldViewState: this.props\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}