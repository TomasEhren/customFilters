{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Stats } from '@probe.gl/stats';\nconst STAT_QUEUED_REQUESTS = 'Queued Requests';\nconst STAT_ACTIVE_REQUESTS = 'Active Requests';\nconst STAT_CANCELLED_REQUESTS = 'Cancelled Requests';\nconst STAT_QUEUED_REQUESTS_EVER = 'Queued Requests Ever';\nconst STAT_ACTIVE_REQUESTS_EVER = 'Active Requests Ever';\nconst DEFAULT_PROPS = {\n  id: 'request-scheduler',\n  throttleRequests: true,\n  maxRequests: 6\n};\nexport default class RequestScheduler {\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _defineProperty(this, \"props\", void 0);\n\n    _defineProperty(this, \"stats\", void 0);\n\n    _defineProperty(this, \"activeRequestCount\", 0);\n\n    _defineProperty(this, \"requestQueue\", []);\n\n    _defineProperty(this, \"requestMap\", new Map());\n\n    _defineProperty(this, \"deferredUpdate\", null);\n\n    this.props = { ...DEFAULT_PROPS,\n      ...props\n    };\n    this.stats = new Stats({\n      id: this.props.id\n    });\n    this.stats.get(STAT_QUEUED_REQUESTS);\n    this.stats.get(STAT_ACTIVE_REQUESTS);\n    this.stats.get(STAT_CANCELLED_REQUESTS);\n    this.stats.get(STAT_QUEUED_REQUESTS_EVER);\n    this.stats.get(STAT_ACTIVE_REQUESTS_EVER);\n  }\n\n  scheduleRequest(handle) {\n    let getPriority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => 0;\n\n    if (!this.props.throttleRequests) {\n      return Promise.resolve({\n        done: () => {}\n      });\n    }\n\n    if (this.requestMap.has(handle)) {\n      return this.requestMap.get(handle);\n    }\n\n    const request = {\n      handle,\n      priority: 0,\n      getPriority\n    };\n    const promise = new Promise(resolve => {\n      request.resolve = resolve;\n      return request;\n    });\n    this.requestQueue.push(request);\n    this.requestMap.set(handle, promise);\n\n    this._issueNewRequests();\n\n    return promise;\n  }\n\n  _issueRequest(request) {\n    const {\n      handle,\n      resolve\n    } = request;\n    let isDone = false;\n\n    const done = () => {\n      if (!isDone) {\n        isDone = true;\n        this.requestMap.delete(handle);\n        this.activeRequestCount--;\n\n        this._issueNewRequests();\n      }\n    };\n\n    this.activeRequestCount++;\n    return resolve ? resolve({\n      done\n    }) : Promise.resolve({\n      done\n    });\n  }\n\n  _issueNewRequests() {\n    if (!this.deferredUpdate) {\n      this.deferredUpdate = setTimeout(() => this._issueNewRequestsAsync(), 0);\n    }\n  }\n\n  _issueNewRequestsAsync() {\n    this.deferredUpdate = null;\n    const freeSlots = Math.max(this.props.maxRequests - this.activeRequestCount, 0);\n\n    if (freeSlots === 0) {\n      return;\n    }\n\n    this._updateAllRequests();\n\n    for (let i = 0; i < freeSlots; ++i) {\n      const request = this.requestQueue.shift();\n\n      if (request) {\n        this._issueRequest(request);\n      }\n    }\n  }\n\n  _updateAllRequests() {\n    const requestQueue = this.requestQueue;\n\n    for (let i = 0; i < requestQueue.length; ++i) {\n      const request = requestQueue[i];\n\n      if (!this._updateRequest(request)) {\n        requestQueue.splice(i, 1);\n        this.requestMap.delete(request.handle);\n        i--;\n      }\n    }\n\n    requestQueue.sort((a, b) => a.priority - b.priority);\n  }\n\n  _updateRequest(request) {\n    request.priority = request.getPriority(request.handle);\n\n    if (request.priority < 0) {\n      request.resolve(null);\n      return false;\n    }\n\n    return true;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Stats","STAT_QUEUED_REQUESTS","STAT_ACTIVE_REQUESTS","STAT_CANCELLED_REQUESTS","STAT_QUEUED_REQUESTS_EVER","STAT_ACTIVE_REQUESTS_EVER","DEFAULT_PROPS","id","throttleRequests","maxRequests","RequestScheduler","constructor","props","_defineProperty","Map","stats","get","scheduleRequest","handle","getPriority","Promise","resolve","done","requestMap","has","request","priority","promise","requestQueue","push","set","_issueNewRequests","_issueRequest","isDone","delete","activeRequestCount","deferredUpdate","setTimeout","_issueNewRequestsAsync","freeSlots","Math","max","_updateAllRequests","i","shift","length","_updateRequest","splice","sort","a","b"],"sources":["../../../../src/lib/request-utils/request-scheduler.ts"],"sourcesContent":["import {Stats} from '@probe.gl/stats';\n\ntype Handle = any;\ntype DoneFunction = () => any;\ntype GetPriorityFunction = () => number;\ntype RequestResult = {\n  done: DoneFunction;\n} | null;\n\n/** RequestScheduler Options */\nexport type RequestSchedulerProps = {\n  id?: string;\n  throttleRequests?: boolean;\n  maxRequests?: number;\n};\n\nconst STAT_QUEUED_REQUESTS = 'Queued Requests';\nconst STAT_ACTIVE_REQUESTS = 'Active Requests';\nconst STAT_CANCELLED_REQUESTS = 'Cancelled Requests';\nconst STAT_QUEUED_REQUESTS_EVER = 'Queued Requests Ever';\nconst STAT_ACTIVE_REQUESTS_EVER = 'Active Requests Ever';\n\nconst DEFAULT_PROPS: Required<RequestSchedulerProps> = {\n  id: 'request-scheduler',\n  // Specifies if the request scheduler should throttle incoming requests, mainly for comparative testing\n  throttleRequests: true,\n  // The maximum number of simultaneous active requests. Un-throttled requests do not observe this limit.\n  maxRequests: 6\n};\n\n/** Tracks one request */\ntype Request = {\n  handle: Handle;\n  priority: number;\n  getPriority: GetPriorityFunction;\n  resolve?: (value: any) => any;\n};\n\n/**\n * Used to issue a request, without having them \"deeply queued\" by the browser.\n * @todo - Track requests globally, across multiple servers\n */\nexport default class RequestScheduler {\n  readonly props: Required<RequestSchedulerProps>;\n  readonly stats: Stats;\n  activeRequestCount: number = 0;\n\n  /** Tracks the number of active requests and prioritizes/cancels queued requests. */\n  private requestQueue: Request[] = [];\n  private requestMap: Map<Handle, Promise<RequestResult>> = new Map();\n  private deferredUpdate: any = null;\n\n  constructor(props: RequestSchedulerProps = {}) {\n    this.props = {...DEFAULT_PROPS, ...props};\n\n    // Returns the statistics used by the request scheduler.\n    this.stats = new Stats({id: this.props.id});\n    this.stats.get(STAT_QUEUED_REQUESTS);\n    this.stats.get(STAT_ACTIVE_REQUESTS);\n    this.stats.get(STAT_CANCELLED_REQUESTS);\n    this.stats.get(STAT_QUEUED_REQUESTS_EVER);\n    this.stats.get(STAT_ACTIVE_REQUESTS_EVER);\n  }\n\n  /**\n   * Called by an application that wants to issue a request, without having it deeply queued by the browser\n   *\n   * When the returned promise resolved, it is OK for the application to issue a request.\n   * The promise resolves to an object that contains a `done` method.\n   * When the application's request has completed (or failed), the application must call the `done` function\n   *\n   * @param handle\n   * @param getPriority will be called when request \"slots\" open up,\n   *    allowing the caller to update priority or cancel the request\n   *    Highest priority executes first, priority < 0 cancels the request\n   * @returns a promise\n   *   - resolves to a object (with a `done` field) when the request can be issued without queueing,\n   *   - resolves to `null` if the request has been cancelled (by the callback return < 0).\n   *     In this case the application should not issue the request\n   */\n  scheduleRequest(\n    handle: Handle,\n    getPriority: GetPriorityFunction = () => 0\n  ): Promise<RequestResult> {\n    // Allows throttling to be disabled\n    if (!this.props.throttleRequests) {\n      return Promise.resolve({done: () => {}});\n    }\n\n    // dedupe\n    if (this.requestMap.has(handle)) {\n      return this.requestMap.get(handle) as Promise<any>;\n    }\n\n    const request: Request = {handle, priority: 0, getPriority};\n    const promise = new Promise<RequestResult>((resolve) => {\n      // @ts-ignore\n      request.resolve = resolve;\n      return request;\n    });\n\n    this.requestQueue.push(request);\n    this.requestMap.set(handle, promise);\n    this._issueNewRequests();\n    return promise;\n  }\n\n  // PRIVATE\n\n  _issueRequest(request: Request): Promise<any> {\n    const {handle, resolve} = request;\n    let isDone = false;\n\n    const done = () => {\n      // can only be called once\n      if (!isDone) {\n        isDone = true;\n\n        // Stop tracking a request - it has completed, failed, cancelled etc\n        this.requestMap.delete(handle);\n        this.activeRequestCount--;\n        // A slot just freed up, see if any queued requests are waiting\n        this._issueNewRequests();\n      }\n    };\n\n    // Track this request\n    this.activeRequestCount++;\n\n    return resolve ? resolve({done}) : Promise.resolve({done});\n  }\n\n  /** We check requests asynchronously, to prevent multiple updates */\n  _issueNewRequests(): void {\n    if (!this.deferredUpdate) {\n      this.deferredUpdate = setTimeout(() => this._issueNewRequestsAsync(), 0);\n    }\n  }\n\n  /** Refresh all requests  */\n  _issueNewRequestsAsync() {\n    // TODO - shouldn't we clear the timeout?\n    this.deferredUpdate = null;\n\n    const freeSlots = Math.max(this.props.maxRequests - this.activeRequestCount, 0);\n\n    if (freeSlots === 0) {\n      return;\n    }\n\n    this._updateAllRequests();\n\n    // Resolve pending promises for the top-priority requests\n    for (let i = 0; i < freeSlots; ++i) {\n      const request = this.requestQueue.shift();\n      if (request) {\n        this._issueRequest(request); // eslint-disable-line @typescript-eslint/no-floating-promises\n      }\n    }\n\n    // Uncomment to debug\n    // console.log(`${freeSlots} free slots, ${this.requestQueue.length} queued requests`);\n  }\n\n  /** Ensure all requests have updated priorities, and that no longer valid requests are cancelled */\n  _updateAllRequests() {\n    const requestQueue = this.requestQueue;\n    for (let i = 0; i < requestQueue.length; ++i) {\n      const request = requestQueue[i];\n      if (!this._updateRequest(request)) {\n        // Remove the element and make sure to adjust the counter to account for shortened array\n        requestQueue.splice(i, 1);\n        this.requestMap.delete(request.handle);\n        i--;\n      }\n    }\n\n    // Sort the remaining requests based on priority\n    requestQueue.sort((a, b) => a.priority - b.priority);\n  }\n\n  /** Update a single request by calling the callback */\n  _updateRequest(request) {\n    request.priority = request.getPriority(request.handle); // eslint-disable-line callback-return\n\n    // by returning a negative priority, the callback cancels the request\n    if (request.priority < 0) {\n      request.resolve(null);\n      return false;\n    }\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}