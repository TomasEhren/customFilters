{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport lightingShader from './lights.glsl';\nvar INITIAL_MODULE_OPTIONS = {\n  lightSources: {}\n};\n\nfunction convertColor() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? [0, 0, 0] : _ref$color,\n      _ref$intensity = _ref.intensity,\n      intensity = _ref$intensity === void 0 ? 1.0 : _ref$intensity;\n\n  return color.map(function (component) {\n    return component * intensity / 255.0;\n  });\n}\n\nfunction getLightSourceUniforms(_ref2) {\n  var ambientLight = _ref2.ambientLight,\n      _ref2$pointLights = _ref2.pointLights,\n      pointLights = _ref2$pointLights === void 0 ? [] : _ref2$pointLights,\n      _ref2$directionalLigh = _ref2.directionalLights,\n      directionalLights = _ref2$directionalLigh === void 0 ? [] : _ref2$directionalLigh;\n  var lightSourceUniforms = {};\n\n  if (ambientLight) {\n    lightSourceUniforms['lighting_uAmbientLight.color'] = convertColor(ambientLight);\n  } else {\n    lightSourceUniforms['lighting_uAmbientLight.color'] = [0, 0, 0];\n  }\n\n  pointLights.forEach(function (pointLight, index) {\n    lightSourceUniforms[\"lighting_uPointLight[\".concat(index, \"].color\")] = convertColor(pointLight);\n    lightSourceUniforms[\"lighting_uPointLight[\".concat(index, \"].position\")] = pointLight.position;\n    lightSourceUniforms[\"lighting_uPointLight[\".concat(index, \"].attenuation\")] = pointLight.attenuation || [1, 0, 0];\n  });\n  lightSourceUniforms.lighting_uPointLightCount = pointLights.length;\n  directionalLights.forEach(function (directionalLight, index) {\n    lightSourceUniforms[\"lighting_uDirectionalLight[\".concat(index, \"].color\")] = convertColor(directionalLight);\n    lightSourceUniforms[\"lighting_uDirectionalLight[\".concat(index, \"].direction\")] = directionalLight.direction;\n  });\n  lightSourceUniforms.lighting_uDirectionalLightCount = directionalLights.length;\n  return lightSourceUniforms;\n}\n\nfunction getUniforms() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_MODULE_OPTIONS;\n\n  if ('lightSources' in opts) {\n    var _ref3 = opts.lightSources || {},\n        ambientLight = _ref3.ambientLight,\n        pointLights = _ref3.pointLights,\n        directionalLights = _ref3.directionalLights;\n\n    var hasLights = ambientLight || pointLights && pointLights.length > 0 || directionalLights && directionalLights.length > 0;\n\n    if (!hasLights) {\n      return {\n        lighting_uEnabled: false\n      };\n    }\n\n    return Object.assign({}, getLightSourceUniforms({\n      ambientLight: ambientLight,\n      pointLights: pointLights,\n      directionalLights: directionalLights\n    }), {\n      lighting_uEnabled: true\n    });\n  }\n\n  if ('lights' in opts) {\n    var lightSources = {\n      pointLights: [],\n      directionalLights: []\n    };\n\n    var _iterator = _createForOfIteratorHelper(opts.lights || []),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var light = _step.value;\n\n        switch (light.type) {\n          case 'ambient':\n            lightSources.ambientLight = light;\n            break;\n\n          case 'directional':\n            lightSources.directionalLights.push(light);\n            break;\n\n          case 'point':\n            lightSources.pointLights.push(light);\n            break;\n\n          default:\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return getUniforms({\n      lightSources: lightSources\n    });\n  }\n\n  return {};\n}\n\nexport var lights = {\n  name: 'lights',\n  vs: lightingShader,\n  fs: lightingShader,\n  getUniforms: getUniforms,\n  defines: {\n    MAX_LIGHTS: 3\n  }\n};","map":{"version":3,"mappings":"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","names":["lightingShader","INITIAL_MODULE_OPTIONS","lightSources","convertColor","color","intensity","map","component","getLightSourceUniforms","ambientLight","pointLights","directionalLights","lightSourceUniforms","forEach","pointLight","index","position","attenuation","lighting_uPointLightCount","length","directionalLight","direction","lighting_uDirectionalLightCount","getUniforms","opts","hasLights","lighting_uEnabled","Object","assign","lights","light","type","push","name","vs","fs","defines","MAX_LIGHTS"],"sources":["../../../../src/modules/lights/lights.js"],"sourcesContent":["/** @typedef {import('../../types').ShaderModule} ShaderModule */\n\nimport lightingShader from './lights.glsl';\n\nconst INITIAL_MODULE_OPTIONS = {\n  lightSources: {}\n};\n\n// Take color 0-255 and intensity as input and output 0.0-1.0 range\nfunction convertColor({color = [0, 0, 0], intensity = 1.0} = {}) {\n  return color.map(component => (component * intensity) / 255.0);\n}\n\nfunction getLightSourceUniforms({ambientLight, pointLights = [], directionalLights = []}) {\n  const lightSourceUniforms = {};\n\n  if (ambientLight) {\n    lightSourceUniforms['lighting_uAmbientLight.color'] = convertColor(ambientLight);\n  } else {\n    lightSourceUniforms['lighting_uAmbientLight.color'] = [0, 0, 0];\n  }\n\n  pointLights.forEach((pointLight, index) => {\n    lightSourceUniforms[`lighting_uPointLight[${index}].color`] = convertColor(pointLight);\n    lightSourceUniforms[`lighting_uPointLight[${index}].position`] = pointLight.position;\n    lightSourceUniforms[`lighting_uPointLight[${index}].attenuation`] = pointLight.attenuation || [\n      1,\n      0,\n      0\n    ];\n  });\n  lightSourceUniforms.lighting_uPointLightCount = pointLights.length;\n\n  directionalLights.forEach((directionalLight, index) => {\n    lightSourceUniforms[`lighting_uDirectionalLight[${index}].color`] = convertColor(\n      directionalLight\n    );\n    lightSourceUniforms[`lighting_uDirectionalLight[${index}].direction`] =\n      directionalLight.direction;\n  });\n  lightSourceUniforms.lighting_uDirectionalLightCount = directionalLights.length;\n\n  return lightSourceUniforms;\n}\n\n// eslint-disable-next-line complexity\nfunction getUniforms(opts = INITIAL_MODULE_OPTIONS) {\n  // Specify lights separately\n  if ('lightSources' in opts) {\n    const {ambientLight, pointLights, directionalLights} = opts.lightSources || {};\n    const hasLights =\n      ambientLight ||\n      (pointLights && pointLights.length > 0) ||\n      (directionalLights && directionalLights.length > 0);\n\n    if (!hasLights) {\n      return {lighting_uEnabled: false};\n    }\n\n    return Object.assign(\n      {},\n      getLightSourceUniforms({ambientLight, pointLights, directionalLights}),\n      {\n        lighting_uEnabled: true\n      }\n    );\n  }\n\n  // Support for array of lights. Type of light is detected by type field\n  if ('lights' in opts) {\n    const lightSources = {pointLights: [], directionalLights: []};\n    // @ts-ignore\n    for (const light of opts.lights || []) {\n      switch (light.type) {\n        case 'ambient':\n          // Note: Only uses last ambient light\n          // TODO - add ambient light sources on CPU?\n          lightSources.ambientLight = light;\n          break;\n        case 'directional':\n          lightSources.directionalLights.push(light);\n          break;\n        case 'point':\n          lightSources.pointLights.push(light);\n          break;\n        default:\n        // eslint-disable-next-line\n        // console.warn(light.type);\n      }\n    }\n\n    // Call the `opts.lightSources`` version\n    return getUniforms({lightSources});\n  }\n\n  return {};\n}\n\n/** @type {ShaderModule} */\nexport const lights = {\n  name: 'lights',\n  vs: lightingShader,\n  fs: lightingShader,\n  getUniforms,\n  defines: {\n    MAX_LIGHTS: 3\n  }\n};\n"]},"metadata":{},"sourceType":"module"}