{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './line-layer-vertex.glsl';\nimport fs from './line-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  getSourcePosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.sourcePosition;\n    }\n  },\n  getTargetPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.targetPosition;\n    }\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  widthUnits: 'pixels',\n  widthScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  widthMinPixels: {\n    type: 'number',\n    value: 0,\n    min: 0\n  },\n  widthMaxPixels: {\n    type: 'number',\n    value: Number.MAX_SAFE_INTEGER,\n    min: 0\n  }\n};\n\nvar LineLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(LineLayer, _Layer);\n\n  var _super = _createSuper(LineLayer);\n\n  function LineLayer() {\n    _classCallCheck(this, LineLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LineLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _get(_getPrototypeOf(LineLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, picking]\n      });\n    }\n  }, {\n    key: \"wrapLongitude\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instanceSourcePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getSourcePosition'\n        },\n        instanceTargetPositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getTargetPosition'\n        },\n        instanceColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: true,\n          accessor: 'getColor',\n          defaultValue: [0, 0, 0, 255]\n        },\n        instanceWidths: {\n          size: 1,\n          transition: true,\n          accessor: 'getWidth',\n          defaultValue: 1\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      _get(_getPrototypeOf(LineLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      if (changeFlags.extensionsChanged) {\n        var _this$state$model;\n\n        var gl = this.context.gl;\n        (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n        this.state.model = this._getModel(gl);\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var _this$props = this.props,\n          widthUnits = _this$props.widthUnits,\n          widthScale = _this$props.widthScale,\n          widthMinPixels = _this$props.widthMinPixels,\n          widthMaxPixels = _this$props.widthMaxPixels,\n          wrapLongitude = _this$props.wrapLongitude;\n      this.state.model.setUniforms(uniforms).setUniforms({\n        widthUnits: UNIT[widthUnits],\n        widthScale: widthScale,\n        widthMinPixels: widthMinPixels,\n        widthMaxPixels: widthMaxPixels,\n        useShortestPath: wrapLongitude ? 1 : 0\n      }).draw();\n\n      if (wrapLongitude) {\n        this.state.model.setUniforms({\n          useShortestPath: -1\n        }).draw();\n      }\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var positions = [0, -1, 0, 0, 1, 0, 1, -1, 0, 1, 1, 0];\n      return new Model(gl, _objectSpread(_objectSpread({}, this.getShaders()), {}, {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 5,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true\n      }));\n    }\n  }]);\n\n  return LineLayer;\n}(Layer);\n\nexport { LineLayer as default };\nLineLayer.layerName = 'LineLayer';\nLineLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["Layer","project32","picking","UNIT","Model","Geometry","vs","fs","DEFAULT_COLOR","defaultProps","getSourcePosition","type","value","x","sourcePosition","getTargetPosition","targetPosition","getColor","getWidth","widthUnits","widthScale","min","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","LineLayer","getShaders","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instanceSourcePositions","size","fp64","use64bitPositions","transition","accessor","instanceTargetPositions","instanceColors","props","colorFormat","length","normalized","defaultValue","instanceWidths","updateState","oldProps","changeFlags","extensionsChanged","gl","context","state","model","delete","_getModel","invalidateAll","draw","uniforms","wrapLongitude","setUniforms","useShortestPath","positions","id","geometry","drawMode","attributes","Float32Array","isInstanced","layerName"],"sources":["../../../src/line-layer/line-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './line-layer-vertex.glsl';\nimport fs from './line-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  getSourcePosition: {type: 'accessor', value: x => x.sourcePosition},\n  getTargetPosition: {type: 'accessor', value: x => x.targetPosition},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n\n  widthUnits: 'pixels',\n  widthScale: {type: 'number', value: 1, min: 0},\n  widthMinPixels: {type: 'number', value: 0, min: 0},\n  widthMaxPixels: {type: 'number', value: Number.MAX_SAFE_INTEGER, min: 0}\n};\n\nexport default class LineLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  // This layer has its own wrapLongitude logic\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {widthUnits, widthScale, widthMinPixels, widthMaxPixels, wrapLongitude} = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        widthUnits: UNIT[widthUnits],\n        widthScale,\n        widthMinPixels,\n        widthMaxPixels,\n        useShortestPath: wrapLongitude ? 1 : 0\n      })\n      .draw();\n\n    if (wrapLongitude) {\n      // Render a second copy for the clipped lines at the 180th meridian\n      this.state.model\n        .setUniforms({\n          useShortestPath: -1\n        })\n        .draw();\n    }\n  }\n\n  _getModel(gl) {\n    /*\n     *  (0, -1)-------------_(1, -1)\n     *       |          _,-\"  |\n     *       o      _,-\"      o\n     *       |  _,-\"          |\n     *   (0, 1)\"-------------(1, 1)\n     */\n    const positions = [0, -1, 0, 0, 1, 0, 1, -1, 0, 1, 1, 0];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_STRIP,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n\nLineLayer.layerName = 'LineLayer';\nLineLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}