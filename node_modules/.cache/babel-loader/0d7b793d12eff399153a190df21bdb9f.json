{"ast":null,"code":"import Viewport from './viewport';\nimport { pixelsToWorld, getViewMatrix, addMetersToLngLat, getProjectionParameters, altitudeToFovy, fovyToAltitude, fitBounds, getBounds } from '@math.gl/web-mercator';\nimport * as vec2 from 'gl-matrix/vec2';\nimport { Matrix4 } from '@math.gl/core';\nconst TILE_SIZE = 512;\nconst EARTH_CIRCUMFERENCE = 40.03e6;\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction unitsPerMeter(latitude) {\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return TILE_SIZE / EARTH_CIRCUMFERENCE / latCosine;\n}\n\nexport default class WebMercatorViewport extends Viewport {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 11,\n      pitch = 0,\n      bearing = 0,\n      nearZMultiplier = 0.1,\n      farZMultiplier = 1.01,\n      orthographic = false,\n      projectionMatrix,\n      repeat = false,\n      worldOffset = 0,\n      legacyMeterSizes = false\n    } = opts;\n    let {\n      width,\n      height,\n      altitude = 1.5\n    } = opts;\n    const scale = Math.pow(2, zoom);\n    width = width || 1;\n    height = height || 1;\n    let fovy;\n    let projectionParameters = null;\n\n    if (projectionMatrix) {\n      altitude = projectionMatrix[5] / 2;\n      fovy = altitudeToFovy(altitude);\n    } else {\n      if (opts.fovy) {\n        fovy = opts.fovy;\n        altitude = fovyToAltitude(fovy);\n      } else {\n        fovy = altitudeToFovy(altitude);\n      }\n\n      projectionParameters = getProjectionParameters({\n        width,\n        height,\n        pitch,\n        fovy,\n        nearZMultiplier,\n        farZMultiplier\n      });\n    }\n\n    let viewMatrixUncentered = getViewMatrix({\n      height,\n      pitch,\n      bearing,\n      scale,\n      altitude\n    });\n\n    if (worldOffset) {\n      const viewOffset = new Matrix4().translate([512 * worldOffset, 0, 0]);\n      viewMatrixUncentered = viewOffset.multiplyLeft(viewMatrixUncentered);\n    }\n\n    super({ ...opts,\n      width,\n      height,\n      viewMatrix: viewMatrixUncentered,\n      longitude,\n      latitude,\n      zoom,\n      ...projectionParameters,\n      fovy,\n      focalDistance: altitude\n    });\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n    this.orthographic = orthographic;\n    this._subViewports = repeat ? [] : null;\n    this._pseudoMeters = legacyMeterSizes;\n    Object.freeze(this);\n  }\n\n  get subViewports() {\n    if (this._subViewports && !this._subViewports.length) {\n      const bounds = this.getBounds();\n      const minOffset = Math.floor((bounds[0] + 180) / 360);\n      const maxOffset = Math.ceil((bounds[2] - 180) / 360);\n\n      for (let x = minOffset; x <= maxOffset; x++) {\n        const offsetViewport = x ? new WebMercatorViewport({ ...this,\n          worldOffset: x\n        }) : this;\n\n        this._subViewports.push(offsetViewport);\n      }\n    }\n\n    return this._subViewports;\n  }\n\n  projectPosition(xyz) {\n    if (this._pseudoMeters) {\n      return super.projectPosition(xyz);\n    }\n\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * unitsPerMeter(xyz[1]);\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    if (this._pseudoMeters) {\n      return super.unprojectPosition(xyz);\n    }\n\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) / unitsPerMeter(Y);\n    return [X, Y, Z];\n  }\n\n  addMetersToLngLat(lngLatZ, xyz) {\n    return addMetersToLngLat(lngLatZ, xyz);\n  }\n\n  panByPosition(coords, pixel) {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(coords);\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n    const [longitude, latitude] = this.unprojectFlat(newCenter);\n    return {\n      longitude,\n      latitude\n    };\n  }\n\n  getBounds() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const corners = getBounds(this, options.z || 0);\n    return [Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]), Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]), Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]), Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])];\n  }\n\n  fitBounds(bounds) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      width,\n      height\n    } = this;\n    const {\n      longitude,\n      latitude,\n      zoom\n    } = fitBounds({\n      width,\n      height,\n      bounds,\n      ...options\n    });\n    return new WebMercatorViewport({\n      width,\n      height,\n      longitude,\n      latitude,\n      zoom\n    });\n  }\n\n}\nWebMercatorViewport.displayName = 'WebMercatorViewport';","map":{"version":3,"mappings":"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","names":["Viewport","pixelsToWorld","getViewMatrix","addMetersToLngLat","getProjectionParameters","altitudeToFovy","fovyToAltitude","fitBounds","getBounds","vec2","Matrix4","TILE_SIZE","EARTH_CIRCUMFERENCE","DEGREES_TO_RADIANS","Math","PI","unitsPerMeter","latitude","latCosine","cos","WebMercatorViewport","constructor","opts","longitude","zoom","pitch","bearing","nearZMultiplier","farZMultiplier","orthographic","projectionMatrix","repeat","worldOffset","legacyMeterSizes","width","height","altitude","scale","pow","fovy","projectionParameters","viewMatrixUncentered","viewOffset","translate","multiplyLeft","viewMatrix","focalDistance","_subViewports","_pseudoMeters","Object","freeze","subViewports","length","bounds","minOffset","floor","maxOffset","ceil","x","offsetViewport","push","projectPosition","xyz","X","Y","projectFlat","Z","unprojectPosition","unprojectFlat","lngLatZ","panByPosition","coords","pixel","fromLocation","pixelUnprojectionMatrix","toLocation","add","negate","newCenter","center","options","corners","z","min","max","displayName"],"sources":["../../../src/viewports/web-mercator-viewport.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// View and Projection Matrix calculations for mapbox-js style\n// map view properties\nimport Viewport from './viewport';\n\nimport {\n  pixelsToWorld,\n  getViewMatrix,\n  addMetersToLngLat,\n  getProjectionParameters,\n  altitudeToFovy,\n  fovyToAltitude,\n  fitBounds,\n  getBounds\n} from '@math.gl/web-mercator';\n\n// TODO - import from math.gl\nimport * as vec2 from 'gl-matrix/vec2';\nimport {Matrix4} from '@math.gl/core';\n\nconst TILE_SIZE = 512;\nconst EARTH_CIRCUMFERENCE = 40.03e6;\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction unitsPerMeter(latitude) {\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return TILE_SIZE / EARTH_CIRCUMFERENCE / latCosine;\n}\n\nexport default class WebMercatorViewport extends Viewport {\n  /**\n   * @classdesc\n   * Creates view/projection matrices from mercator params\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  /* eslint-disable complexity, max-statements */\n  constructor(opts = {}) {\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 11,\n      pitch = 0,\n      bearing = 0,\n      nearZMultiplier = 0.1,\n      farZMultiplier = 1.01,\n      orthographic = false,\n      projectionMatrix,\n\n      repeat = false,\n      worldOffset = 0,\n\n      // backward compatibility\n      // TODO: remove in v9\n      legacyMeterSizes = false\n    } = opts;\n\n    let {width, height, altitude = 1.5} = opts;\n    const scale = Math.pow(2, zoom);\n\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    let fovy;\n    let projectionParameters = null;\n    if (projectionMatrix) {\n      altitude = projectionMatrix[5] / 2;\n      fovy = altitudeToFovy(altitude);\n    } else {\n      if (opts.fovy) {\n        fovy = opts.fovy;\n        altitude = fovyToAltitude(fovy);\n      } else {\n        fovy = altitudeToFovy(altitude);\n      }\n      projectionParameters = getProjectionParameters({\n        width,\n        height,\n        pitch,\n        fovy,\n        nearZMultiplier,\n        farZMultiplier\n      });\n    }\n\n    // The uncentered matrix allows us two move the center addition to the\n    // shader (cheap) which gives a coordinate system that has its center in\n    // the layer's center position. This makes rotations and other modelMatrx\n    // transforms much more useful.\n    let viewMatrixUncentered = getViewMatrix({\n      height,\n      pitch,\n      bearing,\n      scale,\n      altitude\n    });\n\n    if (worldOffset) {\n      const viewOffset = new Matrix4().translate([512 * worldOffset, 0, 0]);\n      viewMatrixUncentered = viewOffset.multiplyLeft(viewMatrixUncentered);\n    }\n\n    super({\n      ...opts,\n      // x, y,\n      width,\n      height,\n\n      // view matrix\n      viewMatrix: viewMatrixUncentered,\n      longitude,\n      latitude,\n      zoom,\n\n      // projection matrix parameters\n      ...projectionParameters,\n      fovy,\n      focalDistance: altitude\n    });\n\n    // Save parameters\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n\n    this.orthographic = orthographic;\n\n    this._subViewports = repeat ? [] : null;\n    this._pseudoMeters = legacyMeterSizes;\n\n    Object.freeze(this);\n  }\n  /* eslint-enable complexity, max-statements */\n\n  get subViewports() {\n    if (this._subViewports && !this._subViewports.length) {\n      // Cache sub viewports so that we only calculate them once\n      const bounds = this.getBounds();\n\n      const minOffset = Math.floor((bounds[0] + 180) / 360);\n      const maxOffset = Math.ceil((bounds[2] - 180) / 360);\n\n      for (let x = minOffset; x <= maxOffset; x++) {\n        const offsetViewport = x\n          ? new WebMercatorViewport({\n              ...this,\n              worldOffset: x\n            })\n          : this;\n        this._subViewports.push(offsetViewport);\n      }\n    }\n    return this._subViewports;\n  }\n\n  projectPosition(xyz) {\n    if (this._pseudoMeters) {\n      // Backward compatibility\n      return super.projectPosition(xyz);\n    }\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * unitsPerMeter(xyz[1]);\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    if (this._pseudoMeters) {\n      // Backward compatibility\n      return super.unprojectPosition(xyz);\n    }\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) / unitsPerMeter(Y);\n    return [X, Y, Z];\n  }\n\n  /**\n   * Add a meter delta to a base lnglat coordinate, returning a new lnglat array\n   *\n   * Note: Uses simple linear approximation around the viewport center\n   * Error increases with size of offset (roughly 1% per 100km)\n   *\n   * @param {[Number,Number]|[Number,Number,Number]) lngLatZ - base coordinate\n   * @param {[Number,Number]|[Number,Number,Number]) xyz - array of meter deltas\n   * @return {[Number,Number]|[Number,Number,Number]) array of [lng,lat,z] deltas\n   */\n  addMetersToLngLat(lngLatZ, xyz) {\n    return addMetersToLngLat(lngLatZ, xyz);\n  }\n\n  panByPosition(coords, pixel) {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(coords);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    const [longitude, latitude] = this.unprojectFlat(newCenter);\n    return {longitude, latitude};\n  }\n\n  getBounds(options = {}) {\n    const corners = getBounds(this, options.z || 0);\n\n    return [\n      Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),\n      Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]),\n      Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),\n      Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])\n    ];\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   * @param {Array} bounds - [[lon, lat], [lon, lat]]\n   * @param {Number} [options.padding] - The amount of padding in pixels to add to the given bounds.\n   * @param {Array} [options.offset] - The center of the given bounds relative to the map's center,\n   *    [x, y] measured in pixels.\n   * @returns {WebMercatorViewport}\n   */\n  fitBounds(bounds, options = {}) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds({width, height, bounds, ...options});\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n}\n\nWebMercatorViewport.displayName = 'WebMercatorViewport';\n"]},"metadata":{},"sourceType":"module"}