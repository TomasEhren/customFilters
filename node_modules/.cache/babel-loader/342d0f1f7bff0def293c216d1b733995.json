{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { assert } from '../../utils/assert';\nimport GLTFScenegraph from '../../api/gltf-scenegraph';\nvar KHR_LIGHTS_PUNCTUAL = 'KHR_lights_punctual';\nexport var name = KHR_LIGHTS_PUNCTUAL;\nexport function decode(_x) {\n  return _decode.apply(this, arguments);\n}\n\nfunction _decode() {\n  _decode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(gltfData) {\n    var gltfScenegraph, json, extension, _iterator, _step, node, nodeExtension;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            gltfScenegraph = new GLTFScenegraph(gltfData);\n            json = gltfScenegraph.json;\n            extension = gltfScenegraph.getExtension(KHR_LIGHTS_PUNCTUAL);\n\n            if (extension) {\n              gltfScenegraph.json.lights = extension.lights;\n              gltfScenegraph.removeExtension(KHR_LIGHTS_PUNCTUAL);\n            }\n\n            _iterator = _createForOfIteratorHelper(json.nodes || []);\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                node = _step.value;\n                nodeExtension = gltfScenegraph.getObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n\n                if (nodeExtension) {\n                  node.light = nodeExtension.light;\n                }\n\n                gltfScenegraph.removeObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _decode.apply(this, arguments);\n}\n\nexport function encode(_x2) {\n  return _encode.apply(this, arguments);\n}\n\nfunction _encode() {\n  _encode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(gltfData) {\n    var gltfScenegraph, json, extension, _iterator2, _step2, light, node;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            gltfScenegraph = new GLTFScenegraph(gltfData);\n            json = gltfScenegraph.json;\n\n            if (json.lights) {\n              extension = gltfScenegraph.addExtension(KHR_LIGHTS_PUNCTUAL);\n              assert(!extension.lights);\n              extension.lights = json.lights;\n              delete json.lights;\n            }\n\n            if (gltfScenegraph.json.lights) {\n              _iterator2 = _createForOfIteratorHelper(gltfScenegraph.json.lights);\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  light = _step2.value;\n                  node = light.node;\n                  gltfScenegraph.addObjectExtension(node, KHR_LIGHTS_PUNCTUAL, light);\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n\n              delete gltfScenegraph.json.lights;\n            }\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _encode.apply(this, arguments);\n}","map":{"version":3,"mappings":";;;AAKA,SAAQA,MAAR,QAAqB,oBAArB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AAEA,IAAMC,mBAAmB,GAAG,qBAA5B;AAEA,OAAO,IAAMC,IAAI,GAAGD,mBAAb;AAEP,gBAAsBE,MAAtB;EAAA;AAAA;;;qEAAO,iBAAsBC,QAAtB;IAAA;;IAAA;MAAA;QAAA;UAAA;YACCC,cADD,GACkB,IAAIL,cAAJ,CAAmBI,QAAnB,CADlB;YAEEE,IAFF,GAEUD,cAFV,CAEEC,IAFF;YAKCC,SALD,GAKaF,cAAc,CAACG,YAAfH,CAA4BJ,mBAA5BI,CALb;;YAML,IAAIE,SAAJ,EAAe;cAEbF,cAAc,CAACC,IAAfD,CAAoBI,MAApBJ,GAA6BE,SAAS,CAACE,MAAvCJ;cACAA,cAAc,CAACK,eAAfL,CAA+BJ,mBAA/BI;YACD;;YAVI,uCAccC,IAAI,CAACK,KAALL,IAAc,EAd5B;;YAAA;cAcL,oDAAqC;gBAA1BM,IAA0B;gBAC7BC,aAD6B,GACbR,cAAc,CAACS,kBAAfT,CAAkCO,IAAlCP,EAAwCJ,mBAAxCI,CADa;;gBAEnC,IAAIQ,aAAJ,EAAmB;kBAEjBD,IAAI,CAACG,KAALH,GAAaC,aAAa,CAACE,KAA3BH;gBACD;;gBACDP,cAAc,CAACW,qBAAfX,CAAqCO,IAArCP,EAA2CJ,mBAA3CI;cACD;YArBI;cAAA;YAAA;cAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAyBP,gBAAsBY,MAAtB;EAAA;AAAA;;;qEAAO,kBAAsBb,QAAtB;IAAA;;IAAA;MAAA;QAAA;UAAA;YACCC,cADD,GACkB,IAAIL,cAAJ,CAAmBI,QAAnB,CADlB;YAEEE,IAFF,GAEUD,cAFV,CAEEC,IAFF;;YAKL,IAAIA,IAAI,CAACG,MAAT,EAAiB;cACTF,SADS,GACGF,cAAc,CAACa,YAAfb,CAA4BJ,mBAA5BI,CADH;cAGfN,MAAM,CAAC,CAACQ,SAAS,CAACE,MAAZ,CAANV;cAEAQ,SAAS,CAACE,MAAVF,GAAmBD,IAAI,CAACG,MAAxBF;cAEA,OAAOD,IAAI,CAACG,MAAZ;YACD;;YAKD,IAAIJ,cAAc,CAACC,IAAfD,CAAoBI,MAAxB,EAAgC;cAAA,wCAEVJ,cAAc,CAACC,IAAfD,CAAoBI,MAFV;;cAAA;gBAE9B,uDAAgD;kBAArCM,KAAqC;kBACxCH,IADwC,GACjCG,KAAK,CAACH,IAD2B;kBAE9CP,cAAc,CAACc,kBAAfd,CAAkCO,IAAlCP,EAAwCJ,mBAAxCI,EAA6DU,KAA7DV;gBACD;cAL6B;gBAAA;cAAA;gBAAA;cAAA;;cAO9B,OAAOA,cAAc,CAACC,IAAfD,CAAoBI,MAA3B;YACD;;UA1BI;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","names":["assert","GLTFScenegraph","KHR_LIGHTS_PUNCTUAL","name","decode","gltfData","gltfScenegraph","json","extension","getExtension","lights","removeExtension","nodes","node","nodeExtension","getObjectExtension","light","removeObjectExtension","encode","addExtension","addObjectExtension"],"sources":["../../../../../src/lib/extensions/deprecated/KHR_lights_punctual.ts"],"sourcesContent":["// GLTF EXTENSION: KHR_lights_punctual\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\n\nimport type {GLTF} from '../../types/gltf-types';\n\nimport {assert} from '../../utils/assert';\nimport GLTFScenegraph from '../../api/gltf-scenegraph';\n\nconst KHR_LIGHTS_PUNCTUAL = 'KHR_lights_punctual';\n\nexport const name = KHR_LIGHTS_PUNCTUAL;\n\nexport async function decode(gltfData: {json: GLTF}): Promise<void> {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  // Move the light array out of the extension and remove the extension\n  const extension = gltfScenegraph.getExtension(KHR_LIGHTS_PUNCTUAL);\n  if (extension) {\n    // @ts-ignore\n    gltfScenegraph.json.lights = extension.lights;\n    gltfScenegraph.removeExtension(KHR_LIGHTS_PUNCTUAL);\n  }\n\n  // Any nodes that have the extension, add lights field pointing to light object\n  // and remove the extension\n  for (const node of json.nodes || []) {\n    const nodeExtension = gltfScenegraph.getObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n    if (nodeExtension) {\n      // @ts-ignore\n      node.light = nodeExtension.light;\n    }\n    gltfScenegraph.removeObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n  }\n}\n\n// Move the light ar ray out of the extension and remove the extension\nexport async function encode(gltfData): Promise<void> {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  // @ts-ignore\n  if (json.lights) {\n    const extension = gltfScenegraph.addExtension(KHR_LIGHTS_PUNCTUAL);\n    // @ts-ignore\n    assert(!extension.lights);\n    // @ts-ignore\n    extension.lights = json.lights;\n    // @ts-ignore\n    delete json.lights;\n  }\n\n  // Any nodes that have lights field pointing to light object\n  // add the extension\n  // @ts-ignore\n  if (gltfScenegraph.json.lights) {\n    // @ts-ignore\n    for (const light of gltfScenegraph.json.lights) {\n      const node = light.node;\n      gltfScenegraph.addObjectExtension(node, KHR_LIGHTS_PUNCTUAL, light);\n    }\n    // @ts-ignore\n    delete gltfScenegraph.json.lights;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}