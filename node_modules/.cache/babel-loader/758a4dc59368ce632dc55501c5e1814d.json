{"ast":null,"code":"import { COORDINATE_SYSTEM, OPERATION } from './constants';\nimport AttributeManager from './attribute/attribute-manager';\nimport UniformTransitionManager from './uniform-transition-manager';\nimport { diffProps, validateProps } from '../lifecycle/props';\nimport { count } from '../utils/count';\nimport log from '../utils/log';\nimport debug from '../debug';\nimport { withParameters, setParameters } from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport memoize from '../utils/memoize';\nimport { mergeShaders } from '../utils/shader';\nimport { projectPosition, getWorldPosition } from '../shaderlib/project/project-functions';\nimport typedArrayManager from '../utils/typed-array-manager';\nimport Component from '../lifecycle/component';\nimport LayerState from './layer-state';\nimport { worldToPixels } from '@math.gl/web-mercator';\nimport { load } from '@loaders.gl/core';\nconst TRACE_CHANGE_FLAG = 'layer.changeFlag';\nconst TRACE_INITIALIZE = 'layer.initialize';\nconst TRACE_UPDATE = 'layer.update';\nconst TRACE_FINALIZE = 'layer.finalize';\nconst TRACE_MATCHED = 'layer.matched';\nconst MAX_PICKING_COLOR_CACHE_SIZE = 2 ** 24 - 1;\nconst EMPTY_ARRAY = Object.freeze([]);\nconst areViewportsEqual = memoize(_ref2 => {\n  let {\n    oldViewport,\n    viewport\n  } = _ref2;\n  return oldViewport.equals(viewport);\n});\nlet pickingColorCache = new Uint8ClampedArray(0);\nconst defaultProps = {\n  data: {\n    type: 'data',\n    value: EMPTY_ARRAY,\n    async: true\n  },\n  dataComparator: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  _dataDiff: {\n    type: 'function',\n    value: data => data && data.__diff,\n    compare: false,\n    optional: true\n  },\n  dataTransform: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onDataLoad: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onError: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  fetch: {\n    type: 'function',\n    value: (url, _ref3) => {\n      let {\n        propName,\n        layer,\n        loaders,\n        loadOptions,\n        signal\n      } = _ref3;\n      const {\n        resourceManager\n      } = layer.context;\n      loadOptions = loadOptions || layer.getLoadOptions();\n      loaders = loaders || layer.props.loaders;\n\n      if (signal) {\n        var _loadOptions;\n\n        loadOptions = { ...loadOptions,\n          fetch: { ...((_loadOptions = loadOptions) === null || _loadOptions === void 0 ? void 0 : _loadOptions.fetch),\n            signal\n          }\n        };\n      }\n\n      let inResourceManager = resourceManager.contains(url);\n\n      if (!inResourceManager && !loadOptions) {\n        resourceManager.add({\n          resourceId: url,\n          data: load(url, loaders),\n          persistent: false\n        });\n        inResourceManager = true;\n      }\n\n      if (inResourceManager) {\n        return resourceManager.subscribe({\n          resourceId: url,\n          onChange: data => layer.internalState.reloadAsyncProp(propName, data),\n          consumerId: layer.id,\n          requestId: propName\n        });\n      }\n\n      return load(url, loaders, loadOptions);\n    },\n    compare: false\n  },\n  updateTriggers: {},\n  visible: true,\n  pickable: false,\n  opacity: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  operation: OPERATION.DRAW,\n  onHover: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onClick: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onDragStart: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onDrag: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onDragEnd: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n  coordinateOrigin: {\n    type: 'array',\n    value: [0, 0, 0],\n    compare: true\n  },\n  modelMatrix: {\n    type: 'array',\n    value: null,\n    compare: true,\n    optional: true\n  },\n  wrapLongitude: false,\n  positionFormat: 'XYZ',\n  colorFormat: 'RGBA',\n  parameters: {\n    type: 'object',\n    value: {},\n    optional: true,\n    compare: true\n  },\n  transitions: null,\n  extensions: [],\n  loaders: {\n    type: 'array',\n    value: [],\n    optional: true,\n    compare: true\n  },\n  getPolygonOffset: {\n    type: 'function',\n    value: _ref4 => {\n      let {\n        layerIndex\n      } = _ref4;\n      return [0, -layerIndex * 100];\n    },\n    compare: false\n  },\n  highlightedObjectIndex: null,\n  autoHighlight: false,\n  highlightColor: {\n    type: 'accessor',\n    value: [0, 0, 128, 128]\n  }\n};\nexport default class Layer extends Component {\n  toString() {\n    const className = this.constructor.layerName || this.constructor.name;\n    return \"\".concat(className, \"({id: '\").concat(this.props.id, \"'})\");\n  }\n\n  raiseError(error, message) {\n    var _this$props$onError, _this$props;\n\n    if (message) {\n      error.message = \"\".concat(message, \": \").concat(error.message);\n    }\n\n    if (!((_this$props$onError = (_this$props = this.props).onError) !== null && _this$props$onError !== void 0 && _this$props$onError.call(_this$props, error))) {\n      var _this$context, _this$context$onError;\n\n      (_this$context = this.context) === null || _this$context === void 0 ? void 0 : (_this$context$onError = _this$context.onError) === null || _this$context$onError === void 0 ? void 0 : _this$context$onError.call(_this$context, error, this);\n    }\n  }\n\n  setState(updateObject) {\n    this.setChangeFlags({\n      stateChanged: true\n    });\n    Object.assign(this.state, updateObject);\n    this.setNeedsRedraw();\n  }\n\n  setNeedsRedraw() {\n    let redraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n    if (this.internalState) {\n      this.internalState.needsRedraw = redraw;\n    }\n  }\n\n  setNeedsUpdate() {\n    this.context.layerManager.setNeedsUpdate(String(this));\n    this.internalState.needsUpdate = true;\n  }\n\n  getNeedsRedraw() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      clearRedrawFlags: false\n    };\n    return this._getNeedsRedraw(opts);\n  }\n\n  needsUpdate() {\n    return this.internalState.needsUpdate || this.hasUniformTransition() || this.shouldUpdateState(this._getUpdateParams());\n  }\n\n  hasUniformTransition() {\n    return this.internalState.uniformTransitions.active;\n  }\n\n  get isLoaded() {\n    return this.internalState && !this.internalState.isAsyncPropLoading();\n  }\n\n  get wrapLongitude() {\n    return this.props.wrapLongitude;\n  }\n\n  isPickable() {\n    return this.props.pickable && this.props.visible;\n  }\n\n  getModels() {\n    return this.state && (this.state.models || (this.state.model ? [this.state.model] : []));\n  }\n\n  getAttributeManager() {\n    return this.internalState && this.internalState.attributeManager;\n  }\n\n  getCurrentLayer() {\n    return this.internalState && this.internalState.layer;\n  }\n\n  getLoadOptions() {\n    return this.props.loadOptions;\n  }\n\n  project(xyz) {\n    const {\n      viewport\n    } = this.context;\n    const worldPosition = getWorldPosition(xyz, {\n      viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem\n    });\n    const [x, y, z] = worldToPixels(worldPosition, viewport.pixelProjectionMatrix);\n    return xyz.length === 2 ? [x, y] : [x, y, z];\n  }\n\n  unproject(xy) {\n    const {\n      viewport\n    } = this.context;\n    return viewport.unproject(xy);\n  }\n\n  projectPosition(xyz, params) {\n    return projectPosition(xyz, {\n      viewport: this.context.viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem,\n      ...params\n    });\n  }\n\n  use64bitPositions() {\n    const {\n      coordinateSystem\n    } = this.props;\n    return coordinateSystem === COORDINATE_SYSTEM.DEFAULT || coordinateSystem === COORDINATE_SYSTEM.LNGLAT || coordinateSystem === COORDINATE_SYSTEM.CARTESIAN;\n  }\n\n  onHover(info, pickingEvent) {\n    if (this.props.onHover) {\n      return this.props.onHover(info, pickingEvent);\n    }\n\n    return false;\n  }\n\n  onClick(info, pickingEvent) {\n    if (this.props.onClick) {\n      return this.props.onClick(info, pickingEvent);\n    }\n\n    return false;\n  }\n\n  nullPickingColor() {\n    return [0, 0, 0];\n  }\n\n  encodePickingColor(i) {\n    let target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    target[0] = i + 1 & 255;\n    target[1] = i + 1 >> 8 & 255;\n    target[2] = i + 1 >> 8 >> 8 & 255;\n    return target;\n  }\n\n  decodePickingColor(color) {\n    assert(color instanceof Uint8Array);\n    const [i1, i2, i3] = color;\n    const index = i1 + i2 * 256 + i3 * 65536 - 1;\n    return index;\n  }\n\n  initializeState() {\n    throw new Error(\"Layer \".concat(this, \" has not defined initializeState\"));\n  }\n\n  getShaders(shaders) {\n    for (const extension of this.props.extensions) {\n      shaders = mergeShaders(shaders, extension.getShaders.call(this, extension));\n    }\n\n    return shaders;\n  }\n\n  getBounds() {\n    var _ref;\n\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) return null;\n    const {\n      positions,\n      instancePositions\n    } = attributeManager.attributes;\n    return (_ref = positions || instancePositions) === null || _ref === void 0 ? void 0 : _ref.getBounds();\n  }\n\n  shouldUpdateState(_ref5) {\n    let {\n      oldProps,\n      props,\n      context,\n      changeFlags\n    } = _ref5;\n    return changeFlags.propsOrDataChanged;\n  }\n\n  updateState(_ref6) {\n    let {\n      oldProps,\n      props,\n      context,\n      changeFlags\n    } = _ref6;\n    const attributeManager = this.getAttributeManager();\n\n    if (changeFlags.dataChanged && attributeManager) {\n      const {\n        dataChanged\n      } = changeFlags;\n\n      if (Array.isArray(dataChanged)) {\n        for (const dataRange of dataChanged) {\n          attributeManager.invalidateAll(dataRange);\n        }\n      } else {\n        attributeManager.invalidateAll();\n      }\n    }\n\n    const neededPickingBuffer = Number.isInteger(oldProps.highlightedObjectIndex) || oldProps.pickable;\n    const needPickingBuffer = Number.isInteger(props.highlightedObjectIndex) || props.pickable;\n\n    if (neededPickingBuffer !== needPickingBuffer && attributeManager) {\n      const {\n        pickingColors,\n        instancePickingColors\n      } = attributeManager.attributes;\n      const pickingColorsAttribute = pickingColors || instancePickingColors;\n\n      if (pickingColorsAttribute) {\n        if (needPickingBuffer && pickingColorsAttribute.constant) {\n          pickingColorsAttribute.constant = false;\n          attributeManager.invalidate(pickingColorsAttribute.id);\n        }\n\n        if (!pickingColorsAttribute.value && !needPickingBuffer) {\n          pickingColorsAttribute.constant = true;\n          pickingColorsAttribute.value = [0, 0, 0];\n        }\n      }\n    }\n  }\n\n  finalizeState() {\n    for (const model of this.getModels()) {\n      model.delete();\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (attributeManager) {\n      attributeManager.finalize();\n    }\n\n    this.context.resourceManager.unsubscribe({\n      consumerId: this.id\n    });\n    this.internalState.uniformTransitions.clear();\n    this.internalState.finalize();\n  }\n\n  draw(opts) {\n    for (const model of this.getModels()) {\n      model.draw(opts);\n    }\n  }\n\n  getPickingInfo(_ref7) {\n    let {\n      info,\n      mode\n    } = _ref7;\n    const {\n      index\n    } = info;\n\n    if (index >= 0) {\n      if (Array.isArray(this.props.data)) {\n        info.object = this.props.data[index];\n      }\n    }\n\n    return info;\n  }\n\n  activateViewport(viewport) {\n    const oldViewport = this.internalState.viewport;\n    this.internalState.viewport = viewport;\n\n    if (!oldViewport || !areViewportsEqual({\n      oldViewport,\n      viewport\n    })) {\n      this.setChangeFlags({\n        viewportChanged: true\n      });\n\n      if (this.isComposite) {\n        if (this.needsUpdate()) {\n          this.setNeedsUpdate();\n        }\n      } else {\n        this._update();\n      }\n    }\n  }\n\n  invalidateAttribute() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'all';\n    let diffReason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    const attributeManager = this.getAttributeManager();\n\n    if (!attributeManager) {\n      return;\n    }\n\n    if (name === 'all') {\n      attributeManager.invalidateAll();\n    } else {\n      attributeManager.invalidate(name);\n    }\n  }\n\n  updateAttributes(changedAttributes) {\n    for (const model of this.getModels()) {\n      this._setModelAttributes(model, changedAttributes);\n    }\n  }\n\n  _updateAttributes(props) {\n    const attributeManager = this.getAttributeManager();\n\n    if (!attributeManager) {\n      return;\n    }\n\n    const numInstances = this.getNumInstances(props);\n    const startIndices = this.getStartIndices(props);\n    attributeManager.update({\n      data: props.data,\n      numInstances,\n      startIndices,\n      props,\n      transitions: props.transitions,\n      buffers: props.data.attributes,\n      context: this,\n      ignoreUnknownAttributes: true\n    });\n    const changedAttributes = attributeManager.getChangedAttributes({\n      clearChangedFlags: true\n    });\n    this.updateAttributes(changedAttributes);\n  }\n\n  _updateAttributeTransition() {\n    const attributeManager = this.getAttributeManager();\n\n    if (attributeManager) {\n      attributeManager.updateTransition();\n    }\n  }\n\n  _updateUniformTransition() {\n    const {\n      uniformTransitions\n    } = this.internalState;\n\n    if (uniformTransitions.active) {\n      const propsInTransition = uniformTransitions.update();\n      const props = Object.create(this.props);\n\n      for (const key in propsInTransition) {\n        Object.defineProperty(props, key, {\n          value: propsInTransition[key]\n        });\n      }\n\n      return props;\n    }\n\n    return this.props;\n  }\n\n  calculateInstancePickingColors(attribute, _ref8) {\n    let {\n      numInstances\n    } = _ref8;\n\n    if (attribute.constant) {\n      return;\n    }\n\n    const cacheSize = Math.floor(pickingColorCache.length / 3);\n    this.internalState.usesPickingColorCache = true;\n\n    if (cacheSize < numInstances) {\n      if (numInstances > MAX_PICKING_COLOR_CACHE_SIZE) {\n        log.warn('Layer has too many data objects. Picking might not be able to distinguish all objects.')();\n      }\n\n      pickingColorCache = typedArrayManager.allocate(pickingColorCache, numInstances, {\n        size: 3,\n        copy: true,\n        maxCount: Math.max(numInstances, MAX_PICKING_COLOR_CACHE_SIZE)\n      });\n      const newCacheSize = Math.floor(pickingColorCache.length / 3);\n      const pickingColor = [];\n\n      for (let i = cacheSize; i < newCacheSize; i++) {\n        this.encodePickingColor(i, pickingColor);\n        pickingColorCache[i * 3 + 0] = pickingColor[0];\n        pickingColorCache[i * 3 + 1] = pickingColor[1];\n        pickingColorCache[i * 3 + 2] = pickingColor[2];\n      }\n    }\n\n    attribute.value = pickingColorCache.subarray(0, numInstances * 3);\n  }\n\n  _setModelAttributes(model, changedAttributes) {\n    const attributeManager = this.getAttributeManager();\n    const excludeAttributes = model.userData.excludeAttributes || {};\n    const shaderAttributes = attributeManager.getShaderAttributes(changedAttributes, excludeAttributes);\n    model.setAttributes(shaderAttributes);\n  }\n\n  disablePickingIndex(objectIndex) {\n    this._disablePickingIndex(objectIndex);\n  }\n\n  _disablePickingIndex(objectIndex) {\n    const {\n      pickingColors,\n      instancePickingColors\n    } = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n    const start = colors.getVertexOffset(objectIndex);\n    const end = colors.getVertexOffset(objectIndex + 1);\n    colors.buffer.subData({\n      data: new Uint8Array(end - start),\n      offset: start\n    });\n  }\n\n  restorePickingColors() {\n    const {\n      pickingColors,\n      instancePickingColors\n    } = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n\n    if (this.internalState.usesPickingColorCache && colors.value.buffer !== pickingColorCache.buffer) {\n      colors.value = pickingColorCache.subarray(0, colors.value.length);\n    }\n\n    colors.updateSubBuffer({\n      startOffset: 0\n    });\n  }\n\n  getNumInstances(props) {\n    props = props || this.props;\n\n    if (props.numInstances !== undefined) {\n      return props.numInstances;\n    }\n\n    if (this.state && this.state.numInstances !== undefined) {\n      return this.state.numInstances;\n    }\n\n    return count(props.data);\n  }\n\n  getStartIndices(props) {\n    props = props || this.props;\n\n    if (props.startIndices !== undefined) {\n      return props.startIndices;\n    }\n\n    if (this.state && this.state.startIndices) {\n      return this.state.startIndices;\n    }\n\n    return null;\n  }\n\n  _initialize() {\n    debug(TRACE_INITIALIZE, this);\n\n    this._initState();\n\n    this.initializeState(this.context);\n\n    for (const extension of this.props.extensions) {\n      extension.initializeState.call(this, this.context, extension);\n    }\n\n    this.setChangeFlags({\n      dataChanged: true,\n      propsChanged: true,\n      viewportChanged: true,\n      extensionsChanged: true\n    });\n\n    this._updateState();\n  }\n\n  _update() {\n    const stateNeedsUpdate = this.needsUpdate();\n    debug(TRACE_UPDATE, this, stateNeedsUpdate);\n\n    if (stateNeedsUpdate) {\n      this._updateState();\n    }\n  }\n\n  _updateState() {\n    const currentProps = this.props;\n    const currentViewport = this.context.viewport;\n\n    const propsInTransition = this._updateUniformTransition();\n\n    this.internalState.propsInTransition = propsInTransition;\n    this.context.viewport = this.internalState.viewport || currentViewport;\n    this.props = propsInTransition;\n\n    try {\n      const updateParams = this._getUpdateParams();\n\n      const oldModels = this.getModels();\n\n      if (this.context.gl) {\n        this.updateState(updateParams);\n      } else {\n        try {\n          this.updateState(updateParams);\n        } catch (error) {}\n      }\n\n      for (const extension of this.props.extensions) {\n        extension.updateState.call(this, updateParams, extension);\n      }\n\n      const modelChanged = this.getModels()[0] !== oldModels[0];\n\n      this._updateModules(updateParams, modelChanged);\n\n      if (this.isComposite) {\n        this._renderLayers(updateParams);\n      } else {\n        this.setNeedsRedraw();\n\n        this._updateAttributes(this.props);\n\n        if (this.state.model) {\n          this.state.model.setInstanceCount(this.getNumInstances());\n        }\n      }\n    } finally {\n      this.context.viewport = currentViewport;\n      this.props = currentProps;\n      this.clearChangeFlags();\n      this.internalState.needsUpdate = false;\n      this.internalState.resetOldProps();\n    }\n  }\n\n  _finalize() {\n    debug(TRACE_FINALIZE, this);\n    this.finalizeState(this.context);\n\n    for (const extension of this.props.extensions) {\n      extension.finalizeState.call(this, extension);\n    }\n  }\n\n  drawLayer(_ref9) {\n    let {\n      moduleParameters = null,\n      uniforms = {},\n      parameters = {}\n    } = _ref9;\n\n    this._updateAttributeTransition();\n\n    const currentProps = this.props;\n    this.props = this.internalState.propsInTransition || currentProps;\n    const {\n      opacity\n    } = this.props;\n    uniforms.opacity = Math.pow(opacity, 1 / 2.2);\n\n    try {\n      if (moduleParameters) {\n        this.setModuleParameters(moduleParameters);\n      }\n\n      const {\n        getPolygonOffset\n      } = this.props;\n      const offsets = getPolygonOffset && getPolygonOffset(uniforms) || [0, 0];\n      setParameters(this.context.gl, {\n        polygonOffset: offsets\n      });\n      withParameters(this.context.gl, parameters, () => {\n        const opts = {\n          moduleParameters,\n          uniforms,\n          parameters,\n          context: this.context\n        };\n\n        for (const extension of this.props.extensions) {\n          extension.draw.call(this, opts, extension);\n        }\n\n        this.draw(opts);\n      });\n    } finally {\n      this.props = currentProps;\n    }\n  }\n\n  getChangeFlags() {\n    return this.internalState.changeFlags;\n  }\n\n  setChangeFlags(flags) {\n    const {\n      changeFlags\n    } = this.internalState;\n\n    for (const key in flags) {\n      if (flags[key]) {\n        let flagChanged = false;\n\n        switch (key) {\n          case 'dataChanged':\n            if (Array.isArray(changeFlags[key])) {\n              changeFlags[key] = Array.isArray(flags[key]) ? changeFlags[key].concat(flags[key]) : flags[key];\n              flagChanged = true;\n            }\n\n          default:\n            if (!changeFlags[key]) {\n              changeFlags[key] = flags[key];\n              flagChanged = true;\n            }\n\n        }\n\n        if (flagChanged) {\n          debug(TRACE_CHANGE_FLAG, this, key, flags);\n        }\n      }\n    }\n\n    const propsOrDataChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged || changeFlags.propsChanged || changeFlags.extensionsChanged;\n    changeFlags.propsOrDataChanged = propsOrDataChanged;\n    changeFlags.somethingChanged = propsOrDataChanged || flags.viewportChanged || flags.stateChanged;\n  }\n\n  clearChangeFlags() {\n    this.internalState.changeFlags = {\n      dataChanged: false,\n      propsChanged: false,\n      updateTriggersChanged: false,\n      viewportChanged: false,\n      stateChanged: false,\n      extensionsChanged: false,\n      propsOrDataChanged: false,\n      somethingChanged: false\n    };\n  }\n\n  diffProps(newProps, oldProps) {\n    const changeFlags = diffProps(newProps, oldProps);\n\n    if (changeFlags.updateTriggersChanged) {\n      for (const key in changeFlags.updateTriggersChanged) {\n        if (changeFlags.updateTriggersChanged[key]) {\n          this.invalidateAttribute(key);\n        }\n      }\n    }\n\n    if (changeFlags.transitionsChanged) {\n      for (const key in changeFlags.transitionsChanged) {\n        this.internalState.uniformTransitions.add(key, oldProps[key], newProps[key], newProps.transitions[key]);\n      }\n    }\n\n    return this.setChangeFlags(changeFlags);\n  }\n\n  validateProps() {\n    validateProps(this.props);\n  }\n\n  setModuleParameters(moduleParameters) {\n    for (const model of this.getModels()) {\n      model.updateModuleSettings(moduleParameters);\n    }\n  }\n\n  updateAutoHighlight(info) {\n    if (this.props.autoHighlight && !Number.isInteger(this.props.highlightedObjectIndex)) {\n      this._updateAutoHighlight(info);\n    }\n  }\n\n  _updateAutoHighlight(info) {\n    const pickingModuleParameters = {\n      pickingSelectedColor: info.picked ? info.color : null\n    };\n    const {\n      highlightColor\n    } = this.props;\n\n    if (info.picked && typeof highlightColor === 'function') {\n      pickingModuleParameters.pickingHighlightColor = highlightColor(info);\n    }\n\n    this.setModuleParameters(pickingModuleParameters);\n    this.setNeedsRedraw();\n  }\n\n  _updateModules(_ref10, forceUpdate) {\n    let {\n      props,\n      oldProps\n    } = _ref10;\n    const {\n      autoHighlight,\n      highlightedObjectIndex,\n      highlightColor\n    } = props;\n\n    if (forceUpdate || oldProps.autoHighlight !== autoHighlight || oldProps.highlightedObjectIndex !== highlightedObjectIndex || oldProps.highlightColor !== highlightColor) {\n      const parameters = {};\n\n      if (!autoHighlight) {\n        parameters.pickingSelectedColor = null;\n      }\n\n      if (Array.isArray(highlightColor)) {\n        parameters.pickingHighlightColor = highlightColor;\n      }\n\n      if (Number.isInteger(highlightedObjectIndex)) {\n        parameters.pickingSelectedColor = highlightedObjectIndex >= 0 ? this.encodePickingColor(highlightedObjectIndex) : null;\n      }\n\n      this.setModuleParameters(parameters);\n    }\n  }\n\n  _getUpdateParams() {\n    return {\n      props: this.props,\n      oldProps: this.internalState.getOldProps(),\n      context: this.context,\n      changeFlags: this.internalState.changeFlags\n    };\n  }\n\n  _getNeedsRedraw(opts) {\n    if (!this.internalState) {\n      return false;\n    }\n\n    let redraw = false;\n    redraw = redraw || this.internalState.needsRedraw && this.id;\n    this.internalState.needsRedraw = this.internalState.needsRedraw && !opts.clearRedrawFlags;\n    const attributeManager = this.getAttributeManager();\n    const attributeManagerNeedsRedraw = attributeManager && attributeManager.getNeedsRedraw(opts);\n    redraw = redraw || attributeManagerNeedsRedraw;\n    return redraw;\n  }\n\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats,\n      timeline: this.context.timeline\n    });\n  }\n\n  _initState() {\n    assert(!this.internalState && !this.state);\n    assert(isFinite(this.props.coordinateSystem));\n\n    const attributeManager = this._getAttributeManager();\n\n    if (attributeManager) {\n      attributeManager.addInstanced({\n        instancePickingColors: {\n          type: 5121,\n          size: 3,\n          noAlloc: true,\n          update: this.calculateInstancePickingColors\n        }\n      });\n    }\n\n    this.internalState = new LayerState({\n      attributeManager,\n      layer: this\n    });\n    this.clearChangeFlags();\n    this.state = {};\n    Object.defineProperty(this.state, 'attributeManager', {\n      get: () => {\n        log.deprecated('layer.state.attributeManager', 'layer.getAttributeManager()');\n        return attributeManager;\n      }\n    });\n    this.internalState.layer = this;\n    this.internalState.uniformTransitions = new UniformTransitionManager(this.context.timeline);\n    this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);\n    this.internalState.setAsyncProps(this.props);\n  }\n\n  _transferState(oldLayer) {\n    debug(TRACE_MATCHED, this, this === oldLayer);\n    const {\n      state,\n      internalState\n    } = oldLayer;\n\n    if (this === oldLayer) {\n      return;\n    }\n\n    this.internalState = internalState;\n    this.internalState.layer = this;\n    this.state = state;\n    this.internalState.setAsyncProps(this.props);\n    this.diffProps(this.props, this.internalState.getOldProps());\n  }\n\n  _onAsyncPropUpdated() {\n    this.diffProps(this.props, this.internalState.getOldProps());\n    this.setNeedsUpdate();\n  }\n\n}\nLayer.layerName = 'Layer';\nLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["COORDINATE_SYSTEM","OPERATION","AttributeManager","UniformTransitionManager","diffProps","validateProps","count","log","debug","withParameters","setParameters","assert","memoize","mergeShaders","projectPosition","getWorldPosition","typedArrayManager","Component","LayerState","worldToPixels","load","TRACE_CHANGE_FLAG","TRACE_INITIALIZE","TRACE_UPDATE","TRACE_FINALIZE","TRACE_MATCHED","MAX_PICKING_COLOR_CACHE_SIZE","EMPTY_ARRAY","Object","freeze","areViewportsEqual","oldViewport","viewport","equals","pickingColorCache","Uint8ClampedArray","defaultProps","data","type","value","async","dataComparator","compare","optional","_dataDiff","__diff","dataTransform","onDataLoad","onError","fetch","url","propName","layer","loaders","loadOptions","signal","resourceManager","context","getLoadOptions","props","_loadOptions","inResourceManager","contains","add","resourceId","persistent","subscribe","onChange","internalState","reloadAsyncProp","consumerId","id","requestId","updateTriggers","visible","pickable","opacity","min","max","operation","DRAW","onHover","onClick","onDragStart","onDrag","onDragEnd","coordinateSystem","DEFAULT","coordinateOrigin","modelMatrix","wrapLongitude","positionFormat","colorFormat","parameters","transitions","extensions","getPolygonOffset","layerIndex","highlightedObjectIndex","autoHighlight","highlightColor","Layer","toString","className","constructor","layerName","name","raiseError","error","message","_this$props$onError","setState","updateObject","setChangeFlags","stateChanged","assign","state","setNeedsRedraw","redraw","needsRedraw","setNeedsUpdate","layerManager","String","needsUpdate","getNeedsRedraw","opts","clearRedrawFlags","_getNeedsRedraw","hasUniformTransition","shouldUpdateState","_getUpdateParams","uniformTransitions","active","isLoaded","isAsyncPropLoading","isPickable","getModels","models","model","getAttributeManager","attributeManager","getCurrentLayer","project","xyz","worldPosition","x","y","z","pixelProjectionMatrix","length","unproject","xy","params","use64bitPositions","LNGLAT","CARTESIAN","info","pickingEvent","nullPickingColor","encodePickingColor","i","target","decodePickingColor","color","Uint8Array","i1","i2","i3","index","initializeState","Error","getShaders","shaders","extension","call","getBounds","positions","instancePositions","attributes","_ref","oldProps","changeFlags","propsOrDataChanged","updateState","dataChanged","Array","isArray","dataRange","invalidateAll","neededPickingBuffer","Number","isInteger","needPickingBuffer","pickingColors","instancePickingColors","pickingColorsAttribute","constant","invalidate","finalizeState","delete","finalize","unsubscribe","clear","draw","getPickingInfo","mode","object","activateViewport","viewportChanged","isComposite","_update","invalidateAttribute","diffReason","updateAttributes","changedAttributes","_setModelAttributes","_updateAttributes","numInstances","getNumInstances","startIndices","getStartIndices","update","buffers","ignoreUnknownAttributes","getChangedAttributes","clearChangedFlags","_updateAttributeTransition","updateTransition","_updateUniformTransition","propsInTransition","create","key","defineProperty","calculateInstancePickingColors","attribute","cacheSize","Math","floor","usesPickingColorCache","warn","allocate","size","copy","maxCount","newCacheSize","pickingColor","subarray","excludeAttributes","userData","shaderAttributes","getShaderAttributes","setAttributes","disablePickingIndex","objectIndex","_disablePickingIndex","colors","start","getVertexOffset","end","buffer","subData","offset","restorePickingColors","updateSubBuffer","startOffset","undefined","_initialize","_initState","propsChanged","extensionsChanged","_updateState","stateNeedsUpdate","currentProps","currentViewport","updateParams","oldModels","gl","modelChanged","_updateModules","_renderLayers","setInstanceCount","clearChangeFlags","resetOldProps","_finalize","drawLayer","moduleParameters","uniforms","pow","setModuleParameters","offsets","polygonOffset","getChangeFlags","flags","flagChanged","concat","updateTriggersChanged","somethingChanged","newProps","transitionsChanged","updateModuleSettings","updateAutoHighlight","_updateAutoHighlight","pickingModuleParameters","pickingSelectedColor","picked","pickingHighlightColor","forceUpdate","getOldProps","attributeManagerNeedsRedraw","_getAttributeManager","stats","timeline","isFinite","addInstanced","noAlloc","get","deprecated","onAsyncPropUpdated","_onAsyncPropUpdated","bind","setAsyncProps","_transferState","oldLayer"],"sources":["../../../src/lib/layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable react/no-direct-mutation-state */\nimport {COORDINATE_SYSTEM, OPERATION} from './constants';\nimport AttributeManager from './attribute/attribute-manager';\nimport UniformTransitionManager from './uniform-transition-manager';\nimport {diffProps, validateProps} from '../lifecycle/props';\nimport {count} from '../utils/count';\nimport log from '../utils/log';\nimport debug from '../debug';\nimport GL from '@luma.gl/constants';\nimport {withParameters, setParameters} from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport memoize from '../utils/memoize';\nimport {mergeShaders} from '../utils/shader';\nimport {projectPosition, getWorldPosition} from '../shaderlib/project/project-functions';\nimport typedArrayManager from '../utils/typed-array-manager';\n\nimport Component from '../lifecycle/component';\nimport LayerState from './layer-state';\n\nimport {worldToPixels} from '@math.gl/web-mercator';\n\nimport {load} from '@loaders.gl/core';\n\nconst TRACE_CHANGE_FLAG = 'layer.changeFlag';\nconst TRACE_INITIALIZE = 'layer.initialize';\nconst TRACE_UPDATE = 'layer.update';\nconst TRACE_FINALIZE = 'layer.finalize';\nconst TRACE_MATCHED = 'layer.matched';\n\nconst MAX_PICKING_COLOR_CACHE_SIZE = 2 ** 24 - 1;\n\nconst EMPTY_ARRAY = Object.freeze([]);\n\n// Only compare the same two viewports once\nconst areViewportsEqual = memoize(({oldViewport, viewport}) => {\n  return oldViewport.equals(viewport);\n});\n\nlet pickingColorCache = new Uint8ClampedArray(0);\n\nconst defaultProps = {\n  // data: Special handling for null, see below\n  data: {type: 'data', value: EMPTY_ARRAY, async: true},\n  dataComparator: {type: 'function', value: null, compare: false, optional: true},\n  _dataDiff: {type: 'function', value: data => data && data.__diff, compare: false, optional: true},\n  dataTransform: {type: 'function', value: null, compare: false, optional: true},\n  onDataLoad: {type: 'function', value: null, compare: false, optional: true},\n  onError: {type: 'function', value: null, compare: false, optional: true},\n  fetch: {\n    type: 'function',\n    value: (url, {propName, layer, loaders, loadOptions, signal}) => {\n      const {resourceManager} = layer.context;\n      loadOptions = loadOptions || layer.getLoadOptions();\n      loaders = loaders || layer.props.loaders;\n      if (signal) {\n        loadOptions = {\n          ...loadOptions,\n          fetch: {\n            ...loadOptions?.fetch,\n            signal\n          }\n        };\n      }\n\n      let inResourceManager = resourceManager.contains(url);\n\n      if (!inResourceManager && !loadOptions) {\n        // If there is no layer-specific load options, then attempt to cache this resource in the data manager\n        resourceManager.add({resourceId: url, data: load(url, loaders), persistent: false});\n        inResourceManager = true;\n      }\n      if (inResourceManager) {\n        return resourceManager.subscribe({\n          resourceId: url,\n          onChange: data => layer.internalState.reloadAsyncProp(propName, data),\n          consumerId: layer.id,\n          requestId: propName\n        });\n      }\n\n      return load(url, loaders, loadOptions);\n    },\n    compare: false\n  },\n  updateTriggers: {}, // Update triggers: a core change detection mechanism in deck.gl\n\n  visible: true,\n  pickable: false,\n  opacity: {type: 'number', min: 0, max: 1, value: 1},\n  operation: OPERATION.DRAW,\n\n  onHover: {type: 'function', value: null, compare: false, optional: true},\n  onClick: {type: 'function', value: null, compare: false, optional: true},\n  onDragStart: {type: 'function', value: null, compare: false, optional: true},\n  onDrag: {type: 'function', value: null, compare: false, optional: true},\n  onDragEnd: {type: 'function', value: null, compare: false, optional: true},\n\n  coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n  coordinateOrigin: {type: 'array', value: [0, 0, 0], compare: true},\n  modelMatrix: {type: 'array', value: null, compare: true, optional: true},\n  wrapLongitude: false,\n  positionFormat: 'XYZ',\n  colorFormat: 'RGBA',\n\n  parameters: {type: 'object', value: {}, optional: true, compare: true},\n  transitions: null,\n  extensions: [],\n  loaders: {type: 'array', value: [], optional: true, compare: true},\n\n  // Offset depth based on layer index to avoid z-fighting.\n  // Negative values pull layer towards the camera\n  // https://www.opengl.org/archives/resources/faq/technical/polygonoffset.htm\n  getPolygonOffset: {\n    type: 'function',\n    value: ({layerIndex}) => [0, -layerIndex * 100],\n    compare: false\n  },\n\n  // Selection/Highlighting\n  highlightedObjectIndex: null,\n  autoHighlight: false,\n  highlightColor: {type: 'accessor', value: [0, 0, 128, 128]}\n};\n\nexport default class Layer extends Component {\n  toString() {\n    const className = this.constructor.layerName || this.constructor.name;\n    return `${className}({id: '${this.props.id}'})`;\n  }\n\n  raiseError(error, message) {\n    if (message) {\n      error.message = `${message}: ${error.message}`;\n    }\n    if (!this.props.onError?.(error)) {\n      this.context?.onError?.(error, this);\n    }\n  }\n\n  // Public API\n\n  // Updates selected state members and marks the object for redraw\n  setState(updateObject) {\n    this.setChangeFlags({stateChanged: true});\n    Object.assign(this.state, updateObject);\n    this.setNeedsRedraw();\n  }\n\n  // Sets the redraw flag for this layer, will trigger a redraw next animation frame\n  setNeedsRedraw(redraw = true) {\n    if (this.internalState) {\n      this.internalState.needsRedraw = redraw;\n    }\n  }\n\n  // This layer needs a deep update\n  setNeedsUpdate() {\n    this.context.layerManager.setNeedsUpdate(String(this));\n    this.internalState.needsUpdate = true;\n  }\n\n  // Checks state of attributes and model\n  getNeedsRedraw(opts = {clearRedrawFlags: false}) {\n    return this._getNeedsRedraw(opts);\n  }\n\n  // Checks if layer attributes needs updating\n  needsUpdate() {\n    // Call subclass lifecycle method\n    return (\n      this.internalState.needsUpdate ||\n      this.hasUniformTransition() ||\n      this.shouldUpdateState(this._getUpdateParams())\n    );\n    // End lifecycle method\n  }\n\n  hasUniformTransition() {\n    return this.internalState.uniformTransitions.active;\n  }\n\n  get isLoaded() {\n    return this.internalState && !this.internalState.isAsyncPropLoading();\n  }\n\n  get wrapLongitude() {\n    return this.props.wrapLongitude;\n  }\n\n  // Returns true if the layer is pickable and visible.\n  isPickable() {\n    return this.props.pickable && this.props.visible;\n  }\n\n  // Return an array of models used by this layer, can be overriden by layer subclass\n  getModels() {\n    return this.state && (this.state.models || (this.state.model ? [this.state.model] : []));\n  }\n\n  getAttributeManager() {\n    return this.internalState && this.internalState.attributeManager;\n  }\n\n  // Returns the most recent layer that matched to this state\n  // (When reacting to an async event, this layer may no longer be the latest)\n  getCurrentLayer() {\n    return this.internalState && this.internalState.layer;\n  }\n\n  // Returns the default parse options for async props\n  getLoadOptions() {\n    return this.props.loadOptions;\n  }\n\n  // PROJECTION METHODS\n\n  // Projects a point with current map state (lat, lon, zoom, pitch, bearing)\n  // From the current layer's coordinate system to screen\n  project(xyz) {\n    const {viewport} = this.context;\n    const worldPosition = getWorldPosition(xyz, {\n      viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem\n    });\n    const [x, y, z] = worldToPixels(worldPosition, viewport.pixelProjectionMatrix);\n    return xyz.length === 2 ? [x, y] : [x, y, z];\n  }\n\n  // Note: this does not reverse `project`.\n  // Always unprojects to the viewport's coordinate system\n  unproject(xy) {\n    const {viewport} = this.context;\n    return viewport.unproject(xy);\n  }\n\n  projectPosition(xyz, params) {\n    return projectPosition(xyz, {\n      viewport: this.context.viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem,\n      ...params\n    });\n  }\n\n  use64bitPositions() {\n    const {coordinateSystem} = this.props;\n    return (\n      coordinateSystem === COORDINATE_SYSTEM.DEFAULT ||\n      coordinateSystem === COORDINATE_SYSTEM.LNGLAT ||\n      coordinateSystem === COORDINATE_SYSTEM.CARTESIAN\n    );\n  }\n\n  // Event handling\n  onHover(info, pickingEvent) {\n    if (this.props.onHover) {\n      return this.props.onHover(info, pickingEvent);\n    }\n    return false;\n  }\n\n  onClick(info, pickingEvent) {\n    if (this.props.onClick) {\n      return this.props.onClick(info, pickingEvent);\n    }\n    return false;\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  // @return {Array} - a black color\n  nullPickingColor() {\n    return [0, 0, 0];\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  encodePickingColor(i, target = []) {\n    target[0] = (i + 1) & 255;\n    target[1] = ((i + 1) >> 8) & 255;\n    target[2] = (((i + 1) >> 8) >> 8) & 255;\n    return target;\n  }\n\n  // Returns the index corresponding to a picking color that doesn't match any subfeature\n  // @param {Uint8Array} color - color array to be decoded\n  // @return {Array} - the decoded picking color\n  decodePickingColor(color) {\n    assert(color instanceof Uint8Array);\n    const [i1, i2, i3] = color;\n    // 1 was added to seperate from no selection\n    const index = i1 + i2 * 256 + i3 * 65536 - 1;\n    return index;\n  }\n\n  // //////////////////////////////////////////////////\n  // LIFECYCLE METHODS, overridden by the layer subclasses\n\n  // Called once to set up the initial state\n  // App can create WebGL resources\n  initializeState() {\n    throw new Error(`Layer ${this} has not defined initializeState`);\n  }\n\n  getShaders(shaders) {\n    for (const extension of this.props.extensions) {\n      shaders = mergeShaders(shaders, extension.getShaders.call(this, extension));\n    }\n    return shaders;\n  }\n\n  // Default implementation\n  // Sublayers chould override this method to provide an accurate calculation of the bounds\n  getBounds() {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) return null;\n    const {positions, instancePositions} = attributeManager.attributes;\n    return (positions || instancePositions)?.getBounds();\n  }\n\n  // Let's layer control if updateState should be called\n  shouldUpdateState({oldProps, props, context, changeFlags}) {\n    return changeFlags.propsOrDataChanged;\n  }\n\n  // Default implementation, all attributes will be invalidated and updated\n  // when data changes\n  /* eslint-disable-next-line complexity */\n  updateState({oldProps, props, context, changeFlags}) {\n    const attributeManager = this.getAttributeManager();\n    if (changeFlags.dataChanged && attributeManager) {\n      const {dataChanged} = changeFlags;\n      if (Array.isArray(dataChanged)) {\n        // is partial update\n        for (const dataRange of dataChanged) {\n          attributeManager.invalidateAll(dataRange);\n        }\n      } else {\n        attributeManager.invalidateAll();\n      }\n    }\n\n    const neededPickingBuffer =\n      Number.isInteger(oldProps.highlightedObjectIndex) || oldProps.pickable;\n    const needPickingBuffer = Number.isInteger(props.highlightedObjectIndex) || props.pickable;\n    if (neededPickingBuffer !== needPickingBuffer && attributeManager) {\n      const {pickingColors, instancePickingColors} = attributeManager.attributes;\n      const pickingColorsAttribute = pickingColors || instancePickingColors;\n      if (pickingColorsAttribute) {\n        if (needPickingBuffer && pickingColorsAttribute.constant) {\n          pickingColorsAttribute.constant = false;\n          attributeManager.invalidate(pickingColorsAttribute.id);\n        }\n        if (!pickingColorsAttribute.value && !needPickingBuffer) {\n          pickingColorsAttribute.constant = true;\n          pickingColorsAttribute.value = [0, 0, 0];\n        }\n      }\n    }\n  }\n\n  // Called once when layer is no longer matched and state will be discarded\n  // App can destroy WebGL resources here\n  finalizeState() {\n    for (const model of this.getModels()) {\n      model.delete();\n    }\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.finalize();\n    }\n    this.context.resourceManager.unsubscribe({consumerId: this.id});\n    this.internalState.uniformTransitions.clear();\n    this.internalState.finalize();\n  }\n\n  // If state has a model, draw it with supplied uniforms\n  draw(opts) {\n    for (const model of this.getModels()) {\n      model.draw(opts);\n    }\n  }\n\n  // called to populate the info object that is passed to the event handler\n  // @return null to cancel event\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n\n    if (index >= 0) {\n      // If props.data is an indexable array, get the object\n      if (Array.isArray(this.props.data)) {\n        info.object = this.props.data[index];\n      }\n    }\n\n    return info;\n  }\n\n  // END LIFECYCLE METHODS\n  // //////////////////////////////////////////////////\n\n  // INTERNAL METHODS\n  activateViewport(viewport) {\n    const oldViewport = this.internalState.viewport;\n    this.internalState.viewport = viewport;\n\n    if (!oldViewport || !areViewportsEqual({oldViewport, viewport})) {\n      this.setChangeFlags({viewportChanged: true});\n\n      if (this.isComposite) {\n        if (this.needsUpdate()) {\n          // Composite layers may add/remove sublayers on viewport change\n          // Because we cannot change the layers list during a draw cycle, we don't want to update sublayers right away\n          // This will not call update immediately, but mark the layerManager as needs update on the next frame\n          this.setNeedsUpdate();\n        }\n      } else {\n        this._update();\n      }\n    }\n  }\n\n  // Default implementation of attribute invalidation, can be redefined\n  invalidateAttribute(name = 'all', diffReason = '') {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    if (name === 'all') {\n      attributeManager.invalidateAll();\n    } else {\n      attributeManager.invalidate(name);\n    }\n  }\n\n  updateAttributes(changedAttributes) {\n    for (const model of this.getModels()) {\n      this._setModelAttributes(model, changedAttributes);\n    }\n  }\n\n  // Calls attribute manager to update any WebGL attributes\n  _updateAttributes(props) {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    // Figure out data length\n    const numInstances = this.getNumInstances(props);\n    const startIndices = this.getStartIndices(props);\n\n    attributeManager.update({\n      data: props.data,\n      numInstances,\n      startIndices,\n      props,\n      transitions: props.transitions,\n      buffers: props.data.attributes,\n      context: this,\n      // Don't worry about non-attribute props\n      ignoreUnknownAttributes: true\n    });\n\n    const changedAttributes = attributeManager.getChangedAttributes({clearChangedFlags: true});\n    this.updateAttributes(changedAttributes);\n  }\n\n  // Update attribute transitions. This is called in drawLayer, no model updates required.\n  _updateAttributeTransition() {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.updateTransition();\n    }\n  }\n\n  // Update uniform (prop) transitions. This is called in updateState, may result in model updates.\n  _updateUniformTransition() {\n    const {uniformTransitions} = this.internalState;\n    if (uniformTransitions.active) {\n      // clone props\n      const propsInTransition = uniformTransitions.update();\n      const props = Object.create(this.props);\n      for (const key in propsInTransition) {\n        Object.defineProperty(props, key, {value: propsInTransition[key]});\n      }\n      return props;\n    }\n    return this.props;\n  }\n\n  calculateInstancePickingColors(attribute, {numInstances}) {\n    if (attribute.constant) {\n      return;\n    }\n\n    // calculateInstancePickingColors always generates the same sequence.\n    // pickingColorCache saves the largest generated sequence for reuse\n    const cacheSize = Math.floor(pickingColorCache.length / 3);\n\n    // Record when using the picking buffer cache, so that layers can always point at the most recently allocated cache\n    this.internalState.usesPickingColorCache = true;\n\n    if (cacheSize < numInstances) {\n      if (numInstances > MAX_PICKING_COLOR_CACHE_SIZE) {\n        log.warn(\n          'Layer has too many data objects. Picking might not be able to distinguish all objects.'\n        )();\n      }\n\n      pickingColorCache = typedArrayManager.allocate(pickingColorCache, numInstances, {\n        size: 3,\n        copy: true,\n        maxCount: Math.max(numInstances, MAX_PICKING_COLOR_CACHE_SIZE)\n      });\n\n      // If the attribute is larger than the cache, resize the cache and populate the missing chunk\n      const newCacheSize = Math.floor(pickingColorCache.length / 3);\n      const pickingColor = [];\n      for (let i = cacheSize; i < newCacheSize; i++) {\n        this.encodePickingColor(i, pickingColor);\n        pickingColorCache[i * 3 + 0] = pickingColor[0];\n        pickingColorCache[i * 3 + 1] = pickingColor[1];\n        pickingColorCache[i * 3 + 2] = pickingColor[2];\n      }\n    }\n\n    attribute.value = pickingColorCache.subarray(0, numInstances * 3);\n  }\n\n  _setModelAttributes(model, changedAttributes) {\n    const attributeManager = this.getAttributeManager();\n    const excludeAttributes = model.userData.excludeAttributes || {};\n    const shaderAttributes = attributeManager.getShaderAttributes(\n      changedAttributes,\n      excludeAttributes\n    );\n\n    model.setAttributes(shaderAttributes);\n  }\n\n  // Sets the picking color at the specified index to null picking color. Used for multi-depth picking.\n  // This method may be overriden by layer implementations\n  disablePickingIndex(objectIndex) {\n    this._disablePickingIndex(objectIndex);\n  }\n\n  _disablePickingIndex(objectIndex) {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n\n    const start = colors.getVertexOffset(objectIndex);\n    const end = colors.getVertexOffset(objectIndex + 1);\n\n    // Fill the sub buffer with 0s\n    colors.buffer.subData({\n      data: new Uint8Array(end - start),\n      offset: start // 1 byte per element\n    });\n  }\n\n  restorePickingColors() {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n    // The picking color cache may have been freed and then reallocated. This ensures we read from the currently allocated cache.\n    if (\n      this.internalState.usesPickingColorCache &&\n      colors.value.buffer !== pickingColorCache.buffer\n    ) {\n      colors.value = pickingColorCache.subarray(0, colors.value.length);\n    }\n    colors.updateSubBuffer({startOffset: 0});\n  }\n\n  // Deduces numer of instances. Intention is to support:\n  // - Explicit setting of numInstances\n  // - Auto-deduction for ES6 containers that define a size member\n  // - Auto-deduction for Classic Arrays via the built-in length attribute\n  // - Auto-deduction via arrays\n  getNumInstances(props) {\n    props = props || this.props;\n\n    // First Check if app has provided an explicit value\n    if (props.numInstances !== undefined) {\n      return props.numInstances;\n    }\n\n    // Second check if the layer has set its own value\n    if (this.state && this.state.numInstances !== undefined) {\n      return this.state.numInstances;\n    }\n\n    // Use container library to get a count for any ES6 container or object\n    return count(props.data);\n  }\n\n  // Buffer layout describes how many attribute values are packed for each data object\n  // The default (null) is one value each object.\n  // Some data formats (e.g. paths, polygons) have various length. Their buffer layout\n  //  is in the form of [L0, L1, L2, ...]\n  getStartIndices(props) {\n    props = props || this.props;\n\n    // First Check if startIndices is provided as an explicit value\n    if (props.startIndices !== undefined) {\n      return props.startIndices;\n    }\n\n    // Second check if the layer has set its own value\n    if (this.state && this.state.startIndices) {\n      return this.state.startIndices;\n    }\n\n    return null;\n  }\n\n  // LAYER MANAGER API\n  // Should only be called by the deck.gl LayerManager class\n\n  // Called by layer manager when a new layer is found\n  /* eslint-disable max-statements */\n  _initialize() {\n    debug(TRACE_INITIALIZE, this);\n\n    this._initState();\n\n    // Call subclass lifecycle methods\n    this.initializeState(this.context);\n    // Initialize extensions\n    for (const extension of this.props.extensions) {\n      extension.initializeState.call(this, this.context, extension);\n    }\n    // End subclass lifecycle methods\n\n    // initializeState callback tends to clear state\n    this.setChangeFlags({\n      dataChanged: true,\n      propsChanged: true,\n      viewportChanged: true,\n      extensionsChanged: true\n    });\n\n    this._updateState();\n  }\n\n  // Called by layer manager\n  // if this layer is new (not matched with an existing layer) oldProps will be empty object\n  _update() {\n    // Call subclass lifecycle method\n    const stateNeedsUpdate = this.needsUpdate();\n    // End lifecycle method\n    debug(TRACE_UPDATE, this, stateNeedsUpdate);\n\n    if (stateNeedsUpdate) {\n      this._updateState();\n    }\n  }\n\n  // Common code for _initialize and _update\n  _updateState() {\n    const currentProps = this.props;\n    const currentViewport = this.context.viewport;\n    const propsInTransition = this._updateUniformTransition();\n    this.internalState.propsInTransition = propsInTransition;\n    // Overwrite this.context.viewport during update to use the last activated viewport on this layer\n    // In multi-view applications, a layer may only be drawn in one of the views\n    // Which would make the \"active\" viewport different from the shared context\n    this.context.viewport = this.internalState.viewport || currentViewport;\n    // Overwrite this.props during update to use in-transition prop values\n    this.props = propsInTransition;\n\n    try {\n      const updateParams = this._getUpdateParams();\n      const oldModels = this.getModels();\n\n      // Safely call subclass lifecycle methods\n      if (this.context.gl) {\n        this.updateState(updateParams);\n      } else {\n        try {\n          this.updateState(updateParams);\n        } catch (error) {\n          // ignore error if gl context is missing\n        }\n      }\n      // Execute extension updates\n      for (const extension of this.props.extensions) {\n        extension.updateState.call(this, updateParams, extension);\n      }\n\n      const modelChanged = this.getModels()[0] !== oldModels[0];\n      this._updateModules(updateParams, modelChanged);\n      // End subclass lifecycle methods\n\n      if (this.isComposite) {\n        // Render or update previously rendered sublayers\n        this._renderLayers(updateParams);\n      } else {\n        this.setNeedsRedraw();\n        // Add any subclass attributes\n        this._updateAttributes(this.props);\n\n        // Note: Automatic instance count update only works for single layers\n        if (this.state.model) {\n          this.state.model.setInstanceCount(this.getNumInstances());\n        }\n      }\n    } finally {\n      // Restore shared context\n      this.context.viewport = currentViewport;\n      this.props = currentProps;\n      this.clearChangeFlags();\n      this.internalState.needsUpdate = false;\n      this.internalState.resetOldProps();\n    }\n  }\n  /* eslint-enable max-statements */\n\n  // Called by manager when layer is about to be disposed\n  // Note: not guaranteed to be called on application shutdown\n  _finalize() {\n    debug(TRACE_FINALIZE, this);\n\n    // Call subclass lifecycle method\n    this.finalizeState(this.context);\n    // Finalize extensions\n    for (const extension of this.props.extensions) {\n      extension.finalizeState.call(this, extension);\n    }\n  }\n\n  // Calculates uniforms\n  drawLayer({moduleParameters = null, uniforms = {}, parameters = {}}) {\n    this._updateAttributeTransition();\n\n    const currentProps = this.props;\n    // Overwrite this.props during redraw to use in-transition prop values\n    // `internalState.propsInTransition` could be missing if `updateState` failed\n    this.props = this.internalState.propsInTransition || currentProps;\n\n    const {opacity} = this.props;\n    // apply gamma to opacity to make it visually \"linear\"\n    uniforms.opacity = Math.pow(opacity, 1 / 2.2);\n\n    try {\n      // TODO/ib - hack move to luma Model.draw\n      if (moduleParameters) {\n        this.setModuleParameters(moduleParameters);\n      }\n\n      // Apply polygon offset to avoid z-fighting\n      // TODO - move to draw-layers\n      const {getPolygonOffset} = this.props;\n      const offsets = (getPolygonOffset && getPolygonOffset(uniforms)) || [0, 0];\n\n      setParameters(this.context.gl, {polygonOffset: offsets});\n\n      // Call subclass lifecycle method\n      withParameters(this.context.gl, parameters, () => {\n        const opts = {moduleParameters, uniforms, parameters, context: this.context};\n\n        // extensions\n        for (const extension of this.props.extensions) {\n          extension.draw.call(this, opts, extension);\n        }\n\n        this.draw(opts);\n      });\n    } finally {\n      this.props = currentProps;\n    }\n\n    // End lifecycle method\n  }\n\n  // Helper methods\n  getChangeFlags() {\n    return this.internalState.changeFlags;\n  }\n\n  // Dirty some change flags, will be handled by updateLayer\n  /* eslint-disable complexity */\n  setChangeFlags(flags) {\n    const {changeFlags} = this.internalState;\n\n    /* eslint-disable no-fallthrough, max-depth */\n    for (const key in flags) {\n      if (flags[key]) {\n        let flagChanged = false;\n        switch (key) {\n          case 'dataChanged':\n            // changeFlags.dataChanged may be `false`, a string (reason) or an array of ranges\n            if (Array.isArray(changeFlags[key])) {\n              changeFlags[key] = Array.isArray(flags[key])\n                ? changeFlags[key].concat(flags[key])\n                : flags[key];\n              flagChanged = true;\n            }\n\n          default:\n            if (!changeFlags[key]) {\n              changeFlags[key] = flags[key];\n              flagChanged = true;\n            }\n        }\n        if (flagChanged) {\n          debug(TRACE_CHANGE_FLAG, this, key, flags);\n        }\n      }\n    }\n    /* eslint-enable no-fallthrough, max-depth */\n\n    // Update composite flags\n    const propsOrDataChanged =\n      changeFlags.dataChanged ||\n      changeFlags.updateTriggersChanged ||\n      changeFlags.propsChanged ||\n      changeFlags.extensionsChanged;\n    changeFlags.propsOrDataChanged = propsOrDataChanged;\n    changeFlags.somethingChanged =\n      propsOrDataChanged || flags.viewportChanged || flags.stateChanged;\n  }\n  /* eslint-enable complexity */\n\n  // Clear all changeFlags, typically after an update\n  clearChangeFlags() {\n    this.internalState.changeFlags = {\n      // Primary changeFlags, can be strings stating reason for change\n      dataChanged: false,\n      propsChanged: false,\n      updateTriggersChanged: false,\n      viewportChanged: false,\n      stateChanged: false,\n      extensionsChanged: false,\n\n      // Derived changeFlags\n      propsOrDataChanged: false,\n      somethingChanged: false\n    };\n  }\n\n  // Compares the layers props with old props from a matched older layer\n  // and extracts change flags that describe what has change so that state\n  // can be update correctly with minimal effort\n  diffProps(newProps, oldProps) {\n    const changeFlags = diffProps(newProps, oldProps);\n\n    // iterate over changedTriggers\n    if (changeFlags.updateTriggersChanged) {\n      for (const key in changeFlags.updateTriggersChanged) {\n        if (changeFlags.updateTriggersChanged[key]) {\n          this.invalidateAttribute(key);\n        }\n      }\n    }\n\n    // trigger uniform transitions\n    if (changeFlags.transitionsChanged) {\n      for (const key in changeFlags.transitionsChanged) {\n        // prop changed and transition is enabled\n        this.internalState.uniformTransitions.add(\n          key,\n          oldProps[key],\n          newProps[key],\n          newProps.transitions[key]\n        );\n      }\n    }\n\n    return this.setChangeFlags(changeFlags);\n  }\n\n  // Called by layer manager to validate props (in development)\n  validateProps() {\n    validateProps(this.props);\n  }\n\n  setModuleParameters(moduleParameters) {\n    for (const model of this.getModels()) {\n      model.updateModuleSettings(moduleParameters);\n    }\n  }\n\n  updateAutoHighlight(info) {\n    if (this.props.autoHighlight && !Number.isInteger(this.props.highlightedObjectIndex)) {\n      this._updateAutoHighlight(info);\n    }\n  }\n\n  // May be overriden by classes\n  _updateAutoHighlight(info) {\n    const pickingModuleParameters = {\n      pickingSelectedColor: info.picked ? info.color : null\n    };\n    const {highlightColor} = this.props;\n    if (info.picked && typeof highlightColor === 'function') {\n      pickingModuleParameters.pickingHighlightColor = highlightColor(info);\n    }\n    this.setModuleParameters(pickingModuleParameters);\n    // setModuleParameters does not trigger redraw\n    this.setNeedsRedraw();\n  }\n\n  // PRIVATE METHODS\n  _updateModules({props, oldProps}, forceUpdate) {\n    // Picking module parameters\n    const {autoHighlight, highlightedObjectIndex, highlightColor} = props;\n    if (\n      forceUpdate ||\n      oldProps.autoHighlight !== autoHighlight ||\n      oldProps.highlightedObjectIndex !== highlightedObjectIndex ||\n      oldProps.highlightColor !== highlightColor\n    ) {\n      const parameters = {};\n      if (!autoHighlight) {\n        parameters.pickingSelectedColor = null;\n      }\n      if (Array.isArray(highlightColor)) {\n        parameters.pickingHighlightColor = highlightColor;\n      }\n\n      // highlightedObjectIndex will overwrite any settings from auto highlighting.\n      if (Number.isInteger(highlightedObjectIndex)) {\n        parameters.pickingSelectedColor =\n          highlightedObjectIndex >= 0 ? this.encodePickingColor(highlightedObjectIndex) : null;\n      }\n\n      this.setModuleParameters(parameters);\n    }\n  }\n\n  _getUpdateParams() {\n    return {\n      props: this.props,\n      oldProps: this.internalState.getOldProps(),\n      context: this.context,\n      changeFlags: this.internalState.changeFlags\n    };\n  }\n\n  // Checks state of attributes and model\n  _getNeedsRedraw(opts) {\n    // this method may be called by the render loop as soon a the layer\n    // has been created, so guard against uninitialized state\n    if (!this.internalState) {\n      return false;\n    }\n\n    let redraw = false;\n    redraw = redraw || (this.internalState.needsRedraw && this.id);\n    this.internalState.needsRedraw = this.internalState.needsRedraw && !opts.clearRedrawFlags;\n\n    // TODO - is attribute manager needed? - Model should be enough.\n    const attributeManager = this.getAttributeManager();\n    const attributeManagerNeedsRedraw = attributeManager && attributeManager.getNeedsRedraw(opts);\n    redraw = redraw || attributeManagerNeedsRedraw;\n\n    return redraw;\n  }\n\n  // Create new attribute manager\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats,\n      timeline: this.context.timeline\n    });\n  }\n\n  _initState() {\n    assert(!this.internalState && !this.state); // finalized layer cannot be reused\n    assert(isFinite(this.props.coordinateSystem)); // invalid coordinateSystem\n\n    const attributeManager = this._getAttributeManager();\n\n    if (attributeManager) {\n      // All instanced layers get instancePickingColors attribute by default\n      // Their shaders can use it to render a picking scene\n      // TODO - this slightly slows down non instanced layers\n      attributeManager.addInstanced({\n        instancePickingColors: {\n          type: GL.UNSIGNED_BYTE,\n          size: 3,\n          noAlloc: true,\n          update: this.calculateInstancePickingColors\n        }\n      });\n    }\n\n    this.internalState = new LayerState({\n      attributeManager,\n      layer: this\n    });\n    this.clearChangeFlags(); // populate this.internalState.changeFlags\n\n    this.state = {};\n    // for backwards compatibility with older layers\n    // TODO - remove in next release\n    /* eslint-disable accessor-pairs */\n    Object.defineProperty(this.state, 'attributeManager', {\n      get: () => {\n        log.deprecated('layer.state.attributeManager', 'layer.getAttributeManager()');\n        return attributeManager;\n      }\n    });\n    /* eslint-enable accessor-pairs */\n\n    this.internalState.layer = this;\n    this.internalState.uniformTransitions = new UniformTransitionManager(this.context.timeline);\n    this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n  }\n\n  // Called by layer manager to transfer state from an old layer\n  _transferState(oldLayer) {\n    debug(TRACE_MATCHED, this, this === oldLayer);\n\n    const {state, internalState} = oldLayer;\n\n    if (this === oldLayer) {\n      return;\n    }\n\n    // Move internalState\n    this.internalState = internalState;\n    this.internalState.layer = this;\n\n    // Move state\n    this.state = state;\n    // We keep the state ref on old layers to support async actions\n    // oldLayer.state = null;\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n\n    this.diffProps(this.props, this.internalState.getOldProps());\n  }\n\n  _onAsyncPropUpdated() {\n    this.diffProps(this.props, this.internalState.getOldProps());\n    this.setNeedsUpdate();\n  }\n}\n\nLayer.layerName = 'Layer';\nLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}