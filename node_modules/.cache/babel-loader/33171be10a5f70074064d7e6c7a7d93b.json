{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { load } from '@loaders.gl/core';\nimport TilesetTraverser from './tileset-traverser';\nimport { getLodStatus } from '../helpers/i3s-lod';\nimport TileHeader from '../tile-3d';\nimport I3STileManager from './i3s-tile-manager';\nexport default class I3STilesetTraverser extends TilesetTraverser {\n  constructor(options) {\n    super(options);\n\n    _defineProperty(this, \"_tileManager\", void 0);\n\n    this._tileManager = new I3STileManager();\n  }\n\n  shouldRefine(tile, frameState) {\n    tile._lodJudge = getLodStatus(tile, frameState);\n    return tile._lodJudge === 'DIG';\n  }\n\n  updateChildTiles(tile, frameState) {\n    const children = tile.header.children || [];\n    const childTiles = tile.children;\n    const tileset = tile.tileset;\n\n    for (const child of children) {\n      const extendedId = \"\".concat(child.id, \"-\").concat(frameState.viewport.id);\n      const childTile = childTiles && childTiles.find(t => t.id === extendedId);\n\n      if (!childTile) {\n        let request = () => this._loadTile(child.id, tileset);\n\n        const cachedRequest = this._tileManager.find(extendedId);\n\n        if (!cachedRequest) {\n          if (tileset.tileset.nodePages) {\n            request = () => tileset.tileset.nodePagesTile.formTileFromNodePages(child.id);\n          }\n\n          this._tileManager.add(request, extendedId, header => this._onTileLoad(header, tile, extendedId), frameState);\n        } else {\n          this._tileManager.update(extendedId, frameState);\n        }\n      } else if (childTile) {\n        this.updateTile(childTile, frameState);\n      }\n    }\n\n    return false;\n  }\n\n  async _loadTile(nodeId, tileset) {\n    const {\n      loader\n    } = tileset;\n    const nodeUrl = tileset.getTileUrl(\"\".concat(tileset.url, \"/nodes/\").concat(nodeId));\n    const options = { ...tileset.loadOptions,\n      i3s: { ...tileset.loadOptions.i3s,\n        isTileHeader: true,\n        loadContent: false\n      }\n    };\n    return await load(nodeUrl, loader, options);\n  }\n\n  _onTileLoad(header, tile, extendedId) {\n    const childTile = new TileHeader(tile.tileset, header, tile, extendedId);\n    tile.children.push(childTile);\n\n    const frameState = this._tileManager.find(childTile.id).frameState;\n\n    this.updateTile(childTile, frameState);\n\n    if (this._frameNumber === frameState.frameNumber) {\n      this.executeTraversal(childTile, frameState);\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["load","TilesetTraverser","getLodStatus","TileHeader","I3STileManager","I3STilesetTraverser","constructor","options","_defineProperty","_tileManager","shouldRefine","tile","frameState","_lodJudge","updateChildTiles","children","header","childTiles","tileset","child","extendedId","id","viewport","childTile","find","t","request","_loadTile","cachedRequest","nodePages","nodePagesTile","formTileFromNodePages","add","_onTileLoad","update","updateTile","nodeId","loader","nodeUrl","getTileUrl","url","loadOptions","i3s","isTileHeader","loadContent","push","_frameNumber","frameNumber","executeTraversal"],"sources":["../../../../src/tileset/traversers/i3s-tileset-traverser.ts"],"sourcesContent":["import {load} from '@loaders.gl/core';\nimport TilesetTraverser from './tileset-traverser';\n\nimport {getLodStatus} from '../helpers/i3s-lod';\nimport TileHeader from '../tile-3d';\nimport I3STileManager from './i3s-tile-manager';\n\nexport default class I3STilesetTraverser extends TilesetTraverser {\n  private _tileManager: I3STileManager;\n\n  constructor(options) {\n    super(options);\n    this._tileManager = new I3STileManager();\n  }\n\n  shouldRefine(tile, frameState) {\n    tile._lodJudge = getLodStatus(tile, frameState);\n    return tile._lodJudge === 'DIG';\n  }\n\n  updateChildTiles(tile, frameState): boolean {\n    const children = tile.header.children || [];\n    // children which are already fetched and constructed as Tile3D instances\n    const childTiles = tile.children;\n    const tileset = tile.tileset;\n\n    for (const child of children) {\n      const extendedId = `${child.id}-${frameState.viewport.id}`;\n      // if child tile is not fetched\n      const childTile = childTiles && childTiles.find((t) => t.id === extendedId);\n      if (!childTile) {\n        let request = () => this._loadTile(child.id, tileset);\n        const cachedRequest = this._tileManager.find(extendedId);\n        if (!cachedRequest) {\n          // eslint-disable-next-line max-depth\n          if (tileset.tileset.nodePages) {\n            request = () => tileset.tileset.nodePagesTile.formTileFromNodePages(child.id);\n          }\n          this._tileManager.add(\n            request,\n            extendedId,\n            (header) => this._onTileLoad(header, tile, extendedId),\n            frameState\n          );\n        } else {\n          // update frameNumber since it is still needed in current frame\n          this._tileManager.update(extendedId, frameState);\n        }\n      } else if (childTile) {\n        // if child tile is fetched and available\n        this.updateTile(childTile, frameState);\n      }\n    }\n    return false;\n  }\n\n  async _loadTile(nodeId, tileset) {\n    const {loader} = tileset;\n    const nodeUrl = tileset.getTileUrl(`${tileset.url}/nodes/${nodeId}`);\n    // load metadata\n    const options = {\n      ...tileset.loadOptions,\n      i3s: {\n        ...tileset.loadOptions.i3s,\n        isTileHeader: true,\n        loadContent: false\n      }\n    };\n\n    return await load(nodeUrl, loader, options);\n  }\n\n  /**\n   * The callback to init TileHeader instance after loading the tile JSON\n   * @param {Object} header - the tile JSON from a dataset\n   * @param {TileHeader} tile - the parent TileHeader instance\n   * @param {string} extendedId - optional ID to separate copies of a tile for different viewports.\n   *                              const extendedId = `${tile.id}-${frameState.viewport.id}`;\n   * @return {void}\n   */\n  _onTileLoad(header, tile, extendedId) {\n    // after child tile is fetched\n    const childTile = new TileHeader(tile.tileset, header, tile, extendedId);\n    tile.children.push(childTile);\n    const frameState = this._tileManager.find(childTile.id).frameState;\n    this.updateTile(childTile, frameState);\n\n    // after tile fetched, resume traversal if still in current update/traversal frame\n    if (this._frameNumber === frameState.frameNumber) {\n      this.executeTraversal(childTile, frameState);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}