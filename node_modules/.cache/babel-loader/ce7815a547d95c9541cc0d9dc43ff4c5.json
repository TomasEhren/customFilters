{"ast":null,"code":"import Viewport from '../viewports/viewport';\nimport { parsePosition, getPosition } from '../utils/positions';\nimport { deepEqual } from '../utils/deep-equal';\nimport assert from '../utils/assert';\nexport default class View {\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      id = null,\n      x = 0,\n      y = 0,\n      width = '100%',\n      height = '100%',\n      viewportInstance,\n      type = Viewport\n    } = props;\n    assert(!viewportInstance || viewportInstance instanceof Viewport);\n    this.viewportInstance = viewportInstance;\n    this.id = id || this.constructor.displayName || 'view';\n    this.type = type;\n    this.props = { ...props,\n      id: this.id\n    };\n\n    this._parseDimensions({\n      x,\n      y,\n      width,\n      height\n    });\n\n    this.equals = this.equals.bind(this);\n    Object.seal(this);\n  }\n\n  equals(view) {\n    if (this === view) {\n      return true;\n    }\n\n    if (this.viewportInstance) {\n      return view.viewportInstance && this.viewportInstance.equals(view.viewportInstance);\n    }\n\n    const viewChanged = deepEqual(this.props, view.props);\n    return viewChanged;\n  }\n\n  makeViewport(_ref) {\n    let {\n      width,\n      height,\n      viewState\n    } = _ref;\n\n    if (this.viewportInstance) {\n      return this.viewportInstance;\n    }\n\n    viewState = this.filterViewState(viewState);\n    const viewportDimensions = this.getDimensions({\n      width,\n      height\n    });\n    return this._getViewport(viewState, viewportDimensions);\n  }\n\n  getViewStateId() {\n    switch (typeof this.props.viewState) {\n      case 'string':\n        return this.props.viewState;\n\n      case 'object':\n        return this.props.viewState && this.props.viewState.id;\n\n      default:\n        return this.id;\n    }\n  }\n\n  filterViewState(viewState) {\n    if (this.props.viewState && typeof this.props.viewState === 'object') {\n      if (!this.props.viewState.id) {\n        return this.props.viewState;\n      }\n\n      const newViewState = { ...viewState\n      };\n\n      for (const key in this.props.viewState) {\n        if (key !== 'id') {\n          newViewState[key] = this.props.viewState[key];\n        }\n      }\n\n      return newViewState;\n    }\n\n    return viewState;\n  }\n\n  getDimensions(_ref2) {\n    let {\n      width,\n      height\n    } = _ref2;\n    return {\n      x: getPosition(this._x, width),\n      y: getPosition(this._y, height),\n      width: getPosition(this._width, width),\n      height: getPosition(this._height, height)\n    };\n  }\n\n  _getControllerProps(defaultOpts) {\n    let opts = this.props.controller;\n\n    if (!opts) {\n      return null;\n    }\n\n    if (opts === true) {\n      return defaultOpts;\n    }\n\n    if (typeof opts === 'function') {\n      opts = {\n        type: opts\n      };\n    }\n\n    return { ...defaultOpts,\n      ...opts\n    };\n  }\n\n  _getViewport(viewState, viewportDimensions) {\n    const {\n      type: ViewportType\n    } = this;\n    return new ViewportType({ ...viewState,\n      ...this.props,\n      ...viewportDimensions\n    });\n  }\n\n  _parseDimensions(_ref3) {\n    let {\n      x,\n      y,\n      width,\n      height\n    } = _ref3;\n    this._x = parsePosition(x);\n    this._y = parsePosition(y);\n    this._width = parsePosition(width);\n    this._height = parsePosition(height);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Viewport","parsePosition","getPosition","deepEqual","assert","View","constructor","props","id","x","y","width","height","viewportInstance","type","displayName","_parseDimensions","equals","bind","Object","seal","view","viewChanged","makeViewport","viewState","filterViewState","viewportDimensions","getDimensions","_getViewport","getViewStateId","newViewState","key","_x","_y","_width","_height","_getControllerProps","defaultOpts","opts","controller","ViewportType"],"sources":["../../../src/views/view.js"],"sourcesContent":["import Viewport from '../viewports/viewport';\nimport {parsePosition, getPosition} from '../utils/positions';\nimport {deepEqual} from '../utils/deep-equal';\nimport assert from '../utils/assert';\n\nexport default class View {\n  constructor(props = {}) {\n    const {\n      id = null,\n\n      // Window width/height in pixels (for pixel projection)\n      x = 0,\n      y = 0,\n      width = '100%',\n      height = '100%',\n\n      // A View can be a wrapper for a viewport instance\n      viewportInstance,\n\n      // Internal: Viewport Type\n      type = Viewport // TODO - default to WebMercator?\n    } = props;\n\n    assert(!viewportInstance || viewportInstance instanceof Viewport);\n    this.viewportInstance = viewportInstance;\n\n    // Id\n    this.id = id || this.constructor.displayName || 'view';\n    this.type = type;\n\n    this.props = {...props, id: this.id};\n\n    // Extents\n    this._parseDimensions({x, y, width, height});\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n\n    Object.seal(this);\n  }\n\n  equals(view) {\n    if (this === view) {\n      return true;\n    }\n\n    // if `viewportInstance` is set, it is the only prop that is used\n    // Delegate to `Viewport.equals`\n    if (this.viewportInstance) {\n      return view.viewportInstance && this.viewportInstance.equals(view.viewportInstance);\n    }\n\n    const viewChanged = deepEqual(this.props, view.props);\n\n    return viewChanged;\n  }\n\n  // Build a `Viewport` from a view descriptor\n  // TODO - add support for autosizing viewports using width and height\n  makeViewport({width, height, viewState}) {\n    if (this.viewportInstance) {\n      return this.viewportInstance;\n    }\n\n    viewState = this.filterViewState(viewState);\n\n    // Resolve relative viewport dimensions\n    const viewportDimensions = this.getDimensions({width, height});\n    return this._getViewport(viewState, viewportDimensions);\n  }\n\n  getViewStateId() {\n    switch (typeof this.props.viewState) {\n      case 'string':\n        // if View.viewState is a string, return it\n        return this.props.viewState;\n\n      case 'object':\n        // If it is an object, return its id component\n        return this.props.viewState && this.props.viewState.id;\n\n      default:\n        return this.id;\n    }\n  }\n\n  // Allows view to override (or completely define) viewState\n  filterViewState(viewState) {\n    if (this.props.viewState && typeof this.props.viewState === 'object') {\n      // If we have specified an id, then intent is to override,\n      // If not, completely specify the view state\n      if (!this.props.viewState.id) {\n        return this.props.viewState;\n      }\n\n      // Merge in all props from View's viewState, except id\n      const newViewState = {...viewState};\n      for (const key in this.props.viewState) {\n        if (key !== 'id') {\n          newViewState[key] = this.props.viewState[key];\n        }\n      }\n      return newViewState;\n    }\n\n    return viewState;\n  }\n\n  // Resolve relative viewport dimensions into actual dimensions (y='50%', width=800 => y=400)\n  getDimensions({width, height}) {\n    return {\n      x: getPosition(this._x, width),\n      y: getPosition(this._y, height),\n      width: getPosition(this._width, width),\n      height: getPosition(this._height, height)\n    };\n  }\n\n  // Used by sub classes to resolve controller props\n  _getControllerProps(defaultOpts) {\n    let opts = this.props.controller;\n\n    if (!opts) {\n      return null;\n    }\n    if (opts === true) {\n      return defaultOpts;\n    }\n    if (typeof opts === 'function') {\n      opts = {type: opts};\n    }\n    return {...defaultOpts, ...opts};\n  }\n\n  // Overridable method\n  _getViewport(viewState, viewportDimensions) {\n    // Get the type of the viewport\n    const {type: ViewportType} = this;\n    return new ViewportType({...viewState, ...this.props, ...viewportDimensions});\n  }\n\n  // Parse relative viewport dimension descriptors (e.g {y: '50%', height: '50%'})\n  _parseDimensions({x, y, width, height}) {\n    this._x = parsePosition(x);\n    this._y = parsePosition(y);\n    this._width = parsePosition(width);\n    this._height = parsePosition(height);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}