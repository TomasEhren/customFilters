{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport TransitionManager, { TRANSITION_EVENTS } from './transition-manager';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\nconst DEFAULT_INERTIA = 300;\n\nconst INERTIA_EASING = t => 1 - (1 - t) * (1 - t);\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\nexport default class Controller {\n  constructor(ControllerState) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _defineProperty(this, \"ControllerState\", void 0);\n\n    _defineProperty(this, \"controllerState\", null);\n\n    _defineProperty(this, \"controllerStateProps\", null);\n\n    _defineProperty(this, \"transitionManager\", void 0);\n\n    _defineProperty(this, \"_transition\", void 0);\n\n    _defineProperty(this, \"_events\", null);\n\n    _defineProperty(this, \"eventManager\", null);\n\n    _defineProperty(this, \"_interactionState\", {\n      isDragging: false\n    });\n\n    _defineProperty(this, \"_customEvents\", []);\n\n    _defineProperty(this, \"onViewStateChange\", null);\n\n    _defineProperty(this, \"onStateChange\", null);\n\n    _defineProperty(this, \"makeViewport\", void 0);\n\n    _defineProperty(this, \"_eventStartBlocked\", void 0);\n\n    _defineProperty(this, \"_state\", void 0);\n\n    _defineProperty(this, \"_panMove\", void 0);\n\n    _defineProperty(this, \"invertPan\", void 0);\n\n    _defineProperty(this, \"dragMode\", 'rotate');\n\n    _defineProperty(this, \"inertia\", 0);\n\n    _defineProperty(this, \"scrollZoom\", true);\n\n    _defineProperty(this, \"dragPan\", true);\n\n    _defineProperty(this, \"dragRotate\", true);\n\n    _defineProperty(this, \"doubleClickZoom\", true);\n\n    _defineProperty(this, \"touchZoom\", true);\n\n    _defineProperty(this, \"touchRotate\", false);\n\n    _defineProperty(this, \"keyboard\", true);\n\n    this.ControllerState = ControllerState;\n    this.transitionManager = new TransitionManager(ControllerState, { ...options,\n      onViewStateChange: this._onTransition.bind(this),\n      onStateChange: this._setInteractionState.bind(this)\n    });\n    const linearTransitionProps = this.linearTransitionProps;\n    this._transition = linearTransitionProps && { ...LINEAR_TRANSITION_PROPS,\n      transitionInterpolator: new LinearInterpolator({\n        transitionProps: linearTransitionProps\n      })\n    };\n    this.handleEvent = this.handleEvent.bind(this);\n    this.setProps(options);\n  }\n\n  get linearTransitionProps() {\n    return null;\n  }\n\n  set events(customEvents) {\n    this.toggleEvents(this._customEvents, false);\n    this.toggleEvents(customEvents, true);\n    this._customEvents = customEvents;\n    this.setProps(this.controllerStateProps);\n  }\n\n  finalize() {\n    for (const eventName in this._events) {\n      if (this._events[eventName]) {\n        this.eventManager.off(eventName, this.handleEvent);\n      }\n    }\n\n    this.transitionManager.finalize();\n  }\n\n  handleEvent(event) {\n    const {\n      ControllerState\n    } = this;\n    this.controllerState = new ControllerState({\n      makeViewport: this.makeViewport,\n      ...this.controllerStateProps,\n      ...this._state\n    });\n    const eventStartBlocked = this._eventStartBlocked;\n\n    switch (event.type) {\n      case 'panstart':\n        return eventStartBlocked ? false : this._onPanStart(event);\n\n      case 'panmove':\n        return this._onPan(event);\n\n      case 'panend':\n        return this._onPanEnd(event);\n\n      case 'pinchstart':\n        return eventStartBlocked ? false : this._onPinchStart(event);\n\n      case 'pinchmove':\n        return this._onPinch(event);\n\n      case 'pinchend':\n        return this._onPinchEnd(event);\n\n      case 'tripanstart':\n        return eventStartBlocked ? false : this._onTriplePanStart(event);\n\n      case 'tripanmove':\n        return this._onTriplePan(event);\n\n      case 'tripanend':\n        return this._onTriplePanEnd(event);\n\n      case 'doubletap':\n        return this._onDoubleTap(event);\n\n      case 'wheel':\n        return this._onWheel(event);\n\n      case 'keydown':\n        return this._onKeyDown(event);\n\n      default:\n        return false;\n    }\n  }\n\n  getCenter(event) {\n    const {\n      x,\n      y\n    } = this.controllerStateProps;\n    const {\n      offsetCenter\n    } = event;\n    return [offsetCenter.x - x, offsetCenter.y - y];\n  }\n\n  isPointInBounds(pos, event) {\n    const {\n      width,\n      height\n    } = this.controllerStateProps;\n\n    if (event && event.handled) {\n      return false;\n    }\n\n    const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n\n    if (inside && event) {\n      event.stopPropagation();\n    }\n\n    return inside;\n  }\n\n  isFunctionKeyPressed(event) {\n    const {\n      srcEvent\n    } = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  isDragging() {\n    return this._interactionState.isDragging;\n  }\n\n  blockEvents(timeout) {\n    const timer = setTimeout(() => {\n      if (this._eventStartBlocked === timer) {\n        this._eventStartBlocked = null;\n      }\n    }, timeout);\n    this._eventStartBlocked = timer;\n  }\n\n  setProps(props) {\n    if ('onViewStateChange' in props) {\n      this.onViewStateChange = props.onViewStateChange;\n    }\n\n    if ('onStateChange' in props) {\n      this.onStateChange = props.onStateChange;\n    }\n\n    if ('makeViewport' in props) {\n      this.makeViewport = props.makeViewport;\n    }\n\n    if ('dragMode' in props) {\n      this.dragMode = props.dragMode;\n    }\n\n    this.controllerStateProps = props;\n\n    if ('eventManager' in props && this.eventManager !== props.eventManager) {\n      this.eventManager = props.eventManager;\n      this._events = {};\n      this.toggleEvents(this._customEvents, true);\n    }\n\n    if (!('transitionInterpolator' in props)) {\n      props.transitionInterpolator = this._getTransitionProps().transitionInterpolator;\n    }\n\n    this.transitionManager.processViewStateChange(props);\n    let {\n      inertia\n    } = props;\n\n    if (inertia === true) {\n      inertia = DEFAULT_INERTIA;\n    }\n\n    this.inertia = inertia;\n    const {\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = props;\n    const isInteractive = Boolean(this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && touchRotate);\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n\n  updateTransition() {\n    this.transitionManager.updateTransition();\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  updateViewport(newControllerState) {\n    let extraProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let interactionState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const viewState = { ...newControllerState.getViewportProps(),\n      ...extraProps\n    };\n    const changed = this.controllerState !== newControllerState;\n    this._state = newControllerState.getState();\n\n    this._setInteractionState(interactionState);\n\n    if (changed) {\n      const oldViewState = this.controllerState ? this.controllerState.getViewportProps() : null;\n\n      if (this.onViewStateChange) {\n        this.onViewStateChange({\n          viewState,\n          interactionState: this._interactionState,\n          oldViewState\n        });\n      }\n    }\n  }\n\n  _onTransition(params) {\n    if (this.onViewStateChange) {\n      params.interactionState = this._interactionState;\n      this.onViewStateChange(params);\n    }\n  }\n\n  _setInteractionState(newStates) {\n    Object.assign(this._interactionState, newStates);\n\n    if (this.onStateChange) {\n      this.onStateChange(this._interactionState);\n    }\n  }\n\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton;\n\n    if (this.invertPan || this.dragMode === 'pan') {\n      alternateMode = !alternateMode;\n    }\n\n    const newControllerState = this.controllerState[alternateMode ? 'panStart' : 'rotateStart']({\n      pos\n    });\n    this._panMove = alternateMode;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true\n    });\n    return true;\n  }\n\n  _onPan(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);\n  }\n\n  _onPanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    return this._panMove ? this._onPanMoveEnd(event) : this._onPanRotateEnd(event);\n  }\n\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.pan({\n      pos\n    });\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  _onPanMoveEnd(event) {\n    const {\n      inertia\n    } = this;\n\n    if (this.dragPan && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos = [pos[0] + event.velocityX * inertia / 2, pos[1] + event.velocityY * inertia / 2];\n      const newControllerState = this.controllerState.pan({\n        pos: endPos\n      }).panEnd();\n      this.updateViewport(newControllerState, { ...this._getTransitionProps(),\n        transitionDuration: inertia,\n        transitionEasing: INERTIA_EASING\n      }, {\n        isDragging: false,\n        isPanning: true\n      });\n    } else {\n      const newControllerState = this.controllerState.panEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false\n      });\n    }\n\n    return true;\n  }\n\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.rotate({\n      pos\n    });\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  _onPanRotateEnd(event) {\n    const {\n      inertia\n    } = this;\n\n    if (this.dragRotate && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos = [pos[0] + event.velocityX * inertia / 2, pos[1] + event.velocityY * inertia / 2];\n      const newControllerState = this.controllerState.rotate({\n        pos: endPos\n      }).rotateEnd();\n      this.updateViewport(newControllerState, { ...this._getTransitionProps(),\n        transitionDuration: inertia,\n        transitionEasing: INERTIA_EASING\n      }, {\n        isDragging: false,\n        isRotating: true\n      });\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n\n    return true;\n  }\n\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n\n    event.preventDefault();\n    const pos = this.getCenter(event);\n\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const {\n      speed = 0.01,\n      smooth = false\n    } = this.scrollZoom;\n    const {\n      delta\n    } = event;\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newControllerState = this.controllerState.zoom({\n      pos,\n      scale\n    });\n    this.updateViewport(newControllerState, { ...this._getTransitionProps({\n        around: pos\n      }),\n      transitionDuration: smooth ? 250 : 1\n    }, {\n      isZooming: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  _onTriplePanStart(event) {\n    const pos = this.getCenter(event);\n\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const newControllerState = this.controllerState.rotateStart({\n      pos\n    });\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true\n    });\n    return true;\n  }\n\n  _onTriplePan(event) {\n    if (!this.touchRotate) {\n      return false;\n    }\n\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    pos[0] -= event.deltaX;\n    const newControllerState = this.controllerState.rotate({\n      pos\n    });\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  _onTriplePanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    const {\n      inertia\n    } = this;\n\n    if (this.touchRotate && inertia && event.velocityY) {\n      const pos = this.getCenter(event);\n      const endPos = [pos[0], pos[1] += event.velocityY * inertia / 2];\n      const newControllerState = this.controllerState.rotate({\n        pos: endPos\n      });\n      this.updateViewport(newControllerState, { ...this._getTransitionProps(),\n        transitionDuration: inertia,\n        transitionEasing: INERTIA_EASING\n      }, {\n        isDragging: false,\n        isRotating: true\n      });\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n\n    return true;\n  }\n\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const newControllerState = this.controllerState.zoomStart({\n      pos\n    }).rotateStart({\n      pos\n    });\n    this._startPinchRotation = event.rotation;\n    this._lastPinchEvent = event;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true\n    });\n    return true;\n  }\n\n  _onPinch(event) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    let newControllerState = this.controllerState;\n\n    if (this.touchZoom) {\n      const {\n        scale\n      } = event;\n      const pos = this.getCenter(event);\n      newControllerState = newControllerState.zoom({\n        pos,\n        scale\n      });\n    }\n\n    if (this.touchRotate) {\n      const {\n        rotation\n      } = event;\n      newControllerState = newControllerState.rotate({\n        deltaAngleX: this._startPinchRotation - rotation\n      });\n    }\n\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: this.touchZoom,\n      isZooming: this.touchZoom,\n      isRotating: this.touchRotate\n    });\n    this._lastPinchEvent = event;\n    return true;\n  }\n\n  _onPinchEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    const {\n      inertia,\n      _lastPinchEvent\n    } = this;\n\n    if (this.touchZoom && inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n      const pos = this.getCenter(event);\n      let newControllerState = this.controllerState.rotateEnd();\n      const z = Math.log2(event.scale);\n\n      const velocityZ = (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n\n      const endScale = Math.pow(2, z + velocityZ * inertia / 2);\n      newControllerState = newControllerState.zoom({\n        pos,\n        scale: endScale\n      }).zoomEnd();\n      this.updateViewport(newControllerState, { ...this._getTransitionProps({\n          around: pos\n        }),\n        transitionDuration: inertia,\n        transitionEasing: INERTIA_EASING\n      }, {\n        isDragging: false,\n        isPanning: this.touchZoom,\n        isZooming: this.touchZoom,\n        isRotating: false\n      });\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false,\n        isZooming: false,\n        isRotating: false\n      });\n    }\n\n    this._startPinchRotation = null;\n    this._lastPinchEvent = null;\n    return true;\n  }\n\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const isZoomOut = this.isFunctionKeyPressed(event);\n    const newControllerState = this.controllerState.zoom({\n      pos,\n      scale: isZoomOut ? 0.5 : 2\n    });\n    this.updateViewport(newControllerState, this._getTransitionProps({\n      around: pos\n    }), {\n      isZooming: true,\n      isPanning: true\n    });\n    this.blockEvents(100);\n    return true;\n  }\n\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {\n      zoomSpeed,\n      moveSpeed,\n      rotateSpeedX,\n      rotateSpeedY\n    } = this.keyboard;\n    const {\n      controllerState\n    } = this;\n    let newControllerState;\n    const interactionState = {};\n\n    switch (event.srcEvent.code) {\n      case 'Minus':\n        newControllerState = funcKey ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed) : controllerState.zoomOut(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n\n      case 'Equal':\n        newControllerState = funcKey ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed) : controllerState.zoomIn(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n\n      case 'ArrowLeft':\n        if (funcKey) {\n          newControllerState = controllerState.rotateLeft(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveLeft(moveSpeed);\n          interactionState.isPanning = true;\n        }\n\n        break;\n\n      case 'ArrowRight':\n        if (funcKey) {\n          newControllerState = controllerState.rotateRight(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveRight(moveSpeed);\n          interactionState.isPanning = true;\n        }\n\n        break;\n\n      case 'ArrowUp':\n        if (funcKey) {\n          newControllerState = controllerState.rotateUp(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveUp(moveSpeed);\n          interactionState.isPanning = true;\n        }\n\n        break;\n\n      case 'ArrowDown':\n        if (funcKey) {\n          newControllerState = controllerState.rotateDown(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveDown(moveSpeed);\n          interactionState.isPanning = true;\n        }\n\n        break;\n\n      default:\n        return false;\n    }\n\n    this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n    return true;\n  }\n\n  _getTransitionProps(opts) {\n    const {\n      _transition\n    } = this;\n\n    if (!_transition) {\n      return NO_TRANSITION_PROPS;\n    }\n\n    return opts ? { ..._transition,\n      transitionInterpolator: new LinearInterpolator({ ...opts,\n        transitionProps: this.linearTransitionProps,\n        makeViewport: this.controllerState.makeViewport\n      })\n    } : _transition;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["TransitionManager","TRANSITION_EVENTS","LinearInterpolator","NO_TRANSITION_PROPS","transitionDuration","LINEAR_TRANSITION_PROPS","transitionEasing","t","transitionInterruption","BREAK","DEFAULT_INERTIA","INERTIA_EASING","EVENT_TYPES","WHEEL","PAN","PINCH","TRIPLE_PAN","DOUBLE_TAP","KEYBOARD","Controller","constructor","ControllerState","options","_defineProperty","isDragging","transitionManager","onViewStateChange","_onTransition","bind","onStateChange","_setInteractionState","linearTransitionProps","_transition","transitionInterpolator","transitionProps","handleEvent","setProps","events","customEvents","toggleEvents","_customEvents","controllerStateProps","finalize","eventName","_events","eventManager","off","event","controllerState","makeViewport","_state","eventStartBlocked","_eventStartBlocked","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onTriplePanStart","_onTriplePan","_onTriplePanEnd","_onDoubleTap","_onWheel","_onKeyDown","getCenter","x","y","offsetCenter","isPointInBounds","pos","width","height","handled","inside","stopPropagation","isFunctionKeyPressed","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","_interactionState","blockEvents","timeout","timer","setTimeout","props","dragMode","_getTransitionProps","processViewStateChange","inertia","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","isInteractive","updateTransition","eventNames","enabled","forEach","on","updateViewport","newControllerState","extraProps","interactionState","viewState","getViewportProps","changed","getState","oldViewState","params","newStates","Object","assign","alternateMode","rightButton","invertPan","_panMove","_onPanMove","_onPanRotate","_onPanMoveEnd","_onPanRotateEnd","pan","isPanning","velocity","endPos","velocityX","velocityY","panEnd","rotate","isRotating","rotateEnd","preventDefault","speed","smooth","delta","scale","Math","exp","abs","zoom","around","isZooming","rotateStart","deltaX","zoomStart","_startPinchRotation","rotation","_lastPinchEvent","deltaAngleX","z","log2","velocityZ","deltaTime","endScale","pow","zoomEnd","isZoomOut","funcKey","zoomSpeed","moveSpeed","rotateSpeedX","rotateSpeedY","code","zoomOut","zoomIn","rotateLeft","moveLeft","rotateRight","moveRight","rotateUp","moveUp","rotateDown","moveDown","opts"],"sources":["../../../src/controllers/controller.ts"],"sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable max-statements, complexity */\nimport TransitionManager, {TRANSITION_EVENTS} from './transition-manager';\nimport LinearInterpolator from '../transitions/linear-interpolator';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\n\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\nconst DEFAULT_INERTIA = 300;\nconst INERTIA_EASING = t => 1 - (1 - t) * (1 - t);\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\ntype ControllerProps = {\n  scrollZoom?: boolean | {speed?: number; smooth?: boolean};\n  dragPan?: boolean;\n  dragRotate?: boolean;\n  doubleClickZoom?: boolean;\n  touchZoom?: boolean;\n  touchRotate?: boolean;\n  keyboard?:\n    | boolean\n    | {\n        zoomSpeed?: number; //  speed of zoom using +/- keys. Default 2.\n        moveSpeed?: number; //  speed of movement using arrow keys, in pixels.\n        rotateSpeedX?: number; //  speed of rotation using shift + left/right arrow keys, in degrees. Default 15.\n        rotateSpeedY?: number; //  speed of rotation using shift + up/down arrow keys, in degrees. Default 10.\n      };\n  dragMode?: 'pan' | 'rotate';\n  inertia?: boolean | number;\n};\n\nexport default class Controller {\n  ControllerState;\n  controllerState: Record<string, any> | null = null;\n  controllerStateProps: Record<string, any> | null = null;\n  transitionManager: TransitionManager;\n  _transition;\n  _events: Record<string, any> | null = null;\n  eventManager: any = null;\n  _interactionState = {\n    isDragging: false\n  };\n  _customEvents = [];\n  onViewStateChange = null;\n  onStateChange = null;\n\n  makeViewport;\n  _eventStartBlocked;\n  _state;\n\n  _panMove;\n  invertPan;\n  dragMode: 'pan' | 'rotate' = 'rotate';\n\n  inertia: number = 0;\n\n  scrollZoom: boolean | {speed?: number; smooth?: boolean} = true;\n  dragPan: boolean = true;\n  dragRotate: boolean = true;\n  doubleClickZoom: boolean = true;\n  touchZoom: boolean = true;\n  touchRotate: boolean = false;\n  keyboard:\n    | boolean\n    | {\n        zoomSpeed: number; //  speed of zoom using +/- keys. Default 2.\n        moveSpeed: number; //  speed of movement using arrow keys, in pixels.\n        rotateSpeedX: number; //  speed of rotation using shift + left/right arrow keys, in degrees. Default 15.\n        rotateSpeedY: number; //  speed of rotation using shift + up/down arrow keys, in degrees. Default 10.\n      } = true;\n\n  constructor(ControllerState, options: ControllerProps = {}) {\n    this.ControllerState = ControllerState;\n    this.transitionManager = new TransitionManager(ControllerState, {\n      ...options,\n      onViewStateChange: this._onTransition.bind(this),\n      onStateChange: this._setInteractionState.bind(this)\n    });\n\n    const linearTransitionProps = this.linearTransitionProps;\n    this._transition = linearTransitionProps && {\n      ...LINEAR_TRANSITION_PROPS,\n      // @ts-expect-error\n      transitionInterpolator: new LinearInterpolator({\n        transitionProps: linearTransitionProps\n      })\n    };\n\n    this.handleEvent = this.handleEvent.bind(this);\n\n    this.setProps(options);\n  }\n\n  get linearTransitionProps(): string[] | null {\n    return null;\n  }\n\n  set events(customEvents) {\n    this.toggleEvents(this._customEvents, false);\n    this.toggleEvents(customEvents, true);\n    this._customEvents = customEvents;\n    // Make sure default events are not overwritten\n    this.setProps(this.controllerStateProps);\n  }\n\n  finalize() {\n    for (const eventName in this._events) {\n      if (this._events[eventName]) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this.eventManager.off(eventName, this.handleEvent);\n      }\n    }\n    this.transitionManager.finalize();\n  }\n\n  /**\n   * Callback for events\n   * @param {hammer.Event} event\n   */\n  handleEvent(event) {\n    const {ControllerState} = this;\n    this.controllerState = new ControllerState({\n      makeViewport: this.makeViewport,\n      ...this.controllerStateProps,\n      ...this._state\n    });\n    const eventStartBlocked = this._eventStartBlocked;\n\n    switch (event.type) {\n      case 'panstart':\n        return eventStartBlocked ? false : this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return eventStartBlocked ? false : this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'tripanstart':\n        return eventStartBlocked ? false : this._onTriplePanStart(event);\n      case 'tripanmove':\n        return this._onTriplePan(event);\n      case 'tripanend':\n        return this._onTriplePanEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event) {\n    const {x, y} = this.controllerStateProps;\n    const {offsetCenter} = event;\n    return [offsetCenter.x - x, offsetCenter.y - y];\n  }\n\n  isPointInBounds(pos, event) {\n    // @ts-expect-error\n    const {width, height} = this.controllerStateProps;\n    if (event && event.handled) {\n      return false;\n    }\n\n    const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n    if (inside && event) {\n      event.stopPropagation();\n    }\n    return inside;\n  }\n\n  isFunctionKeyPressed(event) {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  isDragging() {\n    return this._interactionState.isDragging;\n  }\n\n  // When a multi-touch event ends, e.g. pinch, not all pointers are lifted at the same time.\n  // This triggers a brief `pan` event.\n  // Calling this method will temporarily disable *start events to avoid conflicting transitions.\n  blockEvents(timeout) {\n    /* global setTimeout */\n    const timer = setTimeout(() => {\n      if (this._eventStartBlocked === timer) {\n        this._eventStartBlocked = null;\n      }\n    }, timeout);\n    this._eventStartBlocked = timer;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  setProps(props) {\n    if ('onViewStateChange' in props) {\n      this.onViewStateChange = props.onViewStateChange;\n    }\n    if ('onStateChange' in props) {\n      this.onStateChange = props.onStateChange;\n    }\n    if ('makeViewport' in props) {\n      this.makeViewport = props.makeViewport;\n    }\n    if ('dragMode' in props) {\n      this.dragMode = props.dragMode;\n    }\n    this.controllerStateProps = props;\n\n    if ('eventManager' in props && this.eventManager !== props.eventManager) {\n      // EventManager has changed\n      this.eventManager = props.eventManager;\n      this._events = {};\n      this.toggleEvents(this._customEvents, true);\n    }\n\n    if (!('transitionInterpolator' in props)) {\n      // Add default transition interpolator\n      props.transitionInterpolator = this._getTransitionProps().transitionInterpolator;\n    }\n\n    this.transitionManager.processViewStateChange(props);\n\n    let {inertia} = props;\n    if (inertia === true) {\n      inertia = DEFAULT_INERTIA;\n    }\n    this.inertia = inertia;\n\n    // TODO - make sure these are not reset on every setProps\n    const {\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = props;\n\n    // Register/unregister events\n    const isInteractive = Boolean(this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && touchRotate);\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n\n  updateTransition() {\n    this.transitionManager.updateTransition();\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        // @ts-expect-error\n        if (this._events[eventName] !== enabled) {\n          // @ts-expect-error\n          this._events[eventName] = enabled;\n          if (enabled) {\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  // Private Methods\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newControllerState, extraProps = {}, interactionState = {}) {\n    const viewState = {...newControllerState.getViewportProps(), ...extraProps};\n\n    // TODO - to restore diffing, we need to include interactionState\n    const changed = this.controllerState !== newControllerState;\n    // const oldViewState = this.controllerState.getViewportProps();\n    // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);\n\n    this._state = newControllerState.getState();\n    this._setInteractionState(interactionState);\n\n    if (changed) {\n      const oldViewState = this.controllerState ? this.controllerState.getViewportProps() : null;\n      if (this.onViewStateChange) {\n        // @ts-expect-error\n        this.onViewStateChange({viewState, interactionState: this._interactionState, oldViewState});\n      }\n    }\n  }\n\n  _onTransition(params) {\n    if (this.onViewStateChange) {\n      params.interactionState = this._interactionState;\n      // @ts-expect-error\n      this.onViewStateChange(params);\n    }\n  }\n\n  _setInteractionState(newStates) {\n    Object.assign(this._interactionState, newStates);\n    if (this.onStateChange) {\n      // @ts-expect-error\n      this.onStateChange(this._interactionState);\n    }\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton;\n    if (this.invertPan || this.dragMode === 'pan') {\n      // invertPan is replaced by props.dragMode, keeping for backward compatibility\n      alternateMode = !alternateMode;\n    }\n    // @ts-expect-error\n    const newControllerState = this.controllerState[alternateMode ? 'panStart' : 'rotateStart']({\n      pos\n    });\n    this._panMove = alternateMode;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` and `panend` event.\n  _onPan(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);\n  }\n\n  _onPanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMoveEnd(event) : this._onPanRotateEnd(event);\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    // @ts-expect-error\n    const newControllerState = this.controllerState.pan({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  _onPanMoveEnd(event) {\n    const {inertia} = this;\n    if (this.dragPan && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos = [\n        pos[0] + (event.velocityX * inertia) / 2,\n        pos[1] + (event.velocityY * inertia) / 2\n      ];\n      // @ts-expect-error\n      const newControllerState = this.controllerState.pan({pos: endPos}).panEnd();\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isPanning: true\n        }\n      );\n    } else {\n      // @ts-expect-error\n      const newControllerState = this.controllerState.panEnd();\n      // @ts-expect-error\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    // @ts-expect-error\n    const newControllerState = this.controllerState.rotate({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  _onPanRotateEnd(event) {\n    const {inertia} = this;\n    if (this.dragRotate && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos = [\n        pos[0] + (event.velocityX * inertia) / 2,\n        pos[1] + (event.velocityY * inertia) / 2\n      ];\n      // @ts-expect-error\n      const newControllerState = this.controllerState.rotate({pos: endPos}).rotateEnd();\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isRotating: true\n        }\n      );\n    } else {\n      // @ts-expect-error\n      const newControllerState = this.controllerState.rotateEnd();\n      // @ts-expect-error\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n    event.preventDefault();\n\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    // @ts-expect-error\n    const {speed = 0.01, smooth = false} = this.scrollZoom;\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newControllerState = this.controllerState.zoom({pos, scale});\n    this.updateViewport(\n      newControllerState,\n      {...this._getTransitionProps({around: pos}), transitionDuration: smooth ? 250 : 1},\n      {\n        isZooming: true,\n        isPanning: true\n      }\n    );\n    return true;\n  }\n\n  _onTriplePanStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    const newControllerState = this.controllerState.rotateStart({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  _onTriplePan(event) {\n    if (!this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    pos[0] -= event.deltaX;\n\n    const newControllerState = this.controllerState.rotate({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  _onTriplePanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {inertia} = this;\n    if (this.touchRotate && inertia && event.velocityY) {\n      const pos = this.getCenter(event);\n      const endPos = [pos[0], (pos[1] += (event.velocityY * inertia) / 2)];\n      const newControllerState = this.controllerState.rotate({pos: endPos});\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isRotating: true\n        }\n      );\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const newControllerState = this.controllerState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._startPinchRotation = event.rotation;\n    this._lastPinchEvent = event;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinchmove` and `pinchend` events.\n  _onPinch(event) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    let newControllerState = this.controllerState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newControllerState = newControllerState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      newControllerState = newControllerState.rotate({\n        deltaAngleX: this._startPinchRotation - rotation\n      });\n    }\n\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: this.touchZoom,\n      isZooming: this.touchZoom,\n      isRotating: this.touchRotate\n    });\n    this._lastPinchEvent = event;\n    return true;\n  }\n\n  _onPinchEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {inertia, _lastPinchEvent} = this;\n    if (this.touchZoom && inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n      const pos = this.getCenter(event);\n      let newControllerState = this.controllerState.rotateEnd();\n      const z = Math.log2(event.scale);\n      const velocityZ =\n        (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n      const endScale = Math.pow(2, z + (velocityZ * inertia) / 2);\n      newControllerState = newControllerState.zoom({pos, scale: endScale}).zoomEnd();\n\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps({around: pos}),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isPanning: this.touchZoom,\n          isZooming: this.touchZoom,\n          isRotating: false\n        }\n      );\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false,\n        isZooming: false,\n        isRotating: false\n      });\n    }\n    this._startPinchRotation = null;\n    this._lastPinchEvent = null;\n    return true;\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newControllerState = this.controllerState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(newControllerState, this._getTransitionProps({around: pos}), {\n      isZooming: true,\n      isPanning: true\n    });\n    this.blockEvents(100);\n    return true;\n  }\n\n  // Default handler for the `keydown` event\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {zoomSpeed, moveSpeed, rotateSpeedX, rotateSpeedY} = this.keyboard;\n    const {controllerState} = this;\n    let newControllerState;\n    const interactionState = {};\n\n    switch (event.srcEvent.code) {\n      case 'Minus':\n        newControllerState = funcKey\n          ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed)\n          : controllerState.zoomOut(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'Equal':\n        newControllerState = funcKey\n          ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed)\n          : controllerState.zoomIn(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'ArrowLeft':\n        if (funcKey) {\n          newControllerState = controllerState.rotateLeft(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveLeft(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowRight':\n        if (funcKey) {\n          newControllerState = controllerState.rotateRight(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveRight(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowUp':\n        if (funcKey) {\n          newControllerState = controllerState.rotateUp(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveUp(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowDown':\n        if (funcKey) {\n          newControllerState = controllerState.rotateDown(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveDown(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      default:\n        return false;\n    }\n    this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n    return true;\n  }\n\n  _getTransitionProps(opts?) {\n    const {_transition} = this;\n\n    if (!_transition) {\n      return NO_TRANSITION_PROPS;\n    }\n\n    // Enables Transitions on double-tap and key-down events.\n    return opts\n      ? {\n        ..._transition,\n        transitionInterpolator: new LinearInterpolator({\n          ...opts,\n          transitionProps: this.linearTransitionProps,\n          makeViewport: this.controllerState.makeViewport\n        })\n      }\n      : _transition;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}