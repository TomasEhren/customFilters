{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Texture2D, hasFeature, FEATURES, log } from '@luma.gl/webgl';\n\nvar GLTFMaterialParser = /*#__PURE__*/function () {\n  function GLTFMaterialParser(gl, _ref) {\n    var attributes = _ref.attributes,\n        material = _ref.material,\n        pbrDebug = _ref.pbrDebug,\n        imageBasedLightingEnvironment = _ref.imageBasedLightingEnvironment,\n        lights = _ref.lights,\n        useTangents = _ref.useTangents;\n\n    _classCallCheck(this, GLTFMaterialParser);\n\n    this.gl = gl;\n    this.defines = {\n      MANUAL_SRGB: 1,\n      SRGB_FAST_APPROXIMATION: 1\n    };\n\n    if (hasFeature(gl, FEATURES.GLSL_TEXTURE_LOD)) {\n      this.defines.USE_TEX_LOD = 1;\n    }\n\n    this.uniforms = {\n      u_Camera: [0, 0, 0],\n      u_MetallicRoughnessValues: [1, 1]\n    };\n    this.parameters = {};\n    this.generatedTextures = [];\n\n    if (imageBasedLightingEnvironment) {\n      this.uniforms.u_DiffuseEnvSampler = imageBasedLightingEnvironment.getDiffuseEnvSampler();\n      this.uniforms.u_SpecularEnvSampler = imageBasedLightingEnvironment.getSpecularEnvSampler();\n      this.uniforms.u_brdfLUT = imageBasedLightingEnvironment.getBrdfTexture();\n      this.uniforms.u_ScaleIBLAmbient = [1, 1];\n    }\n\n    if (pbrDebug) {\n      this.uniforms.u_ScaleDiffBaseMR = [0, 0, 0, 0];\n      this.uniforms.u_ScaleFGDSpec = [0, 0, 0, 0];\n    }\n\n    this.defineIfPresent(attributes.NORMAL, 'HAS_NORMALS');\n    this.defineIfPresent(attributes.TANGENT && useTangents, 'HAS_TANGENTS');\n    this.defineIfPresent(attributes.TEXCOORD_0, 'HAS_UV');\n    this.defineIfPresent(imageBasedLightingEnvironment, 'USE_IBL');\n    this.defineIfPresent(lights, 'USE_LIGHTS');\n    this.defineIfPresent(pbrDebug, 'PBR_DEBUG');\n\n    if (material) {\n      this.parseMaterial(material);\n    }\n  }\n\n  _createClass(GLTFMaterialParser, [{\n    key: \"defineIfPresent\",\n    value: function defineIfPresent(value, name) {\n      if (value) {\n        this.defines[name] = 1;\n      }\n    }\n  }, {\n    key: \"parseTexture\",\n    value: function parseTexture(gltfTexture, name) {\n      var define = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var parameters = gltfTexture.texture && gltfTexture.texture.sampler && gltfTexture.texture.sampler.parameters || {};\n      var image = gltfTexture.texture.source.image;\n      var textureOptions;\n      var specialTextureParameters = {};\n\n      if (image.compressed) {\n        textureOptions = image;\n        specialTextureParameters = _defineProperty({}, this.gl.TEXTURE_MIN_FILTER, image.data.length > 1 ? this.gl.LINEAR_MIPMAP_NEAREST : this.gl.LINEAR);\n      } else {\n        textureOptions = {\n          data: image\n        };\n      }\n\n      var texture = new Texture2D(this.gl, _objectSpread({\n        id: gltfTexture.name || gltfTexture.id,\n        parameters: _objectSpread(_objectSpread({}, parameters), specialTextureParameters),\n        pixelStore: _defineProperty({}, this.gl.UNPACK_FLIP_Y_WEBGL, false)\n      }, textureOptions));\n      this.uniforms[name] = texture;\n      this.defineIfPresent(define, define);\n      this.generatedTextures.push(texture);\n    }\n  }, {\n    key: \"parsePbrMetallicRoughness\",\n    value: function parsePbrMetallicRoughness(pbrMetallicRoughness) {\n      if (pbrMetallicRoughness.baseColorTexture) {\n        this.parseTexture(pbrMetallicRoughness.baseColorTexture, 'u_BaseColorSampler', 'HAS_BASECOLORMAP');\n      }\n\n      this.uniforms.u_BaseColorFactor = pbrMetallicRoughness.baseColorFactor || [1, 1, 1, 1];\n\n      if (pbrMetallicRoughness.metallicRoughnessTexture) {\n        this.parseTexture(pbrMetallicRoughness.metallicRoughnessTexture, 'u_MetallicRoughnessSampler', 'HAS_METALROUGHNESSMAP');\n      }\n\n      var _pbrMetallicRoughness = pbrMetallicRoughness.metallicFactor,\n          metallicFactor = _pbrMetallicRoughness === void 0 ? 1 : _pbrMetallicRoughness,\n          _pbrMetallicRoughness2 = pbrMetallicRoughness.roughnessFactor,\n          roughnessFactor = _pbrMetallicRoughness2 === void 0 ? 1 : _pbrMetallicRoughness2;\n      this.uniforms.u_MetallicRoughnessValues = [metallicFactor, roughnessFactor];\n    }\n  }, {\n    key: \"parseMaterial\",\n    value: function parseMaterial(material) {\n      this.uniforms.pbr_uUnlit = Boolean(material.unlit);\n\n      if (material.pbrMetallicRoughness) {\n        this.parsePbrMetallicRoughness(material.pbrMetallicRoughness);\n      }\n\n      if (material.normalTexture) {\n        this.parseTexture(material.normalTexture, 'u_NormalSampler', 'HAS_NORMALMAP');\n        var _material$normalTextu = material.normalTexture.scale,\n            scale = _material$normalTextu === void 0 ? 1 : _material$normalTextu;\n        this.uniforms.u_NormalScale = scale;\n      }\n\n      if (material.occlusionTexture) {\n        this.parseTexture(material.occlusionTexture, 'u_OcclusionSampler', 'HAS_OCCLUSIONMAP');\n        var _material$occlusionTe = material.occlusionTexture.strength,\n            strength = _material$occlusionTe === void 0 ? 1 : _material$occlusionTe;\n        this.uniforms.u_OcclusionStrength = strength;\n      }\n\n      if (material.emissiveTexture) {\n        this.parseTexture(material.emissiveTexture, 'u_EmissiveSampler', 'HAS_EMISSIVEMAP');\n        this.uniforms.u_EmissiveFactor = material.emissiveFactor || [0, 0, 0];\n      }\n\n      if (material.alphaMode === 'MASK') {\n        var _material$alphaCutoff = material.alphaCutoff,\n            alphaCutoff = _material$alphaCutoff === void 0 ? 0.5 : _material$alphaCutoff;\n        this.defines.ALPHA_CUTOFF = 1;\n        this.uniforms.u_AlphaCutoff = alphaCutoff;\n      } else if (material.alphaMode === 'BLEND') {\n        log.warn('BLEND alphaMode might not work well because it requires mesh sorting')();\n        Object.assign(this.parameters, {\n          blend: true,\n          blendEquation: this.gl.FUNC_ADD,\n          blendFunc: [this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA]\n        });\n      }\n    }\n  }]);\n\n  return GLTFMaterialParser;\n}();\n\nexport { GLTFMaterialParser as default };","map":{"version":3,"mappings":"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","names":["Texture2D","hasFeature","FEATURES","log","GLTFMaterialParser","constructor","gl","attributes","material","pbrDebug","imageBasedLightingEnvironment","lights","useTangents","defines","MANUAL_SRGB","SRGB_FAST_APPROXIMATION","GLSL_TEXTURE_LOD","USE_TEX_LOD","uniforms","u_Camera","u_MetallicRoughnessValues","parameters","generatedTextures","u_DiffuseEnvSampler","getDiffuseEnvSampler","u_SpecularEnvSampler","getSpecularEnvSampler","u_brdfLUT","getBrdfTexture","u_ScaleIBLAmbient","u_ScaleDiffBaseMR","u_ScaleFGDSpec","defineIfPresent","NORMAL","TANGENT","TEXCOORD_0","parseMaterial","value","name","parseTexture","gltfTexture","define","texture","sampler","image","source","textureOptions","specialTextureParameters","compressed","TEXTURE_MIN_FILTER","data","length","LINEAR_MIPMAP_NEAREST","LINEAR","id","pixelStore","UNPACK_FLIP_Y_WEBGL","push","parsePbrMetallicRoughness","pbrMetallicRoughness","baseColorTexture","u_BaseColorFactor","baseColorFactor","metallicRoughnessTexture","metallicFactor","roughnessFactor","pbr_uUnlit","Boolean","unlit","normalTexture","scale","u_NormalScale","occlusionTexture","strength","u_OcclusionStrength","emissiveTexture","u_EmissiveFactor","emissiveFactor","alphaMode","alphaCutoff","ALPHA_CUTOFF","u_AlphaCutoff","warn","Object","assign","blend","blendEquation","FUNC_ADD","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","ONE"],"sources":["../../../src/gltf/gltf-material-parser.js"],"sourcesContent":["import {Texture2D, hasFeature, FEATURES, log} from '@luma.gl/webgl';\n\nexport default class GLTFMaterialParser {\n  constructor(\n    gl,\n    {attributes, material, pbrDebug, imageBasedLightingEnvironment, lights, useTangents}\n  ) {\n    this.gl = gl;\n\n    this.defines = {\n      // TODO: Use EXT_sRGB if available (Standard in WebGL 2.0)\n      MANUAL_SRGB: 1,\n      SRGB_FAST_APPROXIMATION: 1\n    };\n\n    if (hasFeature(gl, FEATURES.GLSL_TEXTURE_LOD)) {\n      this.defines.USE_TEX_LOD = 1;\n    }\n\n    this.uniforms = {\n      // TODO: find better values?\n      u_Camera: [0, 0, 0], // Model should override\n\n      u_MetallicRoughnessValues: [1, 1] // Default is 1 and 1\n    };\n\n    this.parameters = {};\n    this.generatedTextures = [];\n\n    if (imageBasedLightingEnvironment) {\n      this.uniforms.u_DiffuseEnvSampler = imageBasedLightingEnvironment.getDiffuseEnvSampler();\n      this.uniforms.u_SpecularEnvSampler = imageBasedLightingEnvironment.getSpecularEnvSampler();\n      this.uniforms.u_brdfLUT = imageBasedLightingEnvironment.getBrdfTexture();\n      this.uniforms.u_ScaleIBLAmbient = [1, 1];\n    }\n\n    if (pbrDebug) {\n      // Override final color for reference app visualization\n      // of various parameters in the lighting equation.\n      this.uniforms.u_ScaleDiffBaseMR = [0, 0, 0, 0];\n      this.uniforms.u_ScaleFGDSpec = [0, 0, 0, 0];\n    }\n\n    this.defineIfPresent(attributes.NORMAL, 'HAS_NORMALS');\n    this.defineIfPresent(attributes.TANGENT && useTangents, 'HAS_TANGENTS');\n    this.defineIfPresent(attributes.TEXCOORD_0, 'HAS_UV');\n\n    this.defineIfPresent(imageBasedLightingEnvironment, 'USE_IBL');\n    this.defineIfPresent(lights, 'USE_LIGHTS');\n    this.defineIfPresent(pbrDebug, 'PBR_DEBUG');\n\n    if (material) {\n      this.parseMaterial(material);\n    }\n  }\n\n  defineIfPresent(value, name) {\n    if (value) {\n      this.defines[name] = 1;\n    }\n  }\n\n  parseTexture(gltfTexture, name, define = null) {\n    const parameters =\n      (gltfTexture.texture &&\n        gltfTexture.texture.sampler &&\n        gltfTexture.texture.sampler.parameters) ||\n      {};\n\n    const image = gltfTexture.texture.source.image;\n    let textureOptions;\n    let specialTextureParameters = {};\n    if (image.compressed) {\n      textureOptions = image;\n      specialTextureParameters = {\n        [this.gl.TEXTURE_MIN_FILTER]:\n          image.data.length > 1 ? this.gl.LINEAR_MIPMAP_NEAREST : this.gl.LINEAR\n      };\n    } else {\n      // Texture2D accepts a promise that returns an image as data (Async Textures)\n      textureOptions = {data: image};\n    }\n\n    const texture = new Texture2D(this.gl, {\n      id: gltfTexture.name || gltfTexture.id,\n      parameters: {\n        ...parameters,\n        ...specialTextureParameters\n      },\n      pixelStore: {\n        [this.gl.UNPACK_FLIP_Y_WEBGL]: false\n      },\n      ...textureOptions\n    });\n    this.uniforms[name] = texture;\n    this.defineIfPresent(define, define);\n    this.generatedTextures.push(texture);\n  }\n\n  parsePbrMetallicRoughness(pbrMetallicRoughness) {\n    if (pbrMetallicRoughness.baseColorTexture) {\n      this.parseTexture(\n        pbrMetallicRoughness.baseColorTexture,\n        'u_BaseColorSampler',\n        'HAS_BASECOLORMAP'\n      );\n    }\n    this.uniforms.u_BaseColorFactor = pbrMetallicRoughness.baseColorFactor || [1, 1, 1, 1];\n\n    if (pbrMetallicRoughness.metallicRoughnessTexture) {\n      this.parseTexture(\n        pbrMetallicRoughness.metallicRoughnessTexture,\n        'u_MetallicRoughnessSampler',\n        'HAS_METALROUGHNESSMAP'\n      );\n    }\n    const {metallicFactor = 1, roughnessFactor = 1} = pbrMetallicRoughness;\n    this.uniforms.u_MetallicRoughnessValues = [metallicFactor, roughnessFactor];\n  }\n\n  parseMaterial(material) {\n    this.uniforms.pbr_uUnlit = Boolean(material.unlit);\n\n    if (material.pbrMetallicRoughness) {\n      this.parsePbrMetallicRoughness(material.pbrMetallicRoughness);\n    }\n    if (material.normalTexture) {\n      this.parseTexture(material.normalTexture, 'u_NormalSampler', 'HAS_NORMALMAP');\n\n      const {scale = 1} = material.normalTexture;\n      this.uniforms.u_NormalScale = scale;\n    }\n    if (material.occlusionTexture) {\n      this.parseTexture(material.occlusionTexture, 'u_OcclusionSampler', 'HAS_OCCLUSIONMAP');\n\n      const {strength = 1} = material.occlusionTexture;\n      this.uniforms.u_OcclusionStrength = strength;\n    }\n    if (material.emissiveTexture) {\n      this.parseTexture(material.emissiveTexture, 'u_EmissiveSampler', 'HAS_EMISSIVEMAP');\n      this.uniforms.u_EmissiveFactor = material.emissiveFactor || [0, 0, 0];\n    }\n    if (material.alphaMode === 'MASK') {\n      const {alphaCutoff = 0.5} = material;\n      this.defines.ALPHA_CUTOFF = 1;\n      this.uniforms.u_AlphaCutoff = alphaCutoff;\n    } else if (material.alphaMode === 'BLEND') {\n      log.warn('BLEND alphaMode might not work well because it requires mesh sorting')();\n      Object.assign(this.parameters, {\n        blend: true,\n        blendEquation: this.gl.FUNC_ADD,\n        blendFunc: [\n          this.gl.SRC_ALPHA,\n          this.gl.ONE_MINUS_SRC_ALPHA,\n          this.gl.ONE,\n          this.gl.ONE_MINUS_SRC_ALPHA\n        ]\n      });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}