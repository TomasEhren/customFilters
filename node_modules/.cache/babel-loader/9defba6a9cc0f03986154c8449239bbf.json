{"ast":null,"code":"import _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport MathArray from './base/math-array';\nimport { clamp } from '../lib/common';\nimport { checkNumber } from '../lib/validators';\nimport Quaternion from './quaternion';\nvar ERR_UNKNOWN_ORDER = 'Unknown Euler angle order';\nvar ALMOST_ONE = 0.99999;\n\nfunction validateOrder(value) {\n  return value >= 0 && value < 6;\n}\n\nfunction checkOrder(value) {\n  if (value < 0 && value >= 6) {\n    throw new Error(ERR_UNKNOWN_ORDER);\n  }\n\n  return value;\n}\n\nvar Euler = /*#__PURE__*/function (_MathArray) {\n  _inherits(Euler, _MathArray);\n\n  var _super = _createSuper(Euler);\n\n  function Euler() {\n    var _this;\n\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Euler.DefaultOrder;\n\n    _classCallCheck(this, Euler);\n\n    _this = _super.call(this, -0, -0, -0, -0);\n\n    if (arguments.length > 0 && Array.isArray(arguments[0])) {\n      var _this2;\n\n      (_this2 = _this).fromVector3.apply(_this2, arguments);\n    } else {\n      _this.set(x, y, z, order);\n    }\n\n    return _this;\n  }\n\n  _createClass(Euler, [{\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 4;\n    }\n  }, {\n    key: \"fromQuaternion\",\n    value: function fromQuaternion(quaternion) {\n      var _quaternion = _slicedToArray(quaternion, 4),\n          x = _quaternion[0],\n          y = _quaternion[1],\n          z = _quaternion[2],\n          w = _quaternion[3];\n\n      var ysqr = y * y;\n      var t0 = -2.0 * (ysqr + z * z) + 1.0;\n      var t1 = +2.0 * (x * y + w * z);\n      var t2 = -2.0 * (x * z - w * y);\n      var t3 = +2.0 * (y * z + w * x);\n      var t4 = -2.0 * (x * x + ysqr) + 1.0;\n      t2 = t2 > 1.0 ? 1.0 : t2;\n      t2 = t2 < -1.0 ? -1.0 : t2;\n      var roll = Math.atan2(t3, t4);\n      var pitch = Math.asin(t2);\n      var yaw = Math.atan2(t1, t0);\n      return new Euler(roll, pitch, yaw, Euler.RollPitchYaw);\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(array) {\n      this[0] = array[0];\n      this[1] = array[1];\n      this[2] = array[2];\n      this[3] = Number.isFinite(array[3]) || this.order;\n      return this.check();\n    }\n  }, {\n    key: \"set\",\n    value: function set() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var order = arguments.length > 3 ? arguments[3] : undefined;\n      this[0] = x;\n      this[1] = y;\n      this[2] = z;\n      this[3] = Number.isFinite(order) ? order : this[3];\n      return this.check();\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      return validateOrder(this[3]) && Number.isFinite(this[0]) && Number.isFinite(this[1]) && Number.isFinite(this[2]);\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      array[offset] = this[0];\n      array[offset + 1] = this[1];\n      array[offset + 2] = this[2];\n      return array;\n    }\n  }, {\n    key: \"toArray4\",\n    value: function toArray4() {\n      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      array[offset] = this[0];\n      array[offset + 1] = this[1];\n      array[offset + 2] = this[2];\n      array[offset + 3] = this[3];\n      return array;\n    }\n  }, {\n    key: \"toVector3\",\n    value: function toVector3() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0];\n      result[0] = this[0];\n      result[1] = this[1];\n      result[2] = this[2];\n      return result;\n    }\n  }, {\n    key: \"x\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      this[1] = checkNumber(value);\n    }\n  }, {\n    key: \"z\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      this[2] = checkNumber(value);\n    }\n  }, {\n    key: \"alpha\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"beta\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      this[1] = checkNumber(value);\n    }\n  }, {\n    key: \"gamma\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      this[2] = checkNumber(value);\n    }\n  }, {\n    key: \"phi\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"theta\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      this[1] = checkNumber(value);\n    }\n  }, {\n    key: \"psi\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      this[2] = checkNumber(value);\n    }\n  }, {\n    key: \"roll\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"pitch\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      this[1] = checkNumber(value);\n    }\n  }, {\n    key: \"yaw\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      this[2] = checkNumber(value);\n    }\n  }, {\n    key: \"order\",\n    get: function get() {\n      return this[3];\n    },\n    set: function set(value) {\n      this[3] = checkOrder(value);\n    }\n  }, {\n    key: \"fromVector3\",\n    value: function fromVector3(v, order) {\n      return this.set(v[0], v[1], v[2], Number.isFinite(order) ? order : this[3]);\n    }\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(array) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this[0] = array[0 + offset];\n      this[1] = array[1 + offset];\n      this[2] = array[2 + offset];\n\n      if (array[3] !== undefined) {\n        this[3] = array[3];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"fromRollPitchYaw\",\n    value: function fromRollPitchYaw(roll, pitch, yaw) {\n      return this.set(roll, pitch, yaw, Euler.ZYX);\n    }\n  }, {\n    key: \"fromRotationMatrix\",\n    value: function fromRotationMatrix(m) {\n      var order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Euler.DefaultOrder;\n\n      this._fromRotationMatrix(m, order);\n\n      return this.check();\n    }\n  }, {\n    key: \"getRotationMatrix\",\n    value: function getRotationMatrix(m) {\n      return this._getRotationMatrix(m);\n    }\n  }, {\n    key: \"getQuaternion\",\n    value: function getQuaternion() {\n      var q = new Quaternion();\n\n      switch (this[3]) {\n        case Euler.XYZ:\n          return q.rotateX(this[0]).rotateY(this[1]).rotateZ(this[2]);\n\n        case Euler.YXZ:\n          return q.rotateY(this[0]).rotateX(this[1]).rotateZ(this[2]);\n\n        case Euler.ZXY:\n          return q.rotateZ(this[0]).rotateX(this[1]).rotateY(this[2]);\n\n        case Euler.ZYX:\n          return q.rotateZ(this[0]).rotateY(this[1]).rotateX(this[2]);\n\n        case Euler.YZX:\n          return q.rotateY(this[0]).rotateZ(this[1]).rotateX(this[2]);\n\n        case Euler.XZY:\n          return q.rotateX(this[0]).rotateZ(this[1]).rotateY(this[2]);\n\n        default:\n          throw new Error(ERR_UNKNOWN_ORDER);\n      }\n    }\n  }, {\n    key: \"_fromRotationMatrix\",\n    value: function _fromRotationMatrix(m) {\n      var order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Euler.DefaultOrder;\n      var te = m.elements;\n      var m11 = te[0],\n          m12 = te[4],\n          m13 = te[8];\n      var m21 = te[1],\n          m22 = te[5],\n          m23 = te[9];\n      var m31 = te[2],\n          m32 = te[6],\n          m33 = te[10];\n      order = order || this[3];\n\n      switch (order) {\n        case Euler.XYZ:\n          this[1] = Math.asin(clamp(m13, -1, 1));\n\n          if (Math.abs(m13) < ALMOST_ONE) {\n            this[0] = Math.atan2(-m23, m33);\n            this[2] = Math.atan2(-m12, m11);\n          } else {\n            this[0] = Math.atan2(m32, m22);\n            this[2] = 0;\n          }\n\n          break;\n\n        case Euler.YXZ:\n          this[0] = Math.asin(-clamp(m23, -1, 1));\n\n          if (Math.abs(m23) < ALMOST_ONE) {\n            this[1] = Math.atan2(m13, m33);\n            this[2] = Math.atan2(m21, m22);\n          } else {\n            this[1] = Math.atan2(-m31, m11);\n            this[2] = 0;\n          }\n\n          break;\n\n        case Euler.ZXY:\n          this[0] = Math.asin(clamp(m32, -1, 1));\n\n          if (Math.abs(m32) < ALMOST_ONE) {\n            this[1] = Math.atan2(-m31, m33);\n            this[2] = Math.atan2(-m12, m22);\n          } else {\n            this[1] = 0;\n            this[2] = Math.atan2(m21, m11);\n          }\n\n          break;\n\n        case Euler.ZYX:\n          this[1] = Math.asin(-clamp(m31, -1, 1));\n\n          if (Math.abs(m31) < ALMOST_ONE) {\n            this[0] = Math.atan2(m32, m33);\n            this[2] = Math.atan2(m21, m11);\n          } else {\n            this[0] = 0;\n            this[2] = Math.atan2(-m12, m22);\n          }\n\n          break;\n\n        case Euler.YZX:\n          this[2] = Math.asin(clamp(m21, -1, 1));\n\n          if (Math.abs(m21) < ALMOST_ONE) {\n            this[0] = Math.atan2(-m23, m22);\n            this[1] = Math.atan2(-m31, m11);\n          } else {\n            this[0] = 0;\n            this[1] = Math.atan2(m13, m33);\n          }\n\n          break;\n\n        case Euler.XZY:\n          this[2] = Math.asin(-clamp(m12, -1, 1));\n\n          if (Math.abs(m12) < ALMOST_ONE) {\n            this[0] = Math.atan2(m32, m22);\n            this[1] = Math.atan2(m13, m11);\n          } else {\n            this[0] = Math.atan2(-m23, m33);\n            this[1] = 0;\n          }\n\n          break;\n\n        default:\n          throw new Error(ERR_UNKNOWN_ORDER);\n      }\n\n      this[3] = order;\n      return this;\n    }\n  }, {\n    key: \"_getRotationMatrix\",\n    value: function _getRotationMatrix(result) {\n      var te = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n      var x = this.x,\n          y = this.y,\n          z = this.z;\n      var a = Math.cos(x);\n      var c = Math.cos(y);\n      var e = Math.cos(z);\n      var b = Math.sin(x);\n      var d = Math.sin(y);\n      var f = Math.sin(z);\n\n      switch (this[3]) {\n        case Euler.XYZ:\n          {\n            var ae = a * e,\n                af = a * f,\n                be = b * e,\n                bf = b * f;\n            te[0] = c * e;\n            te[4] = -c * f;\n            te[8] = d;\n            te[1] = af + be * d;\n            te[5] = ae - bf * d;\n            te[9] = -b * c;\n            te[2] = bf - ae * d;\n            te[6] = be + af * d;\n            te[10] = a * c;\n            break;\n          }\n\n        case Euler.YXZ:\n          {\n            var ce = c * e,\n                cf = c * f,\n                de = d * e,\n                df = d * f;\n            te[0] = ce + df * b;\n            te[4] = de * b - cf;\n            te[8] = a * d;\n            te[1] = a * f;\n            te[5] = a * e;\n            te[9] = -b;\n            te[2] = cf * b - de;\n            te[6] = df + ce * b;\n            te[10] = a * c;\n            break;\n          }\n\n        case Euler.ZXY:\n          {\n            var _ce = c * e,\n                _cf = c * f,\n                _de = d * e,\n                _df = d * f;\n\n            te[0] = _ce - _df * b;\n            te[4] = -a * f;\n            te[8] = _de + _cf * b;\n            te[1] = _cf + _de * b;\n            te[5] = a * e;\n            te[9] = _df - _ce * b;\n            te[2] = -a * d;\n            te[6] = b;\n            te[10] = a * c;\n            break;\n          }\n\n        case Euler.ZYX:\n          {\n            var _ae = a * e,\n                _af = a * f,\n                _be = b * e,\n                _bf = b * f;\n\n            te[0] = c * e;\n            te[4] = _be * d - _af;\n            te[8] = _ae * d + _bf;\n            te[1] = c * f;\n            te[5] = _bf * d + _ae;\n            te[9] = _af * d - _be;\n            te[2] = -d;\n            te[6] = b * c;\n            te[10] = a * c;\n            break;\n          }\n\n        case Euler.YZX:\n          {\n            var ac = a * c,\n                ad = a * d,\n                bc = b * c,\n                bd = b * d;\n            te[0] = c * e;\n            te[4] = bd - ac * f;\n            te[8] = bc * f + ad;\n            te[1] = f;\n            te[5] = a * e;\n            te[9] = -b * e;\n            te[2] = -d * e;\n            te[6] = ad * f + bc;\n            te[10] = ac - bd * f;\n            break;\n          }\n\n        case Euler.XZY:\n          {\n            var _ac = a * c,\n                _ad = a * d,\n                _bc = b * c,\n                _bd = b * d;\n\n            te[0] = c * e;\n            te[4] = -f;\n            te[8] = d * e;\n            te[1] = _ac * f + _bd;\n            te[5] = a * e;\n            te[9] = _ad * f - _bc;\n            te[2] = _bc * f - _ad;\n            te[6] = b * e;\n            te[10] = _bd * f + _ac;\n            break;\n          }\n\n        default:\n          throw new Error(ERR_UNKNOWN_ORDER);\n      }\n\n      te[3] = 0;\n      te[7] = 0;\n      te[11] = 0;\n      te[12] = 0;\n      te[13] = 0;\n      te[14] = 0;\n      te[15] = 1;\n      return te;\n    }\n  }, {\n    key: \"toQuaternion\",\n    value: function toQuaternion() {\n      var cy = Math.cos(this.yaw * 0.5);\n      var sy = Math.sin(this.yaw * 0.5);\n      var cr = Math.cos(this.roll * 0.5);\n      var sr = Math.sin(this.roll * 0.5);\n      var cp = Math.cos(this.pitch * 0.5);\n      var sp = Math.sin(this.pitch * 0.5);\n      var w = cy * cr * cp + sy * sr * sp;\n      var x = cy * sr * cp - sy * cr * sp;\n      var y = cy * cr * sp + sy * sr * cp;\n      var z = sy * cr * cp - cy * sr * sp;\n      return new Quaternion(x, y, z, w);\n    }\n  }], [{\n    key: \"ZYX\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"YXZ\",\n    get: function get() {\n      return 1;\n    }\n  }, {\n    key: \"XZY\",\n    get: function get() {\n      return 2;\n    }\n  }, {\n    key: \"ZXY\",\n    get: function get() {\n      return 3;\n    }\n  }, {\n    key: \"YZX\",\n    get: function get() {\n      return 4;\n    }\n  }, {\n    key: \"XYZ\",\n    get: function get() {\n      return 5;\n    }\n  }, {\n    key: \"RollPitchYaw\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"DefaultOrder\",\n    get: function get() {\n      return Euler.ZYX;\n    }\n  }, {\n    key: \"RotationOrders\",\n    get: function get() {\n      return ['ZYX', 'YXZ', 'XZY', 'ZXY', 'YZX', 'XYZ'];\n    }\n  }, {\n    key: \"rotationOrder\",\n    value: function rotationOrder(order) {\n      return Euler.RotationOrders[order];\n    }\n  }]);\n\n  return Euler;\n}(MathArray);\n\nexport { Euler as default };","map":{"version":3,"mappings":"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","names":["MathArray","clamp","checkNumber","Quaternion","ERR_UNKNOWN_ORDER","ALMOST_ONE","validateOrder","value","checkOrder","Error","Euler","constructor","x","y","z","order","DefaultOrder","arguments","length","Array","isArray","fromVector3","set","fromQuaternion","quaternion","w","ysqr","t0","t1","t2","t3","t4","roll","Math","atan2","pitch","asin","yaw","RollPitchYaw","copy","array","Number","isFinite","check","validate","toArray","offset","toArray4","toVector3","result","v","fromArray","undefined","fromRollPitchYaw","ZYX","fromRotationMatrix","m","_fromRotationMatrix","getRotationMatrix","_getRotationMatrix","getQuaternion","q","XYZ","rotateX","rotateY","rotateZ","YXZ","ZXY","YZX","XZY","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","abs","a","cos","c","e","b","sin","d","f","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","toQuaternion","cy","sy","cr","sr","cp","sp","RotationOrders"],"sources":["../../../src/classes/euler.js"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport MathArray from './base/math-array';\nimport {clamp} from '../lib/common';\nimport {checkNumber} from '../lib/validators';\nimport Quaternion from './quaternion';\n\n// Internal constants\nconst ERR_UNKNOWN_ORDER = 'Unknown Euler angle order';\nconst ALMOST_ONE = 0.99999;\n\nfunction validateOrder(value) {\n  return value >= 0 && value < 6;\n}\n\nfunction checkOrder(value) {\n  if (value < 0 && value >= 6) {\n    throw new Error(ERR_UNKNOWN_ORDER);\n  }\n  return value;\n}\n\nexport default class Euler extends MathArray {\n  // static XYZ = 0;\n  // static YZX = 1;\n  // static ZXY = 2;\n  // static XZY = 3;\n  // static YXZ = 4;\n  // static ZYX = 5;\n  // static RollPitchYaw = 0;\n  // static DefaultOrder = 0;\n\n  // Constants\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  static get ZYX() {\n    return 0;\n  }\n\n  static get YXZ() {\n    return 1;\n  }\n\n  static get XZY() {\n    return 2;\n  }\n\n  static get ZXY() {\n    return 3;\n  }\n\n  static get YZX() {\n    return 4;\n  }\n\n  static get XYZ() {\n    return 5;\n  }\n\n  static get RollPitchYaw() {\n    return 0;\n  }\n\n  static get DefaultOrder() {\n    return Euler.ZYX;\n  }\n\n  static get RotationOrders() {\n    return ['ZYX', 'YXZ', 'XZY', 'ZXY', 'YZX', 'XYZ'];\n  }\n\n  static rotationOrder(order) {\n    return Euler.RotationOrders[order];\n  }\n\n  get ELEMENTS() {\n    return 4;\n  }\n\n  /* eslint-enable no-multi-spaces, brace-style, no-return-assign */\n\n  /**\n   * @class\n   * @param {Number | Number[]} x\n   * @param {Number=} [y]\n   * @param {Number=} [z]\n   * @param {Number=} [order]\n   */\n  constructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0);\n    // eslint-disable-next-line prefer-rest-params\n    if (arguments.length > 0 && Array.isArray(arguments[0])) {\n      // eslint-disable-next-line prefer-rest-params\n      this.fromVector3(...arguments);\n    } else {\n      // @ts-ignore error TS2345: Argument of type 'number | [number, number, number, number]' not assignable to 'number'\n      this.set(x, y, z, order);\n    }\n  }\n\n  fromQuaternion(quaternion) {\n    const [x, y, z, w] = quaternion;\n    const ysqr = y * y;\n    const t0 = -2.0 * (ysqr + z * z) + 1.0;\n    const t1 = +2.0 * (x * y + w * z);\n    let t2 = -2.0 * (x * z - w * y);\n    const t3 = +2.0 * (y * z + w * x);\n    const t4 = -2.0 * (x * x + ysqr) + 1.0;\n\n    t2 = t2 > 1.0 ? 1.0 : t2;\n    t2 = t2 < -1.0 ? -1.0 : t2;\n\n    const roll = Math.atan2(t3, t4);\n    const pitch = Math.asin(t2);\n    const yaw = Math.atan2(t1, t0);\n\n    return new Euler(roll, pitch, yaw, Euler.RollPitchYaw);\n  }\n\n  // fromQuaternion(q, order) {\n  //   this._fromRotationMat[-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n  //   return this.check();\n  // }\n\n  // If copied array does contain fourth element, preserves currently set order\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = Number.isFinite(array[3]) || this.order;\n    return this.check();\n  }\n\n  // Sets the three angles, and optionally sets the rotation order\n  // If order is not specified, preserves currently set order\n  set(x = 0, y = 0, z = 0, order) {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = Number.isFinite(order) ? order : this[3];\n    return this.check();\n  }\n\n  validate() {\n    return (\n      validateOrder(this[3]) &&\n      Number.isFinite(this[0]) &&\n      Number.isFinite(this[1]) &&\n      Number.isFinite(this[2])\n    );\n  }\n\n  // Does not copy the orientation element\n  toArray(array = [], offset = 0) {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    return array;\n  }\n\n  // Copies the orientation element\n  toArray4(array = [], offset = 0) {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    array[offset + 3] = this[3];\n    return array;\n  }\n\n  toVector3(result = [-0, -0, -0]) {\n    result[0] = this[0];\n    result[1] = this[1];\n    result[2] = this[2];\n    return result;\n  }\n\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n\n  // x, y, z angle notation (note: only corresponds to axis in XYZ orientation)\n  /** @type {number} */\n  get x() {\n    return this[0];\n  }\n\n  set x(value) {\n    this[0] = checkNumber(value);\n  }\n\n  /** @type {number} */\n  get y() {\n    return this[1];\n  }\n\n  set y(value) {\n    this[1] = checkNumber(value);\n  }\n\n  /** @type {number} */\n  get z() {\n    return this[2];\n  }\n\n  set z(value) {\n    this[2] = checkNumber(value);\n  }\n\n  // alpha, beta, gamma angle notation\n  get alpha() {\n    return this[0];\n  }\n\n  set alpha(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get beta() {\n    return this[1];\n  }\n\n  set beta(value) {\n    this[1] = checkNumber(value);\n  }\n\n  get gamma() {\n    return this[2];\n  }\n\n  set gamma(value) {\n    this[2] = checkNumber(value);\n  }\n\n  // phi, theta, psi angle notation\n  get phi() {\n    return this[0];\n  }\n\n  set phi(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get theta() {\n    return this[1];\n  }\n\n  set theta(value) {\n    this[1] = checkNumber(value);\n  }\n\n  get psi() {\n    return this[2];\n  }\n\n  set psi(value) {\n    this[2] = checkNumber(value);\n  }\n\n  // roll, pitch, yaw angle notation\n  /** @type {number} */\n  get roll() {\n    return this[0];\n  }\n\n  set roll(value) {\n    this[0] = checkNumber(value);\n  }\n\n  /** @type {number} */\n  get pitch() {\n    return this[1];\n  }\n\n  set pitch(value) {\n    this[1] = checkNumber(value);\n  }\n\n  /** @type {number} */\n  get yaw() {\n    return this[2];\n  }\n\n  set yaw(value) {\n    this[2] = checkNumber(value);\n  }\n\n  // rotation order, in all three angle notations\n  get order() {\n    return this[3];\n  }\n\n  set order(value) {\n    this[3] = checkOrder(value);\n  }\n\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n\n  // Constructors\n  fromVector3(v, order) {\n    return this.set(v[0], v[1], v[2], Number.isFinite(order) ? order : this[3]);\n  }\n\n  // TODO - with and without 4th element\n  fromArray(array, offset = 0) {\n    this[0] = array[0 + offset];\n    this[1] = array[1 + offset];\n    this[2] = array[2 + offset];\n    if (array[3] !== undefined) {\n      this[3] = array[3];\n    }\n    return this.check();\n  }\n\n  // Common ZYX rotation order\n  fromRollPitchYaw(roll, pitch, yaw) {\n    return this.set(roll, pitch, yaw, Euler.ZYX);\n  }\n\n  fromRotationMatrix(m, order = Euler.DefaultOrder) {\n    this._fromRotationMatrix(m, order);\n    return this.check();\n  }\n\n  // ACCESSORS\n\n  getRotationMatrix(m) {\n    return this._getRotationMatrix(m);\n  }\n\n  // TODO - move to Quaternion\n  getQuaternion() {\n    const q = new Quaternion();\n    switch (this[3]) {\n      case Euler.XYZ:\n        return q.rotateX(this[0]).rotateY(this[1]).rotateZ(this[2]);\n      case Euler.YXZ:\n        return q.rotateY(this[0]).rotateX(this[1]).rotateZ(this[2]);\n      case Euler.ZXY:\n        return q.rotateZ(this[0]).rotateX(this[1]).rotateY(this[2]);\n      case Euler.ZYX:\n        return q.rotateZ(this[0]).rotateY(this[1]).rotateX(this[2]);\n      case Euler.YZX:\n        return q.rotateY(this[0]).rotateZ(this[1]).rotateX(this[2]);\n      case Euler.XZY:\n        return q.rotateX(this[0]).rotateZ(this[1]).rotateY(this[2]);\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n  }\n\n  // INTERNAL METHODS\n\n  // Concersion from Euler to rotation matrix and from matrix to Euler\n  // Adapted from three.js under MIT license\n\n  // // WARNING: this discards revolution information -bhouston\n  // reorder(newOrder) {\n  //   const q = new Quaternion().setFromEuler(this);\n  //   return this.setFromQuaternion(q, newOrder);\n\n  /* eslint-disable complexity, max-statements, one-var */\n  _fromRotationMatrix(m, order = Euler.DefaultOrder) {\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    const te = m.elements;\n    const m11 = te[0],\n      m12 = te[4],\n      m13 = te[8];\n    const m21 = te[1],\n      m22 = te[5],\n      m23 = te[9];\n    const m31 = te[2],\n      m32 = te[6],\n      m33 = te[10];\n\n    order = order || this[3];\n\n    switch (order) {\n      case Euler.XYZ:\n        this[1] = Math.asin(clamp(m13, -1, 1));\n\n        if (Math.abs(m13) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m33);\n          this[2] = Math.atan2(-m12, m11);\n        } else {\n          this[0] = Math.atan2(m32, m22);\n          this[2] = 0;\n        }\n        break;\n\n      case Euler.YXZ:\n        this[0] = Math.asin(-clamp(m23, -1, 1));\n\n        if (Math.abs(m23) < ALMOST_ONE) {\n          this[1] = Math.atan2(m13, m33);\n          this[2] = Math.atan2(m21, m22);\n        } else {\n          this[1] = Math.atan2(-m31, m11);\n          this[2] = 0;\n        }\n        break;\n\n      case Euler.ZXY:\n        this[0] = Math.asin(clamp(m32, -1, 1));\n\n        if (Math.abs(m32) < ALMOST_ONE) {\n          this[1] = Math.atan2(-m31, m33);\n          this[2] = Math.atan2(-m12, m22);\n        } else {\n          this[1] = 0;\n          this[2] = Math.atan2(m21, m11);\n        }\n        break;\n\n      case Euler.ZYX:\n        this[1] = Math.asin(-clamp(m31, -1, 1));\n\n        if (Math.abs(m31) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m33);\n          this[2] = Math.atan2(m21, m11);\n        } else {\n          this[0] = 0;\n          this[2] = Math.atan2(-m12, m22);\n        }\n        break;\n\n      case Euler.YZX:\n        this[2] = Math.asin(clamp(m21, -1, 1));\n\n        if (Math.abs(m21) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m22);\n          this[1] = Math.atan2(-m31, m11);\n        } else {\n          this[0] = 0;\n          this[1] = Math.atan2(m13, m33);\n        }\n        break;\n\n      case Euler.XZY:\n        this[2] = Math.asin(-clamp(m12, -1, 1));\n\n        if (Math.abs(m12) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m22);\n          this[1] = Math.atan2(m13, m11);\n        } else {\n          this[0] = Math.atan2(-m23, m33);\n          this[1] = 0;\n        }\n        break;\n\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n\n    this[3] = order;\n\n    return this;\n  }\n\n  _getRotationMatrix(result) {\n    const te = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const a = Math.cos(x);\n    const c = Math.cos(y);\n    const e = Math.cos(z);\n    const b = Math.sin(x);\n    const d = Math.sin(y);\n    const f = Math.sin(z);\n\n    switch (this[3]) {\n      case Euler.XYZ: {\n        const ae = a * e,\n          af = a * f,\n          be = b * e,\n          bf = b * f;\n\n        te[0] = c * e;\n        te[4] = -c * f;\n        te[8] = d;\n\n        te[1] = af + be * d;\n        te[5] = ae - bf * d;\n        te[9] = -b * c;\n\n        te[2] = bf - ae * d;\n        te[6] = be + af * d;\n        te[10] = a * c;\n        break;\n      }\n\n      case Euler.YXZ: {\n        const ce = c * e,\n          cf = c * f,\n          de = d * e,\n          df = d * f;\n\n        te[0] = ce + df * b;\n        te[4] = de * b - cf;\n        te[8] = a * d;\n\n        te[1] = a * f;\n        te[5] = a * e;\n        te[9] = -b;\n\n        te[2] = cf * b - de;\n        te[6] = df + ce * b;\n        te[10] = a * c;\n        break;\n      }\n\n      case Euler.ZXY: {\n        const ce = c * e,\n          cf = c * f,\n          de = d * e,\n          df = d * f;\n\n        te[0] = ce - df * b;\n        te[4] = -a * f;\n        te[8] = de + cf * b;\n\n        te[1] = cf + de * b;\n        te[5] = a * e;\n        te[9] = df - ce * b;\n\n        te[2] = -a * d;\n        te[6] = b;\n        te[10] = a * c;\n        break;\n      }\n\n      case Euler.ZYX: {\n        const ae = a * e,\n          af = a * f,\n          be = b * e,\n          bf = b * f;\n\n        te[0] = c * e;\n        te[4] = be * d - af;\n        te[8] = ae * d + bf;\n\n        te[1] = c * f;\n        te[5] = bf * d + ae;\n        te[9] = af * d - be;\n\n        te[2] = -d;\n        te[6] = b * c;\n        te[10] = a * c;\n        break;\n      }\n\n      case Euler.YZX: {\n        const ac = a * c,\n          ad = a * d,\n          bc = b * c,\n          bd = b * d;\n\n        te[0] = c * e;\n        te[4] = bd - ac * f;\n        te[8] = bc * f + ad;\n\n        te[1] = f;\n        te[5] = a * e;\n        te[9] = -b * e;\n\n        te[2] = -d * e;\n        te[6] = ad * f + bc;\n        te[10] = ac - bd * f;\n        break;\n      }\n\n      case Euler.XZY: {\n        const ac = a * c,\n          ad = a * d,\n          bc = b * c,\n          bd = b * d;\n\n        te[0] = c * e;\n        te[4] = -f;\n        te[8] = d * e;\n\n        te[1] = ac * f + bd;\n        te[5] = a * e;\n        te[9] = ad * f - bc;\n\n        te[2] = bc * f - ad;\n        te[6] = b * e;\n        te[10] = bd * f + ac;\n        break;\n      }\n\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n\n    // last column\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = 0;\n\n    // bottom row\n    te[12] = 0;\n    te[13] = 0;\n    te[14] = 0;\n    te[15] = 1;\n\n    return te;\n  }\n\n  toQuaternion() {\n    // Abbreviations for the various angular functions\n    const cy = Math.cos(this.yaw * 0.5);\n    const sy = Math.sin(this.yaw * 0.5);\n    const cr = Math.cos(this.roll * 0.5);\n    const sr = Math.sin(this.roll * 0.5);\n    const cp = Math.cos(this.pitch * 0.5);\n    const sp = Math.sin(this.pitch * 0.5);\n\n    const w = cy * cr * cp + sy * sr * sp;\n    const x = cy * sr * cp - sy * cr * sp;\n    const y = cy * cr * sp + sy * sr * cp;\n    const z = sy * cr * cp - cy * sr * sp;\n\n    return new Quaternion(x, y, z, w);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}