{"ast":null,"code":"import { getImageSize } from '../category-api/parsed-image-api';\nconst {\n  _encodeImageNode\n} = globalThis;\nexport async function encodeImage(image, options) {\n  options = options || {};\n  options.image = options.image || {};\n  return _encodeImageNode ? _encodeImageNode(image, {\n    type: options.image.mimeType\n  }) : encodeImageInBrowser(image, options);\n}\nlet qualityParamSupported = true;\n\nasync function encodeImageInBrowser(image, options) {\n  const {\n    mimeType,\n    jpegQuality\n  } = options.image;\n  const {\n    width,\n    height\n  } = getImageSize(image);\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  drawImageToCanvas(image, canvas);\n  const blob = await new Promise(resolve => {\n    if (jpegQuality && qualityParamSupported) {\n      try {\n        canvas.toBlob(resolve, mimeType, jpegQuality);\n        return;\n      } catch (error) {\n        qualityParamSupported = false;\n      }\n    }\n\n    canvas.toBlob(resolve, mimeType);\n  });\n\n  if (!blob) {\n    throw new Error('image encoding failed');\n  }\n\n  return await blob.arrayBuffer();\n}\n\nfunction drawImageToCanvas(image, canvas) {\n  let x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  if (x === 0 && y === 0 && typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    const context = canvas.getContext('bitmaprenderer');\n\n    if (context) {\n      context.transferFromImageBitmap(image);\n      return canvas;\n    }\n  }\n\n  const context = canvas.getContext('2d');\n\n  if (image.data) {\n    const clampedArray = new Uint8ClampedArray(image.data);\n    const imageData = new ImageData(clampedArray, image.width, image.height);\n    context.putImageData(imageData, 0, 0);\n    return canvas;\n  }\n\n  context.drawImage(image, 0, 0);\n  return canvas;\n}","map":{"version":3,"mappings":"AACA,SAAQA,YAAR,QAA2B,kCAA3B;AAGA,MAAM;EAACC;AAAD,IAAqBC,UAA3B;AAUA,OAAO,eAAeC,WAAf,CACLC,KADK,EAELC,OAFK,EAGiB;EACtBA,OAAO,GAAGA,OAAO,IAAI,EAArBA;EACAA,OAAO,CAACD,KAARC,GAAgBA,OAAO,CAACD,KAARC,IAAkB,EAAlCA;EAEA,OAAOJ,gBAAgB,GACnBA,gBAAgB,CAACG,KAAD,EAAQ;IAACE,IAAI,EAAED,OAAO,CAACD,KAARC,CAAcE;EAArB,CAAR,CADG,GAEnBC,oBAAoB,CAACJ,KAAD,EAAQC,OAAR,CAFxB;AAGD;AAGD,IAAII,qBAAqB,GAAG,IAA5B;;AASA,eAAeD,oBAAf,CAAoCJ,KAApC,EAA2CC,OAA3C,EAAoD;EAClD,MAAM;IAACE,QAAD;IAAWG;EAAX,IAA0BL,OAAO,CAACD,KAAxC;EAEA,MAAM;IAACO,KAAD;IAAQC;EAAR,IAAkBZ,YAAY,CAACI,KAAD,CAApC;EAGA,MAAMS,MAAM,GAAGC,QAAQ,CAACC,aAATD,CAAuB,QAAvBA,CAAf;EACAD,MAAM,CAACF,KAAPE,GAAeF,KAAfE;EACAA,MAAM,CAACD,MAAPC,GAAgBD,MAAhBC;EAEAG,iBAAiB,CAACZ,KAAD,EAAQS,MAAR,CAAjBG;EAGA,MAAMC,IAAI,GAAG,MAAM,IAAIC,OAAJ,CAA0BC,OAAD,IAAa;IAEvD,IAAIT,WAAW,IAAID,qBAAnB,EAA0C;MACxC,IAAI;QACFI,MAAM,CAACO,MAAPP,CAAcM,OAAdN,EAAuBN,QAAvBM,EAAiCH,WAAjCG;QACA;MAFF,EAGE,OAAOQ,KAAP,EAAc;QACdZ,qBAAqB,GAAG,KAAxBA;MACD;IACF;;IACDI,MAAM,CAACO,MAAPP,CAAcM,OAAdN,EAAuBN,QAAvBM;EAViB,EAAnB;;EAaA,IAAI,CAACI,IAAL,EAAW;IACT,MAAM,IAAIK,KAAJ,CAAU,uBAAV,CAAN;EACD;;EAED,OAAO,MAAML,IAAI,CAACM,WAALN,EAAb;AACD;;AAED,SAASD,iBAAT,CAA2BZ,KAA3B,EAAkCS,MAAlC,EAAwD;EAAA,IAAdW,CAAc,uEAAV,CAAU;EAAA,IAAPC,CAAO,uEAAH,CAAG;;EAEtD,IAAID,CAAC,KAAK,CAANA,IAAWC,CAAC,KAAK,CAAjBD,IAAsB,OAAOE,WAAP,KAAuB,WAA7CF,IAA4DpB,KAAK,YAAYsB,WAAjF,EAA8F;IAC5F,MAAMC,OAAO,GAAGd,MAAM,CAACe,UAAPf,CAAkB,gBAAlBA,CAAhB;;IACA,IAAIc,OAAJ,EAAa;MAEXA,OAAO,CAACE,uBAARF,CAAgCvB,KAAhCuB;MACA,OAAOd,MAAP;IACD;EACF;;EAGD,MAAMc,OAAO,GAAGd,MAAM,CAACe,UAAPf,CAAkB,IAAlBA,CAAhB;;EACA,IAAIT,KAAK,CAAC0B,IAAV,EAAgB;IAEd,MAAMC,YAAY,GAAG,IAAIC,iBAAJ,CAAsB5B,KAAK,CAAC0B,IAA5B,CAArB;IACA,MAAMG,SAAS,GAAG,IAAIC,SAAJ,CAAcH,YAAd,EAA4B3B,KAAK,CAACO,KAAlC,EAAyCP,KAAK,CAACQ,MAA/C,CAAlB;IACAe,OAAO,CAACQ,YAARR,CAAqBM,SAArBN,EAAgC,CAAhCA,EAAmC,CAAnCA;IACA,OAAOd,MAAP;EACD;;EAGDc,OAAO,CAACS,SAART,CAAkBvB,KAAlBuB,EAAyB,CAAzBA,EAA4B,CAA5BA;EACA,OAAOd,MAAP;AACD","names":["getImageSize","_encodeImageNode","globalThis","encodeImage","image","options","type","mimeType","encodeImageInBrowser","qualityParamSupported","jpegQuality","width","height","canvas","document","createElement","drawImageToCanvas","blob","Promise","resolve","toBlob","error","Error","arrayBuffer","x","y","ImageBitmap","context","getContext","transferFromImageBitmap","data","clampedArray","Uint8ClampedArray","imageData","ImageData","putImageData","drawImage"],"sources":["../../../../src/lib/encoders/encode-image.ts"],"sourcesContent":["// Image loading/saving for browser and Node.js\nimport {getImageSize} from '../category-api/parsed-image-api';\n\n// @ts-ignore TS2339: Property does not exist on type\nconst {_encodeImageNode} = globalThis;\n\n/**\n * Returns data bytes representing a compressed image in PNG or JPG format,\n * This data can be saved using file system (f) methods or used in a request.\n * @param image - ImageBitmap Image or Canvas\n * @param options\n * param opt.type='png' - png, jpg or image/png, image/jpg are valid\n * param mimeType= - Whether to include a data URI header\n */\nexport async function encodeImage(\n  image: any,\n  options?: {[key: string]: any}\n): Promise<ArrayBuffer> {\n  options = options || {};\n  options.image = options.image || ({} as {[key: string]: any});\n\n  return _encodeImageNode\n    ? _encodeImageNode(image, {type: options.image.mimeType})\n    : encodeImageInBrowser(image, options);\n}\n\n// In case we get exceptions from canvas.toBlob(resolve, type, quality)\nlet qualityParamSupported = true;\n\n/**\n *\n * @param image\n * @param options\n * @note Based on canvas.toBlob\n * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob\n */\nasync function encodeImageInBrowser(image, options) {\n  const {mimeType, jpegQuality} = options.image;\n\n  const {width, height} = getImageSize(image);\n\n  // create a canvas and resize it to the size of our image\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n\n  drawImageToCanvas(image, canvas);\n\n  // The actual encoding is done asynchronously with `canvas.toBlob()`\n  const blob = await new Promise<Blob | null>((resolve) => {\n    // get it back as a Blob\n    if (jpegQuality && qualityParamSupported) {\n      try {\n        canvas.toBlob(resolve, mimeType, jpegQuality);\n        return;\n      } catch (error) {\n        qualityParamSupported = false;\n      }\n    }\n    canvas.toBlob(resolve, mimeType);\n  });\n\n  if (!blob) {\n    throw new Error('image encoding failed');\n  }\n\n  return await blob.arrayBuffer();\n}\n\nfunction drawImageToCanvas(image, canvas, x = 0, y = 0) {\n  // Try optimized path for ImageBitmaps via bitmaprenderer context\n  if (x === 0 && y === 0 && typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    const context = canvas.getContext('bitmaprenderer');\n    if (context) {\n      // transfer the ImageBitmap to it\n      context.transferFromImageBitmap(image);\n      return canvas;\n    }\n  }\n\n  // Available on most platforms, except IE11 and Andriod WebViews...\n  const context = canvas.getContext('2d');\n  if (image.data) {\n    // ImageData constructor expects clamped array even though getImageData does not return a clamped array...\n    const clampedArray = new Uint8ClampedArray(image.data);\n    const imageData = new ImageData(clampedArray, image.width, image.height);\n    context.putImageData(imageData, 0, 0);\n    return canvas;\n  }\n\n  // Fall back to generic image/image bitmap rendering path\n  context.drawImage(image, 0, 0);\n  return canvas;\n}\n"]},"metadata":{},"sourceType":"module"}