{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _Symbol$asyncIterator;\n\n_Symbol$asyncIterator = Symbol.asyncIterator;\n\nvar AsyncQueue = /*#__PURE__*/function (_Symbol$asyncIterator2) {\n  function AsyncQueue() {\n    _classCallCheck(this, AsyncQueue);\n\n    _defineProperty(this, \"_values\", void 0);\n\n    _defineProperty(this, \"_settlers\", void 0);\n\n    _defineProperty(this, \"_closed\", void 0);\n\n    this._values = [];\n    this._settlers = [];\n    this._closed = false;\n  }\n\n  _createClass(AsyncQueue, [{\n    key: _Symbol$asyncIterator2,\n    value: function value() {\n      return this;\n    }\n  }, {\n    key: \"push\",\n    value: function push(value) {\n      return this.enqueue(value);\n    }\n  }, {\n    key: \"enqueue\",\n    value: function enqueue(value) {\n      if (this._closed) {\n        throw new Error('Closed');\n      }\n\n      if (this._settlers.length > 0) {\n        if (this._values.length > 0) {\n          throw new Error('Illegal internal state');\n        }\n\n        var settler = this._settlers.shift();\n\n        if (value instanceof Error) {\n          settler.reject(value);\n        } else {\n          settler.resolve({\n            value: value\n          });\n        }\n      } else {\n        this._values.push(value);\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      while (this._settlers.length > 0) {\n        var settler = this._settlers.shift();\n\n        settler.resolve({\n          done: true\n        });\n      }\n\n      this._closed = true;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      var _this = this;\n\n      if (this._values.length > 0) {\n        var value = this._values.shift();\n\n        if (value instanceof Error) {\n          return Promise.reject(value);\n        }\n\n        return Promise.resolve({\n          done: false,\n          value: value\n        });\n      }\n\n      if (this._closed) {\n        if (this._settlers.length > 0) {\n          throw new Error('Illegal internal state');\n        }\n\n        return Promise.resolve({\n          done: true,\n          value: undefined\n        });\n      }\n\n      return new Promise(function (resolve, reject) {\n        _this._settlers.push({\n          resolve: resolve,\n          reject: reject\n        });\n      });\n    }\n  }]);\n\n  return AsyncQueue;\n}(_Symbol$asyncIterator);\n\nexport { AsyncQueue as default };","map":{"version":3,"mappings":";;;;;;wBA2BGA,MAAM,CAACC;;IAZWC,U;EAKnBC,sBAAc;IAAA;;IAAAC;;IAAAA;;IAAAA;;IACZ,KAAKC,OAAL,GAAe,EAAf;IACA,KAAKC,SAAL,GAAiB,EAAjB;IACA,KAAKC,OAAL,GAAe,KAAf;EACD;;;;WAGD,iBAA2C;MACzC,OAAO,IAAP;IACD;;;WAGDC,cAAKC,KAALD,EAAqB;MACnB,OAAO,KAAKE,OAAL,CAAaD,KAAb,CAAP;IACD;;;WAMDC,iBAAQD,KAARC,EAAgC;MAC9B,IAAI,KAAKH,OAAT,EAAkB;QAChB,MAAM,IAAII,KAAJ,CAAU,QAAV,CAAN;MACD;;MAED,IAAI,KAAKL,SAAL,CAAeM,MAAf,GAAwB,CAA5B,EAA+B;QAC7B,IAAI,KAAKP,OAAL,CAAaO,MAAb,GAAsB,CAA1B,EAA6B;UAC3B,MAAM,IAAID,KAAJ,CAAU,wBAAV,CAAN;QACD;;QACD,IAAME,OAAO,GAAG,KAAKP,SAAL,CAAeQ,KAAf,EAAhB;;QACA,IAAIL,KAAK,YAAYE,KAArB,EAA4B;UAC1BE,OAAO,CAACE,MAARF,CAAeJ,KAAfI;QADF,OAEO;UACLA,OAAO,CAACG,OAARH,CAAgB;YAACJ;UAAD,CAAhBI;QACD;MATH,OAUO;QACL,KAAKR,OAAL,CAAaG,IAAb,CAAkBC,KAAlB;MACD;IACF;;;WAGDQ,iBAAc;MACZ,OAAO,KAAKX,SAAL,CAAeM,MAAf,GAAwB,CAA/B,EAAkC;QAChC,IAAMC,OAAO,GAAG,KAAKP,SAAL,CAAeQ,KAAf,EAAhB;;QACAD,OAAO,CAACG,OAARH,CAAgB;UAACK,IAAI,EAAE;QAAP,CAAhBL;MACD;;MACD,KAAKN,OAAL,GAAe,IAAf;IACD;;;WAKDY,gBAAwC;MAAA;;MAEtC,IAAI,KAAKd,OAAL,CAAaO,MAAb,GAAsB,CAA1B,EAA6B;QAC3B,IAAMH,KAAK,GAAG,KAAKJ,OAAL,CAAaS,KAAb,EAAd;;QACA,IAAIL,KAAK,YAAYE,KAArB,EAA4B;UAC1B,OAAOS,OAAO,CAACL,MAARK,CAAeX,KAAfW,CAAP;QACD;;QACD,OAAOA,OAAO,CAACJ,OAARI,CAAgB;UAACF,IAAI,EAAE,KAAP;UAAcT;QAAd,CAAhBW,CAAP;MACD;;MAGD,IAAI,KAAKb,OAAT,EAAkB;QAChB,IAAI,KAAKD,SAAL,CAAeM,MAAf,GAAwB,CAA5B,EAA+B;UAC7B,MAAM,IAAID,KAAJ,CAAU,wBAAV,CAAN;QACD;;QACD,OAAOS,OAAO,CAACJ,OAARI,CAAgB;UAACF,IAAI,EAAE,IAAP;UAAaT,KAAK,EAAEY;QAApB,CAAhBD,CAAP;MACD;;MAGD,OAAO,IAAIA,OAAJ,CAAY,UAACJ,OAAD,EAAUD,MAAV,EAAqB;QACtC,MAAKT,SAAL,CAAeE,IAAf,CAAoB;UAACQ,OAAD,EAACA,OAAD;UAAUD;QAAV,CAApB;MADK,EAAP;IAGD;;;;EAnEDO,qB;;SAZmBpB,U","names":["Symbol","asyncIterator","AsyncQueue","constructor","_defineProperty","_values","_settlers","_closed","push","value","enqueue","Error","length","settler","shift","reject","resolve","close","done","next","Promise","undefined","_Symbol$asyncIterator"],"sources":["../../../../src/lib/async-queue/async-queue.ts"],"sourcesContent":["// From https://github.com/rauschma/async-iter-demo/tree/master/src under MIT license\n// http://2ality.com/2016/10/asynchronous-iteration.html\n\n/**\n * Async Queue\n * - AsyncIterable: An async iterator can be\n * - Values can be pushed onto the queue\n * @example\n *   const asyncQueue = new AsyncQueue();\n *   setTimeout(() => asyncQueue.enqueue('tick'), 1000);\n *   setTimeout(() => asyncQueue.enqueue(new Error('done')), 10000);\n *   for await (const value of asyncQueue) {\n *     console.log(value); // tick\n *   }\n */\nexport default class AsyncQueue<T> {\n  private _values: any[];\n  private _settlers: any[];\n  private _closed: boolean;\n\n  constructor() {\n    this._values = []; // enqueues > dequeues\n    this._settlers = []; // dequeues > enqueues\n    this._closed = false;\n  }\n\n  /** Return an async iterator for this queue */\n  [Symbol.asyncIterator](): AsyncIterator<T> {\n    return this;\n  }\n\n  /** Push a new value - the async iterator will yield a promise resolved to this value */\n  push(value: T): void {\n    return this.enqueue(value);\n  }\n\n  /**\n   * Push a new value - the async iterator will yield a promise resolved to this value\n   * Add an error - the async iterator will yield a promise rejected with this value\n   */\n  enqueue(value: T | Error): void {\n    if (this._closed) {\n      throw new Error('Closed');\n    }\n\n    if (this._settlers.length > 0) {\n      if (this._values.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      const settler = this._settlers.shift();\n      if (value instanceof Error) {\n        settler.reject(value);\n      } else {\n        settler.resolve({value});\n      }\n    } else {\n      this._values.push(value);\n    }\n  }\n\n  /** Indicate that we not waiting for more values - The async iterator will be done */\n  close(): void {\n    while (this._settlers.length > 0) {\n      const settler = this._settlers.shift();\n      settler.resolve({done: true});\n    }\n    this._closed = true;\n  }\n\n  // ITERATOR IMPLEMENTATION\n\n  /** @returns a Promise for an IteratorResult */\n  next(): Promise<IteratorResult<T, any>> {\n    // If values in queue, yield the first value\n    if (this._values.length > 0) {\n      const value = this._values.shift();\n      if (value instanceof Error) {\n        return Promise.reject(value);\n      }\n      return Promise.resolve({done: false, value});\n    }\n\n    // If queue is closed, the iterator is done\n    if (this._closed) {\n      if (this._settlers.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      return Promise.resolve({done: true, value: undefined});\n    }\n\n    // Yield a promise that waits for new values to be enqueued\n    return new Promise((resolve, reject) => {\n      this._settlers.push({resolve, reject});\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}