{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { normalizeLoader } from '../loader-utils/normalize-loader';\nimport { getGlobalLoaderState } from '../loader-utils/option-utils';\n\nvar getGlobalLoaderRegistry = function getGlobalLoaderRegistry() {\n  var state = getGlobalLoaderState();\n  state.loaderRegistry = state.loaderRegistry || [];\n  return state.loaderRegistry;\n};\n\nexport function registerLoaders(loaders) {\n  var loaderRegistry = getGlobalLoaderRegistry();\n  loaders = Array.isArray(loaders) ? loaders : [loaders];\n\n  var _iterator = _createForOfIteratorHelper(loaders),\n      _step;\n\n  try {\n    var _loop = function _loop() {\n      var loader = _step.value;\n      var normalizedLoader = normalizeLoader(loader);\n\n      if (!loaderRegistry.find(function (registeredLoader) {\n        return normalizedLoader === registeredLoader;\n      })) {\n        loaderRegistry.unshift(normalizedLoader);\n      }\n    };\n\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nexport function getRegisteredLoaders() {\n  return getGlobalLoaderRegistry();\n}\nexport function _unregisterLoaders() {\n  var state = getGlobalLoaderState();\n  state.loaderRegistry = [];\n}","map":{"version":3,"mappings":";AACA,SAAQA,eAAR,QAA8B,kCAA9B;AACA,SAAQC,oBAAR,QAAmC,8BAAnC;;AAIA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;EACpC,IAAMC,KAAK,GAAGF,oBAAoB,EAAlC;EACAE,KAAK,CAACC,cAAND,GAAuBA,KAAK,CAACC,cAAND,IAAwB,EAA/CA;EACA,OAAOA,KAAK,CAACC,cAAb;AAHF;;AAOA,OAAO,SAASC,eAAT,CAAyBC,OAAzB,EAA4C;EACjD,IAAMF,cAAc,GAAGF,uBAAuB,EAA9C;EAEAI,OAAO,GAAGC,KAAK,CAACC,OAAND,CAAcD,OAAdC,IAAyBD,OAAzBC,GAAmC,CAACD,OAAD,CAA7CA;;EAHiD,2CAK5BA,OAL4B;EAAA;;EAAA;IAAA;MAAA,IAKtCG,MALsC;MAM/C,IAAMC,gBAAgB,GAAGV,eAAe,CAACS,MAAD,CAAxC;;MACA,IAAI,CAACL,cAAc,CAACO,IAAfP,CAAqBQ,0BAAD;QAAA,OAAsBF,gBAAgB,KAAKE,gBAA3C;MAAA,CAApBR,CAAL,EAAuF;QAErFA,cAAc,CAACS,OAAfT,CAAuBM,gBAAvBN;MACD;IAV8C;;IAKjD,oDAA8B;MAAA;IAM7B;EAXgD;IAAA;EAAA;IAAA;EAAA;AAYlD;AAED,OAAO,SAASU,oBAAT,GAA0C;EAC/C,OAAOZ,uBAAuB,EAA9B;AACD;AAGD,OAAO,SAASa,kBAAT,GAA8B;EACnC,IAAMZ,KAAK,GAAGF,oBAAoB,EAAlC;EACAE,KAAK,CAACC,cAAND,GAAuB,EAAvBA;AACD","names":["normalizeLoader","getGlobalLoaderState","getGlobalLoaderRegistry","state","loaderRegistry","registerLoaders","loaders","Array","isArray","loader","normalizedLoader","find","registeredLoader","unshift","getRegisteredLoaders","_unregisterLoaders"],"sources":["../../../../src/lib/api/register-loaders.ts"],"sourcesContent":["import {Loader} from '@loaders.gl/loader-utils';\nimport {normalizeLoader} from '../loader-utils/normalize-loader';\nimport {getGlobalLoaderState} from '../loader-utils/option-utils';\n\n// Store global registered loaders on the global object to increase chances of cross loaders-version interoperability\n// This use case is not reliable but can help when testing new versions of loaders.gl with existing frameworks\nconst getGlobalLoaderRegistry = () => {\n  const state = getGlobalLoaderState();\n  state.loaderRegistry = state.loaderRegistry || [];\n  return state.loaderRegistry;\n};\n\n/** Register a list of global loaders */\nexport function registerLoaders(loaders: Loader[]) {\n  const loaderRegistry = getGlobalLoaderRegistry();\n\n  loaders = Array.isArray(loaders) ? loaders : [loaders];\n\n  for (const loader of loaders) {\n    const normalizedLoader = normalizeLoader(loader);\n    if (!loaderRegistry.find((registeredLoader) => normalizedLoader === registeredLoader)) {\n      // add to the beginning of the loaderRegistry, so the last registeredLoader get picked\n      loaderRegistry.unshift(normalizedLoader);\n    }\n  }\n}\n\nexport function getRegisteredLoaders(): Loader[] {\n  return getGlobalLoaderRegistry();\n}\n\n/** @deprecated For testing only  */\nexport function _unregisterLoaders() {\n  const state = getGlobalLoaderState();\n  state.loaderRegistry = [];\n}\n"]},"metadata":{},"sourceType":"module"}