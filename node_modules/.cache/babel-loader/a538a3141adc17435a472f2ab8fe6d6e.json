{"ast":null,"code":"import { Transform } from '@luma.gl/core';\nimport GPUInterpolationTransition from '../../transitions/gpu-interpolation-transition';\nimport GPUSpringTransition from '../../transitions/gpu-spring-transition';\nimport log from '../../utils/log';\nconst TRANSITION_TYPES = {\n  interpolation: GPUInterpolationTransition,\n  spring: GPUSpringTransition\n};\nexport default class AttributeTransitionManager {\n  constructor(gl, _ref) {\n    let {\n      id,\n      timeline\n    } = _ref;\n    this.id = id;\n    this.gl = gl;\n    this.timeline = timeline;\n    this.transitions = {};\n    this.needsRedraw = false;\n    this.numInstances = 1;\n    this.isSupported = Transform.isSupported(gl);\n  }\n\n  finalize() {\n    for (const attributeName in this.transitions) {\n      this._removeTransition(attributeName);\n    }\n  }\n\n  update(_ref2) {\n    let {\n      attributes,\n      transitions,\n      numInstances\n    } = _ref2;\n    this.numInstances = numInstances || 1;\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const settings = attribute.getTransitionSetting(transitions);\n      if (!settings) continue;\n\n      this._updateAttribute(attributeName, attribute, settings);\n    }\n\n    for (const attributeName in this.transitions) {\n      const attribute = attributes[attributeName];\n\n      if (!attribute || !attribute.getTransitionSetting(transitions)) {\n        this._removeTransition(attributeName);\n      }\n    }\n  }\n\n  hasAttribute(attributeName) {\n    const transition = this.transitions[attributeName];\n    return transition && transition.inProgress;\n  }\n\n  getAttributes() {\n    const animatedAttributes = {};\n\n    for (const attributeName in this.transitions) {\n      const transition = this.transitions[attributeName];\n\n      if (transition.inProgress) {\n        animatedAttributes[attributeName] = transition.attributeInTransition;\n      }\n    }\n\n    return animatedAttributes;\n  }\n\n  run() {\n    if (!this.isSupported || this.numInstances === 0) {\n      return false;\n    }\n\n    for (const attributeName in this.transitions) {\n      const updated = this.transitions[attributeName].update();\n\n      if (updated) {\n        this.needsRedraw = true;\n      }\n    }\n\n    const needsRedraw = this.needsRedraw;\n    this.needsRedraw = false;\n    return needsRedraw;\n  }\n\n  _removeTransition(attributeName) {\n    this.transitions[attributeName].cancel();\n    delete this.transitions[attributeName];\n  }\n\n  _updateAttribute(attributeName, attribute, settings) {\n    const transition = this.transitions[attributeName];\n    let isNew = !transition || transition.type !== settings.type;\n\n    if (isNew) {\n      if (!this.isSupported) {\n        log.warn(\"WebGL2 not supported by this browser. Transition for \".concat(attributeName, \" is disabled.\"))();\n        return;\n      }\n\n      if (transition) {\n        this._removeTransition(attributeName);\n      }\n\n      const TransitionType = TRANSITION_TYPES[settings.type];\n\n      if (TransitionType) {\n        this.transitions[attributeName] = new TransitionType({\n          attribute,\n          timeline: this.timeline,\n          gl: this.gl\n        });\n      } else {\n        log.error(\"unsupported transition type '\".concat(settings.type, \"'\"))();\n        isNew = false;\n      }\n    }\n\n    if (isNew || attribute.needsRedraw()) {\n      this.needsRedraw = true;\n      this.transitions[attributeName].start(settings, this.numInstances);\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Transform","GPUInterpolationTransition","GPUSpringTransition","log","TRANSITION_TYPES","interpolation","spring","AttributeTransitionManager","constructor","gl","id","timeline","transitions","needsRedraw","numInstances","isSupported","finalize","attributeName","_removeTransition","update","attributes","attribute","settings","getTransitionSetting","_updateAttribute","hasAttribute","transition","inProgress","getAttributes","animatedAttributes","attributeInTransition","run","updated","cancel","isNew","type","warn","TransitionType","error","start"],"sources":["../../../../src/lib/attribute/attribute-transition-manager.js"],"sourcesContent":["import {Transform} from '@luma.gl/core';\nimport GPUInterpolationTransition from '../../transitions/gpu-interpolation-transition';\nimport GPUSpringTransition from '../../transitions/gpu-spring-transition';\nimport log from '../../utils/log';\n\nconst TRANSITION_TYPES = {\n  interpolation: GPUInterpolationTransition,\n  spring: GPUSpringTransition\n};\n\nexport default class AttributeTransitionManager {\n  constructor(gl, {id, timeline}) {\n    this.id = id;\n    this.gl = gl;\n    this.timeline = timeline;\n\n    this.transitions = {};\n    this.needsRedraw = false;\n    this.numInstances = 1;\n\n    this.isSupported = Transform.isSupported(gl);\n  }\n\n  finalize() {\n    for (const attributeName in this.transitions) {\n      this._removeTransition(attributeName);\n    }\n  }\n\n  /* Public methods */\n\n  // Called when attribute manager updates\n  // Check the latest attributes for updates.\n  update({attributes, transitions, numInstances}) {\n    // Transform class will crash if elementCount is 0\n    this.numInstances = numInstances || 1;\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const settings = attribute.getTransitionSetting(transitions);\n\n      // this attribute might not support transitions?\n      if (!settings) continue; // eslint-disable-line no-continue\n      this._updateAttribute(attributeName, attribute, settings);\n    }\n\n    for (const attributeName in this.transitions) {\n      const attribute = attributes[attributeName];\n      if (!attribute || !attribute.getTransitionSetting(transitions)) {\n        // Animated attribute has been removed\n        this._removeTransition(attributeName);\n      }\n    }\n  }\n\n  // Returns `true` if attribute is transition-enabled\n  hasAttribute(attributeName) {\n    const transition = this.transitions[attributeName];\n    return transition && transition.inProgress;\n  }\n\n  // Get all the animated attributes\n  getAttributes() {\n    const animatedAttributes = {};\n\n    for (const attributeName in this.transitions) {\n      const transition = this.transitions[attributeName];\n      if (transition.inProgress) {\n        animatedAttributes[attributeName] = transition.attributeInTransition;\n      }\n    }\n\n    return animatedAttributes;\n  }\n\n  /* eslint-disable max-statements */\n  // Called every render cycle, run transform feedback\n  // Returns `true` if anything changes\n  run() {\n    if (!this.isSupported || this.numInstances === 0) {\n      return false;\n    }\n\n    for (const attributeName in this.transitions) {\n      const updated = this.transitions[attributeName].update();\n      if (updated) {\n        this.needsRedraw = true;\n      }\n    }\n\n    const needsRedraw = this.needsRedraw;\n    this.needsRedraw = false;\n    return needsRedraw;\n  }\n  /* eslint-enable max-statements */\n\n  /* Private methods */\n  _removeTransition(attributeName) {\n    this.transitions[attributeName].cancel();\n    delete this.transitions[attributeName];\n  }\n\n  // Check an attributes for updates\n  // Returns a transition object if a new transition is triggered.\n  _updateAttribute(attributeName, attribute, settings) {\n    const transition = this.transitions[attributeName];\n    // an attribute can change transition type when it updates\n    // let's remove the transition when that happens so we can create the new transition type\n    // TODO: when switching transition types, make sure to carry over the attribute's\n    // previous buffers, currentLength, startIndices, etc, to be used as the starting point\n    // for the next transition\n    let isNew = !transition || transition.type !== settings.type;\n    if (isNew) {\n      if (!this.isSupported) {\n        log.warn(\n          `WebGL2 not supported by this browser. Transition for ${attributeName} is disabled.`\n        )();\n        return;\n      }\n\n      if (transition) {\n        this._removeTransition(attributeName);\n      }\n\n      const TransitionType = TRANSITION_TYPES[settings.type];\n      if (TransitionType) {\n        this.transitions[attributeName] = new TransitionType({\n          attribute,\n          timeline: this.timeline,\n          gl: this.gl\n        });\n      } else {\n        log.error(`unsupported transition type '${settings.type}'`)();\n        isNew = false;\n      }\n    }\n\n    if (isNew || attribute.needsRedraw()) {\n      this.needsRedraw = true;\n      this.transitions[attributeName].start(settings, this.numInstances);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}