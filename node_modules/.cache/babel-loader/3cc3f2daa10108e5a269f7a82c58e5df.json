{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DrawPolygonMode = void 0;\n\nvar _lineIntersect = _interopRequireDefault(require(\"@turf/line-intersect\"));\n\nvar _helpers = require(\"@turf/helpers\");\n\nvar _utils = require(\"../utils\");\n\nvar _geojsonEditMode = require(\"./geojson-edit-mode\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar DrawPolygonMode = /*#__PURE__*/function (_GeoJsonEditMode) {\n  _inherits(DrawPolygonMode, _GeoJsonEditMode);\n\n  var _super = _createSuper(DrawPolygonMode);\n\n  function DrawPolygonMode() {\n    _classCallCheck(this, DrawPolygonMode);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DrawPolygonMode, [{\n    key: \"createTentativeFeature\",\n    value: function createTentativeFeature(props) {\n      var lastPointerMoveEvent = props.lastPointerMoveEvent;\n      var clickSequence = this.getClickSequence();\n      var lastCoords = lastPointerMoveEvent ? [lastPointerMoveEvent.mapCoords] : [];\n      var tentativeFeature;\n\n      if (clickSequence.length === 1 || clickSequence.length === 2) {\n        tentativeFeature = {\n          type: 'Feature',\n          properties: {\n            guideType: 'tentative'\n          },\n          geometry: {\n            type: 'LineString',\n            coordinates: [].concat(_toConsumableArray(clickSequence), lastCoords)\n          }\n        };\n      } else if (clickSequence.length > 2) {\n        tentativeFeature = {\n          type: 'Feature',\n          properties: {\n            guideType: 'tentative'\n          },\n          geometry: {\n            type: 'Polygon',\n            coordinates: [[].concat(_toConsumableArray(clickSequence), lastCoords, [clickSequence[0]])]\n          }\n        };\n      }\n\n      return tentativeFeature;\n    }\n  }, {\n    key: \"getGuides\",\n    value: function getGuides(props) {\n      var _guides$features;\n\n      var clickSequence = this.getClickSequence();\n      var guides = {\n        type: 'FeatureCollection',\n        features: []\n      };\n      var tentativeFeature = this.createTentativeFeature(props);\n\n      if (tentativeFeature) {\n        guides.features.push(tentativeFeature);\n      }\n\n      var editHandles = clickSequence.map(function (clickedCoord, index) {\n        return {\n          type: 'Feature',\n          properties: {\n            guideType: 'editHandle',\n            editHandleType: 'existing',\n            featureIndex: -1,\n            positionIndexes: [index]\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: clickedCoord\n          }\n        };\n      });\n\n      (_guides$features = guides.features).push.apply(_guides$features, _toConsumableArray(editHandles)); // @ts-ignore\n\n\n      return guides;\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event, props) {\n      var picks = event.picks;\n      var clickedEditHandle = (0, _utils.getPickedEditHandle)(picks);\n      var clickSequence = this.getClickSequence();\n      var overlappingLines = false;\n\n      if (clickSequence.length > 2 && props.modeConfig && props.modeConfig.preventOverlappingLines) {\n        var currentLine = (0, _helpers.lineString)([clickSequence[clickSequence.length - 1], event.mapCoords]);\n        var otherLines = (0, _helpers.lineString)(_toConsumableArray(clickSequence.slice(0, clickSequence.length - 1)));\n        var intersectingPoints = (0, _lineIntersect[\"default\"])(currentLine, otherLines);\n\n        if (intersectingPoints.features.length > 0) {\n          overlappingLines = true;\n        }\n      }\n\n      var positionAdded = false;\n\n      if (!clickedEditHandle && !overlappingLines) {\n        // Don't add another point right next to an existing one\n        this.addClickSequence(event);\n        positionAdded = true;\n      }\n\n      if (clickSequence.length > 2 && clickedEditHandle && Array.isArray(clickedEditHandle.properties.positionIndexes) && (clickedEditHandle.properties.positionIndexes[0] === 0 || clickedEditHandle.properties.positionIndexes[0] === clickSequence.length - 1)) {\n        // They clicked the first or last point (or double-clicked), so complete the polygon\n        // Remove the hovered position\n        var polygonToAdd = {\n          type: 'Polygon',\n          coordinates: [[].concat(_toConsumableArray(clickSequence), [clickSequence[0]])]\n        };\n        this.resetClickSequence();\n        var editAction = this.getAddFeatureOrBooleanPolygonAction(polygonToAdd, props);\n\n        if (editAction) {\n          props.onEdit(editAction);\n        }\n      } else if (positionAdded) {\n        // new tentative point\n        props.onEdit({\n          // data is the same\n          updatedData: props.data,\n          editType: 'addTentativePosition',\n          editContext: {\n            position: event.mapCoords\n          }\n        });\n      }\n    }\n  }, {\n    key: \"handleKeyUp\",\n    value: function handleKeyUp(event, props) {\n      if (event.key === 'Enter') {\n        var clickSequence = this.getClickSequence();\n\n        if (clickSequence.length > 2) {\n          var polygonToAdd = {\n            type: 'Polygon',\n            coordinates: [[].concat(_toConsumableArray(clickSequence), [clickSequence[0]])]\n          };\n          this.resetClickSequence();\n          var editAction = this.getAddFeatureOrBooleanPolygonAction(polygonToAdd, props);\n\n          if (editAction) {\n            props.onEdit(editAction);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"handlePointerMove\",\n    value: function handlePointerMove(event, props) {\n      props.onUpdateCursor('cell');\n\n      _get(_getPrototypeOf(DrawPolygonMode.prototype), \"handlePointerMove\", this).call(this, event, props);\n    }\n  }]);\n\n  return DrawPolygonMode;\n}(_geojsonEditMode.GeoJsonEditMode);\n\nexports.DrawPolygonMode = DrawPolygonMode;","map":{"version":3,"mappings":"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","names":["DrawPolygonMode","props","lastPointerMoveEvent","clickSequence","getClickSequence","lastCoords","mapCoords","tentativeFeature","length","type","properties","guideType","geometry","coordinates","guides","features","createTentativeFeature","push","editHandles","map","clickedCoord","index","editHandleType","featureIndex","positionIndexes","event","picks","clickedEditHandle","overlappingLines","modeConfig","preventOverlappingLines","currentLine","otherLines","slice","intersectingPoints","positionAdded","addClickSequence","Array","isArray","polygonToAdd","resetClickSequence","editAction","getAddFeatureOrBooleanPolygonAction","onEdit","updatedData","data","editType","editContext","position","key","onUpdateCursor","_get","GeoJsonEditMode"],"sources":["../../src/lib/draw-polygon-mode.ts"],"sourcesContent":["import lineIntersect from '@turf/line-intersect';\nimport { lineString as turfLineString } from '@turf/helpers';\nimport {\n  ClickEvent,\n  PointerMoveEvent,\n  ModeProps,\n  GuideFeatureCollection,\n  TentativeFeature,\n} from '../types';\nimport { Polygon, FeatureCollection } from '../geojson-types';\nimport { getPickedEditHandle } from '../utils';\nimport { GeoJsonEditMode } from './geojson-edit-mode';\n\nexport class DrawPolygonMode extends GeoJsonEditMode {\n  createTentativeFeature(props: ModeProps<FeatureCollection>): TentativeFeature {\n    const { lastPointerMoveEvent } = props;\n    const clickSequence = this.getClickSequence();\n\n    const lastCoords = lastPointerMoveEvent ? [lastPointerMoveEvent.mapCoords] : [];\n\n    let tentativeFeature;\n    if (clickSequence.length === 1 || clickSequence.length === 2) {\n      tentativeFeature = {\n        type: 'Feature',\n        properties: {\n          guideType: 'tentative',\n        },\n        geometry: {\n          type: 'LineString',\n          coordinates: [...clickSequence, ...lastCoords],\n        },\n      };\n    } else if (clickSequence.length > 2) {\n      tentativeFeature = {\n        type: 'Feature',\n        properties: {\n          guideType: 'tentative',\n        },\n        geometry: {\n          type: 'Polygon',\n          coordinates: [[...clickSequence, ...lastCoords, clickSequence[0]]],\n        },\n      };\n    }\n\n    return tentativeFeature;\n  }\n\n  getGuides(props: ModeProps<FeatureCollection>): GuideFeatureCollection {\n    const clickSequence = this.getClickSequence();\n\n    const guides = {\n      type: 'FeatureCollection',\n      features: [],\n    };\n\n    const tentativeFeature = this.createTentativeFeature(props);\n    if (tentativeFeature) {\n      guides.features.push(tentativeFeature);\n    }\n\n    const editHandles = clickSequence.map((clickedCoord, index) => ({\n      type: 'Feature',\n      properties: {\n        guideType: 'editHandle',\n        editHandleType: 'existing',\n        featureIndex: -1,\n        positionIndexes: [index],\n      },\n      geometry: {\n        type: 'Point',\n        coordinates: clickedCoord,\n      },\n    }));\n\n    guides.features.push(...editHandles);\n    // @ts-ignore\n    return guides;\n  }\n\n  handleClick(event: ClickEvent, props: ModeProps<FeatureCollection>) {\n    const { picks } = event;\n    const clickedEditHandle = getPickedEditHandle(picks);\n    const clickSequence = this.getClickSequence();\n\n    let overlappingLines = false;\n    if (clickSequence.length > 2 && props.modeConfig && props.modeConfig.preventOverlappingLines) {\n      const currentLine = turfLineString([\n        clickSequence[clickSequence.length - 1],\n        event.mapCoords,\n      ]);\n      const otherLines = turfLineString([...clickSequence.slice(0, clickSequence.length - 1)]);\n      const intersectingPoints = lineIntersect(currentLine, otherLines);\n      if (intersectingPoints.features.length > 0) {\n        overlappingLines = true;\n      }\n    }\n\n    let positionAdded = false;\n    if (!clickedEditHandle && !overlappingLines) {\n      // Don't add another point right next to an existing one\n      this.addClickSequence(event);\n      positionAdded = true;\n    }\n\n    if (\n      clickSequence.length > 2 &&\n      clickedEditHandle &&\n      Array.isArray(clickedEditHandle.properties.positionIndexes) &&\n      (clickedEditHandle.properties.positionIndexes[0] === 0 ||\n        clickedEditHandle.properties.positionIndexes[0] === clickSequence.length - 1)\n    ) {\n      // They clicked the first or last point (or double-clicked), so complete the polygon\n\n      // Remove the hovered position\n      const polygonToAdd: Polygon = {\n        type: 'Polygon',\n        coordinates: [[...clickSequence, clickSequence[0]]],\n      };\n\n      this.resetClickSequence();\n\n      const editAction = this.getAddFeatureOrBooleanPolygonAction(polygonToAdd, props);\n      if (editAction) {\n        props.onEdit(editAction);\n      }\n    } else if (positionAdded) {\n      // new tentative point\n      props.onEdit({\n        // data is the same\n        updatedData: props.data,\n        editType: 'addTentativePosition',\n        editContext: {\n          position: event.mapCoords,\n        },\n      });\n    }\n  }\n\n  handleKeyUp(event: KeyboardEvent, props: ModeProps<FeatureCollection>) {\n    if (event.key === 'Enter') {\n      const clickSequence = this.getClickSequence();\n      if (clickSequence.length > 2) {\n        const polygonToAdd: Polygon = {\n          type: 'Polygon',\n          coordinates: [[...clickSequence, clickSequence[0]]],\n        };\n        this.resetClickSequence();\n\n        const editAction = this.getAddFeatureOrBooleanPolygonAction(polygonToAdd, props);\n        if (editAction) {\n          props.onEdit(editAction);\n        }\n      }\n    }\n  }\n\n  handlePointerMove(event: PointerMoveEvent, props: ModeProps<FeatureCollection>) {\n    props.onUpdateCursor('cell');\n    super.handlePointerMove(event, props);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}