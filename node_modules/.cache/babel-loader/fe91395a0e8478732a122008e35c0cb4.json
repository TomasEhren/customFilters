{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { log } from '@luma.gl/gltools';\nimport Accessor from './accessor';\nimport Buffer from './buffer';\nimport VertexArrayObject from './vertex-array-object';\nimport { assert } from '../utils/assert';\nimport { stubRemovedMethods } from '../utils/stub-methods';\nvar ERR_ATTRIBUTE_TYPE = 'VertexArray: attributes must be Buffers or constants (i.e. typed array)';\nvar MULTI_LOCATION_ATTRIBUTE_REGEXP = /^(.+)__LOCATION_([0-9]+)$/;\nvar DEPRECATIONS_V6 = ['setBuffers', 'setGeneric', 'clearBindings', 'setLocations', 'setGenericValues', 'setDivisor', 'enable', 'disable'];\n\nvar VertexArray = /*#__PURE__*/function () {\n  function VertexArray(gl) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, VertexArray);\n\n    var id = opts.id || opts.program && opts.program.id;\n    this.id = id;\n    this.gl = gl;\n    this.configuration = null;\n    this.elements = null;\n    this.elementsAccessor = null;\n    this.values = null;\n    this.accessors = null;\n    this.unused = null;\n    this.drawParams = null;\n    this.buffer = null;\n    this.attributes = {};\n    this.vertexArrayObject = new VertexArrayObject(gl);\n    stubRemovedMethods(this, 'VertexArray', 'v6.0', DEPRECATIONS_V6);\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  _createClass(VertexArray, [{\n    key: \"delete\",\n    value: function _delete() {\n      if (this.buffer) {\n        this.buffer.delete();\n      }\n\n      this.vertexArrayObject.delete();\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.reset();\n      this.configuration = null;\n      this.bindOnUse = false;\n      return this.setProps(props);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.elements = null;\n      this.elementsAccessor = null;\n      var MAX_ATTRIBUTES = this.vertexArrayObject.MAX_ATTRIBUTES;\n      this.values = new Array(MAX_ATTRIBUTES).fill(null);\n      this.accessors = new Array(MAX_ATTRIBUTES).fill(null);\n      this.unused = {};\n      this.drawParams = null;\n      return this;\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      if ('program' in props) {\n        this.configuration = props.program && props.program.configuration;\n      }\n\n      if ('configuration' in props) {\n        this.configuration = props.configuration;\n      }\n\n      if ('attributes' in props) {\n        this.setAttributes(props.attributes);\n      }\n\n      if ('elements' in props) {\n        this.setElementBuffer(props.elements);\n      }\n\n      if ('bindOnUse' in props) {\n        props = props.bindOnUse;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"clearDrawParams\",\n    value: function clearDrawParams() {\n      this.drawParams = null;\n    }\n  }, {\n    key: \"getDrawParams\",\n    value: function getDrawParams() {\n      this.drawParams = this.drawParams || this._updateDrawParams();\n      return this.drawParams;\n    }\n  }, {\n    key: \"setAttributes\",\n    value: function setAttributes(attributes) {\n      var _this = this;\n\n      Object.assign(this.attributes, attributes);\n      this.vertexArrayObject.bind(function () {\n        for (var locationOrName in attributes) {\n          var value = attributes[locationOrName];\n\n          _this._setAttribute(locationOrName, value);\n        }\n\n        _this.gl.bindBuffer(34962, null);\n      });\n      return this;\n    }\n  }, {\n    key: \"setElementBuffer\",\n    value: function setElementBuffer() {\n      var elementBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.elements = elementBuffer;\n      this.elementsAccessor = accessor;\n      this.clearDrawParams();\n      this.vertexArrayObject.setElementBuffer(elementBuffer, accessor);\n      return this;\n    }\n  }, {\n    key: \"setBuffer\",\n    value: function setBuffer(locationOrName, buffer) {\n      var appAccessor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (buffer.target === 34963) {\n        return this.setElementBuffer(buffer, appAccessor);\n      }\n\n      var _this$_resolveLocatio = this._resolveLocationAndAccessor(locationOrName, buffer, buffer.accessor, appAccessor),\n          location = _this$_resolveLocatio.location,\n          accessor = _this$_resolveLocatio.accessor;\n\n      if (location >= 0) {\n        this.values[location] = buffer;\n        this.accessors[location] = accessor;\n        this.clearDrawParams();\n        this.vertexArrayObject.setBuffer(location, buffer, accessor);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setConstant\",\n    value: function setConstant(locationOrName, arrayValue) {\n      var appAccessor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var _this$_resolveLocatio2 = this._resolveLocationAndAccessor(locationOrName, arrayValue, Object.assign({\n        size: arrayValue.length\n      }, appAccessor)),\n          location = _this$_resolveLocatio2.location,\n          accessor = _this$_resolveLocatio2.accessor;\n\n      if (location >= 0) {\n        arrayValue = this.vertexArrayObject._normalizeConstantArrayValue(arrayValue);\n        this.values[location] = arrayValue;\n        this.accessors[location] = accessor;\n        this.clearDrawParams();\n        this.vertexArrayObject.enable(location, false);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"unbindBuffers\",\n    value: function unbindBuffers() {\n      var _this2 = this;\n\n      this.vertexArrayObject.bind(function () {\n        if (_this2.elements) {\n          _this2.vertexArrayObject.setElementBuffer(null);\n        }\n\n        _this2.buffer = _this2.buffer || new Buffer(_this2.gl, {\n          accessor: {\n            size: 4\n          }\n        });\n\n        for (var location = 0; location < _this2.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n          if (_this2.values[location] instanceof Buffer) {\n            _this2.gl.disableVertexAttribArray(location);\n\n            _this2.gl.bindBuffer(34962, _this2.buffer.handle);\n\n            _this2.gl.vertexAttribPointer(location, 1, 5126, false, 0, 0);\n          }\n        }\n      });\n      return this;\n    }\n  }, {\n    key: \"bindBuffers\",\n    value: function bindBuffers() {\n      var _this3 = this;\n\n      this.vertexArrayObject.bind(function () {\n        if (_this3.elements) {\n          _this3.setElementBuffer(_this3.elements);\n        }\n\n        for (var location = 0; location < _this3.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n          var buffer = _this3.values[location];\n\n          if (buffer instanceof Buffer) {\n            _this3.setBuffer(location, buffer);\n          }\n        }\n      });\n      return this;\n    }\n  }, {\n    key: \"bindForDraw\",\n    value: function bindForDraw(vertexCount, instanceCount, func) {\n      var _this4 = this;\n\n      var value;\n      this.vertexArrayObject.bind(function () {\n        _this4._setConstantAttributes(vertexCount, instanceCount);\n\n        value = func();\n      });\n      return value;\n    }\n  }, {\n    key: \"_resolveLocationAndAccessor\",\n    value: function _resolveLocationAndAccessor(locationOrName, value, valueAccessor, appAccessor) {\n      var _this5 = this;\n\n      var INVALID_RESULT = {\n        location: -1,\n        accessor: null\n      };\n\n      var _this$_getAttributeIn = this._getAttributeIndex(locationOrName),\n          location = _this$_getAttributeIn.location,\n          name = _this$_getAttributeIn.name;\n\n      if (!Number.isFinite(location) || location < 0) {\n        this.unused[locationOrName] = value;\n        log.once(3, function () {\n          return \"unused value \".concat(locationOrName, \" in \").concat(_this5.id);\n        })();\n        return INVALID_RESULT;\n      }\n\n      var accessInfo = this._getAttributeInfo(name || location);\n\n      if (!accessInfo) {\n        return INVALID_RESULT;\n      }\n\n      var currentAccessor = this.accessors[location] || {};\n      var accessor = Accessor.resolve(accessInfo.accessor, currentAccessor, valueAccessor, appAccessor);\n      var size = accessor.size,\n          type = accessor.type;\n      assert(Number.isFinite(size) && Number.isFinite(type));\n      return {\n        location: location,\n        accessor: accessor\n      };\n    }\n  }, {\n    key: \"_getAttributeInfo\",\n    value: function _getAttributeInfo(attributeName) {\n      return this.configuration && this.configuration.getAttributeInfo(attributeName);\n    }\n  }, {\n    key: \"_getAttributeIndex\",\n    value: function _getAttributeIndex(locationOrName) {\n      var location = Number(locationOrName);\n\n      if (Number.isFinite(location)) {\n        return {\n          location: location\n        };\n      }\n\n      var multiLocation = MULTI_LOCATION_ATTRIBUTE_REGEXP.exec(locationOrName);\n      var name = multiLocation ? multiLocation[1] : locationOrName;\n      var locationOffset = multiLocation ? Number(multiLocation[2]) : 0;\n\n      if (this.configuration) {\n        return {\n          location: this.configuration.getAttributeLocation(name) + locationOffset,\n          name: name\n        };\n      }\n\n      return {\n        location: -1\n      };\n    }\n  }, {\n    key: \"_setAttribute\",\n    value: function _setAttribute(locationOrName, value) {\n      if (value instanceof Buffer) {\n        this.setBuffer(locationOrName, value);\n      } else if (Array.isArray(value) && value.length && value[0] instanceof Buffer) {\n        var buffer = value[0];\n        var accessor = value[1];\n        this.setBuffer(locationOrName, buffer, accessor);\n      } else if (ArrayBuffer.isView(value) || Array.isArray(value)) {\n        var constant = value;\n        this.setConstant(locationOrName, constant);\n      } else if (value.buffer instanceof Buffer) {\n        var _accessor = value;\n        this.setBuffer(locationOrName, _accessor.buffer, _accessor);\n      } else {\n        throw new Error(ERR_ATTRIBUTE_TYPE);\n      }\n    }\n  }, {\n    key: \"_setConstantAttributes\",\n    value: function _setConstantAttributes(vertexCount, instanceCount) {\n      var elementCount = Math.max(vertexCount | 0, instanceCount | 0);\n      var constant = this.values[0];\n\n      if (ArrayBuffer.isView(constant)) {\n        this._setConstantAttributeZero(constant, elementCount);\n      }\n\n      for (var location = 1; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        constant = this.values[location];\n\n        if (ArrayBuffer.isView(constant)) {\n          this._setConstantAttribute(location, constant);\n        }\n      }\n    }\n  }, {\n    key: \"_setConstantAttributeZero\",\n    value: function _setConstantAttributeZero(constant, elementCount) {\n      if (VertexArrayObject.isSupported(this.gl, {\n        constantAttributeZero: true\n      })) {\n        this._setConstantAttribute(0, constant);\n\n        return;\n      }\n\n      var buffer = this.vertexArrayObject.getConstantBuffer(elementCount, constant);\n      this.vertexArrayObject.setBuffer(0, buffer, this.accessors[0]);\n    }\n  }, {\n    key: \"_setConstantAttribute\",\n    value: function _setConstantAttribute(location, constant) {\n      VertexArrayObject.setConstant(this.gl, location, constant);\n    }\n  }, {\n    key: \"_updateDrawParams\",\n    value: function _updateDrawParams() {\n      var drawParams = {\n        isIndexed: false,\n        isInstanced: false,\n        indexCount: Infinity,\n        vertexCount: Infinity,\n        instanceCount: Infinity\n      };\n\n      for (var location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        this._updateDrawParamsForLocation(drawParams, location);\n      }\n\n      if (this.elements) {\n        drawParams.elementCount = this.elements.getElementCount(this.elements.accessor);\n        drawParams.isIndexed = true;\n        drawParams.indexType = this.elementsAccessor.type || this.elements.accessor.type;\n        drawParams.indexOffset = this.elementsAccessor.offset || 0;\n      }\n\n      if (drawParams.indexCount === Infinity) {\n        drawParams.indexCount = 0;\n      }\n\n      if (drawParams.vertexCount === Infinity) {\n        drawParams.vertexCount = 0;\n      }\n\n      if (drawParams.instanceCount === Infinity) {\n        drawParams.instanceCount = 0;\n      }\n\n      return drawParams;\n    }\n  }, {\n    key: \"_updateDrawParamsForLocation\",\n    value: function _updateDrawParamsForLocation(drawParams, location) {\n      var value = this.values[location];\n      var accessor = this.accessors[location];\n\n      if (!value) {\n        return;\n      }\n\n      var divisor = accessor.divisor;\n      var isInstanced = divisor > 0;\n      drawParams.isInstanced = drawParams.isInstanced || isInstanced;\n\n      if (value instanceof Buffer) {\n        var buffer = value;\n\n        if (isInstanced) {\n          var instanceCount = buffer.getVertexCount(accessor);\n          drawParams.instanceCount = Math.min(drawParams.instanceCount, instanceCount);\n        } else {\n          var vertexCount = buffer.getVertexCount(accessor);\n          drawParams.vertexCount = Math.min(drawParams.vertexCount, vertexCount);\n        }\n      }\n    }\n  }, {\n    key: \"setElements\",\n    value: function setElements() {\n      var elementBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      log.deprecated('setElements', 'setElementBuffer')();\n      return this.setElementBuffer(elementBuffer, accessor);\n    }\n  }]);\n\n  return VertexArray;\n}();\n\nexport { VertexArray as default };","map":{"version":3,"mappings":"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","names":["log","Accessor","Buffer","VertexArrayObject","assert","stubRemovedMethods","ERR_ATTRIBUTE_TYPE","MULTI_LOCATION_ATTRIBUTE_REGEXP","DEPRECATIONS_V6","VertexArray","constructor","gl","opts","id","program","configuration","elements","elementsAccessor","values","accessors","unused","drawParams","buffer","attributes","vertexArrayObject","initialize","Object","seal","delete","props","reset","bindOnUse","setProps","MAX_ATTRIBUTES","Array","fill","setAttributes","setElementBuffer","clearDrawParams","getDrawParams","_updateDrawParams","assign","bind","locationOrName","value","_setAttribute","bindBuffer","elementBuffer","accessor","setBuffer","appAccessor","target","_resolveLocationAndAccessor","location","setConstant","arrayValue","size","length","_normalizeConstantArrayValue","enable","unbindBuffers","disableVertexAttribArray","handle","vertexAttribPointer","bindBuffers","bindForDraw","vertexCount","instanceCount","func","_setConstantAttributes","valueAccessor","INVALID_RESULT","_getAttributeIndex","name","Number","isFinite","once","accessInfo","_getAttributeInfo","currentAccessor","resolve","type","attributeName","getAttributeInfo","multiLocation","exec","locationOffset","getAttributeLocation","isArray","ArrayBuffer","isView","constant","Error","elementCount","Math","max","_setConstantAttributeZero","_setConstantAttribute","isSupported","constantAttributeZero","getConstantBuffer","isIndexed","isInstanced","indexCount","Infinity","_updateDrawParamsForLocation","getElementCount","indexType","indexOffset","offset","divisor","getVertexCount","min","setElements","deprecated"],"sources":["../../../src/classes/vertex-array.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {log} from '@luma.gl/gltools';\nimport Accessor from './accessor';\nimport Buffer from './buffer';\nimport VertexArrayObject from './vertex-array-object';\nimport {assert} from '../utils/assert';\nimport {stubRemovedMethods} from '../utils/stub-methods';\n\nconst ERR_ATTRIBUTE_TYPE =\n  'VertexArray: attributes must be Buffers or constants (i.e. typed array)';\n\n// This is done to support mat type attributes.\n// See section \"Notes about setting mat type attributes\"\n// in vertex-array.md\nconst MULTI_LOCATION_ATTRIBUTE_REGEXP = /^(.+)__LOCATION_([0-9]+)$/;\n\nconst DEPRECATIONS_V6 = [\n  'setBuffers',\n  'setGeneric',\n  'clearBindings',\n  'setLocations',\n  'setGenericValues',\n  'setDivisor',\n  'enable',\n  'disable'\n];\n\nexport default class VertexArray {\n  constructor(gl, opts = {}) {\n    // Use program's id if program is supplied but no id is supplied\n    const id = opts.id || (opts.program && opts.program.id);\n    // super(gl, Object.assign({}, opts, {id}));\n\n    this.id = id;\n    this.gl = gl;\n    this.configuration = null;\n\n    // Extracted information\n    this.elements = null;\n    this.elementsAccessor = null;\n    this.values = null;\n    this.accessors = null;\n    this.unused = null;\n    this.drawParams = null;\n    this.buffer = null; // For attribute 0 on desktops, and created when unbinding buffers\n\n    this.attributes = {};\n\n    this.vertexArrayObject = new VertexArrayObject(gl);\n\n    // Issue errors when using removed methods\n    stubRemovedMethods(this, 'VertexArray', 'v6.0', DEPRECATIONS_V6);\n\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  delete() {\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n\n    this.vertexArrayObject.delete();\n  }\n\n  initialize(props = {}) {\n    this.reset();\n    this.configuration = null;\n    this.bindOnUse = false;\n    return this.setProps(props);\n  }\n\n  // Resets all attributes (to default valued constants)\n  reset() {\n    // this.vertexArrayObject.reset();\n\n    this.elements = null;\n    this.elementsAccessor = null;\n    const {MAX_ATTRIBUTES} = this.vertexArrayObject;\n    this.values = new Array(MAX_ATTRIBUTES).fill(null);\n    this.accessors = new Array(MAX_ATTRIBUTES).fill(null);\n    this.unused = {};\n\n    // Auto detects draw params\n    this.drawParams = null;\n\n    return this;\n  }\n\n  setProps(props) {\n    if ('program' in props) {\n      this.configuration = props.program && props.program.configuration;\n    }\n    if ('configuration' in props) {\n      this.configuration = props.configuration;\n    }\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n    if ('elements' in props) {\n      this.setElementBuffer(props.elements);\n    }\n    if ('bindOnUse' in props) {\n      props = props.bindOnUse;\n    }\n    return this;\n  }\n\n  // Automatically called if buffers changed through VertexArray API\n  clearDrawParams() {\n    this.drawParams = null;\n  }\n\n  getDrawParams() {\n    // Auto deduced draw parameters\n    this.drawParams = this.drawParams || this._updateDrawParams();\n\n    return this.drawParams;\n  }\n\n  // Set (bind) an array or map of vertex array buffers, either in numbered or named locations.\n  // For names that are not present in `location`, the supplied buffers will be ignored.\n  // if a single buffer of type GL.ELEMENT_ARRAY_BUFFER is present, it will be set as elements\n  //   Signatures:\n  //     {attributeName: buffer}\n  //     {attributeName: [buffer, accessor]}\n  //     {attributeName: (typed) array} => constant\n  setAttributes(attributes) {\n    Object.assign(this.attributes, attributes);\n    this.vertexArrayObject.bind(() => {\n      for (const locationOrName in attributes) {\n        const value = attributes[locationOrName];\n        this._setAttribute(locationOrName, value);\n      }\n      // Make sure we don't leave any bindings\n      this.gl.bindBuffer(GL.ARRAY_BUFFER, null);\n    });\n\n    return this;\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n  setElementBuffer(elementBuffer = null, accessor = {}) {\n    this.elements = elementBuffer; // Save value for debugging\n    this.elementsAccessor = accessor;\n    this.clearDrawParams();\n    this.vertexArrayObject.setElementBuffer(elementBuffer, accessor);\n\n    return this;\n  }\n\n  // Set a location in vertex attributes array to a buffer\n  setBuffer(locationOrName, buffer, appAccessor = {}) {\n    // Check target\n    if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n      return this.setElementBuffer(buffer, appAccessor);\n    }\n\n    const {location, accessor} = this._resolveLocationAndAccessor(\n      locationOrName,\n      buffer,\n      buffer.accessor,\n      appAccessor\n    );\n\n    if (location >= 0) {\n      this.values[location] = buffer;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n      this.vertexArrayObject.setBuffer(location, buffer, accessor);\n    }\n\n    return this;\n  }\n\n  // Set attribute to constant value (small typed array corresponding to one vertex' worth of data)\n  setConstant(locationOrName, arrayValue, appAccessor = {}) {\n    const {location, accessor} = this._resolveLocationAndAccessor(\n      locationOrName,\n      arrayValue,\n      // Ensure that size isn't taken from program for multi-column\n      // attributes\n      Object.assign({size: arrayValue.length}, appAccessor)\n    );\n\n    if (location >= 0) {\n      arrayValue = this.vertexArrayObject._normalizeConstantArrayValue(arrayValue);\n\n      this.values[location] = arrayValue;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n\n      // NOTE: We set the actual constant value later on bind. We can't set the value now since\n      // constants are global and affect all other VertexArrays that have disabled attributes\n      // in the same location.\n      // We do disable the attribute which makes it use the global constant value at that location\n      this.vertexArrayObject.enable(location, false);\n    }\n\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, unbind temporarily to avoid conflicting with TransformFeedback\n  unbindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.vertexArrayObject.setElementBuffer(null);\n      }\n\n      // Chrome does not like buffers that are bound to several binding points,\n      // so we need to offer and unbind facility\n      // WebGL offers disabling, but no clear way to set a VertexArray buffer to `null`\n      // So we just bind all the attributes to the dummy \"attribute zero\" buffer\n      this.buffer = this.buffer || new Buffer(this.gl, {accessor: {size: 4}});\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        if (this.values[location] instanceof Buffer) {\n          this.gl.disableVertexAttribArray(location);\n          this.gl.bindBuffer(GL.ARRAY_BUFFER, this.buffer.handle);\n          this.gl.vertexAttribPointer(location, 1, GL.FLOAT, false, 0, 0);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, rebind rebind after temporary unbind\n  bindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.setElementBuffer(this.elements);\n      }\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        const buffer = this.values[location];\n        if (buffer instanceof Buffer) {\n          this.setBuffer(location, buffer);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Bind for use\n  // When a vertex array is about to be used, we must:\n  // - Set constant attributes (since these are stored on the context and reset on bind)\n  // - Check if we need to initialize the buffer\n  bindForDraw(vertexCount, instanceCount, func) {\n    let value;\n\n    this.vertexArrayObject.bind(() => {\n      // Make sure that any constant attributes are updated (stored on the context, not the VAO)\n      // Also handles attribute 0\n      this._setConstantAttributes(vertexCount, instanceCount);\n\n      value = func();\n    });\n\n    return value;\n  }\n\n  // PRIVATE\n\n  // Resolve locations and accessors\n  _resolveLocationAndAccessor(locationOrName, value, valueAccessor, appAccessor) {\n    const INVALID_RESULT = {\n      location: -1,\n      accessor: null\n    };\n\n    const {location, name} = this._getAttributeIndex(locationOrName);\n    if (!Number.isFinite(location) || location < 0) {\n      this.unused[locationOrName] = value;\n      log.once(3, () => `unused value ${locationOrName} in ${this.id}`)();\n      return INVALID_RESULT;\n    }\n\n    const accessInfo = this._getAttributeInfo(name || location);\n\n    // Attribute location wasn't directly found.\n    // Likely due to multi-location attributes (e.g. matrix)\n    if (!accessInfo) {\n      return INVALID_RESULT;\n    }\n\n    // Resolve the partial accessors into a final accessor\n    const currentAccessor = this.accessors[location] || {};\n    const accessor = Accessor.resolve(\n      accessInfo.accessor,\n      currentAccessor,\n      valueAccessor,\n      appAccessor\n    );\n\n    const {size, type} = accessor;\n    assert(Number.isFinite(size) && Number.isFinite(type));\n\n    return {location, accessor};\n  }\n\n  _getAttributeInfo(attributeName) {\n    return this.configuration && this.configuration.getAttributeInfo(attributeName);\n  }\n\n  _getAttributeIndex(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return {location};\n    }\n\n    const multiLocation = MULTI_LOCATION_ATTRIBUTE_REGEXP.exec(locationOrName);\n    const name = multiLocation ? multiLocation[1] : locationOrName;\n    const locationOffset = multiLocation ? Number(multiLocation[2]) : 0;\n\n    if (this.configuration) {\n      return {\n        location: this.configuration.getAttributeLocation(name) + locationOffset,\n        name\n      };\n    }\n\n    return {location: -1};\n  }\n\n  _setAttribute(locationOrName, value) {\n    if (value instanceof Buffer) {\n      //  Signature: {attributeName: Buffer}\n      this.setBuffer(locationOrName, value);\n    } else if (Array.isArray(value) && value.length && value[0] instanceof Buffer) {\n      // Signature: {attributeName: [buffer, accessor]}\n      const buffer = value[0];\n      const accessor = value[1];\n      this.setBuffer(locationOrName, buffer, accessor);\n    } else if (ArrayBuffer.isView(value) || Array.isArray(value)) {\n      // Signature: {attributeName: constant}, constant == short (typed) array\n      const constant = value;\n      this.setConstant(locationOrName, constant);\n    } else if (value.buffer instanceof Buffer) {\n      // luma.gl v7: Support accessor objects with 'buffer' field\n      // for interleaved data\n      // Signature: {attributeName: {...accessor, buffer}}\n      const accessor = value;\n      this.setBuffer(locationOrName, accessor.buffer, accessor);\n    } else {\n      throw new Error(ERR_ATTRIBUTE_TYPE);\n    }\n  }\n\n  // Updates all constant attribute values (constants are used when vertex attributes are disabled).\n  // This needs to be done repeatedly since in contrast to buffer bindings,\n  // constants are stored on the WebGL context, not the VAO\n  _setConstantAttributes(vertexCount, instanceCount) {\n    // TODO - use accessor to determine what length to use\n    const elementCount = Math.max(vertexCount | 0, instanceCount | 0);\n    let constant = this.values[0];\n    if (ArrayBuffer.isView(constant)) {\n      this._setConstantAttributeZero(constant, elementCount);\n    }\n\n    for (let location = 1; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      constant = this.values[location];\n      if (ArrayBuffer.isView(constant)) {\n        this._setConstantAttribute(location, constant);\n      }\n    }\n  }\n\n  _setConstantAttributeZero(constant, elementCount) {\n    if (VertexArrayObject.isSupported(this.gl, {constantAttributeZero: true})) {\n      this._setConstantAttribute(0, constant);\n      return;\n    }\n\n    // Get a dummy buffer populated with repeated constants\n    const buffer = this.vertexArrayObject.getConstantBuffer(elementCount, constant);\n\n    // Set the buffer on location 0\n    this.vertexArrayObject.setBuffer(0, buffer, this.accessors[0]);\n  }\n\n  _setConstantAttribute(location, constant) {\n    VertexArrayObject.setConstant(this.gl, location, constant);\n  }\n\n  // Walks the buffers and updates draw parameters\n  _updateDrawParams() {\n    const drawParams = {\n      isIndexed: false,\n      isInstanced: false,\n      indexCount: Infinity,\n      vertexCount: Infinity,\n      instanceCount: Infinity\n    };\n\n    for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      this._updateDrawParamsForLocation(drawParams, location);\n    }\n\n    if (this.elements) {\n      // indexing is autodetected - buffer with target GL.ELEMENT_ARRAY_BUFFER\n      // index type is saved for drawElement calls\n      drawParams.elementCount = this.elements.getElementCount(this.elements.accessor);\n      drawParams.isIndexed = true;\n      drawParams.indexType = this.elementsAccessor.type || this.elements.accessor.type;\n      drawParams.indexOffset = this.elementsAccessor.offset || 0;\n    }\n\n    // Post-calculation checks\n    if (drawParams.indexCount === Infinity) {\n      drawParams.indexCount = 0;\n    }\n    if (drawParams.vertexCount === Infinity) {\n      drawParams.vertexCount = 0;\n    }\n    if (drawParams.instanceCount === Infinity) {\n      drawParams.instanceCount = 0;\n    }\n\n    return drawParams;\n  }\n\n  _updateDrawParamsForLocation(drawParams, location) {\n    const value = this.values[location];\n    const accessor = this.accessors[location];\n\n    if (!value) {\n      return;\n    }\n\n    // Check if instanced (whether buffer or constant)\n    const {divisor} = accessor;\n    const isInstanced = divisor > 0;\n    drawParams.isInstanced = drawParams.isInstanced || isInstanced;\n\n    if (value instanceof Buffer) {\n      const buffer = value;\n\n      if (isInstanced) {\n        // instance attribute\n        const instanceCount = buffer.getVertexCount(accessor);\n        drawParams.instanceCount = Math.min(drawParams.instanceCount, instanceCount);\n      } else {\n        // normal attribute\n        const vertexCount = buffer.getVertexCount(accessor);\n        drawParams.vertexCount = Math.min(drawParams.vertexCount, vertexCount);\n      }\n    }\n  }\n\n  // DEPRECATED in v6.x - but not warnings not properly implemented\n\n  setElements(elementBuffer = null, accessor = {}) {\n    log.deprecated('setElements', 'setElementBuffer')();\n    return this.setElementBuffer(elementBuffer, accessor);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}