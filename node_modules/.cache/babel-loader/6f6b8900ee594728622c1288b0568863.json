{"ast":null,"code":"import _defineProperty2 from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Vector3, Matrix4 } from '@math.gl/core';\nimport { CullingVolume } from '@math.gl/culling';\nimport { load } from '@loaders.gl/core';\nimport { TILE_REFINEMENT, TILE_CONTENT_STATE, TILESET_TYPE } from '../constants';\nimport { createBoundingVolume } from './helpers/bounding-volume';\nimport { getTiles3DScreenSpaceError } from './helpers/tiles-3d-lod';\nimport { getProjectedRadius } from './helpers/i3s-lod';\nimport { get3dTilesOptions } from './helpers/3d-tiles-options';\nimport TilesetTraverser from './traversers/tileset-traverser';\nvar scratchVector = new Vector3();\n\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\n\nvar TileHeader = /*#__PURE__*/function () {\n  function TileHeader(tileset, header, parentHeader) {\n    var extendedId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n\n    _classCallCheck(this, TileHeader);\n\n    _defineProperty(this, \"tileset\", void 0);\n\n    _defineProperty(this, \"header\", void 0);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"url\", void 0);\n\n    _defineProperty(this, \"parent\", void 0);\n\n    _defineProperty(this, \"refine\", void 0);\n\n    _defineProperty(this, \"type\", void 0);\n\n    _defineProperty(this, \"contentUrl\", void 0);\n\n    _defineProperty(this, \"lodMetricType\", void 0);\n\n    _defineProperty(this, \"lodMetricValue\", void 0);\n\n    _defineProperty(this, \"boundingVolume\", void 0);\n\n    _defineProperty(this, \"content\", void 0);\n\n    _defineProperty(this, \"contentState\", void 0);\n\n    _defineProperty(this, \"gpuMemoryUsageInBytes\", void 0);\n\n    _defineProperty(this, \"children\", void 0);\n\n    _defineProperty(this, \"depth\", void 0);\n\n    _defineProperty(this, \"viewportIds\", void 0);\n\n    _defineProperty(this, \"transform\", void 0);\n\n    _defineProperty(this, \"extensions\", void 0);\n\n    _defineProperty(this, \"userData\", void 0);\n\n    _defineProperty(this, \"computedTransform\", void 0);\n\n    _defineProperty(this, \"hasEmptyContent\", void 0);\n\n    _defineProperty(this, \"hasTilesetContent\", void 0);\n\n    _defineProperty(this, \"traverser\", void 0);\n\n    _defineProperty(this, \"_cacheNode\", void 0);\n\n    _defineProperty(this, \"_frameNumber\", void 0);\n\n    _defineProperty(this, \"_lodJudge\", void 0);\n\n    _defineProperty(this, \"_expireDate\", void 0);\n\n    _defineProperty(this, \"_expiredContent\", void 0);\n\n    _defineProperty(this, \"_shouldRefine\", void 0);\n\n    _defineProperty(this, \"_distanceToCamera\", void 0);\n\n    _defineProperty(this, \"_centerZDepth\", void 0);\n\n    _defineProperty(this, \"_screenSpaceError\", void 0);\n\n    _defineProperty(this, \"_visibilityPlaneMask\", void 0);\n\n    _defineProperty(this, \"_visible\", void 0);\n\n    _defineProperty(this, \"_inRequestVolume\", void 0);\n\n    _defineProperty(this, \"_stackLength\", void 0);\n\n    _defineProperty(this, \"_selectionDepth\", void 0);\n\n    _defineProperty(this, \"_touchedFrame\", void 0);\n\n    _defineProperty(this, \"_visitedFrame\", void 0);\n\n    _defineProperty(this, \"_selectedFrame\", void 0);\n\n    _defineProperty(this, \"_requestedFrame\", void 0);\n\n    _defineProperty(this, \"_priority\", void 0);\n\n    _defineProperty(this, \"_contentBoundingVolume\", void 0);\n\n    _defineProperty(this, \"_viewerRequestVolume\", void 0);\n\n    _defineProperty(this, \"_initialTransform\", void 0);\n\n    this.header = header;\n    this.tileset = tileset;\n    this.id = extendedId || header.id;\n    this.url = header.url;\n    this.parent = parentHeader;\n    this.refine = this._getRefine(header.refine);\n    this.type = header.type;\n    this.contentUrl = header.contentUrl;\n    this.lodMetricType = 'geometricError';\n    this.lodMetricValue = 0;\n    this.boundingVolume = null;\n    this.content = null;\n    this.contentState = TILE_CONTENT_STATE.UNLOADED;\n    this.gpuMemoryUsageInBytes = 0;\n    this.children = [];\n    this.hasEmptyContent = false;\n    this.hasTilesetContent = false;\n    this.depth = 0;\n    this.viewportIds = [];\n    this.userData = {};\n    this.extensions = null;\n    this._priority = 0;\n    this._touchedFrame = 0;\n    this._visitedFrame = 0;\n    this._selectedFrame = 0;\n    this._requestedFrame = 0;\n    this._screenSpaceError = 0;\n    this._cacheNode = null;\n    this._frameNumber = null;\n    this._cacheNode = null;\n    this.traverser = new TilesetTraverser({});\n    this._shouldRefine = false;\n    this._distanceToCamera = 0;\n    this._centerZDepth = 0;\n    this._visible = undefined;\n    this._inRequestVolume = false;\n    this._stackLength = 0;\n    this._selectionDepth = 0;\n    this._initialTransform = new Matrix4();\n    this.transform = new Matrix4();\n\n    this._initializeLodMetric(header);\n\n    this._initializeTransforms(header);\n\n    this._initializeBoundingVolumes(header);\n\n    this._initializeContent(header);\n\n    this._initializeRenderingState(header);\n\n    this._lodJudge = null;\n    this._expireDate = null;\n    this._expiredContent = null;\n    Object.seal(this);\n  }\n\n  _createClass(TileHeader, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.header = null;\n    }\n  }, {\n    key: \"isDestroyed\",\n    value: function isDestroyed() {\n      return this.header === null;\n    }\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this._selectedFrame === this.tileset._frameNumber;\n    }\n  }, {\n    key: \"isVisible\",\n    get: function get() {\n      return this._visible;\n    }\n  }, {\n    key: \"isVisibleAndInRequestVolume\",\n    get: function get() {\n      return this._visible && this._inRequestVolume;\n    }\n  }, {\n    key: \"hasRenderContent\",\n    get: function get() {\n      return !this.hasEmptyContent && !this.hasTilesetContent;\n    }\n  }, {\n    key: \"hasChildren\",\n    get: function get() {\n      return this.children.length > 0 || this.header.children && this.header.children.length > 0;\n    }\n  }, {\n    key: \"contentReady\",\n    get: function get() {\n      return this.contentState === TILE_CONTENT_STATE.READY || this.hasEmptyContent;\n    }\n  }, {\n    key: \"contentAvailable\",\n    get: function get() {\n      return Boolean(this.contentReady && this.hasRenderContent || this._expiredContent && !this.contentFailed);\n    }\n  }, {\n    key: \"hasUnloadedContent\",\n    get: function get() {\n      return this.hasRenderContent && this.contentUnloaded;\n    }\n  }, {\n    key: \"contentUnloaded\",\n    get: function get() {\n      return this.contentState === TILE_CONTENT_STATE.UNLOADED;\n    }\n  }, {\n    key: \"contentExpired\",\n    get: function get() {\n      return this.contentState === TILE_CONTENT_STATE.EXPIRED;\n    }\n  }, {\n    key: \"contentFailed\",\n    get: function get() {\n      return this.contentState === TILE_CONTENT_STATE.FAILED;\n    }\n  }, {\n    key: \"getScreenSpaceError\",\n    value: function getScreenSpaceError(frameState, useParentLodMetric) {\n      switch (this.tileset.type) {\n        case TILESET_TYPE.I3S:\n          return getProjectedRadius(this, frameState);\n\n        case TILESET_TYPE.TILES3D:\n          return getTiles3DScreenSpaceError(this, frameState, useParentLodMetric);\n\n        default:\n          throw new Error('Unsupported tileset type');\n      }\n    }\n  }, {\n    key: \"_getPriority\",\n    value: function _getPriority() {\n      var traverser = this.tileset._traverser;\n      var skipLevelOfDetail = traverser.options.skipLevelOfDetail;\n      var maySkipTile = this.refine === TILE_REFINEMENT.ADD || skipLevelOfDetail;\n\n      if (maySkipTile && !this.isVisible && this._visible !== undefined) {\n        return -1;\n      }\n\n      if (this.tileset._frameNumber - this._touchedFrame >= 1) {\n        return -1;\n      }\n\n      if (this.contentState === TILE_CONTENT_STATE.UNLOADED) {\n        return -1;\n      }\n\n      var parent = this.parent;\n      var useParentScreenSpaceError = parent && (!maySkipTile || this._screenSpaceError === 0.0 || parent.hasTilesetContent);\n      var screenSpaceError = useParentScreenSpaceError ? parent._screenSpaceError : this._screenSpaceError;\n      var rootScreenSpaceError = traverser.root ? traverser.root._screenSpaceError : 0.0;\n      return Math.max(rootScreenSpaceError - screenSpaceError, 0);\n    }\n  }, {\n    key: \"loadContent\",\n    value: function () {\n      var _loadContent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var expired, requestToken, contentUrl, loader, options;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.hasEmptyContent) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 2:\n                if (!this.content) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", true);\n\n              case 4:\n                expired = this.contentExpired;\n\n                if (expired) {\n                  this._expireDate = null;\n                }\n\n                this.contentState = TILE_CONTENT_STATE.LOADING;\n                _context.next = 9;\n                return this.tileset._requestScheduler.scheduleRequest(this.id, this._getPriority.bind(this));\n\n              case 9:\n                requestToken = _context.sent;\n\n                if (requestToken) {\n                  _context.next = 13;\n                  break;\n                }\n\n                this.contentState = TILE_CONTENT_STATE.UNLOADED;\n                return _context.abrupt(\"return\", false);\n\n              case 13:\n                _context.prev = 13;\n                contentUrl = this.tileset.getTileUrl(this.contentUrl);\n                loader = this.tileset.loader;\n                options = _objectSpread(_objectSpread({}, this.tileset.loadOptions), {}, _defineProperty2({}, loader.id, _objectSpread(_objectSpread({}, this.tileset.loadOptions[loader.id]), {}, {\n                  isTileset: this.type === 'json'\n                }, this._getLoaderSpecificOptions(loader.id))));\n                _context.next = 19;\n                return load(contentUrl, loader, options);\n\n              case 19:\n                this.content = _context.sent;\n\n                if (!this.tileset.options.contentLoader) {\n                  _context.next = 23;\n                  break;\n                }\n\n                _context.next = 23;\n                return this.tileset.options.contentLoader(this);\n\n              case 23:\n                if (this._isTileset()) {\n                  this.tileset._initializeTileHeaders(this.content, this);\n                }\n\n                this.contentState = TILE_CONTENT_STATE.READY;\n\n                this._onContentLoaded();\n\n                return _context.abrupt(\"return\", true);\n\n              case 29:\n                _context.prev = 29;\n                _context.t0 = _context[\"catch\"](13);\n                this.contentState = TILE_CONTENT_STATE.FAILED;\n                throw _context.t0;\n\n              case 33:\n                _context.prev = 33;\n                requestToken.done();\n                return _context.finish(33);\n\n              case 36:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[13, 29, 33, 36]]);\n      }));\n\n      function loadContent() {\n        return _loadContent.apply(this, arguments);\n      }\n\n      return loadContent;\n    }()\n  }, {\n    key: \"unloadContent\",\n    value: function unloadContent() {\n      if (this.content && this.content.destroy) {\n        this.content.destroy();\n      }\n\n      this.content = null;\n\n      if (this.header.content && this.header.content.destroy) {\n        this.header.content.destroy();\n      }\n\n      this.header.content = null;\n      this.contentState = TILE_CONTENT_STATE.UNLOADED;\n      return true;\n    }\n  }, {\n    key: \"updateVisibility\",\n    value: function updateVisibility(frameState, viewportIds) {\n      if (this._frameNumber === frameState.frameNumber) {\n        return;\n      }\n\n      var parent = this.parent;\n      var parentVisibilityPlaneMask = parent ? parent._visibilityPlaneMask : CullingVolume.MASK_INDETERMINATE;\n\n      if (this.tileset._traverser.options.updateTransforms) {\n        var parentTransform = parent ? parent.computedTransform : this.tileset.modelMatrix;\n\n        this._updateTransform(parentTransform);\n      }\n\n      this._distanceToCamera = this.distanceToTile(frameState);\n      this._screenSpaceError = this.getScreenSpaceError(frameState, false);\n      this._visibilityPlaneMask = this.visibility(frameState, parentVisibilityPlaneMask);\n      this._visible = this._visibilityPlaneMask !== CullingVolume.MASK_OUTSIDE;\n      this._inRequestVolume = this.insideViewerRequestVolume(frameState);\n      this._frameNumber = frameState.frameNumber;\n      this.viewportIds = viewportIds;\n    }\n  }, {\n    key: \"visibility\",\n    value: function visibility(frameState, parentVisibilityPlaneMask) {\n      var cullingVolume = frameState.cullingVolume;\n      var boundingVolume = this.boundingVolume;\n      return cullingVolume.computeVisibilityWithPlaneMask(boundingVolume, parentVisibilityPlaneMask);\n    }\n  }, {\n    key: \"contentVisibility\",\n    value: function contentVisibility() {\n      return true;\n    }\n  }, {\n    key: \"distanceToTile\",\n    value: function distanceToTile(frameState) {\n      var boundingVolume = this.boundingVolume;\n      return Math.sqrt(Math.max(boundingVolume.distanceSquaredTo(frameState.camera.position), 0));\n    }\n  }, {\n    key: \"cameraSpaceZDepth\",\n    value: function cameraSpaceZDepth(_ref) {\n      var camera = _ref.camera;\n      var boundingVolume = this.boundingVolume;\n      scratchVector.subVectors(boundingVolume.center, camera.position);\n      return camera.direction.dot(scratchVector);\n    }\n  }, {\n    key: \"insideViewerRequestVolume\",\n    value: function insideViewerRequestVolume(frameState) {\n      var viewerRequestVolume = this._viewerRequestVolume;\n      return !viewerRequestVolume || viewerRequestVolume.distanceSquaredTo(frameState.camera.position) <= 0;\n    }\n  }, {\n    key: \"updateExpiration\",\n    value: function updateExpiration() {\n      if (defined(this._expireDate) && this.contentReady && !this.hasEmptyContent) {\n        var now = Date.now();\n\n        if (Date.lessThan(this._expireDate, now)) {\n          this.contentState = TILE_CONTENT_STATE.EXPIRED;\n          this._expiredContent = this.content;\n        }\n      }\n    }\n  }, {\n    key: \"extras\",\n    get: function get() {\n      return this.header.extras;\n    }\n  }, {\n    key: \"_initializeLodMetric\",\n    value: function _initializeLodMetric(header) {\n      if ('lodMetricType' in header) {\n        this.lodMetricType = header.lodMetricType;\n      } else {\n        this.lodMetricType = this.parent && this.parent.lodMetricType || this.tileset.lodMetricType;\n        console.warn(\"3D Tile: Required prop lodMetricType is undefined. Using parent lodMetricType\");\n      }\n\n      if ('lodMetricValue' in header) {\n        this.lodMetricValue = header.lodMetricValue;\n      } else {\n        this.lodMetricValue = this.parent && this.parent.lodMetricValue || this.tileset.lodMetricValue;\n        console.warn('3D Tile: Required prop lodMetricValue is undefined. Using parent lodMetricValue');\n      }\n    }\n  }, {\n    key: \"_initializeTransforms\",\n    value: function _initializeTransforms(tileHeader) {\n      this.transform = tileHeader.transform ? new Matrix4(tileHeader.transform) : new Matrix4();\n      var parent = this.parent;\n      var tileset = this.tileset;\n      var parentTransform = parent && parent.computedTransform ? parent.computedTransform.clone() : tileset.modelMatrix.clone();\n      this.computedTransform = new Matrix4(parentTransform).multiplyRight(this.transform);\n      var parentInitialTransform = parent && parent._initialTransform ? parent._initialTransform.clone() : new Matrix4();\n      this._initialTransform = new Matrix4(parentInitialTransform).multiplyRight(this.transform);\n    }\n  }, {\n    key: \"_initializeBoundingVolumes\",\n    value: function _initializeBoundingVolumes(tileHeader) {\n      this._contentBoundingVolume = null;\n      this._viewerRequestVolume = null;\n\n      this._updateBoundingVolume(tileHeader);\n    }\n  }, {\n    key: \"_initializeContent\",\n    value: function _initializeContent(tileHeader) {\n      this.content = {\n        _tileset: this.tileset,\n        _tile: this\n      };\n      this.hasEmptyContent = true;\n      this.contentState = TILE_CONTENT_STATE.UNLOADED;\n      this.hasTilesetContent = false;\n\n      if (tileHeader.contentUrl) {\n        this.content = null;\n        this.hasEmptyContent = false;\n      }\n    }\n  }, {\n    key: \"_initializeRenderingState\",\n    value: function _initializeRenderingState(header) {\n      this.depth = header.level || (this.parent ? this.parent.depth + 1 : 0);\n      this._shouldRefine = false;\n      this._distanceToCamera = 0;\n      this._centerZDepth = 0;\n      this._screenSpaceError = 0;\n      this._visibilityPlaneMask = CullingVolume.MASK_INDETERMINATE;\n      this._visible = undefined;\n      this._inRequestVolume = false;\n      this._stackLength = 0;\n      this._selectionDepth = 0;\n      this._frameNumber = 0;\n      this._touchedFrame = 0;\n      this._visitedFrame = 0;\n      this._selectedFrame = 0;\n      this._requestedFrame = 0;\n      this._priority = 0.0;\n    }\n  }, {\n    key: \"_getRefine\",\n    value: function _getRefine(refine) {\n      return refine || this.parent && this.parent.refine || TILE_REFINEMENT.REPLACE;\n    }\n  }, {\n    key: \"_isTileset\",\n    value: function _isTileset() {\n      return this.contentUrl.indexOf('.json') !== -1;\n    }\n  }, {\n    key: \"_onContentLoaded\",\n    value: function _onContentLoaded() {\n      switch (this.content && this.content.type) {\n        case 'vctr':\n        case 'geom':\n          this.tileset._traverser.disableSkipLevelOfDetail = true;\n          break;\n\n        default:\n      }\n\n      if (this._isTileset()) {\n        this.hasTilesetContent = true;\n      }\n    }\n  }, {\n    key: \"_updateBoundingVolume\",\n    value: function _updateBoundingVolume(header) {\n      this.boundingVolume = createBoundingVolume(header.boundingVolume, this.computedTransform, this.boundingVolume);\n      var content = header.content;\n\n      if (!content) {\n        return;\n      }\n\n      if (content.boundingVolume) {\n        this._contentBoundingVolume = createBoundingVolume(content.boundingVolume, this.computedTransform, this._contentBoundingVolume);\n      }\n\n      if (header.viewerRequestVolume) {\n        this._viewerRequestVolume = createBoundingVolume(header.viewerRequestVolume, this.computedTransform, this._viewerRequestVolume);\n      }\n    }\n  }, {\n    key: \"_updateTransform\",\n    value: function _updateTransform() {\n      var parentTransform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Matrix4();\n      var computedTransform = parentTransform.clone().multiplyRight(this.transform);\n      var didTransformChange = !computedTransform.equals(this.computedTransform);\n\n      if (!didTransformChange) {\n        return;\n      }\n\n      this.computedTransform = computedTransform;\n\n      this._updateBoundingVolume(this.header);\n    }\n  }, {\n    key: \"_getLoaderSpecificOptions\",\n    value: function _getLoaderSpecificOptions(loaderId) {\n      switch (loaderId) {\n        case 'i3s':\n          return _objectSpread(_objectSpread({}, this.tileset.options.i3s), {}, {\n            tile: this.header,\n            tileset: this.tileset.tileset,\n            isTileHeader: false\n          });\n\n        case '3d-tiles':\n        case 'cesium-ion':\n        default:\n          return get3dTilesOptions(this.tileset.tileset);\n      }\n    }\n  }]);\n\n  return TileHeader;\n}();\n\nexport { TileHeader as default };","map":{"version":3,"mappings":"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","names":["Vector3","Matrix4","CullingVolume","load","TILE_REFINEMENT","TILE_CONTENT_STATE","TILESET_TYPE","createBoundingVolume","getTiles3DScreenSpaceError","getProjectedRadius","get3dTilesOptions","TilesetTraverser","scratchVector","defined","x","undefined","TileHeader","constructor","tileset","header","parentHeader","extendedId","_defineProperty","id","url","parent","refine","_getRefine","type","contentUrl","lodMetricType","lodMetricValue","boundingVolume","content","contentState","UNLOADED","gpuMemoryUsageInBytes","children","hasEmptyContent","hasTilesetContent","depth","viewportIds","userData","extensions","_priority","_touchedFrame","_visitedFrame","_selectedFrame","_requestedFrame","_screenSpaceError","_cacheNode","_frameNumber","traverser","_shouldRefine","_distanceToCamera","_centerZDepth","_visible","_inRequestVolume","_stackLength","_selectionDepth","_initialTransform","transform","_initializeLodMetric","_initializeTransforms","_initializeBoundingVolumes","_initializeContent","_initializeRenderingState","_lodJudge","_expireDate","_expiredContent","Object","seal","destroy","isDestroyed","length","READY","Boolean","contentReady","hasRenderContent","contentFailed","contentUnloaded","EXPIRED","FAILED","getScreenSpaceError","frameState","useParentLodMetric","I3S","TILES3D","Error","_getPriority","_traverser","skipLevelOfDetail","options","maySkipTile","ADD","isVisible","useParentScreenSpaceError","screenSpaceError","rootScreenSpaceError","root","Math","max","expired","contentExpired","LOADING","_requestScheduler","scheduleRequest","bind","requestToken","getTileUrl","loader","loadOptions","isTileset","_getLoaderSpecificOptions","contentLoader","_isTileset","_initializeTileHeaders","_onContentLoaded","done","unloadContent","updateVisibility","frameNumber","parentVisibilityPlaneMask","_visibilityPlaneMask","MASK_INDETERMINATE","updateTransforms","parentTransform","computedTransform","modelMatrix","_updateTransform","distanceToTile","visibility","MASK_OUTSIDE","insideViewerRequestVolume","cullingVolume","computeVisibilityWithPlaneMask","contentVisibility","sqrt","distanceSquaredTo","camera","position","cameraSpaceZDepth","subVectors","center","direction","dot","viewerRequestVolume","_viewerRequestVolume","updateExpiration","now","Date","lessThan","extras","console","warn","tileHeader","clone","multiplyRight","parentInitialTransform","_contentBoundingVolume","_updateBoundingVolume","_tileset","_tile","level","REPLACE","indexOf","disableSkipLevelOfDetail","didTransformChange","equals","loaderId","i3s","tile","isTileHeader"],"sources":["../../../src/tileset/tile-3d.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\nimport {Vector3, Matrix4} from '@math.gl/core';\nimport {CullingVolume} from '@math.gl/culling';\n\nimport {load} from '@loaders.gl/core';\nimport {TILE_REFINEMENT, TILE_CONTENT_STATE, TILESET_TYPE} from '../constants';\n\nimport {FrameState} from './helpers/frame-state';\nimport {createBoundingVolume} from './helpers/bounding-volume';\nimport {getTiles3DScreenSpaceError} from './helpers/tiles-3d-lod';\nimport {getProjectedRadius} from './helpers/i3s-lod';\nimport {get3dTilesOptions} from './helpers/3d-tiles-options';\nimport TilesetTraverser from './traversers/tileset-traverser';\n\n// Note: circular dependency\nimport type Tileset3D from './tileset-3d';\n\nconst scratchVector = new Vector3();\n\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\n\n/**\n * @param tileset - Tileset3D instance\n * @param header - tile header - JSON loaded from a dataset\n * @param parentHeader - parent TileHeader instance\n * @param extendedId - optional ID to separate copies of a tile for different viewports.\n *                              const extendedId = `${tile.id}-${frameState.viewport.id}`;\n */\nexport type TileHeaderProps = {\n  tileset: Tileset3D;\n  header: Object;\n  parentHeader: TileHeader;\n  extendedId: string;\n};\n\n/**\n * A Tile3DHeader represents a tile as Tileset3D. When a tile is first created, its content is not loaded;\n * the content is loaded on-demand when needed based on the view.\n * Do not construct this directly, instead access tiles through {@link Tileset3D#tileVisible}.\n */\nexport default class TileHeader {\n  tileset: Tileset3D;\n  header: any;\n  id: string;\n  url: string;\n  parent: TileHeader;\n  refine: number;\n  type: string;\n  contentUrl: string;\n  lodMetricType: string;\n  lodMetricValue: number;\n  boundingVolume: any;\n  content: any;\n  contentState: any;\n  gpuMemoryUsageInBytes: number;\n  children: TileHeader[];\n  depth: number;\n  viewportIds: any[];\n  transform: Matrix4;\n  extensions: any;\n\n  // Container to store application specific data\n  userData: {[key: string]: any};\n  computedTransform: any;\n  hasEmptyContent: boolean;\n  hasTilesetContent: boolean;\n\n  traverser: object;\n\n  // @ts-ignore\n  private _cacheNode: any;\n  private _frameNumber: any;\n  // TODO i3s specific, needs to remove\n  // @ts-ignore\n  private _lodJudge: any;\n  // TODO Cesium 3d tiles specific\n  private _expireDate: any;\n  private _expiredContent: any;\n  // @ts-ignore\n  private _shouldRefine: boolean;\n\n  // Members this are updated every frame for tree traversal and rendering optimizations:\n  // @ts-ignore\n  private _distanceToCamera: number;\n  // @ts-ignore\n  private _centerZDepth: number;\n  private _screenSpaceError: number;\n  private _visibilityPlaneMask: any;\n  private _visible?: boolean;\n  private _inRequestVolume: boolean;\n\n  // @ts-ignore\n  private _stackLength: number;\n  // @ts-ignore\n  private _selectionDepth: number;\n\n  // @ts-ignore\n  private _touchedFrame: number;\n  // @ts-ignore\n  private _visitedFrame: number;\n  private _selectedFrame: number;\n  // @ts-ignore\n  private _requestedFrame: number;\n\n  // @ts-ignore\n  private _priority: number;\n\n  private _contentBoundingVolume: any;\n  private _viewerRequestVolume: any;\n\n  _initialTransform: Matrix4;\n\n  /**\n   * @constructs\n   * Create a TileHeader instance\n   * @param tileset - Tileset3D instance\n   * @param header - tile header - JSON loaded from a dataset\n   * @param parentHeader - parent TileHeader instance\n   * @param extendedId - optional ID to separate copies of a tile for different viewports.\n   *    const extendedId = `${tile.id}-${frameState.viewport.id}`;\n   */\n  // eslint-disable-next-line max-statements\n  constructor(\n    tileset: Tileset3D,\n    header: {[key: string]: any},\n    parentHeader?: TileHeader,\n    extendedId = ''\n  ) {\n    // PUBLIC MEMBERS\n    // original tile data\n    this.header = header;\n\n    // The tileset containing this tile.\n    this.tileset = tileset;\n    this.id = extendedId || header.id;\n    this.url = header.url;\n\n    // This tile's parent or `undefined` if this tile is the root.\n    // @ts-ignore\n    this.parent = parentHeader;\n    this.refine = this._getRefine(header.refine);\n    this.type = header.type;\n    this.contentUrl = header.contentUrl;\n\n    // The error, in meters, introduced if this tile is rendered and its children are not.\n    this.lodMetricType = 'geometricError';\n    this.lodMetricValue = 0;\n\n    // Specifies the type of refine that is used when traversing this tile for rendering.\n    this.boundingVolume = null;\n\n    // The tile's content.  This represents the actual tile's payload,\n    // not the content's metadata in the tileset JSON file.\n    this.content = null;\n    this.contentState = TILE_CONTENT_STATE.UNLOADED;\n    this.gpuMemoryUsageInBytes = 0;\n\n    // The tile's children - an array of Tile3D objects.\n    this.children = [];\n\n    this.hasEmptyContent = false;\n    this.hasTilesetContent = false;\n\n    this.depth = 0;\n    this.viewportIds = [];\n\n    // Container to store application specific data\n    this.userData = {};\n    this.extensions = null;\n\n    // PRIVATE MEMBERS\n    this._priority = 0;\n    this._touchedFrame = 0;\n    this._visitedFrame = 0;\n    this._selectedFrame = 0;\n    this._requestedFrame = 0;\n    this._screenSpaceError = 0;\n\n    this._cacheNode = null;\n    this._frameNumber = null;\n    this._cacheNode = null;\n\n    this.traverser = new TilesetTraverser({});\n    this._shouldRefine = false;\n    this._distanceToCamera = 0;\n    this._centerZDepth = 0;\n    this._visible = undefined;\n    this._inRequestVolume = false;\n    this._stackLength = 0;\n    this._selectionDepth = 0;\n    this._initialTransform = new Matrix4();\n    this.transform = new Matrix4();\n\n    this._initializeLodMetric(header);\n    this._initializeTransforms(header);\n    this._initializeBoundingVolumes(header);\n    this._initializeContent(header);\n    this._initializeRenderingState(header);\n\n    // TODO i3s specific, needs to remove\n    this._lodJudge = null;\n\n    // TODO Cesium 3d tiles specific\n    this._expireDate = null;\n    this._expiredContent = null;\n\n    Object.seal(this);\n  }\n\n  destroy() {\n    this.header = null;\n  }\n\n  isDestroyed() {\n    return this.header === null;\n  }\n\n  get selected() {\n    return this._selectedFrame === this.tileset._frameNumber;\n  }\n\n  get isVisible() {\n    return this._visible;\n  }\n\n  get isVisibleAndInRequestVolume() {\n    return this._visible && this._inRequestVolume;\n  }\n\n  /** Returns true if tile is not an empty tile and not an external tileset */\n  get hasRenderContent() {\n    return !this.hasEmptyContent && !this.hasTilesetContent;\n  }\n\n  /** Returns true if tile has children */\n  get hasChildren() {\n    return this.children.length > 0 || (this.header.children && this.header.children.length > 0);\n  }\n\n  /**\n   * Determines if the tile's content is ready. This is automatically `true` for\n   * tiles with empty content.\n   */\n  get contentReady() {\n    return this.contentState === TILE_CONTENT_STATE.READY || this.hasEmptyContent;\n  }\n\n  /**\n   * Determines if the tile has available content to render.  `true` if the tile's\n   * content is ready or if it has expired content this renders while new content loads; otherwise,\n   */\n  get contentAvailable() {\n    return Boolean(\n      (this.contentReady && this.hasRenderContent) || (this._expiredContent && !this.contentFailed)\n    );\n  }\n\n  /** Returns true if tile has renderable content but it's unloaded */\n  get hasUnloadedContent() {\n    return this.hasRenderContent && this.contentUnloaded;\n  }\n\n  /**\n   * Determines if the tile's content has not be requested. `true` if tile's\n   * content has not be requested; otherwise, `false`.\n   */\n  get contentUnloaded() {\n    return this.contentState === TILE_CONTENT_STATE.UNLOADED;\n  }\n\n  /**\n   * Determines if the tile's content is expired. `true` if tile's\n   * content is expired; otherwise, `false`.\n   */\n  get contentExpired() {\n    return this.contentState === TILE_CONTENT_STATE.EXPIRED;\n  }\n\n  // Determines if the tile's content failed to load.  `true` if the tile's\n  // content failed to load; otherwise, `false`.\n  get contentFailed() {\n    return this.contentState === TILE_CONTENT_STATE.FAILED;\n  }\n\n  /** Get the tile's screen space error. */\n  getScreenSpaceError(frameState, useParentLodMetric) {\n    switch (this.tileset.type) {\n      case TILESET_TYPE.I3S:\n        return getProjectedRadius(this, frameState);\n      case TILESET_TYPE.TILES3D:\n        return getTiles3DScreenSpaceError(this, frameState, useParentLodMetric);\n      default:\n        // eslint-disable-next-line\n        throw new Error('Unsupported tileset type');\n    }\n  }\n\n  /*\n   * If skipLevelOfDetail is off try to load child tiles as soon as possible so that their parent can refine sooner.\n   * Tiles are prioritized by screen space error.\n   */\n  // eslint-disable-next-line complexity\n  _getPriority() {\n    const traverser = this.tileset._traverser;\n    const {skipLevelOfDetail} = traverser.options;\n\n    /*\n     * Tiles that are outside of the camera's frustum could be skipped if we are in 'ADD' mode\n     * or if we are using 'Skip Traversal' in 'REPLACE' mode.\n     * Otherewise, all 'touched' child tiles have to be loaded and displayed,\n     * this may include tiles that are outide of the camera frustum (so that we can hide the parent tile).\n     */\n    const maySkipTile = this.refine === TILE_REFINEMENT.ADD || skipLevelOfDetail;\n\n    // Check if any reason to abort\n    if (maySkipTile && !this.isVisible && this._visible !== undefined) {\n      return -1;\n    }\n    // Condition used in `cancelOutOfViewRequests` function in CesiumJS/Cesium3DTileset.js\n    if (this.tileset._frameNumber - this._touchedFrame >= 1) {\n      return -1;\n    }\n    if (this.contentState === TILE_CONTENT_STATE.UNLOADED) {\n      return -1;\n    }\n\n    // Based on the priority function `getPriorityReverseScreenSpaceError` in CesiumJS. Scheduling priority is based on the parent's screen space error when possible.\n    const parent = this.parent;\n    const useParentScreenSpaceError =\n      parent && (!maySkipTile || this._screenSpaceError === 0.0 || parent.hasTilesetContent);\n    const screenSpaceError = useParentScreenSpaceError\n      ? parent._screenSpaceError\n      : this._screenSpaceError;\n\n    const rootScreenSpaceError = traverser.root ? traverser.root._screenSpaceError : 0.0;\n\n    // Map higher SSE to lower values (e.g. root tile is highest priority)\n    return Math.max(rootScreenSpaceError - screenSpaceError, 0);\n  }\n\n  /**\n   *  Requests the tile's content.\n   * The request may not be made if the Request Scheduler can't prioritize it.\n   */\n  // eslint-disable-next-line max-statements, complexity\n  async loadContent(): Promise<boolean> {\n    if (this.hasEmptyContent) {\n      return false;\n    }\n\n    if (this.content) {\n      return true;\n    }\n\n    const expired = this.contentExpired;\n\n    if (expired) {\n      this._expireDate = null;\n    }\n\n    this.contentState = TILE_CONTENT_STATE.LOADING;\n\n    const requestToken = await this.tileset._requestScheduler.scheduleRequest(\n      this.id,\n      this._getPriority.bind(this)\n    );\n\n    if (!requestToken) {\n      // cancelled\n      this.contentState = TILE_CONTENT_STATE.UNLOADED;\n      return false;\n    }\n\n    try {\n      const contentUrl = this.tileset.getTileUrl(this.contentUrl);\n      // The content can be a binary tile ot a JSON tileset\n      const loader = this.tileset.loader;\n      const options = {\n        ...this.tileset.loadOptions,\n        [loader.id]: {\n          ...this.tileset.loadOptions[loader.id],\n          isTileset: this.type === 'json',\n          ...this._getLoaderSpecificOptions(loader.id)\n        }\n      };\n\n      this.content = await load(contentUrl, loader, options);\n\n      if (this.tileset.options.contentLoader) {\n        await this.tileset.options.contentLoader(this);\n      }\n\n      if (this._isTileset()) {\n        // Add tile headers for the nested tilset's subtree\n        // Async update of the tree should be fine since there would never be edits to the same node\n        // TODO - we need to capture the child tileset's URL\n        this.tileset._initializeTileHeaders(this.content, this);\n      }\n\n      this.contentState = TILE_CONTENT_STATE.READY;\n      this._onContentLoaded();\n      return true;\n    } catch (error) {\n      // Tile is unloaded before the content finishes loading\n      this.contentState = TILE_CONTENT_STATE.FAILED;\n      throw error;\n    } finally {\n      requestToken.done();\n    }\n  }\n\n  // Unloads the tile's content.\n  unloadContent() {\n    if (this.content && this.content.destroy) {\n      this.content.destroy();\n    }\n    this.content = null;\n    if (this.header.content && this.header.content.destroy) {\n      this.header.content.destroy();\n    }\n    this.header.content = null;\n    this.contentState = TILE_CONTENT_STATE.UNLOADED;\n    return true;\n  }\n\n  /**\n   * Update the tile's visibility\n   * @param {Object} frameState - frame state for tile culling\n   * @param {string[]} viewportIds - a list of viewport ids that show this tile\n   * @return {void}\n   */\n  updateVisibility(frameState, viewportIds) {\n    if (this._frameNumber === frameState.frameNumber) {\n      // Return early if visibility has already been checked during the traversal.\n      // The visibility may have already been checked if the cullWithChildrenBounds optimization is used.\n      return;\n    }\n\n    const parent = this.parent;\n    const parentVisibilityPlaneMask = parent\n      ? parent._visibilityPlaneMask\n      : CullingVolume.MASK_INDETERMINATE;\n\n    if (this.tileset._traverser.options.updateTransforms) {\n      const parentTransform = parent ? parent.computedTransform : this.tileset.modelMatrix;\n      this._updateTransform(parentTransform);\n    }\n\n    this._distanceToCamera = this.distanceToTile(frameState);\n    this._screenSpaceError = this.getScreenSpaceError(frameState, false);\n    this._visibilityPlaneMask = this.visibility(frameState, parentVisibilityPlaneMask); // Use parent's plane mask to speed up visibility test\n    this._visible = this._visibilityPlaneMask !== CullingVolume.MASK_OUTSIDE;\n    this._inRequestVolume = this.insideViewerRequestVolume(frameState);\n\n    this._frameNumber = frameState.frameNumber;\n    this.viewportIds = viewportIds;\n  }\n\n  // Determines whether the tile's bounding volume intersects the culling volume.\n  // @param {FrameState} frameState The frame state.\n  // @param {Number} parentVisibilityPlaneMask The parent's plane mask to speed up the visibility check.\n  // @returns {Number} A plane mask as described above in {@link CullingVolume#computeVisibilityWithPlaneMask}.\n  visibility(frameState, parentVisibilityPlaneMask) {\n    const {cullingVolume} = frameState;\n    const {boundingVolume} = this;\n\n    // TODO Cesium specific - restore clippingPlanes\n    // const {clippingPlanes, clippingPlanesOriginMatrix} = tileset;\n    // if (clippingPlanes && clippingPlanes.enabled) {\n    //   const intersection = clippingPlanes.computeIntersectionWithBoundingVolume(\n    //     boundingVolume,\n    //     clippingPlanesOriginMatrix\n    //   );\n    //   this._isClipped = intersection !== Intersect.INSIDE;\n    //   if (intersection === Intersect.OUTSIDE) {\n    //     return CullingVolume.MASK_OUTSIDE;\n    //   }\n    // }\n\n    // return cullingVolume.computeVisibilityWithPlaneMask(boundingVolume, parentVisibilityPlaneMask);\n    return cullingVolume.computeVisibilityWithPlaneMask(boundingVolume, parentVisibilityPlaneMask);\n  }\n\n  // Assuming the tile's bounding volume intersects the culling volume, determines\n  // whether the tile's content's bounding volume intersects the culling volume.\n  // @param {FrameState} frameState The frame state.\n  // @returns {Intersect} The result of the intersection: the tile's content is completely outside, completely inside, or intersecting the culling volume.\n  contentVisibility() {\n    return true;\n\n    // TODO restore\n    /*\n    // Assumes the tile's bounding volume intersects the culling volume already, so\n    // just return Intersect.INSIDE if there is no content bounding volume.\n    if (!defined(this.contentBoundingVolume)) {\n      return Intersect.INSIDE;\n    }\n\n    if (this._visibilityPlaneMask === CullingVolume.MASK_INSIDE) {\n      // The tile's bounding volume is completely inside the culling volume so\n      // the content bounding volume must also be inside.\n      return Intersect.INSIDE;\n    }\n\n    // PERFORMANCE_IDEA: is it possible to burn less CPU on this test since we know the\n    // tile's (not the content's) bounding volume intersects the culling volume?\n    const cullingVolume = frameState.cullingVolume;\n    const boundingVolume = tile.contentBoundingVolume;\n\n    const tileset = this.tileset;\n    const clippingPlanes = tileset.clippingPlanes;\n    if (defined(clippingPlanes) && clippingPlanes.enabled) {\n      const intersection = clippingPlanes.computeIntersectionWithBoundingVolume(\n        boundingVolume,\n        tileset.clippingPlanesOriginMatrix\n      );\n      this._isClipped = intersection !== Intersect.INSIDE;\n      if (intersection === Intersect.OUTSIDE) {\n        return Intersect.OUTSIDE;\n      }\n    }\n\n    return cullingVolume.computeVisibility(boundingVolume);\n    */\n  }\n\n  /**\n   * Computes the (potentially approximate) distance from the closest point of the tile's bounding volume to the camera.\n   * @param frameState The frame state.\n   * @returns {Number} The distance, in meters, or zero if the camera is inside the bounding volume.\n   */\n  distanceToTile(frameState: FrameState): number {\n    const boundingVolume = this.boundingVolume;\n    return Math.sqrt(Math.max(boundingVolume.distanceSquaredTo(frameState.camera.position), 0));\n  }\n\n  /**\n   * Computes the tile's camera-space z-depth.\n   * @param frameState The frame state.\n   * @returns The distance, in meters.\n   */\n  cameraSpaceZDepth({camera}): number {\n    const boundingVolume = this.boundingVolume; // Gets the underlying OrientedBoundingBox or BoundingSphere\n    scratchVector.subVectors(boundingVolume.center, camera.position);\n    return camera.direction.dot(scratchVector);\n  }\n\n  /**\n   * Checks if the camera is inside the viewer request volume.\n   * @param {FrameState} frameState The frame state.\n   * @returns {Boolean} Whether the camera is inside the volume.\n   */\n  insideViewerRequestVolume(frameState: FrameState) {\n    const viewerRequestVolume = this._viewerRequestVolume;\n    return (\n      !viewerRequestVolume || viewerRequestVolume.distanceSquaredTo(frameState.camera.position) <= 0\n    );\n  }\n\n  // TODO Cesium specific\n\n  // Update whether the tile has expired.\n  updateExpiration() {\n    if (defined(this._expireDate) && this.contentReady && !this.hasEmptyContent) {\n      const now = Date.now();\n      // @ts-ignore Date.lessThan - replace with ms compare?\n      if (Date.lessThan(this._expireDate, now)) {\n        this.contentState = TILE_CONTENT_STATE.EXPIRED;\n        this._expiredContent = this.content;\n      }\n    }\n  }\n\n  get extras() {\n    return this.header.extras;\n  }\n\n  // INTERNAL METHODS\n\n  _initializeLodMetric(header) {\n    if ('lodMetricType' in header) {\n      this.lodMetricType = header.lodMetricType;\n    } else {\n      this.lodMetricType = (this.parent && this.parent.lodMetricType) || this.tileset.lodMetricType;\n      // eslint-disable-next-line\n      console.warn(`3D Tile: Required prop lodMetricType is undefined. Using parent lodMetricType`);\n    }\n\n    // This is used to compute screen space error, i.e., the error measured in pixels.\n    if ('lodMetricValue' in header) {\n      this.lodMetricValue = header.lodMetricValue;\n    } else {\n      this.lodMetricValue =\n        (this.parent && this.parent.lodMetricValue) || this.tileset.lodMetricValue;\n      // eslint-disable-next-line\n      console.warn(\n        '3D Tile: Required prop lodMetricValue is undefined. Using parent lodMetricValue'\n      );\n    }\n  }\n\n  _initializeTransforms(tileHeader) {\n    // The local transform of this tile.\n    this.transform = tileHeader.transform ? new Matrix4(tileHeader.transform) : new Matrix4();\n\n    const parent = this.parent;\n    const tileset = this.tileset;\n\n    const parentTransform =\n      parent && parent.computedTransform\n        ? parent.computedTransform.clone()\n        : tileset.modelMatrix.clone();\n    this.computedTransform = new Matrix4(parentTransform).multiplyRight(this.transform);\n\n    const parentInitialTransform =\n      parent && parent._initialTransform ? parent._initialTransform.clone() : new Matrix4();\n    this._initialTransform = new Matrix4(parentInitialTransform).multiplyRight(this.transform);\n  }\n\n  _initializeBoundingVolumes(tileHeader) {\n    this._contentBoundingVolume = null;\n    this._viewerRequestVolume = null;\n\n    this._updateBoundingVolume(tileHeader);\n  }\n\n  _initializeContent(tileHeader) {\n    // Empty tile by default\n    this.content = {_tileset: this.tileset, _tile: this};\n    this.hasEmptyContent = true;\n    this.contentState = TILE_CONTENT_STATE.UNLOADED;\n\n    // When `true`, the tile's content points to an external tileset.\n    // This is `false` until the tile's content is loaded.\n    this.hasTilesetContent = false;\n\n    if (tileHeader.contentUrl) {\n      this.content = null;\n      this.hasEmptyContent = false;\n    }\n  }\n\n  // TODO - remove anything not related to basic visibility detection\n  _initializeRenderingState(header) {\n    this.depth = header.level || (this.parent ? this.parent.depth + 1 : 0);\n    this._shouldRefine = false;\n\n    // Members this are updated every frame for tree traversal and rendering optimizations:\n    this._distanceToCamera = 0;\n    this._centerZDepth = 0;\n    this._screenSpaceError = 0;\n    this._visibilityPlaneMask = CullingVolume.MASK_INDETERMINATE;\n    this._visible = undefined;\n    this._inRequestVolume = false;\n\n    this._stackLength = 0;\n    this._selectionDepth = 0;\n\n    this._frameNumber = 0;\n    this._touchedFrame = 0;\n    this._visitedFrame = 0;\n    this._selectedFrame = 0;\n    this._requestedFrame = 0;\n\n    this._priority = 0.0;\n  }\n\n  _getRefine(refine) {\n    // Inherit from parent tile if omitted.\n    return refine || (this.parent && this.parent.refine) || TILE_REFINEMENT.REPLACE;\n  }\n\n  _isTileset() {\n    return this.contentUrl.indexOf('.json') !== -1;\n  }\n\n  _onContentLoaded() {\n    // Vector and Geometry tile rendering do not support the skip LOD optimization.\n    switch (this.content && this.content.type) {\n      case 'vctr':\n      case 'geom':\n        // @ts-ignore\n        this.tileset._traverser.disableSkipLevelOfDetail = true;\n        break;\n      default:\n    }\n\n    // The content may be tileset json\n    if (this._isTileset()) {\n      this.hasTilesetContent = true;\n    }\n  }\n\n  _updateBoundingVolume(header) {\n    // Update the bounding volumes\n    this.boundingVolume = createBoundingVolume(\n      header.boundingVolume,\n      this.computedTransform,\n      this.boundingVolume\n    );\n\n    const content = header.content;\n    if (!content) {\n      return;\n    }\n\n    // TODO Cesium specific\n    // Non-leaf tiles may have a content bounding-volume, which is a tight-fit bounding volume\n    // around only the features in the tile. This box is useful for culling for rendering,\n    // but not for culling for traversing the tree since it does not guarantee spatial coherence, i.e.,\n    // since it only bounds features in the tile, not the entire tile, children may be\n    // outside of this box.\n    if (content.boundingVolume) {\n      this._contentBoundingVolume = createBoundingVolume(\n        content.boundingVolume,\n        this.computedTransform,\n        this._contentBoundingVolume\n      );\n    }\n    if (header.viewerRequestVolume) {\n      this._viewerRequestVolume = createBoundingVolume(\n        header.viewerRequestVolume,\n        this.computedTransform,\n        this._viewerRequestVolume\n      );\n    }\n  }\n\n  // Update the tile's transform. The transform is applied to the tile's bounding volumes.\n  _updateTransform(parentTransform = new Matrix4()) {\n    const computedTransform = parentTransform.clone().multiplyRight(this.transform);\n    const didTransformChange = !computedTransform.equals(this.computedTransform);\n\n    if (!didTransformChange) {\n      return;\n    }\n\n    this.computedTransform = computedTransform;\n\n    this._updateBoundingVolume(this.header);\n  }\n\n  // Get options which are applicable only for the particular loader\n  _getLoaderSpecificOptions(loaderId) {\n    switch (loaderId) {\n      case 'i3s':\n        return {\n          ...this.tileset.options.i3s,\n          tile: this.header,\n          tileset: this.tileset.tileset,\n          isTileHeader: false\n        };\n      case '3d-tiles':\n      case 'cesium-ion':\n      default:\n        return get3dTilesOptions(this.tileset.tileset);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}