{"ast":null,"code":"import { getFirstCharacters } from '../binary-utils/get-first-characters';\nexport function parseJSON(string) {\n  try {\n    return JSON.parse(string);\n  } catch (_) {\n    throw new Error(\"Failed to parse JSON from data starting with \\\"\".concat(getFirstCharacters(string), \"\\\"\"));\n  }\n}","map":{"version":3,"mappings":"AAAA,SAAQA,kBAAR,QAAiC,sCAAjC;AAKA,OAAO,SAASC,SAAT,CAAmBC,MAAnB,EAAwC;EAC7C,IAAI;IACF,OAAOC,IAAI,CAACC,KAALD,CAAWD,MAAXC,CAAP;EADF,EAEE,OAAOE,CAAP,EAAU;IACV,MAAM,IAAIC,KAAJ,0DAA2DN,kBAAkB,CAACE,MAAD,CAA7E,QAAN;EACD;AACF","names":["getFirstCharacters","parseJSON","string","JSON","parse","_","Error"],"sources":["../../../../src/lib/parser-utils/parse-json.ts"],"sourcesContent":["import {getFirstCharacters} from '../binary-utils/get-first-characters';\n\n/**\n * Minimal JSON parser that throws more meaningful error messages\n */\nexport function parseJSON(string: string): any {\n  try {\n    return JSON.parse(string);\n  } catch (_) {\n    throw new Error(`Failed to parse JSON from data starting with \"${getFirstCharacters(string)}\"`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}