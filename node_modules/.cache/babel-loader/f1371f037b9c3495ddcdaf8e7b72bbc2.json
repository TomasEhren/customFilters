{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { deepEqual } from '../utils/deep-equal';\nimport LightingEffect from '../effects/lighting/lighting-effect';\nimport MaskEffect from '../effects/mask/mask-effect';\nconst DEFAULT_LIGHTING_EFFECT = new LightingEffect();\nexport default class EffectManager {\n  constructor() {\n    _defineProperty(this, \"effects\", void 0);\n\n    _defineProperty(this, \"_internalEffects\", void 0);\n\n    _defineProperty(this, \"_needsRedraw\", void 0);\n\n    this.effects = [];\n    this._internalEffects = [];\n    this._needsRedraw = 'Initial render';\n    this.setEffects();\n  }\n\n  setProps(props) {\n    if ('effects' in props) {\n      if (props.effects.length !== this.effects.length || !deepEqual(props.effects, this.effects)) {\n        this.setEffects(props.effects);\n        this._needsRedraw = 'effects changed';\n      }\n    }\n  }\n\n  needsRedraw() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      clearRedrawFlags: false\n    };\n    const redraw = this._needsRedraw;\n\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    return redraw;\n  }\n\n  getEffects() {\n    return this._internalEffects;\n  }\n\n  finalize() {\n    this.cleanup();\n  }\n\n  setEffects() {\n    let effects = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    this.cleanup();\n    this.effects = effects;\n    this._internalEffects = effects.slice();\n\n    this._internalEffects.push(new MaskEffect());\n\n    if (!effects.some(effect => effect instanceof LightingEffect)) {\n      this._internalEffects.push(DEFAULT_LIGHTING_EFFECT);\n    }\n  }\n\n  cleanup() {\n    for (const effect of this.effects) {\n      effect.cleanup();\n    }\n\n    for (const effect of this._internalEffects) {\n      effect.cleanup();\n    }\n\n    this.effects.length = 0;\n    this._internalEffects.length = 0;\n  }\n\n}","map":{"version":3,"mappings":";AAAA,SAAQA,SAAR,QAAwB,qBAAxB;AACA,OAAOC,cAAP,MAA2B,qCAA3B;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AAGA,MAAMC,uBAAuB,GAAG,IAAIF,cAAJ,EAAhC;AAEA,eAAe,MAAMG,aAAN,CAAoB;EAKjCC,WAAW,GAAG;IAAAC;;IAAAA;;IAAAA;;IACZ,KAAKC,OAAL,GAAe,EAAf;IACA,KAAKC,gBAAL,GAAwB,EAAxB;IACA,KAAKC,YAAL,GAAoB,gBAApB;IACA,KAAKC,UAAL;EACD;;EAEDC,QAAQ,CAACC,KAAD,EAAQ;IACd,IAAI,aAAaA,KAAjB,EAAwB;MACtB,IAAIA,KAAK,CAACL,OAANK,CAAcC,MAAdD,KAAyB,KAAKL,OAAL,CAAaM,MAAtCD,IAAgD,CAACZ,SAAS,CAACY,KAAK,CAACL,OAAP,EAAgB,KAAKA,OAArB,CAA9D,EAA6F;QAC3F,KAAKG,UAAL,CAAgBE,KAAK,CAACL,OAAtB;QACA,KAAKE,YAAL,GAAoB,iBAApB;MACD;IACF;EACF;;EAEDK,WAAW,GAAmC;IAAA,IAAlCC,IAAkC,uEAA3B;MAACC,gBAAgB,EAAE;IAAnB,CAA2B;IAC5C,MAAMC,MAAM,GAAG,KAAKR,YAApB;;IACA,IAAIM,IAAI,CAACC,gBAAT,EAA2B;MACzB,KAAKP,YAAL,GAAoB,KAApB;IACD;;IACD,OAAOQ,MAAP;EACD;;EAEDC,UAAU,GAAG;IACX,OAAO,KAAKV,gBAAZ;EACD;;EAEDW,QAAQ,GAAG;IACT,KAAKC,OAAL;EACD;;EAGDV,UAAU,GAAe;IAAA,IAAdH,OAAc,uEAAJ,EAAI;IACvB,KAAKa,OAAL;IACA,KAAKb,OAAL,GAAeA,OAAf;IAEA,KAAKC,gBAAL,GAAwBD,OAAO,CAACc,KAARd,EAAxB;;IAEA,KAAKC,gBAAL,CAAsBc,IAAtB,CAA2B,IAAIpB,UAAJ,EAA3B;;IACA,IAAI,CAACK,OAAO,CAACgB,IAARhB,CAAaiB,MAAM,IAAIA,MAAM,YAAYvB,cAAzCM,CAAL,EAA+D;MAC7D,KAAKC,gBAAL,CAAsBc,IAAtB,CAA2BnB,uBAA3B;IACD;EACF;;EAEDiB,OAAO,GAAG;IACR,KAAK,MAAMI,MAAX,IAAqB,KAAKjB,OAA1B,EAAmC;MACjCiB,MAAM,CAACJ,OAAPI;IACD;;IAED,KAAK,MAAMA,MAAX,IAAqB,KAAKhB,gBAA1B,EAA4C;MAC1CgB,MAAM,CAACJ,OAAPI;IACD;;IACD,KAAKjB,OAAL,CAAaM,MAAb,GAAsB,CAAtB;IACA,KAAKL,gBAAL,CAAsBK,MAAtB,GAA+B,CAA/B;EACD;;AA5DgC","names":["deepEqual","LightingEffect","MaskEffect","DEFAULT_LIGHTING_EFFECT","EffectManager","constructor","_defineProperty","effects","_internalEffects","_needsRedraw","setEffects","setProps","props","length","needsRedraw","opts","clearRedrawFlags","redraw","getEffects","finalize","cleanup","slice","push","some","effect"],"sources":["../../../src/lib/effect-manager.ts"],"sourcesContent":["import {deepEqual} from '../utils/deep-equal';\nimport LightingEffect from '../effects/lighting/lighting-effect';\nimport MaskEffect from '../effects/mask/mask-effect';\nimport type Effect from './effect';\n\nconst DEFAULT_LIGHTING_EFFECT = new LightingEffect();\n\nexport default class EffectManager {\n  effects: Effect[];\n  _internalEffects: Effect[];\n  _needsRedraw: boolean | string;\n\n  constructor() {\n    this.effects = [];\n    this._internalEffects = [];\n    this._needsRedraw = 'Initial render';\n    this.setEffects();\n  }\n\n  setProps(props) {\n    if ('effects' in props) {\n      if (props.effects.length !== this.effects.length || !deepEqual(props.effects, this.effects)) {\n        this.setEffects(props.effects);\n        this._needsRedraw = 'effects changed';\n      }\n    }\n  }\n\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  getEffects() {\n    return this._internalEffects;\n  }\n\n  finalize() {\n    this.cleanup();\n  }\n\n  // Private\n  setEffects(effects = []) {\n    this.cleanup();\n    this.effects = effects;\n\n    this._internalEffects = effects.slice();\n    // Unique MaskEffect per EffectManager as GL context may be different\n    this._internalEffects.push(new MaskEffect());\n    if (!effects.some(effect => effect instanceof LightingEffect)) {\n      this._internalEffects.push(DEFAULT_LIGHTING_EFFECT);\n    }\n  }\n\n  cleanup() {\n    for (const effect of this.effects) {\n      effect.cleanup();\n    }\n\n    for (const effect of this._internalEffects) {\n      effect.cleanup();\n    }\n    this.effects.length = 0;\n    this._internalEffects.length = 0;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}