{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SnappableMode = void 0;\n\nvar _utils = require(\"../utils\");\n\nvar _geojsonEditMode = require(\"./geojson-edit-mode\");\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar SnappableMode = /*#__PURE__*/function (_GeoJsonEditMode) {\n  _inherits(SnappableMode, _GeoJsonEditMode);\n\n  var _super = _createSuper(SnappableMode);\n\n  function SnappableMode(handler) {\n    var _this;\n\n    _classCallCheck(this, SnappableMode);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"_handler\", void 0);\n\n    _this._handler = handler;\n    return _this;\n  }\n\n  _createClass(SnappableMode, [{\n    key: \"_getSnappedMouseEvent\",\n    value: function _getSnappedMouseEvent(event, snapSource, snapTarget) {\n      return Object.assign(event, {\n        mapCoords: snapTarget.geometry.coordinates,\n        pointerDownMapCoords: snapSource && snapSource.geometry.coordinates\n      });\n    }\n  }, {\n    key: \"_getPickedSnapTarget\",\n    value: function _getPickedSnapTarget(picks) {\n      return (0, _utils.getPickedEditHandles)(picks).find(function (handle) {\n        return handle.properties.editHandleType === 'snap-target';\n      });\n    }\n  }, {\n    key: \"_getPickedSnapSource\",\n    value: function _getPickedSnapSource(pointerDownPicks) {\n      return (0, _utils.getPickedSnapSourceEditHandle)(pointerDownPicks);\n    }\n  }, {\n    key: \"_getUpdatedSnapSourceHandle\",\n    value: function _getUpdatedSnapSourceHandle(snapSourceHandle, data) {\n      var _snapSourceHandle$pro = snapSourceHandle.properties,\n          featureIndex = _snapSourceHandle$pro.featureIndex,\n          positionIndexes = _snapSourceHandle$pro.positionIndexes;\n\n      if (!Array.isArray(positionIndexes)) {\n        return snapSourceHandle;\n      }\n\n      var snapSourceFeature = data.features[featureIndex]; // $FlowFixMe\n\n      var snapSourceCoordinates = positionIndexes.reduce(function (a, b) {\n        return a[b];\n      }, snapSourceFeature.geometry.coordinates);\n      return _objectSpread({}, snapSourceHandle, {\n        geometry: {\n          type: 'Point',\n          coordinates: snapSourceCoordinates\n        }\n      });\n    } // If additionalSnapTargets is present in modeConfig and is populated, this\n    // method will return those features along with the features\n    // that live in the current layer. Otherwise, this method will simply return the\n    // features from the current layer\n\n  }, {\n    key: \"_getSnapTargets\",\n    value: function _getSnapTargets(props) {\n      var _ref = props.modeConfig || {},\n          additionalSnapTargets = _ref.additionalSnapTargets;\n\n      additionalSnapTargets = additionalSnapTargets || [];\n      var features = [].concat(_toConsumableArray(props.data.features), _toConsumableArray(additionalSnapTargets));\n      return features;\n    }\n  }, {\n    key: \"_getSnapTargetHandles\",\n    value: function _getSnapTargetHandles(props) {\n      var handles = [];\n\n      var features = this._getSnapTargets(props);\n\n      for (var i = 0; i < features.length; i++) {\n        // Filter out the currently selected feature(s)\n        var isCurrentIndexFeatureNotSelected = !props.selectedIndexes.includes(i);\n\n        if (isCurrentIndexFeatureNotSelected) {\n          var geometry = features[i].geometry;\n          handles.push.apply(handles, _toConsumableArray((0, _utils.getEditHandlesForGeometry)(geometry, i, 'snap-target')));\n        }\n      }\n\n      return handles;\n    } // If no snap handle has been picked, only display the edit handles of the\n    // selected feature. If a snap handle has been picked, display said snap handle\n    // along with all snappable points on all non-selected features.\n\n  }, {\n    key: \"getGuides\",\n    value: function getGuides(props) {\n      var modeConfig = props.modeConfig,\n          lastPointerMoveEvent = props.lastPointerMoveEvent;\n\n      var _ref2 = modeConfig || {},\n          enableSnapping = _ref2.enableSnapping;\n\n      var guides = {\n        type: 'FeatureCollection',\n        features: _toConsumableArray(this._handler.getGuides(props).features)\n      };\n\n      if (!enableSnapping) {\n        return guides;\n      }\n\n      var snapSourceHandle = lastPointerMoveEvent && this._getPickedSnapSource(lastPointerMoveEvent.pointerDownPicks); // They started dragging a handle\n      // So render the picked handle (in its updated location) and all possible snap targets\n\n\n      if (snapSourceHandle) {\n        var _guides$features;\n\n        (_guides$features = guides.features).push.apply(_guides$features, _toConsumableArray(this._getSnapTargetHandles(props)).concat([this._getUpdatedSnapSourceHandle(snapSourceHandle, props.data)]));\n\n        return guides;\n      } // Render the possible snap source handles\n\n\n      var features = props.data.features;\n\n      var _iterator = _createForOfIteratorHelper(props.selectedIndexes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var index = _step.value;\n\n          if (index < features.length) {\n            var _guides$features2;\n\n            var geometry = features[index].geometry;\n\n            (_guides$features2 = guides.features).push.apply(_guides$features2, _toConsumableArray((0, _utils.getEditHandlesForGeometry)(geometry, index, 'snap-source')));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return guides;\n    }\n  }, {\n    key: \"_getSnapAwareEvent\",\n    value: function _getSnapAwareEvent(event, props) {\n      var snapSource = this._getPickedSnapSource(props.lastPointerMoveEvent.pointerDownPicks);\n\n      var snapTarget = this._getPickedSnapTarget(event.picks);\n\n      return snapSource && snapTarget ? this._getSnappedMouseEvent(event, snapSource, snapTarget) : event;\n    }\n  }, {\n    key: \"handleStartDragging\",\n    value: function handleStartDragging(event, props) {\n      this._handler.handleStartDragging(event, props);\n    }\n  }, {\n    key: \"handleStopDragging\",\n    value: function handleStopDragging(event, props) {\n      this._handler.handleStopDragging(this._getSnapAwareEvent(event, props), props);\n    }\n  }, {\n    key: \"handleDragging\",\n    value: function handleDragging(event, props) {\n      this._handler.handleDragging(this._getSnapAwareEvent(event, props), props);\n    }\n  }, {\n    key: \"handlePointerMove\",\n    value: function handlePointerMove(event, props) {\n      this._handler.handlePointerMove(this._getSnapAwareEvent(event, props), props);\n    }\n  }]);\n\n  return SnappableMode;\n}(_geojsonEditMode.GeoJsonEditMode);\n\nexports.SnappableMode = SnappableMode;","map":{"version":3,"mappings":"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","names":["SnappableMode","handler","_classCallCheck","_this","_defineProperty","_handler","event","snapSource","snapTarget","Object","assign","mapCoords","geometry","coordinates","pointerDownMapCoords","picks","find","handle","properties","editHandleType","pointerDownPicks","snapSourceHandle","data","featureIndex","positionIndexes","Array","isArray","snapSourceFeature","features","snapSourceCoordinates","reduce","a","b","type","props","modeConfig","additionalSnapTargets","handles","_getSnapTargets","i","length","isCurrentIndexFeatureNotSelected","selectedIndexes","includes","push","_toConsumableArray","lastPointerMoveEvent","enableSnapping","guides","getGuides","_getPickedSnapSource","_getSnapTargetHandles","_getUpdatedSnapSourceHandle","index","_iterator","_getPickedSnapTarget","_getSnappedMouseEvent","handleStartDragging","handleStopDragging","_getSnapAwareEvent","handleDragging","handlePointerMove","GeoJsonEditMode"],"sources":["../../src/lib/snappable-mode.ts"],"sourcesContent":["import { Position, Feature, FeatureCollection } from '../geojson-types';\nimport {\n  PointerMoveEvent,\n  StartDraggingEvent,\n  StopDraggingEvent,\n  DraggingEvent,\n  ModeProps,\n  Pick,\n  GuideFeatureCollection,\n  EditHandleFeature,\n} from '../types';\nimport {\n  getPickedSnapSourceEditHandle,\n  getPickedEditHandles,\n  getEditHandlesForGeometry,\n} from '../utils';\nimport { GeoJsonEditMode } from './geojson-edit-mode';\n\ntype MovementTypeEvent = PointerMoveEvent | StartDraggingEvent | StopDraggingEvent | DraggingEvent;\n\nexport class SnappableMode extends GeoJsonEditMode {\n  _handler: GeoJsonEditMode;\n\n  constructor(handler: GeoJsonEditMode) {\n    super();\n    this._handler = handler;\n  }\n\n  _getSnappedMouseEvent<T extends MovementTypeEvent>(\n    event: T,\n    snapSource: EditHandleFeature,\n    snapTarget: EditHandleFeature\n  ): T {\n    return Object.assign(event, {\n      mapCoords: snapTarget.geometry.coordinates,\n      pointerDownMapCoords: snapSource && snapSource.geometry.coordinates,\n    });\n  }\n\n  _getPickedSnapTarget(picks: Pick[]): EditHandleFeature | null | undefined {\n    return getPickedEditHandles(picks).find(\n      (handle) => handle.properties.editHandleType === 'snap-target'\n    );\n  }\n\n  _getPickedSnapSource(\n    pointerDownPicks: Pick[] | null | undefined\n  ): EditHandleFeature | null | undefined {\n    return getPickedSnapSourceEditHandle(pointerDownPicks);\n  }\n\n  _getUpdatedSnapSourceHandle(\n    snapSourceHandle: EditHandleFeature,\n    data: FeatureCollection\n  ): EditHandleFeature {\n    const { featureIndex, positionIndexes } = snapSourceHandle.properties;\n    if (!Array.isArray(positionIndexes)) {\n      return snapSourceHandle;\n    }\n    const snapSourceFeature = data.features[featureIndex];\n\n    // $FlowFixMe\n    const snapSourceCoordinates: Position = positionIndexes.reduce(\n      (a: any[], b: number) => a[b],\n      snapSourceFeature.geometry.coordinates\n    );\n\n    return {\n      ...snapSourceHandle,\n      geometry: {\n        type: 'Point',\n        coordinates: snapSourceCoordinates,\n      },\n    };\n  }\n\n  // If additionalSnapTargets is present in modeConfig and is populated, this\n  // method will return those features along with the features\n  // that live in the current layer. Otherwise, this method will simply return the\n  // features from the current layer\n  _getSnapTargets(props: ModeProps<FeatureCollection>): Feature[] {\n    let { additionalSnapTargets } = props.modeConfig || {};\n    additionalSnapTargets = additionalSnapTargets || [];\n\n    const features = [...props.data.features, ...additionalSnapTargets];\n    return features;\n  }\n\n  _getSnapTargetHandles(props: ModeProps<FeatureCollection>): EditHandleFeature[] {\n    const handles = [];\n    const features = this._getSnapTargets(props);\n\n    for (let i = 0; i < features.length; i++) {\n      // Filter out the currently selected feature(s)\n      const isCurrentIndexFeatureNotSelected = !props.selectedIndexes.includes(i);\n\n      if (isCurrentIndexFeatureNotSelected) {\n        const { geometry } = features[i];\n        handles.push(...getEditHandlesForGeometry(geometry, i, 'snap-target'));\n      }\n    }\n    return handles;\n  }\n\n  // If no snap handle has been picked, only display the edit handles of the\n  // selected feature. If a snap handle has been picked, display said snap handle\n  // along with all snappable points on all non-selected features.\n  getGuides(props: ModeProps<FeatureCollection>): GuideFeatureCollection {\n    const { modeConfig, lastPointerMoveEvent } = props;\n    const { enableSnapping } = modeConfig || {};\n\n    const guides: GuideFeatureCollection = {\n      type: 'FeatureCollection',\n      features: [...this._handler.getGuides(props).features],\n    };\n\n    if (!enableSnapping) {\n      return guides;\n    }\n\n    const snapSourceHandle: EditHandleFeature | null | undefined =\n      lastPointerMoveEvent && this._getPickedSnapSource(lastPointerMoveEvent.pointerDownPicks);\n\n    // They started dragging a handle\n    // So render the picked handle (in its updated location) and all possible snap targets\n    if (snapSourceHandle) {\n      guides.features.push(\n        ...this._getSnapTargetHandles(props),\n        this._getUpdatedSnapSourceHandle(snapSourceHandle, props.data)\n      );\n\n      return guides;\n    }\n\n    // Render the possible snap source handles\n    const { features } = props.data;\n    for (const index of props.selectedIndexes) {\n      if (index < features.length) {\n        const { geometry } = features[index];\n        guides.features.push(...getEditHandlesForGeometry(geometry, index, 'snap-source'));\n      }\n    }\n\n    return guides;\n  }\n\n  _getSnapAwareEvent<T extends MovementTypeEvent>(\n    event: T,\n    props: ModeProps<FeatureCollection>\n  ): T {\n    const snapSource = this._getPickedSnapSource(props.lastPointerMoveEvent.pointerDownPicks);\n    const snapTarget = this._getPickedSnapTarget(event.picks);\n\n    return snapSource && snapTarget\n      ? this._getSnappedMouseEvent(event, snapSource, snapTarget)\n      : event;\n  }\n\n  handleStartDragging(event: StartDraggingEvent, props: ModeProps<FeatureCollection>) {\n    this._handler.handleStartDragging(event, props);\n  }\n\n  handleStopDragging(event: StopDraggingEvent, props: ModeProps<FeatureCollection>) {\n    this._handler.handleStopDragging(this._getSnapAwareEvent(event, props), props);\n  }\n\n  handleDragging(event: DraggingEvent, props: ModeProps<FeatureCollection>) {\n    this._handler.handleDragging(this._getSnapAwareEvent(event, props), props);\n  }\n\n  handlePointerMove(event: PointerMoveEvent, props: ModeProps<FeatureCollection>) {\n    this._handler.handlePointerMove(this._getSnapAwareEvent(event, props), props);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}