{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './text-background-layer-vertex.glsl';\nimport fs from './text-background-layer-fragment.glsl';\nvar defaultProps = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n  padding: {\n    type: 'array',\n    value: [0, 0, 0, 0]\n  },\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getSize: {\n    type: 'accessor',\n    value: 1\n  },\n  getAngle: {\n    type: 'accessor',\n    value: 0\n  },\n  getPixelOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  getBoundingRect: {\n    type: 'accessor',\n    value: [0, 0, 0, 0]\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: [0, 0, 0, 255]\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: [0, 0, 0, 255]\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  }\n};\n\nvar TextBackgroundLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(TextBackgroundLayer, _Layer);\n\n  var _super = _createSuper(TextBackgroundLayer);\n\n  function TextBackgroundLayer() {\n    _classCallCheck(this, TextBackgroundLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TextBackgroundLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _get(_getPrototypeOf(TextBackgroundLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.getAttributeManager().addInstanced({\n        instancePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getPosition'\n        },\n        instanceSizes: {\n          size: 1,\n          transition: true,\n          accessor: 'getSize',\n          defaultValue: 1\n        },\n        instanceAngles: {\n          size: 1,\n          transition: true,\n          accessor: 'getAngle'\n        },\n        instanceRects: {\n          size: 4,\n          accessor: 'getBoundingRect'\n        },\n        instancePixelOffsets: {\n          size: 2,\n          transition: true,\n          accessor: 'getPixelOffset'\n        },\n        instanceFillColors: {\n          size: 4,\n          transition: true,\n          normalized: true,\n          type: 5121,\n          accessor: 'getFillColor',\n          defaultValue: [0, 0, 0, 255]\n        },\n        instanceLineColors: {\n          size: 4,\n          transition: true,\n          normalized: true,\n          type: 5121,\n          accessor: 'getLineColor',\n          defaultValue: [0, 0, 0, 255]\n        },\n        instanceLineWidths: {\n          size: 1,\n          transition: true,\n          accessor: 'getLineWidth',\n          defaultValue: 1\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      _get(_getPrototypeOf(TextBackgroundLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      if (changeFlags.extensionsChanged) {\n        var _this$state$model;\n\n        var gl = this.context.gl;\n        (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n        this.state.model = this._getModel(gl);\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var _this$props = this.props,\n          billboard = _this$props.billboard,\n          sizeScale = _this$props.sizeScale,\n          sizeUnits = _this$props.sizeUnits,\n          sizeMinPixels = _this$props.sizeMinPixels,\n          sizeMaxPixels = _this$props.sizeMaxPixels,\n          getLineWidth = _this$props.getLineWidth;\n      var padding = this.props.padding;\n\n      if (padding.length < 4) {\n        padding = [padding[0], padding[1], padding[0], padding[1]];\n      }\n\n      this.state.model.setUniforms(uniforms).setUniforms({\n        billboard: billboard,\n        stroked: Boolean(getLineWidth),\n        padding: padding,\n        sizeUnits: UNIT[sizeUnits],\n        sizeScale: sizeScale,\n        sizeMinPixels: sizeMinPixels,\n        sizeMaxPixels: sizeMaxPixels\n      }).draw();\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var positions = [0, 0, 1, 0, 1, 1, 0, 1];\n      return new Model(gl, _objectSpread(_objectSpread({}, this.getShaders()), {}, {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 6,\n          vertexCount: 4,\n          attributes: {\n            positions: {\n              size: 2,\n              value: new Float32Array(positions)\n            }\n          }\n        }),\n        isInstanced: true\n      }));\n    }\n  }]);\n\n  return TextBackgroundLayer;\n}(Layer);\n\nexport { TextBackgroundLayer as default };\nTextBackgroundLayer.layerName = 'TextBackgroundLayer';\nTextBackgroundLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["Layer","project32","picking","UNIT","Model","Geometry","vs","fs","defaultProps","billboard","sizeScale","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","padding","type","value","getPosition","x","position","getSize","getAngle","getPixelOffset","getBoundingRect","getFillColor","getLineColor","getLineWidth","TextBackgroundLayer","getShaders","modules","initializeState","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceSizes","defaultValue","instanceAngles","instanceRects","instancePixelOffsets","instanceFillColors","normalized","instanceLineColors","instanceLineWidths","updateState","props","oldProps","changeFlags","extensionsChanged","gl","context","state","model","delete","_getModel","invalidateAll","draw","uniforms","length","setUniforms","stroked","Boolean","positions","id","geometry","drawMode","vertexCount","attributes","Float32Array","isInstanced","layerName"],"sources":["../../../../src/text-layer/text-background-layer/text-background-layer.js"],"sourcesContent":["import {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './text-background-layer-vertex.glsl';\nimport fs from './text-background-layer-fragment.glsl';\n\nconst defaultProps = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  padding: {type: 'array', value: [0, 0, 0, 0]},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n  getBoundingRect: {type: 'accessor', value: [0, 0, 0, 0]},\n  getFillColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineWidth: {type: 'accessor', value: 1}\n};\n\nexport default class TextBackgroundLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instanceRects: {\n        size: 4,\n        accessor: 'getBoundingRect'\n      },\n      instancePixelOffsets: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      },\n      instanceFillColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {billboard, sizeScale, sizeUnits, sizeMinPixels, sizeMaxPixels, getLineWidth} =\n      this.props;\n    let {padding} = this.props;\n\n    if (padding.length < 4) {\n      padding = [padding[0], padding[1], padding[0], padding[1]];\n    }\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        billboard,\n        stroked: Boolean(getLineWidth),\n        padding,\n        sizeUnits: UNIT[sizeUnits],\n        sizeScale,\n        sizeMinPixels,\n        sizeMaxPixels\n      })\n      .draw();\n  }\n\n  _getModel(gl) {\n    // a square that minimally cover the unit circle\n    const positions = [0, 0, 1, 0, 1, 1, 0, 1];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount: 4,\n        attributes: {\n          positions: {size: 2, value: new Float32Array(positions)}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n\nTextBackgroundLayer.layerName = 'TextBackgroundLayer';\nTextBackgroundLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}