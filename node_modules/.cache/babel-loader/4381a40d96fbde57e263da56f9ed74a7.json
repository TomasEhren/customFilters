{"ast":null,"code":"import TinySDF from '@mapbox/tiny-sdf';\nimport { log } from '@deck.gl/core';\nimport { buildMapping } from './utils';\nimport LRUCache from './lru-cache';\n\nfunction getDefaultCharacterSet() {\n  const charSet = [];\n\n  for (let i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n\n  return charSet;\n}\n\nexport const DEFAULT_CHAR_SET = getDefaultCharacterSet();\nexport const DEFAULT_FONT_FAMILY = 'Monaco, monospace';\nexport const DEFAULT_FONT_WEIGHT = 'normal';\nexport const DEFAULT_FONT_SIZE = 64;\nexport const DEFAULT_BUFFER = 4;\nexport const DEFAULT_CUTOFF = 0.25;\nexport const DEFAULT_RADIUS = 12;\nconst MAX_CANVAS_WIDTH = 1024;\nconst BASELINE_SCALE = 0.9;\nconst HEIGHT_SCALE = 1.2;\nconst CACHE_LIMIT = 3;\nlet cache = new LRUCache(CACHE_LIMIT);\nconst VALID_PROPS = ['fontFamily', 'fontWeight', 'characterSet', 'fontSize', 'sdf', 'buffer', 'cutoff', 'radius'];\n\nfunction getNewChars(key, characterSet) {\n  const cachedFontAtlas = cache.get(key);\n\n  if (!cachedFontAtlas) {\n    return characterSet;\n  }\n\n  const newChars = [];\n  const cachedMapping = cachedFontAtlas.mapping;\n  let cachedCharSet = Object.keys(cachedMapping);\n  cachedCharSet = new Set(cachedCharSet);\n  let charSet = characterSet;\n\n  if (charSet instanceof Array) {\n    charSet = new Set(charSet);\n  }\n\n  charSet.forEach(char => {\n    if (!cachedCharSet.has(char)) {\n      newChars.push(char);\n    }\n  });\n  return newChars;\n}\n\nfunction populateAlphaChannel(alphaChannel, imageData) {\n  for (let i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\n\nfunction setTextStyle(ctx, fontFamily, fontSize, fontWeight) {\n  ctx.font = \"\".concat(fontWeight, \" \").concat(fontSize, \"px \").concat(fontFamily);\n  ctx.fillStyle = '#000';\n  ctx.textBaseline = 'baseline';\n  ctx.textAlign = 'left';\n}\n\nexport function setFontAtlasCacheLimit(limit) {\n  log.assert(Number.isFinite(limit) && limit >= CACHE_LIMIT, 'Invalid cache limit');\n  cache = new LRUCache(limit);\n}\nexport default class FontAtlasManager {\n  constructor() {\n    this.props = {\n      fontFamily: DEFAULT_FONT_FAMILY,\n      fontWeight: DEFAULT_FONT_WEIGHT,\n      characterSet: DEFAULT_CHAR_SET,\n      fontSize: DEFAULT_FONT_SIZE,\n      buffer: DEFAULT_BUFFER,\n      sdf: false,\n      cutoff: DEFAULT_CUTOFF,\n      radius: DEFAULT_RADIUS\n    };\n    this._key = null;\n    this._atlas = null;\n  }\n\n  get texture() {\n    return this._atlas;\n  }\n\n  get mapping() {\n    return this._atlas && this._atlas.mapping;\n  }\n\n  get scale() {\n    return HEIGHT_SCALE;\n  }\n\n  setProps() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    VALID_PROPS.forEach(prop => {\n      if (prop in props) {\n        this.props[prop] = props[prop];\n      }\n    });\n    const oldKey = this._key;\n    this._key = this._getKey();\n    const charSet = getNewChars(this._key, this.props.characterSet);\n    const cachedFontAtlas = cache.get(this._key);\n\n    if (cachedFontAtlas && charSet.length === 0) {\n      if (this._key !== oldKey) {\n        this._atlas = cachedFontAtlas;\n      }\n\n      return;\n    }\n\n    const fontAtlas = this._generateFontAtlas(this._key, charSet, cachedFontAtlas);\n\n    this._atlas = fontAtlas;\n    cache.set(this._key, fontAtlas);\n  }\n\n  _generateFontAtlas(key, characterSet, cachedFontAtlas) {\n    const {\n      fontFamily,\n      fontWeight,\n      fontSize,\n      buffer,\n      sdf,\n      radius,\n      cutoff\n    } = this.props;\n    let canvas = cachedFontAtlas && cachedFontAtlas.data;\n\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.width = MAX_CANVAS_WIDTH;\n    }\n\n    const ctx = canvas.getContext('2d');\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n    const {\n      mapping,\n      canvasHeight,\n      xOffset,\n      yOffset\n    } = buildMapping({\n      getFontWidth: char => ctx.measureText(char).width,\n      fontHeight: fontSize * HEIGHT_SCALE,\n      buffer,\n      characterSet,\n      maxCanvasWidth: MAX_CANVAS_WIDTH,\n      ...(cachedFontAtlas && {\n        mapping: cachedFontAtlas.mapping,\n        xOffset: cachedFontAtlas.xOffset,\n        yOffset: cachedFontAtlas.yOffset\n      })\n    });\n\n    if (canvas.height !== canvasHeight) {\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      canvas.height = canvasHeight;\n      ctx.putImageData(imageData, 0, 0);\n    }\n\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    if (sdf) {\n      const tinySDF = new TinySDF(fontSize, buffer, radius, cutoff, fontFamily, fontWeight);\n      const imageData = ctx.getImageData(0, 0, tinySDF.size, tinySDF.size);\n\n      for (const char of characterSet) {\n        populateAlphaChannel(tinySDF.draw(char), imageData);\n        ctx.putImageData(imageData, mapping[char].x - buffer, mapping[char].y + buffer);\n      }\n    } else {\n      for (const char of characterSet) {\n        ctx.fillText(char, mapping[char].x, mapping[char].y + fontSize * BASELINE_SCALE);\n      }\n    }\n\n    return {\n      xOffset,\n      yOffset,\n      mapping,\n      data: canvas,\n      width: canvas.width,\n      height: canvas.height\n    };\n  }\n\n  _getKey() {\n    const {\n      fontFamily,\n      fontWeight,\n      fontSize,\n      buffer,\n      sdf,\n      radius,\n      cutoff\n    } = this.props;\n\n    if (sdf) {\n      return \"\".concat(fontFamily, \" \").concat(fontWeight, \" \").concat(fontSize, \" \").concat(buffer, \" \").concat(radius, \" \").concat(cutoff);\n    }\n\n    return \"\".concat(fontFamily, \" \").concat(fontWeight, \" \").concat(fontSize, \" \").concat(buffer);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["TinySDF","log","buildMapping","LRUCache","getDefaultCharacterSet","charSet","i","push","String","fromCharCode","DEFAULT_CHAR_SET","DEFAULT_FONT_FAMILY","DEFAULT_FONT_WEIGHT","DEFAULT_FONT_SIZE","DEFAULT_BUFFER","DEFAULT_CUTOFF","DEFAULT_RADIUS","MAX_CANVAS_WIDTH","BASELINE_SCALE","HEIGHT_SCALE","CACHE_LIMIT","cache","VALID_PROPS","getNewChars","key","characterSet","cachedFontAtlas","get","newChars","cachedMapping","mapping","cachedCharSet","Object","keys","Set","Array","forEach","char","has","populateAlphaChannel","alphaChannel","imageData","length","data","setTextStyle","ctx","fontFamily","fontSize","fontWeight","font","fillStyle","textBaseline","textAlign","setFontAtlasCacheLimit","limit","assert","Number","isFinite","FontAtlasManager","constructor","props","buffer","sdf","cutoff","radius","_key","_atlas","texture","scale","setProps","prop","oldKey","_getKey","fontAtlas","_generateFontAtlas","set","canvas","document","createElement","width","getContext","canvasHeight","xOffset","yOffset","getFontWidth","measureText","fontHeight","maxCanvasWidth","height","getImageData","putImageData","tinySDF","size","draw","x","y","fillText"],"sources":["../../../src/text-layer/font-atlas-manager.js"],"sourcesContent":["/* global document */\nimport TinySDF from '@mapbox/tiny-sdf';\n\nimport {log} from '@deck.gl/core';\n\nimport {buildMapping} from './utils';\nimport LRUCache from './lru-cache';\n\nfunction getDefaultCharacterSet() {\n  const charSet = [];\n  for (let i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n  return charSet;\n}\n\nexport const DEFAULT_CHAR_SET = getDefaultCharacterSet();\nexport const DEFAULT_FONT_FAMILY = 'Monaco, monospace';\nexport const DEFAULT_FONT_WEIGHT = 'normal';\nexport const DEFAULT_FONT_SIZE = 64;\nexport const DEFAULT_BUFFER = 4;\nexport const DEFAULT_CUTOFF = 0.25;\nexport const DEFAULT_RADIUS = 12;\n\nconst MAX_CANVAS_WIDTH = 1024;\n\nconst BASELINE_SCALE = 0.9;\nconst HEIGHT_SCALE = 1.2;\n\n// only preserve latest three fontAtlas\nconst CACHE_LIMIT = 3;\n\n/**\n * [key]: {\n *   xOffset, // x position of last character in mapping\n *   yOffset, // y position of last character in mapping\n *   mapping, // x, y coordinate of each character in shared `fontAtlas`\n *   data, // canvas\n *   width. // canvas.width,\n *   height, // canvas.height\n * }\n *\n */\nlet cache = new LRUCache(CACHE_LIMIT);\n\nconst VALID_PROPS = [\n  'fontFamily',\n  'fontWeight',\n  'characterSet',\n  'fontSize',\n  'sdf',\n  'buffer',\n  'cutoff',\n  'radius'\n];\n\n/**\n * get all the chars not in cache\n * @param key cache key\n * @param characterSet (Array|Set)\n * @returns {Array} chars not in cache\n */\nfunction getNewChars(key, characterSet) {\n  const cachedFontAtlas = cache.get(key);\n  if (!cachedFontAtlas) {\n    return characterSet;\n  }\n\n  const newChars = [];\n  const cachedMapping = cachedFontAtlas.mapping;\n  let cachedCharSet = Object.keys(cachedMapping);\n  cachedCharSet = new Set(cachedCharSet);\n\n  let charSet = characterSet;\n  if (charSet instanceof Array) {\n    charSet = new Set(charSet);\n  }\n\n  charSet.forEach(char => {\n    if (!cachedCharSet.has(char)) {\n      newChars.push(char);\n    }\n  });\n\n  return newChars;\n}\n\nfunction populateAlphaChannel(alphaChannel, imageData) {\n  // populate distance value from tinySDF to image alpha channel\n  for (let i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\n\nfunction setTextStyle(ctx, fontFamily, fontSize, fontWeight) {\n  ctx.font = `${fontWeight} ${fontSize}px ${fontFamily}`;\n  ctx.fillStyle = '#000';\n  ctx.textBaseline = 'baseline';\n  ctx.textAlign = 'left';\n}\n\n/**\n * Sets the Font Atlas LRU Cache Limit\n * @param {number} limit LRU Cache limit\n */\nexport function setFontAtlasCacheLimit(limit) {\n  log.assert(Number.isFinite(limit) && limit >= CACHE_LIMIT, 'Invalid cache limit');\n\n  cache = new LRUCache(limit);\n}\n\nexport default class FontAtlasManager {\n  constructor() {\n    // font settings\n    this.props = {\n      fontFamily: DEFAULT_FONT_FAMILY,\n      fontWeight: DEFAULT_FONT_WEIGHT,\n      characterSet: DEFAULT_CHAR_SET,\n      fontSize: DEFAULT_FONT_SIZE,\n      buffer: DEFAULT_BUFFER,\n      // sdf only props\n      // https://github.com/mapbox/tiny-sdf\n      sdf: false,\n      cutoff: DEFAULT_CUTOFF,\n      radius: DEFAULT_RADIUS\n    };\n\n    // key is used for caching generated fontAtlas\n    this._key = null;\n    this._atlas = null;\n  }\n\n  get texture() {\n    return this._atlas;\n  }\n\n  get mapping() {\n    return this._atlas && this._atlas.mapping;\n  }\n\n  get scale() {\n    return HEIGHT_SCALE;\n  }\n\n  setProps(props = {}) {\n    VALID_PROPS.forEach(prop => {\n      if (prop in props) {\n        this.props[prop] = props[prop];\n      }\n    });\n\n    // update cache key\n    const oldKey = this._key;\n    this._key = this._getKey();\n\n    const charSet = getNewChars(this._key, this.props.characterSet);\n    const cachedFontAtlas = cache.get(this._key);\n\n    // if a fontAtlas associated with the new settings is cached and\n    // there are no new chars\n    if (cachedFontAtlas && charSet.length === 0) {\n      // update texture with cached fontAtlas\n      if (this._key !== oldKey) {\n        this._atlas = cachedFontAtlas;\n      }\n      return;\n    }\n\n    // update fontAtlas with new settings\n    const fontAtlas = this._generateFontAtlas(this._key, charSet, cachedFontAtlas);\n    this._atlas = fontAtlas;\n\n    // update cache\n    cache.set(this._key, fontAtlas);\n  }\n\n  _generateFontAtlas(key, characterSet, cachedFontAtlas) {\n    const {fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    let canvas = cachedFontAtlas && cachedFontAtlas.data;\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.width = MAX_CANVAS_WIDTH;\n    }\n    const ctx = canvas.getContext('2d');\n\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 1. build mapping\n    const {mapping, canvasHeight, xOffset, yOffset} = buildMapping({\n      getFontWidth: char => ctx.measureText(char).width,\n      fontHeight: fontSize * HEIGHT_SCALE,\n      buffer,\n      characterSet,\n      maxCanvasWidth: MAX_CANVAS_WIDTH,\n      ...(cachedFontAtlas && {\n        mapping: cachedFontAtlas.mapping,\n        xOffset: cachedFontAtlas.xOffset,\n        yOffset: cachedFontAtlas.yOffset\n      })\n    });\n\n    // 2. update canvas\n    // copy old canvas data to new canvas only when height changed\n    if (canvas.height !== canvasHeight) {\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      canvas.height = canvasHeight;\n      ctx.putImageData(imageData, 0, 0);\n    }\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 3. layout characters\n    if (sdf) {\n      const tinySDF = new TinySDF(fontSize, buffer, radius, cutoff, fontFamily, fontWeight);\n      // used to store distance values from tinySDF\n      // tinySDF.size equals `fontSize + buffer * 2`\n      const imageData = ctx.getImageData(0, 0, tinySDF.size, tinySDF.size);\n\n      for (const char of characterSet) {\n        populateAlphaChannel(tinySDF.draw(char), imageData);\n        ctx.putImageData(imageData, mapping[char].x - buffer, mapping[char].y + buffer);\n      }\n    } else {\n      for (const char of characterSet) {\n        ctx.fillText(char, mapping[char].x, mapping[char].y + fontSize * BASELINE_SCALE);\n      }\n    }\n\n    return {\n      xOffset,\n      yOffset,\n      mapping,\n      data: canvas,\n      width: canvas.width,\n      height: canvas.height\n    };\n  }\n\n  _getKey() {\n    const {fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    if (sdf) {\n      return `${fontFamily} ${fontWeight} ${fontSize} ${buffer} ${radius} ${cutoff}`;\n    }\n    return `${fontFamily} ${fontWeight} ${fontSize} ${buffer}`;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}