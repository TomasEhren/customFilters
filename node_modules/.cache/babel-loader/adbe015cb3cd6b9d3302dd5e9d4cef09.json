{"ast":null,"code":"import Resource from './resource';\nimport Buffer from './buffer';\nimport { isWebGL2 } from '@luma.gl/gltools';\nimport { getScratchArray, fillArray } from '../utils/array-utils-flat';\nimport { assert } from '../utils/assert';\nimport { getBrowser } from 'probe.gl';\nconst ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';\nexport default class VertexArrayObject extends Resource {\n  static isSupported(gl) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (options.constantAttributeZero) {\n      return isWebGL2(gl) || getBrowser() === 'Chrome';\n    }\n\n    return true;\n  }\n\n  static getDefaultArray(gl) {\n    gl.luma = gl.luma || {};\n\n    if (!gl.luma.defaultVertexArray) {\n      gl.luma.defaultVertexArray = new VertexArrayObject(gl, {\n        handle: null,\n        isDefaultArray: true\n      });\n    }\n\n    return gl.luma.defaultVertexArray;\n  }\n\n  static getMaxAttributes(gl) {\n    VertexArrayObject.MAX_ATTRIBUTES = VertexArrayObject.MAX_ATTRIBUTES || gl.getParameter(34921);\n    return VertexArrayObject.MAX_ATTRIBUTES;\n  }\n\n  static setConstant(gl, location, array) {\n    switch (array.constructor) {\n      case Float32Array:\n        VertexArrayObject._setConstantFloatArray(gl, location, array);\n\n        break;\n\n      case Int32Array:\n        VertexArrayObject._setConstantIntArray(gl, location, array);\n\n        break;\n\n      case Uint32Array:\n        VertexArrayObject._setConstantUintArray(gl, location, array);\n\n        break;\n\n      default:\n        assert(false);\n    }\n  }\n\n  constructor(gl) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const id = opts.id || opts.program && opts.program.id;\n    super(gl, Object.assign({}, opts, {\n      id\n    }));\n    this.buffer = null;\n    this.bufferValue = null;\n    this.isDefaultArray = opts.isDefaultArray || false;\n    this.gl2 = gl;\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  delete() {\n    super.delete();\n\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n\n    return this;\n  }\n\n  get MAX_ATTRIBUTES() {\n    return VertexArrayObject.getMaxAttributes(this.gl);\n  }\n\n  initialize() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.setProps(props);\n  }\n\n  setProps(props) {\n    return this;\n  }\n\n  setElementBuffer() {\n    let elementBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(!elementBuffer || elementBuffer.target === 34963, ERR_ELEMENTS);\n    this.bind(() => {\n      this.gl.bindBuffer(34963, elementBuffer ? elementBuffer.handle : null);\n    });\n    return this;\n  }\n\n  setBuffer(location, buffer, accessor) {\n    if (buffer.target === 34963) {\n      return this.setElementBuffer(buffer, accessor);\n    }\n\n    const {\n      size,\n      type,\n      stride,\n      offset,\n      normalized,\n      integer,\n      divisor\n    } = accessor;\n    const {\n      gl,\n      gl2\n    } = this;\n    location = Number(location);\n    this.bind(() => {\n      gl.bindBuffer(34962, buffer.handle);\n\n      if (integer) {\n        assert(isWebGL2(gl));\n        gl2.vertexAttribIPointer(location, size, type, stride, offset);\n      } else {\n        gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n      }\n\n      gl.enableVertexAttribArray(location);\n      gl2.vertexAttribDivisor(location, divisor || 0);\n    });\n    return this;\n  }\n\n  enable(location) {\n    let enable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const disablingAttributeZero = !enable && location === 0 && !VertexArrayObject.isSupported(this.gl, {\n      constantAttributeZero: true\n    });\n\n    if (!disablingAttributeZero) {\n      location = Number(location);\n      this.bind(() => enable ? this.gl.enableVertexAttribArray(location) : this.gl.disableVertexAttribArray(location));\n    }\n\n    return this;\n  }\n\n  getConstantBuffer(elementCount, value) {\n    const constantValue = this._normalizeConstantArrayValue(value);\n\n    const byteLength = constantValue.byteLength * elementCount;\n    const length = constantValue.length * elementCount;\n    let updateNeeded = !this.buffer;\n    this.buffer = this.buffer || new Buffer(this.gl, byteLength);\n    updateNeeded = updateNeeded || this.buffer.reallocate(byteLength);\n    updateNeeded = updateNeeded || !this._compareConstantArrayValues(constantValue, this.bufferValue);\n\n    if (updateNeeded) {\n      const typedArray = getScratchArray(value.constructor, length);\n      fillArray({\n        target: typedArray,\n        source: constantValue,\n        start: 0,\n        count: length\n      });\n      this.buffer.subData(typedArray);\n      this.bufferValue = value;\n    }\n\n    return this.buffer;\n  }\n\n  _normalizeConstantArrayValue(arrayValue) {\n    if (Array.isArray(arrayValue)) {\n      return new Float32Array(arrayValue);\n    }\n\n    return arrayValue;\n  }\n\n  _compareConstantArrayValues(v1, v2) {\n    if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {\n      return false;\n    }\n\n    for (let i = 0; i < v1.length; ++i) {\n      if (v1[i] !== v2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  static _setConstantFloatArray(gl, location, array) {\n    switch (array.length) {\n      case 1:\n        gl.vertexAttrib1fv(location, array);\n        break;\n\n      case 2:\n        gl.vertexAttrib2fv(location, array);\n        break;\n\n      case 3:\n        gl.vertexAttrib3fv(location, array);\n        break;\n\n      case 4:\n        gl.vertexAttrib4fv(location, array);\n        break;\n\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantIntArray(gl, location, array) {\n    assert(isWebGL2(gl));\n\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1iv(location, array);\n        break;\n\n      case 2:\n        gl.vertexAttribI2iv(location, array);\n        break;\n\n      case 3:\n        gl.vertexAttribI3iv(location, array);\n        break;\n\n      case 4:\n        gl.vertexAttribI4iv(location, array);\n        break;\n\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantUintArray(gl, location, array) {\n    assert(isWebGL2(gl));\n\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1uiv(location, array);\n        break;\n\n      case 2:\n        gl.vertexAttribI2uiv(location, array);\n        break;\n\n      case 3:\n        gl.vertexAttribI3uiv(location, array);\n        break;\n\n      case 4:\n        gl.vertexAttribI4uiv(location, array);\n        break;\n\n      default:\n        assert(false);\n    }\n  }\n\n  _createHandle() {\n    const gl2 = this.gl;\n    return gl2.createVertexArray();\n  }\n\n  _deleteHandle(handle) {\n    this.gl2.deleteVertexArray(handle);\n    return [this.elements];\n  }\n\n  _bindHandle(handle) {\n    this.gl2.bindVertexArray(handle);\n  }\n\n  _getParameter(pname, _ref) {\n    let {\n      location\n    } = _ref;\n    assert(Number.isFinite(location));\n    return this.bind(() => {\n      switch (pname) {\n        case 34373:\n          return this.gl.getVertexAttribOffset(location, pname);\n\n        default:\n          return this.gl.getVertexAttrib(location, pname);\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Resource","Buffer","isWebGL2","getScratchArray","fillArray","assert","getBrowser","ERR_ELEMENTS","VertexArrayObject","isSupported","gl","options","constantAttributeZero","getDefaultArray","luma","defaultVertexArray","handle","isDefaultArray","getMaxAttributes","MAX_ATTRIBUTES","getParameter","setConstant","location","array","constructor","Float32Array","_setConstantFloatArray","Int32Array","_setConstantIntArray","Uint32Array","_setConstantUintArray","opts","id","program","Object","assign","buffer","bufferValue","gl2","initialize","seal","delete","props","setProps","setElementBuffer","elementBuffer","target","bind","bindBuffer","setBuffer","accessor","size","type","stride","offset","normalized","integer","divisor","Number","vertexAttribIPointer","vertexAttribPointer","enableVertexAttribArray","vertexAttribDivisor","enable","disablingAttributeZero","disableVertexAttribArray","getConstantBuffer","elementCount","value","constantValue","_normalizeConstantArrayValue","byteLength","length","updateNeeded","reallocate","_compareConstantArrayValues","typedArray","source","start","count","subData","arrayValue","Array","isArray","v1","v2","i","vertexAttrib1fv","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttribI1iv","vertexAttribI2iv","vertexAttribI3iv","vertexAttribI4iv","vertexAttribI1uiv","vertexAttribI2uiv","vertexAttribI3uiv","vertexAttribI4uiv","_createHandle","createVertexArray","_deleteHandle","deleteVertexArray","elements","_bindHandle","bindVertexArray","_getParameter","pname","isFinite","getVertexAttribOffset","getVertexAttrib"],"sources":["../../../src/classes/vertex-array-object.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {getScratchArray, fillArray} from '../utils/array-utils-flat';\nimport {assert} from '../utils/assert';\nimport {getBrowser} from 'probe.gl';\n\nconst ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';\n\nexport default class VertexArrayObject extends Resource {\n  static isSupported(gl, options = {}) {\n    // Attribute 0 can not be disable on most desktop OpenGL based browsers\n    // and on iOS Safari browser.\n    if (options.constantAttributeZero) {\n      return isWebGL2(gl) || getBrowser() === 'Chrome';\n    }\n\n    // Whether additional objects can be created\n    return true;\n  }\n\n  // Returns the global (null) vertex array object. Exists even when no extension available\n  // TODO(Tarek): VAOs are now polyfilled. Deprecate this in 9.0\n  static getDefaultArray(gl) {\n    gl.luma = gl.luma || {};\n    if (!gl.luma.defaultVertexArray) {\n      gl.luma.defaultVertexArray = new VertexArrayObject(gl, {handle: null, isDefaultArray: true});\n    }\n    return gl.luma.defaultVertexArray;\n  }\n\n  static getMaxAttributes(gl) {\n    // TODO - should be cached per context\n    // @ts-ignore\n    VertexArrayObject.MAX_ATTRIBUTES =\n      // @ts-ignore\n      VertexArrayObject.MAX_ATTRIBUTES || gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    // @ts-ignore\n    return VertexArrayObject.MAX_ATTRIBUTES;\n  }\n\n  // Note: Constants are stored globally on the WebGL context, not the VAO\n  // So they need to be updated before every render\n  // TODO - use known type (in configuration or passed in) to allow non-typed arrays?\n  // TODO - remember/cache values to avoid setting them unnecessarily?\n  static setConstant(gl, location, array) {\n    switch (array.constructor) {\n      case Float32Array:\n        VertexArrayObject._setConstantFloatArray(gl, location, array);\n        break;\n      case Int32Array:\n        VertexArrayObject._setConstantIntArray(gl, location, array);\n        break;\n      case Uint32Array:\n        VertexArrayObject._setConstantUintArray(gl, location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  // Create a VertexArray\n  constructor(gl, opts = {}) {\n    // Use program's id if program but no id is supplied\n    const id = opts.id || (opts.program && opts.program.id);\n    super(gl, Object.assign({}, opts, {id}));\n\n    this.buffer = null;\n    this.bufferValue = null;\n    this.isDefaultArray = opts.isDefaultArray || false;\n\n    /** @type {WebGL2RenderingContext} */\n    this.gl2 = gl;\n\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  delete() {\n    super.delete();\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n    return this;\n  }\n\n  get MAX_ATTRIBUTES() {\n    return VertexArrayObject.getMaxAttributes(this.gl);\n  }\n\n  initialize(props = {}) {\n    return this.setProps(props);\n  }\n\n  setProps(props) {\n    // TODO: decide which props should be supported\n    return this;\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n  setElementBuffer(elementBuffer = null, opts = {}) {\n    assert(!elementBuffer || elementBuffer.target === GL.ELEMENT_ARRAY_BUFFER, ERR_ELEMENTS);\n\n    // The GL.ELEMENT_ARRAY_BUFFER_BINDING is stored on the VertexArrayObject...\n    this.bind(() => {\n      this.gl.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, elementBuffer ? elementBuffer.handle : null);\n    });\n\n    return this;\n  }\n\n  // Set a location in vertex attributes array to a bufferk, enables the location, sets divisor\n  setBuffer(location, buffer, accessor) {\n    // Check target\n    if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n      return this.setElementBuffer(buffer, accessor);\n    }\n\n    const {size, type, stride, offset, normalized, integer, divisor} = accessor;\n\n    const {gl, gl2} = this;\n    location = Number(location);\n\n    this.bind(() => {\n      // A non-zero buffer object must be bound to the GL_ARRAY_BUFFER target\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer.handle);\n\n      // WebGL2 supports *integer* data formats, i.e. GPU will see integer values\n      if (integer) {\n        assert(isWebGL2(gl));\n        gl2.vertexAttribIPointer(location, size, type, stride, offset);\n      } else {\n        // Attaches ARRAY_BUFFER with specified buffer format to location\n        gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n      }\n      gl.enableVertexAttribArray(location);\n      gl2.vertexAttribDivisor(location, divisor || 0);\n\n      // NOTE We don't unbind buffer here, typically another buffer will be bound just after\n    });\n\n    return this;\n  }\n\n  // Enabling an attribute location makes it reference the currently bound buffer\n  // Disabling an attribute location makes it reference the global constant value\n  // TODO - handle single values for size 1 attributes?\n  // TODO - convert classic arrays based on known type?\n  enable(location, enable = true) {\n    // Attribute 0 cannot be disabled in most desktop OpenGL based browsers\n    const disablingAttributeZero =\n      !enable &&\n      location === 0 &&\n      !VertexArrayObject.isSupported(this.gl, {constantAttributeZero: true});\n\n    if (!disablingAttributeZero) {\n      location = Number(location);\n      this.bind(\n        () =>\n          enable\n            ? this.gl.enableVertexAttribArray(location)\n            : this.gl.disableVertexAttribArray(location)\n      );\n    }\n    return this;\n  }\n\n  // Provide a means to create a buffer that is equivalent to a constant.\n  // NOTE: Desktop OpenGL cannot disable attribute 0.\n  // https://stackoverflow.com/questions/20305231/webgl-warning-attribute-0-is-disabled-\n  // this-has-significant-performance-penalt\n  getConstantBuffer(elementCount, value) {\n    // Create buffer only when needed, and reuse it (avoids inflating buffer creation statistics)\n\n    const constantValue = this._normalizeConstantArrayValue(value);\n\n    const byteLength = constantValue.byteLength * elementCount;\n    const length = constantValue.length * elementCount;\n\n    let updateNeeded = !this.buffer;\n\n    this.buffer = this.buffer || new Buffer(this.gl, byteLength);\n    updateNeeded = updateNeeded || this.buffer.reallocate(byteLength);\n\n    // Reallocate and update contents if needed\n    updateNeeded =\n      updateNeeded || !this._compareConstantArrayValues(constantValue, this.bufferValue);\n\n    if (updateNeeded) {\n      // Create a typed array that is big enough, and fill it with the required data\n      const typedArray = getScratchArray(value.constructor, length);\n      fillArray({target: typedArray, source: constantValue, start: 0, count: length});\n      this.buffer.subData(typedArray);\n      this.bufferValue = value;\n    }\n\n    return this.buffer;\n  }\n\n  // PRIVATE\n\n  // TODO - convert Arrays based on known type? (read type from accessor, don't assume Float32Array)\n  // TODO - handle single values for size 1 attributes?\n  _normalizeConstantArrayValue(arrayValue) {\n    if (Array.isArray(arrayValue)) {\n      return new Float32Array(arrayValue);\n    }\n    return arrayValue;\n  }\n\n  _compareConstantArrayValues(v1, v2) {\n    if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {\n      return false;\n    }\n    for (let i = 0; i < v1.length; ++i) {\n      if (v1[i] !== v2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  static _setConstantFloatArray(gl, location, array) {\n    switch (array.length) {\n      case 1:\n        gl.vertexAttrib1fv(location, array);\n        break;\n      case 2:\n        gl.vertexAttrib2fv(location, array);\n        break;\n      case 3:\n        gl.vertexAttrib3fv(location, array);\n        break;\n      case 4:\n        gl.vertexAttrib4fv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantIntArray(gl, location, array) {\n    assert(isWebGL2(gl));\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1iv(location, array);\n        break;\n      case 2:\n        gl.vertexAttribI2iv(location, array);\n        break;\n      case 3:\n        gl.vertexAttribI3iv(location, array);\n        break;\n      case 4:\n        gl.vertexAttribI4iv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantUintArray(gl, location, array) {\n    assert(isWebGL2(gl));\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1uiv(location, array);\n        break;\n      case 2:\n        gl.vertexAttribI2uiv(location, array);\n        break;\n      case 3:\n        gl.vertexAttribI3uiv(location, array);\n        break;\n      case 4:\n        gl.vertexAttribI4uiv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  // RESOURCE IMPLEMENTATION\n\n  _createHandle() {\n    /** @type {WebGL2RenderingContext} */\n    // @ts-ignore\n    const gl2 = this.gl;\n    return gl2.createVertexArray();\n  }\n\n  _deleteHandle(handle) {\n    this.gl2.deleteVertexArray(handle);\n    // @ts-ignore\n    return [this.elements];\n    // return [this.elements, ...this.buffers];\n  }\n\n  _bindHandle(handle) {\n    this.gl2.bindVertexArray(handle);\n  }\n\n  // Generic getter for information about a vertex attribute at a given position\n  _getParameter(pname, {location}) {\n    assert(Number.isFinite(location));\n    return this.bind(() => {\n      switch (pname) {\n        case GL.VERTEX_ATTRIB_ARRAY_POINTER:\n          return this.gl.getVertexAttribOffset(location, pname);\n        default:\n          return this.gl.getVertexAttrib(location, pname);\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}