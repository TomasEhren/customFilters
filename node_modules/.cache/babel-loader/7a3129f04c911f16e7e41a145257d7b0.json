{"ast":null,"code":"export function transformBinaryCoords(binaryFeatures, transformCoordinate) {\n  if (binaryFeatures.points) {\n    transformBinaryGeometryPositions(binaryFeatures.points, transformCoordinate);\n  }\n\n  if (binaryFeatures.lines) {\n    transformBinaryGeometryPositions(binaryFeatures.lines, transformCoordinate);\n  }\n\n  if (binaryFeatures.polygons) {\n    transformBinaryGeometryPositions(binaryFeatures.polygons, transformCoordinate);\n  }\n\n  return binaryFeatures;\n}\n\nfunction transformBinaryGeometryPositions(binaryGeometry, fn) {\n  const {\n    positions\n  } = binaryGeometry;\n\n  for (let i = 0; i < positions.value.length; i += positions.size) {\n    const coord = Array.from(positions.value.subarray(i, i + positions.size));\n    const transformedCoord = fn(coord);\n    positions.value.set(transformedCoord, i);\n  }\n}\n\nexport function transformGeoJsonCoords(features, fn) {\n  for (const feature of features) {\n    feature.geometry.coordinates = coordMap(feature.geometry.coordinates, fn);\n  }\n\n  return features;\n}\n\nfunction coordMap(array, fn) {\n  if (isCoord(array)) {\n    return fn(array);\n  }\n\n  return array.map(item => {\n    return coordMap(item, fn);\n  });\n}\n\nfunction isCoord(array) {\n  return Number.isFinite(array[0]) && Number.isFinite(array[1]);\n}","map":{"version":3,"mappings":"AAUA,OAAO,SAASA,qBAAT,CACLC,cADK,EAELC,mBAFK,EAGW;EAChB,IAAID,cAAc,CAACE,MAAnB,EAA2B;IACzBC,gCAAgC,CAACH,cAAc,CAACE,MAAhB,EAAwBD,mBAAxB,CAAhCE;EACD;;EACD,IAAIH,cAAc,CAACI,KAAnB,EAA0B;IACxBD,gCAAgC,CAACH,cAAc,CAACI,KAAhB,EAAuBH,mBAAvB,CAAhCE;EACD;;EACD,IAAIH,cAAc,CAACK,QAAnB,EAA6B;IAC3BF,gCAAgC,CAACH,cAAc,CAACK,QAAhB,EAA0BJ,mBAA1B,CAAhCE;EACD;;EACD,OAAOH,cAAP;AACD;;AAGD,SAASG,gCAAT,CAA0CG,cAA1C,EAA0EC,EAA1E,EAAmG;EACjG,MAAM;IAACC;EAAD,IAAcF,cAApB;;EACA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,SAAS,CAACE,KAAVF,CAAgBG,MAApC,EAA4CF,CAAC,IAAID,SAAS,CAACI,IAA3D,EAAiE;IAE/D,MAAMC,KAAoB,GAAGC,KAAK,CAACC,IAAND,CAAWN,SAAS,CAACE,KAAVF,CAAgBQ,QAAhBR,CAAyBC,CAAzBD,EAA4BC,CAAC,GAAGD,SAAS,CAACI,IAA1CJ,CAAXM,CAA7B;IACA,MAAMG,gBAAgB,GAAGV,EAAE,CAACM,KAAD,CAA3B;IAEAL,SAAS,CAACE,KAAVF,CAAgBU,GAAhBV,CAAoBS,gBAApBT,EAAsCC,CAAtCD;EACD;AACF;;AASD,OAAO,SAASW,sBAAT,CACLC,QADK,EAELb,EAFK,EAGK;EACV,KAAK,MAAMc,OAAX,IAAsBD,QAAtB,EAAgC;IAE9BC,OAAO,CAACC,QAARD,CAAiBE,WAAjBF,GAA+BG,QAAQ,CAACH,OAAO,CAACC,QAARD,CAAiBE,WAAlB,EAA+BhB,EAA/B,CAAvCc;EACD;;EACD,OAAOD,QAAP;AACD;;AAED,SAASI,QAAT,CAAkBC,KAAlB,EAAyBlB,EAAzB,EAA6B;EAC3B,IAAImB,OAAO,CAACD,KAAD,CAAX,EAAoB;IAClB,OAAOlB,EAAE,CAACkB,KAAD,CAAT;EACD;;EAED,OAAOA,KAAK,CAACE,GAANF,CAAWG,IAAD,IAAU;IACzB,OAAOJ,QAAQ,CAACI,IAAD,EAAOrB,EAAP,CAAf;EADK,EAAP;AAGD;;AAED,SAASmB,OAAT,CAAiBD,KAAjB,EAAwB;EACtB,OAAOI,MAAM,CAACC,QAAPD,CAAgBJ,KAAK,CAAC,CAAD,CAArBI,KAA6BA,MAAM,CAACC,QAAPD,CAAgBJ,KAAK,CAAC,CAAD,CAArBI,CAApC;AACD","names":["transformBinaryCoords","binaryFeatures","transformCoordinate","points","transformBinaryGeometryPositions","lines","polygons","binaryGeometry","fn","positions","i","value","length","size","coord","Array","from","subarray","transformedCoord","set","transformGeoJsonCoords","features","feature","geometry","coordinates","coordMap","array","isCoord","map","item","Number","isFinite"],"sources":["../../../src/lib/transform.ts"],"sourcesContent":["import type {BinaryFeatures, BinaryGeometry} from '@loaders.gl/schema';\n\ntype TransformCoordinate = (coord: number[]) => number[];\n\n/**\n * Apply transformation to every coordinate of binary features\n * @param  binaryFeatures binary features\n * @param  transformCoordinate Function to call on each coordinate\n * @return Transformed binary features\n */\nexport function transformBinaryCoords(\n  binaryFeatures: BinaryFeatures,\n  transformCoordinate: TransformCoordinate\n): BinaryFeatures {\n  if (binaryFeatures.points) {\n    transformBinaryGeometryPositions(binaryFeatures.points, transformCoordinate);\n  }\n  if (binaryFeatures.lines) {\n    transformBinaryGeometryPositions(binaryFeatures.lines, transformCoordinate);\n  }\n  if (binaryFeatures.polygons) {\n    transformBinaryGeometryPositions(binaryFeatures.polygons, transformCoordinate);\n  }\n  return binaryFeatures;\n}\n\n/** Transform one binary geometry */\nfunction transformBinaryGeometryPositions(binaryGeometry: BinaryGeometry, fn: TransformCoordinate) {\n  const {positions} = binaryGeometry;\n  for (let i = 0; i < positions.value.length; i += positions.size) {\n    // @ts-ignore inclusion of bigint causes problems\n    const coord: Array<number> = Array.from(positions.value.subarray(i, i + positions.size));\n    const transformedCoord = fn(coord);\n    // @ts-ignore typescript typing for .set seems to require bigint?\n    positions.value.set(transformedCoord, i);\n  }\n}\n\n/**\n * Apply transformation to every coordinate of GeoJSON features\n *\n * @param  features Array of GeoJSON features\n * @param  fn       Function to call on each coordinate\n * @return          Transformed GeoJSON features\n */\nexport function transformGeoJsonCoords(\n  features: object[],\n  fn: (coord: number[]) => number[]\n): object[] {\n  for (const feature of features) {\n    // @ts-ignore\n    feature.geometry.coordinates = coordMap(feature.geometry.coordinates, fn);\n  }\n  return features;\n}\n\nfunction coordMap(array, fn) {\n  if (isCoord(array)) {\n    return fn(array);\n  }\n\n  return array.map((item) => {\n    return coordMap(item, fn);\n  });\n}\n\nfunction isCoord(array) {\n  return Number.isFinite(array[0]) && Number.isFinite(array[1]);\n}\n"]},"metadata":{},"sourceType":"module"}