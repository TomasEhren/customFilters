{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { GridCellLayer } from '@deck.gl/layers';\nimport { defaultColorRange } from '../utils/color-utils';\nimport { pointToDensityGridDataCPU } from './grid-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer from '../aggregation-layer';\n\nfunction nop() {}\n\nvar defaultProps = {\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {\n    type: 'accessor',\n    value: null\n  },\n  getColorWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  colorAggregation: 'SUM',\n  lowerPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 0\n  },\n  upperPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 100\n  },\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {\n    type: 'accessor',\n    value: null\n  },\n  getElevationWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 0\n  },\n  elevationUpperPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 100\n  },\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n  gridAggregator: pointToDensityGridDataCPU,\n  cellSize: {\n    type: 'number',\n    min: 0,\n    max: 1000,\n    value: 1000\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  extruded: false,\n  material: true,\n  _filterData: {\n    type: 'function',\n    value: null,\n    optional: true\n  }\n};\n\nvar CPUGridLayer = /*#__PURE__*/function (_AggregationLayer) {\n  _inherits(CPUGridLayer, _AggregationLayer);\n\n  var _super = _createSuper(CPUGridLayer);\n\n  function CPUGridLayer() {\n    _classCallCheck(this, CPUGridLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CPUGridLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var cpuAggregator = new CPUAggregator({\n        getAggregator: function getAggregator(props) {\n          return props.gridAggregator;\n        },\n        getCellSize: function getCellSize(props) {\n          return props.cellSize;\n        }\n      });\n      this.state = {\n        cpuAggregator: cpuAggregator,\n        aggregatorState: cpuAggregator.state\n      };\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add({\n        positions: {\n          size: 3,\n          type: 5130,\n          accessor: 'getPosition'\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      _get(_getPrototypeOf(CPUGridLayer.prototype), \"updateState\", this).call(this, opts);\n\n      this.setState({\n        aggregatorState: this.state.cpuAggregator.updateState(opts, {\n          viewport: this.context.viewport,\n          attributes: this.getAttributes(),\n          numInstances: this.getNumInstances(opts.props)\n        })\n      });\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref) {\n      var info = _ref.info;\n      return this.state.cpuAggregator.getPickingInfo({\n        info: info\n      });\n    }\n  }, {\n    key: \"_onGetSublayerColor\",\n    value: function _onGetSublayerColor(cell) {\n      return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n    }\n  }, {\n    key: \"_onGetSublayerElevation\",\n    value: function _onGetSublayerElevation(cell) {\n      return this.state.cpuAggregator.getAccessor('elevation')(cell);\n    }\n  }, {\n    key: \"_getSublayerUpdateTriggers\",\n    value: function _getSublayerUpdateTriggers() {\n      return this.state.cpuAggregator.getUpdateTriggers(this.props);\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props = this.props,\n          elevationScale = _this$props.elevationScale,\n          extruded = _this$props.extruded,\n          cellSize = _this$props.cellSize,\n          coverage = _this$props.coverage,\n          material = _this$props.material,\n          transitions = _this$props.transitions;\n      var cpuAggregator = this.state.cpuAggregator;\n      var SubLayerClass = this.getSubLayerClass('grid-cell', GridCellLayer);\n\n      var updateTriggers = this._getSublayerUpdateTriggers();\n\n      return new SubLayerClass({\n        cellSize: cellSize,\n        coverage: coverage,\n        material: material,\n        elevationScale: elevationScale,\n        extruded: extruded,\n        getFillColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getFillColor: transitions.getColorValue || transitions.getColorWeight,\n          getElevation: transitions.getElevationValue || transitions.getElevationWeight\n        }\n      }, this.getSubLayerProps({\n        id: 'grid-cell',\n        updateTriggers: updateTriggers\n      }), {\n        data: cpuAggregator.state.layerData.data\n      });\n    }\n  }]);\n\n  return CPUGridLayer;\n}(AggregationLayer);\n\nexport { CPUGridLayer as default };\nCPUGridLayer.layerName = 'CPUGridLayer';\nCPUGridLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["GridCellLayer","defaultColorRange","pointToDensityGridDataCPU","CPUAggregator","AggregationLayer","nop","defaultProps","colorDomain","colorRange","getColorValue","type","value","getColorWeight","colorAggregation","lowerPercentile","min","max","upperPercentile","colorScaleType","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","getElevationWeight","elevationAggregation","elevationLowerPercentile","elevationUpperPercentile","elevationScale","elevationScaleType","onSetElevationDomain","gridAggregator","cellSize","coverage","getPosition","x","position","extruded","material","_filterData","optional","CPUGridLayer","initializeState","cpuAggregator","getAggregator","props","getCellSize","state","aggregatorState","attributeManager","getAttributeManager","add","positions","size","accessor","updateState","opts","setState","viewport","context","attributes","getAttributes","numInstances","getNumInstances","getPickingInfo","info","_onGetSublayerColor","cell","getAccessor","_onGetSublayerElevation","_getSublayerUpdateTriggers","getUpdateTriggers","renderLayers","transitions","SubLayerClass","getSubLayerClass","updateTriggers","getFillColor","bind","getElevation","getSubLayerProps","id","data","layerData","layerName"],"sources":["../../../src/cpu-grid-layer/cpu-grid-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {GridCellLayer} from '@deck.gl/layers';\n\nimport {defaultColorRange} from '../utils/color-utils';\nimport {pointToDensityGridDataCPU} from './grid-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer from '../aggregation-layer';\n\nimport GL from '@luma.gl/constants';\n\nfunction nop() {}\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {type: 'accessor', value: null}, // default value is calculated from `getColorWeight` and `colorAggregation`\n  getColorWeight: {type: 'accessor', value: 1},\n  colorAggregation: 'SUM',\n  lowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  upperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {type: 'accessor', value: null}, // default value is calculated from `getElevationWeight` and `elevationAggregation`\n  getElevationWeight: {type: 'accessor', value: 1},\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  elevationUpperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n\n  gridAggregator: pointToDensityGridDataCPU,\n\n  // grid\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getPosition: {type: 'accessor', value: x => x.position},\n  extruded: false,\n\n  // Optional material for 'lighting' shader module\n  material: true,\n\n  // data filter\n  _filterData: {type: 'function', value: null, optional: true}\n};\n\nexport default class CPUGridLayer extends AggregationLayer {\n  initializeState() {\n    const cpuAggregator = new CPUAggregator({\n      getAggregator: props => props.gridAggregator,\n      getCellSize: props => props.cellSize\n    });\n\n    this.state = {\n      cpuAggregator,\n      aggregatorState: cpuAggregator.state\n    };\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, type: GL.DOUBLE, accessor: 'getPosition'}\n    });\n    // color and elevation attributes can't be added as attributes\n    // they are calcualted using 'getValue' accessor that takes an array of pints.\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n    this.setState({\n      // make a copy of the internal state of cpuAggregator for testing\n      aggregatorState: this.state.cpuAggregator.updateState(opts, {\n        viewport: this.context.viewport,\n        attributes: this.getAttributes(),\n        numInstances: this.getNumInstances(opts.props)\n      })\n    });\n  }\n\n  getPickingInfo({info}) {\n    return this.state.cpuAggregator.getPickingInfo({info});\n  }\n\n  // create a method for testing\n  _onGetSublayerColor(cell) {\n    return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n  }\n\n  // create a method for testing\n  _onGetSublayerElevation(cell) {\n    return this.state.cpuAggregator.getAccessor('elevation')(cell);\n  }\n\n  _getSublayerUpdateTriggers() {\n    return this.state.cpuAggregator.getUpdateTriggers(this.props);\n  }\n\n  renderLayers() {\n    const {elevationScale, extruded, cellSize, coverage, material, transitions} = this.props;\n    const {cpuAggregator} = this.state;\n    const SubLayerClass = this.getSubLayerClass('grid-cell', GridCellLayer);\n    const updateTriggers = this._getSublayerUpdateTriggers();\n\n    return new SubLayerClass(\n      {\n        cellSize,\n        coverage,\n        material,\n        elevationScale,\n        extruded,\n\n        getFillColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getFillColor: transitions.getColorValue || transitions.getColorWeight,\n          getElevation: transitions.getElevationValue || transitions.getElevationWeight\n        }\n      },\n      this.getSubLayerProps({\n        id: 'grid-cell',\n        updateTriggers\n      }),\n      {\n        data: cpuAggregator.state.layerData.data\n      }\n    );\n  }\n}\n\nCPUGridLayer.layerName = 'CPUGridLayer';\nCPUGridLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}