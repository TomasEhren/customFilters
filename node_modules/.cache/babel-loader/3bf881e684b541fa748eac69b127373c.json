{"ast":null,"code":"import { assert } from '../env-utils/assert';\nimport { VERSION } from '../env-utils/version';\nexport function validateWorkerVersion(worker) {\n  var coreVersion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : VERSION;\n  assert(worker, 'no worker provided');\n  var workerVersion = worker.version;\n\n  if (!coreVersion || !workerVersion) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction parseVersion(version) {\n  var parts = version.split('.').map(Number);\n  return {\n    major: parts[0],\n    minor: parts[1]\n  };\n}","map":{"version":3,"mappings":"AACA,SAAQA,MAAR,QAAqB,qBAArB;AACA,SAAQC,OAAR,QAAsB,sBAAtB;AAQA,OAAO,SAASC,qBAAT,CACLC,MADK,EAGI;EAAA,IADTC,WACS,uEADaH,OACb;EACTD,MAAM,CAACG,MAAD,EAAS,oBAAT,CAANH;EAEA,IAAMK,aAAa,GAAGF,MAAM,CAACG,OAA7B;;EACA,IAAI,CAACF,WAAD,IAAgB,CAACC,aAArB,EAAoC;IAClC,OAAO,KAAP;EACD;;EAYD,OAAO,IAAP;AACD;;AAID,SAASE,YAAT,CAAsBD,OAAtB,EAA+B;EAC7B,IAAME,KAAK,GAAGF,OAAO,CAACG,KAARH,CAAc,GAAdA,EAAmBI,GAAnBJ,CAAuBK,MAAvBL,CAAd;EACA,OAAO;IAACM,KAAK,EAAEJ,KAAK,CAAC,CAAD,CAAb;IAAkBK,KAAK,EAAEL,KAAK,CAAC,CAAD;EAA9B,CAAP;AACD","names":["assert","VERSION","validateWorkerVersion","worker","coreVersion","workerVersion","version","parseVersion","parts","split","map","Number","major","minor"],"sources":["../../../../src/lib/worker-api/validate-worker-version.ts"],"sourcesContent":["import type {WorkerObject} from '../../types';\nimport {assert} from '../env-utils/assert';\nimport {VERSION} from '../env-utils/version';\n\n/**\n * Check if worker is compatible with this library version\n * @param worker\n * @param libVersion\n * @returns `true` if the two versions are compatible\n */\nexport function validateWorkerVersion(\n  worker: WorkerObject,\n  coreVersion: string = VERSION\n): boolean {\n  assert(worker, 'no worker provided');\n\n  const workerVersion = worker.version;\n  if (!coreVersion || !workerVersion) {\n    return false;\n  }\n\n  // TODO enable when fix the __version__ injection\n  // const coreVersions = parseVersion(coreVersion);\n  // const workerVersions = parseVersion(workerVersion);\n  // assert(\n  //   coreVersion.major === workerVersion.major && coreVersion.minor <= workerVersion.minor,\n  //   `worker: ${worker.name} is not compatible. ${coreVersion.major}.${\n  //     coreVersion.minor\n  //   }+ is required.`\n  // );\n\n  return true;\n}\n\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction parseVersion(version) {\n  const parts = version.split('.').map(Number);\n  return {major: parts[0], minor: parts[1]};\n}\n"]},"metadata":{},"sourceType":"module"}