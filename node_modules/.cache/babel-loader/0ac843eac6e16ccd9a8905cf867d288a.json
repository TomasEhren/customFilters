{"ast":null,"code":"var EMPTY_ARRAY = [];\nvar placeholderArray = [];\nexport function createIterable(data) {\n  var startRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var endRow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n  var iterable = EMPTY_ARRAY;\n  var objectInfo = {\n    index: -1,\n    data: data,\n    target: []\n  };\n\n  if (!data) {\n    iterable = EMPTY_ARRAY;\n  } else if (typeof data[Symbol.iterator] === 'function') {\n    iterable = data;\n  } else if (data.length > 0) {\n    placeholderArray.length = data.length;\n    iterable = placeholderArray;\n  }\n\n  if (startRow > 0 || Number.isFinite(endRow)) {\n    iterable = (Array.isArray(iterable) ? iterable : Array.from(iterable)).slice(startRow, endRow);\n    objectInfo.index = startRow - 1;\n  }\n\n  return {\n    iterable: iterable,\n    objectInfo: objectInfo\n  };\n}\nexport function isAsyncIterable(data) {\n  return data && data[Symbol.asyncIterator];\n}\nexport function getAccessorFromBuffer(typedArray, options) {\n  var size = options.size,\n      stride = options.stride,\n      offset = options.offset,\n      startIndices = options.startIndices,\n      nested = options.nested;\n  var bytesPerElement = typedArray.BYTES_PER_ELEMENT;\n  var elementStride = stride ? stride / bytesPerElement : size;\n  var elementOffset = offset ? offset / bytesPerElement : 0;\n  var vertexCount = Math.floor((typedArray.length - elementOffset) / elementStride);\n  return function (_, _ref) {\n    var index = _ref.index,\n        target = _ref.target;\n\n    if (!startIndices) {\n      var sourceIndex = index * elementStride + elementOffset;\n\n      for (var j = 0; j < size; j++) {\n        target[j] = typedArray[sourceIndex + j];\n      }\n\n      return target;\n    }\n\n    var startIndex = startIndices[index];\n    var endIndex = startIndices[index + 1] || vertexCount;\n    var result;\n\n    if (nested) {\n      result = new Array(endIndex - startIndex);\n\n      for (var i = startIndex; i < endIndex; i++) {\n        var _sourceIndex = i * elementStride + elementOffset;\n\n        target = new Array(size);\n\n        for (var _j = 0; _j < size; _j++) {\n          target[_j] = typedArray[_sourceIndex + _j];\n        }\n\n        result[i - startIndex] = target;\n      }\n    } else if (elementStride === size) {\n      result = typedArray.subarray(startIndex * size + elementOffset, endIndex * size + elementOffset);\n    } else {\n      result = new typedArray.constructor((endIndex - startIndex) * size);\n      var targetIndex = 0;\n\n      for (var _i = startIndex; _i < endIndex; _i++) {\n        var _sourceIndex2 = _i * elementStride + elementOffset;\n\n        for (var _j2 = 0; _j2 < size; _j2++) {\n          result[targetIndex++] = typedArray[_sourceIndex2 + _j2];\n        }\n      }\n    }\n\n    return result;\n  };\n}","map":{"version":3,"mappings":"AAoBA,IAAMA,WAAW,GAAG,EAApB;AACA,IAAMC,gBAAgB,GAAG,EAAzB;AAOA,OAAO,SAASC,cAAT,CACLC,IADK,EAWL;EAAA,IATAC,QASA,uEATW,CASX;EAAA,IARAC,MAQA,uEARSC,QAQT;EACA,IAAIC,QAAuB,GAAGP,WAA9B;EAEA,IAAMQ,UAAU,GAAG;IACjBC,KAAK,EAAE,CAAC,CADS;IAEjBN,IAFiB,EAEjBA,IAFiB;IAIjBO,MAAM,EAAE;EAJS,CAAnB;;EAOA,IAAI,CAACP,IAAL,EAAW;IACTI,QAAQ,GAAGP,WAAXO;EADF,OAEO,IAAI,OAAOJ,IAAI,CAACQ,MAAM,CAACC,QAAR,CAAX,KAAiC,UAArC,EAAiD;IAEtDL,QAAQ,GAAGJ,IAAXI;EAFK,OAGA,IAAIJ,IAAI,CAACU,MAALV,GAAc,CAAlB,EAAqB;IAC1BF,gBAAgB,CAACY,MAAjBZ,GAA0BE,IAAI,CAACU,MAA/BZ;IACAM,QAAQ,GAAGN,gBAAXM;EACD;;EAED,IAAIH,QAAQ,GAAG,CAAXA,IAAgBU,MAAM,CAACC,QAAPD,CAAgBT,MAAhBS,CAApB,EAA6C;IAC3CP,QAAQ,GAAG,CAACS,KAAK,CAACC,OAAND,CAAcT,QAAdS,IAA0BT,QAA1BS,GAAqCA,KAAK,CAACE,IAANF,CAAWT,QAAXS,CAAtC,EAA4DG,KAA5D,CAAkEf,QAAlE,EAA4EC,MAA5E,CAAXE;IACAC,UAAU,CAACC,KAAXD,GAAmBJ,QAAQ,GAAG,CAA9BI;EACD;;EAED,OAAO;IAACD,QAAD,EAACA,QAAD;IAAWC;EAAX,CAAP;AACD;AAKD,OAAO,SAASY,eAAT,CAAyBjB,IAAzB,EAAwC;EAC7C,OAAOA,IAAI,IAAIA,IAAI,CAACQ,MAAM,CAACU,aAAR,CAAnB;AACD;AAKD,OAAO,SAASC,qBAAT,CACLC,UADK,EAELC,OAFK,EASL;EACA,IAAOC,IAAP,GAAqDD,OAArD,CAAOC,IAAP;EAAA,IAAaC,MAAb,GAAqDF,OAArD,CAAaE,MAAb;EAAA,IAAqBC,MAArB,GAAqDH,OAArD,CAAqBG,MAArB;EAAA,IAA6BC,YAA7B,GAAqDJ,OAArD,CAA6BI,YAA7B;EAAA,IAA2CC,MAA3C,GAAqDL,OAArD,CAA2CK,MAA3C;EACA,IAAMC,eAAe,GAAGP,UAAU,CAACQ,iBAAnC;EACA,IAAMC,aAAa,GAAGN,MAAM,GAAGA,MAAM,GAAGI,eAAZ,GAA8BL,IAA1D;EACA,IAAMQ,aAAa,GAAGN,MAAM,GAAGA,MAAM,GAAGG,eAAZ,GAA8B,CAA1D;EACA,IAAMI,WAAW,GAAGC,IAAI,CAACC,KAALD,CAAW,CAACZ,UAAU,CAACV,MAAXU,GAAoBU,aAArB,IAAsCD,aAAjDG,CAApB;EAEA,OAAO,UAACE,CAAD,QAAwB;IAAA,IAAnB5B,KAAmB,QAAnBA,KAAmB;IAAA,IAAZC,MAAY,QAAZA,MAAY;;IAC7B,IAAI,CAACkB,YAAL,EAAmB;MACjB,IAAMU,WAAW,GAAG7B,KAAK,GAAGuB,aAARvB,GAAwBwB,aAA5C;;MACA,KAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,IAApB,EAA0Bc,CAAC,EAA3B,EAA+B;QAC7B7B,MAAM,CAAC6B,CAAD,CAAN7B,GAAYa,UAAU,CAACe,WAAW,GAAGC,CAAf,CAAtB7B;MACD;;MACD,OAAOA,MAAP;IACD;;IACD,IAAM8B,UAAU,GAAGZ,YAAY,CAACnB,KAAD,CAA/B;IACA,IAAMgC,QAAQ,GAAGb,YAAY,CAACnB,KAAK,GAAG,CAAT,CAAZmB,IAA2BM,WAA5C;IACA,IAAIQ,MAAJ;;IAEA,IAAIb,MAAJ,EAAY;MACVa,MAAM,GAAG,IAAI1B,KAAJ,CAAUyB,QAAQ,GAAGD,UAArB,CAATE;;MACA,KAAK,IAAIC,CAAC,GAAGH,UAAb,EAAyBG,CAAC,GAAGF,QAA7B,EAAuCE,CAAC,EAAxC,EAA4C;QAC1C,IAAML,YAAW,GAAGK,CAAC,GAAGX,aAAJW,GAAoBV,aAAxC;;QACAvB,MAAM,GAAG,IAAIM,KAAJ,CAAUS,IAAV,CAATf;;QACA,KAAK,IAAI6B,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGd,IAApB,EAA0Bc,EAAC,EAA3B,EAA+B;UAC7B7B,MAAM,CAAC6B,EAAD,CAAN7B,GAAYa,UAAU,CAACe,YAAW,GAAGC,EAAf,CAAtB7B;QACD;;QACDgC,MAAM,CAACC,CAAC,GAAGH,UAAL,CAANE,GAAyBhC,MAAzBgC;MACD;IATH,OAUO,IAAIV,aAAa,KAAKP,IAAtB,EAA4B;MACjCiB,MAAM,GAAGnB,UAAU,CAACqB,QAAXrB,CACPiB,UAAU,GAAGf,IAAbe,GAAoBP,aADbV,EAEPkB,QAAQ,GAAGhB,IAAXgB,GAAkBR,aAFXV,CAATmB;IADK,OAKA;MACLA,MAAM,GAAG,IAAInB,UAAU,CAACsB,WAAf,CAA2B,CAACJ,QAAQ,GAAGD,UAAZ,IAA0Bf,IAArD,CAATiB;MACA,IAAII,WAAW,GAAG,CAAlB;;MACA,KAAK,IAAIH,EAAC,GAAGH,UAAb,EAAyBG,EAAC,GAAGF,QAA7B,EAAuCE,EAAC,EAAxC,EAA4C;QAC1C,IAAML,aAAW,GAAGK,EAAC,GAAGX,aAAJW,GAAoBV,aAAxC;;QACA,KAAK,IAAIM,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGd,IAApB,EAA0Bc,GAAC,EAA3B,EAA+B;UAC7BG,MAAM,CAACI,WAAW,EAAZ,CAANJ,GAAwBnB,UAAU,CAACe,aAAW,GAAGC,GAAf,CAAlCG;QACD;MACF;IACF;;IAED,OAAOA,MAAP;EAtCF;AAwCD","names":["EMPTY_ARRAY","placeholderArray","createIterable","data","startRow","endRow","Infinity","iterable","objectInfo","index","target","Symbol","iterator","length","Number","isFinite","Array","isArray","from","slice","isAsyncIterable","asyncIterator","getAccessorFromBuffer","typedArray","options","size","stride","offset","startIndices","nested","bytesPerElement","BYTES_PER_ELEMENT","elementStride","elementOffset","vertexCount","Math","floor","_","sourceIndex","j","startIndex","endIndex","result","i","subarray","constructor","targetIndex"],"sources":["../../../src/utils/iterable-utils.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nconst EMPTY_ARRAY = [];\nconst placeholderArray = [];\n\n/*\n * Create an Iterable\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\n * and a \"context\" tracker from the given data\n */\nexport function createIterable(\n  data,\n  startRow = 0,\n  endRow = Infinity\n): {\n  iterable: Iterable<any>;\n  objectInfo: {\n    index: number;\n    data: any;\n    target: any[];\n  };\n} {\n  let iterable: Iterable<any> = EMPTY_ARRAY;\n\n  const objectInfo = {\n    index: -1,\n    data,\n    // visitor can optionally utilize this to avoid constructing a new array for every object\n    target: []\n  };\n\n  if (!data) {\n    iterable = EMPTY_ARRAY;\n  } else if (typeof data[Symbol.iterator] === 'function') {\n    // data is already an iterable\n    iterable = data;\n  } else if (data.length > 0) {\n    placeholderArray.length = data.length;\n    iterable = placeholderArray;\n  }\n\n  if (startRow > 0 || Number.isFinite(endRow)) {\n    iterable = (Array.isArray(iterable) ? iterable : Array.from(iterable)).slice(startRow, endRow);\n    objectInfo.index = startRow - 1;\n  }\n\n  return {iterable, objectInfo};\n}\n\n/*\n * Returns true if data is an async iterable object\n */\nexport function isAsyncIterable(data): boolean {\n  return data && data[Symbol.asyncIterator];\n}\n\n/*\n * Create an accessor function from a flat buffer that yields the value at each object index\n */\nexport function getAccessorFromBuffer(\n  typedArray,\n  options: {\n    size: number;\n    stride: number;\n    offset: number;\n    startIndices: number;\n    nested?: boolean;\n  }\n) {\n  const {size, stride, offset, startIndices, nested} = options;\n  const bytesPerElement = typedArray.BYTES_PER_ELEMENT;\n  const elementStride = stride ? stride / bytesPerElement : size;\n  const elementOffset = offset ? offset / bytesPerElement : 0;\n  const vertexCount = Math.floor((typedArray.length - elementOffset) / elementStride);\n\n  return (_, {index, target}) => {\n    if (!startIndices) {\n      const sourceIndex = index * elementStride + elementOffset;\n      for (let j = 0; j < size; j++) {\n        target[j] = typedArray[sourceIndex + j];\n      }\n      return target;\n    }\n    const startIndex = startIndices[index];\n    const endIndex = startIndices[index + 1] || vertexCount;\n    let result;\n\n    if (nested) {\n      result = new Array(endIndex - startIndex);\n      for (let i = startIndex; i < endIndex; i++) {\n        const sourceIndex = i * elementStride + elementOffset;\n        target = new Array(size);\n        for (let j = 0; j < size; j++) {\n          target[j] = typedArray[sourceIndex + j];\n        }\n        result[i - startIndex] = target;\n      }\n    } else if (elementStride === size) {\n      result = typedArray.subarray(\n        startIndex * size + elementOffset,\n        endIndex * size + elementOffset\n      );\n    } else {\n      result = new typedArray.constructor((endIndex - startIndex) * size);\n      let targetIndex = 0;\n      for (let i = startIndex; i < endIndex; i++) {\n        const sourceIndex = i * elementStride + elementOffset;\n        for (let j = 0; j < size; j++) {\n          result[targetIndex++] = typedArray[sourceIndex + j];\n        }\n      }\n    }\n\n    return result;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}