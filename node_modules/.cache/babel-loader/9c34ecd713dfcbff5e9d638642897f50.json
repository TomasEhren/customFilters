{"ast":null,"code":"import { LineLayer, SolidPolygonLayer } from '@deck.gl/layers';\nimport { generateContours } from './contour-utils';\nimport { log } from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport { AGGREGATION_OPERATION, getValueFunc } from '../utils/aggregation-operation-utils';\nimport { getBoundingBox, getGridParams } from '../utils/grid-aggregation-utils';\nimport GridAggregationLayer from '../grid-aggregation-layer';\nconst DEFAULT_COLOR = [255, 255, 255, 255];\nconst DEFAULT_STROKE_WIDTH = 1;\nconst DEFAULT_THRESHOLD = 1;\nconst defaultProps = {\n  cellSize: {\n    type: 'number',\n    min: 1,\n    max: 1000,\n    value: 1000\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  gpuAggregation: true,\n  aggregation: 'SUM',\n  contours: [{\n    threshold: DEFAULT_THRESHOLD\n  }],\n  zOffset: 0.005\n};\nconst POSITION_ATTRIBUTE_NAME = 'positions';\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSize']\n  },\n  weights: {\n    props: ['aggregation'],\n    accessors: ['getWeight']\n  }\n};\nexport default class ContourLayer extends GridAggregationLayer {\n  initializeState() {\n    super.initializeState({\n      dimensions: DIMENSIONS\n    });\n    this.setState({\n      contourData: {},\n      projectPoints: false,\n      weights: {\n        count: {\n          size: 1,\n          operation: AGGREGATION_OPERATION.SUM\n        }\n      }\n    });\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: 5130,\n        fp64: this.use64bitPositions()\n      },\n      count: {\n        size: 3,\n        accessor: 'getWeight'\n      }\n    });\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n    let contoursChanged = false;\n    const {\n      oldProps,\n      props\n    } = opts;\n    const {\n      aggregationDirty\n    } = this.state;\n\n    if (oldProps.contours !== props.contours || oldProps.zOffset !== props.zOffset) {\n      contoursChanged = true;\n\n      this._updateThresholdData(opts.props);\n    }\n\n    if (this.getNumInstances() > 0 && (aggregationDirty || contoursChanged)) {\n      this._generateContours();\n    }\n  }\n\n  renderLayers() {\n    const {\n      contourSegments,\n      contourPolygons\n    } = this.state.contourData;\n    const LinesSubLayerClass = this.getSubLayerClass('lines', LineLayer);\n    const BandsSubLayerClass = this.getSubLayerClass('bands', SolidPolygonLayer);\n    const lineLayer = contourSegments && contourSegments.length > 0 && new LinesSubLayerClass(this.getSubLayerProps({\n      id: 'lines'\n    }), {\n      data: this.state.contourData.contourSegments,\n      getSourcePosition: d => d.start,\n      getTargetPosition: d => d.end,\n      getColor: d => d.contour.color || DEFAULT_COLOR,\n      getWidth: d => d.contour.strokeWidth || DEFAULT_STROKE_WIDTH\n    });\n    const bandsLayer = contourPolygons && contourPolygons.length > 0 && new BandsSubLayerClass(this.getSubLayerProps({\n      id: 'bands'\n    }), {\n      data: this.state.contourData.contourPolygons,\n      getPolygon: d => d.vertices,\n      getFillColor: d => d.contour.color || DEFAULT_COLOR\n    });\n    return [lineLayer, bandsLayer];\n  }\n\n  updateAggregationState(opts) {\n    const {\n      props,\n      oldProps\n    } = opts;\n    const {\n      cellSize,\n      coordinateSystem\n    } = props;\n    const {\n      viewport\n    } = this.context;\n    const cellSizeChanged = oldProps.cellSize !== cellSize;\n    let gpuAggregation = props.gpuAggregation;\n\n    if (this.state.gpuAggregation !== props.gpuAggregation) {\n      if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.gl)) {\n        log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n        gpuAggregation = false;\n      }\n    }\n\n    const gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n    this.setState({\n      gpuAggregation\n    });\n    const {\n      dimensions\n    } = this.state;\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n    const {\n      data,\n      weights\n    } = dimensions;\n    let {\n      boundingBox\n    } = this.state;\n\n    if (positionsChanged) {\n      boundingBox = getBoundingBox(this.getAttributes(), this.getNumInstances());\n      this.setState({\n        boundingBox\n      });\n    }\n\n    if (positionsChanged || cellSizeChanged) {\n      const {\n        gridOffset,\n        translation,\n        width,\n        height,\n        numCol,\n        numRow\n      } = getGridParams(boundingBox, cellSize, viewport, coordinateSystem);\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        gridOffset,\n        boundingBox,\n        translation,\n        posOffset: translation.slice(),\n        gridOrigin: [-1 * translation[0], -1 * translation[1]],\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n\n    const aggregationDataDirty = positionsChanged || gpuAggregationChanged || this.isAggregationDirty(opts, {\n      dimension: data,\n      compareAll: gpuAggregation\n    });\n    const aggregationWeightsDirty = this.isAggregationDirty(opts, {\n      dimension: weights\n    });\n\n    if (aggregationWeightsDirty) {\n      this._updateAccessors(opts);\n    }\n\n    if (aggregationDataDirty || aggregationWeightsDirty) {\n      this._resetResults();\n    }\n\n    this.setState({\n      aggregationDataDirty,\n      aggregationWeightsDirty\n    });\n  }\n\n  _updateAccessors(opts) {\n    const {\n      getWeight,\n      aggregation,\n      data\n    } = opts.props;\n    const {\n      count\n    } = this.state.weights;\n\n    if (count) {\n      count.getWeight = getWeight;\n      count.operation = AGGREGATION_OPERATION[aggregation];\n    }\n\n    this.setState({\n      getValue: getValueFunc(aggregation, getWeight, {\n        data\n      })\n    });\n  }\n\n  _resetResults() {\n    const {\n      count\n    } = this.state.weights;\n\n    if (count) {\n      count.aggregationData = null;\n    }\n  }\n\n  _generateContours() {\n    const {\n      numCol,\n      numRow,\n      gridOrigin,\n      gridOffset,\n      thresholdData\n    } = this.state;\n    const {\n      count\n    } = this.state.weights;\n    let {\n      aggregationData\n    } = count;\n\n    if (!aggregationData) {\n      aggregationData = count.aggregationBuffer.getData();\n      count.aggregationData = aggregationData;\n    }\n\n    const {\n      cellWeights\n    } = GPUGridAggregator.getCellData({\n      countsData: aggregationData\n    });\n    const contourData = generateContours({\n      thresholdData,\n      cellWeights,\n      gridSize: [numCol, numRow],\n      gridOrigin,\n      cellSize: [gridOffset.xOffset, gridOffset.yOffset]\n    });\n    this.setState({\n      contourData\n    });\n  }\n\n  _updateThresholdData(props) {\n    const {\n      contours,\n      zOffset\n    } = props;\n    const count = contours.length;\n    const thresholdData = new Array(count);\n\n    for (let i = 0; i < count; i++) {\n      const contour = contours[i];\n      thresholdData[i] = {\n        contour,\n        zIndex: contour.zIndex || i,\n        zOffset\n      };\n    }\n\n    this.setState({\n      thresholdData\n    });\n  }\n\n}\nContourLayer.layerName = 'ContourLayer';\nContourLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["LineLayer","SolidPolygonLayer","generateContours","log","GPUGridAggregator","AGGREGATION_OPERATION","getValueFunc","getBoundingBox","getGridParams","GridAggregationLayer","DEFAULT_COLOR","DEFAULT_STROKE_WIDTH","DEFAULT_THRESHOLD","defaultProps","cellSize","type","min","max","value","getPosition","x","position","getWeight","gpuAggregation","aggregation","contours","threshold","zOffset","POSITION_ATTRIBUTE_NAME","DIMENSIONS","data","props","weights","accessors","ContourLayer","initializeState","dimensions","setState","contourData","projectPoints","count","size","operation","SUM","attributeManager","getAttributeManager","add","accessor","fp64","use64bitPositions","updateState","opts","contoursChanged","oldProps","aggregationDirty","state","_updateThresholdData","getNumInstances","_generateContours","renderLayers","contourSegments","contourPolygons","LinesSubLayerClass","getSubLayerClass","BandsSubLayerClass","lineLayer","length","getSubLayerProps","id","getSourcePosition","d","start","getTargetPosition","end","getColor","contour","color","getWidth","strokeWidth","bandsLayer","getPolygon","vertices","getFillColor","updateAggregationState","coordinateSystem","viewport","context","cellSizeChanged","isSupported","gl","warn","gpuAggregationChanged","positionsChanged","isAttributeChanged","boundingBox","getAttributes","gridOffset","translation","width","height","numCol","numRow","allocateResources","posOffset","slice","gridOrigin","aggregationDataDirty","isAggregationDirty","dimension","compareAll","aggregationWeightsDirty","_updateAccessors","_resetResults","getValue","aggregationData","thresholdData","aggregationBuffer","getData","cellWeights","getCellData","countsData","gridSize","xOffset","yOffset","Array","i","zIndex","layerName"],"sources":["../../../src/contour-layer/contour-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {LineLayer, SolidPolygonLayer} from '@deck.gl/layers';\nimport {generateContours} from './contour-utils';\nimport {log} from '@deck.gl/core';\n\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION, getValueFunc} from '../utils/aggregation-operation-utils';\nimport {getBoundingBox, getGridParams} from '../utils/grid-aggregation-utils';\nimport GridAggregationLayer from '../grid-aggregation-layer';\n\nconst DEFAULT_COLOR = [255, 255, 255, 255];\nconst DEFAULT_STROKE_WIDTH = 1;\nconst DEFAULT_THRESHOLD = 1;\n\nconst defaultProps = {\n  // grid aggregation\n  cellSize: {type: 'number', min: 1, max: 1000, value: 1000},\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: 1},\n  gpuAggregation: true,\n  aggregation: 'SUM',\n\n  // contour lines\n  contours: [{threshold: DEFAULT_THRESHOLD}],\n\n  zOffset: 0.005\n};\n\nconst POSITION_ATTRIBUTE_NAME = 'positions';\n\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSize']\n  },\n  weights: {\n    props: ['aggregation'],\n    accessors: ['getWeight']\n  }\n};\n\nexport default class ContourLayer extends GridAggregationLayer {\n  initializeState() {\n    super.initializeState({\n      dimensions: DIMENSIONS\n    });\n    this.setState({\n      contourData: {},\n      projectPoints: false,\n      weights: {\n        count: {\n          size: 1,\n          operation: AGGREGATION_OPERATION.SUM\n        }\n      }\n    });\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions()\n      },\n      // this attribute is used in gpu aggregation path only\n      count: {size: 3, accessor: 'getWeight'}\n    });\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n    let contoursChanged = false;\n    const {oldProps, props} = opts;\n    const {aggregationDirty} = this.state;\n\n    if (oldProps.contours !== props.contours || oldProps.zOffset !== props.zOffset) {\n      contoursChanged = true;\n      this._updateThresholdData(opts.props);\n    }\n\n    if (this.getNumInstances() > 0 && (aggregationDirty || contoursChanged)) {\n      this._generateContours();\n    }\n  }\n\n  renderLayers() {\n    const {contourSegments, contourPolygons} = this.state.contourData;\n\n    const LinesSubLayerClass = this.getSubLayerClass('lines', LineLayer);\n    const BandsSubLayerClass = this.getSubLayerClass('bands', SolidPolygonLayer);\n\n    // Contour lines layer\n    const lineLayer =\n      contourSegments &&\n      contourSegments.length > 0 &&\n      new LinesSubLayerClass(\n        this.getSubLayerProps({\n          id: 'lines'\n        }),\n        {\n          data: this.state.contourData.contourSegments,\n          getSourcePosition: d => d.start,\n          getTargetPosition: d => d.end,\n          getColor: d => d.contour.color || DEFAULT_COLOR,\n          getWidth: d => d.contour.strokeWidth || DEFAULT_STROKE_WIDTH\n        }\n      );\n\n    // Contour bands layer\n    const bandsLayer =\n      contourPolygons &&\n      contourPolygons.length > 0 &&\n      new BandsSubLayerClass(\n        this.getSubLayerProps({\n          id: 'bands'\n        }),\n        {\n          data: this.state.contourData.contourPolygons,\n          getPolygon: d => d.vertices,\n          getFillColor: d => d.contour.color || DEFAULT_COLOR\n        }\n      );\n\n    return [lineLayer, bandsLayer];\n  }\n\n  // Aggregation Overrides\n\n  /* eslint-disable max-statements, complexity */\n  updateAggregationState(opts) {\n    const {props, oldProps} = opts;\n    const {cellSize, coordinateSystem} = props;\n    const {viewport} = this.context;\n    const cellSizeChanged = oldProps.cellSize !== cellSize;\n    let gpuAggregation = props.gpuAggregation;\n    if (this.state.gpuAggregation !== props.gpuAggregation) {\n      if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.gl)) {\n        log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n        gpuAggregation = false;\n      }\n    }\n    const gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n    this.setState({\n      gpuAggregation\n    });\n\n    const {dimensions} = this.state;\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n    const {data, weights} = dimensions;\n\n    let {boundingBox} = this.state;\n    if (positionsChanged) {\n      boundingBox = getBoundingBox(this.getAttributes(), this.getNumInstances());\n      this.setState({boundingBox});\n    }\n    if (positionsChanged || cellSizeChanged) {\n      const {gridOffset, translation, width, height, numCol, numRow} = getGridParams(\n        boundingBox,\n        cellSize,\n        viewport,\n        coordinateSystem\n      );\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        gridOffset,\n        boundingBox,\n        translation,\n        posOffset: translation.slice(), // Used for CPU aggregation, to offset points\n        gridOrigin: [-1 * translation[0], -1 * translation[1]],\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n\n    const aggregationDataDirty =\n      positionsChanged ||\n      gpuAggregationChanged ||\n      this.isAggregationDirty(opts, {\n        dimension: data,\n        compareAll: gpuAggregation // check for all (including extentions props) when using gpu aggregation\n      });\n    const aggregationWeightsDirty = this.isAggregationDirty(opts, {\n      dimension: weights\n    });\n\n    if (aggregationWeightsDirty) {\n      this._updateAccessors(opts);\n    }\n    if (aggregationDataDirty || aggregationWeightsDirty) {\n      this._resetResults();\n    }\n    this.setState({\n      aggregationDataDirty,\n      aggregationWeightsDirty\n    });\n  }\n  /* eslint-enable max-statements, complexity */\n\n  // Private (Aggregation)\n\n  _updateAccessors(opts) {\n    const {getWeight, aggregation, data} = opts.props;\n    const {count} = this.state.weights;\n    if (count) {\n      count.getWeight = getWeight;\n      count.operation = AGGREGATION_OPERATION[aggregation];\n    }\n    this.setState({getValue: getValueFunc(aggregation, getWeight, {data})});\n  }\n\n  _resetResults() {\n    const {count} = this.state.weights;\n    if (count) {\n      count.aggregationData = null;\n    }\n  }\n\n  // Private (Contours)\n\n  _generateContours() {\n    const {numCol, numRow, gridOrigin, gridOffset, thresholdData} = this.state;\n    const {count} = this.state.weights;\n    let {aggregationData} = count;\n    if (!aggregationData) {\n      aggregationData = count.aggregationBuffer.getData();\n      count.aggregationData = aggregationData;\n    }\n\n    const {cellWeights} = GPUGridAggregator.getCellData({countsData: aggregationData});\n    const contourData = generateContours({\n      thresholdData,\n      cellWeights,\n      gridSize: [numCol, numRow],\n      gridOrigin,\n      cellSize: [gridOffset.xOffset, gridOffset.yOffset]\n    });\n\n    // contourData contains both iso-lines and iso-bands if requested.\n    this.setState({contourData});\n  }\n\n  _updateThresholdData(props) {\n    const {contours, zOffset} = props;\n    const count = contours.length;\n    const thresholdData = new Array(count);\n    for (let i = 0; i < count; i++) {\n      const contour = contours[i];\n      thresholdData[i] = {\n        contour,\n        zIndex: contour.zIndex || i,\n        zOffset\n      };\n    }\n    this.setState({thresholdData});\n  }\n}\n\nContourLayer.layerName = 'ContourLayer';\nContourLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}