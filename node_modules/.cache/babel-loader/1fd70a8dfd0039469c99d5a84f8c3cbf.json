{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shouldPolyfill = void 0;\n\nvar intl_localematcher_1 = require(\"@formatjs/intl-localematcher\");\n\nvar supported_locales_1 = require(\"./supported-locales\");\n/**\n * Check if this is old Node that only supports en\n * @returns\n */\n\n\nfunction onlySupportsEn() {\n  return !Intl.NumberFormat.polyfilled && !Intl.NumberFormat.supportedLocalesOf(['es']).length;\n}\n/**\n * Check if Intl.NumberFormat is ES2020 compatible.\n * Caveat: we are not checking `toLocaleString`.\n *\n * @public\n * @param unit unit to check\n */\n\n\nfunction supportsES2020() {\n  try {\n    var s = new Intl.NumberFormat('en', {\n      style: 'unit',\n      unit: 'bit',\n      unitDisplay: 'long',\n      notation: 'scientific'\n    }).format(10000); // Check for a plurality bug in environment that uses the older versions of ICU:\n    // https://unicode-org.atlassian.net/browse/ICU-13836\n\n    if (s !== '1E4 bits') {\n      return false;\n    }\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction supportedLocalesOf(locale) {\n  if (!locale) {\n    return true;\n  }\n\n  var locales = Array.isArray(locale) ? locale : [locale];\n  return Intl.NumberFormat.supportedLocalesOf(locales).length === locales.length;\n}\n\nfunction shouldPolyfill(locale) {\n  if (locale === void 0) {\n    locale = 'en';\n  }\n\n  if (typeof Intl === 'undefined' || !('NumberFormat' in Intl) || !supportsES2020() || onlySupportsEn() || !supportedLocalesOf(locale)) {\n    return locale ? (0, intl_localematcher_1.match)([locale], supported_locales_1.supportedLocales, 'en') : undefined;\n  }\n}\n\nexports.shouldPolyfill = shouldPolyfill;","map":{"version":3,"names":["Object","defineProperty","exports","value","shouldPolyfill","intl_localematcher_1","require","supported_locales_1","onlySupportsEn","Intl","NumberFormat","polyfilled","supportedLocalesOf","length","supportsES2020","s","style","unit","unitDisplay","notation","format","e","locale","locales","Array","isArray","match","supportedLocales","undefined"],"sources":["/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@formatjs/intl-numberformat/should-polyfill.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shouldPolyfill = void 0;\nvar intl_localematcher_1 = require(\"@formatjs/intl-localematcher\");\nvar supported_locales_1 = require(\"./supported-locales\");\n/**\n * Check if this is old Node that only supports en\n * @returns\n */\nfunction onlySupportsEn() {\n    return (!Intl.NumberFormat.polyfilled &&\n        !Intl.NumberFormat.supportedLocalesOf(['es']).length);\n}\n/**\n * Check if Intl.NumberFormat is ES2020 compatible.\n * Caveat: we are not checking `toLocaleString`.\n *\n * @public\n * @param unit unit to check\n */\nfunction supportsES2020() {\n    try {\n        var s = new Intl.NumberFormat('en', {\n            style: 'unit',\n            unit: 'bit',\n            unitDisplay: 'long',\n            notation: 'scientific',\n        }).format(10000);\n        // Check for a plurality bug in environment that uses the older versions of ICU:\n        // https://unicode-org.atlassian.net/browse/ICU-13836\n        if (s !== '1E4 bits') {\n            return false;\n        }\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nfunction supportedLocalesOf(locale) {\n    if (!locale) {\n        return true;\n    }\n    var locales = Array.isArray(locale) ? locale : [locale];\n    return Intl.NumberFormat.supportedLocalesOf(locales).length === locales.length;\n}\nfunction shouldPolyfill(locale) {\n    if (locale === void 0) { locale = 'en'; }\n    if (typeof Intl === 'undefined' ||\n        !('NumberFormat' in Intl) ||\n        !supportsES2020() ||\n        onlySupportsEn() ||\n        !supportedLocalesOf(locale)) {\n        return locale ? (0, intl_localematcher_1.match)([locale], supported_locales_1.supportedLocales, 'en') : undefined;\n    }\n}\nexports.shouldPolyfill = shouldPolyfill;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyB,KAAK,CAA9B;;AACA,IAAIC,oBAAoB,GAAGC,OAAO,CAAC,8BAAD,CAAlC;;AACA,IAAIC,mBAAmB,GAAGD,OAAO,CAAC,qBAAD,CAAjC;AACA;AACA;AACA;AACA;;;AACA,SAASE,cAAT,GAA0B;EACtB,OAAQ,CAACC,IAAI,CAACC,YAAL,CAAkBC,UAAnB,IACJ,CAACF,IAAI,CAACC,YAAL,CAAkBE,kBAAlB,CAAqC,CAAC,IAAD,CAArC,EAA6CC,MADlD;AAEH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,cAAT,GAA0B;EACtB,IAAI;IACA,IAAIC,CAAC,GAAG,IAAIN,IAAI,CAACC,YAAT,CAAsB,IAAtB,EAA4B;MAChCM,KAAK,EAAE,MADyB;MAEhCC,IAAI,EAAE,KAF0B;MAGhCC,WAAW,EAAE,MAHmB;MAIhCC,QAAQ,EAAE;IAJsB,CAA5B,EAKLC,MALK,CAKE,KALF,CAAR,CADA,CAOA;IACA;;IACA,IAAIL,CAAC,KAAK,UAAV,EAAsB;MAClB,OAAO,KAAP;IACH;EACJ,CAZD,CAaA,OAAOM,CAAP,EAAU;IACN,OAAO,KAAP;EACH;;EACD,OAAO,IAAP;AACH;;AACD,SAAST,kBAAT,CAA4BU,MAA5B,EAAoC;EAChC,IAAI,CAACA,MAAL,EAAa;IACT,OAAO,IAAP;EACH;;EACD,IAAIC,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAcH,MAAd,IAAwBA,MAAxB,GAAiC,CAACA,MAAD,CAA/C;EACA,OAAOb,IAAI,CAACC,YAAL,CAAkBE,kBAAlB,CAAqCW,OAArC,EAA8CV,MAA9C,KAAyDU,OAAO,CAACV,MAAxE;AACH;;AACD,SAAST,cAAT,CAAwBkB,MAAxB,EAAgC;EAC5B,IAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;IAAEA,MAAM,GAAG,IAAT;EAAgB;;EACzC,IAAI,OAAOb,IAAP,KAAgB,WAAhB,IACA,EAAE,kBAAkBA,IAApB,CADA,IAEA,CAACK,cAAc,EAFf,IAGAN,cAAc,EAHd,IAIA,CAACI,kBAAkB,CAACU,MAAD,CAJvB,EAIiC;IAC7B,OAAOA,MAAM,GAAG,CAAC,GAAGjB,oBAAoB,CAACqB,KAAzB,EAAgC,CAACJ,MAAD,CAAhC,EAA0Cf,mBAAmB,CAACoB,gBAA9D,EAAgF,IAAhF,CAAH,GAA2FC,SAAxG;EACH;AACJ;;AACD1B,OAAO,CAACE,cAAR,GAAyBA,cAAzB"},"metadata":{},"sourceType":"script"}