{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Buffer, Transform } from '@luma.gl/core';\nimport Attribute from '../lib/attribute/attribute';\nimport { padBuffer, getAttributeTypeFromSize, getSourceBufferAttribute, getAttributeBufferLength, cycleBuffers } from '../lib/attribute/attribute-transition-utils';\nimport Transition from './transition';\n\nvar GPUInterpolationTransition = /*#__PURE__*/function () {\n  function GPUInterpolationTransition(_ref) {\n    var gl = _ref.gl,\n        attribute = _ref.attribute,\n        timeline = _ref.timeline;\n\n    _classCallCheck(this, GPUInterpolationTransition);\n\n    this.gl = gl;\n    this.type = 'interpolation';\n    this.transition = new Transition(timeline);\n    this.attribute = attribute;\n    this.attributeInTransition = new Attribute(gl, attribute.settings);\n    this.currentStartIndices = attribute.startIndices;\n    this.currentLength = 0;\n    this.transform = getTransform(gl, attribute);\n    var bufferOpts = {\n      byteLength: 0,\n      usage: 35050\n    };\n    this.buffers = [new Buffer(gl, bufferOpts), new Buffer(gl, bufferOpts)];\n  }\n\n  _createClass(GPUInterpolationTransition, [{\n    key: \"inProgress\",\n    get: function get() {\n      return this.transition.inProgress;\n    }\n  }, {\n    key: \"start\",\n    value: function start(transitionSettings, numInstances) {\n      if (transitionSettings.duration <= 0) {\n        this.transition.cancel();\n        return;\n      }\n\n      var gl = this.gl,\n          buffers = this.buffers,\n          attribute = this.attribute;\n      cycleBuffers(buffers);\n      var padBufferOpts = {\n        numInstances: numInstances,\n        attribute: attribute,\n        fromLength: this.currentLength,\n        fromStartIndices: this.currentStartIndices,\n        getData: transitionSettings.enter\n      };\n\n      var _iterator = _createForOfIteratorHelper(buffers),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var buffer = _step.value;\n          padBuffer(_objectSpread({\n            buffer: buffer\n          }, padBufferOpts));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.currentStartIndices = attribute.startIndices;\n      this.currentLength = getAttributeBufferLength(attribute, numInstances);\n      this.attributeInTransition.update({\n        buffer: buffers[1],\n        value: attribute.value\n      });\n      this.transition.start(transitionSettings);\n      this.transform.update({\n        elementCount: Math.floor(this.currentLength / attribute.size),\n        sourceBuffers: {\n          aFrom: buffers[0],\n          aTo: getSourceBufferAttribute(gl, attribute)\n        },\n        feedbackBuffers: {\n          vCurrent: buffers[1]\n        }\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var updated = this.transition.update();\n\n      if (updated) {\n        var _this$transition = this.transition,\n            time = _this$transition.time,\n            _this$transition$sett = _this$transition.settings,\n            duration = _this$transition$sett.duration,\n            easing = _this$transition$sett.easing;\n        var t = easing(time / duration);\n        this.transform.run({\n          uniforms: {\n            time: t\n          }\n        });\n      }\n\n      return updated;\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.transition.cancel();\n      this.transform.delete();\n\n      while (this.buffers.length) {\n        this.buffers.pop().delete();\n      }\n    }\n  }]);\n\n  return GPUInterpolationTransition;\n}();\n\nexport { GPUInterpolationTransition as default };\nvar vs = \"\\n#define SHADER_NAME interpolation-transition-vertex-shader\\n\\nuniform float time;\\nattribute ATTRIBUTE_TYPE aFrom;\\nattribute ATTRIBUTE_TYPE aTo;\\nvarying ATTRIBUTE_TYPE vCurrent;\\n\\nvoid main(void) {\\n  vCurrent = mix(aFrom, aTo, time);\\n  gl_Position = vec4(0.0);\\n}\\n\";\n\nfunction getTransform(gl, attribute) {\n  var attributeType = getAttributeTypeFromSize(attribute.size);\n  return new Transform(gl, {\n    vs: vs,\n    defines: {\n      ATTRIBUTE_TYPE: attributeType\n    },\n    varyings: ['vCurrent']\n  });\n}","map":{"version":3,"mappings":"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","names":["Buffer","Transform","Attribute","padBuffer","getAttributeTypeFromSize","getSourceBufferAttribute","getAttributeBufferLength","cycleBuffers","Transition","GPUInterpolationTransition","constructor","gl","attribute","timeline","type","transition","attributeInTransition","settings","currentStartIndices","startIndices","currentLength","transform","getTransform","bufferOpts","byteLength","usage","buffers","inProgress","start","transitionSettings","numInstances","duration","cancel","padBufferOpts","fromLength","fromStartIndices","getData","enter","buffer","update","value","elementCount","Math","floor","size","sourceBuffers","aFrom","aTo","feedbackBuffers","vCurrent","updated","time","easing","t","run","uniforms","delete","length","pop","vs","attributeType","defines","ATTRIBUTE_TYPE","varyings"],"sources":["../../../src/transitions/gpu-interpolation-transition.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {Buffer, Transform} from '@luma.gl/core';\nimport Attribute from '../lib/attribute/attribute';\nimport {\n  padBuffer,\n  getAttributeTypeFromSize,\n  getSourceBufferAttribute,\n  getAttributeBufferLength,\n  cycleBuffers\n} from '../lib/attribute/attribute-transition-utils';\nimport Transition from './transition';\n\nexport default class GPUInterpolationTransition {\n  constructor({gl, attribute, timeline}) {\n    this.gl = gl;\n    this.type = 'interpolation';\n    this.transition = new Transition(timeline);\n    this.attribute = attribute;\n    // this is the attribute we return during the transition - note: if it is a constant\n    // attribute, it will be converted and returned as a regular attribute\n    // `attribute.userData` is the original options passed when constructing the attribute.\n    // This ensures that we set the proper `doublePrecision` flag and shader attributes.\n    this.attributeInTransition = new Attribute(gl, attribute.settings);\n    this.currentStartIndices = attribute.startIndices;\n    // storing currentLength because this.buffer may be larger than the actual length we want to use\n    // this is because we only reallocate buffers when they grow, not when they shrink,\n    // due to performance costs\n    this.currentLength = 0;\n    this.transform = getTransform(gl, attribute);\n    const bufferOpts = {\n      byteLength: 0,\n      usage: GL.DYNAMIC_COPY\n    };\n    this.buffers = [\n      new Buffer(gl, bufferOpts), // from\n      new Buffer(gl, bufferOpts) // current\n    ];\n  }\n\n  get inProgress() {\n    return this.transition.inProgress;\n  }\n\n  // this is called when an attribute's values have changed and\n  // we need to start animating towards the new values\n  // this also correctly resizes / pads the transform's buffers\n  // in case the attribute's buffer has changed in length or in\n  // startIndices\n  start(transitionSettings, numInstances) {\n    if (transitionSettings.duration <= 0) {\n      this.transition.cancel();\n      return;\n    }\n\n    const {gl, buffers, attribute} = this;\n    // Alternate between two buffers when new transitions start.\n    // Last destination buffer is used as an attribute (from state),\n    // And the other buffer is now the current buffer.\n    cycleBuffers(buffers);\n\n    const padBufferOpts = {\n      numInstances,\n      attribute,\n      fromLength: this.currentLength,\n      fromStartIndices: this.currentStartIndices,\n      getData: transitionSettings.enter\n    };\n\n    for (const buffer of buffers) {\n      padBuffer({buffer, ...padBufferOpts});\n    }\n\n    this.currentStartIndices = attribute.startIndices;\n    this.currentLength = getAttributeBufferLength(attribute, numInstances);\n    this.attributeInTransition.update({\n      buffer: buffers[1],\n      // Hack: Float64Array is required for double-precision attributes\n      // to generate correct shader attributes\n      value: attribute.value\n    });\n\n    this.transition.start(transitionSettings);\n\n    this.transform.update({\n      elementCount: Math.floor(this.currentLength / attribute.size),\n      sourceBuffers: {\n        aFrom: buffers[0],\n        aTo: getSourceBufferAttribute(gl, attribute)\n      },\n      feedbackBuffers: {\n        vCurrent: buffers[1]\n      }\n    });\n  }\n\n  update() {\n    const updated = this.transition.update();\n    if (updated) {\n      const {\n        time,\n        settings: {duration, easing}\n      } = this.transition;\n      const t = easing(time / duration);\n      this.transform.run({\n        uniforms: {time: t}\n      });\n    }\n    return updated;\n  }\n\n  cancel() {\n    this.transition.cancel();\n    this.transform.delete();\n    while (this.buffers.length) {\n      this.buffers.pop().delete();\n    }\n  }\n}\n\nconst vs = `\n#define SHADER_NAME interpolation-transition-vertex-shader\n\nuniform float time;\nattribute ATTRIBUTE_TYPE aFrom;\nattribute ATTRIBUTE_TYPE aTo;\nvarying ATTRIBUTE_TYPE vCurrent;\n\nvoid main(void) {\n  vCurrent = mix(aFrom, aTo, time);\n  gl_Position = vec4(0.0);\n}\n`;\n\nfunction getTransform(gl, attribute) {\n  const attributeType = getAttributeTypeFromSize(attribute.size);\n  return new Transform(gl, {\n    vs,\n    defines: {\n      ATTRIBUTE_TYPE: attributeType\n    },\n    varyings: ['vCurrent']\n  });\n}\n"]},"metadata":{},"sourceType":"module"}