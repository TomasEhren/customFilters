{"ast":null,"code":"import _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\n\nvar isObject = function isObject(value) {\n  return value && typeof value === 'object';\n};\n\nexport function asyncDeepMap(_x, _x2) {\n  return _asyncDeepMap.apply(this, arguments);\n}\n\nfunction _asyncDeepMap() {\n  _asyncDeepMap = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tree, func) {\n    var options,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            _context.next = 3;\n            return mapSubtree(tree, func, options);\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _asyncDeepMap.apply(this, arguments);\n}\n\nexport function mapSubtree(_x3, _x4, _x5) {\n  return _mapSubtree.apply(this, arguments);\n}\n\nfunction _mapSubtree() {\n  _mapSubtree = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(object, func, options) {\n    var url;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!Array.isArray(object)) {\n              _context2.next = 4;\n              break;\n            }\n\n            _context2.next = 3;\n            return mapArray(object, func, options);\n\n          case 3:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 4:\n            if (!isObject(object)) {\n              _context2.next = 8;\n              break;\n            }\n\n            _context2.next = 7;\n            return mapObject(object, func, options);\n\n          case 7:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 8:\n            url = object;\n            _context2.next = 11;\n            return func(url, options);\n\n          case 11:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _mapSubtree.apply(this, arguments);\n}\n\nfunction mapObject(_x6, _x7, _x8) {\n  return _mapObject.apply(this, arguments);\n}\n\nfunction _mapObject() {\n  _mapObject = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(object, func, options) {\n    var promises, values, _loop, key;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            promises = [];\n            values = {};\n\n            _loop = function _loop(key) {\n              var url = object[key];\n              var promise = mapSubtree(url, func, options).then(function (value) {\n                values[key] = value;\n              });\n              promises.push(promise);\n            };\n\n            for (key in object) {\n              _loop(key);\n            }\n\n            _context3.next = 6;\n            return Promise.all(promises);\n\n          case 6:\n            return _context3.abrupt(\"return\", values);\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _mapObject.apply(this, arguments);\n}\n\nfunction mapArray(_x9, _x10) {\n  return _mapArray.apply(this, arguments);\n}\n\nfunction _mapArray() {\n  _mapArray = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(urlArray, func) {\n    var options,\n        promises,\n        _args4 = arguments;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            options = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};\n            promises = urlArray.map(function (url) {\n              return mapSubtree(url, func, options);\n            });\n            _context4.next = 4;\n            return Promise.all(promises);\n\n          case 4:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _mapArray.apply(this, arguments);\n}","map":{"version":3,"mappings":";;;AAgBA,IAAMA,QAAQ,GAAIC,SAAZD,QAAYC,MAAD;EAAA,OAAWA,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAArC;AAAA,CAAjB;;AAKA,gBAAsBC,YAAtB;EAAA;AAAA;;;2EAAO,iBAA4BC,IAA5B,EAAkCC,IAAlC;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAAwCC,OAAxC,2DAAkD,EAAlD;YAAA;YAAA,OACQC,UAAU,CAACH,IAAD,EAAOC,IAAP,EAAaC,OAAb,CADlB;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAIP,gBAAsBC,UAAtB;EAAA;AAAA;;;yEAAO,kBAA0BC,MAA1B,EAAkCH,IAAlC,EAAwCC,OAAxC;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,KACDG,KAAK,CAACC,OAAND,CAAcD,MAAdC,CADC;cAAA;cAAA;YAAA;;YAAA;YAAA,OAEUE,QAAQ,CAACH,MAAD,EAASH,IAAT,EAAeC,OAAf,CAFlB;;UAAA;YAAA;;UAAA;YAAA,KAKDL,QAAQ,CAACO,MAAD,CALP;cAAA;cAAA;YAAA;;YAAA;YAAA,OAMUI,SAAS,CAACJ,MAAD,EAASH,IAAT,EAAeC,OAAf,CANnB;;UAAA;YAAA;;UAAA;YAUCO,GAVD,GAUOL,MAVP;YAAA;YAAA,OAWQH,IAAI,CAACQ,GAAD,EAAMP,OAAN,CAXZ;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;SAgBQM,S;;;;;wEAAf,kBAAyBJ,MAAzB,EAAiCH,IAAjC,EAAuCC,OAAvC;IAAA;;IAAA;MAAA;QAAA;UAAA;YACQQ,QADR,GACmC,EADnC;YAEQC,MAFR,GAEiB,EAFjB;;YAAA,uBAIaC,GAJb;cAKI,IAAMH,GAAG,GAAGL,MAAM,CAACQ,GAAD,CAAlB;cACA,IAAMC,OAAO,GAAGV,UAAU,CAACM,GAAD,EAAMR,IAAN,EAAYC,OAAZ,CAAVC,CAA+BW,IAA/BX,CAAqCL,eAAD,EAAW;gBAC7Da,MAAM,CAACC,GAAD,CAAND,GAAcb,KAAda;cADc,EAAhB;cAGAD,QAAQ,CAACK,IAATL,CAAcG,OAAdH;YATJ;;YAIE,KAAWE,GAAX,IAAkBR,MAAlB,EAA0B;cAAA,MAAfQ,GAAe;YAMzB;;YAVH;YAAA,OAYQI,OAAO,CAACC,GAARD,CAAYN,QAAZM,CAZR;;UAAA;YAAA,kCAcSL,MAdT;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;SAiBeJ,Q;;;;;uEAAf,kBAAwBW,QAAxB,EAAkCjB,IAAlC;IAAA;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAAwCC,OAAxC,8DAAkD,EAAlD;YACQQ,QADR,GACmBQ,QAAQ,CAACC,GAATD,CAAcT,aAAD;cAAA,OAASN,UAAU,CAACM,GAAD,EAAMR,IAAN,EAAYC,OAAZ,CAAnB;YAAA,CAAbgB,CADnB;YAAA;YAAA,OAEeF,OAAO,CAACC,GAARD,CAAYN,QAAZM,CAFf;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","names":["isObject","value","asyncDeepMap","tree","func","options","mapSubtree","object","Array","isArray","mapArray","mapObject","url","promises","values","key","promise","then","push","Promise","all","urlArray","map"],"sources":["../../../../src/lib/texture-api/async-deep-map.ts"],"sourcesContent":["/*\nAsynchronously maps a deep structure of values (e.g. objects and arrays of urls).\n\nE.g. a mipmapped cubemap\n{\n  [CUBE_FACE_FRONT]: [\n    \"image-front-0.jpg\",\n    \"image-front-1.jpg\",\n    \"image-front-2.jpg\",\n  ],\n  [CUBE_MAP_BACK]: [\n    ...\n  ]\n}\n*/\n\nconst isObject = (value) => value && typeof value === 'object';\n\n// Loads a deep structure of urls (objects and arrays of urls)\n// Returns an object with six key-value pairs containing the images (or image mip arrays)\n// for each cube face\nexport async function asyncDeepMap(tree, func, options = {}) {\n  return await mapSubtree(tree, func, options);\n}\n\nexport async function mapSubtree(object, func, options) {\n  if (Array.isArray(object)) {\n    return await mapArray(object, func, options);\n  }\n\n  if (isObject(object)) {\n    return await mapObject(object, func, options);\n  }\n\n  // TODO - ignore non-urls, non-arraybuffers?\n  const url = object;\n  return await func(url, options);\n}\n\n// HELPERS\n\nasync function mapObject(object, func, options) {\n  const promises: Promise<any>[] = [];\n  const values = {};\n\n  for (const key in object) {\n    const url = object[key];\n    const promise = mapSubtree(url, func, options).then((value) => {\n      values[key] = value;\n    });\n    promises.push(promise);\n  }\n\n  await Promise.all(promises);\n\n  return values;\n}\n\nasync function mapArray(urlArray, func, options = {}) {\n  const promises = urlArray.map((url) => mapSubtree(url, func, options));\n  return await Promise.all(promises);\n}\n"]},"metadata":{},"sourceType":"module"}