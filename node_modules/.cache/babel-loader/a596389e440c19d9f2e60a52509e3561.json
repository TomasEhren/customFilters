{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MeasureDistanceMode = void 0;\n\nvar _distance = _interopRequireDefault(require(\"@turf/distance\"));\n\nvar _midpoint = _interopRequireDefault(require(\"@turf/midpoint\"));\n\nvar _utils = require(\"../utils\");\n\nvar _geojsonEditMode = require(\"./geojson-edit-mode\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar MeasureDistanceMode = /*#__PURE__*/function (_GeoJsonEditMode) {\n  _inherits(MeasureDistanceMode, _GeoJsonEditMode);\n\n  var _super = _createSuper(MeasureDistanceMode);\n\n  function MeasureDistanceMode() {\n    var _this;\n\n    _classCallCheck(this, MeasureDistanceMode);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"_isMeasuringSessionFinished\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"_currentTooltips\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"_currentDistance\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_calculateDistanceForTooltip\", function (_ref) {\n      var positionA = _ref.positionA,\n          positionB = _ref.positionB,\n          modeConfig = _ref.modeConfig;\n\n      var _ref2 = modeConfig || {},\n          turfOptions = _ref2.turfOptions,\n          measurementCallback = _ref2.measurementCallback;\n\n      var distance = (0, _distance[\"default\"])(positionA, positionB, turfOptions);\n\n      if (measurementCallback) {\n        measurementCallback(distance);\n      }\n\n      return distance;\n    });\n\n    return _this;\n  }\n\n  _createClass(MeasureDistanceMode, [{\n    key: \"_formatTooltip\",\n    value: function _formatTooltip(distance, modeConfig) {\n      var _ref3 = modeConfig || {},\n          formatTooltip = _ref3.formatTooltip,\n          turfOptions = _ref3.turfOptions;\n\n      var units = turfOptions && turfOptions.units || 'kilometers';\n      var text;\n\n      if (formatTooltip) {\n        text = formatTooltip(distance);\n      } else {\n        // By default, round to 2 decimal places and append units\n        text = \"\".concat(parseFloat(distance).toFixed(2), \" \").concat(units);\n      }\n\n      return text;\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event, props) {\n      var modeConfig = props.modeConfig,\n          data = props.data,\n          onEdit = props.onEdit;\n\n      var _ref4 = modeConfig || {},\n          _ref4$centerTooltipsO = _ref4.centerTooltipsOnLine,\n          centerTooltipsOnLine = _ref4$centerTooltipsO === void 0 ? false : _ref4$centerTooltipsO; // restart measuring session\n\n\n      if (this._isMeasuringSessionFinished) {\n        this._isMeasuringSessionFinished = false;\n        this.resetClickSequence();\n        this._currentTooltips = [];\n        this._currentDistance = 0;\n      }\n\n      var picks = event.picks;\n      var clickedEditHandle = (0, _utils.getPickedEditHandle)(picks);\n      var positionAdded = false;\n\n      if (!clickedEditHandle) {\n        // Don't add another point right next to an existing one\n        this.addClickSequence(event);\n        positionAdded = true;\n      }\n\n      var clickSequence = this.getClickSequence();\n\n      if (clickSequence.length > 1 && clickedEditHandle && Array.isArray(clickedEditHandle.properties.positionIndexes) && clickedEditHandle.properties.positionIndexes[0] === clickSequence.length - 1) {\n        // They clicked the last point (or double-clicked), so add the LineString\n        this._isMeasuringSessionFinished = true;\n      } else if (positionAdded) {\n        if (clickSequence.length > 1) {\n          this._currentDistance += this._calculateDistanceForTooltip({\n            positionA: clickSequence[clickSequence.length - 2],\n            positionB: clickSequence[clickSequence.length - 1],\n            modeConfig: modeConfig\n          });\n          var tooltipPosition = centerTooltipsOnLine ? (0, _midpoint[\"default\"])(clickSequence[clickSequence.length - 2], clickSequence[clickSequence.length - 1]).geometry.coordinates : event.mapCoords;\n\n          this._currentTooltips.push({\n            position: tooltipPosition,\n            text: this._formatTooltip(this._currentDistance, modeConfig)\n          });\n        } // new tentative point\n\n\n        onEdit({\n          // data is the same\n          updatedData: data,\n          editType: 'addTentativePosition',\n          editContext: {\n            position: event.mapCoords\n          }\n        });\n      }\n    }\n  }, {\n    key: \"handleKeyUp\",\n    value: function handleKeyUp(event, props) {\n      if (this._isMeasuringSessionFinished) return;\n      event.stopPropagation();\n      var key = event.key;\n      var clickSequenceLength = this.getClickSequence().length;\n\n      switch (key) {\n        case 'Escape':\n          this._isMeasuringSessionFinished = true;\n\n          if (clickSequenceLength === 1) {\n            this.resetClickSequence();\n            this._currentTooltips = [];\n          } // force update drawings\n\n\n          props.onUpdateCursor('cell');\n          break;\n\n        case 'Enter':\n          this.handleClick(props.lastPointerMoveEvent, props);\n          this._isMeasuringSessionFinished = true;\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, {\n    key: \"getGuides\",\n    value: function getGuides(props) {\n      var _guides$features;\n\n      var lastPointerMoveEvent = props.lastPointerMoveEvent;\n      var clickSequence = this.getClickSequence();\n      var lastCoords = lastPointerMoveEvent && !this._isMeasuringSessionFinished ? [lastPointerMoveEvent.mapCoords] : [];\n      var guides = {\n        type: 'FeatureCollection',\n        features: []\n      };\n\n      if (clickSequence.length > 0) {\n        guides.features.push({\n          type: 'Feature',\n          properties: {\n            guideType: 'tentative'\n          },\n          geometry: {\n            type: 'LineString',\n            coordinates: [].concat(_toConsumableArray(clickSequence), lastCoords)\n          }\n        });\n      }\n\n      var editHandles = clickSequence.map(function (clickedCoord, index) {\n        return {\n          type: 'Feature',\n          properties: {\n            guideType: 'editHandle',\n            editHandleType: 'existing',\n            featureIndex: -1,\n            positionIndexes: [index]\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: clickedCoord\n          }\n        };\n      });\n\n      (_guides$features = guides.features).push.apply(_guides$features, _toConsumableArray(editHandles)); // @ts-ignore\n\n\n      return guides;\n    }\n  }, {\n    key: \"handlePointerMove\",\n    value: function handlePointerMove(event, props) {\n      props.onUpdateCursor('cell');\n    }\n  }, {\n    key: \"getTooltips\",\n    value: function getTooltips(props) {\n      var lastPointerMoveEvent = props.lastPointerMoveEvent,\n          modeConfig = props.modeConfig;\n\n      var _ref5 = modeConfig || {},\n          _ref5$centerTooltipsO = _ref5.centerTooltipsOnLine,\n          centerTooltipsOnLine = _ref5$centerTooltipsO === void 0 ? false : _ref5$centerTooltipsO;\n\n      var positions = this.getClickSequence();\n\n      if (positions.length > 0 && lastPointerMoveEvent && !this._isMeasuringSessionFinished) {\n        var distance = this._calculateDistanceForTooltip({\n          positionA: positions[positions.length - 1],\n          positionB: lastPointerMoveEvent.mapCoords,\n          modeConfig: props.modeConfig\n        });\n\n        var tooltipPosition = centerTooltipsOnLine ? (0, _midpoint[\"default\"])(positions[positions.length - 1], lastPointerMoveEvent.mapCoords).geometry.coordinates : lastPointerMoveEvent.mapCoords;\n        return [].concat(_toConsumableArray(this._currentTooltips), [{\n          position: tooltipPosition,\n          text: this._formatTooltip(this._currentDistance + distance, modeConfig)\n        }]);\n      }\n\n      return this._currentTooltips;\n    }\n  }]);\n\n  return MeasureDistanceMode;\n}(_geojsonEditMode.GeoJsonEditMode);\n\nexports.MeasureDistanceMode = MeasureDistanceMode;","map":{"version":3,"mappings":"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","names":["MeasureDistanceMode","positionA","positionB","modeConfig","turfOptions","measurementCallback","distance","formatTooltip","units","text","parseFloat","toFixed","event","props","data","onEdit","centerTooltipsOnLine","_isMeasuringSessionFinished","resetClickSequence","_currentTooltips","_currentDistance","picks","clickedEditHandle","positionAdded","addClickSequence","clickSequence","getClickSequence","length","Array","isArray","properties","positionIndexes","_calculateDistanceForTooltip","tooltipPosition","geometry","coordinates","mapCoords","push","position","_formatTooltip","updatedData","editType","editContext","stopPropagation","key","clickSequenceLength","onUpdateCursor","handleClick","lastPointerMoveEvent","lastCoords","guides","type","features","guideType","editHandles","map","clickedCoord","index","editHandleType","featureIndex","positions","GeoJsonEditMode"],"sources":["../../src/lib/measure-distance-mode.ts"],"sourcesContent":["import turfDistance from '@turf/distance';\nimport turfMidpoint from '@turf/midpoint';\nimport { FeatureCollection } from '../geojson-types';\nimport { ClickEvent, PointerMoveEvent, ModeProps, GuideFeatureCollection, Tooltip } from '../types';\nimport { getPickedEditHandle } from '../utils';\nimport { GeoJsonEditMode } from './geojson-edit-mode';\n\nexport class MeasureDistanceMode extends GeoJsonEditMode {\n  _isMeasuringSessionFinished = false;\n  _currentTooltips = [];\n  _currentDistance = 0;\n\n  _calculateDistanceForTooltip = ({ positionA, positionB, modeConfig }) => {\n    const { turfOptions, measurementCallback } = modeConfig || {};\n    const distance = turfDistance(positionA, positionB, turfOptions);\n\n    if (measurementCallback) {\n      measurementCallback(distance);\n    }\n\n    return distance;\n  };\n\n  _formatTooltip(distance, modeConfig?) {\n    const { formatTooltip, turfOptions } = modeConfig || {};\n    const units = (turfOptions && turfOptions.units) || 'kilometers';\n\n    let text;\n    if (formatTooltip) {\n      text = formatTooltip(distance);\n    } else {\n      // By default, round to 2 decimal places and append units\n      text = `${parseFloat(distance).toFixed(2)} ${units}`;\n    }\n\n    return text;\n  }\n\n  handleClick(event: ClickEvent, props: ModeProps<FeatureCollection>) {\n    const { modeConfig, data, onEdit } = props;\n    const { centerTooltipsOnLine = false } = modeConfig || {};\n\n    // restart measuring session\n    if (this._isMeasuringSessionFinished) {\n      this._isMeasuringSessionFinished = false;\n      this.resetClickSequence();\n      this._currentTooltips = [];\n      this._currentDistance = 0;\n    }\n\n    const { picks } = event;\n    const clickedEditHandle = getPickedEditHandle(picks);\n\n    let positionAdded = false;\n    if (!clickedEditHandle) {\n      // Don't add another point right next to an existing one\n      this.addClickSequence(event);\n      positionAdded = true;\n    }\n    const clickSequence = this.getClickSequence();\n\n    if (\n      clickSequence.length > 1 &&\n      clickedEditHandle &&\n      Array.isArray(clickedEditHandle.properties.positionIndexes) &&\n      clickedEditHandle.properties.positionIndexes[0] === clickSequence.length - 1\n    ) {\n      // They clicked the last point (or double-clicked), so add the LineString\n      this._isMeasuringSessionFinished = true;\n    } else if (positionAdded) {\n      if (clickSequence.length > 1) {\n        this._currentDistance += this._calculateDistanceForTooltip({\n          positionA: clickSequence[clickSequence.length - 2],\n          positionB: clickSequence[clickSequence.length - 1],\n          modeConfig,\n        });\n\n        const tooltipPosition = centerTooltipsOnLine\n          ? turfMidpoint(\n              clickSequence[clickSequence.length - 2],\n              clickSequence[clickSequence.length - 1]\n            ).geometry.coordinates\n          : event.mapCoords;\n\n        this._currentTooltips.push({\n          position: tooltipPosition,\n          text: this._formatTooltip(this._currentDistance, modeConfig),\n        });\n      }\n\n      // new tentative point\n      onEdit({\n        // data is the same\n        updatedData: data,\n        editType: 'addTentativePosition',\n        editContext: {\n          position: event.mapCoords,\n        },\n      });\n    }\n  }\n\n  handleKeyUp(event: KeyboardEvent, props: ModeProps<FeatureCollection>) {\n    if (this._isMeasuringSessionFinished) return;\n\n    event.stopPropagation();\n    const { key } = event;\n\n    const clickSequenceLength = this.getClickSequence().length;\n\n    switch (key) {\n      case 'Escape':\n        this._isMeasuringSessionFinished = true;\n        if (clickSequenceLength === 1) {\n          this.resetClickSequence();\n          this._currentTooltips = [];\n        }\n        // force update drawings\n        props.onUpdateCursor('cell');\n        break;\n      case 'Enter':\n        this.handleClick(props.lastPointerMoveEvent, props);\n        this._isMeasuringSessionFinished = true;\n        break;\n      default:\n        break;\n    }\n  }\n\n  getGuides(props: ModeProps<FeatureCollection>): GuideFeatureCollection {\n    const { lastPointerMoveEvent } = props;\n    const clickSequence = this.getClickSequence();\n\n    const lastCoords =\n      lastPointerMoveEvent && !this._isMeasuringSessionFinished\n        ? [lastPointerMoveEvent.mapCoords]\n        : [];\n\n    const guides = {\n      type: 'FeatureCollection',\n      features: [],\n    };\n\n    if (clickSequence.length > 0) {\n      guides.features.push({\n        type: 'Feature',\n        properties: {\n          guideType: 'tentative',\n        },\n        geometry: {\n          type: 'LineString',\n          coordinates: [...clickSequence, ...lastCoords],\n        },\n      });\n    }\n\n    const editHandles = clickSequence.map((clickedCoord, index) => ({\n      type: 'Feature',\n      properties: {\n        guideType: 'editHandle',\n        editHandleType: 'existing',\n        featureIndex: -1,\n        positionIndexes: [index],\n      },\n      geometry: {\n        type: 'Point',\n        coordinates: clickedCoord,\n      },\n    }));\n\n    guides.features.push(...editHandles);\n    // @ts-ignore\n    return guides;\n  }\n\n  handlePointerMove(event: PointerMoveEvent, props: ModeProps<FeatureCollection>) {\n    props.onUpdateCursor('cell');\n  }\n\n  getTooltips(props: ModeProps<FeatureCollection>): Tooltip[] {\n    const { lastPointerMoveEvent, modeConfig } = props;\n    const { centerTooltipsOnLine = false } = modeConfig || {};\n    const positions = this.getClickSequence();\n\n    if (positions.length > 0 && lastPointerMoveEvent && !this._isMeasuringSessionFinished) {\n      const distance = this._calculateDistanceForTooltip({\n        positionA: positions[positions.length - 1],\n        positionB: lastPointerMoveEvent.mapCoords,\n        modeConfig: props.modeConfig,\n      });\n\n      const tooltipPosition = centerTooltipsOnLine\n        ? turfMidpoint(positions[positions.length - 1], lastPointerMoveEvent.mapCoords).geometry\n            .coordinates\n        : lastPointerMoveEvent.mapCoords;\n\n      return [\n        ...this._currentTooltips,\n        {\n          position: tooltipPosition,\n          text: this._formatTooltip(this._currentDistance + distance, modeConfig),\n        },\n      ];\n    }\n\n    return this._currentTooltips;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}