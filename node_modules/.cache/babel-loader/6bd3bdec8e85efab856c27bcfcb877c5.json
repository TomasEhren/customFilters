{"ast":null,"code":"import { assert } from '../../utils/assert';\nimport GLTFScenegraph from '../../api/gltf-scenegraph';\nconst KHR_LIGHTS_PUNCTUAL = 'KHR_lights_punctual';\nexport const name = KHR_LIGHTS_PUNCTUAL;\nexport async function decode(gltfData) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {\n    json\n  } = gltfScenegraph;\n  const extension = gltfScenegraph.getExtension(KHR_LIGHTS_PUNCTUAL);\n\n  if (extension) {\n    gltfScenegraph.json.lights = extension.lights;\n    gltfScenegraph.removeExtension(KHR_LIGHTS_PUNCTUAL);\n  }\n\n  for (const node of json.nodes || []) {\n    const nodeExtension = gltfScenegraph.getObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n\n    if (nodeExtension) {\n      node.light = nodeExtension.light;\n    }\n\n    gltfScenegraph.removeObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n  }\n}\nexport async function encode(gltfData) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {\n    json\n  } = gltfScenegraph;\n\n  if (json.lights) {\n    const extension = gltfScenegraph.addExtension(KHR_LIGHTS_PUNCTUAL);\n    assert(!extension.lights);\n    extension.lights = json.lights;\n    delete json.lights;\n  }\n\n  if (gltfScenegraph.json.lights) {\n    for (const light of gltfScenegraph.json.lights) {\n      const node = light.node;\n      gltfScenegraph.addObjectExtension(node, KHR_LIGHTS_PUNCTUAL, light);\n    }\n\n    delete gltfScenegraph.json.lights;\n  }\n}","map":{"version":3,"mappings":"AAKA,SAAQA,MAAR,QAAqB,oBAArB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AAEA,MAAMC,mBAAmB,GAAG,qBAA5B;AAEA,OAAO,MAAMC,IAAI,GAAGD,mBAAb;AAEP,OAAO,eAAeE,MAAf,CAAsBC,QAAtB,EAA6D;EAClE,MAAMC,cAAc,GAAG,IAAIL,cAAJ,CAAmBI,QAAnB,CAAvB;EACA,MAAM;IAACE;EAAD,IAASD,cAAf;EAGA,MAAME,SAAS,GAAGF,cAAc,CAACG,YAAfH,CAA4BJ,mBAA5BI,CAAlB;;EACA,IAAIE,SAAJ,EAAe;IAEbF,cAAc,CAACC,IAAfD,CAAoBI,MAApBJ,GAA6BE,SAAS,CAACE,MAAvCJ;IACAA,cAAc,CAACK,eAAfL,CAA+BJ,mBAA/BI;EACD;;EAID,KAAK,MAAMM,IAAX,IAAmBL,IAAI,CAACM,KAALN,IAAc,EAAjC,EAAqC;IACnC,MAAMO,aAAa,GAAGR,cAAc,CAACS,kBAAfT,CAAkCM,IAAlCN,EAAwCJ,mBAAxCI,CAAtB;;IACA,IAAIQ,aAAJ,EAAmB;MAEjBF,IAAI,CAACI,KAALJ,GAAaE,aAAa,CAACE,KAA3BJ;IACD;;IACDN,cAAc,CAACW,qBAAfX,CAAqCM,IAArCN,EAA2CJ,mBAA3CI;EACD;AACF;AAGD,OAAO,eAAeY,MAAf,CAAsBb,QAAtB,EAA+C;EACpD,MAAMC,cAAc,GAAG,IAAIL,cAAJ,CAAmBI,QAAnB,CAAvB;EACA,MAAM;IAACE;EAAD,IAASD,cAAf;;EAGA,IAAIC,IAAI,CAACG,MAAT,EAAiB;IACf,MAAMF,SAAS,GAAGF,cAAc,CAACa,YAAfb,CAA4BJ,mBAA5BI,CAAlB;IAEAN,MAAM,CAAC,CAACQ,SAAS,CAACE,MAAZ,CAANV;IAEAQ,SAAS,CAACE,MAAVF,GAAmBD,IAAI,CAACG,MAAxBF;IAEA,OAAOD,IAAI,CAACG,MAAZ;EACD;;EAKD,IAAIJ,cAAc,CAACC,IAAfD,CAAoBI,MAAxB,EAAgC;IAE9B,KAAK,MAAMM,KAAX,IAAoBV,cAAc,CAACC,IAAfD,CAAoBI,MAAxC,EAAgD;MAC9C,MAAME,IAAI,GAAGI,KAAK,CAACJ,IAAnB;MACAN,cAAc,CAACc,kBAAfd,CAAkCM,IAAlCN,EAAwCJ,mBAAxCI,EAA6DU,KAA7DV;IACD;;IAED,OAAOA,cAAc,CAACC,IAAfD,CAAoBI,MAA3B;EACD;AACF","names":["assert","GLTFScenegraph","KHR_LIGHTS_PUNCTUAL","name","decode","gltfData","gltfScenegraph","json","extension","getExtension","lights","removeExtension","node","nodes","nodeExtension","getObjectExtension","light","removeObjectExtension","encode","addExtension","addObjectExtension"],"sources":["../../../../../src/lib/extensions/deprecated/KHR_lights_punctual.ts"],"sourcesContent":["// GLTF EXTENSION: KHR_lights_punctual\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\n\nimport type {GLTF} from '../../types/gltf-types';\n\nimport {assert} from '../../utils/assert';\nimport GLTFScenegraph from '../../api/gltf-scenegraph';\n\nconst KHR_LIGHTS_PUNCTUAL = 'KHR_lights_punctual';\n\nexport const name = KHR_LIGHTS_PUNCTUAL;\n\nexport async function decode(gltfData: {json: GLTF}): Promise<void> {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  // Move the light array out of the extension and remove the extension\n  const extension = gltfScenegraph.getExtension(KHR_LIGHTS_PUNCTUAL);\n  if (extension) {\n    // @ts-ignore\n    gltfScenegraph.json.lights = extension.lights;\n    gltfScenegraph.removeExtension(KHR_LIGHTS_PUNCTUAL);\n  }\n\n  // Any nodes that have the extension, add lights field pointing to light object\n  // and remove the extension\n  for (const node of json.nodes || []) {\n    const nodeExtension = gltfScenegraph.getObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n    if (nodeExtension) {\n      // @ts-ignore\n      node.light = nodeExtension.light;\n    }\n    gltfScenegraph.removeObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n  }\n}\n\n// Move the light ar ray out of the extension and remove the extension\nexport async function encode(gltfData): Promise<void> {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  // @ts-ignore\n  if (json.lights) {\n    const extension = gltfScenegraph.addExtension(KHR_LIGHTS_PUNCTUAL);\n    // @ts-ignore\n    assert(!extension.lights);\n    // @ts-ignore\n    extension.lights = json.lights;\n    // @ts-ignore\n    delete json.lights;\n  }\n\n  // Any nodes that have lights field pointing to light object\n  // add the extension\n  // @ts-ignore\n  if (gltfScenegraph.json.lights) {\n    // @ts-ignore\n    for (const light of gltfScenegraph.json.lights) {\n      const node = light.node;\n      gltfScenegraph.addObjectExtension(node, KHR_LIGHTS_PUNCTUAL, light);\n    }\n    // @ts-ignore\n    delete gltfScenegraph.json.lights;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}