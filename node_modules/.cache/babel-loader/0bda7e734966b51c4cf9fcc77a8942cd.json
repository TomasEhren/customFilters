{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { assert } from '@loaders.gl/loader-utils';\nexport default class ManagedArray {\n  constructor() {\n    let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    _defineProperty(this, \"_map\", new Map());\n\n    _defineProperty(this, \"_array\", void 0);\n\n    _defineProperty(this, \"_length\", void 0);\n\n    this._array = new Array(length);\n    this._length = length;\n  }\n\n  get length() {\n    return this._length;\n  }\n\n  set length(length) {\n    this._length = length;\n\n    if (length > this._array.length) {\n      this._array.length = length;\n    }\n  }\n\n  get values() {\n    return this._array;\n  }\n\n  get(index) {\n    assert(index < this._array.length);\n    return this._array[index];\n  }\n\n  set(index, element) {\n    assert(index >= 0);\n\n    if (index >= this.length) {\n      this.length = index + 1;\n    }\n\n    if (this._map.has(this._array[index])) {\n      this._map.delete(this._array[index]);\n    }\n\n    this._array[index] = element;\n\n    this._map.set(element, index);\n  }\n\n  delete(element) {\n    const index = this._map.get(element);\n\n    if (index >= 0) {\n      this._array.splice(index, 1);\n\n      this._map.delete(element);\n\n      this.length--;\n    }\n  }\n\n  peek() {\n    return this._array[this._length - 1];\n  }\n\n  push(element) {\n    if (!this._map.has(element)) {\n      const index = this.length++;\n      this._array[index] = element;\n\n      this._map.set(element, index);\n    }\n  }\n\n  pop() {\n    const element = this._array[--this.length];\n\n    this._map.delete(element);\n\n    return element;\n  }\n\n  reserve(length) {\n    assert(length >= 0);\n\n    if (length > this._array.length) {\n      this._array.length = length;\n    }\n  }\n\n  resize(length) {\n    assert(length >= 0);\n    this.length = length;\n  }\n\n  trim(length) {\n    if (length === null || length === undefined) {\n      length = this.length;\n    }\n\n    this._array.length = length;\n  }\n\n  reset() {\n    this._array = [];\n    this._map = new Map();\n    this._length = 0;\n  }\n\n  find(target) {\n    return this._map.has(target);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["assert","ManagedArray","constructor","length","_defineProperty","Map","_array","Array","_length","values","get","index","set","element","_map","has","delete","splice","peek","push","pop","reserve","resize","trim","undefined","reset","find","target"],"sources":["../../../src/utils/managed-array.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {assert} from '@loaders.gl/loader-utils';\n\n/**\n * A wrapper around arrays so that the internal length of the array can be manually managed.\n *\n * @alias ManagedArray\n * @constructor\n * @private\n *\n * @param {Number} [length=0] The initial length of the array.\n */\nexport default class ManagedArray {\n  _map = new Map();\n  _array: any[];\n  _length: number;\n\n  constructor(length = 0) {\n    this._array = new Array(length);\n    this._length = length;\n  }\n\n  /**\n   * Gets or sets the length of the array.\n   * If the set length is greater than the length of the internal array, the internal array is resized.\n   *\n   * @memberof ManagedArray.prototype\n   * @type Number\n   */\n  get length() {\n    return this._length;\n  }\n\n  set length(length) {\n    this._length = length;\n    if (length > this._array.length) {\n      this._array.length = length;\n    }\n  }\n\n  /**\n   * Gets the internal array.\n   *\n   * @memberof ManagedArray.prototype\n   * @type Array\n   * @readonly\n   */\n  get values() {\n    return this._array;\n  }\n\n  /**\n   * Gets the element at an index.\n   *\n   * @param {Number} index The index to get.\n   */\n  get(index) {\n    assert(index < this._array.length);\n    return this._array[index];\n  }\n\n  /**\n   * Sets the element at an index. Resizes the array if index is greater than the length of the array.\n   *\n   * @param {Number} index The index to set.\n   * @param {*} element The element to set at index.\n   */\n  set(index, element) {\n    assert(index >= 0);\n\n    if (index >= this.length) {\n      this.length = index + 1;\n    }\n\n    if (this._map.has(this._array[index])) {\n      this._map.delete(this._array[index]);\n    }\n\n    this._array[index] = element;\n    this._map.set(element, index);\n  }\n\n  delete(element) {\n    const index = this._map.get(element);\n    if (index >= 0) {\n      this._array.splice(index, 1);\n      this._map.delete(element);\n      this.length--;\n    }\n  }\n\n  /**\n   * Returns the last element in the array without modifying the array.\n   *\n   * @returns {*} The last element in the array.\n   */\n  peek() {\n    return this._array[this._length - 1];\n  }\n\n  /**\n   * Push an element into the array.\n   *\n   * @param {*} element The element to push.\n   */\n  push(element) {\n    if (!this._map.has(element)) {\n      const index = this.length++;\n      this._array[index] = element;\n      this._map.set(element, index);\n    }\n  }\n\n  /**\n   * Pop an element from the array.\n   *\n   * @returns {*} The last element in the array.\n   */\n  pop() {\n    const element = this._array[--this.length];\n    this._map.delete(element);\n    return element;\n  }\n\n  /**\n   * Resize the internal array if length > _array.length.\n   *\n   * @param {Number} length The length.\n   */\n  reserve(length) {\n    assert(length >= 0);\n\n    if (length > this._array.length) {\n      this._array.length = length;\n    }\n  }\n\n  /**\n   * Resize the array.\n   *\n   * @param {Number} length The length.\n   */\n  resize(length) {\n    assert(length >= 0);\n\n    this.length = length;\n  }\n\n  /**\n   * Trim the internal array to the specified length. Defaults to the current length.\n   *\n   * @param {Number} [length] The length.\n   */\n  trim(length) {\n    if (length === null || length === undefined) {\n      length = this.length;\n    }\n    this._array.length = length;\n  }\n\n  reset() {\n    this._array = [];\n    this._map = new Map();\n    this._length = 0;\n  }\n\n  find(target) {\n    return this._map.has(target);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}