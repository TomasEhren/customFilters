{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport DoublyLinkedListNode from '../utils/doubly-linked-list-node';\nexport default class DoublyLinkedList {\n  constructor() {\n    _defineProperty(this, \"head\", null);\n\n    _defineProperty(this, \"tail\", null);\n\n    _defineProperty(this, \"_length\", 0);\n  }\n\n  get length() {\n    return this._length;\n  }\n\n  add(item) {\n    const node = new DoublyLinkedListNode(item, this.tail, null);\n\n    if (this.tail) {\n      this.tail.next = node;\n      this.tail = node;\n    } else {\n      this.head = node;\n      this.tail = node;\n    }\n\n    ++this._length;\n    return node;\n  }\n\n  remove(node) {\n    if (!node) {\n      return;\n    }\n\n    if (node.previous && node.next) {\n      node.previous.next = node.next;\n      node.next.previous = node.previous;\n    } else if (node.previous) {\n      node.previous.next = null;\n      this.tail = node.previous;\n    } else if (node.next) {\n      node.next.previous = null;\n      this.head = node.next;\n    } else {\n      this.head = null;\n      this.tail = null;\n    }\n\n    node.next = null;\n    node.previous = null;\n    --this._length;\n  }\n\n  splice(node, nextNode) {\n    if (node === nextNode) {\n      return;\n    }\n\n    this.remove(nextNode);\n\n    this._insert(node, nextNode);\n  }\n\n  _insert(node, nextNode) {\n    const oldNodeNext = node.next;\n    node.next = nextNode;\n\n    if (this.tail === node) {\n      this.tail = nextNode;\n    } else {\n      oldNodeNext.previous = nextNode;\n    }\n\n    nextNode.next = oldNodeNext;\n    nextNode.previous = node;\n    ++this._length;\n  }\n\n}","map":{"version":3,"mappings":";AAGA,OAAOA,oBAAP,MAAiC,kCAAjC;AAOA,eAAe,MAAMC,gBAAN,CAAuB;EAAAC;IAAAC,8BACA,IADA;;IAAAA,8BAEA,IAFA;;IAAAA,iCAG1B,CAH0B;EAAA;;EAK1B,IAANC,MAAM,GAAG;IACX,OAAO,KAAKC,OAAZ;EACD;;EAODC,GAAG,CAACC,IAAD,EAAO;IACR,MAAMC,IAAI,GAAG,IAAIR,oBAAJ,CAAyBO,IAAzB,EAA+B,KAAKE,IAApC,EAA0C,IAA1C,CAAb;;IAEA,IAAI,KAAKA,IAAT,EAAe;MACb,KAAKA,IAAL,CAAUC,IAAV,GAAiBF,IAAjB;MACA,KAAKC,IAAL,GAAYD,IAAZ;IAFF,OAGO;MACL,KAAKG,IAAL,GAAYH,IAAZ;MACA,KAAKC,IAAL,GAAYD,IAAZ;IACD;;IAED,EAAE,KAAKH,OAAP;IAEA,OAAOG,IAAP;EACD;;EAMDI,MAAM,CAACJ,IAAD,EAAO;IACX,IAAI,CAACA,IAAL,EAAW;MACT;IACD;;IAED,IAAIA,IAAI,CAACK,QAALL,IAAiBA,IAAI,CAACE,IAA1B,EAAgC;MAC9BF,IAAI,CAACK,QAALL,CAAcE,IAAdF,GAAqBA,IAAI,CAACE,IAA1BF;MACAA,IAAI,CAACE,IAALF,CAAUK,QAAVL,GAAqBA,IAAI,CAACK,QAA1BL;IAFF,OAGO,IAAIA,IAAI,CAACK,QAAT,EAAmB;MAExBL,IAAI,CAACK,QAALL,CAAcE,IAAdF,GAAqB,IAArBA;MACA,KAAKC,IAAL,GAAYD,IAAI,CAACK,QAAjB;IAHK,OAIA,IAAIL,IAAI,CAACE,IAAT,EAAe;MAEpBF,IAAI,CAACE,IAALF,CAAUK,QAAVL,GAAqB,IAArBA;MACA,KAAKG,IAAL,GAAYH,IAAI,CAACE,IAAjB;IAHK,OAIA;MAEL,KAAKC,IAAL,GAAY,IAAZ;MACA,KAAKF,IAAL,GAAY,IAAZ;IACD;;IAEDD,IAAI,CAACE,IAALF,GAAY,IAAZA;IACAA,IAAI,CAACK,QAALL,GAAgB,IAAhBA;IAEA,EAAE,KAAKH,OAAP;EACD;;EAODS,MAAM,CAACN,IAAD,EAAOO,QAAP,EAAiB;IACrB,IAAIP,IAAI,KAAKO,QAAb,EAAuB;MACrB;IACD;;IAGD,KAAKH,MAAL,CAAYG,QAAZ;;IACA,KAAKC,OAAL,CAAaR,IAAb,EAAmBO,QAAnB;EACD;;EAEDC,OAAO,CAACR,IAAD,EAAOO,QAAP,EAAiB;IACtB,MAAME,WAAW,GAAGT,IAAI,CAACE,IAAzB;IACAF,IAAI,CAACE,IAALF,GAAYO,QAAZP;;IAGA,IAAI,KAAKC,IAAL,KAAcD,IAAlB,EAAwB;MACtB,KAAKC,IAAL,GAAYM,QAAZ;IADF,OAEO;MACLE,WAAW,CAACJ,QAAZI,GAAuBF,QAAvBE;IACD;;IAEDF,QAAQ,CAACL,IAATK,GAAgBE,WAAhBF;IACAA,QAAQ,CAACF,QAATE,GAAoBP,IAApBO;IAEA,EAAE,KAAKV,OAAP;EACD;;AA5FmC","names":["DoublyLinkedListNode","DoublyLinkedList","constructor","_defineProperty","length","_length","add","item","node","tail","next","head","remove","previous","splice","nextNode","_insert","oldNodeNext"],"sources":["../../../src/utils/doubly-linked-list.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport DoublyLinkedListNode from '../utils/doubly-linked-list-node';\n\n/**\n * Doubly linked list\n *\n * @private\n */\nexport default class DoublyLinkedList {\n  head: DoublyLinkedListNode | null = null;\n  tail: DoublyLinkedListNode | null = null;\n  _length = 0;\n\n  get length() {\n    return this._length;\n  }\n\n  /**\n   * Adds the item to the end of the list\n   * @param {*} [item]\n   * @return {DoublyLinkedListNode}\n   */\n  add(item) {\n    const node = new DoublyLinkedListNode(item, this.tail, null);\n\n    if (this.tail) {\n      this.tail.next = node;\n      this.tail = node;\n    } else {\n      this.head = node;\n      this.tail = node;\n    }\n\n    ++this._length;\n\n    return node;\n  }\n\n  /**\n   * Removes the given node from the list\n   * @param {DoublyLinkedListNode} node\n   */\n  remove(node) {\n    if (!node) {\n      return;\n    }\n\n    if (node.previous && node.next) {\n      node.previous.next = node.next;\n      node.next.previous = node.previous;\n    } else if (node.previous) {\n      // Remove last node\n      node.previous.next = null;\n      this.tail = node.previous;\n    } else if (node.next) {\n      // Remove first node\n      node.next.previous = null;\n      this.head = node.next;\n    } else {\n      // Remove last node in the linked list\n      this.head = null;\n      this.tail = null;\n    }\n\n    node.next = null;\n    node.previous = null;\n\n    --this._length;\n  }\n\n  /**\n   * Moves nextNode after node\n   * @param {DoublyLinkedListNode} node\n   * @param {DoublyLinkedListNode} nextNode\n   */\n  splice(node, nextNode) {\n    if (node === nextNode) {\n      return;\n    }\n\n    // Remove nextNode, then insert after node\n    this.remove(nextNode);\n    this._insert(node, nextNode);\n  }\n\n  _insert(node, nextNode) {\n    const oldNodeNext = node.next;\n    node.next = nextNode;\n\n    // nextNode is the new tail\n    if (this.tail === node) {\n      this.tail = nextNode;\n    } else {\n      oldNodeNext.previous = nextNode;\n    }\n\n    nextNode.next = oldNodeNext;\n    nextNode.previous = node;\n\n    ++this._length;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}