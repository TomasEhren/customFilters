{"ast":null,"code":"import _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP = {\n  POSITION: 'POSITION',\n  NORMAL: 'NORMAL',\n  COLOR_0: 'COLOR',\n  TEXCOORD_0: 'TEX_COORD'\n};\n\nvar noop = function noop() {};\n\nvar DracoBuilder = /*#__PURE__*/function () {\n  function DracoBuilder(draco) {\n    _classCallCheck(this, DracoBuilder);\n\n    _defineProperty(this, \"draco\", void 0);\n\n    _defineProperty(this, \"dracoEncoder\", void 0);\n\n    _defineProperty(this, \"dracoMeshBuilder\", void 0);\n\n    _defineProperty(this, \"dracoMetadataBuilder\", void 0);\n\n    _defineProperty(this, \"log\", void 0);\n\n    this.draco = draco;\n    this.dracoEncoder = new this.draco.Encoder();\n    this.dracoMeshBuilder = new this.draco.MeshBuilder();\n    this.dracoMetadataBuilder = new this.draco.MetadataBuilder();\n  }\n\n  _createClass(DracoBuilder, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.destroyEncodedObject(this.dracoMeshBuilder);\n      this.destroyEncodedObject(this.dracoEncoder);\n      this.destroyEncodedObject(this.dracoMetadataBuilder);\n      this.dracoMeshBuilder = null;\n      this.dracoEncoder = null;\n      this.draco = null;\n    }\n  }, {\n    key: \"destroyEncodedObject\",\n    value: function destroyEncodedObject(object) {\n      if (object) {\n        this.draco.destroy(object);\n      }\n    }\n  }, {\n    key: \"encodeSync\",\n    value: function encodeSync(mesh) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.log = noop;\n\n      this._setOptions(options);\n\n      return options.pointcloud ? this._encodePointCloud(mesh, options) : this._encodeMesh(mesh, options);\n    }\n  }, {\n    key: \"_getAttributesFromMesh\",\n    value: function _getAttributesFromMesh(mesh) {\n      var attributes = _objectSpread(_objectSpread({}, mesh), mesh.attributes);\n\n      if (mesh.indices) {\n        attributes.indices = mesh.indices;\n      }\n\n      return attributes;\n    }\n  }, {\n    key: \"_encodePointCloud\",\n    value: function _encodePointCloud(pointcloud, options) {\n      var dracoPointCloud = new this.draco.PointCloud();\n\n      if (options.metadata) {\n        this._addGeometryMetadata(dracoPointCloud, options.metadata);\n      }\n\n      var attributes = this._getAttributesFromMesh(pointcloud);\n\n      this._createDracoPointCloud(dracoPointCloud, attributes, options);\n\n      var dracoData = new this.draco.DracoInt8Array();\n\n      try {\n        var encodedLen = this.dracoEncoder.EncodePointCloudToDracoBuffer(dracoPointCloud, false, dracoData);\n\n        if (!(encodedLen > 0)) {\n          throw new Error('Draco encoding failed.');\n        }\n\n        this.log(\"DRACO encoded \".concat(dracoPointCloud.num_points(), \" points\\n        with \").concat(dracoPointCloud.num_attributes(), \" attributes into \").concat(encodedLen, \" bytes\"));\n        return dracoInt8ArrayToArrayBuffer(dracoData);\n      } finally {\n        this.destroyEncodedObject(dracoData);\n        this.destroyEncodedObject(dracoPointCloud);\n      }\n    }\n  }, {\n    key: \"_encodeMesh\",\n    value: function _encodeMesh(mesh, options) {\n      var dracoMesh = new this.draco.Mesh();\n\n      if (options.metadata) {\n        this._addGeometryMetadata(dracoMesh, options.metadata);\n      }\n\n      var attributes = this._getAttributesFromMesh(mesh);\n\n      this._createDracoMesh(dracoMesh, attributes, options);\n\n      var dracoData = new this.draco.DracoInt8Array();\n\n      try {\n        var encodedLen = this.dracoEncoder.EncodeMeshToDracoBuffer(dracoMesh, dracoData);\n\n        if (encodedLen <= 0) {\n          throw new Error('Draco encoding failed.');\n        }\n\n        this.log(\"DRACO encoded \".concat(dracoMesh.num_points(), \" points\\n        with \").concat(dracoMesh.num_attributes(), \" attributes into \").concat(encodedLen, \" bytes\"));\n        return dracoInt8ArrayToArrayBuffer(dracoData);\n      } finally {\n        this.destroyEncodedObject(dracoData);\n        this.destroyEncodedObject(dracoMesh);\n      }\n    }\n  }, {\n    key: \"_setOptions\",\n    value: function _setOptions(options) {\n      if ('speed' in options) {\n        var _this$dracoEncoder;\n\n        (_this$dracoEncoder = this.dracoEncoder).SetSpeedOptions.apply(_this$dracoEncoder, _toConsumableArray(options.speed));\n      }\n\n      if ('method' in options) {\n        var dracoMethod = this.draco[options.method || 'MESH_SEQUENTIAL_ENCODING'];\n        this.dracoEncoder.SetEncodingMethod(dracoMethod);\n      }\n\n      if ('quantization' in options) {\n        for (var attribute in options.quantization) {\n          var bits = options.quantization[attribute];\n          var dracoPosition = this.draco[attribute];\n          this.dracoEncoder.SetAttributeQuantization(dracoPosition, bits);\n        }\n      }\n    }\n  }, {\n    key: \"_createDracoMesh\",\n    value: function _createDracoMesh(dracoMesh, attributes, options) {\n      var optionalMetadata = options.attributesMetadata || {};\n\n      try {\n        var positions = this._getPositionAttribute(attributes);\n\n        if (!positions) {\n          throw new Error('positions');\n        }\n\n        var vertexCount = positions.length / 3;\n\n        for (var attributeName in attributes) {\n          var attribute = attributes[attributeName];\n          attributeName = GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName] || attributeName;\n\n          var uniqueId = this._addAttributeToMesh(dracoMesh, attributeName, attribute, vertexCount);\n\n          if (uniqueId !== -1) {\n            this._addAttributeMetadata(dracoMesh, uniqueId, _objectSpread({\n              name: attributeName\n            }, optionalMetadata[attributeName] || {}));\n          }\n        }\n      } catch (error) {\n        this.destroyEncodedObject(dracoMesh);\n        throw error;\n      }\n\n      return dracoMesh;\n    }\n  }, {\n    key: \"_createDracoPointCloud\",\n    value: function _createDracoPointCloud(dracoPointCloud, attributes, options) {\n      var optionalMetadata = options.attributesMetadata || {};\n\n      try {\n        var positions = this._getPositionAttribute(attributes);\n\n        if (!positions) {\n          throw new Error('positions');\n        }\n\n        var vertexCount = positions.length / 3;\n\n        for (var attributeName in attributes) {\n          var attribute = attributes[attributeName];\n          attributeName = GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName] || attributeName;\n\n          var uniqueId = this._addAttributeToMesh(dracoPointCloud, attributeName, attribute, vertexCount);\n\n          if (uniqueId !== -1) {\n            this._addAttributeMetadata(dracoPointCloud, uniqueId, _objectSpread({\n              name: attributeName\n            }, optionalMetadata[attributeName] || {}));\n          }\n        }\n      } catch (error) {\n        this.destroyEncodedObject(dracoPointCloud);\n        throw error;\n      }\n\n      return dracoPointCloud;\n    }\n  }, {\n    key: \"_addAttributeToMesh\",\n    value: function _addAttributeToMesh(mesh, attributeName, attribute, vertexCount) {\n      if (!ArrayBuffer.isView(attribute)) {\n        return -1;\n      }\n\n      var type = this._getDracoAttributeType(attributeName);\n\n      var size = attribute.length / vertexCount;\n\n      if (type === 'indices') {\n        var numFaces = attribute.length / 3;\n        this.log(\"Adding attribute \".concat(attributeName, \", size \").concat(numFaces));\n        this.dracoMeshBuilder.AddFacesToMesh(mesh, numFaces, attribute);\n        return -1;\n      }\n\n      this.log(\"Adding attribute \".concat(attributeName, \", size \").concat(size));\n      var builder = this.dracoMeshBuilder;\n      var buffer = attribute.buffer;\n\n      switch (attribute.constructor) {\n        case Int8Array:\n          return builder.AddInt8Attribute(mesh, type, vertexCount, size, new Int8Array(buffer));\n\n        case Int16Array:\n          return builder.AddInt16Attribute(mesh, type, vertexCount, size, new Int16Array(buffer));\n\n        case Int32Array:\n          return builder.AddInt32Attribute(mesh, type, vertexCount, size, new Int32Array(buffer));\n\n        case Uint8Array:\n        case Uint8ClampedArray:\n          return builder.AddUInt8Attribute(mesh, type, vertexCount, size, new Uint8Array(buffer));\n\n        case Uint16Array:\n          return builder.AddUInt16Attribute(mesh, type, vertexCount, size, new Uint16Array(buffer));\n\n        case Uint32Array:\n          return builder.AddUInt32Attribute(mesh, type, vertexCount, size, new Uint32Array(buffer));\n\n        case Float32Array:\n        default:\n          return builder.AddFloatAttribute(mesh, type, vertexCount, size, new Float32Array(buffer));\n      }\n    }\n  }, {\n    key: \"_getDracoAttributeType\",\n    value: function _getDracoAttributeType(attributeName) {\n      switch (attributeName.toLowerCase()) {\n        case 'indices':\n          return 'indices';\n\n        case 'position':\n        case 'positions':\n        case 'vertices':\n          return this.draco.POSITION;\n\n        case 'normal':\n        case 'normals':\n          return this.draco.NORMAL;\n\n        case 'color':\n        case 'colors':\n          return this.draco.COLOR;\n\n        case 'texcoord':\n        case 'texcoords':\n          return this.draco.TEX_COORD;\n\n        default:\n          return this.draco.GENERIC;\n      }\n    }\n  }, {\n    key: \"_getPositionAttribute\",\n    value: function _getPositionAttribute(attributes) {\n      for (var attributeName in attributes) {\n        var attribute = attributes[attributeName];\n\n        var dracoType = this._getDracoAttributeType(attributeName);\n\n        if (dracoType === this.draco.POSITION) {\n          return attribute;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_addGeometryMetadata\",\n    value: function _addGeometryMetadata(dracoGeometry, metadata) {\n      var dracoMetadata = new this.draco.Metadata();\n\n      this._populateDracoMetadata(dracoMetadata, metadata);\n\n      this.dracoMeshBuilder.AddMetadata(dracoGeometry, dracoMetadata);\n    }\n  }, {\n    key: \"_addAttributeMetadata\",\n    value: function _addAttributeMetadata(dracoGeometry, uniqueAttributeId, metadata) {\n      var dracoAttributeMetadata = new this.draco.Metadata();\n\n      this._populateDracoMetadata(dracoAttributeMetadata, metadata);\n\n      this.dracoMeshBuilder.SetMetadataForAttribute(dracoGeometry, uniqueAttributeId, dracoAttributeMetadata);\n    }\n  }, {\n    key: \"_populateDracoMetadata\",\n    value: function _populateDracoMetadata(dracoMetadata, metadata) {\n      var _iterator = _createForOfIteratorHelper(getEntries(metadata)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              key = _step$value[0],\n              value = _step$value[1];\n\n          switch (typeof value) {\n            case 'number':\n              if (Math.trunc(value) === value) {\n                this.dracoMetadataBuilder.AddIntEntry(dracoMetadata, key, value);\n              } else {\n                this.dracoMetadataBuilder.AddDoubleEntry(dracoMetadata, key, value);\n              }\n\n              break;\n\n            case 'object':\n              if (value instanceof Int32Array) {\n                this.dracoMetadataBuilder.AddIntEntryArray(dracoMetadata, key, value, value.length);\n              }\n\n              break;\n\n            case 'string':\n            default:\n              this.dracoMetadataBuilder.AddStringEntry(dracoMetadata, key, value);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }]);\n\n  return DracoBuilder;\n}();\n\nexport { DracoBuilder as default };\n\nfunction dracoInt8ArrayToArrayBuffer(dracoData) {\n  var byteLength = dracoData.size();\n  var outputBuffer = new ArrayBuffer(byteLength);\n  var outputData = new Int8Array(outputBuffer);\n\n  for (var i = 0; i < byteLength; ++i) {\n    outputData[i] = dracoData.GetValue(i);\n  }\n\n  return outputBuffer;\n}\n\nfunction getEntries(container) {\n  var hasEntriesFunc = container.entries && !container.hasOwnProperty('entries');\n  return hasEntriesFunc ? container.entries() : Object.entries(container);\n}","map":{"version":3,"mappings":";;;;;;;AA8BA,IAAMA,gCAAgC,GAAG;EACvCC,QAAQ,EAAE,UAD6B;EAEvCC,MAAM,EAAE,QAF+B;EAGvCC,OAAO,EAAE,OAH8B;EAIvCC,UAAU,EAAE;AAJ2B,CAAzC;;AAOA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM,CAAnB;;IAEqBC,Y;EAQnBC,sBAAYC,KAAZD,EAA4B;IAAA;;IAAAE;;IAAAA;;IAAAA;;IAAAA;;IAAAA;;IAC1B,KAAKD,KAAL,GAAaA,KAAb;IACA,KAAKE,YAAL,GAAoB,IAAI,KAAKF,KAAL,CAAWG,OAAf,EAApB;IACA,KAAKC,gBAAL,GAAwB,IAAI,KAAKJ,KAAL,CAAWK,WAAf,EAAxB;IACA,KAAKC,oBAAL,GAA4B,IAAI,KAAKN,KAAL,CAAWO,eAAf,EAA5B;EACD;;;;WAEDC,mBAAgB;MACd,KAAKC,oBAAL,CAA0B,KAAKL,gBAA/B;MACA,KAAKK,oBAAL,CAA0B,KAAKP,YAA/B;MACA,KAAKO,oBAAL,CAA0B,KAAKH,oBAA/B;MAEA,KAAKF,gBAAL,GAAwB,IAAxB;MAEA,KAAKF,YAAL,GAAoB,IAApB;MAEA,KAAKF,KAAL,GAAa,IAAb;IACD;;;WAGDS,8BAAqBC,MAArBD,EAAmC;MACjC,IAAIC,MAAJ,EAAY;QACV,KAAKV,KAAL,CAAWQ,OAAX,CAAmBE,MAAnB;MACD;IACF;;;WAODC,oBAAWC,IAAXD,EAA0E;MAAA,IAA9CE,OAA8C,uEAAjB,EAAiB;MACxE,KAAKC,GAAL,GAAWjB,IAAX;;MACA,KAAKkB,WAAL,CAAiBF,OAAjB;;MAEA,OAAOA,OAAO,CAACG,UAARH,GACH,KAAKI,iBAAL,CAAuBL,IAAvB,EAA6BC,OAA7B,CADGA,GAEH,KAAKK,WAAL,CAAiBN,IAAjB,EAAuBC,OAAvB,CAFJ;IAGD;;;WAIDM,gCAAuBP,IAAvBO,EAAwC;MAEtC,IAAMC,UAAU,mCAAOR,IAAP,GAAgBA,IAAI,CAACQ,UAArB,CAAhB;;MAEA,IAAIR,IAAI,CAACS,OAAT,EAAkB;QAChBD,UAAU,CAACC,OAAXD,GAAqBR,IAAI,CAACS,OAA1BD;MACD;;MACD,OAAOA,UAAP;IACD;;;WAEDH,2BAAkBD,UAAlBC,EAAyCJ,OAAzCI,EAAkF;MAChF,IAAMK,eAAe,GAAG,IAAI,KAAKtB,KAAL,CAAWuB,UAAf,EAAxB;;MAEA,IAAIV,OAAO,CAACW,QAAZ,EAAsB;QACpB,KAAKC,oBAAL,CAA0BH,eAA1B,EAA2CT,OAAO,CAACW,QAAnD;MACD;;MAED,IAAMJ,UAAU,GAAG,KAAKD,sBAAL,CAA4BH,UAA5B,CAAnB;;MAGA,KAAKU,sBAAL,CAA4BJ,eAA5B,EAA6CF,UAA7C,EAAyDP,OAAzD;;MAEA,IAAMc,SAAS,GAAG,IAAI,KAAK3B,KAAL,CAAW4B,cAAf,EAAlB;;MAEA,IAAI;QACF,IAAMC,UAAU,GAAG,KAAK3B,YAAL,CAAkB4B,6BAAlB,CACjBR,eADiB,EAEjB,KAFiB,EAGjBK,SAHiB,CAAnB;;QAMA,IAAI,EAAEE,UAAU,GAAG,CAAf,CAAJ,EAAuB;UACrB,MAAM,IAAIE,KAAJ,CAAU,wBAAV,CAAN;QACD;;QAED,KAAKjB,GAAL,yBAA0BQ,eAAe,CAACU,UAAhBV,EAA1B,mCACSA,eAAe,CAACW,cAAhBX,EADT,8BAC6DO,UAD7D;QAGA,OAAOK,2BAA2B,CAACP,SAAD,CAAlC;MAdF,UAeU;QACR,KAAKlB,oBAAL,CAA0BkB,SAA1B;QACA,KAAKlB,oBAAL,CAA0Ba,eAA1B;MACD;IACF;;;WAEDJ,qBAAYN,IAAZM,EAA6BL,OAA7BK,EAAsE;MACpE,IAAMiB,SAAS,GAAG,IAAI,KAAKnC,KAAL,CAAWoC,IAAf,EAAlB;;MAEA,IAAIvB,OAAO,CAACW,QAAZ,EAAsB;QACpB,KAAKC,oBAAL,CAA0BU,SAA1B,EAAqCtB,OAAO,CAACW,QAA7C;MACD;;MAED,IAAMJ,UAAU,GAAG,KAAKD,sBAAL,CAA4BP,IAA5B,CAAnB;;MAGA,KAAKyB,gBAAL,CAAsBF,SAAtB,EAAiCf,UAAjC,EAA6CP,OAA7C;;MAEA,IAAMc,SAAS,GAAG,IAAI,KAAK3B,KAAL,CAAW4B,cAAf,EAAlB;;MAEA,IAAI;QACF,IAAMC,UAAU,GAAG,KAAK3B,YAAL,CAAkBoC,uBAAlB,CAA0CH,SAA1C,EAAqDR,SAArD,CAAnB;;QACA,IAAIE,UAAU,IAAI,CAAlB,EAAqB;UACnB,MAAM,IAAIE,KAAJ,CAAU,wBAAV,CAAN;QACD;;QAED,KAAKjB,GAAL,yBAA0BqB,SAAS,CAACH,UAAVG,EAA1B,mCACSA,SAAS,CAACF,cAAVE,EADT,8BACuDN,UADvD;QAGA,OAAOK,2BAA2B,CAACP,SAAD,CAAlC;MATF,UAUU;QACR,KAAKlB,oBAAL,CAA0BkB,SAA1B;QACA,KAAKlB,oBAAL,CAA0B0B,SAA1B;MACD;IACF;;;WAMDpB,qBAAYF,OAAZE,EAA8C;MAC5C,IAAI,WAAWF,OAAf,EAAwB;QAAA;;QAEtB,2BAAKX,YAAL,EAAkBqC,eAAlB,8CAAqC1B,OAAO,CAAC2B,KAA7C;MACD;;MACD,IAAI,YAAY3B,OAAhB,EAAyB;QACvB,IAAM4B,WAAW,GAAG,KAAKzC,KAAL,CAAWa,OAAO,CAAC6B,MAAR7B,IAAkB,0BAA7B,CAApB;QAEA,KAAKX,YAAL,CAAkByC,iBAAlB,CAAoCF,WAApC;MACD;;MACD,IAAI,kBAAkB5B,OAAtB,EAA+B;QAC7B,KAAK,IAAM+B,SAAX,IAAwB/B,OAAO,CAACgC,YAAhC,EAA8C;UAC5C,IAAMC,IAAI,GAAGjC,OAAO,CAACgC,YAARhC,CAAqB+B,SAArB/B,CAAb;UACA,IAAMkC,aAAa,GAAG,KAAK/C,KAAL,CAAW4C,SAAX,CAAtB;UACA,KAAK1C,YAAL,CAAkB8C,wBAAlB,CAA2CD,aAA3C,EAA0DD,IAA1D;QACD;MACF;IACF;;;WAODT,0BAAiBF,SAAjBE,EAAkCjB,UAAlCiB,EAA8CxB,OAA9CwB,EAAgF;MAC9E,IAAMY,gBAAgB,GAAGpC,OAAO,CAACqC,kBAARrC,IAA8B,EAAvD;;MAEA,IAAI;QACF,IAAMsC,SAAS,GAAG,KAAKC,qBAAL,CAA2BhC,UAA3B,CAAlB;;QACA,IAAI,CAAC+B,SAAL,EAAgB;UACd,MAAM,IAAIpB,KAAJ,CAAU,WAAV,CAAN;QACD;;QACD,IAAMsB,WAAW,GAAGF,SAAS,CAACG,MAAVH,GAAmB,CAAvC;;QAEA,KAAK,IAAII,aAAT,IAA0BnC,UAA1B,EAAsC;UACpC,IAAMwB,SAAS,GAAGxB,UAAU,CAACmC,aAAD,CAA5B;UACAA,aAAa,GAAG/D,gCAAgC,CAAC+D,aAAD,CAAhC/D,IAAmD+D,aAAnEA;;UACA,IAAMC,QAAQ,GAAG,KAAKC,mBAAL,CAAyBtB,SAAzB,EAAoCoB,aAApC,EAAmDX,SAAnD,EAA8DS,WAA9D,CAAjB;;UAEA,IAAIG,QAAQ,KAAK,CAAC,CAAlB,EAAqB;YACnB,KAAKE,qBAAL,CAA2BvB,SAA3B,EAAsCqB,QAAtC;cACEG,IAAI,EAAEJ;YADR,GAEMN,gBAAgB,CAACM,aAAD,CAAhBN,IAAmC,EAFzC;UAID;QACF;MAlBH,EAmBE,OAAOW,KAAP,EAAc;QACd,KAAKnD,oBAAL,CAA0B0B,SAA1B;QACA,MAAMyB,KAAN;MACD;;MAED,OAAOzB,SAAP;IACD;;;WAMDT,gCACEJ,eADFI,EAEEN,UAFFM,EAGEb,OAHFa,EAIc;MACZ,IAAMuB,gBAAgB,GAAGpC,OAAO,CAACqC,kBAARrC,IAA8B,EAAvD;;MAEA,IAAI;QACF,IAAMsC,SAAS,GAAG,KAAKC,qBAAL,CAA2BhC,UAA3B,CAAlB;;QACA,IAAI,CAAC+B,SAAL,EAAgB;UACd,MAAM,IAAIpB,KAAJ,CAAU,WAAV,CAAN;QACD;;QACD,IAAMsB,WAAW,GAAGF,SAAS,CAACG,MAAVH,GAAmB,CAAvC;;QAEA,KAAK,IAAII,aAAT,IAA0BnC,UAA1B,EAAsC;UACpC,IAAMwB,SAAS,GAAGxB,UAAU,CAACmC,aAAD,CAA5B;UACAA,aAAa,GAAG/D,gCAAgC,CAAC+D,aAAD,CAAhC/D,IAAmD+D,aAAnEA;;UACA,IAAMC,QAAQ,GAAG,KAAKC,mBAAL,CACfnC,eADe,EAEfiC,aAFe,EAGfX,SAHe,EAIfS,WAJe,CAAjB;;UAMA,IAAIG,QAAQ,KAAK,CAAC,CAAlB,EAAqB;YACnB,KAAKE,qBAAL,CAA2BpC,eAA3B,EAA4CkC,QAA5C;cACEG,IAAI,EAAEJ;YADR,GAEMN,gBAAgB,CAACM,aAAD,CAAhBN,IAAmC,EAFzC;UAID;QACF;MAtBH,EAuBE,OAAOW,KAAP,EAAc;QACd,KAAKnD,oBAAL,CAA0Ba,eAA1B;QACA,MAAMsC,KAAN;MACD;;MAED,OAAOtC,eAAP;IACD;;;WAQDmC,6BACE7C,IADF6C,EAEEF,aAFFE,EAGEb,SAHFa,EAIEJ,WAJFI,EAKE;MACA,IAAI,CAACI,WAAW,CAACC,MAAZD,CAAmBjB,SAAnBiB,CAAL,EAAoC;QAClC,OAAO,CAAC,CAAR;MACD;;MAED,IAAME,IAAI,GAAG,KAAKC,sBAAL,CAA4BT,aAA5B,CAAb;;MAEA,IAAMU,IAAI,GAAGrB,SAAS,CAACU,MAAVV,GAAmBS,WAAhC;;MAEA,IAAIU,IAAI,KAAK,SAAb,EAAwB;QAEtB,IAAMG,QAAQ,GAAGtB,SAAS,CAACU,MAAVV,GAAmB,CAApC;QACA,KAAK9B,GAAL,4BAA6ByC,aAA7B,oBAAoDW,QAApD;QAGA,KAAK9D,gBAAL,CAAsB+D,cAAtB,CAAqCvD,IAArC,EAA2CsD,QAA3C,EAAqDtB,SAArD;QACA,OAAO,CAAC,CAAR;MACD;;MAED,KAAK9B,GAAL,4BAA6ByC,aAA7B,oBAAoDU,IAApD;MAEA,IAAMG,OAAO,GAAG,KAAKhE,gBAArB;MACA,IAAOiE,MAAP,GAAiBzB,SAAjB,CAAOyB,MAAP;;MAEA,QAAQzB,SAAS,CAAC7C,WAAlB;QACE,KAAKuE,SAAL;UACE,OAAOF,OAAO,CAACG,gBAARH,CAAyBxD,IAAzBwD,EAA+BL,IAA/BK,EAAqCf,WAArCe,EAAkDH,IAAlDG,EAAwD,IAAIE,SAAJ,CAAcD,MAAd,CAAxDD,CAAP;;QAEF,KAAKI,UAAL;UACE,OAAOJ,OAAO,CAACK,iBAARL,CAA0BxD,IAA1BwD,EAAgCL,IAAhCK,EAAsCf,WAAtCe,EAAmDH,IAAnDG,EAAyD,IAAII,UAAJ,CAAeH,MAAf,CAAzDD,CAAP;;QAEF,KAAKM,UAAL;UACE,OAAON,OAAO,CAACO,iBAARP,CAA0BxD,IAA1BwD,EAAgCL,IAAhCK,EAAsCf,WAAtCe,EAAmDH,IAAnDG,EAAyD,IAAIM,UAAJ,CAAeL,MAAf,CAAzDD,CAAP;;QACF,KAAKQ,UAAL;QACA,KAAKC,iBAAL;UACE,OAAOT,OAAO,CAACU,iBAARV,CAA0BxD,IAA1BwD,EAAgCL,IAAhCK,EAAsCf,WAAtCe,EAAmDH,IAAnDG,EAAyD,IAAIQ,UAAJ,CAAeP,MAAf,CAAzDD,CAAP;;QAEF,KAAKW,WAAL;UACE,OAAOX,OAAO,CAACY,kBAARZ,CAA2BxD,IAA3BwD,EAAiCL,IAAjCK,EAAuCf,WAAvCe,EAAoDH,IAApDG,EAA0D,IAAIW,WAAJ,CAAgBV,MAAhB,CAA1DD,CAAP;;QAEF,KAAKa,WAAL;UACE,OAAOb,OAAO,CAACc,kBAARd,CAA2BxD,IAA3BwD,EAAiCL,IAAjCK,EAAuCf,WAAvCe,EAAoDH,IAApDG,EAA0D,IAAIa,WAAJ,CAAgBZ,MAAhB,CAA1DD,CAAP;;QAEF,KAAKe,YAAL;QACA;UACE,OAAOf,OAAO,CAACgB,iBAARhB,CAA0BxD,IAA1BwD,EAAgCL,IAAhCK,EAAsCf,WAAtCe,EAAmDH,IAAnDG,EAAyD,IAAIe,YAAJ,CAAiBd,MAAjB,CAAzDD,CAAP;MArBJ;IAuBD;;;WAODJ,gCAAuBT,aAAvBS,EAAwF;MACtF,QAAQT,aAAa,CAAC8B,WAAd9B,EAAR;QACE,KAAK,SAAL;UACE,OAAO,SAAP;;QACF,KAAK,UAAL;QACA,KAAK,WAAL;QACA,KAAK,UAAL;UACE,OAAO,KAAKvD,KAAL,CAAWP,QAAlB;;QACF,KAAK,QAAL;QACA,KAAK,SAAL;UACE,OAAO,KAAKO,KAAL,CAAWN,MAAlB;;QACF,KAAK,OAAL;QACA,KAAK,QAAL;UACE,OAAO,KAAKM,KAAL,CAAWsF,KAAlB;;QACF,KAAK,UAAL;QACA,KAAK,WAAL;UACE,OAAO,KAAKtF,KAAL,CAAWuF,SAAlB;;QACF;UACE,OAAO,KAAKvF,KAAL,CAAWwF,OAAlB;MAjBJ;IAmBD;;;WAEDpC,+BAAsBhC,UAAtBgC,EAAkC;MAChC,KAAK,IAAMG,aAAX,IAA4BnC,UAA5B,EAAwC;QACtC,IAAMwB,SAAS,GAAGxB,UAAU,CAACmC,aAAD,CAA5B;;QACA,IAAMkC,SAAS,GAAG,KAAKzB,sBAAL,CAA4BT,aAA5B,CAAlB;;QACA,IAAIkC,SAAS,KAAK,KAAKzF,KAAL,CAAWP,QAA7B,EAAuC;UACrC,OAAOmD,SAAP;QACD;MACF;;MACD,OAAO,IAAP;IACD;;;WAODnB,8BAAqBiE,aAArBjE,EAAgDD,QAAhDC,EAAmF;MACjF,IAAMkE,aAAa,GAAG,IAAI,KAAK3F,KAAL,CAAW4F,QAAf,EAAtB;;MACA,KAAKC,sBAAL,CAA4BF,aAA5B,EAA2CnE,QAA3C;;MACA,KAAKpB,gBAAL,CAAsB0F,WAAtB,CAAkCJ,aAAlC,EAAiDC,aAAjD;IACD;;;WAQDjC,+BACEgC,aADFhC,EAEEqC,iBAFFrC,EAGElC,QAHFkC,EAIE;MAGA,IAAMsC,sBAAsB,GAAG,IAAI,KAAKhG,KAAL,CAAW4F,QAAf,EAA/B;;MACA,KAAKC,sBAAL,CAA4BG,sBAA5B,EAAoDxE,QAApD;;MAGA,KAAKpB,gBAAL,CAAsB6F,uBAAtB,CACEP,aADF,EAEEK,iBAFF,EAGEC,sBAHF;IAKD;;;WAODH,gCACEF,aADFE,EAEErE,QAFFqE,EAGE;MAAA,2CAC2BK,UAAU,CAAC1E,QAAD,CADrC;MAAA;;MAAA;QACA,oDAAiD;UAAA;UAAA,IAArC2E,GAAqC;UAAA,IAAhCC,KAAgC;;UAC/C,QAAQ,OAAOA,KAAf;YACE,KAAK,QAAL;cACE,IAAIC,IAAI,CAACC,KAALD,CAAWD,KAAXC,MAAsBD,KAA1B,EAAiC;gBAC/B,KAAK9F,oBAAL,CAA0BiG,WAA1B,CAAsCZ,aAAtC,EAAqDQ,GAArD,EAA0DC,KAA1D;cADF,OAEO;gBACL,KAAK9F,oBAAL,CAA0BkG,cAA1B,CAAyCb,aAAzC,EAAwDQ,GAAxD,EAA6DC,KAA7D;cACD;;cACD;;YACF,KAAK,QAAL;cACE,IAAIA,KAAK,YAAY1B,UAArB,EAAiC;gBAC/B,KAAKpE,oBAAL,CAA0BmG,gBAA1B,CAA2Cd,aAA3C,EAA0DQ,GAA1D,EAA+DC,KAA/D,EAAsEA,KAAK,CAAC9C,MAA5E;cACD;;cACD;;YACF,KAAK,QAAL;YACA;cACE,KAAKhD,oBAAL,CAA0BoG,cAA1B,CAAyCf,aAAzC,EAAwDQ,GAAxD,EAA6DC,KAA7D;UAfJ;QAiBD;MAnBD;QAAA;MAAA;QAAA;MAAA;IAoBD;;;;;;SAlYkBtG,Y;;AA2YrB,SAASoC,2BAAT,CAAqCP,SAArC,EAAgE;EAC9D,IAAMgF,UAAU,GAAGhF,SAAS,CAACsC,IAAVtC,EAAnB;EACA,IAAMiF,YAAY,GAAG,IAAI/C,WAAJ,CAAgB8C,UAAhB,CAArB;EACA,IAAME,UAAU,GAAG,IAAIvC,SAAJ,CAAcsC,YAAd,CAAnB;;EACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,UAApB,EAAgC,EAAEG,CAAlC,EAAqC;IACnCD,UAAU,CAACC,CAAD,CAAVD,GAAgBlF,SAAS,CAACoF,QAAVpF,CAAmBmF,CAAnBnF,CAAhBkF;EACD;;EACD,OAAOD,YAAP;AACD;;AAGD,SAASV,UAAT,CAAoBc,SAApB,EAA+B;EAC7B,IAAMC,cAAc,GAAGD,SAAS,CAACE,OAAVF,IAAqB,CAACA,SAAS,CAACG,cAAVH,CAAyB,SAAzBA,CAA7C;EACA,OAAOC,cAAc,GAAGD,SAAS,CAACE,OAAVF,EAAH,GAAyBI,MAAM,CAACF,OAAPE,CAAeJ,SAAfI,CAA9C;AACD","names":["GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP","POSITION","NORMAL","COLOR_0","TEXCOORD_0","noop","DracoBuilder","constructor","draco","_defineProperty","dracoEncoder","Encoder","dracoMeshBuilder","MeshBuilder","dracoMetadataBuilder","MetadataBuilder","destroy","destroyEncodedObject","object","encodeSync","mesh","options","log","_setOptions","pointcloud","_encodePointCloud","_encodeMesh","_getAttributesFromMesh","attributes","indices","dracoPointCloud","PointCloud","metadata","_addGeometryMetadata","_createDracoPointCloud","dracoData","DracoInt8Array","encodedLen","EncodePointCloudToDracoBuffer","Error","num_points","num_attributes","dracoInt8ArrayToArrayBuffer","dracoMesh","Mesh","_createDracoMesh","EncodeMeshToDracoBuffer","SetSpeedOptions","speed","dracoMethod","method","SetEncodingMethod","attribute","quantization","bits","dracoPosition","SetAttributeQuantization","optionalMetadata","attributesMetadata","positions","_getPositionAttribute","vertexCount","length","attributeName","uniqueId","_addAttributeToMesh","_addAttributeMetadata","name","error","ArrayBuffer","isView","type","_getDracoAttributeType","size","numFaces","AddFacesToMesh","builder","buffer","Int8Array","AddInt8Attribute","Int16Array","AddInt16Attribute","Int32Array","AddInt32Attribute","Uint8Array","Uint8ClampedArray","AddUInt8Attribute","Uint16Array","AddUInt16Attribute","Uint32Array","AddUInt32Attribute","Float32Array","AddFloatAttribute","toLowerCase","COLOR","TEX_COORD","GENERIC","dracoType","dracoGeometry","dracoMetadata","Metadata","_populateDracoMetadata","AddMetadata","uniqueAttributeId","dracoAttributeMetadata","SetMetadataForAttribute","getEntries","key","value","Math","trunc","AddIntEntry","AddDoubleEntry","AddIntEntryArray","AddStringEntry","byteLength","outputBuffer","outputData","i","GetValue","container","hasEntriesFunc","entries","hasOwnProperty","Object"],"sources":["../../../src/lib/draco-builder.ts"],"sourcesContent":["/* eslint-disable camelcase */\n// This code is inspired by example code in the DRACO repository\nimport type {\n  Draco3D,\n  DracoInt8Array,\n  Encoder,\n  Mesh,\n  MeshBuilder,\n  PointCloud,\n  Metadata,\n  MetadataBuilder,\n  draco_GeometryAttribute_Type\n} from '../draco3d/draco3d-types';\n\nimport type {TypedArray} from '@loaders.gl/schema';\nimport type {DracoMesh} from './draco-types';\n\nexport type DracoBuildOptions = {\n  pointcloud?: boolean;\n  metadata?: {[key: string]: string};\n  attributesMetadata?: {};\n  log?: any;\n\n  // draco encoding options\n  speed?: [number, number];\n  method?: string;\n  quantization?: {[attributeName: string]: number};\n};\n\n// Native Draco attribute names to GLTF attribute names.\nconst GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP = {\n  POSITION: 'POSITION',\n  NORMAL: 'NORMAL',\n  COLOR_0: 'COLOR',\n  TEXCOORD_0: 'TEX_COORD'\n};\n\nconst noop = () => {};\n\nexport default class DracoBuilder {\n  draco: Draco3D;\n  dracoEncoder: Encoder;\n  dracoMeshBuilder: MeshBuilder;\n  dracoMetadataBuilder: MetadataBuilder;\n  log: any;\n\n  // draco - the draco decoder, either import `draco3d` or load dynamically\n  constructor(draco: Draco3D) {\n    this.draco = draco;\n    this.dracoEncoder = new this.draco.Encoder();\n    this.dracoMeshBuilder = new this.draco.MeshBuilder();\n    this.dracoMetadataBuilder = new this.draco.MetadataBuilder();\n  }\n\n  destroy(): void {\n    this.destroyEncodedObject(this.dracoMeshBuilder);\n    this.destroyEncodedObject(this.dracoEncoder);\n    this.destroyEncodedObject(this.dracoMetadataBuilder);\n    // @ts-ignore\n    this.dracoMeshBuilder = null;\n    // @ts-ignore\n    this.dracoEncoder = null;\n    // @ts-ignore\n    this.draco = null;\n  }\n\n  // TBD - when does this need to be called?\n  destroyEncodedObject(object): void {\n    if (object) {\n      this.draco.destroy(object);\n    }\n  }\n\n  /**\n   * Encode mesh or point cloud\n   * @param mesh =({})\n   * @param options\n   */\n  encodeSync(mesh: DracoMesh, options: DracoBuildOptions = {}): ArrayBuffer {\n    this.log = noop; // TODO\n    this._setOptions(options);\n\n    return options.pointcloud\n      ? this._encodePointCloud(mesh, options)\n      : this._encodeMesh(mesh, options);\n  }\n\n  // PRIVATE\n\n  _getAttributesFromMesh(mesh: DracoMesh) {\n    // TODO - Change the encodePointCloud interface instead?\n    const attributes = {...mesh, ...mesh.attributes};\n    // Fold indices into the attributes\n    if (mesh.indices) {\n      attributes.indices = mesh.indices;\n    }\n    return attributes;\n  }\n\n  _encodePointCloud(pointcloud: DracoMesh, options: DracoBuildOptions): ArrayBuffer {\n    const dracoPointCloud = new this.draco.PointCloud();\n\n    if (options.metadata) {\n      this._addGeometryMetadata(dracoPointCloud, options.metadata);\n    }\n\n    const attributes = this._getAttributesFromMesh(pointcloud);\n\n    // Build a `DracoPointCloud` from the input data\n    this._createDracoPointCloud(dracoPointCloud, attributes, options);\n\n    const dracoData = new this.draco.DracoInt8Array();\n\n    try {\n      const encodedLen = this.dracoEncoder.EncodePointCloudToDracoBuffer(\n        dracoPointCloud,\n        false,\n        dracoData\n      );\n\n      if (!(encodedLen > 0)) {\n        throw new Error('Draco encoding failed.');\n      }\n\n      this.log(`DRACO encoded ${dracoPointCloud.num_points()} points\n        with ${dracoPointCloud.num_attributes()} attributes into ${encodedLen} bytes`);\n\n      return dracoInt8ArrayToArrayBuffer(dracoData);\n    } finally {\n      this.destroyEncodedObject(dracoData);\n      this.destroyEncodedObject(dracoPointCloud);\n    }\n  }\n\n  _encodeMesh(mesh: DracoMesh, options: DracoBuildOptions): ArrayBuffer {\n    const dracoMesh = new this.draco.Mesh();\n\n    if (options.metadata) {\n      this._addGeometryMetadata(dracoMesh, options.metadata);\n    }\n\n    const attributes = this._getAttributesFromMesh(mesh);\n\n    // Build a `DracoMesh` from the input data\n    this._createDracoMesh(dracoMesh, attributes, options);\n\n    const dracoData = new this.draco.DracoInt8Array();\n\n    try {\n      const encodedLen = this.dracoEncoder.EncodeMeshToDracoBuffer(dracoMesh, dracoData);\n      if (encodedLen <= 0) {\n        throw new Error('Draco encoding failed.');\n      }\n\n      this.log(`DRACO encoded ${dracoMesh.num_points()} points\n        with ${dracoMesh.num_attributes()} attributes into ${encodedLen} bytes`);\n\n      return dracoInt8ArrayToArrayBuffer(dracoData);\n    } finally {\n      this.destroyEncodedObject(dracoData);\n      this.destroyEncodedObject(dracoMesh);\n    }\n  }\n\n  /**\n   * Set encoding options.\n   * @param {{speed?: any; method?: any; quantization?: any;}} options\n   */\n  _setOptions(options: DracoBuildOptions): void {\n    if ('speed' in options) {\n      // @ts-ignore\n      this.dracoEncoder.SetSpeedOptions(...options.speed);\n    }\n    if ('method' in options) {\n      const dracoMethod = this.draco[options.method || 'MESH_SEQUENTIAL_ENCODING'];\n      // assert(dracoMethod)\n      this.dracoEncoder.SetEncodingMethod(dracoMethod);\n    }\n    if ('quantization' in options) {\n      for (const attribute in options.quantization) {\n        const bits = options.quantization[attribute];\n        const dracoPosition = this.draco[attribute];\n        this.dracoEncoder.SetAttributeQuantization(dracoPosition, bits);\n      }\n    }\n  }\n\n  /**\n   * @param {Mesh} dracoMesh\n   * @param {object} attributes\n   * @returns {Mesh}\n   */\n  _createDracoMesh(dracoMesh: Mesh, attributes, options: DracoBuildOptions): Mesh {\n    const optionalMetadata = options.attributesMetadata || {};\n\n    try {\n      const positions = this._getPositionAttribute(attributes);\n      if (!positions) {\n        throw new Error('positions');\n      }\n      const vertexCount = positions.length / 3;\n\n      for (let attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        attributeName = GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName] || attributeName;\n        const uniqueId = this._addAttributeToMesh(dracoMesh, attributeName, attribute, vertexCount);\n\n        if (uniqueId !== -1) {\n          this._addAttributeMetadata(dracoMesh, uniqueId, {\n            name: attributeName,\n            ...(optionalMetadata[attributeName] || {})\n          });\n        }\n      }\n    } catch (error) {\n      this.destroyEncodedObject(dracoMesh);\n      throw error;\n    }\n\n    return dracoMesh;\n  }\n\n  /**\n   * @param {} dracoPointCloud\n   * @param {object} attributes\n   */\n  _createDracoPointCloud(\n    dracoPointCloud: PointCloud,\n    attributes: object,\n    options: DracoBuildOptions\n  ): PointCloud {\n    const optionalMetadata = options.attributesMetadata || {};\n\n    try {\n      const positions = this._getPositionAttribute(attributes);\n      if (!positions) {\n        throw new Error('positions');\n      }\n      const vertexCount = positions.length / 3;\n\n      for (let attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        attributeName = GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName] || attributeName;\n        const uniqueId = this._addAttributeToMesh(\n          dracoPointCloud,\n          attributeName,\n          attribute,\n          vertexCount\n        );\n        if (uniqueId !== -1) {\n          this._addAttributeMetadata(dracoPointCloud, uniqueId, {\n            name: attributeName,\n            ...(optionalMetadata[attributeName] || {})\n          });\n        }\n      }\n    } catch (error) {\n      this.destroyEncodedObject(dracoPointCloud);\n      throw error;\n    }\n\n    return dracoPointCloud;\n  }\n\n  /**\n   * @param mesh\n   * @param attributeName\n   * @param attribute\n   * @param vertexCount\n   */\n  _addAttributeToMesh(\n    mesh: PointCloud,\n    attributeName: string,\n    attribute: TypedArray,\n    vertexCount: number\n  ) {\n    if (!ArrayBuffer.isView(attribute)) {\n      return -1;\n    }\n\n    const type = this._getDracoAttributeType(attributeName);\n    // @ts-ignore TODO/fix types\n    const size = attribute.length / vertexCount;\n\n    if (type === 'indices') {\n      // @ts-ignore TODO/fix types\n      const numFaces = attribute.length / 3;\n      this.log(`Adding attribute ${attributeName}, size ${numFaces}`);\n\n      // @ts-ignore assumes mesh is a Mesh, not a point cloud\n      this.dracoMeshBuilder.AddFacesToMesh(mesh, numFaces, attribute);\n      return -1;\n    }\n\n    this.log(`Adding attribute ${attributeName}, size ${size}`);\n\n    const builder = this.dracoMeshBuilder;\n    const {buffer} = attribute;\n\n    switch (attribute.constructor) {\n      case Int8Array:\n        return builder.AddInt8Attribute(mesh, type, vertexCount, size, new Int8Array(buffer));\n\n      case Int16Array:\n        return builder.AddInt16Attribute(mesh, type, vertexCount, size, new Int16Array(buffer));\n\n      case Int32Array:\n        return builder.AddInt32Attribute(mesh, type, vertexCount, size, new Int32Array(buffer));\n      case Uint8Array:\n      case Uint8ClampedArray:\n        return builder.AddUInt8Attribute(mesh, type, vertexCount, size, new Uint8Array(buffer));\n\n      case Uint16Array:\n        return builder.AddUInt16Attribute(mesh, type, vertexCount, size, new Uint16Array(buffer));\n\n      case Uint32Array:\n        return builder.AddUInt32Attribute(mesh, type, vertexCount, size, new Uint32Array(buffer));\n\n      case Float32Array:\n      default:\n        return builder.AddFloatAttribute(mesh, type, vertexCount, size, new Float32Array(buffer));\n    }\n  }\n\n  /**\n   * DRACO can compress attributes of know type better\n   * TODO - expose an attribute type map?\n   * @param attributeName\n   */\n  _getDracoAttributeType(attributeName: string): draco_GeometryAttribute_Type | 'indices' {\n    switch (attributeName.toLowerCase()) {\n      case 'indices':\n        return 'indices';\n      case 'position':\n      case 'positions':\n      case 'vertices':\n        return this.draco.POSITION;\n      case 'normal':\n      case 'normals':\n        return this.draco.NORMAL;\n      case 'color':\n      case 'colors':\n        return this.draco.COLOR;\n      case 'texcoord':\n      case 'texcoords':\n        return this.draco.TEX_COORD;\n      default:\n        return this.draco.GENERIC;\n    }\n  }\n\n  _getPositionAttribute(attributes) {\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const dracoType = this._getDracoAttributeType(attributeName);\n      if (dracoType === this.draco.POSITION) {\n        return attribute;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Add metadata for the geometry.\n   * @param dracoGeometry - WASM Draco Object\n   * @param metadata\n   */\n  _addGeometryMetadata(dracoGeometry: PointCloud, metadata: {[key: string]: string}) {\n    const dracoMetadata = new this.draco.Metadata();\n    this._populateDracoMetadata(dracoMetadata, metadata);\n    this.dracoMeshBuilder.AddMetadata(dracoGeometry, dracoMetadata);\n  }\n\n  /**\n   * Add metadata for an attribute to geometry.\n   * @param dracoGeometry - WASM Draco Object\n   * @param uniqueAttributeId\n   * @param metadata\n   */\n  _addAttributeMetadata(\n    dracoGeometry: PointCloud,\n    uniqueAttributeId: number,\n    metadata: Map<string, string> | {[key: string]: string}\n  ) {\n    // Note: Draco JS IDL doesn't seem to expose draco.AttributeMetadata, however it seems to\n    // create such objects automatically from draco.Metadata object.\n    const dracoAttributeMetadata = new this.draco.Metadata();\n    this._populateDracoMetadata(dracoAttributeMetadata, metadata);\n    // Draco3d doc note: Directly add attribute metadata to geometry.\n    // You can do this without explicitly adding |GeometryMetadata| to mesh.\n    this.dracoMeshBuilder.SetMetadataForAttribute(\n      dracoGeometry,\n      uniqueAttributeId,\n      dracoAttributeMetadata\n    );\n  }\n\n  /**\n   * Add contents of object or map to a WASM Draco Metadata Object\n   * @param dracoMetadata - WASM Draco Object\n   * @param metadata\n   */\n  _populateDracoMetadata(\n    dracoMetadata: Metadata,\n    metadata: Map<string, string> | {[key: string]: string}\n  ) {\n    for (const [key, value] of getEntries(metadata)) {\n      switch (typeof value) {\n        case 'number':\n          if (Math.trunc(value) === value) {\n            this.dracoMetadataBuilder.AddIntEntry(dracoMetadata, key, value);\n          } else {\n            this.dracoMetadataBuilder.AddDoubleEntry(dracoMetadata, key, value);\n          }\n          break;\n        case 'object':\n          if (value instanceof Int32Array) {\n            this.dracoMetadataBuilder.AddIntEntryArray(dracoMetadata, key, value, value.length);\n          }\n          break;\n        case 'string':\n        default:\n          this.dracoMetadataBuilder.AddStringEntry(dracoMetadata, key, value);\n      }\n    }\n  }\n}\n\n// HELPER FUNCTIONS\n\n/**\n * Copy encoded data to buffer\n * @param dracoData\n */\nfunction dracoInt8ArrayToArrayBuffer(dracoData: DracoInt8Array) {\n  const byteLength = dracoData.size();\n  const outputBuffer = new ArrayBuffer(byteLength);\n  const outputData = new Int8Array(outputBuffer);\n  for (let i = 0; i < byteLength; ++i) {\n    outputData[i] = dracoData.GetValue(i);\n  }\n  return outputBuffer;\n}\n\n/** Enable iteration over either an object or a map */\nfunction getEntries(container) {\n  const hasEntriesFunc = container.entries && !container.hasOwnProperty('entries');\n  return hasEntriesFunc ? container.entries() : Object.entries(container);\n}\n"]},"metadata":{},"sourceType":"module"}