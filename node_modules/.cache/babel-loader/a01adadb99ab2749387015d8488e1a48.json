{"ast":null,"code":"import _defineProperty from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getWebGL2Context, assertWebGL2Context, log as _log } from '@luma.gl/gltools';\nimport Resource from './resource';\nimport Texture2D from './texture-2d';\nimport Renderbuffer from './renderbuffer';\nimport { clear as _clear, clearBuffer } from './clear';\nimport { copyToDataUrl } from './copy-and-blit.js';\nimport { getFeatures } from '../features';\nimport { getKey } from '../webgl-utils/constants-to-keys';\nimport { assert } from '../utils/assert';\nvar ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';\n\nvar Framebuffer = /*#__PURE__*/function (_Resource) {\n  _inherits(Framebuffer, _Resource);\n\n  var _super = _createSuper(Framebuffer);\n\n  function Framebuffer(gl) {\n    var _this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Framebuffer);\n\n    _this = _super.call(this, gl, opts);\n    _this.width = null;\n    _this.height = null;\n    _this.attachments = {};\n    _this.readBuffer = 36064;\n    _this.drawBuffers = [36064];\n    _this.ownResources = [];\n\n    _this.initialize(opts);\n\n    Object.seal(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Framebuffer, [{\n    key: \"MAX_COLOR_ATTACHMENTS\",\n    get: function get() {\n      var gl2 = assertWebGL2Context(this.gl);\n      return gl2.getParameter(gl2.MAX_COLOR_ATTACHMENTS);\n    }\n  }, {\n    key: \"MAX_DRAW_BUFFERS\",\n    get: function get() {\n      var gl2 = assertWebGL2Context(this.gl);\n      return gl2.getParameter(gl2.MAX_DRAW_BUFFERS);\n    }\n  }, {\n    key: \"color\",\n    get: function get() {\n      return this.attachments[36064] || null;\n    }\n  }, {\n    key: \"texture\",\n    get: function get() {\n      return this.attachments[36064] || null;\n    }\n  }, {\n    key: \"depth\",\n    get: function get() {\n      return this.attachments[36096] || this.attachments[33306] || null;\n    }\n  }, {\n    key: \"stencil\",\n    get: function get() {\n      return this.attachments[36128] || this.attachments[33306] || null;\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize(_ref) {\n      var _ref$width = _ref.width,\n          width = _ref$width === void 0 ? 1 : _ref$width,\n          _ref$height = _ref.height,\n          height = _ref$height === void 0 ? 1 : _ref$height,\n          _ref$attachments = _ref.attachments,\n          attachments = _ref$attachments === void 0 ? null : _ref$attachments,\n          _ref$color = _ref.color,\n          color = _ref$color === void 0 ? true : _ref$color,\n          _ref$depth = _ref.depth,\n          depth = _ref$depth === void 0 ? true : _ref$depth,\n          _ref$stencil = _ref.stencil,\n          stencil = _ref$stencil === void 0 ? false : _ref$stencil,\n          _ref$check = _ref.check,\n          check = _ref$check === void 0 ? true : _ref$check,\n          _ref$readBuffer = _ref.readBuffer,\n          readBuffer = _ref$readBuffer === void 0 ? undefined : _ref$readBuffer,\n          _ref$drawBuffers = _ref.drawBuffers,\n          drawBuffers = _ref$drawBuffers === void 0 ? undefined : _ref$drawBuffers;\n      assert(width >= 0 && height >= 0, 'Width and height need to be integers');\n      this.width = width;\n      this.height = height;\n\n      if (attachments) {\n        for (var attachment in attachments) {\n          var target = attachments[attachment];\n          var object = Array.isArray(target) ? target[0] : target;\n          object.resize({\n            width: width,\n            height: height\n          });\n        }\n      } else {\n        attachments = this._createDefaultAttachments(color, depth, stencil, width, height);\n      }\n\n      this.update({\n        clearAttachments: true,\n        attachments: attachments,\n        readBuffer: readBuffer,\n        drawBuffers: drawBuffers\n      });\n\n      if (attachments && check) {\n        this.checkStatus();\n      }\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var _iterator = _createForOfIteratorHelper(this.ownResources),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var resource = _step.value;\n          resource.delete();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      _get(_getPrototypeOf(Framebuffer.prototype), \"delete\", this).call(this);\n\n      return this;\n    }\n  }, {\n    key: \"update\",\n    value: function update(_ref2) {\n      var _ref2$attachments = _ref2.attachments,\n          attachments = _ref2$attachments === void 0 ? {} : _ref2$attachments,\n          readBuffer = _ref2.readBuffer,\n          drawBuffers = _ref2.drawBuffers,\n          _ref2$clearAttachment = _ref2.clearAttachments,\n          clearAttachments = _ref2$clearAttachment === void 0 ? false : _ref2$clearAttachment,\n          _ref2$resizeAttachmen = _ref2.resizeAttachments,\n          resizeAttachments = _ref2$resizeAttachmen === void 0 ? true : _ref2$resizeAttachmen;\n      this.attach(attachments, {\n        clearAttachments: clearAttachments,\n        resizeAttachments: resizeAttachments\n      });\n      var gl = this.gl;\n      var prevHandle = gl.bindFramebuffer(36160, this.handle);\n\n      if (readBuffer) {\n        this._setReadBuffer(readBuffer);\n      }\n\n      if (drawBuffers) {\n        this._setDrawBuffers(drawBuffers);\n      }\n\n      gl.bindFramebuffer(36160, prevHandle || null);\n      return this;\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var width = options.width,\n          height = options.height;\n\n      if (this.handle === null) {\n        assert(width === undefined && height === undefined);\n        this.width = this.gl.drawingBufferWidth;\n        this.height = this.gl.drawingBufferHeight;\n        return this;\n      }\n\n      if (width === undefined) {\n        width = this.gl.drawingBufferWidth;\n      }\n\n      if (height === undefined) {\n        height = this.gl.drawingBufferHeight;\n      }\n\n      if (width !== this.width && height !== this.height) {\n        _log.log(2, \"Resizing framebuffer \".concat(this.id, \" to \").concat(width, \"x\").concat(height))();\n      }\n\n      for (var attachmentPoint in this.attachments) {\n        this.attachments[attachmentPoint].resize({\n          width: width,\n          height: height\n        });\n      }\n\n      this.width = width;\n      this.height = height;\n      return this;\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(attachments) {\n      var _this2 = this;\n\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref3$clearAttachment = _ref3.clearAttachments,\n          clearAttachments = _ref3$clearAttachment === void 0 ? false : _ref3$clearAttachment,\n          _ref3$resizeAttachmen = _ref3.resizeAttachments,\n          resizeAttachments = _ref3$resizeAttachmen === void 0 ? true : _ref3$resizeAttachmen;\n\n      var newAttachments = {};\n\n      if (clearAttachments) {\n        Object.keys(this.attachments).forEach(function (key) {\n          newAttachments[key] = null;\n        });\n      }\n\n      Object.assign(newAttachments, attachments);\n      var prevHandle = this.gl.bindFramebuffer(36160, this.handle);\n\n      for (var key in newAttachments) {\n        assert(key !== undefined, 'Misspelled framebuffer binding point?');\n        var attachment = Number(key);\n        var descriptor = newAttachments[attachment];\n        var object = descriptor;\n\n        if (!object) {\n          this._unattach(attachment);\n        } else if (object instanceof Renderbuffer) {\n          this._attachRenderbuffer({\n            attachment: attachment,\n            renderbuffer: object\n          });\n        } else if (Array.isArray(descriptor)) {\n          var _descriptor = _slicedToArray(descriptor, 3),\n              texture = _descriptor[0],\n              _descriptor$ = _descriptor[1],\n              layer = _descriptor$ === void 0 ? 0 : _descriptor$,\n              _descriptor$2 = _descriptor[2],\n              level = _descriptor$2 === void 0 ? 0 : _descriptor$2;\n\n          object = texture;\n\n          this._attachTexture({\n            attachment: attachment,\n            texture: texture,\n            layer: layer,\n            level: level\n          });\n        } else {\n          this._attachTexture({\n            attachment: attachment,\n            texture: object,\n            layer: 0,\n            level: 0\n          });\n        }\n\n        if (resizeAttachments && object) {\n          object.resize({\n            width: this.width,\n            height: this.height\n          });\n        }\n      }\n\n      this.gl.bindFramebuffer(36160, prevHandle || null);\n      Object.assign(this.attachments, attachments);\n      Object.keys(this.attachments).filter(function (key) {\n        return !_this2.attachments[key];\n      }).forEach(function (key) {\n        delete _this2.attachments[key];\n      });\n    }\n  }, {\n    key: \"checkStatus\",\n    value: function checkStatus() {\n      var gl = this.gl;\n      var status = this.getStatus();\n\n      if (status !== 36053) {\n        throw new Error(_getFrameBufferStatus(status));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getStatus\",\n    value: function getStatus() {\n      var gl = this.gl;\n      var prevHandle = gl.bindFramebuffer(36160, this.handle);\n      var status = gl.checkFramebufferStatus(36160);\n      gl.bindFramebuffer(36160, prevHandle || null);\n      return status;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _this3 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var color = options.color,\n          depth = options.depth,\n          stencil = options.stencil,\n          _options$drawBuffers = options.drawBuffers,\n          drawBuffers = _options$drawBuffers === void 0 ? [] : _options$drawBuffers;\n      var prevHandle = this.gl.bindFramebuffer(36160, this.handle);\n\n      if (color || depth || stencil) {\n        _clear(this.gl, {\n          color: color,\n          depth: depth,\n          stencil: stencil\n        });\n      }\n\n      drawBuffers.forEach(function (value, drawBuffer) {\n        clearBuffer(_this3.gl, {\n          drawBuffer: drawBuffer,\n          value: value\n        });\n      });\n      this.gl.bindFramebuffer(36160, prevHandle || null);\n      return this;\n    }\n  }, {\n    key: \"readPixels\",\n    value: function readPixels() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _log.error('Framebuffer.readPixels() is no logner supported, use readPixelsToArray(framebuffer)')();\n\n      return null;\n    }\n  }, {\n    key: \"readPixelsToBuffer\",\n    value: function readPixelsToBuffer() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _log.error('Framebuffer.readPixelsToBuffer()is no logner supported, use readPixelsToBuffer(framebuffer)')();\n\n      return null;\n    }\n  }, {\n    key: \"copyToDataUrl\",\n    value: function copyToDataUrl() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _log.error('Framebuffer.copyToDataUrl() is no logner supported, use copyToDataUrl(framebuffer)')();\n\n      return null;\n    }\n  }, {\n    key: \"copyToImage\",\n    value: function copyToImage() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _log.error('Framebuffer.copyToImage() is no logner supported, use copyToImage(framebuffer)')();\n\n      return null;\n    }\n  }, {\n    key: \"copyToTexture\",\n    value: function copyToTexture() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _log.error('Framebuffer.copyToTexture({...}) is no logner supported, use copyToTexture(source, target, opts})')();\n\n      return null;\n    }\n  }, {\n    key: \"blit\",\n    value: function blit() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _log.error('Framebuffer.blit({...}) is no logner supported, use blit(source, target, opts)')();\n\n      return null;\n    }\n  }, {\n    key: \"invalidate\",\n    value: function invalidate(_ref4) {\n      var _ref4$attachments = _ref4.attachments,\n          attachments = _ref4$attachments === void 0 ? [] : _ref4$attachments,\n          _ref4$x = _ref4.x,\n          x = _ref4$x === void 0 ? 0 : _ref4$x,\n          _ref4$y = _ref4.y,\n          y = _ref4$y === void 0 ? 0 : _ref4$y,\n          width = _ref4.width,\n          height = _ref4.height;\n      var gl2 = assertWebGL2Context(this.gl);\n      var prevHandle = gl2.bindFramebuffer(36008, this.handle);\n      var invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;\n\n      if (invalidateAll) {\n        gl2.invalidateFramebuffer(36008, attachments);\n      } else {\n        gl2.invalidateFramebuffer(36008, attachments, x, y, width, height);\n      }\n\n      gl2.bindFramebuffer(36008, prevHandle);\n      return this;\n    }\n  }, {\n    key: \"getAttachmentParameter\",\n    value: function getAttachmentParameter(attachment, pname, keys) {\n      var value = this._getAttachmentParameterFallback(pname);\n\n      if (value === null) {\n        this.gl.bindFramebuffer(36160, this.handle);\n        value = this.gl.getFramebufferAttachmentParameter(36160, attachment, pname);\n        this.gl.bindFramebuffer(36160, null);\n      }\n\n      if (keys && value > 1000) {\n        value = getKey(this.gl, value);\n      }\n\n      return value;\n    }\n  }, {\n    key: \"getAttachmentParameters\",\n    value: function getAttachmentParameters() {\n      var attachment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 36064;\n      var keys = arguments.length > 1 ? arguments[1] : undefined;\n      var parameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.constructor.ATTACHMENT_PARAMETERS || [];\n      var values = {};\n\n      var _iterator2 = _createForOfIteratorHelper(parameters),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var pname = _step2.value;\n          var key = keys ? getKey(this.gl, pname) : pname;\n          values[key] = this.getAttachmentParameter(attachment, pname, keys);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return values;\n    }\n  }, {\n    key: \"getParameters\",\n    value: function getParameters() {\n      var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var attachments = Object.keys(this.attachments);\n      var parameters = {};\n\n      for (var _i = 0, _attachments = attachments; _i < _attachments.length; _i++) {\n        var attachmentName = _attachments[_i];\n        var attachment = Number(attachmentName);\n        var key = keys ? getKey(this.gl, attachment) : attachment;\n        parameters[key] = this.getAttachmentParameters(attachment, keys);\n      }\n\n      return parameters;\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      if (typeof window !== 'undefined') {\n        window.open(copyToDataUrl(this), 'luma-debug-texture');\n      }\n\n      return this;\n    }\n  }, {\n    key: \"log\",\n    value: function log() {\n      var logLevel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      if (logLevel > _log.level || typeof window === 'undefined') {\n        return this;\n      }\n\n      message = message || \"Framebuffer \".concat(this.id);\n      var image = copyToDataUrl(this, {\n        targetMaxHeight: 100\n      });\n\n      _log.image({\n        logLevel: logLevel,\n        message: message,\n        image: image\n      }, message)();\n\n      return this;\n    }\n  }, {\n    key: \"bind\",\n    value: function bind() {\n      var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref5$target = _ref5.target,\n          target = _ref5$target === void 0 ? 36160 : _ref5$target;\n\n      this.gl.bindFramebuffer(target, this.handle);\n      return this;\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref6$target = _ref6.target,\n          target = _ref6$target === void 0 ? 36160 : _ref6$target;\n\n      this.gl.bindFramebuffer(target, null);\n      return this;\n    }\n  }, {\n    key: \"_createDefaultAttachments\",\n    value: function _createDefaultAttachments(color, depth, stencil, width, height) {\n      var defaultAttachments = null;\n\n      if (color) {\n        var _parameters;\n\n        defaultAttachments = defaultAttachments || {};\n        defaultAttachments[36064] = new Texture2D(this.gl, {\n          id: \"\".concat(this.id, \"-color0\"),\n          pixels: null,\n          format: 6408,\n          type: 5121,\n          width: width,\n          height: height,\n          mipmaps: false,\n          parameters: (_parameters = {}, _defineProperty(_parameters, 10241, 9729), _defineProperty(_parameters, 10240, 9729), _defineProperty(_parameters, 10242, 33071), _defineProperty(_parameters, 10243, 33071), _parameters)\n        });\n        this.ownResources.push(defaultAttachments[36064]);\n      }\n\n      if (depth && stencil) {\n        defaultAttachments = defaultAttachments || {};\n        defaultAttachments[33306] = new Renderbuffer(this.gl, {\n          id: \"\".concat(this.id, \"-depth-stencil\"),\n          format: 35056,\n          width: width,\n          height: 111\n        });\n        this.ownResources.push(defaultAttachments[33306]);\n      } else if (depth) {\n        defaultAttachments = defaultAttachments || {};\n        defaultAttachments[36096] = new Renderbuffer(this.gl, {\n          id: \"\".concat(this.id, \"-depth\"),\n          format: 33189,\n          width: width,\n          height: height\n        });\n        this.ownResources.push(defaultAttachments[36096]);\n      } else if (stencil) {\n        assert(false);\n      }\n\n      return defaultAttachments;\n    }\n  }, {\n    key: \"_unattach\",\n    value: function _unattach(attachment) {\n      var oldAttachment = this.attachments[attachment];\n\n      if (!oldAttachment) {\n        return;\n      }\n\n      if (oldAttachment instanceof Renderbuffer) {\n        this.gl.framebufferRenderbuffer(36160, attachment, 36161, null);\n      } else {\n        this.gl.framebufferTexture2D(36160, attachment, 3553, null, 0);\n      }\n\n      delete this.attachments[attachment];\n    }\n  }, {\n    key: \"_attachRenderbuffer\",\n    value: function _attachRenderbuffer(_ref7) {\n      var _ref7$attachment = _ref7.attachment,\n          attachment = _ref7$attachment === void 0 ? 36064 : _ref7$attachment,\n          renderbuffer = _ref7.renderbuffer;\n      var gl = this.gl;\n      gl.framebufferRenderbuffer(36160, attachment, 36161, renderbuffer.handle);\n      this.attachments[attachment] = renderbuffer;\n    }\n  }, {\n    key: \"_attachTexture\",\n    value: function _attachTexture(_ref8) {\n      var _ref8$attachment = _ref8.attachment,\n          attachment = _ref8$attachment === void 0 ? 36064 : _ref8$attachment,\n          texture = _ref8.texture,\n          layer = _ref8.layer,\n          level = _ref8.level;\n      var gl = this.gl;\n      gl.bindTexture(texture.target, texture.handle);\n\n      switch (texture.target) {\n        case 35866:\n        case 32879:\n          var gl2 = assertWebGL2Context(gl);\n          gl2.framebufferTextureLayer(36160, attachment, texture.target, level, layer);\n          break;\n\n        case 34067:\n          var face = mapIndexToCubeMapFace(layer);\n          gl.framebufferTexture2D(36160, attachment, face, texture.handle, level);\n          break;\n\n        case 3553:\n          gl.framebufferTexture2D(36160, attachment, 3553, texture.handle, level);\n          break;\n\n        default:\n          assert(false, 'Illegal texture type');\n      }\n\n      gl.bindTexture(texture.target, null);\n      this.attachments[attachment] = texture;\n    }\n  }, {\n    key: \"_setReadBuffer\",\n    value: function _setReadBuffer(readBuffer) {\n      var gl2 = getWebGL2Context(this.gl);\n\n      if (gl2) {\n        gl2.readBuffer(readBuffer);\n      } else {\n        assert(readBuffer === 36064 || readBuffer === 1029, ERR_MULTIPLE_RENDERTARGETS);\n      }\n\n      this.readBuffer = readBuffer;\n    }\n  }, {\n    key: \"_setDrawBuffers\",\n    value: function _setDrawBuffers(drawBuffers) {\n      var gl = this.gl;\n      var gl2 = assertWebGL2Context(gl);\n\n      if (gl2) {\n        gl2.drawBuffers(drawBuffers);\n      } else {\n        var ext = gl.getExtension('WEBGL_draw_buffers');\n\n        if (ext) {\n          ext.drawBuffersWEBGL(drawBuffers);\n        } else {\n          assert(drawBuffers.length === 1 && (drawBuffers[0] === 36064 || drawBuffers[0] === 1029), ERR_MULTIPLE_RENDERTARGETS);\n        }\n      }\n\n      this.drawBuffers = drawBuffers;\n    }\n  }, {\n    key: \"_getAttachmentParameterFallback\",\n    value: function _getAttachmentParameterFallback(pname) {\n      var caps = getFeatures(this.gl);\n\n      switch (pname) {\n        case 36052:\n          return !caps.WEBGL2 ? 0 : null;\n\n        case 33298:\n        case 33299:\n        case 33300:\n        case 33301:\n        case 33302:\n        case 33303:\n          return !caps.WEBGL2 ? 8 : null;\n\n        case 33297:\n          return !caps.WEBGL2 ? 5125 : null;\n\n        case 33296:\n          return !caps.WEBGL2 && !caps.EXT_sRGB ? 9729 : null;\n\n        default:\n          return null;\n      }\n    }\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return this.gl.createFramebuffer();\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      this.gl.deleteFramebuffer(this.handle);\n    }\n  }, {\n    key: \"_bindHandle\",\n    value: function _bindHandle(handle) {\n      return this.gl.bindFramebuffer(36160, handle);\n    }\n  }], [{\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var colorBufferFloat = options.colorBufferFloat,\n          colorBufferHalfFloat = options.colorBufferHalfFloat;\n      var supported = true;\n\n      if (colorBufferFloat) {\n        supported = Boolean(gl.getExtension('EXT_color_buffer_float') || gl.getExtension('WEBGL_color_buffer_float') || gl.getExtension('OES_texture_float'));\n      }\n\n      if (colorBufferHalfFloat) {\n        supported = supported && Boolean(gl.getExtension('EXT_color_buffer_float') || gl.getExtension('EXT_color_buffer_half_float'));\n      }\n\n      return supported;\n    }\n  }, {\n    key: \"getDefaultFramebuffer\",\n    value: function getDefaultFramebuffer(gl) {\n      gl.luma = gl.luma || {};\n      gl.luma.defaultFramebuffer = gl.luma.defaultFramebuffer || new Framebuffer(gl, {\n        id: 'default-framebuffer',\n        handle: null,\n        attachments: {}\n      });\n      return gl.luma.defaultFramebuffer;\n    }\n  }]);\n\n  return Framebuffer;\n}(Resource);\n\nexport { Framebuffer as default };\n\nfunction mapIndexToCubeMapFace(layer) {\n  return layer < 34069 ? layer + 34069 : layer;\n}\n\nfunction _getFrameBufferStatus(status) {\n  var STATUS = Framebuffer.STATUS || {};\n  return STATUS[status] || \"Framebuffer error \".concat(status);\n}\n\nexport var FRAMEBUFFER_ATTACHMENT_PARAMETERS = [36049, 36048, 33296, 33298, 33299, 33300, 33301, 33302, 33303];\nFramebuffer.ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;","map":{"version":3,"mappings":";;;;;;;;;;AACA,SAAQA,gBAAR,EAA0BC,mBAA1B,EAA+CC,GAA/C,IAA+CA,IAA/C,QAAyD,kBAAzD;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAAQC,KAAR,IAAQA,MAAR,EAAeC,WAAf,QAAiC,SAAjC;AACA,SAAQC,aAAR,QAA4B,oBAA5B;AAEA,SAAQC,WAAR,QAA0B,aAA1B;AACA,SAAQC,MAAR,QAAqB,kCAArB;AACA,SAAQC,MAAR,QAAqB,iBAArB;AAEA,IAAMC,0BAA0B,GAAG,uCAAnC;;IAEqBC,W;;;;;EAyDnBC,qBAAYC,EAAZD,EAA2B;IAAA;;IAAA,IAAXE,IAAW,uEAAJ,EAAI;;IAAA;;IACzB,0BAAMD,EAAN,EAAUC,IAAV;IAGA,MAAKC,KAAL,GAAa,IAAb;IACA,MAAKC,MAAL,GAAc,IAAd;IACA,MAAKC,WAAL,GAAmB,EAAnB;IACA,MAAKC,UAAL;IACA,MAAKC,WAAL,GAAmB,OAAnB;IACA,MAAKC,YAAL,GAAoB,EAApB;;IACA,MAAKC,UAAL,CAAgBP,IAAhB;;IAEAQ,MAAM,CAACC,IAAPD;IAZyB;EAa1B;;;;SAvBD,eAA4B;MAC1B,IAAME,GAAG,GAAGzB,mBAAmB,CAAC,KAAKc,EAAN,CAA/B;MACA,OAAOW,GAAG,CAACC,YAAJD,CAAiBA,GAAG,CAACE,qBAArBF,CAAP;IACD;;;SAED,eAAuB;MACrB,IAAMA,GAAG,GAAGzB,mBAAmB,CAAC,KAAKc,EAAN,CAA/B;MACA,OAAOW,GAAG,CAACC,YAAJD,CAAiBA,GAAG,CAACG,gBAArBH,CAAP;IACD;;;SAiBD,eAAY;MACV,OAAO,KAAKP,WAAL,WAA0C,IAAjD;IACD;;;SAED,eAAc;MACZ,OAAO,KAAKA,WAAL,WAA0C,IAAjD;IACD;;;SAED,eAAY;MACV,OACE,KAAKA,WAAL,WAAyC,KAAKA,WAAL,OAAzC,IAA0F,IAD5F;IAGD;;;SAED,eAAc;MACZ,OACE,KAAKA,WAAL,WACA,KAAKA,WAAL,OADA,IAEA,IAHF;IAKD;;;WAEDI,0BAUG;MAAA,sBATDN,KASC;MAAA,IATDA,KASC,2BATO,CASP;MAAA,uBARDC,MAQC;MAAA,IARDA,MAQC,4BARQ,CAQR;MAAA,4BAPDC,WAOC;MAAA,IAPDA,WAOC,iCAPa,IAOb;MAAA,sBANDW,KAMC;MAAA,IANDA,KAMC,2BANO,IAMP;MAAA,sBALDC,KAKC;MAAA,IALDA,KAKC,2BALO,IAKP;MAAA,wBAJDC,OAIC;MAAA,IAJDA,OAIC,6BAJS,KAIT;MAAA,sBAHDC,KAGC;MAAA,IAHDA,KAGC,2BAHO,IAGP;MAAA,2BAFDb,UAEC;MAAA,IAFDA,UAEC,gCAFYc,SAEZ;MAAA,4BADDb,WACC;MAAA,IADDA,WACC,iCADaa,SACb;MACDvB,MAAM,CAACM,KAAK,IAAI,CAATA,IAAcC,MAAM,IAAI,CAAzB,EAA4B,sCAA5B,CAANP;MAGA,KAAKM,KAAL,GAAaA,KAAb;MACA,KAAKC,MAAL,GAAcA,MAAd;;MAIA,IAAIC,WAAJ,EAAiB;QACf,KAAK,IAAMgB,UAAX,IAAyBhB,WAAzB,EAAsC;UACpC,IAAMiB,MAAM,GAAGjB,WAAW,CAACgB,UAAD,CAA1B;UACA,IAAME,MAAM,GAAGC,KAAK,CAACC,OAAND,CAAcF,MAAdE,IAAwBF,MAAM,CAAC,CAAD,CAA9BE,GAAoCF,MAAnD;UACAC,MAAM,CAACG,MAAPH,CAAc;YAACpB,KAAD,EAACA,KAAD;YAAQC;UAAR,CAAdmB;QACD;MALH,OAMO;QAELlB,WAAW,GAAG,KAAKsB,yBAAL,CAA+BX,KAA/B,EAAsCC,KAAtC,EAA6CC,OAA7C,EAAsDf,KAAtD,EAA6DC,MAA7D,CAAdC;MACD;;MAED,KAAKuB,MAAL,CAAY;QAACC,gBAAgB,EAAE,IAAnB;QAAyBxB,WAAzB,EAAyBA,WAAzB;QAAsCC,UAAtC,EAAsCA,UAAtC;QAAkDC;MAAlD,CAAZ;;MAGA,IAAIF,WAAW,IAAIc,KAAnB,EAA0B;QACxB,KAAKW,WAAL;MACD;IACF;;;WAEDC,mBAAS;MAAA,2CACgB,KAAKvB,YADrB;MAAA;;MAAA;QACP,oDAA0C;UAAA,IAA/BwB,QAA+B;UACxCA,QAAQ,CAACD,MAATC;QACD;MAHM;QAAA;MAAA;QAAA;MAAA;;MAIP;;MACA,OAAO,IAAP;IACD;;;WAEDJ,uBAMG;MAAA,8BALDvB,WAKC;MAAA,IALDA,WAKC,kCALa,EAKb;MAAA,IAJDC,UAIC,SAJDA,UAIC;MAAA,IAHDC,WAGC,SAHDA,WAGC;MAAA,kCAFDsB,gBAEC;MAAA,IAFDA,gBAEC,sCAFkB,KAElB;MAAA,kCADDI,iBACC;MAAA,IADDA,iBACC,sCADmB,IACnB;MACD,KAAKC,MAAL,CAAY7B,WAAZ,EAAyB;QAACwB,gBAAD,EAACA,gBAAD;QAAmBI;MAAnB,CAAzB;MAEA,IAAOhC,EAAP,GAAa,IAAb,CAAOA,EAAP;MAEA,IAAMkC,UAAU,GAAGlC,EAAE,CAACmC,eAAHnC,QAAmC,KAAKoC,MAAxCpC,CAAnB;;MACA,IAAIK,UAAJ,EAAgB;QACd,KAAKgC,cAAL,CAAoBhC,UAApB;MACD;;MACD,IAAIC,WAAJ,EAAiB;QACf,KAAKgC,eAAL,CAAqBhC,WAArB;MACD;;MAEDN,EAAE,CAACmC,eAAHnC,QAAmCkC,UAAU,IAAI,IAAjDlC;MAEA,OAAO,IAAP;IACD;;;WAGDyB,kBAAqB;MAAA,IAAdc,OAAc,uEAAJ,EAAI;MACnB,IAAKrC,KAAL,GAAsBqC,OAAtB,CAAKrC,KAAL;MAAA,IAAYC,MAAZ,GAAsBoC,OAAtB,CAAYpC,MAAZ;;MAEA,IAAI,KAAKiC,MAAL,KAAgB,IAApB,EAA0B;QACxBxC,MAAM,CAACM,KAAK,KAAKiB,SAAVjB,IAAuBC,MAAM,KAAKgB,SAAnC,CAANvB;QACA,KAAKM,KAAL,GAAa,KAAKF,EAAL,CAAQwC,kBAArB;QACA,KAAKrC,MAAL,GAAc,KAAKH,EAAL,CAAQyC,mBAAtB;QACA,OAAO,IAAP;MACD;;MAED,IAAIvC,KAAK,KAAKiB,SAAd,EAAyB;QACvBjB,KAAK,GAAG,KAAKF,EAAL,CAAQwC,kBAAhBtC;MACD;;MACD,IAAIC,MAAM,KAAKgB,SAAf,EAA0B;QACxBhB,MAAM,GAAG,KAAKH,EAAL,CAAQyC,mBAAjBtC;MACD;;MAED,IAAID,KAAK,KAAK,KAAKA,KAAfA,IAAwBC,MAAM,KAAK,KAAKA,MAA5C,EAAoD;QAClDhB,IAAG,CAACA,GAAJA,CAAQ,CAARA,iCAAmC,KAAKuD,EAAxCvD,iBAAiDe,KAAjDf,cAA0DgB,MAA1DhB;MACD;;MACD,KAAK,IAAMwD,eAAX,IAA8B,KAAKvC,WAAnC,EAAgD;QAC9C,KAAKA,WAAL,CAAiBuC,eAAjB,EAAkClB,MAAlC,CAAyC;UAACvB,KAAD,EAACA,KAAD;UAAQC;QAAR,CAAzC;MACD;;MACD,KAAKD,KAAL,GAAaA,KAAb;MACA,KAAKC,MAAL,GAAcA,MAAd;MACA,OAAO,IAAP;IACD;;;WAGD8B,gBAAO7B,WAAP6B,EAA+E;MAAA;;MAAA,gFAAJ,EAAI;MAAA,kCAA1DL,gBAA0D;MAAA,IAA1DA,gBAA0D,sCAAvC,KAAuC;MAAA,kCAAhCI,iBAAgC;MAAA,IAAhCA,iBAAgC,sCAAZ,IAAY;;MAC7E,IAAMY,cAAc,GAAG,EAAvB;;MAGA,IAAIhB,gBAAJ,EAAsB;QACpBnB,MAAM,CAACoC,IAAPpC,CAAY,KAAKL,WAAjBK,EAA8BqC,OAA9BrC,CAAsCsC,aAAG,EAAI;UAC3CH,cAAc,CAACG,GAAD,CAAdH,GAAsB,IAAtBA;QADF;MAGD;;MAGDnC,MAAM,CAACuC,MAAPvC,CAAcmC,cAAdnC,EAA8BL,WAA9BK;MAEA,IAAMyB,UAAU,GAAG,KAAKlC,EAAL,CAAQmC,eAAR,QAAwC,KAAKC,MAA7C,CAAnB;;MAGA,KAAK,IAAMW,GAAX,IAAkBH,cAAlB,EAAkC;QAEhChD,MAAM,CAACmD,GAAG,KAAK5B,SAAT,EAAoB,uCAApB,CAANvB;QAEA,IAAMwB,UAAU,GAAG6B,MAAM,CAACF,GAAD,CAAzB;QAEA,IAAMG,UAAU,GAAGN,cAAc,CAACxB,UAAD,CAAjC;QACA,IAAIE,MAAM,GAAG4B,UAAb;;QACA,IAAI,CAAC5B,MAAL,EAAa;UACX,KAAK6B,SAAL,CAAe/B,UAAf;QADF,OAEO,IAAIE,MAAM,YAAYhC,YAAtB,EAAoC;UACzC,KAAK8D,mBAAL,CAAyB;YAAChC,UAAD,EAACA,UAAD;YAAaiC,YAAY,EAAE/B;UAA3B,CAAzB;QADK,OAEA,IAAIC,KAAK,CAACC,OAAND,CAAc2B,UAAd3B,CAAJ,EAA+B;UACpC,iCAAwC2B,UAAxC;UAAA,IAAOI,OAAP;UAAA;UAAA,IAAgBC,KAAhB,6BAAwB,CAAxB;UAAA;UAAA,IAA2BC,KAA3B,8BAAmC,CAAnC;;UACAlC,MAAM,GAAGgC,OAAThC;;UACA,KAAKmC,cAAL,CAAoB;YAACrC,UAAD,EAACA,UAAD;YAAakC,OAAb,EAAaA,OAAb;YAAsBC,KAAtB,EAAsBA,KAAtB;YAA6BC;UAA7B,CAApB;QAHK,OAIA;UACL,KAAKC,cAAL,CAAoB;YAACrC,UAAD,EAACA,UAAD;YAAakC,OAAO,EAAEhC,MAAtB;YAA8BiC,KAAK,EAAE,CAArC;YAAwCC,KAAK,EAAE;UAA/C,CAApB;QACD;;QAGD,IAAIxB,iBAAiB,IAAIV,MAAzB,EAAiC;UAC/BA,MAAM,CAACG,MAAPH,CAAc;YAACpB,KAAK,EAAE,KAAKA,KAAb;YAAoBC,MAAM,EAAE,KAAKA;UAAjC,CAAdmB;QACD;MACF;;MAGD,KAAKtB,EAAL,CAAQmC,eAAR,QAAwCD,UAAU,IAAI,IAAtD;MAGAzB,MAAM,CAACuC,MAAPvC,CAAc,KAAKL,WAAnBK,EAAgCL,WAAhCK;MACAA,MAAM,CAACoC,IAAPpC,CAAY,KAAKL,WAAjBK,EACGiD,MADHjD,CACUsC,aAAG;QAAA,OAAI,CAAC,OAAK3C,WAAL,CAAiB2C,GAAjB,CAAL;MAAA,CADbtC,EAEGqC,OAFHrC,CAEWsC,aAAG,EAAI;QACd,OAAO,OAAK3C,WAAL,CAAiB2C,GAAjB,CAAP;MAHJ;IAKD;;;WAEDlB,uBAAc;MACZ,IAAO7B,EAAP,GAAa,IAAb,CAAOA,EAAP;MACA,IAAM2D,MAAM,GAAG,KAAKC,SAAL,EAAf;;MACA,IAAID,MAAM,UAAV,EAAwC;QACtC,MAAM,IAAIE,KAAJ,CAAUC,qBAAqB,CAACH,MAAD,CAA/B,CAAN;MACD;;MACD,OAAO,IAAP;IACD;;;WAEDC,qBAAY;MACV,IAAO5D,EAAP,GAAa,IAAb,CAAOA,EAAP;MACA,IAAMkC,UAAU,GAAGlC,EAAE,CAACmC,eAAHnC,QAAmC,KAAKoC,MAAxCpC,CAAnB;MACA,IAAM2D,MAAM,GAAG3D,EAAE,CAAC+D,sBAAH/D,OAAf;MAEAA,EAAE,CAACmC,eAAHnC,QAAmCkC,UAAU,IAAI,IAAjDlC;MACA,OAAO2D,MAAP;IACD;;;WAEDpE,iBAAoB;MAAA;;MAAA,IAAdgD,OAAc,uEAAJ,EAAI;MAClB,IAAOxB,KAAP,GAAkDwB,OAAlD,CAAOxB,KAAP;MAAA,IAAcC,KAAd,GAAkDuB,OAAlD,CAAcvB,KAAd;MAAA,IAAqBC,OAArB,GAAkDsB,OAAlD,CAAqBtB,OAArB;MAAA,2BAAkDsB,OAAlD,CAA8BjC,WAA9B;MAAA,IAA8BA,WAA9B,qCAA4C,EAA5C;MAGA,IAAM4B,UAAU,GAAG,KAAKlC,EAAL,CAAQmC,eAAR,QAAwC,KAAKC,MAA7C,CAAnB;;MAEA,IAAIrB,KAAK,IAAIC,KAATD,IAAkBE,OAAtB,EAA+B;QAC7B1B,MAAK,CAAC,KAAKS,EAAN,EAAU;UAACe,KAAD,EAACA,KAAD;UAAQC,KAAR,EAAQA,KAAR;UAAeC;QAAf,CAAV,CAAL1B;MACD;;MAEDe,WAAW,CAACwC,OAAZxC,CAAoB,UAAC0D,KAAD,EAAQC,UAAR,EAAuB;QACzCzE,WAAW,CAAC,OAAKQ,EAAN,EAAU;UAACiE,UAAD,EAACA,UAAD;UAAaD;QAAb,CAAV,CAAXxE;MADF;MAKA,KAAKQ,EAAL,CAAQmC,eAAR,QAAwCD,UAAU,IAAI,IAAtD;MAEA,OAAO,IAAP;IACD;;;WAMDgC,sBAAsB;MAAA,IAAXjE,IAAW,uEAAJ,EAAI;;MACpBd,IAAG,CAACgF,KAAJhF,CACE,qFADFA;;MAGA,OAAO,IAAP;IACD;;;WAIDiF,8BAA8B;MAAA,IAAXnE,IAAW,uEAAJ,EAAI;;MAC5Bd,IAAG,CAACgF,KAAJhF,CACE,6FADFA;;MAGA,OAAO,IAAP;IACD;;;WAGDM,yBAAyB;MAAA,IAAXQ,IAAW,uEAAJ,EAAI;;MACvBd,IAAG,CAACgF,KAAJhF,CACE,oFADFA;;MAGA,OAAO,IAAP;IACD;;;WAGDkF,uBAAuB;MAAA,IAAXpE,IAAW,uEAAJ,EAAI;;MACrBd,IAAG,CAACgF,KAAJhF,CAAU,gFAAVA;;MACA,OAAO,IAAP;IACD;;;WAeDmF,yBAAyB;MAAA,IAAXrE,IAAW,uEAAJ,EAAI;;MACvBd,IAAG,CAACgF,KAAJhF,CACE,mGADFA;;MAGA,OAAO,IAAP;IACD;;;WAMDoF,gBAAgB;MAAA,IAAXtE,IAAW,uEAAJ,EAAI;;MACdd,IAAG,CAACgF,KAAJhF,CAAU,gFAAVA;;MACA,OAAO,IAAP;IACD;;;WAGDqF,2BAA4D;MAAA,8BAAhDpE,WAAgD;MAAA,IAAhDA,WAAgD,kCAAlC,EAAkC;MAAA,oBAA9BqE,CAA8B;MAAA,IAA9BA,CAA8B,wBAA1B,CAA0B;MAAA,oBAAvBC,CAAuB;MAAA,IAAvBA,CAAuB,wBAAnB,CAAmB;MAAA,IAAhBxE,KAAgB,SAAhBA,KAAgB;MAAA,IAATC,MAAS,SAATA,MAAS;MAC1D,IAAMQ,GAAG,GAAGzB,mBAAmB,CAAC,KAAKc,EAAN,CAA/B;MACA,IAAMkC,UAAU,GAAGvB,GAAG,CAACwB,eAAJxB,QAAyC,KAAKyB,MAA9CzB,CAAnB;MACA,IAAMgE,aAAa,GAAGF,CAAC,KAAK,CAANA,IAAWC,CAAC,KAAK,CAAjBD,IAAsBvE,KAAK,KAAKiB,SAAhCsD,IAA6CtE,MAAM,KAAKgB,SAA9E;;MACA,IAAIwD,aAAJ,EAAmB;QACjBhE,GAAG,CAACiE,qBAAJjE,QAA+CP,WAA/CO;MADF,OAEO;QAGLA,GAAG,CAACiE,qBAAJjE,QAA+CP,WAA/CO,EAA4D8D,CAA5D9D,EAA+D+D,CAA/D/D,EAAkET,KAAlES,EAAyER,MAAzEQ;MACD;;MAEDA,GAAG,CAACwB,eAAJxB,QAAyCuB,UAAzCvB;MACA,OAAO,IAAP;IACD;;;WAIDkE,gCAAuBzD,UAAvByD,EAAmCC,KAAnCD,EAA0ChC,IAA1CgC,EAAgD;MAC9C,IAAIb,KAAK,GAAG,KAAKe,+BAAL,CAAqCD,KAArC,CAAZ;;MACA,IAAId,KAAK,KAAK,IAAd,EAAoB;QAClB,KAAKhE,EAAL,CAAQmC,eAAR,QAAwC,KAAKC,MAA7C;QACA4B,KAAK,GAAG,KAAKhE,EAAL,CAAQgF,iCAAR,QAA0D5D,UAA1D,EAAsE0D,KAAtE,CAARd;QACA,KAAKhE,EAAL,CAAQmC,eAAR,QAAwC,IAAxC;MACD;;MACD,IAAIU,IAAI,IAAImB,KAAK,GAAG,IAApB,EAA0B;QAExBA,KAAK,GAAGrE,MAAM,CAAC,KAAKK,EAAN,EAAUgE,KAAV,CAAdA;MACD;;MACD,OAAOA,KAAP;IACD;;;WAEDiB,mCAKE;MAAA,IAJA7D,UAIA,uEAJU,KAIV;MAAA,IAHAyB,IAGA;MAAA,IADAqC,UACA,uEADa,KAAKnF,WAAL,CAAiBoF,qBAAjB,IAA0C,EACvD;MACA,IAAMC,MAAM,GAAG,EAAf;;MADA,4CAEoBF,UAFpB;MAAA;;MAAA;QAEA,uDAAgC;UAAA,IAArBJ,KAAqB;UAC9B,IAAM/B,GAAG,GAAGF,IAAI,GAAGlD,MAAM,CAAC,KAAKK,EAAN,EAAU8E,KAAV,CAAT,GAA4BA,KAA5C;UACAM,MAAM,CAACrC,GAAD,CAANqC,GAAc,KAAKP,sBAAL,CAA4BzD,UAA5B,EAAwC0D,KAAxC,EAA+CjC,IAA/C,CAAduC;QACD;MALD;QAAA;MAAA;QAAA;MAAA;;MAMA,OAAOA,MAAP;IACD;;;WAEDC,yBAA2B;MAAA,IAAbxC,IAAa,uEAAN,IAAM;MACzB,IAAMzC,WAAW,GAAGK,MAAM,CAACoC,IAAPpC,CAAY,KAAKL,WAAjBK,CAApB;MAIA,IAAMyE,UAAU,GAAG,EAAnB;;MACA,gCAA6B9E,WAA7B,kCAA0C;QAArC,IAAMkF,cAAX,mBAAK;QACH,IAAMlE,UAAU,GAAG6B,MAAM,CAACqC,cAAD,CAAzB;QACA,IAAMvC,GAAG,GAAGF,IAAI,GAAGlD,MAAM,CAAC,KAAKK,EAAN,EAAUoB,UAAV,CAAT,GAAiCA,UAAjD;QACA8D,UAAU,CAACnC,GAAD,CAAVmC,GAAkB,KAAKD,uBAAL,CAA6B7D,UAA7B,EAAyCyB,IAAzC,CAAlBqC;MACD;;MACD,OAAOA,UAAP;IACD;;;WAKDK,gBAAO;MACL,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;QACjCA,MAAM,CAACC,IAAPD,CAAY/F,aAAa,CAAC,IAAD,CAAzB+F,EAAiC,oBAAjCA;MACD;;MACD,OAAO,IAAP;IACD;;;WAEDrG,eAAgC;MAAA,IAA5BuG,QAA4B,uEAAjB,CAAiB;MAAA,IAAdC,OAAc,uEAAJ,EAAI;;MAC9B,IAAID,QAAQ,GAAGvG,IAAG,CAACqE,KAAfkC,IAAwB,OAAOF,MAAP,KAAkB,WAA9C,EAA2D;QACzD,OAAO,IAAP;MACD;;MACDG,OAAO,GAAGA,OAAO,0BAAmB,KAAKjD,EAAxB,CAAjBiD;MACA,IAAMC,KAAK,GAAGnG,aAAa,CAAC,IAAD,EAAO;QAACoG,eAAe,EAAE;MAAlB,CAAP,CAA3B;;MACA1G,IAAG,CAACyG,KAAJzG,CAAU;QAACuG,QAAD,EAACA,QAAD;QAAWC,OAAX,EAAWA,OAAX;QAAoBC;MAApB,CAAVzG,EAAsCwG,OAAtCxG;;MACA,OAAO,IAAP;IACD;;;WAGD2G,gBAAqC;MAAA,gFAAJ,EAAI;MAAA,yBAA/BzE,MAA+B;MAAA,IAA/BA,MAA+B,6BAAzB,KAAyB;;MACnC,KAAKrB,EAAL,CAAQmC,eAAR,CAAwBd,MAAxB,EAAgC,KAAKe,MAArC;MACA,OAAO,IAAP;IACD;;;WAED2D,kBAAuC;MAAA,gFAAJ,EAAI;MAAA,yBAA/B1E,MAA+B;MAAA,IAA/BA,MAA+B,6BAAzB,KAAyB;;MACrC,KAAKrB,EAAL,CAAQmC,eAAR,CAAwBd,MAAxB,EAAgC,IAAhC;MACA,OAAO,IAAP;IACD;;;WAIDK,mCAA0BX,KAA1BW,EAAiCV,KAAjCU,EAAwCT,OAAxCS,EAAiDxB,KAAjDwB,EAAwDvB,MAAxDuB,EAAgE;MAC9D,IAAIsE,kBAAkB,GAAG,IAAzB;;MAGA,IAAIjF,KAAJ,EAAW;QAAA;;QACTiF,kBAAkB,GAAGA,kBAAkB,IAAI,EAA3CA;QACAA,kBAAkB,OAAlBA,GAA2C,IAAI3G,SAAJ,CAAc,KAAKW,EAAnB,EAAuB;UAChE0C,EAAE,YAAK,KAAKA,EAAV,YAD8D;UAEhEuD,MAAM,EAAE,IAFwD;UAGhEC,MAAM,MAH0D;UAIhEC,IAAI,MAJ4D;UAKhEjG,KALgE,EAKhEA,KALgE;UAMhEC,MANgE,EAMhEA,MANgE;UAUhEiG,OAAO,EAAE,KAVuD;UAchElB,UAAU,kDACR,KADQ,EACR,IADQ,gCAER,KAFQ,EAER,IAFQ,gCAGR,KAHQ,EAGR,KAHQ,gCAIR,KAJQ,EAIR,KAJQ;QAdsD,CAAvB,CAA3Cc;QAsBA,KAAKzF,YAAL,CAAkB8F,IAAlB,CAAuBL,kBAAkB,OAAzC;MACD;;MAED,IAAIhF,KAAK,IAAIC,OAAb,EAAsB;QAEpB+E,kBAAkB,GAAGA,kBAAkB,IAAI,EAA3CA;QACAA,kBAAkB,OAAlBA,GAAkD,IAAI1G,YAAJ,CAAiB,KAAKU,EAAtB,EAA0B;UAC1E0C,EAAE,YAAK,KAAKA,EAAV,mBADwE;UAE1EwD,MAAM,OAFoE;UAG1EhG,KAH0E,EAG1EA,KAH0E;UAI1EC,MAAM,EAAE;QAJkE,CAA1B,CAAlD6F;QAOA,KAAKzF,YAAL,CAAkB8F,IAAlB,CAAuBL,kBAAkB,OAAzC;MAVF,OAqBO,IAAIhF,KAAJ,EAAW;QAEhBgF,kBAAkB,GAAGA,kBAAkB,IAAI,EAA3CA;QACAA,kBAAkB,OAAlBA,GAA0C,IAAI1G,YAAJ,CAAiB,KAAKU,EAAtB,EAA0B;UAClE0C,EAAE,YAAK,KAAKA,EAAV,WADgE;UAElEwD,MAAM,OAF4D;UAGlEhG,KAHkE,EAGlEA,KAHkE;UAIlEC;QAJkE,CAA1B,CAA1C6F;QAOA,KAAKzF,YAAL,CAAkB8F,IAAlB,CAAuBL,kBAAkB,OAAzC;MAVK,OAWA,IAAI/E,OAAJ,EAAa;QAElBrB,MAAM,CAAC,KAAD,CAANA;MACD;;MAED,OAAOoG,kBAAP;IACD;;;WAED7C,mBAAU/B,UAAV+B,EAAsB;MACpB,IAAMmD,aAAa,GAAG,KAAKlG,WAAL,CAAiBgB,UAAjB,CAAtB;;MACA,IAAI,CAACkF,aAAL,EAAoB;QAClB;MACD;;MACD,IAAIA,aAAa,YAAYhH,YAA7B,EAA2C;QAEzC,KAAKU,EAAL,CAAQuG,uBAAR,QAAgDnF,UAAhD,SAA6E,IAA7E;MAFF,OAGO;QAEL,KAAKpB,EAAL,CAAQwG,oBAAR,QAA6CpF,UAA7C,QAAwE,IAAxE,EAA8E,CAA9E;MACD;;MACD,OAAO,KAAKhB,WAAL,CAAiBgB,UAAjB,CAAP;IACD;;;WAEDgC,oCAAuE;MAAA,6BAAlDhC,UAAkD;MAAA,IAAlDA,UAAkD,iCAAxC,KAAwC;MAAA,IAAfiC,YAAe,SAAfA,YAAe;MACrE,IAAOrD,EAAP,GAAa,IAAb,CAAOA,EAAP;MAGAA,EAAE,CAACuG,uBAAHvG,QAA2CoB,UAA3CpB,SAAwEqD,YAAY,CAACjB,MAArFpC;MAIA,KAAKI,WAAL,CAAiBgB,UAAjB,IAA+BiC,YAA/B;IACD;;;WAIDI,+BAA2E;MAAA,6BAA3DrC,UAA2D;MAAA,IAA3DA,UAA2D,iCAAjD,KAAiD;MAAA,IAAxBkC,OAAwB,SAAxBA,OAAwB;MAAA,IAAfC,KAAe,SAAfA,KAAe;MAAA,IAARC,KAAQ,SAARA,KAAQ;MACzE,IAAOxD,EAAP,GAAa,IAAb,CAAOA,EAAP;MACAA,EAAE,CAACyG,WAAHzG,CAAesD,OAAO,CAACjC,MAAvBrB,EAA+BsD,OAAO,CAAClB,MAAvCpC;;MAEA,QAAQsD,OAAO,CAACjC,MAAhB;QACE;QACA;UACE,IAAMV,GAAG,GAAGzB,mBAAmB,CAACc,EAAD,CAA/B;UACAW,GAAG,CAAC+F,uBAAJ/F,QAA4CS,UAA5CT,EAAwD2C,OAAO,CAACjC,MAAhEV,EAAwE6C,KAAxE7C,EAA+E4C,KAA/E5C;UACA;;QAEF;UAEE,IAAMgG,IAAI,GAAGC,qBAAqB,CAACrD,KAAD,CAAlC;UACAvD,EAAE,CAACwG,oBAAHxG,QAAwCoB,UAAxCpB,EAAoD2G,IAApD3G,EAA0DsD,OAAO,CAAClB,MAAlEpC,EAA0EwD,KAA1ExD;UACA;;QAEF;UACEA,EAAE,CAACwG,oBAAHxG,QAAwCoB,UAAxCpB,QAAmEsD,OAAO,CAAClB,MAA3EpC,EAAmFwD,KAAnFxD;UACA;;QAEF;UACEJ,MAAM,CAAC,KAAD,EAAQ,sBAAR,CAANA;MAlBJ;;MAqBAI,EAAE,CAACyG,WAAHzG,CAAesD,OAAO,CAACjC,MAAvBrB,EAA+B,IAA/BA;MACA,KAAKI,WAAL,CAAiBgB,UAAjB,IAA+BkC,OAA/B;IACD;;;WAGDjB,wBAAehC,UAAfgC,EAA2B;MACzB,IAAM1B,GAAG,GAAG1B,gBAAgB,CAAC,KAAKe,EAAN,CAA5B;;MACA,IAAIW,GAAJ,EAAS;QACPA,GAAG,CAACN,UAAJM,CAAeN,UAAfM;MADF,OAEO;QAELf,MAAM,CACJS,UAAU,UAAVA,IAAuCA,UAAU,SAD7C,EAEJR,0BAFI,CAAND;MAID;;MACD,KAAKS,UAAL,GAAkBA,UAAlB;IACD;;;WAGDiC,yBAAgBhC,WAAhBgC,EAA6B;MAC3B,IAAOtC,EAAP,GAAa,IAAb,CAAOA,EAAP;MACA,IAAMW,GAAG,GAAGzB,mBAAmB,CAACc,EAAD,CAA/B;;MACA,IAAIW,GAAJ,EAAS;QACPA,GAAG,CAACL,WAAJK,CAAgBL,WAAhBK;MADF,OAEO;QAEL,IAAMkG,GAAG,GAAG7G,EAAE,CAAC8G,YAAH9G,CAAgB,oBAAhBA,CAAZ;;QACA,IAAI6G,GAAJ,EAAS;UACPA,GAAG,CAACE,gBAAJF,CAAqBvG,WAArBuG;QADF,OAEO;UAELjH,MAAM,CACJU,WAAW,CAAC0G,MAAZ1G,KAAuB,CAAvBA,KACGA,WAAW,CAAC,CAAD,CAAXA,cAA2CA,WAAW,CAAC,CAAD,CAAXA,SAD9CA,CADI,EAGJT,0BAHI,CAAND;QAKD;MACF;;MACD,KAAKU,WAAL,GAAmBA,WAAnB;IACD;;;WAMDyE,yCAAgCD,KAAhCC,EAAuC;MACrC,IAAMkC,IAAI,GAAGvH,WAAW,CAAC,KAAKM,EAAN,CAAxB;;MAEA,QAAQ8E,KAAR;QACE;UACE,OAAO,CAACmC,IAAI,CAACC,MAAN,GAAe,CAAf,GAAmB,IAA1B;;QACF;QACA;QACA;QACA;QACA;QACA;UACE,OAAO,CAACD,IAAI,CAACC,MAAN,GAAe,CAAf,GAAmB,IAA1B;;QACF;UACE,OAAO,CAACD,IAAI,CAACC,MAAN,UAAiC,IAAxC;;QACF;UACE,OAAO,CAACD,IAAI,CAACC,MAAN,IAAgB,CAACD,IAAI,CAACE,QAAtB,UAA6C,IAApD;;QACF;UACE,OAAO,IAAP;MAfJ;IAiBD;;;WAKDC,yBAAgB;MACd,OAAO,KAAKpH,EAAL,CAAQqH,iBAAR,EAAP;IACD;;;WAEDC,yBAAgB;MACd,KAAKtH,EAAL,CAAQuH,iBAAR,CAA0B,KAAKnF,MAA/B;IACD;;;WAEDoF,qBAAYpF,MAAZoF,EAAoB;MAClB,OAAO,KAAKxH,EAAL,CAAQmC,eAAR,QAAwCC,MAAxC,CAAP;IACD;;;WAvoBD,qBAAmBpC,EAAnB,EAAqC;MAAA,IAAduC,OAAc,uEAAJ,EAAI;MACnC,IACEkF,gBADF,GAGIlF,OAHJ,CACEkF,gBADF;MAAA,IAEEC,oBAFF,GAGInF,OAHJ,CAEEmF,oBAFF;MAIA,IAAIC,SAAS,GAAG,IAAhB;;MAEA,IAAIF,gBAAJ,EAAsB;QACpBE,SAAS,GAAGC,OAAO,CAEjB5H,EAAE,CAAC8G,YAAH9G,CAAgB,wBAAhBA,KAEEA,EAAE,CAAC8G,YAAH9G,CAAgB,0BAAhBA,CAFFA,IAIEA,EAAE,CAAC8G,YAAH9G,CAAgB,mBAAhBA,CANe,CAAnB2H;MAQD;;MAED,IAAID,oBAAJ,EAA0B;QACxBC,SAAS,GACPA,SAAS,IACTC,OAAO,CAEL5H,EAAE,CAAC8G,YAAH9G,CAAgB,wBAAhBA,KAEEA,EAAE,CAAC8G,YAAH9G,CAAgB,6BAAhBA,CAJG,CAFT2H;MAQD;;MAED,OAAOA,SAAP;IACD;;;WAGD,+BAA6B3H,EAA7B,EAAiC;MAC/BA,EAAE,CAAC6H,IAAH7H,GAAUA,EAAE,CAAC6H,IAAH7H,IAAW,EAArBA;MACAA,EAAE,CAAC6H,IAAH7H,CAAQ8H,kBAAR9H,GACEA,EAAE,CAAC6H,IAAH7H,CAAQ8H,kBAAR9H,IACA,IAAIF,WAAJ,CAAgBE,EAAhB,EAAoB;QAClB0C,EAAE,EAAE,qBADc;QAElBN,MAAM,EAAE,IAFU;QAGlBhC,WAAW,EAAE;MAHK,CAApB,CAFFJ;MAQA,OAAOA,EAAE,CAAC6H,IAAH7H,CAAQ8H,kBAAf;IACD;;;;EA7CsC1I,Q;;SAApBU,W;;AA8oBrB,SAAS8G,qBAAT,CAA+BrD,KAA/B,EAAsC;EAGpC,OAAOA,KAAK,QAALA,GAAyCA,KAAK,QAA9CA,GAAkFA,KAAzF;AACD;;AAID,SAASO,qBAAT,CAA+BH,MAA/B,EAAuC;EAGrC,IAAMoE,MAAM,GAAGjI,WAAW,CAACiI,MAAZjI,IAAsB,EAArC;EACA,OAAOiI,MAAM,CAACpE,MAAD,CAANoE,gCAAuCpE,MAAvCoE,CAAP;AACD;;AAED,OAAO,IAAMC,iCAAiC,GAAG,+DAA1C;AAmBPlI,WAAW,CAACqF,qBAAZrF,GAAoCkI,iCAApClI","names":["getWebGL2Context","assertWebGL2Context","log","Resource","Texture2D","Renderbuffer","clear","clearBuffer","copyToDataUrl","getFeatures","getKey","assert","ERR_MULTIPLE_RENDERTARGETS","Framebuffer","constructor","gl","opts","width","height","attachments","readBuffer","drawBuffers","ownResources","initialize","Object","seal","gl2","getParameter","MAX_COLOR_ATTACHMENTS","MAX_DRAW_BUFFERS","color","depth","stencil","check","undefined","attachment","target","object","Array","isArray","resize","_createDefaultAttachments","update","clearAttachments","checkStatus","delete","resource","resizeAttachments","attach","prevHandle","bindFramebuffer","handle","_setReadBuffer","_setDrawBuffers","options","drawingBufferWidth","drawingBufferHeight","id","attachmentPoint","newAttachments","keys","forEach","key","assign","Number","descriptor","_unattach","_attachRenderbuffer","renderbuffer","texture","layer","level","_attachTexture","filter","status","getStatus","Error","_getFrameBufferStatus","checkFramebufferStatus","value","drawBuffer","readPixels","error","readPixelsToBuffer","copyToImage","copyToTexture","blit","invalidate","x","y","invalidateAll","invalidateFramebuffer","getAttachmentParameter","pname","_getAttachmentParameterFallback","getFramebufferAttachmentParameter","getAttachmentParameters","parameters","ATTACHMENT_PARAMETERS","values","getParameters","attachmentName","show","window","open","logLevel","message","image","targetMaxHeight","bind","unbind","defaultAttachments","pixels","format","type","mipmaps","push","oldAttachment","framebufferRenderbuffer","framebufferTexture2D","bindTexture","framebufferTextureLayer","face","mapIndexToCubeMapFace","ext","getExtension","drawBuffersWEBGL","length","caps","WEBGL2","EXT_sRGB","_createHandle","createFramebuffer","_deleteHandle","deleteFramebuffer","_bindHandle","colorBufferFloat","colorBufferHalfFloat","supported","Boolean","luma","defaultFramebuffer","STATUS","FRAMEBUFFER_ATTACHMENT_PARAMETERS"],"sources":["../../../src/classes/framebuffer.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {getWebGL2Context, assertWebGL2Context, log} from '@luma.gl/gltools';\nimport Resource from './resource';\nimport Texture2D from './texture-2d';\nimport Renderbuffer from './renderbuffer';\nimport {clear, clearBuffer} from './clear';\nimport {copyToDataUrl} from './copy-and-blit.js';\n\nimport {getFeatures} from '../features';\nimport {getKey} from '../webgl-utils/constants-to-keys';\nimport {assert} from '../utils/assert';\n\nconst ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';\n\nexport default class Framebuffer extends Resource {\n  static isSupported(gl, options = {}) {\n    const {\n      colorBufferFloat, // Whether floating point textures can be rendered and read\n      colorBufferHalfFloat // Whether half float textures can be rendered and read\n    } = options;\n    let supported = true;\n\n    if (colorBufferFloat) {\n      supported = Boolean(\n        // WebGL 2\n        gl.getExtension('EXT_color_buffer_float') ||\n          // WebGL 1, not exposed on all platforms\n          gl.getExtension('WEBGL_color_buffer_float') ||\n          // WebGL 1, implicitly enables float render targets https://www.khronos.org/registry/webgl/extensions/OES_texture_float/\n          gl.getExtension('OES_texture_float')\n      );\n    }\n\n    if (colorBufferHalfFloat) {\n      supported =\n        supported &&\n        Boolean(\n          // WebGL 2\n          gl.getExtension('EXT_color_buffer_float') ||\n            // WebGL 1\n            gl.getExtension('EXT_color_buffer_half_float')\n        );\n    }\n\n    return supported;\n  }\n\n  // Create a Framebuffer wrapper for the default framebuffer (target === null)\n  static getDefaultFramebuffer(gl) {\n    gl.luma = gl.luma || {};\n    gl.luma.defaultFramebuffer =\n      gl.luma.defaultFramebuffer ||\n      new Framebuffer(gl, {\n        id: 'default-framebuffer',\n        handle: null,\n        attachments: {}\n      });\n    // TODO - can we query for and get a handle to the GL.FRONT renderbuffer?\n    return gl.luma.defaultFramebuffer;\n  }\n\n  get MAX_COLOR_ATTACHMENTS() {\n    const gl2 = assertWebGL2Context(this.gl);\n    return gl2.getParameter(gl2.MAX_COLOR_ATTACHMENTS);\n  }\n\n  get MAX_DRAW_BUFFERS() {\n    const gl2 = assertWebGL2Context(this.gl);\n    return gl2.getParameter(gl2.MAX_DRAW_BUFFERS);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // Public members\n    this.width = null;\n    this.height = null;\n    this.attachments = {};\n    this.readBuffer = GL.COLOR_ATTACHMENT0;\n    this.drawBuffers = [GL.COLOR_ATTACHMENT0];\n    this.ownResources = [];\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  get color() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get texture() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get depth() {\n    return (\n      this.attachments[GL.DEPTH_ATTACHMENT] || this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] || null\n    );\n  }\n\n  get stencil() {\n    return (\n      this.attachments[GL.STENCIL_ATTACHMENT] ||\n      this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] ||\n      null\n    );\n  }\n\n  initialize({\n    width = 1,\n    height = 1,\n    attachments = null,\n    color = true,\n    depth = true,\n    stencil = false,\n    check = true,\n    readBuffer = undefined,\n    drawBuffers = undefined\n  }) {\n    assert(width >= 0 && height >= 0, 'Width and height need to be integers');\n\n    // Store actual width and height for diffing\n    this.width = width;\n    this.height = height;\n\n    // Resize any provided attachments - note that resize only resizes if needed\n    // Note: A framebuffer has no separate size, it is defined by its attachments (which must agree)\n    if (attachments) {\n      for (const attachment in attachments) {\n        const target = attachments[attachment];\n        const object = Array.isArray(target) ? target[0] : target;\n        object.resize({width, height});\n      }\n    } else {\n      // Create any requested default attachments\n      attachments = this._createDefaultAttachments(color, depth, stencil, width, height);\n    }\n\n    this.update({clearAttachments: true, attachments, readBuffer, drawBuffers});\n\n    // Checks that framebuffer was properly set up, if not, throws an explanatory error\n    if (attachments && check) {\n      this.checkStatus();\n    }\n  }\n\n  delete() {\n    for (const resource of this.ownResources) {\n      resource.delete();\n    }\n    super.delete();\n    return this;\n  }\n\n  update({\n    attachments = {},\n    readBuffer,\n    drawBuffers,\n    clearAttachments = false,\n    resizeAttachments = true\n  }) {\n    this.attach(attachments, {clearAttachments, resizeAttachments});\n\n    const {gl} = this;\n    // Multiple render target support, set read buffer and draw buffers\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    if (readBuffer) {\n      this._setReadBuffer(readBuffer);\n    }\n    if (drawBuffers) {\n      this._setDrawBuffers(drawBuffers);\n    }\n    // @ts-ignore\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // Attachment resize is expected to be a noop if size is same\n  resize(options = {}) {\n    let {width, height} = options;\n    // for default framebuffer, just update the stored size\n    if (this.handle === null) {\n      assert(width === undefined && height === undefined);\n      this.width = this.gl.drawingBufferWidth;\n      this.height = this.gl.drawingBufferHeight;\n      return this;\n    }\n\n    if (width === undefined) {\n      width = this.gl.drawingBufferWidth;\n    }\n    if (height === undefined) {\n      height = this.gl.drawingBufferHeight;\n    }\n\n    if (width !== this.width && height !== this.height) {\n      log.log(2, `Resizing framebuffer ${this.id} to ${width}x${height}`)();\n    }\n    for (const attachmentPoint in this.attachments) {\n      this.attachments[attachmentPoint].resize({width, height});\n    }\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  // Attach from a map of attachments\n  attach(attachments, {clearAttachments = false, resizeAttachments = true} = {}) {\n    const newAttachments = {};\n\n    // Any current attachments need to be removed, add null values to map\n    if (clearAttachments) {\n      Object.keys(this.attachments).forEach(key => {\n        newAttachments[key] = null;\n      });\n    }\n\n    // Overlay the new attachments\n    Object.assign(newAttachments, attachments);\n\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    // Walk the attachments\n    for (const key in newAttachments) {\n      // Ensure key is not undefined\n      assert(key !== undefined, 'Misspelled framebuffer binding point?');\n\n      const attachment = Number(key);\n\n      const descriptor = newAttachments[attachment];\n      let object = descriptor;\n      if (!object) {\n        this._unattach(attachment);\n      } else if (object instanceof Renderbuffer) {\n        this._attachRenderbuffer({attachment, renderbuffer: object});\n      } else if (Array.isArray(descriptor)) {\n        const [texture, layer = 0, level = 0] = descriptor;\n        object = texture;\n        this._attachTexture({attachment, texture, layer, level});\n      } else {\n        this._attachTexture({attachment, texture: object, layer: 0, level: 0});\n      }\n\n      // Resize objects\n      if (resizeAttachments && object) {\n        object.resize({width: this.width, height: this.height});\n      }\n    }\n\n    // @ts-ignore\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    // Assign to attachments and remove any nulls to get a clean attachment map\n    Object.assign(this.attachments, attachments);\n    Object.keys(this.attachments)\n      .filter(key => !this.attachments[key])\n      .forEach(key => {\n        delete this.attachments[key];\n      });\n  }\n\n  checkStatus() {\n    const {gl} = this;\n    const status = this.getStatus();\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n      throw new Error(_getFrameBufferStatus(status));\n    }\n    return this;\n  }\n\n  getStatus() {\n    const {gl} = this;\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    const status = gl.checkFramebufferStatus(GL.FRAMEBUFFER);\n    // @ts-ignore\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n    return status;\n  }\n\n  clear(options = {}) {\n    const {color, depth, stencil, drawBuffers = []} = options;\n\n    // Bind framebuffer and delegate to global clear functions\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    if (color || depth || stencil) {\n      clear(this.gl, {color, depth, stencil});\n    }\n\n    drawBuffers.forEach((value, drawBuffer) => {\n      clearBuffer(this.gl, {drawBuffer, value});\n    });\n\n    // @ts-ignore\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // NOTE: Slow requires roundtrip to GPU\n  // App can provide pixelArray or have it auto allocated by this method\n  // @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n  //  newly allocated by this method unless provided by app.\n  readPixels(opts = {}) {\n    log.error(\n      'Framebuffer.readPixels() is no logner supported, use readPixelsToArray(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads data into provided buffer object asynchronously\n  // This function doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.\n  readPixelsToBuffer(opts = {}) {\n    log.error(\n      'Framebuffer.readPixelsToBuffer()is no logner supported, use readPixelsToBuffer(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads pixels as a dataUrl\n  copyToDataUrl(opts = {}) {\n    log.error(\n      'Framebuffer.copyToDataUrl() is no logner supported, use copyToDataUrl(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads pixels into an HTML Image\n  copyToImage(opts = {}) {\n    log.error('Framebuffer.copyToImage() is no logner supported, use copyToImage(framebuffer)')();\n    return null;\n  }\n\n  // copyToFramebuffer({width, height}) {\n  //   const scaleX = width / this.width;\n  //   const scaleY = height / this.height;\n  //   const scale = Math.min(scaleX, scaleY);\n  //   width = width * scale;\n  //   height = height * scale;\n  //   const scaledFramebuffer = new Framebuffer(this.gl, {width, height});\n  //   this.blit();\n  // }\n\n  // Copy a rectangle from a framebuffer attachment into a texture (at an offset)\n  // NOTE: assumes texture has enough storage allocated\n  // eslint-disable-next-line complexity\n  copyToTexture(opts = {}) {\n    log.error(\n      'Framebuffer.copyToTexture({...}) is no logner supported, use copyToTexture(source, target, opts})'\n    )();\n    return null;\n  }\n\n  // WEBGL2 INTERFACE\n\n  // Copies a rectangle of pixels between framebuffers\n  // eslint-disable-next-line complexity\n  blit(opts = {}) {\n    log.error('Framebuffer.blit({...}) is no logner supported, use blit(source, target, opts)')();\n    return null;\n  }\n\n  // signals to the GL that it need not preserve all pixels of a specified region of the framebuffer\n  invalidate({attachments = [], x = 0, y = 0, width, height}) {\n    const gl2 = assertWebGL2Context(this.gl);\n    const prevHandle = gl2.bindFramebuffer(GL.READ_FRAMEBUFFER, this.handle);\n    const invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;\n    if (invalidateAll) {\n      gl2.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments);\n    } else {\n      // TODO - why does type checking fail on this line\n      // @ts-ignore\n      gl2.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments, x, y, width, height);\n    }\n    // @ts-ignore\n    gl2.bindFramebuffer(GL.READ_FRAMEBUFFER, prevHandle);\n    return this;\n  }\n\n  // Return the value for `pname` of the specified attachment.\n  // The type returned is the type of the requested pname\n  getAttachmentParameter(attachment, pname, keys) {\n    let value = this._getAttachmentParameterFallback(pname);\n    if (value === null) {\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n      value = this.gl.getFramebufferAttachmentParameter(GL.FRAMEBUFFER, attachment, pname);\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, null);\n    }\n    if (keys && value > 1000) {\n      // @ts-ignore\n      value = getKey(this.gl, value);\n    }\n    return value;\n  }\n\n  getAttachmentParameters(\n    attachment = GL.COLOR_ATTACHMENT0,\n    keys,\n    // @ts-ignore\n    parameters = this.constructor.ATTACHMENT_PARAMETERS || []\n  ) {\n    const values = {};\n    for (const pname of parameters) {\n      const key = keys ? getKey(this.gl, pname) : pname;\n      values[key] = this.getAttachmentParameter(attachment, pname, keys);\n    }\n    return values;\n  }\n\n  getParameters(keys = true) {\n    const attachments = Object.keys(this.attachments);\n    // if (this === this.gl.luma.defaultFramebuffer) {\n    //   attachments = [GL.COLOR_ATTACHMENT0, GL.DEPTH_STENCIL_ATTACHMENT];\n    // }\n    const parameters = {};\n    for (const attachmentName of attachments) {\n      const attachment = Number(attachmentName);\n      const key = keys ? getKey(this.gl, attachment) : attachment;\n      parameters[key] = this.getAttachmentParameters(attachment, keys);\n    }\n    return parameters;\n  }\n\n  // DEBUG\n\n  // Note: Will only work when called in an event handler\n  show() {\n    if (typeof window !== 'undefined') {\n      window.open(copyToDataUrl(this), 'luma-debug-texture');\n    }\n    return this;\n  }\n\n  log(logLevel = 0, message = '') {\n    if (logLevel > log.level || typeof window === 'undefined') {\n      return this;\n    }\n    message = message || `Framebuffer ${this.id}`;\n    const image = copyToDataUrl(this, {targetMaxHeight: 100});\n    log.image({logLevel, message, image}, message)();\n    return this;\n  }\n\n  // WEBGL INTERFACE\n  bind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, this.handle);\n    return this;\n  }\n\n  unbind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, null);\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _createDefaultAttachments(color, depth, stencil, width, height) {\n    let defaultAttachments = null;\n\n    // Add a color buffer if requested and not supplied\n    if (color) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.COLOR_ATTACHMENT0] = new Texture2D(this.gl, {\n        id: `${this.id}-color0`,\n        pixels: null, // reserves texture memory, but texels are undefined\n        format: GL.RGBA,\n        type: GL.UNSIGNED_BYTE,\n        width,\n        height,\n        // Note: Mipmapping can be disabled by texture resource when we resize the texture\n        // to a non-power-of-two dimenstion (NPOT texture) under WebGL1. To have consistant\n        // behavior we always disable mipmaps.\n        mipmaps: false,\n        // Set MIN and MAG filtering parameters so mipmaps are not used in sampling.\n        // Use LINEAR so subpixel algos like fxaa work.\n        // Set WRAP modes that support NPOT textures too.\n        parameters: {\n          [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n        }\n      });\n      // track to delete later\n      this.ownResources.push(defaultAttachments[GL.COLOR_ATTACHMENT0]);\n    }\n\n    if (depth && stencil) {\n      // TODO - handle separate stencil\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_STENCIL_ATTACHMENT] = new Renderbuffer(this.gl, {\n        id: `${this.id}-depth-stencil`,\n        format: GL.DEPTH24_STENCIL8,\n        width,\n        height: 111\n      });\n      // track to delete later\n      this.ownResources.push(defaultAttachments[GL.DEPTH_STENCIL_ATTACHMENT]);\n      // TODO - optional texture\n      // new Texture2D(this.gl, {\n      //   id: `${this.id}-depth-stencil`,\n      //   format: GL.DEPTH24_STENCIL8,\n      //   dataFormat: GL.DEPTH_STENCIL,\n      //   type: GL.UNSIGNED_INT_24_8,\n      //   width,\n      //   height,\n      //   mipmaps: false\n      // });\n    } else if (depth) {\n      // Add a depth buffer if requested and not supplied\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_ATTACHMENT] = new Renderbuffer(this.gl, {\n        id: `${this.id}-depth`,\n        format: GL.DEPTH_COMPONENT16,\n        width,\n        height\n      });\n      // track to delete later\n      this.ownResources.push(defaultAttachments[GL.DEPTH_ATTACHMENT]);\n    } else if (stencil) {\n      // TODO - handle separate stencil\n      assert(false);\n    }\n\n    return defaultAttachments;\n  }\n\n  _unattach(attachment) {\n    const oldAttachment = this.attachments[attachment];\n    if (!oldAttachment) {\n      return;\n    }\n    if (oldAttachment instanceof Renderbuffer) {\n      // render buffer\n      this.gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, null);\n    } else {\n      // Must be a texture attachment\n      this.gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, null, 0);\n    }\n    delete this.attachments[attachment];\n  }\n\n  _attachRenderbuffer({attachment = GL.COLOR_ATTACHMENT0, renderbuffer}) {\n    const {gl} = this;\n    // TODO - is the bind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer.handle);\n    gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, renderbuffer.handle);\n    // TODO - is the unbind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n\n    this.attachments[attachment] = renderbuffer;\n  }\n\n  // layer = 0 - index into Texture2DArray and Texture3D or face for `TextureCubeMap`\n  // level = 0 - mipmapLevel (must be 0 in WebGL1)\n  _attachTexture({attachment = GL.COLOR_ATTACHMENT0, texture, layer, level}) {\n    const {gl} = this;\n    gl.bindTexture(texture.target, texture.handle);\n\n    switch (texture.target) {\n      case GL.TEXTURE_2D_ARRAY:\n      case GL.TEXTURE_3D:\n        const gl2 = assertWebGL2Context(gl);\n        gl2.framebufferTextureLayer(GL.FRAMEBUFFER, attachment, texture.target, level, layer);\n        break;\n\n      case GL.TEXTURE_CUBE_MAP:\n        // layer must be a cubemap face (or if index, converted to cube map face)\n        const face = mapIndexToCubeMapFace(layer);\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, face, texture.handle, level);\n        break;\n\n      case GL.TEXTURE_2D:\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, texture.handle, level);\n        break;\n\n      default:\n        assert(false, 'Illegal texture type');\n    }\n\n    gl.bindTexture(texture.target, null);\n    this.attachments[attachment] = texture;\n  }\n\n  // Expects framebuffer to be bound\n  _setReadBuffer(readBuffer) {\n    const gl2 = getWebGL2Context(this.gl);\n    if (gl2) {\n      gl2.readBuffer(readBuffer);\n    } else {\n      // Setting to color attachment 0 is a noop, so allow it in WebGL1\n      assert(\n        readBuffer === GL.COLOR_ATTACHMENT0 || readBuffer === GL.BACK,\n        ERR_MULTIPLE_RENDERTARGETS\n      );\n    }\n    this.readBuffer = readBuffer;\n  }\n\n  // Expects framebuffer to be bound\n  _setDrawBuffers(drawBuffers) {\n    const {gl} = this;\n    const gl2 = assertWebGL2Context(gl);\n    if (gl2) {\n      gl2.drawBuffers(drawBuffers);\n    } else {\n      // TODO - is this not handled by polyfills?\n      const ext = gl.getExtension('WEBGL_draw_buffers');\n      if (ext) {\n        ext.drawBuffersWEBGL(drawBuffers);\n      } else {\n        // Setting a single draw buffer to color attachment 0 is a noop, allow in WebGL1\n        assert(\n          drawBuffers.length === 1 &&\n            (drawBuffers[0] === GL.COLOR_ATTACHMENT0 || drawBuffers[0] === GL.BACK),\n          ERR_MULTIPLE_RENDERTARGETS\n        );\n      }\n    }\n    this.drawBuffers = drawBuffers;\n  }\n\n  // Attempt to provide workable defaults for WebGL2 symbols under WebGL1\n  // null means OK to query\n  // TODO - move to webgl1 polyfills\n  /* eslint-disable complexity */\n  _getAttachmentParameterFallback(pname) {\n    const caps = getFeatures(this.gl);\n\n    switch (pname) {\n      case GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: // GLint\n        return !caps.WEBGL2 ? 0 : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: // GLint\n        return !caps.WEBGL2 ? 8 : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: // GLenum\n        return !caps.WEBGL2 ? GL.UNSIGNED_INT : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:\n        return !caps.WEBGL2 && !caps.EXT_sRGB ? GL.LINEAR : null;\n      default:\n        return null;\n    }\n  }\n  /* eslint-enable complexity */\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createFramebuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteFramebuffer(this.handle);\n  }\n\n  _bindHandle(handle) {\n    return this.gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  }\n}\n\n// PUBLIC METHODS\n\n// Map an index to a cube map face constant\nfunction mapIndexToCubeMapFace(layer) {\n  // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)\n  // if smaller assume layer is index, otherwise assume it is already a cube map face constant\n  return layer < GL.TEXTURE_CUBE_MAP_POSITIVE_X ? layer + GL.TEXTURE_CUBE_MAP_POSITIVE_X : layer;\n}\n\n// Helper METHODS\n// Get a string describing the framebuffer error if installed\nfunction _getFrameBufferStatus(status) {\n  // Use error mapping if installed\n  // @ts-ignore\n  const STATUS = Framebuffer.STATUS || {};\n  return STATUS[status] || `Framebuffer error ${status}`;\n}\n\nexport const FRAMEBUFFER_ATTACHMENT_PARAMETERS = [\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, // WebGLRenderbuffer or WebGLTexture\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, // GL.RENDERBUFFER, GL.TEXTURE, GL.NONE\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, // GL.TEXTURE_CUBE_MAP_POSITIVE_X, etc.\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, // GLint\n  // EXT_sRGB or WebGL2\n  GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, // GL.LINEAR, GL.SRBG\n  // WebGL2\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE // GLint\n  // GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE\n  // GL.FLOAT, GL.INT, GL.UNSIGNED_INT, GL.SIGNED_NORMALIZED, OR GL.UNSIGNED_NORMALIZED.\n];\n\nFramebuffer.ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;\n"]},"metadata":{},"sourceType":"module"}