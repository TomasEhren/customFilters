{"ast":null,"code":"import _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nvar _DEFAULT_TEXTURE_PARA;\n\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { LayerExtension } from '@deck.gl/core';\nimport { Texture2D } from '@luma.gl/core';\nimport { patternShaders } from './shaders.glsl';\nvar defaultProps = {\n  fillPatternEnabled: true,\n  fillPatternAtlas: null,\n  fillPatternMapping: null,\n  fillPatternMask: true,\n  getFillPattern: {\n    type: 'accessor',\n    value: function value(d) {\n      return d.pattern;\n    }\n  },\n  getFillPatternScale: {\n    type: 'accessor',\n    value: 1\n  },\n  getFillPatternOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  }\n};\nvar DEFAULT_TEXTURE_PARAMETERS = (_DEFAULT_TEXTURE_PARA = {}, _defineProperty(_DEFAULT_TEXTURE_PARA, 10241, 9729), _defineProperty(_DEFAULT_TEXTURE_PARA, 10240, 9729), _defineProperty(_DEFAULT_TEXTURE_PARA, 10242, 33071), _defineProperty(_DEFAULT_TEXTURE_PARA, 10243, 33071), _DEFAULT_TEXTURE_PARA);\n\nvar FillStyleExtension = /*#__PURE__*/function (_LayerExtension) {\n  _inherits(FillStyleExtension, _LayerExtension);\n\n  var _super = _createSuper(FillStyleExtension);\n\n  function FillStyleExtension() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$pattern = _ref.pattern,\n        pattern = _ref$pattern === void 0 ? false : _ref$pattern;\n\n    _classCallCheck(this, FillStyleExtension);\n\n    return _super.call(this, {\n      pattern: pattern\n    });\n  }\n\n  _createClass(FillStyleExtension, [{\n    key: \"isEnabled\",\n    value: function isEnabled(layer) {\n      return layer.getAttributeManager() && !layer.state.pathTesselator;\n    }\n  }, {\n    key: \"getShaders\",\n    value: function getShaders(extension) {\n      if (!extension.isEnabled(this)) {\n        return null;\n      }\n\n      return {\n        modules: [extension.opts.pattern && patternShaders].filter(Boolean)\n      };\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState(context, extension) {\n      if (!extension.isEnabled(this)) {\n        return;\n      }\n\n      var attributeManager = this.getAttributeManager();\n\n      if (extension.opts.pattern) {\n        attributeManager.add({\n          fillPatternFrames: {\n            size: 4,\n            accessor: 'getFillPattern',\n            transform: extension.getPatternFrame.bind(this),\n            shaderAttributes: {\n              fillPatternFrames: {\n                divisor: 0\n              },\n              instanceFillPatternFrames: {\n                divisor: 1\n              }\n            }\n          },\n          fillPatternScales: {\n            size: 1,\n            accessor: 'getFillPatternScale',\n            defaultValue: 1,\n            shaderAttributes: {\n              fillPatternScales: {\n                divisor: 0\n              },\n              instanceFillPatternScales: {\n                divisor: 1\n              }\n            }\n          },\n          fillPatternOffsets: {\n            size: 2,\n            accessor: 'getFillPatternOffset',\n            shaderAttributes: {\n              fillPatternOffsets: {\n                divisor: 0\n              },\n              instanceFillPatternOffsets: {\n                divisor: 1\n              }\n            }\n          }\n        });\n      }\n\n      this.setState({\n        emptyTexture: new Texture2D(this.context.gl, {\n          data: new Uint8Array(4),\n          width: 1,\n          height: 1\n        })\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref2, extension) {\n      var props = _ref2.props,\n          oldProps = _ref2.oldProps;\n\n      if (!extension.isEnabled(this)) {\n        return;\n      }\n\n      if (props.fillPatternAtlas && props.fillPatternAtlas !== oldProps.fillPatternAtlas) {\n        extension.loadPatternAtlas.call(this, props);\n      }\n\n      if (props.fillPatternMapping && props.fillPatternMapping !== oldProps.fillPatternMapping) {\n        extension.loadPatternMapping.call(this, props);\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(params, extension) {\n      if (!extension.isEnabled(this)) {\n        return;\n      }\n\n      var patternTexture = this.state.patternTexture;\n      this.setModuleParameters({\n        fillPatternTexture: patternTexture || this.state.emptyTexture\n      });\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      var _this$state = this.state,\n          patternTexture = _this$state.patternTexture,\n          emptyTexture = _this$state.emptyTexture;\n      patternTexture === null || patternTexture === void 0 ? void 0 : patternTexture.delete();\n      emptyTexture === null || emptyTexture === void 0 ? void 0 : emptyTexture.delete();\n    }\n  }, {\n    key: \"loadPatternAtlas\",\n    value: function () {\n      var _loadPatternAtlas = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref3) {\n        var fillPatternAtlas, fetch, _this$state$patternTe, image, patternTexture;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                fillPatternAtlas = _ref3.fillPatternAtlas, fetch = _ref3.fetch;\n                (_this$state$patternTe = this.state.patternTexture) === null || _this$state$patternTe === void 0 ? void 0 : _this$state$patternTe.delete();\n                this.setState({\n                  patternTexture: null\n                });\n                image = fillPatternAtlas;\n\n                if (!(typeof image === 'string')) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 7;\n                return fetch(image, {\n                  propName: 'fillPatternAtlas',\n                  layer: this\n                });\n\n              case 7:\n                image = _context.sent;\n\n              case 8:\n                patternTexture = image instanceof Texture2D ? image : new Texture2D(this.context.gl, {\n                  data: image,\n                  parameters: DEFAULT_TEXTURE_PARAMETERS\n                });\n                this.setState({\n                  patternTexture: patternTexture\n                });\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function loadPatternAtlas(_x) {\n        return _loadPatternAtlas.apply(this, arguments);\n      }\n\n      return loadPatternAtlas;\n    }()\n  }, {\n    key: \"loadPatternMapping\",\n    value: function () {\n      var _loadPatternMapping = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref4) {\n        var fillPatternMapping, fetch, patternMapping;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                fillPatternMapping = _ref4.fillPatternMapping, fetch = _ref4.fetch;\n                this.setState({\n                  patternMapping: null\n                });\n                patternMapping = fillPatternMapping;\n\n                if (!(typeof patternMapping === 'string')) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.next = 6;\n                return fetch(patternMapping, {\n                  propName: 'fillPatternMapping',\n                  layer: this\n                });\n\n              case 6:\n                patternMapping = _context2.sent;\n\n              case 7:\n                this.setState({\n                  patternMapping: patternMapping\n                });\n                this.getAttributeManager().invalidate('getFillPattern');\n                this.setNeedsUpdate();\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadPatternMapping(_x2) {\n        return _loadPatternMapping.apply(this, arguments);\n      }\n\n      return loadPatternMapping;\n    }()\n  }, {\n    key: \"getPatternFrame\",\n    value: function getPatternFrame(name) {\n      var patternMapping = this.state.patternMapping;\n      var def = patternMapping && patternMapping[name];\n      return def ? [def.x, def.y, def.width, def.height] : [0, 0, 0, 0];\n    }\n  }]);\n\n  return FillStyleExtension;\n}(LayerExtension);\n\nexport { FillStyleExtension as default };\nFillStyleExtension.extensionName = 'FillStyleExtension';\nFillStyleExtension.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["LayerExtension","Texture2D","patternShaders","defaultProps","fillPatternEnabled","fillPatternAtlas","fillPatternMapping","fillPatternMask","getFillPattern","type","value","d","pattern","getFillPatternScale","getFillPatternOffset","DEFAULT_TEXTURE_PARAMETERS","FillStyleExtension","constructor","isEnabled","layer","getAttributeManager","state","pathTesselator","getShaders","extension","modules","opts","filter","Boolean","initializeState","context","attributeManager","add","fillPatternFrames","size","accessor","transform","getPatternFrame","bind","shaderAttributes","divisor","instanceFillPatternFrames","fillPatternScales","defaultValue","instanceFillPatternScales","fillPatternOffsets","instanceFillPatternOffsets","setState","emptyTexture","gl","data","Uint8Array","width","height","updateState","props","oldProps","loadPatternAtlas","call","loadPatternMapping","draw","params","patternTexture","setModuleParameters","fillPatternTexture","finalizeState","delete","fetch","image","propName","parameters","patternMapping","invalidate","setNeedsUpdate","name","def","x","y","extensionName"],"sources":["../../../src/fill-style/fill-style.js"],"sourcesContent":["import {LayerExtension} from '@deck.gl/core';\nimport {Texture2D} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nimport {patternShaders} from './shaders.glsl';\n\nconst defaultProps = {\n  fillPatternEnabled: true,\n  fillPatternAtlas: null,\n  fillPatternMapping: null,\n  fillPatternMask: true,\n  getFillPattern: {type: 'accessor', value: d => d.pattern},\n  getFillPatternScale: {type: 'accessor', value: 1},\n  getFillPatternOffset: {type: 'accessor', value: [0, 0]}\n};\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n  // GL.LINEAR is the default value but explicitly set it here\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  // for texture boundary artifact\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\nexport default class FillStyleExtension extends LayerExtension {\n  constructor({pattern = false} = {}) {\n    super({pattern});\n  }\n\n  isEnabled(layer) {\n    return layer.getAttributeManager() && !layer.state.pathTesselator;\n  }\n\n  getShaders(extension) {\n    if (!extension.isEnabled(this)) {\n      return null;\n    }\n\n    return {\n      modules: [extension.opts.pattern && patternShaders].filter(Boolean)\n    };\n  }\n\n  initializeState(context, extension) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (extension.opts.pattern) {\n      attributeManager.add({\n        fillPatternFrames: {\n          size: 4,\n          accessor: 'getFillPattern',\n          transform: extension.getPatternFrame.bind(this),\n          shaderAttributes: {\n            fillPatternFrames: {\n              divisor: 0\n            },\n            instanceFillPatternFrames: {\n              divisor: 1\n            }\n          }\n        },\n        fillPatternScales: {\n          size: 1,\n          accessor: 'getFillPatternScale',\n          defaultValue: 1,\n          shaderAttributes: {\n            fillPatternScales: {\n              divisor: 0\n            },\n            instanceFillPatternScales: {\n              divisor: 1\n            }\n          }\n        },\n        fillPatternOffsets: {\n          size: 2,\n          accessor: 'getFillPatternOffset',\n          shaderAttributes: {\n            fillPatternOffsets: {\n              divisor: 0\n            },\n            instanceFillPatternOffsets: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n    this.setState({\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState({props, oldProps}, extension) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    if (props.fillPatternAtlas && props.fillPatternAtlas !== oldProps.fillPatternAtlas) {\n      extension.loadPatternAtlas.call(this, props);\n    }\n    if (props.fillPatternMapping && props.fillPatternMapping !== oldProps.fillPatternMapping) {\n      extension.loadPatternMapping.call(this, props);\n    }\n  }\n\n  draw(params, extension) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    const {patternTexture} = this.state;\n    this.setModuleParameters({\n      fillPatternTexture: patternTexture || this.state.emptyTexture\n    });\n  }\n\n  finalizeState() {\n    const {patternTexture, emptyTexture} = this.state;\n    patternTexture?.delete();\n    emptyTexture?.delete();\n  }\n\n  async loadPatternAtlas({fillPatternAtlas, fetch}) {\n    this.state.patternTexture?.delete();\n    this.setState({patternTexture: null});\n    let image = fillPatternAtlas;\n    if (typeof image === 'string') {\n      image = await fetch(image, {propName: 'fillPatternAtlas', layer: this});\n    }\n    const patternTexture =\n      image instanceof Texture2D\n        ? image\n        : new Texture2D(this.context.gl, {\n            data: image,\n            parameters: DEFAULT_TEXTURE_PARAMETERS\n          });\n    this.setState({patternTexture});\n  }\n\n  async loadPatternMapping({fillPatternMapping, fetch}) {\n    this.setState({patternMapping: null});\n    let patternMapping = fillPatternMapping;\n    if (typeof patternMapping === 'string') {\n      patternMapping = await fetch(patternMapping, {\n        propName: 'fillPatternMapping',\n        layer: this\n      });\n    }\n    this.setState({patternMapping});\n    this.getAttributeManager().invalidate('getFillPattern');\n    this.setNeedsUpdate();\n  }\n\n  getPatternFrame(name) {\n    const {patternMapping} = this.state;\n    const def = patternMapping && patternMapping[name];\n    return def ? [def.x, def.y, def.width, def.height] : [0, 0, 0, 0];\n  }\n}\n\nFillStyleExtension.extensionName = 'FillStyleExtension';\nFillStyleExtension.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}