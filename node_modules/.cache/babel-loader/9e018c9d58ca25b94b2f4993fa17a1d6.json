{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getPassthroughFS } from '@luma.gl/shadertools';\nimport BufferTransform from './buffer-transform';\nimport TextureTransform from './texture-transform';\nimport { isWebGL2 } from '@luma.gl/gltools';\nimport { assert, isObjectEmpty, getShaderVersion } from '@luma.gl/webgl';\nimport Model from '../lib/model';\n\nvar Transform = /*#__PURE__*/function () {\n  function Transform(gl) {\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Transform);\n\n    this.gl = gl;\n    this.model = null;\n    this.elementCount = 0;\n    this.bufferTransform = null;\n    this.textureTransform = null;\n    this.elementIDBuffer = null;\n\n    this._initialize(props);\n\n    Object.seal(this);\n  }\n\n  _createClass(Transform, [{\n    key: \"delete\",\n    value: function _delete() {\n      var model = this.model,\n          bufferTransform = this.bufferTransform,\n          textureTransform = this.textureTransform;\n\n      if (model) {\n        model.delete();\n      }\n\n      if (bufferTransform) {\n        bufferTransform.delete();\n      }\n\n      if (textureTransform) {\n        textureTransform.delete();\n      }\n    }\n  }, {\n    key: \"run\",\n    value: function run() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _opts$clearRenderTarg = opts.clearRenderTarget,\n          clearRenderTarget = _opts$clearRenderTarg === void 0 ? true : _opts$clearRenderTarg;\n\n      var updatedOpts = this._updateDrawOptions(opts);\n\n      if (clearRenderTarget && updatedOpts.framebuffer) {\n        updatedOpts.framebuffer.clear({\n          color: true\n        });\n      }\n\n      this.model.transform(updatedOpts);\n    }\n  }, {\n    key: \"swap\",\n    value: function swap() {\n      var swapped = false;\n      var resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n\n      var _iterator = _createForOfIteratorHelper(resourceTransforms),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var resourceTransform = _step.value;\n          swapped = swapped || resourceTransform.swap();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      assert(swapped, 'Nothing to swap');\n    }\n  }, {\n    key: \"getBuffer\",\n    value: function getBuffer() {\n      var varyingName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      return this.bufferTransform && this.bufferTransform.getBuffer(varyingName);\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n\n      var _iterator2 = _createForOfIteratorHelper(resourceTransforms),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var resourceTransform = _step2.value;\n          var data = resourceTransform.getData(opts);\n\n          if (data) {\n            return data;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getFramebuffer\",\n    value: function getFramebuffer() {\n      return this.textureTransform && this.textureTransform.getFramebuffer();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if ('elementCount' in opts) {\n        this.model.setVertexCount(opts.elementCount);\n      }\n\n      var resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n\n      var _iterator3 = _createForOfIteratorHelper(resourceTransforms),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var resourceTransform = _step3.value;\n          resourceTransform.update(opts);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"_initialize\",\n    value: function _initialize() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var gl = this.gl;\n\n      this._buildResourceTransforms(gl, props);\n\n      props = this._updateModelProps(props);\n      this.model = new Model(gl, Object.assign({}, props, {\n        fs: props.fs || getPassthroughFS({\n          version: getShaderVersion(props.vs)\n        }),\n        id: props.id || 'transform-model',\n        drawMode: props.drawMode || 0,\n        vertexCount: props.elementCount\n      }));\n      this.bufferTransform && this.bufferTransform.setupResources({\n        model: this.model\n      });\n    }\n  }, {\n    key: \"_updateModelProps\",\n    value: function _updateModelProps(props) {\n      var updatedProps = Object.assign({}, props);\n      var resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n\n      var _iterator4 = _createForOfIteratorHelper(resourceTransforms),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var resourceTransform = _step4.value;\n          updatedProps = resourceTransform.updateModelProps(updatedProps);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return updatedProps;\n    }\n  }, {\n    key: \"_buildResourceTransforms\",\n    value: function _buildResourceTransforms(gl, props) {\n      if (canCreateBufferTransform(props)) {\n        this.bufferTransform = new BufferTransform(gl, props);\n      }\n\n      if (canCreateTextureTransform(props)) {\n        this.textureTransform = new TextureTransform(gl, props);\n      }\n\n      assert(this.bufferTransform || this.textureTransform, 'must provide source/feedback buffers or source/target textures');\n    }\n  }, {\n    key: \"_updateDrawOptions\",\n    value: function _updateDrawOptions(opts) {\n      var updatedOpts = Object.assign({}, opts);\n      var resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n\n      var _iterator5 = _createForOfIteratorHelper(resourceTransforms),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var resourceTransform = _step5.value;\n          updatedOpts = Object.assign(updatedOpts, resourceTransform.getDrawOptions(updatedOpts));\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      return updatedOpts;\n    }\n  }], [{\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      return isWebGL2(gl);\n    }\n  }]);\n\n  return Transform;\n}();\n\nexport { Transform as default };\n\nfunction canCreateBufferTransform(props) {\n  if (!isObjectEmpty(props.feedbackBuffers) || !isObjectEmpty(props.feedbackMap) || props.varyings && props.varyings.length > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction canCreateTextureTransform(props) {\n  if (!isObjectEmpty(props._sourceTextures) || props._targetTexture || props._targetTextureVarying) {\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"mappings":"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","names":["getPassthroughFS","BufferTransform","TextureTransform","isWebGL2","assert","isObjectEmpty","getShaderVersion","Model","Transform","constructor","gl","props","model","elementCount","bufferTransform","textureTransform","elementIDBuffer","_initialize","Object","seal","delete","run","opts","clearRenderTarget","updatedOpts","_updateDrawOptions","framebuffer","clear","color","transform","swap","swapped","resourceTransforms","filter","Boolean","resourceTransform","getBuffer","varyingName","getData","data","getFramebuffer","update","setVertexCount","_buildResourceTransforms","_updateModelProps","assign","fs","version","vs","id","drawMode","vertexCount","setupResources","updatedProps","updateModelProps","canCreateBufferTransform","canCreateTextureTransform","getDrawOptions","feedbackBuffers","feedbackMap","varyings","length","_sourceTextures","_targetTexture","_targetTextureVarying"],"sources":["../../../src/transform/transform.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {getPassthroughFS} from '@luma.gl/shadertools';\nimport BufferTransform from './buffer-transform';\nimport TextureTransform from './texture-transform';\n\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {assert, isObjectEmpty, getShaderVersion} from '@luma.gl/webgl';\nimport Model from '../lib/model';\n\n// takes source and target buffers/textures and setsup the pipeline\nexport default class Transform {\n  static isSupported(gl) {\n    // TODO : differentiate writting to buffer vs not\n    return isWebGL2(gl);\n  }\n\n  constructor(gl, props = {}) {\n    this.gl = gl;\n    this.model = null;\n    this.elementCount = 0;\n    this.bufferTransform = null;\n    this.textureTransform = null;\n    this.elementIDBuffer = null;\n    this._initialize(props);\n    Object.seal(this);\n  }\n\n  // Delete owned resources.\n  delete() {\n    const {model, bufferTransform, textureTransform} = this;\n    if (model) {\n      model.delete();\n    }\n    if (bufferTransform) {\n      bufferTransform.delete();\n    }\n    if (textureTransform) {\n      textureTransform.delete();\n    }\n  }\n\n  // Run one transform loop.\n  run(opts = {}) {\n    const {clearRenderTarget = true} = opts;\n\n    const updatedOpts = this._updateDrawOptions(opts);\n\n    if (clearRenderTarget && updatedOpts.framebuffer) {\n      updatedOpts.framebuffer.clear({color: true});\n    }\n\n    this.model.transform(updatedOpts);\n  }\n\n  // swap resources if a map is provided\n  swap() {\n    let swapped = false;\n    const resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n    for (const resourceTransform of resourceTransforms) {\n      swapped = swapped || resourceTransform.swap();\n    }\n    assert(swapped, 'Nothing to swap');\n  }\n\n  // Return Buffer object for given varying name.\n  getBuffer(varyingName = null) {\n    return this.bufferTransform && this.bufferTransform.getBuffer(varyingName);\n  }\n\n  // Return data either from Buffer or from Texture\n  getData(opts = {}) {\n    const resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n    for (const resourceTransform of resourceTransforms) {\n      // @ts-ignore\n      const data = resourceTransform.getData(opts);\n      if (data) {\n        return data;\n      }\n    }\n    return null;\n  }\n\n  // Return framebuffer object if rendering to textures\n  getFramebuffer() {\n    return this.textureTransform && this.textureTransform.getFramebuffer();\n  }\n\n  // Update some or all buffer/texture bindings.\n  update(opts = {}) {\n    if ('elementCount' in opts) {\n      // @ts-ignore TODO\n      this.model.setVertexCount(opts.elementCount);\n    }\n    const resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n    for (const resourceTransform of resourceTransforms) {\n      resourceTransform.update(opts);\n    }\n  }\n\n  // Private\n\n  _initialize(props = {}) {\n    const {gl} = this;\n    this._buildResourceTransforms(gl, props);\n\n    props = this._updateModelProps(props);\n    this.model = new Model(\n      gl,\n      Object.assign({}, props, {\n        fs: props.fs || getPassthroughFS({version: getShaderVersion(props.vs)}),\n        id: props.id || 'transform-model',\n        drawMode: props.drawMode || GL.POINTS,\n        vertexCount: props.elementCount\n      })\n    );\n\n    /* eslint-disable no-unused-expressions */\n    this.bufferTransform && this.bufferTransform.setupResources({model: this.model});\n    /* eslint-enable no-unused-expressions */\n  }\n\n  _updateModelProps(props) {\n    let updatedProps = Object.assign({}, props);\n    const resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n    for (const resourceTransform of resourceTransforms) {\n      updatedProps = resourceTransform.updateModelProps(updatedProps);\n    }\n    return updatedProps;\n  }\n\n  _buildResourceTransforms(gl, props) {\n    if (canCreateBufferTransform(props)) {\n      this.bufferTransform = new BufferTransform(gl, props);\n    }\n    if (canCreateTextureTransform(props)) {\n      this.textureTransform = new TextureTransform(gl, props);\n    }\n    assert(\n      this.bufferTransform || this.textureTransform,\n      'must provide source/feedback buffers or source/target textures'\n    );\n  }\n\n  _updateDrawOptions(opts) {\n    let updatedOpts = Object.assign({}, opts);\n    const resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n    for (const resourceTransform of resourceTransforms) {\n      updatedOpts = Object.assign(updatedOpts, resourceTransform.getDrawOptions(updatedOpts));\n    }\n    return updatedOpts;\n  }\n}\n\n// Helper Methods\n\nfunction canCreateBufferTransform(props) {\n  if (\n    !isObjectEmpty(props.feedbackBuffers) ||\n    !isObjectEmpty(props.feedbackMap) ||\n    (props.varyings && props.varyings.length > 0)\n  ) {\n    return true;\n  }\n  return false;\n}\n\nfunction canCreateTextureTransform(props) {\n  if (\n    !isObjectEmpty(props._sourceTextures) ||\n    props._targetTexture ||\n    props._targetTextureVarying\n  ) {\n    return true;\n  }\n\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}