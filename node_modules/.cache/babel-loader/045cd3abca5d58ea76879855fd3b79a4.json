{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { copyStringToDataView } from '@loaders.gl/loader-utils';\nimport { MAGIC_ARRAY } from '../constants';\nimport { encode3DTileHeader, encode3DTileByteLength } from './helpers/encode-3d-tile-header';\nexport function encodeInstancedModel3DTile(tile, dataView, byteOffset, options) {\n  var _tile = tile,\n      _tile$featuresLength = _tile.featuresLength,\n      featuresLength = _tile$featuresLength === void 0 ? 1 : _tile$featuresLength,\n      _tile$gltfFormat = _tile.gltfFormat,\n      gltfFormat = _tile$gltfFormat === void 0 ? 1 : _tile$gltfFormat,\n      _tile$gltfUri = _tile.gltfUri,\n      gltfUri = _tile$gltfUri === void 0 ? '' : _tile$gltfUri;\n  var gltfUriByteLength = gltfUri.length;\n  var featureTableJson = {\n    INSTANCES_LENGTH: featuresLength,\n    POSITION: new Array(featuresLength * 3).fill(0)\n  };\n  var featureTableJsonString = JSON.stringify(featureTableJson);\n  var featureTableJsonByteLength = featureTableJsonString.length;\n  tile = _objectSpread({\n    magic: MAGIC_ARRAY.INSTANCED_MODEL\n  }, tile);\n  var byteOffsetStart = byteOffset;\n  byteOffset = encode3DTileHeader(tile, dataView, 0);\n\n  if (dataView) {\n    dataView.setUint32(12, featureTableJsonByteLength, true);\n    dataView.setUint32(16, 0, true);\n    dataView.setUint32(20, 0, true);\n    dataView.setUint32(24, 0, true);\n    dataView.setUint32(28, gltfFormat, true);\n  }\n\n  byteOffset += 20;\n  byteOffset += copyStringToDataView(dataView, byteOffset, featureTableJsonString, featureTableJsonByteLength);\n  byteOffset += copyStringToDataView(dataView, byteOffset, gltfUri, gltfUriByteLength);\n  encode3DTileByteLength(dataView, byteOffsetStart, byteOffset - byteOffsetStart);\n  return byteOffset;\n}","map":{"version":3,"mappings":";AAGA,SAAQA,oBAAR,QAAmC,0BAAnC;AACA,SAAQC,WAAR,QAA0B,cAA1B;AACA,SAAQC,kBAAR,EAA4BC,sBAA5B,QAAyD,iCAAzD;AAIA,OAAO,SAASC,0BAAT,CAAoCC,IAApC,EAA0CC,QAA1C,EAAoDC,UAApD,EAAgEC,OAAhE,EAAyE;EAC9E,YAA2DH,IAA3D;EAAA,iCAAOI,cAAP;EAAA,IAAOA,cAAP,qCAAwB,CAAxB;EAAA,6BAA2BC,UAA3B;EAAA,IAA2BA,UAA3B,iCAAwC,CAAxC;EAAA,0BAA2CC,OAA3C;EAAA,IAA2CA,OAA3C,8BAAqD,EAArD;EAEA,IAAMC,iBAAiB,GAAGD,OAAO,CAACE,MAAlC;EAEA,IAAMC,gBAAgB,GAAG;IACvBC,gBAAgB,EAAEN,cADK;IAEvBO,QAAQ,EAAE,IAAIC,KAAJ,CAAUR,cAAc,GAAG,CAA3B,EAA8BS,IAA9B,CAAmC,CAAnC;EAFa,CAAzB;EAIA,IAAMC,sBAAsB,GAAGC,IAAI,CAACC,SAALD,CAAeN,gBAAfM,CAA/B;EACA,IAAME,0BAA0B,GAAGH,sBAAsB,CAACN,MAA1D;EAGAR,IAAI;IAAIkB,KAAK,EAAEtB,WAAW,CAACuB;EAAvB,GAA2CnB,IAA3C,CAAJA;EAEA,IAAMoB,eAAe,GAAGlB,UAAxB;EAEAA,UAAU,GAAGL,kBAAkB,CAACG,IAAD,EAAOC,QAAP,EAAiB,CAAjB,CAA/BC;;EAEA,IAAID,QAAJ,EAAc;IACZA,QAAQ,CAACoB,SAATpB,CAAmB,EAAnBA,EAAuBgB,0BAAvBhB,EAAmD,IAAnDA;IACAA,QAAQ,CAACoB,SAATpB,CAAmB,EAAnBA,EAAuB,CAAvBA,EAA0B,IAA1BA;IACAA,QAAQ,CAACoB,SAATpB,CAAmB,EAAnBA,EAAuB,CAAvBA,EAA0B,IAA1BA;IACAA,QAAQ,CAACoB,SAATpB,CAAmB,EAAnBA,EAAuB,CAAvBA,EAA0B,IAA1BA;IACAA,QAAQ,CAACoB,SAATpB,CAAmB,EAAnBA,EAAuBI,UAAvBJ,EAAmC,IAAnCA;EACD;;EAEDC,UAAU,IAAI,EAAdA;EAEAA,UAAU,IAAIP,oBAAoB,CAChCM,QADgC,EAEhCC,UAFgC,EAGhCY,sBAHgC,EAIhCG,0BAJgC,CAAlCf;EAMAA,UAAU,IAAIP,oBAAoB,CAACM,QAAD,EAAWC,UAAX,EAAuBI,OAAvB,EAAgCC,iBAAhC,CAAlCL;EAGAJ,sBAAsB,CAACG,QAAD,EAAWmB,eAAX,EAA4BlB,UAAU,GAAGkB,eAAzC,CAAtBtB;EAEA,OAAOI,UAAP;AACD","names":["copyStringToDataView","MAGIC_ARRAY","encode3DTileHeader","encode3DTileByteLength","encodeInstancedModel3DTile","tile","dataView","byteOffset","options","featuresLength","gltfFormat","gltfUri","gltfUriByteLength","length","featureTableJson","INSTANCES_LENGTH","POSITION","Array","fill","featureTableJsonString","JSON","stringify","featureTableJsonByteLength","magic","INSTANCED_MODEL","byteOffsetStart","setUint32"],"sources":["../../../../src/lib/encoders/encode-3d-tile-instanced-model.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {copyStringToDataView} from '@loaders.gl/loader-utils';\nimport {MAGIC_ARRAY} from '../constants';\nimport {encode3DTileHeader, encode3DTileByteLength} from './helpers/encode-3d-tile-header';\n\n// Procedurally encode the tile array buffer for testing purposes\n// eslint-disable-next-line max-statements\nexport function encodeInstancedModel3DTile(tile, dataView, byteOffset, options) {\n  const {featuresLength = 1, gltfFormat = 1, gltfUri = ''} = tile;\n\n  const gltfUriByteLength = gltfUri.length;\n\n  const featureTableJson = {\n    INSTANCES_LENGTH: featuresLength,\n    POSITION: new Array(featuresLength * 3).fill(0)\n  };\n  const featureTableJsonString = JSON.stringify(featureTableJson);\n  const featureTableJsonByteLength = featureTableJsonString.length;\n\n  // Add default magic for this tile type\n  tile = {magic: MAGIC_ARRAY.INSTANCED_MODEL, ...tile};\n\n  const byteOffsetStart = byteOffset;\n\n  byteOffset = encode3DTileHeader(tile, dataView, 0);\n\n  if (dataView) {\n    dataView.setUint32(12, featureTableJsonByteLength, true); // featureTableJsonByteLength\n    dataView.setUint32(16, 0, true); // featureTableBinaryByteLength\n    dataView.setUint32(20, 0, true); // batchTableJsonByteLength\n    dataView.setUint32(24, 0, true); // batchTableBinaryByteLength\n    dataView.setUint32(28, gltfFormat, true); // gltfFormat\n  }\n\n  byteOffset += 20;\n\n  byteOffset += copyStringToDataView(\n    dataView,\n    byteOffset,\n    featureTableJsonString,\n    featureTableJsonByteLength\n  );\n  byteOffset += copyStringToDataView(dataView, byteOffset, gltfUri, gltfUriByteLength);\n\n  // Go \"back\" and rewrite the tile's `byteLength` now that we know the value\n  encode3DTileByteLength(dataView, byteOffsetStart, byteOffset - byteOffsetStart);\n\n  return byteOffset;\n}\n"]},"metadata":{},"sourceType":"module"}