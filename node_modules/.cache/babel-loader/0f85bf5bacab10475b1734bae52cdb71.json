{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { Vector3 } from '@math.gl/core';\nimport { GL } from '../constants';\nimport { assert } from '../utils/assert';\nimport { makePrimitiveIterator } from '../iterators/primitive-iterator';\nimport { getPrimitiveModeType } from '../primitives/modes';\nimport { getPositions } from './get-attribute-from-geometry';\nexport function computeVertexNormals(geometry) {\n  assert(getPrimitiveModeType(geometry.mode) === GL.TRIANGLES, 'TRIANGLES required');\n\n  var _getPositions = getPositions(geometry),\n      positions = _getPositions.values;\n\n  var normals = new Float32Array(positions.length);\n  var vectorA = new Vector3();\n  var vectorB = new Vector3();\n  var vectorC = new Vector3();\n  var vectorCB = new Vector3();\n  var vectorAB = new Vector3();\n\n  var _iterator = _createForOfIteratorHelper(makePrimitiveIterator(geometry)),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var primitive = _step.value;\n      vectorA.fromArray(positions, primitive.i1 * 3);\n      vectorB.fromArray(positions, primitive.i2 * 3 + 3);\n      vectorC.fromArray(positions, primitive.i3 * 3 + 6);\n      vectorCB.subVectors(vectorC, vectorB);\n      vectorAB.subVectors(vectorA, vectorB);\n      var normal = vectorCB.cross(vectorAB);\n      normal.normalize();\n      var primitiveIndex = primitive.primitiveIndex;\n      normals[primitiveIndex * 9 + 0] = normal.x;\n      normals[primitiveIndex * 9 + 1] = normal.y;\n      normals[primitiveIndex * 9 + 2] = normal.z;\n      normals[primitiveIndex * 9 + 3] = normal.x;\n      normals[primitiveIndex * 9 + 4] = normal.y;\n      normals[primitiveIndex * 9 + 5] = normal.z;\n      normals[primitiveIndex * 9 + 6] = normal.x;\n      normals[primitiveIndex * 9 + 7] = normal.y;\n      normals[primitiveIndex * 9 + 8] = normal.z;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return normals;\n}","map":{"version":3,"mappings":";AACA,SAAQA,OAAR,QAAsB,eAAtB;AACA,SAAQC,EAAR,QAAiB,cAAjB;AACA,SAAQC,MAAR,QAAqB,iBAArB;AACA,SAAQC,qBAAR,QAAoC,iCAApC;AACA,SAAQC,oBAAR,QAAmC,qBAAnC;AACA,SAAQC,YAAR,QAA2B,+BAA3B;AAaA,OAAO,SAASC,oBAAT,CAA8BC,QAA9B,EAAgE;EAErEL,MAAM,CAACE,oBAAoB,CAACG,QAAQ,CAACC,IAAV,CAApBJ,KAAwCH,EAAE,CAACQ,SAA5C,EAAuD,oBAAvD,CAANP;;EAEA,oBAA4BG,YAAY,CAACE,QAAD,CAAxC;EAAA,IAAeG,SAAf,iBAAOC,MAAP;;EAEA,IAAMC,OAAO,GAAG,IAAIC,YAAJ,CAAiBH,SAAS,CAACI,MAA3B,CAAhB;EAEA,IAAMC,OAAO,GAAG,IAAIf,OAAJ,EAAhB;EACA,IAAMgB,OAAO,GAAG,IAAIhB,OAAJ,EAAhB;EACA,IAAMiB,OAAO,GAAG,IAAIjB,OAAJ,EAAhB;EAEA,IAAMkB,QAAQ,GAAG,IAAIlB,OAAJ,EAAjB;EACA,IAAMmB,QAAQ,GAAG,IAAInB,OAAJ,EAAjB;;EAbqE,2CAe7CG,qBAAqB,CAACI,QAAD,CAfwB;EAAA;;EAAA;IAerE,oDAAyD;MAAA,IAA9Ca,SAA8C;MACvDL,OAAO,CAACM,SAARN,CAAkBL,SAAlBK,EAA6BK,SAAS,CAACE,EAAVF,GAAe,CAA5CL;MACAC,OAAO,CAACK,SAARL,CAAkBN,SAAlBM,EAA6BI,SAAS,CAACG,EAAVH,GAAe,CAAfA,GAAmB,CAAhDJ;MACAC,OAAO,CAACI,SAARJ,CAAkBP,SAAlBO,EAA6BG,SAAS,CAACI,EAAVJ,GAAe,CAAfA,GAAmB,CAAhDH;MAEAC,QAAQ,CAACO,UAATP,CAAoBD,OAApBC,EAA6BF,OAA7BE;MACAC,QAAQ,CAACM,UAATN,CAAoBJ,OAApBI,EAA6BH,OAA7BG;MACA,IAAMO,MAAM,GAAGR,QAAQ,CAACS,KAATT,CAAeC,QAAfD,CAAf;MACAQ,MAAM,CAACE,SAAPF;MAEA,IAAOG,cAAP,GAAyBT,SAAzB,CAAOS,cAAP;MAEAjB,OAAO,CAACiB,cAAc,GAAG,CAAjBA,GAAqB,CAAtB,CAAPjB,GAAkCc,MAAM,CAACI,CAAzClB;MACAA,OAAO,CAACiB,cAAc,GAAG,CAAjBA,GAAqB,CAAtB,CAAPjB,GAAkCc,MAAM,CAACK,CAAzCnB;MACAA,OAAO,CAACiB,cAAc,GAAG,CAAjBA,GAAqB,CAAtB,CAAPjB,GAAkCc,MAAM,CAACM,CAAzCpB;MAEAA,OAAO,CAACiB,cAAc,GAAG,CAAjBA,GAAqB,CAAtB,CAAPjB,GAAkCc,MAAM,CAACI,CAAzClB;MACAA,OAAO,CAACiB,cAAc,GAAG,CAAjBA,GAAqB,CAAtB,CAAPjB,GAAkCc,MAAM,CAACK,CAAzCnB;MACAA,OAAO,CAACiB,cAAc,GAAG,CAAjBA,GAAqB,CAAtB,CAAPjB,GAAkCc,MAAM,CAACM,CAAzCpB;MAEAA,OAAO,CAACiB,cAAc,GAAG,CAAjBA,GAAqB,CAAtB,CAAPjB,GAAkCc,MAAM,CAACI,CAAzClB;MACAA,OAAO,CAACiB,cAAc,GAAG,CAAjBA,GAAqB,CAAtB,CAAPjB,GAAkCc,MAAM,CAACK,CAAzCnB;MACAA,OAAO,CAACiB,cAAc,GAAG,CAAjBA,GAAqB,CAAtB,CAAPjB,GAAkCc,MAAM,CAACM,CAAzCpB;IACD;EAtCoE;IAAA;EAAA;IAAA;EAAA;;EAwCrE,OAAOA,OAAP;AACD","names":["Vector3","GL","assert","makePrimitiveIterator","getPrimitiveModeType","getPositions","computeVertexNormals","geometry","mode","TRIANGLES","positions","values","normals","Float32Array","length","vectorA","vectorB","vectorC","vectorCB","vectorAB","primitive","fromArray","i1","i2","i3","subVectors","normal","cross","normalize","primitiveIndex","x","y","z"],"sources":["../../../../src/geometry/attributes/compute-vertex-normals.ts"],"sourcesContent":["import type {TypedArray} from '../types';\nimport {Vector3} from '@math.gl/core';\nimport {GL} from '../constants';\nimport {assert} from '../utils/assert';\nimport {makePrimitiveIterator} from '../iterators/primitive-iterator';\nimport {getPrimitiveModeType} from '../primitives/modes';\nimport {getPositions} from './get-attribute-from-geometry';\n\ntype Geometry = {\n  mode: any;\n  indices?: {size: number; values: TypedArray};\n  attributes?: {};\n};\n/**\n * Computes vertex normals for a geometry\n * @param param0\n * @returns\n */\n// eslint-disable-next-line max-statements\nexport function computeVertexNormals(geometry: Geometry): Float32Array {\n  // Only support GL.TRIANGLES, GL.TRIANGLE_STRIP, GL.TRIANGLE_FAN\n  assert(getPrimitiveModeType(geometry.mode) === GL.TRIANGLES, 'TRIANGLES required');\n\n  const {values: positions} = getPositions(geometry);\n\n  const normals = new Float32Array(positions.length);\n\n  const vectorA = new Vector3();\n  const vectorB = new Vector3();\n  const vectorC = new Vector3();\n\n  const vectorCB = new Vector3();\n  const vectorAB = new Vector3();\n\n  for (const primitive of makePrimitiveIterator(geometry)) {\n    vectorA.fromArray(positions, primitive.i1 * 3);\n    vectorB.fromArray(positions, primitive.i2 * 3 + 3);\n    vectorC.fromArray(positions, primitive.i3 * 3 + 6);\n\n    vectorCB.subVectors(vectorC, vectorB);\n    vectorAB.subVectors(vectorA, vectorB);\n    const normal = vectorCB.cross(vectorAB);\n    normal.normalize();\n    // @ts-ignore\n    const {primitiveIndex} = primitive;\n\n    normals[primitiveIndex * 9 + 0] = normal.x;\n    normals[primitiveIndex * 9 + 1] = normal.y;\n    normals[primitiveIndex * 9 + 2] = normal.z;\n\n    normals[primitiveIndex * 9 + 3] = normal.x;\n    normals[primitiveIndex * 9 + 4] = normal.y;\n    normals[primitiveIndex * 9 + 5] = normal.z;\n\n    normals[primitiveIndex * 9 + 6] = normal.x;\n    normals[primitiveIndex * 9 + 7] = normal.y;\n    normals[primitiveIndex * 9 + 8] = normal.z;\n  }\n\n  return normals;\n}\n"]},"metadata":{},"sourceType":"module"}