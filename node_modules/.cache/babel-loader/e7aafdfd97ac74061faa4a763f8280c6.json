{"ast":null,"code":"import * as Polygon from './polygon';\nimport { Tesselator } from '@deck.gl/core';\nimport { cutPolygonByGrid, cutPolygonByMercatorBounds } from '@math.gl/polygon';\nexport default class PolygonTesselator extends Tesselator {\n  constructor(opts) {\n    const {\n      fp64,\n      IndexType = Uint32Array\n    } = opts;\n    super({ ...opts,\n      attributes: {\n        positions: {\n          size: 3,\n          type: fp64 ? Float64Array : Float32Array\n        },\n        vertexValid: {\n          type: Uint8ClampedArray,\n          size: 1\n        },\n        indices: {\n          type: IndexType,\n          size: 1\n        }\n      }\n    });\n  }\n\n  get(attributeName) {\n    const {\n      attributes\n    } = this;\n\n    if (attributeName === 'indices') {\n      return attributes.indices && attributes.indices.subarray(0, this.vertexCount);\n    }\n\n    return attributes[attributeName];\n  }\n\n  updateGeometry(opts) {\n    super.updateGeometry(opts);\n    const externalIndices = this.buffers.indices;\n\n    if (externalIndices) {\n      this.vertexCount = (externalIndices.value || externalIndices).length;\n    }\n  }\n\n  normalizeGeometry(polygon) {\n    if (this.normalize) {\n      polygon = Polygon.normalize(polygon, this.positionSize);\n\n      if (this.opts.resolution) {\n        return cutPolygonByGrid(polygon.positions || polygon, polygon.holeIndices, {\n          size: this.positionSize,\n          gridResolution: this.opts.resolution,\n          edgeTypes: true\n        });\n      }\n\n      if (this.opts.wrapLongitude) {\n        return cutPolygonByMercatorBounds(polygon.positions || polygon, polygon.holeIndices, {\n          size: this.positionSize,\n          maxLatitude: 86,\n          edgeTypes: true\n        });\n      }\n    }\n\n    return polygon;\n  }\n\n  getGeometrySize(polygon) {\n    if (Array.isArray(polygon) && !Number.isFinite(polygon[0])) {\n      let size = 0;\n\n      for (const subPolygon of polygon) {\n        size += this.getGeometrySize(subPolygon);\n      }\n\n      return size;\n    }\n\n    return (polygon.positions || polygon).length / this.positionSize;\n  }\n\n  getGeometryFromBuffer(buffer) {\n    if (this.normalize || !this.buffers.indices) {\n      return super.getGeometryFromBuffer(buffer);\n    }\n\n    return () => null;\n  }\n\n  updateGeometryAttributes(polygon, context) {\n    if (Array.isArray(polygon) && !Number.isFinite(polygon[0])) {\n      for (const subPolygon of polygon) {\n        const geometrySize = this.getGeometrySize(subPolygon);\n        context.geometrySize = geometrySize;\n        this.updateGeometryAttributes(subPolygon, context);\n        context.vertexStart += geometrySize;\n        context.indexStart = this.indexStarts[context.geometryIndex + 1];\n      }\n    } else {\n      this._updateIndices(polygon, context);\n\n      this._updatePositions(polygon, context);\n\n      this._updateVertexValid(polygon, context);\n    }\n  }\n\n  _updateIndices(polygon, _ref) {\n    let {\n      geometryIndex,\n      vertexStart: offset,\n      indexStart\n    } = _ref;\n    const {\n      attributes,\n      indexStarts,\n      typedArrayManager\n    } = this;\n    let target = attributes.indices;\n\n    if (!target) {\n      return;\n    }\n\n    let i = indexStart;\n    const indices = Polygon.getSurfaceIndices(polygon, this.positionSize, this.opts.preproject);\n    target = typedArrayManager.allocate(target, indexStart + indices.length, {\n      copy: true\n    });\n\n    for (let j = 0; j < indices.length; j++) {\n      target[i++] = indices[j] + offset;\n    }\n\n    indexStarts[geometryIndex + 1] = indexStart + indices.length;\n    attributes.indices = target;\n  }\n\n  _updatePositions(polygon, _ref2) {\n    let {\n      vertexStart,\n      geometrySize\n    } = _ref2;\n    const {\n      attributes: {\n        positions\n      },\n      positionSize\n    } = this;\n\n    if (!positions) {\n      return;\n    }\n\n    const polygonPositions = polygon.positions || polygon;\n\n    for (let i = vertexStart, j = 0; j < geometrySize; i++, j++) {\n      const x = polygonPositions[j * positionSize];\n      const y = polygonPositions[j * positionSize + 1];\n      const z = positionSize > 2 ? polygonPositions[j * positionSize + 2] : 0;\n      positions[i * 3] = x;\n      positions[i * 3 + 1] = y;\n      positions[i * 3 + 2] = z;\n    }\n  }\n\n  _updateVertexValid(polygon, _ref3) {\n    let {\n      vertexStart,\n      geometrySize\n    } = _ref3;\n    const {\n      attributes: {\n        vertexValid\n      },\n      positionSize\n    } = this;\n    const holeIndices = polygon && polygon.holeIndices;\n\n    if (polygon && polygon.edgeTypes) {\n      vertexValid.set(polygon.edgeTypes, vertexStart);\n    } else {\n      vertexValid.fill(1, vertexStart, vertexStart + geometrySize);\n    }\n\n    if (holeIndices) {\n      for (let j = 0; j < holeIndices.length; j++) {\n        vertexValid[vertexStart + holeIndices[j] / positionSize - 1] = 0;\n      }\n    }\n\n    vertexValid[vertexStart + geometrySize - 1] = 0;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Polygon","Tesselator","cutPolygonByGrid","cutPolygonByMercatorBounds","PolygonTesselator","constructor","opts","fp64","IndexType","Uint32Array","attributes","positions","size","type","Float64Array","Float32Array","vertexValid","Uint8ClampedArray","indices","get","attributeName","subarray","vertexCount","updateGeometry","externalIndices","buffers","value","length","normalizeGeometry","polygon","normalize","positionSize","resolution","holeIndices","gridResolution","edgeTypes","wrapLongitude","maxLatitude","getGeometrySize","Array","isArray","Number","isFinite","subPolygon","getGeometryFromBuffer","buffer","updateGeometryAttributes","context","geometrySize","vertexStart","indexStart","indexStarts","geometryIndex","_updateIndices","_updatePositions","_updateVertexValid","offset","typedArrayManager","target","i","getSurfaceIndices","preproject","allocate","copy","j","polygonPositions","x","y","z","set","fill"],"sources":["../../../src/solid-polygon-layer/polygon-tesselator.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Handles tesselation of polygons with holes\n// - 2D surfaces\n// - 2D outlines\n// - 3D surfaces (top and sides only)\n// - 3D wireframes (not yet)\nimport * as Polygon from './polygon';\nimport {Tesselator} from '@deck.gl/core';\nimport {cutPolygonByGrid, cutPolygonByMercatorBounds} from '@math.gl/polygon';\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PolygonTesselator extends Tesselator {\n  constructor(opts) {\n    const {fp64, IndexType = Uint32Array} = opts;\n    super({\n      ...opts,\n      attributes: {\n        positions: {size: 3, type: fp64 ? Float64Array : Float32Array},\n        vertexValid: {type: Uint8ClampedArray, size: 1},\n        indices: {type: IndexType, size: 1}\n      }\n    });\n  }\n\n  /* Getters */\n  get(attributeName) {\n    const {attributes} = this;\n    if (attributeName === 'indices') {\n      return attributes.indices && attributes.indices.subarray(0, this.vertexCount);\n    }\n\n    return attributes[attributeName];\n  }\n\n  /* Implement base Tesselator interface */\n  updateGeometry(opts) {\n    super.updateGeometry(opts);\n\n    const externalIndices = this.buffers.indices;\n    if (externalIndices) {\n      this.vertexCount = (externalIndices.value || externalIndices).length;\n    }\n  }\n\n  normalizeGeometry(polygon) {\n    if (this.normalize) {\n      polygon = Polygon.normalize(polygon, this.positionSize);\n      if (this.opts.resolution) {\n        return cutPolygonByGrid(polygon.positions || polygon, polygon.holeIndices, {\n          size: this.positionSize,\n          gridResolution: this.opts.resolution,\n          edgeTypes: true\n        });\n      }\n      if (this.opts.wrapLongitude) {\n        return cutPolygonByMercatorBounds(polygon.positions || polygon, polygon.holeIndices, {\n          size: this.positionSize,\n          maxLatitude: 86,\n          edgeTypes: true\n        });\n      }\n    }\n    return polygon;\n  }\n\n  getGeometrySize(polygon) {\n    if (Array.isArray(polygon) && !Number.isFinite(polygon[0])) {\n      let size = 0;\n      for (const subPolygon of polygon) {\n        size += this.getGeometrySize(subPolygon);\n      }\n      return size;\n    }\n    return (polygon.positions || polygon).length / this.positionSize;\n  }\n\n  getGeometryFromBuffer(buffer) {\n    if (this.normalize || !this.buffers.indices) {\n      return super.getGeometryFromBuffer(buffer);\n    }\n    // we don't need to read the positions if no normalization/tesselation\n    return () => null;\n  }\n\n  updateGeometryAttributes(polygon, context) {\n    if (Array.isArray(polygon) && !Number.isFinite(polygon[0])) {\n      for (const subPolygon of polygon) {\n        const geometrySize = this.getGeometrySize(subPolygon);\n        context.geometrySize = geometrySize;\n        this.updateGeometryAttributes(subPolygon, context);\n        context.vertexStart += geometrySize;\n        context.indexStart = this.indexStarts[context.geometryIndex + 1];\n      }\n    } else {\n      this._updateIndices(polygon, context);\n      this._updatePositions(polygon, context);\n      this._updateVertexValid(polygon, context);\n    }\n  }\n\n  // Flatten the indices array\n  _updateIndices(polygon, {geometryIndex, vertexStart: offset, indexStart}) {\n    const {attributes, indexStarts, typedArrayManager} = this;\n\n    let target = attributes.indices;\n    if (!target) {\n      return;\n    }\n    let i = indexStart;\n\n    // 1. get triangulated indices for the internal areas\n    const indices = Polygon.getSurfaceIndices(polygon, this.positionSize, this.opts.preproject);\n\n    // make sure the buffer is large enough\n    target = typedArrayManager.allocate(target, indexStart + indices.length, {\n      copy: true\n    });\n\n    // 2. offset each index by the number of indices in previous polygons\n    for (let j = 0; j < indices.length; j++) {\n      target[i++] = indices[j] + offset;\n    }\n\n    indexStarts[geometryIndex + 1] = indexStart + indices.length;\n    attributes.indices = target;\n  }\n\n  // Flatten out all the vertices of all the sub subPolygons\n  _updatePositions(polygon, {vertexStart, geometrySize}) {\n    const {\n      attributes: {positions},\n      positionSize\n    } = this;\n    if (!positions) {\n      return;\n    }\n    const polygonPositions = polygon.positions || polygon;\n\n    for (let i = vertexStart, j = 0; j < geometrySize; i++, j++) {\n      const x = polygonPositions[j * positionSize];\n      const y = polygonPositions[j * positionSize + 1];\n      const z = positionSize > 2 ? polygonPositions[j * positionSize + 2] : 0;\n\n      positions[i * 3] = x;\n      positions[i * 3 + 1] = y;\n      positions[i * 3 + 2] = z;\n    }\n  }\n\n  _updateVertexValid(polygon, {vertexStart, geometrySize}) {\n    const {\n      attributes: {vertexValid},\n      positionSize\n    } = this;\n    const holeIndices = polygon && polygon.holeIndices;\n    /* We are reusing the some buffer for `nextPositions` by offseting one vertex\n     * to the left. As a result,\n     * the last vertex of each ring overlaps with the first vertex of the next ring.\n     * `vertexValid` is used to mark the end of each ring so we don't draw these\n     * segments:\n      positions      A0 A1 A2 A3 A4 B0 B1 B2 C0 ...\n      nextPositions  A1 A2 A3 A4 B0 B1 B2 C0 C1 ...\n      vertexValid    1  1  1  1  0  1  1  0  1 ...\n     */\n    if (polygon && polygon.edgeTypes) {\n      vertexValid.set(polygon.edgeTypes, vertexStart);\n    } else {\n      vertexValid.fill(1, vertexStart, vertexStart + geometrySize);\n    }\n    if (holeIndices) {\n      for (let j = 0; j < holeIndices.length; j++) {\n        vertexValid[vertexStart + holeIndices[j] / positionSize - 1] = 0;\n      }\n    }\n    vertexValid[vertexStart + geometrySize - 1] = 0;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}