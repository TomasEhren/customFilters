{"ast":null,"code":"import { read } from 'ktx-parse';\nimport { extractMipmapImages } from '../utils/extract-mipmap-images';\nimport { mapVkFormatToWebGL } from '../utils/ktx-format-helper';\nvar KTX2_ID = [0xab, 0x4b, 0x54, 0x58, 0x20, 0x32, 0x30, 0xbb, 0x0d, 0x0a, 0x1a, 0x0a];\nexport function isKTX(data) {\n  var id = new Uint8Array(data);\n  var notKTX = id.byteLength < KTX2_ID.length || id[0] !== KTX2_ID[0] || id[1] !== KTX2_ID[1] || id[2] !== KTX2_ID[2] || id[3] !== KTX2_ID[3] || id[4] !== KTX2_ID[4] || id[5] !== KTX2_ID[5] || id[6] !== KTX2_ID[6] || id[7] !== KTX2_ID[7] || id[8] !== KTX2_ID[8] || id[9] !== KTX2_ID[9] || id[10] !== KTX2_ID[10] || id[11] !== KTX2_ID[11];\n  return !notKTX;\n}\nexport function parseKTX(arrayBuffer) {\n  var uint8Array = new Uint8Array(arrayBuffer);\n  var ktx = read(uint8Array);\n  var mipMapLevels = Math.max(1, ktx.levels.length);\n  var width = ktx.pixelWidth;\n  var height = ktx.pixelHeight;\n  var internalFormat = mapVkFormatToWebGL(ktx.vkFormat);\n  return extractMipmapImages(ktx.levels, {\n    mipMapLevels: mipMapLevels,\n    width: width,\n    height: height,\n    sizeFunction: function sizeFunction(level) {\n      return level.uncompressedByteLength;\n    },\n    internalFormat: internalFormat\n  });\n}","map":{"version":3,"mappings":"AAAA,SAAQA,IAAR,QAAmB,WAAnB;AACA,SAAQC,mBAAR,QAAkC,gCAAlC;AACA,SAAQC,kBAAR,QAAiC,4BAAjC;AAEA,IAAMC,OAAO,GAAG,CAEd,IAFc,EAER,IAFQ,EAEF,IAFE,EAEI,IAFJ,EAEU,IAFV,EAEgB,IAFhB,EAEsB,IAFtB,EAE4B,IAF5B,EAEkC,IAFlC,EAEwC,IAFxC,EAE8C,IAF9C,EAEoD,IAFpD,CAAhB;AAMA,OAAO,SAASC,KAAT,CAAeC,IAAf,EAAkC;EAEvC,IAAMC,EAAE,GAAG,IAAIC,UAAJ,CAAeF,IAAf,CAAX;EACA,IAAMG,MAAM,GACVF,EAAE,CAACG,UAAHH,GAAgBH,OAAO,CAACO,MAAxBJ,IACAA,EAAE,CAAC,CAAD,CAAFA,KAAUH,OAAO,CAAC,CAAD,CADjBG,IAEAA,EAAE,CAAC,CAAD,CAAFA,KAAUH,OAAO,CAAC,CAAD,CAFjBG,IAGAA,EAAE,CAAC,CAAD,CAAFA,KAAUH,OAAO,CAAC,CAAD,CAHjBG,IAIAA,EAAE,CAAC,CAAD,CAAFA,KAAUH,OAAO,CAAC,CAAD,CAJjBG,IAKAA,EAAE,CAAC,CAAD,CAAFA,KAAUH,OAAO,CAAC,CAAD,CALjBG,IAMAA,EAAE,CAAC,CAAD,CAAFA,KAAUH,OAAO,CAAC,CAAD,CANjBG,IAOAA,EAAE,CAAC,CAAD,CAAFA,KAAUH,OAAO,CAAC,CAAD,CAPjBG,IAQAA,EAAE,CAAC,CAAD,CAAFA,KAAUH,OAAO,CAAC,CAAD,CARjBG,IASAA,EAAE,CAAC,CAAD,CAAFA,KAAUH,OAAO,CAAC,CAAD,CATjBG,IAUAA,EAAE,CAAC,CAAD,CAAFA,KAAUH,OAAO,CAAC,CAAD,CAVjBG,IAWAA,EAAE,CAAC,EAAD,CAAFA,KAAWH,OAAO,CAAC,EAAD,CAXlBG,IAYAA,EAAE,CAAC,EAAD,CAAFA,KAAWH,OAAO,CAAC,EAAD,CAbpB;EAeA,OAAO,CAACK,MAAR;AACD;AAED,OAAO,SAASG,QAAT,CAAkBC,WAAlB,EAA4C;EACjD,IAAMC,UAAU,GAAG,IAAIN,UAAJ,CAAeK,WAAf,CAAnB;EACA,IAAME,GAAG,GAAGd,IAAI,CAACa,UAAD,CAAhB;EACA,IAAME,YAAY,GAAGC,IAAI,CAACC,GAALD,CAAS,CAATA,EAAYF,GAAG,CAACI,MAAJJ,CAAWJ,MAAvBM,CAArB;EACA,IAAMG,KAAK,GAAGL,GAAG,CAACM,UAAlB;EACA,IAAMC,MAAM,GAAGP,GAAG,CAACQ,WAAnB;EACA,IAAMC,cAAc,GAAGrB,kBAAkB,CAACY,GAAG,CAACU,QAAL,CAAzC;EAEA,OAAOvB,mBAAmB,CAACa,GAAG,CAACI,MAAL,EAAa;IACrCH,YADqC,EACrCA,YADqC;IAErCI,KAFqC,EAErCA,KAFqC;IAGrCE,MAHqC,EAGrCA,MAHqC;IAIrCI,YAAY,EAAGC,2BAAD;MAAA,OAAwBA,KAAK,CAACC,sBAA9B;IAAA,CAJuB;IAKrCJ;EALqC,CAAb,CAA1B;AAOD","names":["read","extractMipmapImages","mapVkFormatToWebGL","KTX2_ID","isKTX","data","id","Uint8Array","notKTX","byteLength","length","parseKTX","arrayBuffer","uint8Array","ktx","mipMapLevels","Math","max","levels","width","pixelWidth","height","pixelHeight","internalFormat","vkFormat","sizeFunction","level","uncompressedByteLength"],"sources":["../../../../src/lib/parsers/parse-ktx.ts"],"sourcesContent":["import {read} from 'ktx-parse';\nimport {extractMipmapImages} from '../utils/extract-mipmap-images';\nimport {mapVkFormatToWebGL} from '../utils/ktx-format-helper';\n\nconst KTX2_ID = [\n  // '´', 'K', 'T', 'X', '2', '0', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n  0xab, 0x4b, 0x54, 0x58, 0x20, 0x32, 0x30, 0xbb, 0x0d, 0x0a, 0x1a, 0x0a\n];\n\n// eslint-disable-next-line complexity\nexport function isKTX(data: ArrayBuffer) {\n  // const id = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n  const id = new Uint8Array(data);\n  const notKTX =\n    id.byteLength < KTX2_ID.length ||\n    id[0] !== KTX2_ID[0] || // '´'\n    id[1] !== KTX2_ID[1] || // 'K'\n    id[2] !== KTX2_ID[2] || // 'T'\n    id[3] !== KTX2_ID[3] || // 'X'\n    id[4] !== KTX2_ID[4] || // ' '\n    id[5] !== KTX2_ID[5] || // '2'\n    id[6] !== KTX2_ID[6] || // '0'\n    id[7] !== KTX2_ID[7] || // 'ª'\n    id[8] !== KTX2_ID[8] || // '\\r'\n    id[9] !== KTX2_ID[9] || // '\\n'\n    id[10] !== KTX2_ID[10] || // '\\x1A'\n    id[11] !== KTX2_ID[11]; // '\\n'\n\n  return !notKTX;\n}\n\nexport function parseKTX(arrayBuffer: ArrayBuffer) {\n  const uint8Array = new Uint8Array(arrayBuffer);\n  const ktx = read(uint8Array);\n  const mipMapLevels = Math.max(1, ktx.levels.length);\n  const width = ktx.pixelWidth;\n  const height = ktx.pixelHeight;\n  const internalFormat = mapVkFormatToWebGL(ktx.vkFormat);\n\n  return extractMipmapImages(ktx.levels, {\n    mipMapLevels,\n    width,\n    height,\n    sizeFunction: (level: any): number => level.uncompressedByteLength,\n    internalFormat\n  });\n}\n"]},"metadata":{},"sourceType":"module"}