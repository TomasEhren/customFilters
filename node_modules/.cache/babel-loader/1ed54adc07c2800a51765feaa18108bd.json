{"ast":null,"code":"import { Layer, project32, gouraudLighting, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './point-cloud-layer-vertex.glsl';\nimport fs from './point-cloud-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst DEFAULT_NORMAL = [0, 0, 1];\nconst defaultProps = {\n  sizeUnits: 'pixels',\n  pointSize: {\n    type: 'number',\n    min: 0,\n    value: 10\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getNormal: {\n    type: 'accessor',\n    value: DEFAULT_NORMAL\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  material: true,\n  radiusPixels: {\n    deprecatedFor: 'pointSize'\n  }\n};\n\nfunction normalizeData(data) {\n  const {\n    header,\n    attributes\n  } = data;\n\n  if (!header || !attributes) {\n    return;\n  }\n\n  data.length = header.vertexCount;\n\n  if (attributes.POSITION) {\n    attributes.instancePositions = attributes.POSITION;\n  }\n\n  if (attributes.NORMAL) {\n    attributes.instanceNormals = attributes.NORMAL;\n  }\n\n  if (attributes.COLOR_0) {\n    attributes.instanceColors = attributes.COLOR_0;\n  }\n}\n\nexport default class PointCloudLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, gouraudLighting, picking]\n    });\n  }\n\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceNormals: {\n        size: 3,\n        transition: true,\n        accessor: 'getNormal',\n        defaultValue: DEFAULT_NORMAL\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      }\n    });\n  }\n\n  updateState(_ref) {\n    let {\n      props,\n      oldProps,\n      changeFlags\n    } = _ref;\n    super.updateState({\n      props,\n      oldProps,\n      changeFlags\n    });\n\n    if (changeFlags.extensionsChanged) {\n      var _this$state$model;\n\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (changeFlags.dataChanged) {\n      normalizeData(props.data);\n    }\n  }\n\n  draw(_ref2) {\n    let {\n      uniforms\n    } = _ref2;\n    const {\n      pointSize,\n      sizeUnits\n    } = this.props;\n    this.state.model.setUniforms(uniforms).setUniforms({\n      sizeUnits: UNIT[sizeUnits],\n      radiusPixels: pointSize\n    }).draw();\n  }\n\n  _getModel(gl) {\n    const positions = [];\n\n    for (let i = 0; i < 3; i++) {\n      const angle = i / 3 * Math.PI * 2;\n      positions.push(Math.cos(angle) * 2, Math.sin(angle) * 2, 0);\n    }\n\n    return new Model(gl, { ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 4,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n}\nPointCloudLayer.layerName = 'PointCloudLayer';\nPointCloudLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["Layer","project32","gouraudLighting","picking","UNIT","Model","Geometry","vs","fs","DEFAULT_COLOR","DEFAULT_NORMAL","defaultProps","sizeUnits","pointSize","type","min","value","getPosition","x","position","getNormal","getColor","material","radiusPixels","deprecatedFor","normalizeData","data","header","attributes","length","vertexCount","POSITION","instancePositions","NORMAL","instanceNormals","COLOR_0","instanceColors","PointCloudLayer","getShaders","modules","initializeState","getAttributeManager","addInstanced","size","fp64","use64bitPositions","transition","accessor","defaultValue","props","colorFormat","normalized","updateState","oldProps","changeFlags","extensionsChanged","gl","context","state","model","delete","_getModel","invalidateAll","dataChanged","draw","uniforms","setUniforms","positions","i","angle","Math","PI","push","cos","sin","id","geometry","drawMode","Float32Array","isInstanced","layerName"],"sources":["../../../src/point-cloud-layer/point-cloud-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './point-cloud-layer-vertex.glsl';\nimport fs from './point-cloud-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst DEFAULT_NORMAL = [0, 0, 1];\n\nconst defaultProps = {\n  sizeUnits: 'pixels',\n  pointSize: {type: 'number', min: 0, value: 10}, //  point radius in pixels\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getNormal: {type: 'accessor', value: DEFAULT_NORMAL},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  material: true,\n\n  // Depreated\n  radiusPixels: {deprecatedFor: 'pointSize'}\n};\n\n// support loaders.gl point cloud format\nfunction normalizeData(data) {\n  const {header, attributes} = data;\n  if (!header || !attributes) {\n    return;\n  }\n\n  data.length = header.vertexCount;\n\n  if (attributes.POSITION) {\n    attributes.instancePositions = attributes.POSITION;\n  }\n  if (attributes.NORMAL) {\n    attributes.instanceNormals = attributes.NORMAL;\n  }\n  if (attributes.COLOR_0) {\n    attributes.instanceColors = attributes.COLOR_0;\n  }\n}\n\nexport default class PointCloudLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, gouraudLighting, picking]});\n  }\n\n  initializeState() {\n    /* eslint-disable max-len */\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceNormals: {\n        size: 3,\n        transition: true,\n        accessor: 'getNormal',\n        defaultValue: DEFAULT_NORMAL\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n    if (changeFlags.dataChanged) {\n      normalizeData(props.data);\n    }\n  }\n\n  draw({uniforms}) {\n    const {pointSize, sizeUnits} = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        sizeUnits: UNIT[sizeUnits],\n        radiusPixels: pointSize\n      })\n      .draw();\n  }\n\n  _getModel(gl) {\n    // a triangle that minimally cover the unit circle\n    const positions = [];\n    for (let i = 0; i < 3; i++) {\n      const angle = (i / 3) * Math.PI * 2;\n      positions.push(Math.cos(angle) * 2, Math.sin(angle) * 2, 0);\n    }\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLES,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n\nPointCloudLayer.layerName = 'PointCloudLayer';\nPointCloudLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}