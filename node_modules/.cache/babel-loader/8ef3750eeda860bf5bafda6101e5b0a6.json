{"ast":null,"code":"import _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { ImageLoader } from '@loaders.gl/images';\nimport { getImageUrls } from './load-image';\nimport { deepLoad } from './deep-load';\nexport function loadImageTextureArray(_x, _x2) {\n  return _loadImageTextureArray.apply(this, arguments);\n}\n\nfunction _loadImageTextureArray() {\n  _loadImageTextureArray = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(count, getUrl) {\n    var options,\n        imageUrls,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            _context.next = 3;\n            return getImageArrayUrls(count, getUrl, options);\n\n          case 3:\n            imageUrls = _context.sent;\n            _context.next = 6;\n            return deepLoad(imageUrls, ImageLoader.parse, options);\n\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadImageTextureArray.apply(this, arguments);\n}\n\nexport function getImageArrayUrls(_x3, _x4) {\n  return _getImageArrayUrls.apply(this, arguments);\n}\n\nfunction _getImageArrayUrls() {\n  _getImageArrayUrls = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(count, getUrl) {\n    var options,\n        promises,\n        index,\n        promise,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n            promises = [];\n\n            for (index = 0; index < count; index++) {\n              promise = getImageUrls(getUrl, options, {\n                index: index\n              });\n              promises.push(promise);\n            }\n\n            _context2.next = 5;\n            return Promise.all(promises);\n\n          case 5:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getImageArrayUrls.apply(this, arguments);\n}","map":{"version":3,"mappings":";;AACA,SAAQA,WAAR,QAA0B,oBAA1B;AAEA,SAAQC,YAAR,QAA2B,cAA3B;AACA,SAAQC,QAAR,QAAuB,aAAvB;AAEA,gBAAsBC,qBAAtB;EAAA;AAAA;;;oFAAO,iBACLC,KADK,EAELC,MAFK;IAAA;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAGLC,OAHK,2DAGK,EAHL;YAAA;YAAA,OAKmBC,iBAAiB,CAACH,KAAD,EAAQC,MAAR,EAAgBC,OAAhB,CALpC;;UAAA;YAKCE,SALD;YAAA;YAAA,OAMQN,QAAQ,CAACM,SAAD,EAAYR,WAAW,CAACS,KAAxB,EAA+BH,OAA/B,CANhB;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AASP,gBAAsBC,iBAAtB;EAAA;AAAA;;;gFAAO,kBAAiCH,KAAjC,EAAgDC,MAAhD;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAAgEC,OAAhE,8DAA0E,EAA1E;YACCI,QADD,GAC4B,EAD5B;;YAEL,KAASC,KAAT,GAAiB,CAAjB,EAAoBA,KAAK,GAAGP,KAA5B,EAAmCO,KAAK,EAAxC,EAA4C;cACpCC,OADoC,GAC1BX,YAAY,CAACI,MAAD,EAASC,OAAT,EAAkB;gBAACK;cAAD,CAAlB,CADc;cAE1CD,QAAQ,CAACG,IAATH,CAAcE,OAAdF;YACD;;YALI;YAAA,OAMQI,OAAO,CAACC,GAARD,CAAYJ,QAAZI,CANR;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","names":["ImageLoader","getImageUrls","deepLoad","loadImageTextureArray","count","getUrl","options","getImageArrayUrls","imageUrls","parse","promises","index","promise","push","Promise","all"],"sources":["../../../../src/lib/texture-api/load-image-array.ts"],"sourcesContent":["// loaders.gl, MIT license\nimport {ImageLoader} from '@loaders.gl/images';\nimport type {GetUrl} from './texture-api-types';\nimport {getImageUrls} from './load-image';\nimport {deepLoad} from './deep-load';\n\nexport async function loadImageTextureArray(\n  count: number,\n  getUrl: GetUrl,\n  options = {}\n): Promise<any> {\n  const imageUrls = await getImageArrayUrls(count, getUrl, options);\n  return await deepLoad(imageUrls, ImageLoader.parse, options);\n}\n\nexport async function getImageArrayUrls(count: number, getUrl: GetUrl, options = {}): Promise<any> {\n  const promises: Promise<any>[] = [];\n  for (let index = 0; index < count; index++) {\n    const promise = getImageUrls(getUrl, options, {index});\n    promises.push(promise);\n  }\n  return await Promise.all(promises);\n}\n"]},"metadata":{},"sourceType":"module"}