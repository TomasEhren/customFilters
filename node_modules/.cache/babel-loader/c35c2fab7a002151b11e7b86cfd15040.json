{"ast":null,"code":"import _construct from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/construct.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getTypedArrayFromGLType } from '../webgl-utils/typed-array-utils';\nimport { assert } from '../utils/assert';\nimport { checkProps } from '../utils/check-props';\nvar DEFAULT_ACCESSOR_VALUES = {\n  offset: 0,\n  stride: 0,\n  type: 5126,\n  size: 1,\n  divisor: 0,\n  normalized: false,\n  integer: false\n};\nvar PROP_CHECKS = {\n  deprecatedProps: {\n    instanced: 'divisor',\n    isInstanced: 'divisor'\n  }\n};\n\nvar Accessor = /*#__PURE__*/function () {\n  function Accessor() {\n    var _this = this;\n\n    _classCallCheck(this, Accessor);\n\n    for (var _len = arguments.length, accessors = new Array(_len), _key = 0; _key < _len; _key++) {\n      accessors[_key] = arguments[_key];\n    }\n\n    accessors.forEach(function (accessor) {\n      return _this._assign(accessor);\n    });\n    Object.freeze(this);\n  }\n\n  _createClass(Accessor, [{\n    key: \"toString\",\n    value: function toString() {\n      return JSON.stringify(this);\n    }\n  }, {\n    key: \"BYTES_PER_ELEMENT\",\n    get: function get() {\n      return Accessor.getBytesPerElement(this);\n    }\n  }, {\n    key: \"BYTES_PER_VERTEX\",\n    get: function get() {\n      return Accessor.getBytesPerVertex(this);\n    }\n  }, {\n    key: \"_assign\",\n    value: function _assign() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      props = checkProps('Accessor', props, PROP_CHECKS);\n\n      if (props.type !== undefined) {\n        this.type = props.type;\n\n        if (props.type === 5124 || props.type === 5125) {\n          this.integer = true;\n        }\n      }\n\n      if (props.size !== undefined) {\n        this.size = props.size;\n      }\n\n      if (props.offset !== undefined) {\n        this.offset = props.offset;\n      }\n\n      if (props.stride !== undefined) {\n        this.stride = props.stride;\n      }\n\n      if (props.normalized !== undefined) {\n        this.normalized = props.normalized;\n      }\n\n      if (props.integer !== undefined) {\n        this.integer = props.integer;\n      }\n\n      if (props.divisor !== undefined) {\n        this.divisor = props.divisor;\n      }\n\n      if (props.buffer !== undefined) {\n        this.buffer = props.buffer;\n      }\n\n      if (props.index !== undefined) {\n        if (typeof props.index === 'boolean') {\n          this.index = props.index ? 1 : 0;\n        } else {\n          this.index = props.index;\n        }\n      }\n\n      if (props.instanced !== undefined) {\n        this.divisor = props.instanced ? 1 : 0;\n      }\n\n      if (props.isInstanced !== undefined) {\n        this.divisor = props.isInstanced ? 1 : 0;\n      }\n\n      return this;\n    }\n  }], [{\n    key: \"getBytesPerElement\",\n    value: function getBytesPerElement(accessor) {\n      var ArrayType = getTypedArrayFromGLType(accessor.type || 5126);\n      return ArrayType.BYTES_PER_ELEMENT;\n    }\n  }, {\n    key: \"getBytesPerVertex\",\n    value: function getBytesPerVertex(accessor) {\n      assert(accessor.size);\n      var ArrayType = getTypedArrayFromGLType(accessor.type || 5126);\n      return ArrayType.BYTES_PER_ELEMENT * accessor.size;\n    }\n  }, {\n    key: \"resolve\",\n    value: function resolve() {\n      for (var _len2 = arguments.length, accessors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        accessors[_key2] = arguments[_key2];\n      }\n\n      return _construct(Accessor, [DEFAULT_ACCESSOR_VALUES].concat(accessors));\n    }\n  }]);\n\n  return Accessor;\n}();\n\nexport { Accessor as default };\nexport { DEFAULT_ACCESSOR_VALUES };","map":{"version":3,"mappings":";;;AACA,SAAQA,uBAAR,QAAsC,kCAAtC;AACA,SAAQC,MAAR,QAAqB,iBAArB;AACA,SAAQC,UAAR,QAAyB,sBAAzB;AAEA,IAAMC,uBAAuB,GAAG;EAC9BC,MAAM,EAAE,CADsB;EAE9BC,MAAM,EAAE,CAFsB;EAG9BC,IAAI,MAH0B;EAI9BC,IAAI,EAAE,CAJwB;EAK9BC,OAAO,EAAE,CALqB;EAM9BC,UAAU,EAAE,KANkB;EAO9BC,OAAO,EAAE;AAPqB,CAAhC;AAUA,IAAMC,WAAW,GAAG;EAClBC,eAAe,EAAE;IACfC,SAAS,EAAE,SADI;IAEfC,WAAW,EAAE;EAFE;AADC,CAApB;;IAOqBC,Q;EAwBnBC,oBAA0B;IAAA;;IAAA;;IAAA,kCAAXC,SAAW;MAAXA,SAAW;IAAA;;IACxBA,SAAS,CAACC,OAAVD,CAAkBE,kBAAQ;MAAA,OAAI,MAAKC,OAAL,CAAaD,QAAb,CAAJ;IAAA,CAA1BF;IACAI,MAAM,CAACC,MAAPD,CAAc,IAAdA;EACD;;;;WAEDE,oBAAW;MACT,OAAOC,IAAI,CAACC,SAALD,CAAe,IAAfA,CAAP;IACD;;;SAKD,eAAwB;MACtB,OAAOT,QAAQ,CAACW,kBAATX,CAA4B,IAA5BA,CAAP;IACD;;;SAED,eAAuB;MACrB,OAAOA,QAAQ,CAACY,iBAATZ,CAA2B,IAA3BA,CAAP;IACD;;;WAKDK,mBAAoB;MAAA,IAAZQ,KAAY,uEAAJ,EAAI;MAClBA,KAAK,GAAG1B,UAAU,CAAC,UAAD,EAAa0B,KAAb,EAAoBjB,WAApB,CAAlBiB;;MAEA,IAAIA,KAAK,CAACtB,IAANsB,KAAeC,SAAnB,EAA8B;QAC5B,KAAKvB,IAAL,GAAYsB,KAAK,CAACtB,IAAlB;;QAGA,IAAIsB,KAAK,CAACtB,IAANsB,aAAyBA,KAAK,CAACtB,IAANsB,SAA7B,EAA6D;UAC3D,KAAKlB,OAAL,GAAe,IAAf;QACD;MACF;;MACD,IAAIkB,KAAK,CAACrB,IAANqB,KAAeC,SAAnB,EAA8B;QAC5B,KAAKtB,IAAL,GAAYqB,KAAK,CAACrB,IAAlB;MACD;;MACD,IAAIqB,KAAK,CAACxB,MAANwB,KAAiBC,SAArB,EAAgC;QAC9B,KAAKzB,MAAL,GAAcwB,KAAK,CAACxB,MAApB;MACD;;MACD,IAAIwB,KAAK,CAACvB,MAANuB,KAAiBC,SAArB,EAAgC;QAC9B,KAAKxB,MAAL,GAAcuB,KAAK,CAACvB,MAApB;MACD;;MACD,IAAIuB,KAAK,CAACnB,UAANmB,KAAqBC,SAAzB,EAAoC;QAClC,KAAKpB,UAAL,GAAkBmB,KAAK,CAACnB,UAAxB;MACD;;MACD,IAAImB,KAAK,CAAClB,OAANkB,KAAkBC,SAAtB,EAAiC;QAC/B,KAAKnB,OAAL,GAAekB,KAAK,CAAClB,OAArB;MACD;;MAGD,IAAIkB,KAAK,CAACpB,OAANoB,KAAkBC,SAAtB,EAAiC;QAC/B,KAAKrB,OAAL,GAAeoB,KAAK,CAACpB,OAArB;MACD;;MAGD,IAAIoB,KAAK,CAACE,MAANF,KAAiBC,SAArB,EAAgC;QAC9B,KAAKC,MAAL,GAAcF,KAAK,CAACE,MAApB;MACD;;MAID,IAAIF,KAAK,CAACG,KAANH,KAAgBC,SAApB,EAA+B;QAC7B,IAAI,OAAOD,KAAK,CAACG,KAAb,KAAuB,SAA3B,EAAsC;UACpC,KAAKA,KAAL,GAAaH,KAAK,CAACG,KAANH,GAAc,CAAdA,GAAkB,CAA/B;QADF,OAEO;UACL,KAAKG,KAAL,GAAaH,KAAK,CAACG,KAAnB;QACD;MACF;;MAGD,IAAIH,KAAK,CAACf,SAANe,KAAoBC,SAAxB,EAAmC;QACjC,KAAKrB,OAAL,GAAeoB,KAAK,CAACf,SAANe,GAAkB,CAAlBA,GAAsB,CAArC;MACD;;MACD,IAAIA,KAAK,CAACd,WAANc,KAAsBC,SAA1B,EAAqC;QACnC,KAAKrB,OAAL,GAAeoB,KAAK,CAACd,WAANc,GAAoB,CAApBA,GAAwB,CAAvC;MACD;;MAED,OAAO,IAAP;IACD;;;WAtGD,4BAA0BT,QAA1B,EAAoC;MAGlC,IAAMa,SAAS,GAAGhC,uBAAuB,CAACmB,QAAQ,CAACb,IAATa,QAAD,CAAzC;MACA,OAAOa,SAAS,CAACC,iBAAjB;IACD;;;WAED,2BAAyBd,QAAzB,EAAmC;MACjClB,MAAM,CAACkB,QAAQ,CAACZ,IAAV,CAANN;MAGA,IAAM+B,SAAS,GAAGhC,uBAAuB,CAACmB,QAAQ,CAACb,IAATa,QAAD,CAAzC;MACA,OAAOa,SAAS,CAACC,iBAAVD,GAA8Bb,QAAQ,CAACZ,IAA9C;IACD;;;WAMD,mBAA6B;MAAA,mCAAXU,SAAW;QAAXA,SAAW;MAAA;;MAC3B,kBAAWF,QAAX,GAAwBZ,uBAAxB,SAAoDc,SAApD;IACD;;;;;;SAtBkBF,Q;AA2GrB,SAAQZ,uBAAR","names":["getTypedArrayFromGLType","assert","checkProps","DEFAULT_ACCESSOR_VALUES","offset","stride","type","size","divisor","normalized","integer","PROP_CHECKS","deprecatedProps","instanced","isInstanced","Accessor","constructor","accessors","forEach","accessor","_assign","Object","freeze","toString","JSON","stringify","getBytesPerElement","getBytesPerVertex","props","undefined","buffer","index","ArrayType","BYTES_PER_ELEMENT"],"sources":["../../../src/classes/accessor.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {getTypedArrayFromGLType} from '../webgl-utils/typed-array-utils';\nimport {assert} from '../utils/assert';\nimport {checkProps} from '../utils/check-props';\n\nconst DEFAULT_ACCESSOR_VALUES = {\n  offset: 0,\n  stride: 0,\n  type: GL.FLOAT,\n  size: 1,\n  divisor: 0,\n  normalized: false,\n  integer: false\n};\n\nconst PROP_CHECKS = {\n  deprecatedProps: {\n    instanced: 'divisor',\n    isInstanced: 'divisor'\n  }\n};\n\nexport default class Accessor {\n  static getBytesPerElement(accessor) {\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || GL.FLOAT);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n\n  static getBytesPerVertex(accessor) {\n    assert(accessor.size);\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || GL.FLOAT);\n    return ArrayType.BYTES_PER_ELEMENT * accessor.size;\n  }\n\n  // Combines (merges) a list of accessors. On top of default values\n  // Usually [programAccessor, bufferAccessor, appAccessor]\n  // All props will be set in the returned object.\n  // TODO check for conflicts between values in the supplied accessors\n  static resolve(...accessors) {\n    return new Accessor(...[DEFAULT_ACCESSOR_VALUES, ...accessors]); // Default values\n  }\n\n  constructor(...accessors) {\n    accessors.forEach(accessor => this._assign(accessor)); // Merge in sequence\n    Object.freeze(this);\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n\n  // ACCESSORS\n\n  // TODO - remove>\n  get BYTES_PER_ELEMENT() {\n    return Accessor.getBytesPerElement(this);\n  }\n\n  get BYTES_PER_VERTEX() {\n    return Accessor.getBytesPerVertex(this);\n  }\n\n  // PRIVATE\n\n  // eslint-disable-next-line complexity, max-statements\n  _assign(props = {}) {\n    props = checkProps('Accessor', props, PROP_CHECKS);\n\n    if (props.type !== undefined) {\n      this.type = props.type;\n\n      // Auto-deduce integer type?\n      if (props.type === GL.INT || props.type === GL.UNSIGNED_INT) {\n        this.integer = true;\n      }\n    }\n    if (props.size !== undefined) {\n      this.size = props.size;\n    }\n    if (props.offset !== undefined) {\n      this.offset = props.offset;\n    }\n    if (props.stride !== undefined) {\n      this.stride = props.stride;\n    }\n    if (props.normalized !== undefined) {\n      this.normalized = props.normalized;\n    }\n    if (props.integer !== undefined) {\n      this.integer = props.integer;\n    }\n\n    // INSTANCE DIVISOR\n    if (props.divisor !== undefined) {\n      this.divisor = props.divisor;\n    }\n\n    // Buffer is optional\n    if (props.buffer !== undefined) {\n      this.buffer = props.buffer;\n    }\n\n    // The binding index (for binding e.g. Transform feedbacks and Uniform buffers)\n    // TODO - should this be part of accessor?\n    if (props.index !== undefined) {\n      if (typeof props.index === 'boolean') {\n        this.index = props.index ? 1 : 0;\n      } else {\n        this.index = props.index;\n      }\n    }\n\n    // DEPRECATED\n    if (props.instanced !== undefined) {\n      this.divisor = props.instanced ? 1 : 0;\n    }\n    if (props.isInstanced !== undefined) {\n      this.divisor = props.isInstanced ? 1 : 0;\n    }\n\n    return this;\n  }\n}\n\n// TEST EXPORTS\nexport {DEFAULT_ACCESSOR_VALUES};\n"]},"metadata":{},"sourceType":"module"}