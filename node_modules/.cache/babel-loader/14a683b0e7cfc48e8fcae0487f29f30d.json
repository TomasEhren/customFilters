{"ast":null,"code":"export function push(target, source) {\n  var size = source.length;\n  var startIndex = target.length;\n\n  if (startIndex > 0) {\n    var isDuplicate = true;\n\n    for (var i = 0; i < size; i++) {\n      if (target[startIndex - size + i] !== source[i]) {\n        isDuplicate = false;\n        break;\n      }\n    }\n\n    if (isDuplicate) {\n      return false;\n    }\n  }\n\n  for (var _i = 0; _i < size; _i++) {\n    target[startIndex + _i] = source[_i];\n  }\n\n  return true;\n}\nexport function copy(target, source) {\n  var size = source.length;\n\n  for (var i = 0; i < size; i++) {\n    target[i] = source[i];\n  }\n}\nexport function getPointAtIndex(positions, index, size, offset) {\n  var out = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var startI = offset + index * size;\n\n  for (var i = 0; i < size; i++) {\n    out[i] = positions[startI + i];\n  }\n\n  return out;\n}","map":{"version":3,"mappings":"AAAA,OAAO,SAASA,IAAT,CAAcC,MAAd,EAAsBC,MAAtB,EAA8B;EACnC,IAAMC,IAAI,GAAGD,MAAM,CAACE,MAApB;EACA,IAAMC,UAAU,GAAGJ,MAAM,CAACG,MAA1B;;EAGA,IAAIC,UAAU,GAAG,CAAjB,EAAoB;IAClB,IAAIC,WAAW,GAAG,IAAlB;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;MAC7B,IAAIN,MAAM,CAACI,UAAU,GAAGF,IAAbE,GAAoBE,CAArB,CAANN,KAAkCC,MAAM,CAACK,CAAD,CAA5C,EAAiD;QAC/CD,WAAW,GAAG,KAAdA;QACA;MACD;IACF;;IACD,IAAIA,WAAJ,EAAiB;MACf,OAAO,KAAP;IACD;EACF;;EAED,KAAK,IAAIC,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGJ,IAApB,EAA0BI,EAAC,EAA3B,EAA+B;IAC7BN,MAAM,CAACI,UAAU,GAAGE,EAAd,CAANN,GAAyBC,MAAM,CAACK,EAAD,CAA/BN;EACD;;EACD,OAAO,IAAP;AACD;AAED,OAAO,SAASO,IAAT,CAAcP,MAAd,EAAsBC,MAAtB,EAA8B;EACnC,IAAMC,IAAI,GAAGD,MAAM,CAACE,MAApB;;EACA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;IAC7BN,MAAM,CAACM,CAAD,CAANN,GAAYC,MAAM,CAACK,CAAD,CAAlBN;EACD;AACF;AAED,OAAO,SAASQ,eAAT,CAAyBC,SAAzB,EAAoCC,KAApC,EAA2CR,IAA3C,EAAiDS,MAAjD,EAAmE;EAAA,IAAVC,GAAU,uEAAJ,EAAI;EACxE,IAAMC,MAAM,GAAGF,MAAM,GAAGD,KAAK,GAAGR,IAAhC;;EACA,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;IAC7BM,GAAG,CAACN,CAAD,CAAHM,GAASH,SAAS,CAACI,MAAM,GAAGP,CAAV,CAAlBM;EACD;;EACD,OAAOA,GAAP;AACD","names":["push","target","source","size","length","startIndex","isDuplicate","i","copy","getPointAtIndex","positions","index","offset","out","startI"],"sources":["../../src/utils.js"],"sourcesContent":["export function push(target, source) {\n  const size = source.length;\n  const startIndex = target.length;\n\n  // dedupe, if source is the same point as the last vertex\n  if (startIndex > 0) {\n    let isDuplicate = true;\n    for (let i = 0; i < size; i++) {\n      if (target[startIndex - size + i] !== source[i]) {\n        isDuplicate = false;\n        break;\n      }\n    }\n    if (isDuplicate) {\n      return false;\n    }\n  }\n\n  for (let i = 0; i < size; i++) {\n    target[startIndex + i] = source[i];\n  }\n  return true;\n}\n\nexport function copy(target, source) {\n  const size = source.length;\n  for (let i = 0; i < size; i++) {\n    target[i] = source[i];\n  }\n}\n\nexport function getPointAtIndex(positions, index, size, offset, out = []) {\n  const startI = offset + index * size;\n  for (let i = 0; i < size; i++) {\n    out[i] = positions[startI + i];\n  }\n  return out;\n}\n"]},"metadata":{},"sourceType":"module"}