{"ast":null,"code":"export async function waitForGLTFAssets(gltfObjects) {\n  const remaining = [];\n  gltfObjects.scenes.forEach(scene => {\n    scene.traverse(model => {\n      Object.values(model.model.getUniforms()).forEach(uniform => {\n        if (uniform.loaded === false) {\n          remaining.push(uniform);\n        }\n      });\n    });\n  });\n  return await waitWhileCondition(() => remaining.some(uniform => !uniform.loaded));\n}\n\nasync function waitWhileCondition(condition) {\n  while (condition()) {\n    await new Promise(resolve => requestAnimationFrame(resolve));\n  }\n}","map":{"version":3,"mappings":"AAEA,OAAO,eAAeA,iBAAf,CAAiCC,WAAjC,EAA8C;EACnD,MAAMC,SAAS,GAAG,EAAlB;EAEAD,WAAW,CAACE,MAAZF,CAAmBG,OAAnBH,CAA2BI,KAAK,IAAI;IAClCA,KAAK,CAACC,QAAND,CAAeE,KAAK,IAAI;MACtBC,MAAM,CAACC,MAAPD,CAAcD,KAAK,CAACA,KAANA,CAAYG,WAAZH,EAAdC,EAAyCJ,OAAzCI,CAAiDG,OAAO,IAAI;QAC1D,IAAIA,OAAO,CAACC,MAARD,KAAmB,KAAvB,EAA8B;UAC5BT,SAAS,CAACW,IAAVX,CAAeS,OAAfT;QACD;MAHH;IADF;EADF;EAUA,OAAO,MAAMY,kBAAkB,CAAC,MAAMZ,SAAS,CAACa,IAAVb,CAAeS,OAAO,IAAI,CAACA,OAAO,CAACC,MAAnCV,CAAP,CAA/B;AACD;;AAED,eAAeY,kBAAf,CAAkCE,SAAlC,EAA6C;EAC3C,OAAOA,SAAS,EAAhB,EAAoB;IAClB,MAAM,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,qBAAqB,CAACD,OAAD,CAA5C,CAAN;EACD;AACF","names":["waitForGLTFAssets","gltfObjects","remaining","scenes","forEach","scene","traverse","model","Object","values","getUniforms","uniform","loaded","push","waitWhileCondition","some","condition","Promise","resolve","requestAnimationFrame"],"sources":["../../../src/scenegraph-layer/gltf-utils.js"],"sourcesContent":["/* global requestAnimationFrame */\n\nexport async function waitForGLTFAssets(gltfObjects) {\n  const remaining = [];\n\n  gltfObjects.scenes.forEach(scene => {\n    scene.traverse(model => {\n      Object.values(model.model.getUniforms()).forEach(uniform => {\n        if (uniform.loaded === false) {\n          remaining.push(uniform);\n        }\n      });\n    });\n  });\n\n  return await waitWhileCondition(() => remaining.some(uniform => !uniform.loaded));\n}\n\nasync function waitWhileCondition(condition) {\n  while (condition()) {\n    await new Promise(resolve => requestAnimationFrame(resolve));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}