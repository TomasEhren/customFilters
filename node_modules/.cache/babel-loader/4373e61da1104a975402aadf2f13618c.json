{"ast":null,"code":"import _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { TILE3D_TYPE } from '../constants';\nimport { getMagicString } from './helpers/parse-utils';\nimport { parsePointCloud3DTile } from './parse-3d-tile-point-cloud';\nimport { parseBatchedModel3DTile } from './parse-3d-tile-batched-model';\nimport { parseInstancedModel3DTile } from './parse-3d-tile-instanced-model';\nimport { parseComposite3DTile } from './parse-3d-tile-composite';\nimport { parseGltf3DTile } from './parse-3d-tile-gltf';\nexport function parse3DTile(_x) {\n  return _parse3DTile.apply(this, arguments);\n}\n\nfunction _parse3DTile() {\n  _parse3DTile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(arrayBuffer) {\n    var byteOffset,\n        options,\n        context,\n        tile,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            byteOffset = _args.length > 1 && _args[1] !== undefined ? _args[1] : 0;\n            options = _args.length > 2 ? _args[2] : undefined;\n            context = _args.length > 3 ? _args[3] : undefined;\n            tile = _args.length > 4 && _args[4] !== undefined ? _args[4] : {};\n            tile.byteOffset = byteOffset;\n            tile.type = getMagicString(arrayBuffer, byteOffset);\n            _context.t0 = tile.type;\n            _context.next = _context.t0 === TILE3D_TYPE.COMPOSITE ? 9 : _context.t0 === TILE3D_TYPE.BATCHED_3D_MODEL ? 12 : _context.t0 === TILE3D_TYPE.GLTF ? 15 : _context.t0 === TILE3D_TYPE.INSTANCED_3D_MODEL ? 18 : _context.t0 === TILE3D_TYPE.POINT_CLOUD ? 21 : 24;\n            break;\n\n          case 9:\n            _context.next = 11;\n            return parseComposite3DTile(tile, arrayBuffer, byteOffset, options, context, parse3DTile);\n\n          case 11:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 12:\n            _context.next = 14;\n            return parseBatchedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n          case 14:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 15:\n            _context.next = 17;\n            return parseGltf3DTile(tile, arrayBuffer, options, context);\n\n          case 17:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 18:\n            _context.next = 20;\n            return parseInstancedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n          case 20:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 21:\n            _context.next = 23;\n            return parsePointCloud3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n          case 23:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 24:\n            throw new Error(\"3DTileLoader: unknown type \".concat(tile.type));\n\n          case 25:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parse3DTile.apply(this, arguments);\n}","map":{"version":3,"mappings":";;AAGA,SAAQA,WAAR,QAA0B,cAA1B;AACA,SAAQC,cAAR,QAA6B,uBAA7B;AAEA,SAAQC,qBAAR,QAAoC,6BAApC;AACA,SAAQC,uBAAR,QAAsC,+BAAtC;AACA,SAAQC,yBAAR,QAAwC,iCAAxC;AACA,SAAQC,oBAAR,QAAmC,2BAAnC;AACA,SAAQC,eAAR,QAA8B,sBAA9B;AAGA,gBAAsBC,WAAtB;EAAA;AAAA;;;0EAAO,iBAA2BC,WAA3B;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAAwCC,UAAxC,2DAAqD,CAArD;YAAwDC,OAAxD;YAAiEC,OAAjE;YAA0EC,IAA1E,2DAAiF,EAAjF;YAELA,IAAI,CAACH,UAALG,GAAkBH,UAAlBG;YAEAA,IAAI,CAACC,IAALD,GAAYX,cAAc,CAACO,WAAD,EAAcC,UAAd,CAA1BG;YAJK,cAOGA,IAAI,CAACC,IAPR;YAAA,gCAQEb,WAAW,CAACc,SARd,uBAmBEd,WAAW,CAACe,gBAnBd,wBAsBEf,WAAW,CAACgB,IAtBd,wBAyBEhB,WAAW,CAACiB,kBAzBd,wBA4BEjB,WAAW,CAACkB,WA5Bd;YAAA;;UAAA;YAAA;YAAA,OAUYb,oBAAoB,CAC/BO,IAD+B,EAE/BJ,WAF+B,EAG/BC,UAH+B,EAI/BC,OAJ+B,EAK/BC,OAL+B,EAM/BJ,WAN+B,CAVhC;;UAAA;YAAA;;UAAA;YAAA;YAAA,OAoBYJ,uBAAuB,CAACS,IAAD,EAAOJ,WAAP,EAAoBC,UAApB,EAAgCC,OAAhC,EAAyCC,OAAzC,CApBnC;;UAAA;YAAA;;UAAA;YAAA;YAAA,OAuBYL,eAAe,CAACM,IAAD,EAAOJ,WAAP,EAAoBE,OAApB,EAA6BC,OAA7B,CAvB3B;;UAAA;YAAA;;UAAA;YAAA;YAAA,OA0BYP,yBAAyB,CAACQ,IAAD,EAAOJ,WAAP,EAAoBC,UAApB,EAAgCC,OAAhC,EAAyCC,OAAzC,CA1BrC;;UAAA;YAAA;;UAAA;YAAA;YAAA,OA6BYT,qBAAqB,CAACU,IAAD,EAAOJ,WAAP,EAAoBC,UAApB,EAAgCC,OAAhC,EAAyCC,OAAzC,CA7BjC;;UAAA;YAAA;;UAAA;YAAA,MAiCK,IAAIQ,KAAJ,sCAAwCP,IAAI,CAACC,IAA7C,EAjCL;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","names":["TILE3D_TYPE","getMagicString","parsePointCloud3DTile","parseBatchedModel3DTile","parseInstancedModel3DTile","parseComposite3DTile","parseGltf3DTile","parse3DTile","arrayBuffer","byteOffset","options","context","tile","type","COMPOSITE","BATCHED_3D_MODEL","GLTF","INSTANCED_3D_MODEL","POINT_CLOUD","Error"],"sources":["../../../../src/lib/parsers/parse-3d-tile.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {TILE3D_TYPE} from '../constants';\nimport {getMagicString} from './helpers/parse-utils';\n\nimport {parsePointCloud3DTile} from './parse-3d-tile-point-cloud';\nimport {parseBatchedModel3DTile} from './parse-3d-tile-batched-model';\nimport {parseInstancedModel3DTile} from './parse-3d-tile-instanced-model';\nimport {parseComposite3DTile} from './parse-3d-tile-composite';\nimport {parseGltf3DTile} from './parse-3d-tile-gltf';\n\n// Extracts\nexport async function parse3DTile(arrayBuffer, byteOffset = 0, options, context, tile = {}) {\n  // @ts-expect-error\n  tile.byteOffset = byteOffset;\n  // @ts-expect-error\n  tile.type = getMagicString(arrayBuffer, byteOffset);\n\n  // @ts-expect-error\n  switch (tile.type) {\n    case TILE3D_TYPE.COMPOSITE:\n      // Note: We pass this function as argument so that embedded tiles can be parsed recursively\n      return await parseComposite3DTile(\n        tile,\n        arrayBuffer,\n        byteOffset,\n        options,\n        context,\n        parse3DTile\n      );\n\n    case TILE3D_TYPE.BATCHED_3D_MODEL:\n      return await parseBatchedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    case TILE3D_TYPE.GLTF:\n      return await parseGltf3DTile(tile, arrayBuffer, options, context);\n\n    case TILE3D_TYPE.INSTANCED_3D_MODEL:\n      return await parseInstancedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    case TILE3D_TYPE.POINT_CLOUD:\n      return await parsePointCloud3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    default:\n      // @ts-expect-error\n      throw new Error(`3DTileLoader: unknown type ${tile.type}`); // eslint-disable-line\n  }\n}\n"]},"metadata":{},"sourceType":"module"}