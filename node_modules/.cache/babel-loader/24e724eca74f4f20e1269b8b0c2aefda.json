{"ast":null,"code":"import { CubeGeometry } from '@luma.gl/core';\nimport { UNIT } from '@deck.gl/core';\nimport ColumnLayer from './column-layer';\nconst defaultProps = {\n  cellSize: {\n    type: 'number',\n    min: 0,\n    value: 1000\n  },\n  offset: {\n    type: 'array',\n    min: 0,\n    value: [1, 1]\n  }\n};\nexport default class GridCellLayer extends ColumnLayer {\n  getGeometry(diskResolution) {\n    return new CubeGeometry();\n  }\n\n  draw(_ref) {\n    let {\n      uniforms\n    } = _ref;\n    const {\n      elevationScale,\n      extruded,\n      offset,\n      coverage,\n      cellSize,\n      angle,\n      radiusUnits\n    } = this.props;\n    this.state.model.setUniforms(uniforms).setUniforms({\n      radius: cellSize / 2,\n      radiusUnits: UNIT[radiusUnits],\n      angle,\n      offset,\n      extruded,\n      coverage,\n      elevationScale,\n      edgeDistance: 1,\n      isWireframe: false\n    }).draw();\n  }\n\n}\nGridCellLayer.layerName = 'GridCellLayer';\nGridCellLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"AAoBA,SAAQA,YAAR,QAA2B,eAA3B;AACA,SAAQC,IAAR,QAAmB,eAAnB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AAEA,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE;IAACC,IAAI,EAAE,QAAP;IAAiBC,GAAG,EAAE,CAAtB;IAAyBC,KAAK,EAAE;EAAhC,CADS;EAEnBC,MAAM,EAAE;IAACH,IAAI,EAAE,OAAP;IAAgBC,GAAG,EAAE,CAArB;IAAwBC,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;EAA/B;AAFW,CAArB;AAKA,eAAe,MAAME,aAAN,SAA4BP,WAA5B,CAAwC;EACrDQ,WAAW,CAACC,cAAD,EAAiB;IAC1B,OAAO,IAAIX,YAAJ,EAAP;EACD;;EAEDY,IAAI,OAAa;IAAA,IAAZ;MAACC;IAAD,CAAY;IACf,MAAM;MAACC,cAAD;MAAiBC,QAAjB;MAA2BP,MAA3B;MAAmCQ,QAAnC;MAA6CZ,QAA7C;MAAuDa,KAAvD;MAA8DC;IAA9D,IAA6E,KAAKC,KAAxF;IACA,KAAKC,KAAL,CAAWC,KAAX,CACGC,WADH,CACeT,QADf,EAEGS,WAFH,CAEe;MACXC,MAAM,EAAEnB,QAAQ,GAAG,CADR;MAEXc,WAAW,EAAEjB,IAAI,CAACiB,WAAD,CAFN;MAGXD,KAHW;MAIXT,MAJW;MAKXO,QALW;MAMXC,QANW;MAOXF,cAPW;MAQXU,YAAY,EAAE,CARH;MASXC,WAAW,EAAE;IATF,CAFf,EAaGb,IAbH;EAcD;;AArBoD;AAwBvDH,aAAa,CAACiB,SAAdjB,GAA0B,eAA1BA;AACAA,aAAa,CAACN,YAAdM,GAA6BN,YAA7BM","names":["CubeGeometry","UNIT","ColumnLayer","defaultProps","cellSize","type","min","value","offset","GridCellLayer","getGeometry","diskResolution","draw","uniforms","elevationScale","extruded","coverage","angle","radiusUnits","props","state","model","setUniforms","radius","edgeDistance","isWireframe","layerName"],"sources":["../../../src/column-layer/grid-cell-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CubeGeometry} from '@luma.gl/core';\nimport {UNIT} from '@deck.gl/core';\nimport ColumnLayer from './column-layer';\n\nconst defaultProps = {\n  cellSize: {type: 'number', min: 0, value: 1000},\n  offset: {type: 'array', min: 0, value: [1, 1]}\n};\n\nexport default class GridCellLayer extends ColumnLayer {\n  getGeometry(diskResolution) {\n    return new CubeGeometry();\n  }\n\n  draw({uniforms}) {\n    const {elevationScale, extruded, offset, coverage, cellSize, angle, radiusUnits} = this.props;\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        radius: cellSize / 2,\n        radiusUnits: UNIT[radiusUnits],\n        angle,\n        offset,\n        extruded,\n        coverage,\n        elevationScale,\n        edgeDistance: 1,\n        isWireframe: false\n      })\n      .draw();\n  }\n}\n\nGridCellLayer.layerName = 'GridCellLayer';\nGridCellLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}