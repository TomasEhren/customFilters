{"ast":null,"code":"import { AGGREGATION, getLayer, getColorAccessor, getColorValueAccessor, getSizeAccessor, getTextAccessor, getTextPixelOffsetAccessor } from './layer-map';\nimport { _flatten as flatten, log } from '@deck.gl/core';\nimport { assert } from '../utils';\nexport function parseMap(json) {\n  const {\n    keplerMapConfig,\n    datasets\n  } = json;\n  assert(keplerMapConfig.version === 'v1', 'Only support Kepler v1');\n  const {\n    mapState,\n    mapStyle\n  } = keplerMapConfig.config;\n  const {\n    layers,\n    layerBlending,\n    interactionConfig\n  } = keplerMapConfig.config.visState;\n  return {\n    id: json.id,\n    title: json.title,\n    description: json.description,\n    createdAt: json.createdAt,\n    updatedAt: json.updatedAt,\n    initialViewState: mapState,\n    mapStyle,\n    layers: extractTextLayers(layers.reverse()).map(_ref => {\n      let {\n        id,\n        type,\n        config,\n        visualChannels\n      } = _ref;\n\n      try {\n        const {\n          dataId\n        } = config;\n        const dataset = datasets.find(d => d.id === dataId);\n        assert(dataset, \"No dataset matching dataId: \".concat(dataId));\n        const {\n          data\n        } = dataset;\n        assert(data, \"No data loaded for dataId: \".concat(dataId));\n        const {\n          Layer,\n          propMap,\n          defaultProps\n        } = getLayer(type, config, dataset);\n        return new Layer({\n          id,\n          data,\n          ...defaultProps,\n          ...createBlendingProps(layerBlending),\n          ...(!config.textLabel && createInteractionProps(interactionConfig)),\n          ...createStyleProps(config, propMap),\n          ...createChannelProps(visualChannels, type, config, data)\n        });\n      } catch (e) {\n        log.error(e.message)();\n        return undefined;\n      }\n    })\n  };\n}\n\nfunction extractTextLayers(layers) {\n  return flatten(layers.map(_ref2 => {\n    let {\n      id,\n      config,\n      ...rest\n    } = _ref2;\n    const {\n      textLabel,\n      ...configRest\n    } = config;\n    return [{\n      id,\n      config: configRest,\n      ...rest\n    }, ...textLabel.filter(t => t.field).map(t => {\n      return {\n        id: \"\".concat(id, \"-label-\").concat(t.field.name),\n        config: {\n          textLabel: t,\n          ...configRest,\n          label: \"\".concat(config.label, \"-label-\").concat(t.field.name),\n          visConfig: { ...configRest.visConfig,\n            opacity: 1\n          }\n        },\n        ...rest\n      };\n    })];\n  }));\n}\n\nfunction createBlendingProps(layerBlending) {\n  if (layerBlending === 'additive') {\n    return {\n      parameters: {\n        blendFunc: [770, 772],\n        blendEquation: 32774\n      }\n    };\n  } else if (layerBlending === 'subtractive') {\n    return {\n      parameters: {\n        blendFunc: [1, 775, 770, 772],\n        blendEquation: [32778, 32774]\n      }\n    };\n  }\n\n  return {};\n}\n\nfunction createInteractionProps(interactionConfig) {\n  const pickable = interactionConfig && interactionConfig.tooltip.enabled;\n  return {\n    autoHighlight: pickable,\n    pickable\n  };\n}\n\nfunction mapProps(source, target, mapping) {\n  for (const sourceKey in mapping) {\n    const sourceValue = source[sourceKey];\n    const targetKey = mapping[sourceKey];\n\n    if (sourceValue === undefined) {\n      continue;\n    }\n\n    if (typeof targetKey === 'string') {\n      target[targetKey] = sourceValue;\n    } else if (typeof targetKey === 'function') {\n      const [key, value] = Object.entries(targetKey(sourceValue))[0];\n      target[key] = value;\n    } else if (typeof targetKey === 'object') {\n      mapProps(sourceValue, target, targetKey);\n    }\n  }\n}\n\nfunction createStyleProps(config, mapping) {\n  const result = {};\n  mapProps(config, result, mapping);\n\n  if (result.stroked && !result.getLineColor) {\n    result.getLineColor = result.getFillColor;\n  }\n\n  result.highlightColor = config.visConfig.enable3d ? [255, 255, 255, 60] : [252, 242, 26, 255];\n  return result;\n}\n\nfunction createChannelProps(visualChannels, type, config, data) {\n  const {\n    colorField,\n    colorScale,\n    sizeField,\n    sizeScale,\n    strokeColorField,\n    strokeColorScale\n  } = visualChannels;\n  let {\n    heightField,\n    heightScale\n  } = visualChannels;\n\n  if (type === 'hexagonId') {\n    heightField = sizeField;\n    heightScale = sizeScale;\n  }\n\n  const {\n    textLabel,\n    visConfig\n  } = config;\n  const result = {};\n  const textLabelField = textLabel && textLabel.field;\n\n  if (type === 'grid' || type === 'hexagon') {\n    result.colorScaleType = colorScale;\n\n    if (colorField) {\n      const {\n        colorAggregation\n      } = config.visConfig;\n\n      if (!AGGREGATION[colorAggregation]) {\n        result.getColorValue = getColorValueAccessor(colorField, colorAggregation, data);\n      } else {\n        result.getColorWeight = d => [colorField.name];\n      }\n    }\n  } else if (colorField) {\n    result.getFillColor = getColorAccessor(colorField, colorScale, visConfig.colorRange, 1, data);\n  }\n\n  if (strokeColorField) {\n    const opacity = visConfig.strokeOpacity !== undefined ? visConfig.strokeOpacity : 1;\n    result.getLineColor = getColorAccessor(strokeColorField, strokeColorScale, visConfig.strokeColorRange, opacity, data);\n  }\n\n  if (heightField) {\n    result.getElevation = getSizeAccessor(heightField, heightScale, visConfig.heightRange || visConfig.sizeRange, data);\n  }\n\n  if (sizeField) {\n    result.getPointRadius = getSizeAccessor(sizeField, sizeScale, visConfig.radiusRange || visConfig.sizeRange, data);\n  }\n\n  if (textLabelField) {\n    result.getText = getTextAccessor(textLabelField, data);\n    result.pointType = 'text';\n    const radius = result.getPointRadius || visConfig.radius;\n    result.getTextPixelOffset = getTextPixelOffsetAccessor(textLabel, radius);\n  }\n\n  return result;\n}","map":{"version":3,"mappings":"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","names":["AGGREGATION","getLayer","getColorAccessor","getColorValueAccessor","getSizeAccessor","getTextAccessor","getTextPixelOffsetAccessor","_flatten","flatten","log","assert","parseMap","json","keplerMapConfig","datasets","version","mapState","mapStyle","config","layers","layerBlending","interactionConfig","visState","id","title","description","createdAt","updatedAt","initialViewState","extractTextLayers","reverse","map","type","visualChannels","dataId","dataset","find","d","data","Layer","propMap","defaultProps","createBlendingProps","textLabel","createInteractionProps","createStyleProps","createChannelProps","e","error","message","undefined","rest","configRest","filter","t","field","name","label","visConfig","opacity","parameters","blendFunc","blendEquation","pickable","tooltip","enabled","autoHighlight","mapProps","source","target","mapping","sourceKey","sourceValue","targetKey","key","value","Object","entries","result","stroked","getLineColor","getFillColor","highlightColor","enable3d","colorField","colorScale","sizeField","sizeScale","strokeColorField","strokeColorScale","heightField","heightScale","textLabelField","colorScaleType","colorAggregation","getColorValue","getColorWeight","colorRange","strokeOpacity","strokeColorRange","getElevation","heightRange","sizeRange","getPointRadius","radiusRange","getText","pointType","radius","getTextPixelOffset"],"sources":["../../../src/api/parseMap.ts"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {\n  AGGREGATION,\n  getLayer,\n  getColorAccessor,\n  getColorValueAccessor,\n  getSizeAccessor,\n  getTextAccessor,\n  getTextPixelOffsetAccessor\n} from './layer-map';\nimport {_flatten as flatten, log} from '@deck.gl/core';\nimport {assert} from '../utils';\n\nexport function parseMap(json) {\n  const {keplerMapConfig, datasets} = json;\n  assert(keplerMapConfig.version === 'v1', 'Only support Kepler v1');\n  const {mapState, mapStyle} = keplerMapConfig.config;\n  const {layers, layerBlending, interactionConfig} = keplerMapConfig.config.visState;\n\n  return {\n    id: json.id,\n    title: json.title,\n    description: json.description,\n    createdAt: json.createdAt,\n    updatedAt: json.updatedAt,\n    initialViewState: mapState,\n    mapStyle,\n    layers: extractTextLayers(layers.reverse()).map(({id, type, config, visualChannels}) => {\n      try {\n        const {dataId} = config;\n        const dataset = datasets.find(d => d.id === dataId);\n        assert(dataset, `No dataset matching dataId: ${dataId}`);\n        const {data} = dataset;\n        assert(data, `No data loaded for dataId: ${dataId}`);\n        const {Layer, propMap, defaultProps} = getLayer(type, config, dataset);\n        return new Layer({\n          id,\n          data,\n          ...defaultProps,\n          ...createBlendingProps(layerBlending),\n          ...(!config.textLabel && createInteractionProps(interactionConfig)),\n          ...createStyleProps(config, propMap),\n          ...createChannelProps(visualChannels, type, config, data) // Must come after style\n        });\n      } catch (e: any) {\n        log.error(e.message)();\n        return undefined;\n      }\n    })\n  };\n}\n\nfunction extractTextLayers(layers) {\n  return flatten(\n    layers.map(({id, config, ...rest}) => {\n      const {textLabel, ...configRest} = config;\n      return [\n        // Original layer without textLabel\n        {id, config: configRest, ...rest},\n\n        // One layer per valid text label, with full opacity\n        ...textLabel\n          .filter(t => t.field)\n          .map(t => {\n            return {\n              id: `${id}-label-${t.field.name}`,\n              config: {\n                textLabel: t,\n                ...configRest,\n                label: `${config.label}-label-${t.field.name}`,\n                visConfig: {...configRest.visConfig, opacity: 1}\n              },\n              ...rest\n            };\n          })\n      ];\n    })\n  );\n}\n\nfunction createBlendingProps(layerBlending) {\n  if (layerBlending === 'additive') {\n    return {\n      parameters: {\n        blendFunc: [GL.SRC_ALPHA, GL.DST_ALPHA],\n        blendEquation: GL.FUNC_ADD\n      }\n    };\n  } else if (layerBlending === 'subtractive') {\n    return {\n      parameters: {\n        blendFunc: [GL.ONE, GL.ONE_MINUS_DST_COLOR, GL.SRC_ALPHA, GL.DST_ALPHA],\n        blendEquation: [GL.FUNC_SUBTRACT, GL.FUNC_ADD]\n      }\n    };\n  }\n\n  return {};\n}\n\nfunction createInteractionProps(interactionConfig) {\n  const pickable = interactionConfig && interactionConfig.tooltip.enabled;\n  return {\n    autoHighlight: pickable,\n    pickable\n  };\n}\n\nfunction mapProps(source, target, mapping) {\n  for (const sourceKey in mapping) {\n    const sourceValue = source[sourceKey];\n    const targetKey = mapping[sourceKey];\n    if (sourceValue === undefined) {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (typeof targetKey === 'string') {\n      target[targetKey] = sourceValue;\n    } else if (typeof targetKey === 'function') {\n      const [key, value] = Object.entries(targetKey(sourceValue))[0];\n      target[key] = value;\n    } else if (typeof targetKey === 'object') {\n      // Nested definition, recurse down one level (also handles arrays)\n      mapProps(sourceValue, target, targetKey);\n    }\n  }\n}\n\nfunction createStyleProps(config, mapping) {\n  const result: Record<string, any> = {};\n  mapProps(config, result, mapping);\n\n  // Kepler format sometimes omits strokeColor. TODO: remove once we can rely on\n  // `strokeColor` always being sert when `stroke: true`.\n  if (result.stroked && !result.getLineColor) {\n    result.getLineColor = result.getFillColor;\n  }\n  result.highlightColor = config.visConfig.enable3d ? [255, 255, 255, 60] : [252, 242, 26, 255];\n  return result;\n}\n\n/* eslint-disable complexity, max-statements */\nfunction createChannelProps(visualChannels, type, config, data) {\n  const {colorField, colorScale, sizeField, sizeScale, strokeColorField, strokeColorScale} =\n    visualChannels;\n  let {heightField, heightScale} = visualChannels;\n  if (type === 'hexagonId') {\n    heightField = sizeField;\n    heightScale = sizeScale;\n  }\n  const {textLabel, visConfig} = config;\n  const result: Record<string, any> = {};\n  const textLabelField = textLabel && textLabel.field;\n\n  if (type === 'grid' || type === 'hexagon') {\n    result.colorScaleType = colorScale;\n    if (colorField) {\n      const {colorAggregation} = config.visConfig;\n      if (!AGGREGATION[colorAggregation]) {\n        result.getColorValue = getColorValueAccessor(colorField, colorAggregation, data);\n      } else {\n        result.getColorWeight = d => [colorField.name];\n      }\n    }\n  } else if (colorField) {\n    result.getFillColor = getColorAccessor(\n      colorField,\n      colorScale,\n      visConfig.colorRange,\n      1, // Rely on layer opacity\n      data\n    );\n  }\n\n  if (strokeColorField) {\n    const opacity = visConfig.strokeOpacity !== undefined ? visConfig.strokeOpacity : 1;\n    result.getLineColor = getColorAccessor(\n      strokeColorField,\n      strokeColorScale,\n      visConfig.strokeColorRange,\n      opacity,\n      data\n    );\n  }\n  if (heightField) {\n    result.getElevation = getSizeAccessor(\n      heightField,\n      heightScale,\n      visConfig.heightRange || visConfig.sizeRange,\n      data\n    );\n  }\n  if (sizeField) {\n    result.getPointRadius = getSizeAccessor(\n      sizeField,\n      sizeScale,\n      visConfig.radiusRange || visConfig.sizeRange,\n      data\n    );\n  }\n  if (textLabelField) {\n    result.getText = getTextAccessor(textLabelField, data);\n    result.pointType = 'text';\n    const radius = result.getPointRadius || visConfig.radius;\n    result.getTextPixelOffset = getTextPixelOffsetAccessor(textLabel, radius);\n  }\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}