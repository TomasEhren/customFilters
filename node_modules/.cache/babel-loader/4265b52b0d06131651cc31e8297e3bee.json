{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nexport function makeStream(source, options) {\n  var iterator = source[Symbol.asyncIterator] ? source[Symbol.asyncIterator]() : source[Symbol.iterator]();\n  return new ReadableStream({\n    type: 'bytes',\n    pull: function pull(controller) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$iterator$next, done, value;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return iterator.next();\n\n              case 3:\n                _yield$iterator$next = _context.sent;\n                done = _yield$iterator$next.done;\n                value = _yield$iterator$next.value;\n\n                if (done) {\n                  controller.close();\n                } else {\n                  controller.enqueue(new Uint8Array(value));\n                }\n\n                _context.next = 12;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](0);\n                controller.error(_context.t0);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 9]]);\n      }))();\n    },\n    cancel: function cancel() {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _iterator$return;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return iterator === null || iterator === void 0 ? void 0 : (_iterator$return = iterator.return) === null || _iterator$return === void 0 ? void 0 : _iterator$return.call(iterator);\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    }\n  }, _objectSpread({\n    highWaterMark: Math.pow(2, 24)\n  }, options));\n}","map":{"version":3,"mappings":";;;AAaA,OAAO,SAASA,UAAT,CACLC,MADK,EAELC,OAFK,EAGW;EAChB,IAAMC,QAAQ,GAAGF,MAAM,CAACG,MAAM,CAACC,aAAR,CAANJ,GACZA,MAAD,CAAuCG,MAAM,CAACC,aAA9C,CAACJ,EADYA,GAEZA,MAAD,CAAkCG,MAAM,CAACD,QAAzC,CAACF,EAFL;EAIA,OAAO,IAAIK,cAAJ,CACL;IAKEC,IAAI,EAAE,OALR;IAOQC,IAPR,gBAOaC,UAPb,EAOyB;MAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA,OAESN,QAAQ,CAACO,IAATP,EAFT;;cAAA;gBAAA;gBAEZQ,IAFY,wBAEZA,IAFY;gBAENC,KAFM,wBAENA,KAFM;;gBAGnB,IAAID,IAAJ,EAAU;kBACRF,UAAU,CAACI,KAAXJ;gBADF,OAEO;kBAELA,UAAU,CAACK,OAAXL,CAAmB,IAAIM,UAAJ,CAAeH,KAAf,CAAnBH;gBACD;;gBARkB;gBAAA;;cAAA;gBAAA;gBAAA;gBAUnBA,UAAU,CAACO,KAAXP;;cAVmB;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAPzB;IAqBQQ,MArBR,oBAqBiB;MAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACPd,QAAN,SAAMA,YAAN,WAAMA,GAAN,MAAMA,GAAN,oBAAMA,QAAQ,CAAEe,MAAhB,qDAAMC,+BADO;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEd;EAvBH,CADK;IA6BHC,aAAa,WAAE,CAAF,EAAO,EAAP;EA7BV,GA8BAlB,OA9BA,EAAP;AAiCD","names":["makeStream","source","options","iterator","Symbol","asyncIterator","ReadableStream","type","pull","controller","next","done","value","close","enqueue","Uint8Array","error","cancel","return","_iterator$return","highWaterMark"],"sources":["../../../../src/iterators/make-stream/make-dom-stream.ts"],"sourcesContent":["export type MakeStreamOptions = {\n  /** Stream allocates an arrayBuffer. Enables use of a default reader. */\n  autoAllocateChunkSize?: number;\n  /** Total number of chunks in queue before back pressure is applied */\n  highWaterMark?: number;\n};\n\n/**\n * Builds a DOM stream from an iterator\n * This stream is currently used in browsers only,\n * but note that Web stream support is present in Node from Node 16\n * https://nodejs.org/api/webstreams.html#webstreams_web_streams_api\n */\nexport function makeStream<ArrayBuffer>(\n  source: Iterable<ArrayBuffer> | AsyncIterable<ArrayBuffer>,\n  options?: MakeStreamOptions\n): ReadableStream {\n  const iterator = source[Symbol.asyncIterator]\n    ? (source as AsyncIterable<ArrayBuffer>)[Symbol.asyncIterator]()\n    : (source as Iterable<ArrayBuffer>)[Symbol.iterator]();\n\n  return new ReadableStream<Uint8Array>(\n    {\n      // Create a byte stream (enables `Response(stream).arrayBuffer()`)\n      // Only supported on Chrome\n      // See: https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController\n      // @ts-expect-error Only Chrome supports byte streams\n      type: 'bytes',\n\n      async pull(controller) {\n        try {\n          const {done, value} = await iterator.next();\n          if (done) {\n            controller.close();\n          } else {\n            // TODO - ignores controller.desiredSize\n            controller.enqueue(new Uint8Array(value));\n          }\n        } catch (error) {\n          controller.error(error);\n        }\n      },\n\n      async cancel() {\n        await iterator?.return?.();\n      }\n    },\n    // options: QueingStrategy<Uint8Array>\n    {\n      // This is bytes, not chunks\n      highWaterMark: 2 ** 24,\n      ...options\n    }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}