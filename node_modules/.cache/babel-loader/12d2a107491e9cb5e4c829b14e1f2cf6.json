{"ast":null,"code":"const defaultGetValue = points => points.length;\n\nimport { clamp, getQuantileDomain, getOrdinalDomain } from './scale-utils';\nconst MAX_32_BIT_FLOAT = 3.402823466e38;\n\nconst defaultGetPoints = bin => bin.points;\n\nconst defaultGetIndex = bin => bin.index;\n\nconst ascending = (a, b) => a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n\nconst defaultProps = {\n  getValue: defaultGetValue,\n  getPoints: defaultGetPoints,\n  getIndex: defaultGetIndex,\n  filterData: null\n};\nexport default class BinSorter {\n  constructor() {\n    let bins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultProps;\n    this.aggregatedBins = this.getAggregatedBins(bins, props);\n\n    this._updateMinMaxValues();\n\n    this.binMap = this.getBinMap();\n  }\n\n  getAggregatedBins(bins, props) {\n    const {\n      getValue = defaultGetValue,\n      getPoints = defaultGetPoints,\n      getIndex = defaultGetIndex,\n      filterData\n    } = props;\n    const hasFilter = typeof filterData === 'function';\n    const binCount = bins.length;\n    const aggregatedBins = [];\n    let index = 0;\n\n    for (let binIndex = 0; binIndex < binCount; binIndex++) {\n      const bin = bins[binIndex];\n      const points = getPoints(bin);\n      const i = getIndex(bin);\n      const filteredPoints = hasFilter ? points.filter(filterData) : points;\n      bin.filteredPoints = hasFilter ? filteredPoints : null;\n      const value = filteredPoints.length ? getValue(filteredPoints) : null;\n\n      if (value !== null && value !== undefined) {\n        aggregatedBins[index] = {\n          i: Number.isFinite(i) ? i : binIndex,\n          value,\n          counts: filteredPoints.length\n        };\n        index++;\n      }\n    }\n\n    return aggregatedBins;\n  }\n\n  _percentileToIndex(percentileRange) {\n    const len = this.sortedBins.length;\n\n    if (len < 2) {\n      return [0, 0];\n    }\n\n    const [lower, upper] = percentileRange.map(n => clamp(n, 0, 100));\n    const lowerIdx = Math.ceil(lower / 100 * (len - 1));\n    const upperIdx = Math.floor(upper / 100 * (len - 1));\n    return [lowerIdx, upperIdx];\n  }\n\n  getBinMap() {\n    const binMap = {};\n\n    for (const bin of this.aggregatedBins) {\n      binMap[bin.i] = bin;\n    }\n\n    return binMap;\n  }\n\n  _updateMinMaxValues() {\n    let maxCount = 0;\n    let maxValue = 0;\n    let minValue = MAX_32_BIT_FLOAT;\n    let totalCount = 0;\n\n    for (const x of this.aggregatedBins) {\n      maxCount = maxCount > x.counts ? maxCount : x.counts;\n      maxValue = maxValue > x.value ? maxValue : x.value;\n      minValue = minValue < x.value ? minValue : x.value;\n      totalCount += x.counts;\n    }\n\n    this.maxCount = maxCount;\n    this.maxValue = maxValue;\n    this.minValue = minValue;\n    this.totalCount = totalCount;\n  }\n\n  getValueRange(percentileRange) {\n    if (!this.sortedBins) {\n      this.sortedBins = this.aggregatedBins.sort((a, b) => ascending(a.value, b.value));\n    }\n\n    if (!this.sortedBins.length) {\n      return [];\n    }\n\n    let lowerIdx = 0;\n    let upperIdx = this.sortedBins.length - 1;\n\n    if (Array.isArray(percentileRange)) {\n      const idxRange = this._percentileToIndex(percentileRange);\n\n      lowerIdx = idxRange[0];\n      upperIdx = idxRange[1];\n    }\n\n    return [this.sortedBins[lowerIdx].value, this.sortedBins[upperIdx].value];\n  }\n\n  getValueDomainByScale(scale) {\n    let [lower = 0, upper = 100] = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    if (!this.sortedBins) {\n      this.sortedBins = this.aggregatedBins.sort((a, b) => ascending(a.value, b.value));\n    }\n\n    if (!this.sortedBins.length) {\n      return [];\n    }\n\n    const indexEdge = this._percentileToIndex([lower, upper]);\n\n    return this._getScaleDomain(scale, indexEdge);\n  }\n\n  _getScaleDomain(scaleType, _ref) {\n    let [lowerIdx, upperIdx] = _ref;\n    const bins = this.sortedBins;\n\n    switch (scaleType) {\n      case 'quantize':\n      case 'linear':\n        return [bins[lowerIdx].value, bins[upperIdx].value];\n\n      case 'quantile':\n        return getQuantileDomain(bins.slice(lowerIdx, upperIdx + 1), d => d.value);\n\n      case 'ordinal':\n        return getOrdinalDomain(bins, d => d.value);\n\n      default:\n        return [bins[lowerIdx].value, bins[upperIdx].value];\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["defaultGetValue","points","length","clamp","getQuantileDomain","getOrdinalDomain","MAX_32_BIT_FLOAT","defaultGetPoints","bin","defaultGetIndex","index","ascending","a","b","NaN","defaultProps","getValue","getPoints","getIndex","filterData","BinSorter","constructor","bins","props","aggregatedBins","getAggregatedBins","_updateMinMaxValues","binMap","getBinMap","hasFilter","binCount","binIndex","i","filteredPoints","filter","value","undefined","Number","isFinite","counts","_percentileToIndex","percentileRange","len","sortedBins","lower","upper","map","n","lowerIdx","Math","ceil","upperIdx","floor","maxCount","maxValue","minValue","totalCount","x","getValueRange","sort","Array","isArray","idxRange","getValueDomainByScale","scale","indexEdge","_getScaleDomain","scaleType","slice","d"],"sources":["../../../src/utils/bin-sorter.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// getValue takes an array of points returns a value to sort the bins on.\n// by default it returns the number of points\n// this is where to pass in a function to color the bins by\n// avg/mean/max of specific value of the point\nconst defaultGetValue = points => points.length;\n\nimport {clamp, getQuantileDomain, getOrdinalDomain} from './scale-utils';\n\nconst MAX_32_BIT_FLOAT = 3.402823466e38;\n\n// access array of points in each bin\nconst defaultGetPoints = bin => bin.points;\n// access index of each bin\nconst defaultGetIndex = bin => bin.index;\n\n// d3-scending\nconst ascending = (a, b) => (a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN);\n\nconst defaultProps = {\n  getValue: defaultGetValue,\n  getPoints: defaultGetPoints,\n  getIndex: defaultGetIndex,\n  filterData: null\n};\n\nexport default class BinSorter {\n  constructor(bins = [], props = defaultProps) {\n    this.aggregatedBins = this.getAggregatedBins(bins, props);\n    this._updateMinMaxValues();\n    this.binMap = this.getBinMap();\n  }\n\n  /**\n   * Get an array of object with aggregated values and index of bins\n   * Array object will be sorted by value optionally.\n   * @param {Array} bins\n   * @param {Function} getValue\n   * @return {Array} array of values and index lookup\n   */\n  getAggregatedBins(bins, props) {\n    const {\n      getValue = defaultGetValue,\n      getPoints = defaultGetPoints,\n      getIndex = defaultGetIndex,\n      filterData\n    } = props;\n\n    const hasFilter = typeof filterData === 'function';\n    const binCount = bins.length;\n    const aggregatedBins = [];\n    let index = 0;\n\n    for (let binIndex = 0; binIndex < binCount; binIndex++) {\n      const bin = bins[binIndex];\n      const points = getPoints(bin);\n      const i = getIndex(bin);\n\n      const filteredPoints = hasFilter ? points.filter(filterData) : points;\n\n      bin.filteredPoints = hasFilter ? filteredPoints : null;\n\n      const value = filteredPoints.length ? getValue(filteredPoints) : null;\n\n      if (value !== null && value !== undefined) {\n        // filter bins if value is null or undefined\n        aggregatedBins[index] = {\n          i: Number.isFinite(i) ? i : binIndex,\n          value,\n          counts: filteredPoints.length\n        };\n        index++;\n      }\n    }\n    return aggregatedBins;\n  }\n\n  _percentileToIndex(percentileRange) {\n    const len = this.sortedBins.length;\n    if (len < 2) {\n      return [0, 0];\n    }\n\n    const [lower, upper] = percentileRange.map(n => clamp(n, 0, 100));\n\n    const lowerIdx = Math.ceil((lower / 100) * (len - 1));\n    const upperIdx = Math.floor((upper / 100) * (len - 1));\n\n    return [lowerIdx, upperIdx];\n  }\n\n  /**\n   * Get a mapping from cell/hexagon index to sorted bin\n   * This is used to retrieve bin value for color calculation\n   * @return {Object} bin index to aggregatedBins\n   */\n  getBinMap() {\n    const binMap = {};\n    for (const bin of this.aggregatedBins) {\n      binMap[bin.i] = bin;\n    }\n    return binMap;\n  }\n\n  // Private\n\n  /**\n   * Get ths max count of all bins\n   * @return {Number | Boolean} max count\n   */\n  _updateMinMaxValues() {\n    let maxCount = 0;\n    let maxValue = 0;\n    let minValue = MAX_32_BIT_FLOAT;\n    let totalCount = 0;\n    for (const x of this.aggregatedBins) {\n      maxCount = maxCount > x.counts ? maxCount : x.counts;\n      maxValue = maxValue > x.value ? maxValue : x.value;\n      minValue = minValue < x.value ? minValue : x.value;\n      totalCount += x.counts;\n    }\n    this.maxCount = maxCount;\n    this.maxValue = maxValue;\n    this.minValue = minValue;\n    this.totalCount = totalCount;\n  }\n\n  /**\n   * Get range of values of all bins\n   * @param {Number[]} range\n   * @param {Number} range[0] - lower bound\n   * @param {Number} range[1] - upper bound\n   * @return {Array} array of new value range\n   */\n  getValueRange(percentileRange) {\n    if (!this.sortedBins) {\n      this.sortedBins = this.aggregatedBins.sort((a, b) => ascending(a.value, b.value));\n    }\n    if (!this.sortedBins.length) {\n      return [];\n    }\n    let lowerIdx = 0;\n    let upperIdx = this.sortedBins.length - 1;\n\n    if (Array.isArray(percentileRange)) {\n      const idxRange = this._percentileToIndex(percentileRange);\n      lowerIdx = idxRange[0];\n      upperIdx = idxRange[1];\n    }\n\n    return [this.sortedBins[lowerIdx].value, this.sortedBins[upperIdx].value];\n  }\n\n  getValueDomainByScale(scale, [lower = 0, upper = 100] = []) {\n    if (!this.sortedBins) {\n      this.sortedBins = this.aggregatedBins.sort((a, b) => ascending(a.value, b.value));\n    }\n    if (!this.sortedBins.length) {\n      return [];\n    }\n    const indexEdge = this._percentileToIndex([lower, upper]);\n\n    return this._getScaleDomain(scale, indexEdge);\n  }\n\n  _getScaleDomain(scaleType, [lowerIdx, upperIdx]) {\n    const bins = this.sortedBins;\n\n    switch (scaleType) {\n      case 'quantize':\n      case 'linear':\n        return [bins[lowerIdx].value, bins[upperIdx].value];\n\n      case 'quantile':\n        return getQuantileDomain(bins.slice(lowerIdx, upperIdx + 1), d => d.value);\n\n      case 'ordinal':\n        return getOrdinalDomain(bins, d => d.value);\n\n      default:\n        return [bins[lowerIdx].value, bins[upperIdx].value];\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}