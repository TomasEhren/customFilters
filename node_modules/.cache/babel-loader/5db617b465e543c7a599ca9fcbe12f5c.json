{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport View from './view';\nimport Viewport from '../viewports/viewport';\nimport { Matrix4 } from '@math.gl/core';\nimport { pixelsToWorld, fovyToAltitude } from '@math.gl/web-mercator';\nimport OrbitController from '../controllers/orbit-controller';\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction getViewMatrix(_ref) {\n  let {\n    height,\n    focalDistance,\n    orbitAxis,\n    rotationX,\n    rotationOrbit,\n    zoom\n  } = _ref;\n  const up = orbitAxis === 'Z' ? [0, 0, 1] : [0, 1, 0];\n  const eye = orbitAxis === 'Z' ? [0, -focalDistance, 0] : [0, 0, focalDistance];\n  const viewMatrix = new Matrix4().lookAt({\n    eye,\n    up\n  });\n  viewMatrix.rotateX(rotationX * DEGREES_TO_RADIANS);\n\n  if (orbitAxis === 'Z') {\n    viewMatrix.rotateZ(rotationOrbit * DEGREES_TO_RADIANS);\n  } else {\n    viewMatrix.rotateY(rotationOrbit * DEGREES_TO_RADIANS);\n  }\n\n  const projectionScale = Math.pow(2, zoom) / (height || 1);\n  viewMatrix.scale(projectionScale);\n  return viewMatrix;\n}\n\nclass OrbitViewport extends Viewport {\n  constructor(props) {\n    const {\n      height,\n      projectionMatrix,\n      fovy = 50,\n      orbitAxis,\n      target = [0, 0, 0],\n      rotationX = 0,\n      rotationOrbit = 0,\n      zoom = 0\n    } = props;\n    const focalDistance = projectionMatrix ? projectionMatrix[5] / 2 : fovyToAltitude(fovy);\n    super({ ...props,\n      longitude: null,\n      viewMatrix: getViewMatrix({\n        height,\n        focalDistance,\n        orbitAxis,\n        rotationX,\n        rotationOrbit,\n        zoom\n      }),\n      fovy,\n      focalDistance,\n      position: target,\n      zoom\n    });\n\n    _defineProperty(this, \"projectedCenter\", void 0);\n\n    this.projectedCenter = this.project(this.center);\n  }\n\n  unproject(xyz) {\n    let {\n      topLeft = true\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const [x, y, z = this.projectedCenter[2]] = xyz;\n    const y2 = topLeft ? y : this.height - y;\n    const [X, Y, Z] = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix);\n    return [X, Y, Z];\n  }\n\n  panByPosition(coords, pixel) {\n    const p0 = this.project(coords);\n    const nextCenter = [this.width / 2 + p0[0] - pixel[0], this.height / 2 + p0[1] - pixel[1], this.projectedCenter[2]];\n    return {\n      target: this.unproject(nextCenter)\n    };\n  }\n\n}\n\n_defineProperty(OrbitViewport, \"displayName\", 'OrbitView');\n\nexport default class OrbitView extends View {\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      orbitAxis = 'Z'\n    } = props;\n    super({ ...props,\n      orbitAxis,\n      type: OrbitViewport\n    });\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: OrbitController\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["View","Viewport","Matrix4","pixelsToWorld","fovyToAltitude","OrbitController","DEGREES_TO_RADIANS","Math","PI","getViewMatrix","height","focalDistance","orbitAxis","rotationX","rotationOrbit","zoom","up","eye","viewMatrix","lookAt","rotateX","rotateZ","rotateY","projectionScale","pow","scale","OrbitViewport","constructor","props","projectionMatrix","fovy","target","longitude","position","_defineProperty","projectedCenter","project","center","unproject","xyz","topLeft","x","y","z","y2","X","Y","Z","pixelUnprojectionMatrix","panByPosition","coords","pixel","p0","nextCenter","width","OrbitView","type","controller","_getControllerProps"],"sources":["../../../src/views/orbit-view.ts"],"sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\n\nimport {Matrix4} from '@math.gl/core';\nimport {pixelsToWorld, fovyToAltitude} from '@math.gl/web-mercator';\nimport OrbitController from '../controllers/orbit-controller';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction getViewMatrix({height, focalDistance, orbitAxis, rotationX, rotationOrbit, zoom}) {\n  // We position the camera so that one common space unit (world space unit scaled by zoom)\n  // at the target maps to one screen pixel.\n  // This is a similar technique to that used in web mercator projection\n  // By doing so we are able to convert between common space and screen space sizes efficiently\n  // in the vertex shader.\n  const up = orbitAxis === 'Z' ? [0, 0, 1] : [0, 1, 0];\n  const eye = orbitAxis === 'Z' ? [0, -focalDistance, 0] : [0, 0, focalDistance];\n\n  const viewMatrix = new Matrix4().lookAt({eye, up});\n\n  viewMatrix.rotateX(rotationX * DEGREES_TO_RADIANS);\n  if (orbitAxis === 'Z') {\n    viewMatrix.rotateZ(rotationOrbit * DEGREES_TO_RADIANS);\n  } else {\n    viewMatrix.rotateY(rotationOrbit * DEGREES_TO_RADIANS);\n  }\n\n  // When height increases, we need to increase the distance from the camera to the target to\n  // keep the 1:1 mapping. However, this also changes the projected depth of each position by\n  // moving them further away between the near/far plane.\n  // Without modifying the default near/far planes, we instead scale down the common space to\n  // remove the distortion to the depth field.\n  const projectionScale = Math.pow(2, zoom) / (height || 1);\n  viewMatrix.scale(projectionScale);\n\n  return viewMatrix;\n}\n\nclass OrbitViewport extends Viewport {\n  static displayName = 'OrbitView';\n\n  projectedCenter;\n\n  constructor(props) {\n    const {\n      height,\n\n      projectionMatrix,\n\n      fovy = 50, // For setting camera position\n      orbitAxis, // Orbit axis with 360 degrees rotating freedom, can only be 'Y' or 'Z'\n      target = [0, 0, 0], // Which point is camera looking at, default origin\n\n      rotationX = 0, // Rotating angle around X axis\n      rotationOrbit = 0, // Rotating angle around orbit axis\n\n      zoom = 0\n    } = props;\n\n    const focalDistance = projectionMatrix ? projectionMatrix[5] / 2 : fovyToAltitude(fovy);\n\n    super({\n      ...props,\n      // in case viewState contains longitude/latitude values,\n      // make sure that the base Viewport class does not treat this as a geospatial viewport\n      longitude: null,\n      viewMatrix: getViewMatrix({\n        height,\n        focalDistance,\n        orbitAxis,\n        rotationX,\n        rotationOrbit,\n        zoom\n      }),\n      fovy,\n      focalDistance,\n      position: target,\n      zoom\n    });\n\n    this.projectedCenter = this.project(this.center);\n  }\n\n  unproject(xyz, {topLeft = true} = {}) {\n    const [x, y, z = this.projectedCenter[2]] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const [X, Y, Z] = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix);\n    return [X, Y, Z];\n  }\n\n  panByPosition(coords, pixel) {\n    const p0 = this.project(coords);\n    const nextCenter = [\n      this.width / 2 + p0[0] - pixel[0],\n      this.height / 2 + p0[1] - pixel[1],\n      this.projectedCenter[2]\n    ];\n    return {\n      target: this.unproject(nextCenter)\n    };\n  }\n}\n\nexport default class OrbitView extends View {\n  constructor(props = {}) {\n    // @ts-expect-error\n    const {orbitAxis = 'Z'} = props;\n\n    super({\n      ...props,\n      orbitAxis,\n      type: OrbitViewport\n    });\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: OrbitController\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}