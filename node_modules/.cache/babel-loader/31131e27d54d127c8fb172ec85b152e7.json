{"ast":null,"code":"import GLTFScenegraph from '../../api/gltf-scenegraph';\nconst KHR_MATERIALS_UNLIT = 'KHR_materials_unlit';\nexport const name = KHR_MATERIALS_UNLIT;\nexport async function decode(gltfData) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {\n    json\n  } = gltfScenegraph;\n  gltfScenegraph.removeExtension(KHR_MATERIALS_UNLIT);\n\n  for (const material of json.materials || []) {\n    const extension = material.extensions && material.extensions.KHR_materials_unlit;\n\n    if (extension) {\n      material.unlit = true;\n    }\n\n    gltfScenegraph.removeObjectExtension(material, KHR_MATERIALS_UNLIT);\n  }\n}\nexport function encode(gltfData) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {\n    json\n  } = gltfScenegraph;\n\n  if (gltfScenegraph.materials) {\n    for (const material of json.materials || []) {\n      if (material.unlit) {\n        delete material.unlit;\n        gltfScenegraph.addObjectExtension(material, KHR_MATERIALS_UNLIT, {});\n        gltfScenegraph.addExtension(KHR_MATERIALS_UNLIT);\n      }\n    }\n  }\n}","map":{"version":3,"mappings":"AAKA,OAAOA,cAAP,MAA2B,2BAA3B;AAEA,MAAMC,mBAAmB,GAAG,qBAA5B;AAEA,OAAO,MAAMC,IAAI,GAAGD,mBAAb;AAEP,OAAO,eAAeE,MAAf,CAAsBC,QAAtB,EAA6D;EAClE,MAAMC,cAAc,GAAG,IAAIL,cAAJ,CAAmBI,QAAnB,CAAvB;EACA,MAAM;IAACE;EAAD,IAASD,cAAf;EAGAA,cAAc,CAACE,eAAfF,CAA+BJ,mBAA/BI;;EAIA,KAAK,MAAMG,QAAX,IAAuBF,IAAI,CAACG,SAALH,IAAkB,EAAzC,EAA6C;IAC3C,MAAMI,SAAS,GAAGF,QAAQ,CAACG,UAATH,IAAuBA,QAAQ,CAACG,UAATH,CAAoBI,mBAA7D;;IACA,IAAIF,SAAJ,EAAe;MAEbF,QAAQ,CAACK,KAATL,GAAiB,IAAjBA;IACD;;IACDH,cAAc,CAACS,qBAAfT,CAAqCG,QAArCH,EAA+CJ,mBAA/CI;EACD;AACF;AAED,OAAO,SAASU,MAAT,CAAgBX,QAAhB,EAA0B;EAC/B,MAAMC,cAAc,GAAG,IAAIL,cAAJ,CAAmBI,QAAnB,CAAvB;EACA,MAAM;IAACE;EAAD,IAASD,cAAf;;EAKA,IAAIA,cAAc,CAACI,SAAnB,EAA8B;IAC5B,KAAK,MAAMD,QAAX,IAAuBF,IAAI,CAACG,SAALH,IAAkB,EAAzC,EAA6C;MAE3C,IAAIE,QAAQ,CAACK,KAAb,EAAoB;QAElB,OAAOL,QAAQ,CAACK,KAAhB;QACAR,cAAc,CAACW,kBAAfX,CAAkCG,QAAlCH,EAA4CJ,mBAA5CI,EAAiE,EAAjEA;QACAA,cAAc,CAACY,YAAfZ,CAA4BJ,mBAA5BI;MACD;IACF;EACF;AACF","names":["GLTFScenegraph","KHR_MATERIALS_UNLIT","name","decode","gltfData","gltfScenegraph","json","removeExtension","material","materials","extension","extensions","KHR_materials_unlit","unlit","removeObjectExtension","encode","addObjectExtension","addExtension"],"sources":["../../../../../src/lib/extensions/deprecated/KHR_materials_unlit.ts"],"sourcesContent":["// GLTF EXTENSION: KHR_materials_unlit\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit\n\nimport type {GLTF} from '../../types/gltf-types';\n\nimport GLTFScenegraph from '../../api/gltf-scenegraph';\n\nconst KHR_MATERIALS_UNLIT = 'KHR_materials_unlit';\n\nexport const name = KHR_MATERIALS_UNLIT;\n\nexport async function decode(gltfData: {json: GLTF}): Promise<void> {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  // Remove the top-level extension\n  gltfScenegraph.removeExtension(KHR_MATERIALS_UNLIT);\n\n  // Any nodes that have the extension, add lights field pointing to light object\n  // and remove the extension\n  for (const material of json.materials || []) {\n    const extension = material.extensions && material.extensions.KHR_materials_unlit;\n    if (extension) {\n      // @ts-ignore TODO\n      material.unlit = true;\n    }\n    gltfScenegraph.removeObjectExtension(material, KHR_MATERIALS_UNLIT);\n  }\n}\n\nexport function encode(gltfData) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  // Any nodes that have lights field pointing to light object\n  // add the extension\n  // @ts-ignore\n  if (gltfScenegraph.materials) {\n    for (const material of json.materials || []) {\n      // @ts-ignore\n      if (material.unlit) {\n        // @ts-ignore\n        delete material.unlit;\n        gltfScenegraph.addObjectExtension(material, KHR_MATERIALS_UNLIT, {});\n        gltfScenegraph.addExtension(KHR_MATERIALS_UNLIT);\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}