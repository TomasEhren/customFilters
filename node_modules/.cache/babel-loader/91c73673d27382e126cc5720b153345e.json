{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { fetchFile } from '@loaders.gl/core';\nimport { assert } from '@loaders.gl/loader-utils';\nvar CESIUM_ION_URL = 'https://api.cesium.com/v1/assets';\nexport function getIonTilesetMetadata(_x, _x2) {\n  return _getIonTilesetMetadata.apply(this, arguments);\n}\n\nfunction _getIonTilesetMetadata() {\n  _getIonTilesetMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(accessToken, assetId) {\n    var assets, _iterator, _step, item, ionAssetMetadata, type, url;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (assetId) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 3;\n            return getIonAssets(accessToken);\n\n          case 3:\n            assets = _context.sent;\n            _iterator = _createForOfIteratorHelper(assets.items);\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                item = _step.value;\n\n                if (item.type === '3DTILES') {\n                  assetId = item.id;\n                }\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n          case 6:\n            _context.next = 8;\n            return getIonAssetMetadata(accessToken, assetId);\n\n          case 8:\n            ionAssetMetadata = _context.sent;\n            type = ionAssetMetadata.type, url = ionAssetMetadata.url;\n            assert(type === '3DTILES' && url);\n            ionAssetMetadata.headers = {\n              Authorization: \"Bearer \".concat(ionAssetMetadata.accessToken)\n            };\n            return _context.abrupt(\"return\", ionAssetMetadata);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getIonTilesetMetadata.apply(this, arguments);\n}\n\nexport function getIonAssets(_x3) {\n  return _getIonAssets.apply(this, arguments);\n}\n\nfunction _getIonAssets() {\n  _getIonAssets = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(accessToken) {\n    var url, headers, response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            assert(accessToken);\n            url = CESIUM_ION_URL;\n            headers = {\n              Authorization: \"Bearer \".concat(accessToken)\n            };\n            _context2.next = 5;\n            return fetchFile(url, {\n              fetch: {\n                headers: headers\n              }\n            });\n\n          case 5:\n            response = _context2.sent;\n\n            if (response.ok) {\n              _context2.next = 8;\n              break;\n            }\n\n            throw new Error(response.statusText);\n\n          case 8:\n            _context2.next = 10;\n            return response.json();\n\n          case 10:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getIonAssets.apply(this, arguments);\n}\n\nexport function getIonAssetMetadata(_x4, _x5) {\n  return _getIonAssetMetadata.apply(this, arguments);\n}\n\nfunction _getIonAssetMetadata() {\n  _getIonAssetMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(accessToken, assetId) {\n    var headers, url, response, metadata, tilesetInfo;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            assert(accessToken, assetId);\n            headers = {\n              Authorization: \"Bearer \".concat(accessToken)\n            };\n            url = \"\".concat(CESIUM_ION_URL, \"/\").concat(assetId);\n            _context3.next = 5;\n            return fetchFile(\"\".concat(url), {\n              fetch: {\n                headers: headers\n              }\n            });\n\n          case 5:\n            response = _context3.sent;\n\n            if (response.ok) {\n              _context3.next = 8;\n              break;\n            }\n\n            throw new Error(response.statusText);\n\n          case 8:\n            _context3.next = 10;\n            return response.json();\n\n          case 10:\n            metadata = _context3.sent;\n            _context3.next = 13;\n            return fetchFile(\"\".concat(url, \"/endpoint\"), {\n              fetch: {\n                headers: headers\n              }\n            });\n\n          case 13:\n            response = _context3.sent;\n\n            if (response.ok) {\n              _context3.next = 16;\n              break;\n            }\n\n            throw new Error(response.statusText);\n\n          case 16:\n            _context3.next = 18;\n            return response.json();\n\n          case 18:\n            tilesetInfo = _context3.sent;\n            metadata = _objectSpread(_objectSpread({}, metadata), tilesetInfo);\n            return _context3.abrupt(\"return\", metadata);\n\n          case 21:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getIonAssetMetadata.apply(this, arguments);\n}","map":{"version":3,"mappings":"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","names":["fetchFile","assert","CESIUM_ION_URL","getIonTilesetMetadata","accessToken","assetId","getIonAssets","assets","items","item","type","id","getIonAssetMetadata","ionAssetMetadata","url","headers","Authorization","fetch","response","ok","Error","statusText","json","metadata","tilesetInfo"],"sources":["../../../../src/lib/ion/ion.ts"],"sourcesContent":["// Minimal support to load tilsets from the Cesium ION services\n\nimport {fetchFile} from '@loaders.gl/core';\nimport {assert} from '@loaders.gl/loader-utils';\n\nconst CESIUM_ION_URL = 'https://api.cesium.com/v1/assets';\n\n// Returns `{url, headers, type, attributions}` for an ion tileset\nexport async function getIonTilesetMetadata(accessToken, assetId) {\n  // Step 1, if no asset id, look for first 3DTILES asset associated with this token.\n  if (!assetId) {\n    const assets = await getIonAssets(accessToken);\n    for (const item of assets.items) {\n      if (item.type === '3DTILES') {\n        assetId = item.id;\n      }\n    }\n  }\n\n  // Step 2: Query metdatadata for this asset.\n  const ionAssetMetadata = await getIonAssetMetadata(accessToken, assetId);\n  const {type, url} = ionAssetMetadata;\n  assert(type === '3DTILES' && url);\n\n  // Prepare a headers object for fetch\n  ionAssetMetadata.headers = {\n    Authorization: `Bearer ${ionAssetMetadata.accessToken}`\n  };\n  return ionAssetMetadata;\n}\n\n// Return a list of all assets associated with accessToken\nexport async function getIonAssets(accessToken) {\n  assert(accessToken);\n  const url = CESIUM_ION_URL;\n  const headers = {Authorization: `Bearer ${accessToken}`};\n  const response = await fetchFile(url, {fetch: {headers}});\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n  return await response.json();\n}\n\n// Return metadata for a specific asset associated with token\nexport async function getIonAssetMetadata(accessToken, assetId) {\n  assert(accessToken, assetId);\n  const headers = {Authorization: `Bearer ${accessToken}`};\n\n  const url = `${CESIUM_ION_URL}/${assetId}`;\n  // https://cesium.com/docs/rest-api/#operation/getAsset\n  // Retrieves metadata information about a specific asset.\n  let response = await fetchFile(`${url}`, {fetch: {headers}});\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n  let metadata = await response.json();\n\n  // https://cesium.com/docs/rest-api/#operation/getAssetEndpoint\n  // Retrieves information and credentials that allow you to access the tiled asset data for visualization and analysis.\n  response = await fetchFile(`${url}/endpoint`, {fetch: {headers}});\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n  const tilesetInfo = await response.json();\n\n  // extract dataset description\n  metadata = {\n    ...metadata,\n    ...tilesetInfo\n  };\n\n  return metadata;\n}\n"]},"metadata":{},"sourceType":"module"}