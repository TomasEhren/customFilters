{"ast":null,"code":"import { Layer, project32, picking, log, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport PathTesselator from './path-tesselator';\nimport vs from './path-layer-vertex.glsl';\nimport fs from './path-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  widthUnits: 'meters',\n  widthScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  widthMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  widthMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  jointRounded: false,\n  capRounded: false,\n  miterLimit: {\n    type: 'number',\n    min: 0,\n    value: 4\n  },\n  billboard: false,\n  _pathType: null,\n  getPath: {\n    type: 'accessor',\n    value: object => object.path\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  rounded: {\n    deprecatedFor: ['jointRounded', 'capRounded']\n  }\n};\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\nexport default class PathLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, picking]\n    });\n  }\n\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const noAlloc = true;\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      positions: {\n        size: 3,\n        vertexOffset: 1,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPath',\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          instanceLeftPositions: {\n            vertexOffset: 0\n          },\n          instanceStartPositions: {\n            vertexOffset: 1\n          },\n          instanceEndPositions: {\n            vertexOffset: 2\n          },\n          instanceRightPositions: {\n            vertexOffset: 3\n          }\n        }\n      },\n      instanceTypes: {\n        size: 1,\n        type: 5121,\n        update: this.calculateSegmentTypes,\n        noAlloc\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getWidth',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: 1\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        accessor: 'getColor',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: DEFAULT_COLOR\n      },\n      instancePickingColors: {\n        size: 3,\n        type: 5121,\n        accessor: (object, _ref) => {\n          let {\n            index,\n            target: value\n          } = _ref;\n          return this.encodePickingColor(object && object.__source ? object.__source.index : index, value);\n        }\n      }\n    });\n    this.setState({\n      pathTesselator: new PathTesselator({\n        fp64: this.use64bitPositions()\n      })\n    });\n\n    if (this.props.getDashArray && !this.props.extensions.length) {\n      log.removed('getDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState(_ref2) {\n    let {\n      oldProps,\n      props,\n      changeFlags\n    } = _ref2;\n    super.updateState({\n      props,\n      oldProps,\n      changeFlags\n    });\n    const attributeManager = this.getAttributeManager();\n    const geometryChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath);\n\n    if (geometryChanged) {\n      const {\n        pathTesselator\n      } = this.state;\n      const buffers = props.data.attributes || {};\n      pathTesselator.updateGeometry({\n        data: props.data,\n        geometryBuffer: buffers.getPath,\n        buffers,\n        normalize: !props._pathType,\n        loop: props._pathType === 'loop',\n        getGeometry: props.getPath,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        resolution: this.context.viewport.resolution,\n        dataChanged: changeFlags.dataChanged\n      });\n      this.setState({\n        numInstances: pathTesselator.instanceCount,\n        startIndices: pathTesselator.vertexStarts\n      });\n\n      if (!changeFlags.dataChanged) {\n        attributeManager.invalidateAll();\n      }\n    }\n\n    if (changeFlags.extensionsChanged) {\n      var _this$state$model;\n\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager.invalidateAll();\n    }\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {\n      index\n    } = info;\n    const {\n      data\n    } = this.props;\n\n    if (data[0] && data[0].__source) {\n      info.object = data.find(d => d.__source.index === index);\n    }\n\n    return info;\n  }\n\n  disablePickingIndex(objectIndex) {\n    const {\n      data\n    } = this.props;\n\n    if (data[0] && data[0].__source) {\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      this._disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw(_ref3) {\n    let {\n      uniforms\n    } = _ref3;\n    const {\n      jointRounded,\n      capRounded,\n      billboard,\n      miterLimit,\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels\n    } = this.props;\n    this.state.model.setUniforms(uniforms).setUniforms({\n      jointType: Number(jointRounded),\n      capType: Number(capRounded),\n      billboard,\n      widthUnits: UNIT[widthUnits],\n      widthScale,\n      miterLimit,\n      widthMinPixels,\n      widthMaxPixels\n    }).draw();\n  }\n\n  _getModel(gl) {\n    const SEGMENT_INDICES = [0, 1, 2, 1, 4, 2, 1, 3, 4, 3, 5, 4];\n    const SEGMENT_POSITIONS = [0, 0, 0, -1, 0, 1, 1, -1, 1, 1, 1, 0];\n    return new Model(gl, { ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 4,\n        attributes: {\n          indices: new Uint16Array(SEGMENT_INDICES),\n          positions: {\n            value: new Float32Array(SEGMENT_POSITIONS),\n            size: 2\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  calculatePositions(attribute) {\n    const {\n      pathTesselator\n    } = this.state;\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('positions');\n  }\n\n  calculateSegmentTypes(attribute) {\n    const {\n      pathTesselator\n    } = this.state;\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('segmentTypes');\n  }\n\n}\nPathLayer.layerName = 'PathLayer';\nPathLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["Layer","project32","picking","log","UNIT","Model","Geometry","PathTesselator","vs","fs","DEFAULT_COLOR","defaultProps","widthUnits","widthScale","type","min","value","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","jointRounded","capRounded","miterLimit","billboard","_pathType","getPath","object","path","getColor","getWidth","rounded","deprecatedFor","ATTRIBUTE_TRANSITION","enter","chunk","length","subarray","PathLayer","getShaders","modules","wrapLongitude","initializeState","noAlloc","attributeManager","getAttributeManager","addInstanced","positions","size","vertexOffset","fp64","use64bitPositions","transition","accessor","update","calculatePositions","shaderAttributes","instanceLeftPositions","instanceStartPositions","instanceEndPositions","instanceRightPositions","instanceTypes","calculateSegmentTypes","instanceStrokeWidths","defaultValue","instanceColors","props","colorFormat","normalized","instancePickingColors","index","target","encodePickingColor","__source","setState","pathTesselator","getDashArray","extensions","removed","updateState","oldProps","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","state","buffers","data","attributes","updateGeometry","geometryBuffer","normalize","loop","getGeometry","positionFormat","resolution","context","viewport","numInstances","instanceCount","startIndices","vertexStarts","invalidateAll","extensionsChanged","gl","model","delete","_getModel","getPickingInfo","params","info","find","d","disablePickingIndex","objectIndex","i","_disablePickingIndex","draw","uniforms","setUniforms","jointType","capType","SEGMENT_INDICES","SEGMENT_POSITIONS","id","geometry","drawMode","indices","Uint16Array","Float32Array","isInstanced","attribute","get","layerName"],"sources":["../../../src/path-layer/path-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, log, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport PathTesselator from './path-tesselator';\n\nimport vs from './path-layer-vertex.glsl';\nimport fs from './path-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  widthUnits: 'meters',\n  widthScale: {type: 'number', min: 0, value: 1}, // stroke width in meters\n  widthMinPixels: {type: 'number', min: 0, value: 0}, //  min stroke width in pixels\n  widthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max stroke width in pixels\n  jointRounded: false,\n  capRounded: false,\n  miterLimit: {type: 'number', min: 0, value: 4},\n  billboard: false,\n  // `loop` or `open`\n  _pathType: null,\n\n  getPath: {type: 'accessor', value: object => object.path},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n\n  // deprecated props\n  rounded: {deprecatedFor: ['jointRounded', 'capRounded']}\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class PathLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]}); // 'project' module added by default.\n  }\n\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const noAlloc = true;\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      positions: {\n        size: 3,\n        // Start filling buffer from 1 vertex in\n        vertexOffset: 1,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPath',\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          instanceLeftPositions: {\n            vertexOffset: 0\n          },\n          instanceStartPositions: {\n            vertexOffset: 1\n          },\n          instanceEndPositions: {\n            vertexOffset: 2\n          },\n          instanceRightPositions: {\n            vertexOffset: 3\n          }\n        }\n      },\n      instanceTypes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculateSegmentTypes,\n        noAlloc\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getWidth',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: 1\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        accessor: 'getColor',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: DEFAULT_COLOR\n      },\n      instancePickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value)\n      }\n    });\n    /* eslint-enable max-len */\n\n    this.setState({\n      pathTesselator: new PathTesselator({\n        fp64: this.use64bitPositions()\n      })\n    });\n\n    if (this.props.getDashArray && !this.props.extensions.length) {\n      log.removed('getDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const attributeManager = this.getAttributeManager();\n\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath));\n\n    if (geometryChanged) {\n      const {pathTesselator} = this.state;\n      const buffers = props.data.attributes || {};\n\n      pathTesselator.updateGeometry({\n        data: props.data,\n        geometryBuffer: buffers.getPath,\n        buffers,\n        normalize: !props._pathType,\n        loop: props._pathType === 'loop',\n        getGeometry: props.getPath,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        dataChanged: changeFlags.dataChanged\n      });\n      this.setState({\n        numInstances: pathTesselator.instanceCount,\n        startIndices: pathTesselator.vertexStarts\n      });\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        attributeManager.invalidateAll();\n      }\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager.invalidateAll();\n    }\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      info.object = data.find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  disablePickingIndex(objectIndex) {\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      this._disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      jointRounded,\n      capRounded,\n      billboard,\n      miterLimit,\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels\n    } = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        jointType: Number(jointRounded),\n        capType: Number(capRounded),\n        billboard,\n        widthUnits: UNIT[widthUnits],\n        widthScale,\n        miterLimit,\n        widthMinPixels,\n        widthMaxPixels\n      })\n      .draw();\n  }\n\n  _getModel(gl) {\n    /*\n     *       _\n     *        \"-_ 1                   3                       5\n     *     _     \"o---------------------o-------------------_-o\n     *       -   / \"\"--..__              '.             _.-' /\n     *   _     \"@- - - - - \"\"--..__- - - - x - - - -_.@'    /\n     *    \"-_  /                   \"\"--..__ '.  _,-` :     /\n     *       \"o----------------------------\"\"-o'    :     /\n     *      0,2                            4 / '.  :     /\n     *                                      /   '.:     /\n     *                                     /     :'.   /\n     *                                    /     :  ', /\n     *                                   /     :     o\n     */\n\n    // prettier-ignore\n    const SEGMENT_INDICES = [\n      // start corner\n      0, 1, 2,\n      // body\n      1, 4, 2,\n      1, 3, 4,\n      // end corner\n      3, 5, 4\n    ];\n\n    // [0] position on segment - 0: start, 1: end\n    // [1] side of path - -1: left, 0: center (joint), 1: right\n    // prettier-ignore\n    const SEGMENT_POSITIONS = [\n      // bevel start corner\n      0, 0,\n      // start inner corner\n      0, -1,\n      // start outer corner\n      0, 1,\n      // end inner corner\n      1, -1,\n      // end outer corner\n      1, 1,\n      // bevel end corner\n      1, 0\n    ];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLES,\n        attributes: {\n          indices: new Uint16Array(SEGMENT_INDICES),\n          positions: {value: new Float32Array(SEGMENT_POSITIONS), size: 2}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  calculatePositions(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('positions');\n  }\n\n  calculateSegmentTypes(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('segmentTypes');\n  }\n}\n\nPathLayer.layerName = 'PathLayer';\nPathLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}