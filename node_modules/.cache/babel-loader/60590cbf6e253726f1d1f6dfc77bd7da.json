{"ast":null,"code":"import WorkerFarm from '../worker-farm/worker-farm';\nimport { removeNontransferableOptions } from '../worker-utils/remove-nontransferable-options';\nimport { getWorkerURL, getWorkerName } from './get-worker-url';\nexport function canProcessOnWorker(worker, options) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n\n  return worker.worker && (options === null || options === void 0 ? void 0 : options.worker);\n}\nexport async function processOnWorker(worker, data) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const name = getWorkerName(worker);\n  const url = getWorkerURL(worker, options);\n  const workerFarm = WorkerFarm.getWorkerFarm(options);\n  const workerPool = workerFarm.getWorkerPool({\n    name,\n    url\n  });\n  const jobName = options.jobName || worker.name;\n  const job = await workerPool.startJob(jobName, onMessage.bind(null, context));\n  const transferableOptions = removeNontransferableOptions(options);\n  job.postMessage('process', {\n    input: data,\n    options: transferableOptions\n  });\n  const result = await job.result;\n  return result.result;\n}\n\nasync function onMessage(context, job, type, payload) {\n  switch (type) {\n    case 'done':\n      job.done(payload);\n      break;\n\n    case 'error':\n      job.error(new Error(payload.error));\n      break;\n\n    case 'process':\n      const {\n        id,\n        input,\n        options\n      } = payload;\n\n      try {\n        if (!context.process) {\n          job.postMessage('error', {\n            id,\n            error: 'Worker not set up to process on main thread'\n          });\n          return;\n        }\n\n        const result = await context.process(input, options);\n        job.postMessage('done', {\n          id,\n          result\n        });\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'unknown error';\n        job.postMessage('error', {\n          id,\n          error: message\n        });\n      }\n\n      break;\n\n    default:\n      console.warn(\"process-on-worker: unknown message \".concat(type));\n  }\n}","map":{"version":3,"mappings":"AAQA,OAAOA,UAAP,MAAuB,4BAAvB;AACA,SAAQC,4BAAR,QAA2C,gDAA3C;AACA,SAAQC,YAAR,EAAsBC,aAAtB,QAA0C,kBAA1C;AAaA,OAAO,SAASC,kBAAT,CAA4BC,MAA5B,EAAkDC,OAAlD,EAA2E;EAChF,IAAI,CAACN,UAAU,CAACO,WAAXP,EAAL,EAA+B;IAC7B,OAAO,KAAP;EACD;;EAED,OAAOK,MAAM,CAACA,MAAPA,KAAiBC,OAAjB,SAAiBA,WAAjB,WAAiBA,GAAjB,MAAiBA,UAAO,CAAED,MAA1BA,CAAP;AACD;AAOD,OAAO,eAAeG,eAAf,CACLH,MADK,EAELI,IAFK,EAKS;EAAA,IAFdH,OAEc,uEAFoB,EAEpB;EAAA,IADdI,OACc,uEADW,EACX;EACd,MAAMC,IAAI,GAAGR,aAAa,CAACE,MAAD,CAA1B;EACA,MAAMO,GAAG,GAAGV,YAAY,CAACG,MAAD,EAASC,OAAT,CAAxB;EAEA,MAAMO,UAAU,GAAGb,UAAU,CAACc,aAAXd,CAAyBM,OAAzBN,CAAnB;EACA,MAAMe,UAAU,GAAGF,UAAU,CAACG,aAAXH,CAAyB;IAACF,IAAD;IAAOC;EAAP,CAAzBC,CAAnB;EAEA,MAAMI,OAAO,GAAGX,OAAO,CAACW,OAARX,IAAmBD,MAAM,CAACM,IAA1C;EACA,MAAMO,GAAG,GAAG,MAAMH,UAAU,CAACI,QAAXJ,CAChBE,OADgBF,EAGhBK,SAAS,CAACC,IAAVD,CAAe,IAAfA,EAAqBV,OAArBU,CAHgBL,CAAlB;EAOA,MAAMO,mBAAmB,GAAGrB,4BAA4B,CAACK,OAAD,CAAxD;EACAY,GAAG,CAACK,WAAJL,CAAgB,SAAhBA,EAA2B;IAACM,KAAK,EAAEf,IAAR;IAAcH,OAAO,EAAEgB;EAAvB,CAA3BJ;EAEA,MAAMO,MAAM,GAAG,MAAMP,GAAG,CAACO,MAAzB;EACA,OAAOA,MAAM,CAACA,MAAd;AACD;;AAOD,eAAeL,SAAf,CACEV,OADF,EAEEQ,GAFF,EAGEQ,IAHF,EAIEC,OAJF,EAKE;EACA,QAAQD,IAAR;IACE,KAAK,MAAL;MAEER,GAAG,CAACU,IAAJV,CAASS,OAATT;MACA;;IAEF,KAAK,OAAL;MAEEA,GAAG,CAACW,KAAJX,CAAU,IAAIY,KAAJ,CAAUH,OAAO,CAACE,KAAlB,CAAVX;MACA;;IAEF,KAAK,SAAL;MAEE,MAAM;QAACa,EAAD;QAAKP,KAAL;QAAYlB;MAAZ,IAAuBqB,OAA7B;;MACA,IAAI;QACF,IAAI,CAACjB,OAAO,CAACsB,OAAb,EAAsB;UACpBd,GAAG,CAACK,WAAJL,CAAgB,OAAhBA,EAAyB;YAACa,EAAD;YAAKF,KAAK,EAAE;UAAZ,CAAzBX;UACA;QACD;;QACD,MAAMO,MAAM,GAAG,MAAMf,OAAO,CAACsB,OAARtB,CAAgBc,KAAhBd,EAAuBJ,OAAvBI,CAArB;QACAQ,GAAG,CAACK,WAAJL,CAAgB,MAAhBA,EAAwB;UAACa,EAAD;UAAKN;QAAL,CAAxBP;MANF,EAOE,OAAOW,KAAP,EAAc;QACd,MAAMI,OAAO,GAAGJ,KAAK,YAAYC,KAAjBD,GAAyBA,KAAK,CAACI,OAA/BJ,GAAyC,eAAzD;QACAX,GAAG,CAACK,WAAJL,CAAgB,OAAhBA,EAAyB;UAACa,EAAD;UAAKF,KAAK,EAAEI;QAAZ,CAAzBf;MACD;;MACD;;IAEF;MAEEgB,OAAO,CAACC,IAARD,8CAAmDR,IAAnD;EA7BJ;AA+BD","names":["WorkerFarm","removeNontransferableOptions","getWorkerURL","getWorkerName","canProcessOnWorker","worker","options","isSupported","processOnWorker","data","context","name","url","workerFarm","getWorkerFarm","workerPool","getWorkerPool","jobName","job","startJob","onMessage","bind","transferableOptions","postMessage","input","result","type","payload","done","error","Error","id","process","message","console","warn"],"sources":["../../../../src/lib/worker-api/process-on-worker.ts"],"sourcesContent":["import type {\n  WorkerObject,\n  WorkerOptions,\n  WorkerContext,\n  WorkerMessageType,\n  WorkerMessagePayload\n} from '../../types';\nimport type WorkerJob from '../worker-farm/worker-job';\nimport WorkerFarm from '../worker-farm/worker-farm';\nimport {removeNontransferableOptions} from '../worker-utils/remove-nontransferable-options';\nimport {getWorkerURL, getWorkerName} from './get-worker-url';\n\ntype ProcessOnWorkerOptions = WorkerOptions & {\n  jobName?: string;\n  [key: string]: any;\n};\n\n/**\n * Determines if we can parse with worker\n * @param loader\n * @param data\n * @param options\n */\nexport function canProcessOnWorker(worker: WorkerObject, options?: WorkerOptions) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n\n  return worker.worker && options?.worker;\n}\n\n/**\n * This function expects that the worker thread sends certain messages,\n * Creating such a worker can be automated if the worker is wrapper by a call to\n * createWorker in @loaders.gl/worker-utils.\n */\nexport async function processOnWorker(\n  worker: WorkerObject,\n  data: any,\n  options: ProcessOnWorkerOptions = {},\n  context: WorkerContext = {}\n): Promise<any> {\n  const name = getWorkerName(worker);\n  const url = getWorkerURL(worker, options);\n\n  const workerFarm = WorkerFarm.getWorkerFarm(options);\n  const workerPool = workerFarm.getWorkerPool({name, url});\n\n  const jobName = options.jobName || worker.name;\n  const job = await workerPool.startJob(\n    jobName,\n    // eslint-disable-next-line\n    onMessage.bind(null, context)\n  );\n\n  // Kick off the processing in the worker\n  const transferableOptions = removeNontransferableOptions(options);\n  job.postMessage('process', {input: data, options: transferableOptions});\n\n  const result = await job.result;\n  return result.result;\n}\n\n/**\n * Job completes when we receive the result\n * @param job\n * @param message\n */\nasync function onMessage(\n  context: WorkerContext,\n  job: WorkerJob,\n  type: WorkerMessageType,\n  payload: WorkerMessagePayload\n) {\n  switch (type) {\n    case 'done':\n      // Worker is done\n      job.done(payload);\n      break;\n\n    case 'error':\n      // Worker encountered an error\n      job.error(new Error(payload.error));\n      break;\n\n    case 'process':\n      // Worker is asking for us (main thread) to process something\n      const {id, input, options} = payload;\n      try {\n        if (!context.process) {\n          job.postMessage('error', {id, error: 'Worker not set up to process on main thread'});\n          return;\n        }\n        const result = await context.process(input, options);\n        job.postMessage('done', {id, result});\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'unknown error';\n        job.postMessage('error', {id, error: message});\n      }\n      break;\n\n    default:\n      // eslint-disable-next-line\n      console.warn(`process-on-worker: unknown message ${type}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}