{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar LRUCache = /*#__PURE__*/function () {\n  function LRUCache() {\n    var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n\n    _classCallCheck(this, LRUCache);\n\n    this.limit = limit;\n    this.clear();\n  }\n\n  _createClass(LRUCache, [{\n    key: \"clear\",\n    value: function clear() {\n      this._cache = {};\n      this._order = [];\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      var value = this._cache[key];\n\n      if (value) {\n        this._deleteOrder(key);\n\n        this._appendOrder(key);\n      }\n\n      return value;\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      if (!this._cache[key]) {\n        if (Object.keys(this._cache).length === this.limit) {\n          this.delete(this._order[0]);\n        }\n\n        this._cache[key] = value;\n\n        this._appendOrder(key);\n      } else {\n        this.delete(key);\n        this._cache[key] = value;\n\n        this._appendOrder(key);\n      }\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      var value = this._cache[key];\n\n      if (value) {\n        this._deleteCache(key);\n\n        this._deleteOrder(key);\n      }\n    }\n  }, {\n    key: \"_deleteCache\",\n    value: function _deleteCache(key) {\n      delete this._cache[key];\n    }\n  }, {\n    key: \"_deleteOrder\",\n    value: function _deleteOrder(key) {\n      var index = this._order.findIndex(function (o) {\n        return o === key;\n      });\n\n      if (index >= 0) {\n        this._order.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"_appendOrder\",\n    value: function _appendOrder(key) {\n      this._order.push(key);\n    }\n  }]);\n\n  return LRUCache;\n}();\n\nexport { LRUCache as default };","map":{"version":3,"mappings":";;;IAOqBA,Q;EACnBC,oBAAuB;IAAA,IAAXC,KAAW,uEAAH,CAAG;;IAAA;;IACrB,KAAKA,KAAL,GAAaA,KAAb;IAEA,KAAKC,KAAL;EACD;;;;WAEDA,iBAAQ;MACN,KAAKC,MAAL,GAAc,EAAd;MAEA,KAAKC,MAAL,GAAc,EAAd;IACD;;;WAEDC,aAAIC,GAAJD,EAAS;MACP,IAAME,KAAK,GAAG,KAAKJ,MAAL,CAAYG,GAAZ,CAAd;;MACA,IAAIC,KAAJ,EAAW;QAET,KAAKC,YAAL,CAAkBF,GAAlB;;QACA,KAAKG,YAAL,CAAkBH,GAAlB;MACD;;MACD,OAAOC,KAAP;IACD;;;WAEDG,aAAIJ,GAAJI,EAASH,KAATG,EAAgB;MACd,IAAI,CAAC,KAAKP,MAAL,CAAYG,GAAZ,CAAL,EAAuB;QAErB,IAAIK,MAAM,CAACC,IAAPD,CAAY,KAAKR,MAAjBQ,EAAyBE,MAAzBF,KAAoC,KAAKV,KAA7C,EAAoD;UAClD,KAAKa,MAAL,CAAY,KAAKV,MAAL,CAAY,CAAZ,CAAZ;QACD;;QAED,KAAKD,MAAL,CAAYG,GAAZ,IAAmBC,KAAnB;;QACA,KAAKE,YAAL,CAAkBH,GAAlB;MAPF,OAQO;QAEL,KAAKQ,MAAL,CAAYR,GAAZ;QAEA,KAAKH,MAAL,CAAYG,GAAZ,IAAmBC,KAAnB;;QACA,KAAKE,YAAL,CAAkBH,GAAlB;MACD;IACF;;;WAEDQ,iBAAOR,GAAPQ,EAAY;MACV,IAAMP,KAAK,GAAG,KAAKJ,MAAL,CAAYG,GAAZ,CAAd;;MACA,IAAIC,KAAJ,EAAW;QACT,KAAKQ,YAAL,CAAkBT,GAAlB;;QACA,KAAKE,YAAL,CAAkBF,GAAlB;MACD;IACF;;;WAEDS,sBAAaT,GAAbS,EAAkB;MAChB,OAAO,KAAKZ,MAAL,CAAYG,GAAZ,CAAP;IACD;;;WAEDE,sBAAaF,GAAbE,EAAkB;MAChB,IAAMQ,KAAK,GAAG,KAAKZ,MAAL,CAAYa,SAAZ,CAAsBC,WAAC;QAAA,OAAIA,CAAC,KAAKZ,GAAV;MAAA,CAAvB,CAAd;;MACA,IAAIU,KAAK,IAAI,CAAb,EAAgB;QACd,KAAKZ,MAAL,CAAYe,MAAZ,CAAmBH,KAAnB,EAA0B,CAA1B;MACD;IACF;;;WAEDP,sBAAaH,GAAbG,EAAkB;MAChB,KAAKL,MAAL,CAAYgB,IAAZ,CAAiBd,GAAjB;IACD;;;;;;SA9DkBP,Q","names":["LRUCache","constructor","limit","clear","_cache","_order","get","key","value","_deleteOrder","_appendOrder","set","Object","keys","length","delete","_deleteCache","index","findIndex","o","splice","push"],"sources":["../../../src/text-layer/lru-cache.js"],"sourcesContent":["/**\n * LRU Cache class with limit\n *\n * Update order for each get/set operation\n * Delete oldest when reach given limit\n */\n\nexport default class LRUCache {\n  constructor(limit = 5) {\n    this.limit = limit;\n\n    this.clear();\n  }\n\n  clear() {\n    this._cache = {};\n    // access/update order, first item is oldest, last item is newest\n    this._order = [];\n  }\n\n  get(key) {\n    const value = this._cache[key];\n    if (value) {\n      // update order\n      this._deleteOrder(key);\n      this._appendOrder(key);\n    }\n    return value;\n  }\n\n  set(key, value) {\n    if (!this._cache[key]) {\n      // if reach limit, delete the oldest\n      if (Object.keys(this._cache).length === this.limit) {\n        this.delete(this._order[0]);\n      }\n\n      this._cache[key] = value;\n      this._appendOrder(key);\n    } else {\n      // if found in cache, delete the old one, insert new one to the first of list\n      this.delete(key);\n\n      this._cache[key] = value;\n      this._appendOrder(key);\n    }\n  }\n\n  delete(key) {\n    const value = this._cache[key];\n    if (value) {\n      this._deleteCache(key);\n      this._deleteOrder(key);\n    }\n  }\n\n  _deleteCache(key) {\n    delete this._cache[key];\n  }\n\n  _deleteOrder(key) {\n    const index = this._order.findIndex(o => o === key);\n    if (index >= 0) {\n      this._order.splice(index, 1);\n    }\n  }\n\n  _appendOrder(key) {\n    this._order.push(key);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}