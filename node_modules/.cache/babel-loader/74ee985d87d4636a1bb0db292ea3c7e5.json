{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nexport default class Field {\n  constructor(name, type) {\n    let nullable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let metadata = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Map();\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"type\", void 0);\n\n    _defineProperty(this, \"nullable\", void 0);\n\n    _defineProperty(this, \"metadata\", void 0);\n\n    this.name = name;\n    this.type = type;\n    this.nullable = nullable;\n    this.metadata = metadata;\n  }\n\n  get typeId() {\n    return this.type && this.type.typeId;\n  }\n\n  clone() {\n    return new Field(this.name, this.type, this.nullable, this.metadata);\n  }\n\n  compareTo(other) {\n    return this.name === other.name && this.type === other.type && this.nullable === other.nullable && this.metadata === other.metadata;\n  }\n\n  toString() {\n    return \"\".concat(this.type).concat(this.nullable ? ', nullable' : '').concat(this.metadata ? \", metadata: \".concat(this.metadata) : '');\n  }\n\n}","map":{"version":3,"mappings":";AAQA,eAAe,MAAMA,KAAN,CAAY;EAMzBC,WAAW,CACTC,IADS,EAETC,IAFS,EAKT;IAAA,IAFAC,QAEA,uEAFW,KAEX;IAAA,IADAC,QACA,uEADgC,IAAIC,GAAJ,EAChC;;IAAAC;;IAAAA;;IAAAA;;IAAAA;;IACA,KAAKL,IAAL,GAAYA,IAAZ;IACA,KAAKC,IAAL,GAAYA,IAAZ;IACA,KAAKC,QAAL,GAAgBA,QAAhB;IACA,KAAKC,QAAL,GAAgBA,QAAhB;EACD;;EAES,IAANG,MAAM,GAAW;IACnB,OAAO,KAAKL,IAAL,IAAa,KAAKA,IAAL,CAAUK,MAA9B;EACD;;EAEDC,KAAK,GAAU;IACb,OAAO,IAAIT,KAAJ,CAAU,KAAKE,IAAf,EAAqB,KAAKC,IAA1B,EAAgC,KAAKC,QAArC,EAA+C,KAAKC,QAApD,CAAP;EACD;;EAEDK,SAAS,CAACC,KAAD,EAAuB;IAC9B,OACE,KAAKT,IAAL,KAAcS,KAAK,CAACT,IAApB,IACA,KAAKC,IAAL,KAAcQ,KAAK,CAACR,IADpB,IAEA,KAAKC,QAAL,KAAkBO,KAAK,CAACP,QAFxB,IAGA,KAAKC,QAAL,KAAkBM,KAAK,CAACN,QAJ1B;EAMD;;EAEDO,QAAQ,GAAW;IACjB,iBAAU,KAAKT,IAAf,SAAsB,KAAKC,QAAL,GAAgB,YAAhB,GAA+B,EAArD,SACE,KAAKC,QAAL,yBAA+B,KAAKA,QAApC,IAAiD,EADnD;EAGD;;AAvCwB","names":["Field","constructor","name","type","nullable","metadata","Map","_defineProperty","typeId","clone","compareTo","other","toString"],"sources":["../../../../../src/lib/schema/impl/field.ts"],"sourcesContent":["import {DataType} from './type';\n\n/**\n * ArrowJS `Field` API-compatible class for row-based tables\n * https://loaders.gl/arrowjs/docs/api-reference/field\n * A field holds name, nullable, and metadata information about a table \"column\"\n * A Schema is essentially a list of fields\n */\nexport default class Field {\n  name: string;\n  type: DataType;\n  nullable: boolean;\n  metadata: Map<string, string>;\n\n  constructor(\n    name: string,\n    type: DataType,\n    nullable = false,\n    metadata: Map<string, string> = new Map()\n  ) {\n    this.name = name;\n    this.type = type;\n    this.nullable = nullable;\n    this.metadata = metadata;\n  }\n\n  get typeId(): number {\n    return this.type && this.type.typeId;\n  }\n\n  clone(): Field {\n    return new Field(this.name, this.type, this.nullable, this.metadata);\n  }\n\n  compareTo(other: this): boolean {\n    return (\n      this.name === other.name &&\n      this.type === other.type &&\n      this.nullable === other.nullable &&\n      this.metadata === other.metadata\n    );\n  }\n\n  toString(): string {\n    return `${this.type}${this.nullable ? ', nullable' : ''}${\n      this.metadata ? `, metadata: ${this.metadata}` : ''\n    }`;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}