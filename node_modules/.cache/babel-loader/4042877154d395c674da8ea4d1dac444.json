{"ast":null,"code":"import GLTFScenegraph from '../api/gltf-scenegraph';\nconst KHR_TEXTURE_BASISU = 'KHR_texture_basisu';\nexport const name = KHR_TEXTURE_BASISU;\nexport function preprocess(gltfData, options) {\n  const scene = new GLTFScenegraph(gltfData);\n  const {\n    json\n  } = scene;\n\n  for (const texture of json.textures || []) {\n    const extension = scene.getObjectExtension(texture, KHR_TEXTURE_BASISU);\n\n    if (extension) {\n      texture.source = extension.source;\n    }\n\n    scene.removeObjectExtension(texture, KHR_TEXTURE_BASISU);\n  }\n\n  scene.removeExtension(KHR_TEXTURE_BASISU);\n}","map":{"version":3,"mappings":"AAOA,OAAOA,cAAP,MAA2B,wBAA3B;AAEA,MAAMC,kBAAkB,GAAG,oBAA3B;AAGA,OAAO,MAAMC,IAAI,GAAGD,kBAAb;AAMP,OAAO,SAASE,UAAT,CAAoBC,QAApB,EAA4CC,OAA5C,EAA8E;EACnF,MAAMC,KAAK,GAAG,IAAIN,cAAJ,CAAmBI,QAAnB,CAAd;EACA,MAAM;IAACG;EAAD,IAASD,KAAf;;EAEA,KAAK,MAAME,OAAX,IAAsBD,IAAI,CAACE,QAALF,IAAiB,EAAvC,EAA2C;IACzC,MAAMG,SAAS,GAAGJ,KAAK,CAACK,kBAANL,CAChBE,OADgBF,EAEhBL,kBAFgBK,CAAlB;;IAIA,IAAII,SAAJ,EAAe;MACbF,OAAO,CAACI,MAARJ,GAAiBE,SAAS,CAACE,MAA3BJ;IACD;;IACDF,KAAK,CAACO,qBAANP,CAA4BE,OAA5BF,EAAqCL,kBAArCK;EACD;;EAGDA,KAAK,CAACQ,eAANR,CAAsBL,kBAAtBK;AACD","names":["GLTFScenegraph","KHR_TEXTURE_BASISU","name","preprocess","gltfData","options","scene","json","texture","textures","extension","getObjectExtension","source","removeObjectExtension","removeExtension"],"sources":["../../../../src/lib/extensions/KHR_texture_basisu.ts"],"sourcesContent":["// GLTF EXTENSION: KHR_texture_basisu\n// https://github.com/KhronosGroup/glTF/tree/main/extensions/2.0/Khronos/KHR_texture_basisu\n/* eslint-disable camelcase */\n\nimport type {GLTF, GLTF_KHR_texture_basisu} from '../types/gltf-types';\nimport type {GLTFLoaderOptions} from '../../gltf-loader';\n\nimport GLTFScenegraph from '../api/gltf-scenegraph';\n\nconst KHR_TEXTURE_BASISU = 'KHR_texture_basisu';\n\n/** Extension name */\nexport const name = KHR_TEXTURE_BASISU;\n\n/**\n * Replaces a texture source reference with the extension texture\n * Done in preprocess() to prevent load of default image\n */\nexport function preprocess(gltfData: {json: GLTF}, options: GLTFLoaderOptions): void {\n  const scene = new GLTFScenegraph(gltfData);\n  const {json} = scene;\n\n  for (const texture of json.textures || []) {\n    const extension = scene.getObjectExtension<GLTF_KHR_texture_basisu>(\n      texture,\n      KHR_TEXTURE_BASISU\n    );\n    if (extension) {\n      texture.source = extension.source;\n    }\n    scene.removeObjectExtension(texture, KHR_TEXTURE_BASISU);\n  }\n\n  // Remove the top-level extension\n  scene.removeExtension(KHR_TEXTURE_BASISU);\n}\n"]},"metadata":{},"sourceType":"module"}