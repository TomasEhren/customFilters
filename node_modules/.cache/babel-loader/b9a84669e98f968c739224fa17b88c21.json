{"ast":null,"code":"import _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { createElement, useRef, useState, useMemo, useEffect, useImperativeHandle, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Deck } from '@deck.gl/core';\nimport useIsomorphicLayoutEffect from './utils/use-isomorphic-layout-effect';\nimport extractJSXLayers from './utils/extract-jsx-layers';\nimport positionChildrenUnderViews from './utils/position-children-under-views';\nimport extractStyles from './utils/extract-styles';\n\nfunction getRefHandles(thisRef) {\n  var handles = {\n    pickObject: function pickObject(opts) {\n      return thisRef.deck.pickObject(opts);\n    },\n    pickMultipleObjects: function pickMultipleObjects(opts) {\n      return thisRef.deck.pickMultipleObjects(opts);\n    },\n    pickObjects: function pickObjects(opts) {\n      return thisRef.deck.pickObjects(opts);\n    }\n  };\n  Object.defineProperty(handles, 'deck', {\n    get: function get() {\n      return thisRef.deck;\n    }\n  });\n  return handles;\n}\n\nfunction redrawDeck(thisRef) {\n  if (thisRef.redrawReason) {\n    thisRef.deck._drawLayers(thisRef.redrawReason);\n\n    thisRef.redrawReason = null;\n  }\n}\n\nfunction createDeckInstance(thisRef, props) {\n  var DeckClass = props.Deck || Deck;\n  var deck = new DeckClass(_objectSpread(_objectSpread({}, props), {}, {\n    style: null,\n    width: '100%',\n    height: '100%',\n    _customRender: function _customRender(redrawReason) {\n      thisRef.redrawReason = redrawReason;\n      var viewports = deck.viewManager.getViewports();\n\n      if (thisRef.lastRenderedViewports !== viewports) {\n        thisRef.forceUpdate(function (v) {\n          return v + 1;\n        });\n      } else {\n        redrawDeck(thisRef);\n      }\n    }\n  }));\n  return deck;\n}\n\nvar DeckGL = forwardRef(function (props, ref) {\n  var _thisRef = useRef({});\n\n  var thisRef = _thisRef.current;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      version = _useState2[0],\n      setVersion = _useState2[1];\n\n  thisRef.forceUpdate = setVersion;\n  var containerRef = useRef(null);\n  var canvasRef = useRef(null);\n  var jsxProps = useMemo(function () {\n    return extractJSXLayers(props);\n  }, [props.layers, props.views, props.children]);\n  var inRender = true;\n\n  var handleViewStateChange = function handleViewStateChange(params) {\n    if (inRender && props.viewState) {\n      thisRef.viewStateUpdateRequested = params;\n      return null;\n    }\n\n    thisRef.viewStateUpdateRequested = null;\n    return props.onViewStateChange(params);\n  };\n\n  var handleInteractionStateChange = function handleInteractionStateChange(params) {\n    if (inRender) {\n      thisRef.interactionStateUpdateRequested = params;\n    } else {\n      thisRef.interactionStateUpdateRequested = null;\n      props.onInteractionStateChange(params);\n    }\n  };\n\n  var deckProps = useMemo(function () {\n    var forwardProps = _objectSpread(_objectSpread({}, props), {}, {\n      style: null,\n      width: '100%',\n      height: '100%',\n      layers: jsxProps.layers,\n      views: jsxProps.views,\n      onViewStateChange: handleViewStateChange,\n      onInteractionStateChange: handleInteractionStateChange\n    });\n\n    if (thisRef.deck) {\n      thisRef.deck.setProps(forwardProps);\n    }\n\n    return forwardProps;\n  }, [props]);\n  useEffect(function () {\n    thisRef.deck = createDeckInstance(thisRef, _objectSpread(_objectSpread({}, deckProps), {}, {\n      parent: containerRef.current,\n      canvas: canvasRef.current\n    }));\n    return function () {\n      return thisRef.deck.finalize();\n    };\n  }, []);\n  useIsomorphicLayoutEffect(function () {\n    redrawDeck(thisRef);\n    var viewStateUpdateRequested = thisRef.viewStateUpdateRequested,\n        interactionStateUpdateRequested = thisRef.interactionStateUpdateRequested;\n\n    if (viewStateUpdateRequested) {\n      handleViewStateChange(viewStateUpdateRequested);\n    }\n\n    if (interactionStateUpdateRequested) {\n      handleInteractionStateChange(interactionStateUpdateRequested);\n    }\n  });\n  useImperativeHandle(ref, function () {\n    return getRefHandles(thisRef);\n  }, []);\n\n  var _ref = thisRef.deck || {},\n      viewManager = _ref.viewManager;\n\n  var currentViewports = viewManager && viewManager.getViewports();\n  var ContextProvider = props.ContextProvider,\n      width = props.width,\n      height = props.height,\n      id = props.id,\n      style = props.style;\n\n  var _useMemo = useMemo(function () {\n    return extractStyles({\n      width: width,\n      height: height,\n      style: style\n    });\n  }, [width, height, style]),\n      containerStyle = _useMemo.containerStyle,\n      canvasStyle = _useMemo.canvasStyle;\n\n  if (!thisRef.viewStateUpdateRequested && thisRef.lastRenderedViewports === currentViewports || thisRef.version !== version) {\n    thisRef.lastRenderedViewports = currentViewports;\n    thisRef.version = version;\n    var childrenUnderViews = positionChildrenUnderViews({\n      children: jsxProps.children,\n      deck: thisRef.deck,\n      ContextProvider: ContextProvider\n    });\n    var canvas = createElement('canvas', {\n      key: 'canvas',\n      id: id || 'deckgl-overlay',\n      ref: canvasRef,\n      style: canvasStyle\n    });\n    thisRef.control = createElement('div', {\n      id: \"\".concat(id || 'deckgl', \"-wrapper\"),\n      ref: containerRef,\n      style: containerStyle\n    }, [canvas, childrenUnderViews]);\n  }\n\n  inRender = false;\n  return thisRef.control;\n});\nDeckGL.propTypes = Deck.getPropTypes(PropTypes);\nDeckGL.defaultProps = Deck.defaultProps;\nexport default DeckGL;","map":{"version":3,"mappings":"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","names":["createElement","useRef","useState","useMemo","useEffect","useImperativeHandle","forwardRef","PropTypes","Deck","useIsomorphicLayoutEffect","extractJSXLayers","positionChildrenUnderViews","extractStyles","getRefHandles","thisRef","handles","pickObject","opts","deck","pickMultipleObjects","pickObjects","Object","defineProperty","get","redrawDeck","redrawReason","_drawLayers","createDeckInstance","props","DeckClass","style","width","height","_customRender","viewports","viewManager","getViewports","lastRenderedViewports","forceUpdate","v","DeckGL","ref","_thisRef","current","version","setVersion","containerRef","canvasRef","jsxProps","layers","views","children","inRender","handleViewStateChange","params","viewState","viewStateUpdateRequested","onViewStateChange","handleInteractionStateChange","interactionStateUpdateRequested","onInteractionStateChange","deckProps","forwardProps","setProps","parent","canvas","finalize","currentViewports","ContextProvider","id","containerStyle","canvasStyle","childrenUnderViews","key","control","propTypes","getPropTypes","defaultProps"],"sources":["../../src/deckgl.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  createElement,\n  useRef,\n  useState,\n  useMemo,\n  useEffect,\n  useImperativeHandle,\n  forwardRef\n} from 'react';\nimport PropTypes from 'prop-types';\nimport {Deck} from '@deck.gl/core';\nimport useIsomorphicLayoutEffect from './utils/use-isomorphic-layout-effect';\n\nimport extractJSXLayers from './utils/extract-jsx-layers';\nimport positionChildrenUnderViews from './utils/position-children-under-views';\nimport extractStyles from './utils/extract-styles';\n\n/* eslint-disable max-statements, accessor-pairs */\n\nfunction getRefHandles(thisRef) {\n  const handles = {\n    pickObject: opts => thisRef.deck.pickObject(opts),\n    pickMultipleObjects: opts => thisRef.deck.pickMultipleObjects(opts),\n    pickObjects: opts => thisRef.deck.pickObjects(opts)\n  };\n  Object.defineProperty(handles, 'deck', {\n    get: () => thisRef.deck\n  });\n  return handles;\n}\n\nfunction redrawDeck(thisRef) {\n  if (thisRef.redrawReason) {\n    // Only redraw if we have received a dirty flag\n    thisRef.deck._drawLayers(thisRef.redrawReason);\n    thisRef.redrawReason = null;\n  }\n}\n\nfunction createDeckInstance(thisRef, props) {\n  // Allows a subclass of Deck to be used\n  // TODO - update propTypes / defaultProps?\n  const DeckClass = props.Deck || Deck;\n  const deck = new DeckClass({\n    ...props,\n    style: null,\n    width: '100%',\n    height: '100%',\n    // The Deck's animation loop is independent from React's render cycle, causing potential\n    // synchronization issues. We provide this custom render function to make sure that React\n    // and Deck update on the same schedule.\n    _customRender: redrawReason => {\n      // Save the dirty flag for later\n      thisRef.redrawReason = redrawReason;\n\n      // Viewport/view state is passed to child components as props.\n      // If they have changed, we need to trigger a React rerender to update children props.\n      const viewports = deck.viewManager.getViewports();\n      if (thisRef.lastRenderedViewports !== viewports) {\n        // Viewports have changed, update children props first.\n        // This will delay the Deck canvas redraw till after React update (in useLayoutEffect)\n        // so that the canvas does not get rendered before the child components update.\n        thisRef.forceUpdate(v => v + 1);\n      } else {\n        redrawDeck(thisRef);\n      }\n    }\n  });\n  return deck;\n}\n\nconst DeckGL = forwardRef((props, ref) => {\n  // A reference to persistent states\n  const _thisRef = useRef({});\n  const thisRef = _thisRef.current;\n  // A mechanism to force redraw\n  const [version, setVersion] = useState(0);\n  thisRef.forceUpdate = setVersion;\n  // DOM refs\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // extract any deck.gl layers masquerading as react elements from props.children\n  const jsxProps = useMemo(\n    () => extractJSXLayers(props),\n    [props.layers, props.views, props.children]\n  );\n\n  // Callbacks\n  let inRender = true;\n\n  const handleViewStateChange = params => {\n    if (inRender && props.viewState) {\n      // Callback may invoke a state update. Defer callback to after render() to avoid React error\n      // In React StrictMode, render is executed twice and useEffect/useLayoutEffect is executed once\n      // Store deferred parameters in ref so that we can access it in another render\n      thisRef.viewStateUpdateRequested = params;\n      return null;\n    }\n    thisRef.viewStateUpdateRequested = null;\n    return props.onViewStateChange(params);\n  };\n\n  const handleInteractionStateChange = params => {\n    if (inRender) {\n      // Callback may invoke a state update. Defer callback to after render() to avoid React error\n      // In React StrictMode, render is executed twice and useEffect/useLayoutEffect is executed once\n      // Store deferred parameters in ref so that we can access it in another render\n      thisRef.interactionStateUpdateRequested = params;\n    } else {\n      thisRef.interactionStateUpdateRequested = null;\n      props.onInteractionStateChange(params);\n    }\n  };\n\n  // Update Deck's props. If Deck needs redraw, this will trigger a call to `_customRender` in\n  // the next animation frame.\n  // Needs to be called both from initial mount, and when new props are received\n  const deckProps = useMemo(() => {\n    const forwardProps = {\n      ...props,\n      // Override user styling props. We will set the canvas style in render()\n      style: null,\n      width: '100%',\n      height: '100%',\n      layers: jsxProps.layers,\n      views: jsxProps.views,\n      onViewStateChange: handleViewStateChange,\n      onInteractionStateChange: handleInteractionStateChange\n    };\n\n    if (thisRef.deck) {\n      thisRef.deck.setProps(forwardProps);\n    }\n\n    return forwardProps;\n  }, [props]);\n\n  useEffect(() => {\n    thisRef.deck = createDeckInstance(thisRef, {\n      ...deckProps,\n      parent: containerRef.current,\n      canvas: canvasRef.current\n    });\n\n    return () => thisRef.deck.finalize();\n  }, []);\n\n  useIsomorphicLayoutEffect(() => {\n    // render has just been called. The children are positioned based on the current view state.\n    // Redraw Deck canvas immediately, if necessary, using the current view state, so that it\n    // matches the child components.\n    redrawDeck(thisRef);\n\n    // Execute deferred callbacks\n    const {viewStateUpdateRequested, interactionStateUpdateRequested} = thisRef;\n    if (viewStateUpdateRequested) {\n      handleViewStateChange(viewStateUpdateRequested);\n    }\n    if (interactionStateUpdateRequested) {\n      handleInteractionStateChange(interactionStateUpdateRequested);\n    }\n  });\n\n  useImperativeHandle(ref, () => getRefHandles(thisRef), []);\n\n  const {viewManager} = thisRef.deck || {};\n  const currentViewports = viewManager && viewManager.getViewports();\n\n  const {ContextProvider, width, height, id, style} = props;\n\n  const {containerStyle, canvasStyle} = useMemo(\n    () => extractStyles({width, height, style}),\n    [width, height, style]\n  );\n\n  // Props changes may lead to 3 types of updates:\n  // 1. Only the WebGL canvas - updated in Deck's render cycle (next animation frame)\n  // 2. Only the DOM - updated in React's lifecycle (now)\n  // 3. Both the WebGL canvas and the DOM - defer React rerender to next animation frame just\n  //    before Deck redraw to ensure perfect synchronization & avoid excessive redraw\n  //    This is because multiple changes may happen to Deck between two frames e.g. transition\n  if (\n    (!thisRef.viewStateUpdateRequested && thisRef.lastRenderedViewports === currentViewports) || // case 2\n    thisRef.version !== version // case 3 just before deck redraws\n  ) {\n    thisRef.lastRenderedViewports = currentViewports;\n    thisRef.version = version;\n\n    // Render the background elements (typically react-map-gl instances)\n    // using the view descriptors\n    const childrenUnderViews = positionChildrenUnderViews({\n      children: jsxProps.children,\n      deck: thisRef.deck,\n      ContextProvider\n    });\n\n    const canvas = createElement('canvas', {\n      key: 'canvas',\n      id: id || 'deckgl-overlay',\n      ref: canvasRef,\n      style: canvasStyle\n    });\n\n    // Render deck.gl as the last child\n    thisRef.control = createElement(\n      'div',\n      {id: `${id || 'deckgl'}-wrapper`, ref: containerRef, style: containerStyle},\n      [canvas, childrenUnderViews]\n    );\n  }\n\n  inRender = false;\n  return thisRef.control;\n});\n\nDeckGL.propTypes = Deck.getPropTypes(PropTypes);\nDeckGL.defaultProps = Deck.defaultProps;\n\nexport default DeckGL;\n"]},"metadata":{},"sourceType":"module"}