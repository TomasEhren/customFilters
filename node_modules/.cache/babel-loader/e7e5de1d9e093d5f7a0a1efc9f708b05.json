{"ast":null,"code":"import { LayerExtension, _mergeShaders as mergeShaders } from '@deck.gl/core';\nimport { dashShaders, offsetShaders } from './shaders.glsl';\nimport { dist } from 'gl-matrix/vec3';\nconst defaultProps = {\n  getDashArray: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  getOffset: {\n    type: 'accessor',\n    value: 0\n  },\n  dashJustified: false,\n  dashGapPickable: false\n};\nexport default class PathStyleExtension extends LayerExtension {\n  constructor() {\n    let {\n      dash = false,\n      offset = false,\n      highPrecisionDash = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      dash: dash || highPrecisionDash,\n      offset,\n      highPrecisionDash\n    });\n  }\n\n  isEnabled(layer) {\n    return layer.state.pathTesselator;\n  }\n\n  getShaders(extension) {\n    if (!extension.isEnabled(this)) {\n      return null;\n    }\n\n    let result = {};\n\n    if (extension.opts.dash) {\n      result = mergeShaders(result, dashShaders);\n    }\n\n    if (extension.opts.offset) {\n      result = mergeShaders(result, offsetShaders);\n    }\n\n    return result;\n  }\n\n  initializeState(context, extension) {\n    const attributeManager = this.getAttributeManager();\n\n    if (!attributeManager || !extension.isEnabled(this)) {\n      return;\n    }\n\n    extension.enabled = true;\n\n    if (extension.opts.dash) {\n      attributeManager.addInstanced({\n        instanceDashArrays: {\n          size: 2,\n          accessor: 'getDashArray'\n        }\n      });\n    }\n\n    if (extension.opts.highPrecisionDash) {\n      attributeManager.addInstanced({\n        instanceDashOffsets: {\n          size: 1,\n          accessor: 'getPath',\n          transform: extension.getDashOffsets.bind(this)\n        }\n      });\n    }\n\n    if (extension.opts.offset) {\n      attributeManager.addInstanced({\n        instanceOffsets: {\n          size: 1,\n          accessor: 'getOffset'\n        }\n      });\n    }\n  }\n\n  updateState(params, extension) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    const uniforms = {};\n\n    if (extension.opts.dash) {\n      uniforms.dashAlignMode = this.props.dashJustified ? 1 : 0;\n      uniforms.dashGapPickable = Boolean(this.props.dashGapPickable);\n    }\n\n    this.state.model.setUniforms(uniforms);\n  }\n\n  getDashOffsets(path) {\n    const result = [0];\n    const positionSize = this.props.positionFormat === 'XY' ? 2 : 3;\n    const isNested = Array.isArray(path[0]);\n    const geometrySize = isNested ? path.length : path.length / positionSize;\n    let p;\n    let prevP;\n\n    for (let i = 0; i < geometrySize - 1; i++) {\n      p = isNested ? path[i] : path.slice(i * positionSize, i * positionSize + positionSize);\n      p = this.projectPosition(p);\n\n      if (i > 0) {\n        result[i] = result[i - 1] + dist(prevP, p);\n      }\n\n      prevP = p;\n    }\n\n    return result;\n  }\n\n}\nPathStyleExtension.extensionName = 'PathStyleExtension';\nPathStyleExtension.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["LayerExtension","_mergeShaders","mergeShaders","dashShaders","offsetShaders","dist","defaultProps","getDashArray","type","value","getOffset","dashJustified","dashGapPickable","PathStyleExtension","constructor","dash","offset","highPrecisionDash","isEnabled","layer","state","pathTesselator","getShaders","extension","result","opts","initializeState","context","attributeManager","getAttributeManager","enabled","addInstanced","instanceDashArrays","size","accessor","instanceDashOffsets","transform","getDashOffsets","bind","instanceOffsets","updateState","params","uniforms","dashAlignMode","props","Boolean","model","setUniforms","path","positionSize","positionFormat","isNested","Array","isArray","geometrySize","length","p","prevP","i","slice","projectPosition","extensionName"],"sources":["../../../src/path-style/path-style.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerExtension, _mergeShaders as mergeShaders} from '@deck.gl/core';\nimport {dashShaders, offsetShaders} from './shaders.glsl';\nimport {dist} from 'gl-matrix/vec3';\n\nconst defaultProps = {\n  getDashArray: {type: 'accessor', value: [0, 0]},\n  getOffset: {type: 'accessor', value: 0},\n  dashJustified: false,\n  dashGapPickable: false\n};\n\nexport default class PathStyleExtension extends LayerExtension {\n  constructor({dash = false, offset = false, highPrecisionDash = false} = {}) {\n    super({dash: dash || highPrecisionDash, offset, highPrecisionDash});\n  }\n\n  isEnabled(layer) {\n    return layer.state.pathTesselator;\n  }\n\n  getShaders(extension) {\n    if (!extension.isEnabled(this)) {\n      return null;\n    }\n\n    // Merge shader injection\n    let result = {};\n    if (extension.opts.dash) {\n      result = mergeShaders(result, dashShaders);\n    }\n    if (extension.opts.offset) {\n      result = mergeShaders(result, offsetShaders);\n    }\n\n    return result;\n  }\n\n  initializeState(context, extension) {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager || !extension.isEnabled(this)) {\n      // This extension only works with the PathLayer\n      return;\n    }\n\n    extension.enabled = true;\n\n    if (extension.opts.dash) {\n      attributeManager.addInstanced({\n        instanceDashArrays: {size: 2, accessor: 'getDashArray'}\n      });\n    }\n    if (extension.opts.highPrecisionDash) {\n      attributeManager.addInstanced({\n        instanceDashOffsets: {\n          size: 1,\n          accessor: 'getPath',\n          transform: extension.getDashOffsets.bind(this)\n        }\n      });\n    }\n    if (extension.opts.offset) {\n      attributeManager.addInstanced({\n        instanceOffsets: {size: 1, accessor: 'getOffset'}\n      });\n    }\n  }\n\n  updateState(params, extension) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    const uniforms = {};\n\n    if (extension.opts.dash) {\n      uniforms.dashAlignMode = this.props.dashJustified ? 1 : 0;\n      uniforms.dashGapPickable = Boolean(this.props.dashGapPickable);\n    }\n\n    this.state.model.setUniforms(uniforms);\n  }\n\n  getDashOffsets(path) {\n    const result = [0];\n    const positionSize = this.props.positionFormat === 'XY' ? 2 : 3;\n    const isNested = Array.isArray(path[0]);\n    const geometrySize = isNested ? path.length : path.length / positionSize;\n\n    let p;\n    let prevP;\n    for (let i = 0; i < geometrySize - 1; i++) {\n      p = isNested ? path[i] : path.slice(i * positionSize, i * positionSize + positionSize);\n      p = this.projectPosition(p);\n\n      if (i > 0) {\n        result[i] = result[i - 1] + dist(prevP, p);\n      }\n\n      prevP = p;\n    }\n    return result;\n  }\n}\n\nPathStyleExtension.extensionName = 'PathStyleExtension';\nPathStyleExtension.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}