{"ast":null,"code":"import MathArray from './math-array';\nimport { checkNumber } from '../../lib/validators';\nimport assert from '../../lib/assert';\nexport default class Vector extends MathArray {\n  get ELEMENTS() {\n    assert(false);\n    return 0;\n  }\n\n  copy(vector) {\n    assert(false);\n    return this;\n  }\n\n  get x() {\n    return this[0];\n  }\n\n  set x(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get y() {\n    return this[1];\n  }\n\n  set y(value) {\n    this[1] = checkNumber(value);\n  }\n\n  len() {\n    return Math.sqrt(this.lengthSquared());\n  }\n\n  magnitude() {\n    return this.len();\n  }\n\n  lengthSquared() {\n    let length = 0;\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      length += this[i] * this[i];\n    }\n\n    return length;\n  }\n\n  magnitudeSquared() {\n    return this.lengthSquared();\n  }\n\n  distance(mathArray) {\n    return Math.sqrt(this.distanceSquared(mathArray));\n  }\n\n  distanceSquared(mathArray) {\n    let length = 0;\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const dist = this[i] - mathArray[i];\n      length += dist * dist;\n    }\n\n    return checkNumber(length);\n  }\n\n  dot(mathArray) {\n    let product = 0;\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      product += this[i] * mathArray[i];\n    }\n\n    return checkNumber(product);\n  }\n\n  normalize() {\n    const length = this.magnitude();\n\n    if (length !== 0) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= length;\n      }\n    }\n\n    return this.check();\n  }\n\n  multiply() {\n    for (var _len = arguments.length, vectors = new Array(_len), _key = 0; _key < _len; _key++) {\n      vectors[_key] = arguments[_key];\n    }\n\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= vector[i];\n      }\n    }\n\n    return this.check();\n  }\n\n  divide() {\n    for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      vectors[_key2] = arguments[_key2];\n    }\n\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= vector[i];\n      }\n    }\n\n    return this.check();\n  }\n\n  lengthSq() {\n    return this.lengthSquared();\n  }\n\n  distanceTo(vector) {\n    return this.distance(vector);\n  }\n\n  distanceToSquared(vector) {\n    return this.distanceSquared(vector);\n  }\n\n  getComponent(i) {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    return checkNumber(this[i]);\n  }\n\n  setComponent(i, value) {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    this[i] = value;\n    return this.check();\n  }\n\n  addVectors(a, b) {\n    return this.copy(a).add(b);\n  }\n\n  subVectors(a, b) {\n    return this.copy(a).subtract(b);\n  }\n\n  multiplyVectors(a, b) {\n    return this.copy(a).multiply(b);\n  }\n\n  addScaledVector(a, b) {\n    return this.add(new this.constructor(a).multiplyScalar(b));\n  }\n\n}","map":{"version":3,"mappings":"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","names":["MathArray","checkNumber","assert","Vector","ELEMENTS","copy","vector","x","value","y","len","Math","sqrt","lengthSquared","magnitude","length","i","magnitudeSquared","distance","mathArray","distanceSquared","dist","dot","product","normalize","check","multiply","vectors","divide","lengthSq","distanceTo","distanceToSquared","getComponent","setComponent","addVectors","a","b","add","subVectors","subtract","multiplyVectors","addScaledVector","constructor","multiplyScalar"],"sources":["../../../../src/classes/base/vector.js"],"sourcesContent":["import MathArray from './math-array';\nimport {checkNumber} from '../../lib/validators';\nimport assert from '../../lib/assert';\n\nexport default class Vector extends MathArray {\n  get ELEMENTS() {\n    assert(false);\n    return 0;\n  }\n\n  // VIRTUAL METHODS\n  copy(vector) {\n    assert(false);\n    return this;\n  }\n\n  // ACCESSORS\n\n  get x() {\n    return this[0];\n  }\n  set x(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get y() {\n    return this[1];\n  }\n  set y(value) {\n    this[1] = checkNumber(value);\n  }\n\n  // NOTE: `length` is a reserved word for Arrays, so we can't use `v.length()`\n  // Offer `len` and `magnitude`\n  len() {\n    return Math.sqrt(this.lengthSquared());\n  }\n\n  magnitude() {\n    return this.len();\n  }\n\n  lengthSquared() {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      length += this[i] * this[i];\n    }\n    return length;\n  }\n\n  magnitudeSquared() {\n    return this.lengthSquared();\n  }\n\n  distance(mathArray) {\n    return Math.sqrt(this.distanceSquared(mathArray));\n  }\n\n  distanceSquared(mathArray) {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const dist = this[i] - mathArray[i];\n      length += dist * dist;\n    }\n    return checkNumber(length);\n  }\n\n  dot(mathArray) {\n    let product = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      product += this[i] * mathArray[i];\n    }\n    return checkNumber(product);\n  }\n\n  // MODIFIERS\n\n  normalize() {\n    const length = this.magnitude();\n    if (length !== 0) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= length;\n      }\n    }\n    return this.check();\n  }\n\n  // negate() {\n  //   for (let i = 0; i < this.ELEMENTS; ++i) {\n  //     this[i] = -this[i];\n  //   }\n  //   return this.check();\n  // }\n\n  // inverse() {\n  //   for (let i = 0; i < this.ELEMENTS; ++i) {\n  //     this[i] = 1 / this[i];\n  //   }\n  //   return this.check();\n  // }\n\n  multiply(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  divide(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  // THREE.js compatibility\n  lengthSq() {\n    return this.lengthSquared();\n  }\n\n  distanceTo(vector) {\n    return this.distance(vector);\n  }\n\n  distanceToSquared(vector) {\n    return this.distanceSquared(vector);\n  }\n\n  getComponent(i) {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    return checkNumber(this[i]);\n  }\n\n  setComponent(i, value) {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    this[i] = value;\n    return this.check();\n  }\n\n  addVectors(a, b) {\n    return this.copy(a).add(b);\n  }\n\n  subVectors(a, b) {\n    return this.copy(a).subtract(b);\n  }\n\n  multiplyVectors(a, b) {\n    return this.copy(a).multiply(b);\n  }\n\n  addScaledVector(a, b) {\n    // @ts-ignore error TS2351: Cannot use 'new' with an expression whose type lacks a call or construct signature.\n    return this.add(new this.constructor(a).multiplyScalar(b));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}