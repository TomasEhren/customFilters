{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport MathArray from './base/math-array';\nimport { checkNumber, checkVector } from '../lib/validators';\nimport assert from '../lib/assert';\nimport * as quat from 'gl-matrix/quat';\nimport * as vec4 from 'gl-matrix/vec4';\nvar IDENTITY_QUATERNION = [0, 0, 0, 1];\n\nvar Quaternion = /*#__PURE__*/function (_MathArray) {\n  _inherits(Quaternion, _MathArray);\n\n  var _super = _createSuper(Quaternion);\n\n  function Quaternion() {\n    var _this;\n\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n    _classCallCheck(this, Quaternion);\n\n    _this = _super.call(this, -0, -0, -0, -0);\n\n    if (Array.isArray(x) && arguments.length === 1) {\n      _this.copy(x);\n    } else {\n      _this.set(x, y, z, w);\n    }\n\n    return _this;\n  }\n\n  _createClass(Quaternion, [{\n    key: \"copy\",\n    value: function copy(array) {\n      this[0] = array[0];\n      this[1] = array[1];\n      this[2] = array[2];\n      this[3] = array[3];\n      return this.check();\n    }\n  }, {\n    key: \"set\",\n    value: function set(x, y, z, w) {\n      this[0] = x;\n      this[1] = y;\n      this[2] = z;\n      this[3] = w;\n      return this.check();\n    }\n  }, {\n    key: \"fromMatrix3\",\n    value: function fromMatrix3(m) {\n      quat.fromMat3(this, m);\n      return this.check();\n    }\n  }, {\n    key: \"identity\",\n    value: function identity() {\n      quat.identity(this);\n      return this.check();\n    }\n  }, {\n    key: \"fromAxisRotation\",\n    value: function fromAxisRotation(axis, rad) {\n      quat.setAxisAngle(this, axis, rad);\n      return this.check();\n    }\n  }, {\n    key: \"setAxisAngle\",\n    value: function setAxisAngle(axis, rad) {\n      return this.fromAxisRotation(axis, rad);\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 4;\n    }\n  }, {\n    key: \"x\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      this[1] = checkNumber(value);\n    }\n  }, {\n    key: \"z\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      this[2] = checkNumber(value);\n    }\n  }, {\n    key: \"w\",\n    get: function get() {\n      return this[3];\n    },\n    set: function set(value) {\n      this[3] = checkNumber(value);\n    }\n  }, {\n    key: \"len\",\n    value: function len() {\n      return quat.length(this);\n    }\n  }, {\n    key: \"lengthSquared\",\n    value: function lengthSquared() {\n      return quat.squaredLength(this);\n    }\n  }, {\n    key: \"dot\",\n    value: function dot(a, b) {\n      if (b !== undefined) {\n        throw new Error('Quaternion.dot only takes one argument');\n      }\n\n      return quat.dot(this, a);\n    }\n  }, {\n    key: \"rotationTo\",\n    value: function rotationTo(vectorA, vectorB) {\n      quat.rotationTo(this, vectorA, vectorB);\n      return this.check();\n    }\n  }, {\n    key: \"add\",\n    value: function add(a, b) {\n      if (b !== undefined) {\n        throw new Error('Quaternion.add only takes one argument');\n      }\n\n      quat.add(this, this, a);\n      return this.check();\n    }\n  }, {\n    key: \"calculateW\",\n    value: function calculateW() {\n      quat.calculateW(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"conjugate\",\n    value: function conjugate() {\n      quat.conjugate(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      quat.invert(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"lerp\",\n    value: function lerp(a, b, t) {\n      quat.lerp(this, a, b, t);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyRight\",\n    value: function multiplyRight(a, b) {\n      assert(!b);\n      quat.multiply(this, this, a);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyLeft\",\n    value: function multiplyLeft(a, b) {\n      assert(!b);\n      quat.multiply(this, a, this);\n      return this.check();\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      var length = this.len();\n      var l = length > 0 ? 1 / length : 0;\n      this[0] = this[0] * l;\n      this[1] = this[1] * l;\n      this[2] = this[2] * l;\n      this[3] = this[3] * l;\n\n      if (length === 0) {\n        this[3] = 1;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"rotateX\",\n    value: function rotateX(rad) {\n      quat.rotateX(this, this, rad);\n      return this.check();\n    }\n  }, {\n    key: \"rotateY\",\n    value: function rotateY(rad) {\n      quat.rotateY(this, this, rad);\n      return this.check();\n    }\n  }, {\n    key: \"rotateZ\",\n    value: function rotateZ(rad) {\n      quat.rotateZ(this, this, rad);\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(b) {\n      quat.scale(this, this, b);\n      return this.check();\n    }\n  }, {\n    key: \"slerp\",\n    value: function slerp(start, target, ratio) {\n      switch (arguments.length) {\n        case 1:\n          var _arguments$ = arguments[0];\n          var _arguments$$start = _arguments$.start;\n          start = _arguments$$start === void 0 ? IDENTITY_QUATERNION : _arguments$$start;\n          target = _arguments$.target;\n          ratio = _arguments$.ratio;\n          break;\n\n        case 2:\n          var _arguments = Array.prototype.slice.call(arguments);\n\n          target = _arguments[0];\n          ratio = _arguments[1];\n          start = this;\n          break;\n\n        default:\n      }\n\n      quat.slerp(this, start, target, ratio);\n      return this.check();\n    }\n  }, {\n    key: \"transformVector4\",\n    value: function transformVector4(vector) {\n      var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : vector;\n      vec4.transformQuat(result, vector, this);\n      return checkVector(result, 4);\n    }\n  }, {\n    key: \"lengthSq\",\n    value: function lengthSq() {\n      return this.lengthSquared();\n    }\n  }, {\n    key: \"setFromAxisAngle\",\n    value: function setFromAxisAngle(axis, rad) {\n      return this.setAxisAngle(axis, rad);\n    }\n  }, {\n    key: \"premultiply\",\n    value: function premultiply(a, b) {\n      return this.multiplyLeft(a, b);\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(a, b) {\n      return this.multiplyRight(a, b);\n    }\n  }]);\n\n  return Quaternion;\n}(MathArray);\n\nexport { Quaternion as default };","map":{"version":3,"mappings":"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","names":["MathArray","checkNumber","checkVector","assert","quat","vec4","IDENTITY_QUATERNION","Quaternion","constructor","x","y","z","w","Array","isArray","arguments","length","copy","set","array","check","fromMatrix3","m","fromMat3","identity","fromAxisRotation","axis","rad","setAxisAngle","value","len","lengthSquared","squaredLength","dot","a","b","undefined","Error","rotationTo","vectorA","vectorB","add","calculateW","conjugate","invert","lerp","t","multiplyRight","multiply","multiplyLeft","normalize","l","rotateX","rotateY","rotateZ","scale","slerp","start","target","ratio","transformVector4","vector","result","transformQuat","lengthSq","setFromAxisAngle","premultiply"],"sources":["../../../src/classes/quaternion.js"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport MathArray from './base/math-array';\nimport {checkNumber, checkVector} from '../lib/validators';\nimport assert from '../lib/assert';\n\n// @ts-ignore: error TS2307: Cannot find module 'gl-matrix/...'.\nimport * as quat from 'gl-matrix/quat';\n// @ts-ignore: error TS2307: Cannot find module 'gl-matrix/...'.\nimport * as vec4 from 'gl-matrix/vec4';\n\nconst IDENTITY_QUATERNION = [0, 0, 0, 1];\n\nexport default class Quaternion extends MathArray {\n  constructor(x = 0, y = 0, z = 0, w = 1) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0);\n    // eslint-disable-next-line prefer-rest-params\n    if (Array.isArray(x) && arguments.length === 1) {\n      this.copy(x);\n    } else {\n      this.set(x, y, z, w);\n    }\n  }\n\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    return this.check();\n  }\n\n  set(x, y, z, w) {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = w;\n    return this.check();\n  }\n\n  // Creates a quaternion from the given 3x3 rotation matrix.\n  // NOTE: The resultant quaternion is not normalized, so you should\n  // be sure to renormalize the quaternion yourself where necessary.\n  fromMatrix3(m) {\n    quat.fromMat3(this, m);\n    return this.check();\n  }\n\n  // Set a quat to the identity quaternion\n  identity() {\n    quat.identity(this);\n    return this.check();\n  }\n\n  fromAxisRotation(axis, rad) {\n    quat.setAxisAngle(this, axis, rad);\n    return this.check();\n  }\n\n  // Set the components of a quat to the given values\n  // set(i, j, k, l) {\n  //   quat.set(this, i, j, k, l);\n  //   return this.check();\n  // }\n\n  // Sets a quat from the given angle and rotation axis, then returns it.\n  setAxisAngle(axis, rad) {\n    return this.fromAxisRotation(axis, rad);\n  }\n\n  // Getters/setters\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  get ELEMENTS() {\n    return 4;\n  }\n\n  get x() {\n    return this[0];\n  }\n\n  set x(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get y() {\n    return this[1];\n  }\n\n  set y(value) {\n    this[1] = checkNumber(value);\n  }\n\n  get z() {\n    return this[2];\n  }\n\n  set z(value) {\n    this[2] = checkNumber(value);\n  }\n\n  get w() {\n    return this[3];\n  }\n\n  set w(value) {\n    this[3] = checkNumber(value);\n  }\n\n  /* eslint-enable no-multi-spaces, brace-style, no-return-assign */\n\n  // Calculates the length of a quat\n  len() {\n    return quat.length(this);\n  }\n\n  // Calculates the squared length of a quat\n  lengthSquared() {\n    return quat.squaredLength(this);\n  }\n\n  // Calculates the dot product of two quat's\n  // @return {Number}\n  dot(a, b) {\n    if (b !== undefined) {\n      throw new Error('Quaternion.dot only takes one argument');\n    }\n    return quat.dot(this, a);\n  }\n\n  // Gets the rotation axis and angle for a given quaternion.\n  // If a quaternion is created with setAxisAngle, this method will\n  // return the same values as providied in the original parameter\n  // list OR functionally equivalent values.\n  // Example: The quaternion formed by axis [0, 0, 1] and angle -90\n  // is the same as the quaternion formed by [0, 0, 1] and 270.\n  // This method favors the latter.\n  // @return {{[x,y,z], Number}}\n  // getAxisAngle() {\n  //   const axis = [];\n  //   const angle = quat.getAxisAngle(axis, this);\n  //   return {axis, angle};\n  // }\n\n  // MODIFIERS\n\n  // Sets a quaternion to represent the shortest rotation from one vector\n  // to another. Both vectors are assumed to be unit length.\n  rotationTo(vectorA, vectorB) {\n    quat.rotationTo(this, vectorA, vectorB);\n    return this.check();\n  }\n\n  // Sets the specified quaternion with values corresponding to the given axes.\n  // Each axis is a vec3 and is expected to be unit length and perpendicular\n  // to all other specified axes.\n  // setAxes() {\n  //   Number\n  // }\n\n  // Performs a spherical linear interpolation with two control points\n  // sqlerp() {\n  //   Number;\n  // }\n\n  // Adds two quat's\n  add(a, b) {\n    if (b !== undefined) {\n      throw new Error('Quaternion.add only takes one argument');\n    }\n    quat.add(this, this, a);\n    return this.check();\n  }\n\n  // Calculates the W component of a quat from the X, Y, and Z components.\n  // Any existing W component will be ignored.\n  calculateW() {\n    quat.calculateW(this, this);\n    return this.check();\n  }\n\n  // Calculates the conjugate of a quat If the quaternion is normalized,\n  // this function is faster than quat.inverse and produces the same result.\n  conjugate() {\n    quat.conjugate(this, this);\n    return this.check();\n  }\n\n  // Calculates the inverse of a quat\n  invert() {\n    quat.invert(this, this);\n    return this.check();\n  }\n\n  // Performs a linear interpolation between two quat's\n  lerp(a, b, t) {\n    quat.lerp(this, a, b, t);\n    return this.check();\n  }\n\n  // Multiplies two quat's\n  multiplyRight(a, b) {\n    assert(!b); // Quaternion.multiply only takes one argument\n    quat.multiply(this, this, a);\n    return this.check();\n  }\n\n  multiplyLeft(a, b) {\n    assert(!b); // Quaternion.multiply only takes one argument\n    quat.multiply(this, a, this);\n    return this.check();\n  }\n\n  // Normalize a quat\n  normalize() {\n    // Handle 0 case\n    const length = this.len();\n    const l = length > 0 ? 1 / length : 0;\n    this[0] = this[0] * l;\n    this[1] = this[1] * l;\n    this[2] = this[2] * l;\n    this[3] = this[3] * l;\n    // Set to [0, 0, 0, 1] if length is 0\n    if (length === 0) {\n      this[3] = 1;\n    }\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the X axis\n  rotateX(rad) {\n    quat.rotateX(this, this, rad);\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the Y axis\n  rotateY(rad) {\n    quat.rotateY(this, this, rad);\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the Z axis\n  rotateZ(rad) {\n    quat.rotateZ(this, this, rad);\n    return this.check();\n  }\n\n  // Scales a quat by a scalar number\n  scale(b) {\n    quat.scale(this, this, b);\n    return this.check();\n  }\n\n  // Performs a spherical linear interpolation between two quat\n  slerp(start, target, ratio) {\n    // eslint-disable-next-line prefer-rest-params\n    switch (arguments.length) {\n      case 1: // Deprecated signature ({start, target, ratio})\n        // eslint-disable-next-line prefer-rest-params\n        ({start = IDENTITY_QUATERNION, target, ratio} = arguments[0]);\n        break;\n      case 2: // THREE.js compatibility signature (target, ration)\n        // eslint-disable-next-line prefer-rest-params\n        [target, ratio] = arguments;\n        start = this; // eslint-disable-line\n        break;\n      default: // Default signature: (start, target, ratio)\n    }\n    quat.slerp(this, start, target, ratio);\n    return this.check();\n  }\n\n  transformVector4(vector, result = vector) {\n    vec4.transformQuat(result, vector, this);\n    return checkVector(result, 4);\n  }\n\n  // THREE.js Math API compatibility\n  lengthSq() {\n    return this.lengthSquared();\n  }\n\n  setFromAxisAngle(axis, rad) {\n    return this.setAxisAngle(axis, rad);\n  }\n\n  premultiply(a, b) {\n    return this.multiplyLeft(a, b);\n  }\n\n  multiply(a, b) {\n    return this.multiplyRight(a, b);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}