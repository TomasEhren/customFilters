{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Pass from './pass';\nimport { clear, setParameters, withParameters, cssToDeviceRatio } from '@luma.gl/core';\n\nvar LayersPass = /*#__PURE__*/function (_Pass) {\n  _inherits(LayersPass, _Pass);\n\n  var _super = _createSuper(LayersPass);\n\n  function LayersPass() {\n    _classCallCheck(this, LayersPass);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LayersPass, [{\n    key: \"render\",\n    value: function render(options) {\n      var gl = this.gl;\n      setParameters(gl, {\n        framebuffer: options.target\n      });\n      return this._drawLayers(options);\n    }\n  }, {\n    key: \"_drawLayers\",\n    value: function _drawLayers(options) {\n      var target = options.target,\n          moduleParameters = options.moduleParameters,\n          viewports = options.viewports,\n          views = options.views,\n          onViewportActive = options.onViewportActive,\n          _options$clearCanvas = options.clearCanvas,\n          clearCanvas = _options$clearCanvas === void 0 ? true : _options$clearCanvas;\n      options.pass = options.pass || 'unknown';\n      var gl = this.gl;\n\n      if (clearCanvas) {\n        clearGLCanvas(gl);\n      }\n\n      var renderStats = [];\n\n      var _iterator = _createForOfIteratorHelper(viewports),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var viewport = _step.value;\n          var view = views && views[viewport.id];\n          onViewportActive(viewport);\n\n          var drawLayerParams = this._getDrawLayerParams(viewport, options);\n\n          var subViewports = viewport.subViewports || [viewport];\n\n          var _iterator2 = _createForOfIteratorHelper(subViewports),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var subViewport = _step2.value;\n\n              var stats = this._drawLayersInViewport(gl, {\n                target: target,\n                moduleParameters: moduleParameters,\n                viewport: subViewport,\n                view: view,\n                pass: options.pass,\n                layers: options.layers\n              }, drawLayerParams);\n\n              renderStats.push(stats);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return renderStats;\n    }\n  }, {\n    key: \"_getDrawLayerParams\",\n    value: function _getDrawLayerParams(viewport, _ref) {\n      var layers = _ref.layers,\n          pass = _ref.pass,\n          layerFilter = _ref.layerFilter,\n          effects = _ref.effects,\n          moduleParameters = _ref.moduleParameters;\n      var drawLayerParams = [];\n      var indexResolver = layerIndexResolver();\n      var drawContext = {\n        layer: layers[0],\n        viewport: viewport,\n        isPicking: pass.startsWith('picking'),\n        renderPass: pass\n      };\n      var layerFilterCache = {};\n\n      for (var layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n        var layer = layers[layerIndex];\n\n        var shouldDrawLayer = this._shouldDrawLayer(layer, drawContext, layerFilter, layerFilterCache);\n\n        var layerRenderIndex = indexResolver(layer, shouldDrawLayer);\n        var layerParam = {\n          shouldDrawLayer: shouldDrawLayer,\n          layerRenderIndex: layerRenderIndex\n        };\n\n        if (shouldDrawLayer) {\n          layerParam.moduleParameters = this._getModuleParameters(layer, effects, pass, moduleParameters);\n          layerParam.layerParameters = this.getLayerParameters(layer, layerIndex, viewport);\n        }\n\n        drawLayerParams[layerIndex] = layerParam;\n      }\n\n      return drawLayerParams;\n    }\n  }, {\n    key: \"_drawLayersInViewport\",\n    value: function _drawLayersInViewport(gl, _ref2, drawLayerParams) {\n      var layers = _ref2.layers,\n          globalModuleParameters = _ref2.moduleParameters,\n          pass = _ref2.pass,\n          target = _ref2.target,\n          viewport = _ref2.viewport,\n          view = _ref2.view;\n      var glViewport = getGLViewport(gl, {\n        moduleParameters: globalModuleParameters,\n        target: target,\n        viewport: viewport\n      });\n\n      if (view && view.props.clear) {\n        var clearOpts = view.props.clear === true ? {\n          color: true,\n          depth: true\n        } : view.props.clear;\n        withParameters(gl, {\n          scissorTest: true,\n          scissor: glViewport\n        }, function () {\n          return clear(gl, clearOpts);\n        });\n      }\n\n      var renderStatus = {\n        totalCount: layers.length,\n        visibleCount: 0,\n        compositeCount: 0,\n        pickableCount: 0\n      };\n      setParameters(gl, {\n        viewport: glViewport\n      });\n\n      for (var layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n        var layer = layers[layerIndex];\n        var _drawLayerParams$laye = drawLayerParams[layerIndex],\n            shouldDrawLayer = _drawLayerParams$laye.shouldDrawLayer,\n            layerRenderIndex = _drawLayerParams$laye.layerRenderIndex,\n            moduleParameters = _drawLayerParams$laye.moduleParameters,\n            layerParameters = _drawLayerParams$laye.layerParameters;\n\n        if (shouldDrawLayer && layer.props.pickable) {\n          renderStatus.pickableCount++;\n        }\n\n        if (layer.isComposite) {\n          renderStatus.compositeCount++;\n        } else if (shouldDrawLayer) {\n          renderStatus.visibleCount++;\n          moduleParameters.viewport = viewport;\n\n          try {\n            layer.drawLayer({\n              moduleParameters: moduleParameters,\n              uniforms: {\n                layerIndex: layerRenderIndex\n              },\n              parameters: layerParameters\n            });\n          } catch (err) {\n            layer.raiseError(err, \"drawing \".concat(layer, \" to \").concat(pass));\n          }\n        }\n      }\n\n      return renderStatus;\n    }\n  }, {\n    key: \"shouldDrawLayer\",\n    value: function shouldDrawLayer(layer) {\n      return true;\n    }\n  }, {\n    key: \"getModuleParameters\",\n    value: function getModuleParameters(layer, effects) {\n      return null;\n    }\n  }, {\n    key: \"getLayerParameters\",\n    value: function getLayerParameters(layer, layerIndex, viewport) {\n      return layer.props.parameters;\n    }\n  }, {\n    key: \"_shouldDrawLayer\",\n    value: function _shouldDrawLayer(layer, drawContext, layerFilter, layerFilterCache) {\n      var shouldDrawLayer = this.shouldDrawLayer(layer) && layer.props.visible;\n\n      if (!shouldDrawLayer) {\n        return false;\n      }\n\n      drawContext.layer = layer;\n      var parent = layer.parent;\n\n      while (parent) {\n        if (!parent.props.visible || !parent.filterSubLayer(drawContext)) {\n          return false;\n        }\n\n        drawContext.layer = parent;\n        parent = parent.parent;\n      }\n\n      if (layerFilter) {\n        var rootLayerId = drawContext.layer.id;\n\n        if (!(rootLayerId in layerFilterCache)) {\n          layerFilterCache[rootLayerId] = layerFilter(drawContext);\n        }\n\n        if (!layerFilterCache[rootLayerId]) {\n          return false;\n        }\n      }\n\n      layer.activateViewport(drawContext.viewport);\n      return true;\n    }\n  }, {\n    key: \"_getModuleParameters\",\n    value: function _getModuleParameters(layer, effects, pass, overrides) {\n      var _layer$internalState;\n\n      var moduleParameters = Object.assign(Object.create(((_layer$internalState = layer.internalState) === null || _layer$internalState === void 0 ? void 0 : _layer$internalState.propsInTransition) || layer.props), {\n        autoWrapLongitude: layer.wrapLongitude,\n        viewport: layer.context.viewport,\n        mousePosition: layer.context.mousePosition,\n        pickingActive: 0,\n        devicePixelRatio: cssToDeviceRatio(this.gl)\n      });\n\n      if (effects) {\n        var _iterator3 = _createForOfIteratorHelper(effects),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var effect = _step3.value;\n            Object.assign(moduleParameters, effect.getModuleParameters(layer));\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n\n      return Object.assign(moduleParameters, this.getModuleParameters(layer, effects), overrides);\n    }\n  }]);\n\n  return LayersPass;\n}(Pass);\n\nexport { LayersPass as default };\nexport function layerIndexResolver() {\n  var startIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var layerIndices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var resolvers = {};\n\n  var resolveLayerIndex = function resolveLayerIndex(layer, isDrawn) {\n    var indexOverride = layer.props._offset;\n    var layerId = layer.id;\n    var parentId = layer.parent && layer.parent.id;\n    var index;\n\n    if (parentId && !(parentId in layerIndices)) {\n      resolveLayerIndex(layer.parent, false);\n    }\n\n    if (parentId in resolvers) {\n      var resolver = resolvers[parentId] = resolvers[parentId] || layerIndexResolver(layerIndices[parentId], layerIndices);\n      index = resolver(layer, isDrawn);\n      resolvers[layerId] = resolver;\n    } else if (Number.isFinite(indexOverride)) {\n      index = indexOverride + (layerIndices[parentId] || 0);\n      resolvers[layerId] = null;\n    } else {\n      index = startIndex;\n    }\n\n    if (isDrawn && index >= startIndex) {\n      startIndex = index + 1;\n    }\n\n    layerIndices[layerId] = index;\n    return index;\n  };\n\n  return resolveLayerIndex;\n}\n\nfunction getGLViewport(gl, _ref3) {\n  var moduleParameters = _ref3.moduleParameters,\n      target = _ref3.target,\n      viewport = _ref3.viewport;\n  var useTarget = target && target.id !== 'default-framebuffer';\n  var pixelRatio = moduleParameters && moduleParameters.devicePixelRatio || cssToDeviceRatio(gl);\n  var height = useTarget ? target.height : gl.drawingBufferHeight;\n  var dimensions = viewport;\n  return [dimensions.x * pixelRatio, height - (dimensions.y + dimensions.height) * pixelRatio, dimensions.width * pixelRatio, dimensions.height * pixelRatio];\n}\n\nfunction clearGLCanvas(gl) {\n  var width = gl.drawingBufferWidth;\n  var height = gl.drawingBufferHeight;\n  setParameters(gl, {\n    viewport: [0, 0, width, height]\n  });\n  gl.clear(16384 | 256);\n}","map":{"version":3,"mappings":";;;;;AACA,OAAOA,IAAP,MAAiB,QAAjB;AACA,SAAQC,KAAR,EAAeC,aAAf,EAA8BC,cAA9B,EAA8CC,gBAA9C,QAAqE,eAArE;;IA0CqBC,U;;;;;;;;;;;;;WACnBC,gBAAOC,OAAPD,EAA8C;MAC5C,IAAME,EAAE,GAAG,KAAKA,EAAhB;MAEAN,aAAa,CAACM,EAAD,EAAK;QAACC,WAAW,EAAEF,OAAO,CAACG;MAAtB,CAAL,CAAbR;MACA,OAAO,KAAKS,WAAL,CAAiBJ,OAAjB,CAAP;IACD;;;WAGOI,qBAAYJ,OAAZI,EAA8C;MACpD,IACED,MADF,GAOIH,OAPJ,CACEG,MADF;MAAA,IAEEE,gBAFF,GAOIL,OAPJ,CAEEK,gBAFF;MAAA,IAGEC,SAHF,GAOIN,OAPJ,CAGEM,SAHF;MAAA,IAIEC,KAJF,GAOIP,OAPJ,CAIEO,KAJF;MAAA,IAKEC,gBALF,GAOIR,OAPJ,CAKEQ,gBALF;MAAA,2BAOIR,OAPJ,CAMES,WANF;MAAA,IAMEA,WANF,qCAMgB,IANhB;MAQAT,OAAO,CAACU,IAARV,GAAeA,OAAO,CAACU,IAARV,IAAgB,SAA/BA;MAEA,IAAMC,EAAE,GAAG,KAAKA,EAAhB;;MACA,IAAIQ,WAAJ,EAAiB;QACfE,aAAa,CAACV,EAAD,CAAbU;MACD;;MAED,IAAMC,WAA0B,GAAG,EAAnC;;MAhBoD,2CAkB7BN,SAlB6B;MAAA;;MAAA;QAkBpD,oDAAkC;UAAA,IAAvBO,QAAuB;UAChC,IAAMC,IAAI,GAAGP,KAAK,IAAIA,KAAK,CAACM,QAAQ,CAACE,EAAV,CAA3B;UAGAP,gBAAgB,CAACK,QAAD,CAAhBL;;UAEA,IAAMQ,eAAe,GAAG,KAAKC,mBAAL,CAAyBJ,QAAzB,EAAmCb,OAAnC,CAAxB;;UAIA,IAAMkB,YAAY,GAAGL,QAAQ,CAACK,YAATL,IAAyB,CAACA,QAAD,CAA9C;;UAVgC,4CAWNK,YAXM;UAAA;;UAAA;YAWhC,uDAAwC;cAAA,IAA7BC,WAA6B;;cACtC,IAAMC,KAAK,GAAG,KAAKC,qBAAL,CACZpB,EADY,EAEZ;gBACEE,MADF,EACEA,MADF;gBAEEE,gBAFF,EAEEA,gBAFF;gBAGEQ,QAAQ,EAAEM,WAHZ;gBAIEL,IAJF,EAIEA,IAJF;gBAKEJ,IAAI,EAAEV,OAAO,CAACU,IALhB;gBAMEY,MAAM,EAAEtB,OAAO,CAACsB;cANlB,CAFY,EAUZN,eAVY,CAAd;;cAYAJ,WAAW,CAACW,IAAZX,CAAiBQ,KAAjBR;YACD;UAzB+B;YAAA;UAAA;YAAA;UAAA;QA0BjC;MA5CmD;QAAA;MAAA;QAAA;MAAA;;MA6CpD,OAAOA,WAAP;IACD;;;WAKOK,6BACNJ,QADMI,QAGiB;MAAA,IADtBK,MACsB,QADtBA,MACsB;MAAA,IADdZ,IACc,QADdA,IACc;MAAA,IADRc,WACQ,QADRA,WACQ;MAAA,IADKC,OACL,QADKA,OACL;MAAA,IADcpB,gBACd,QADcA,gBACd;MACvB,IAAMW,eAAsC,GAAG,EAA/C;MACA,IAAMU,aAAa,GAAGC,kBAAkB,EAAxC;MACA,IAAMC,WAA0B,GAAG;QACjCC,KAAK,EAAEP,MAAM,CAAC,CAAD,CADoB;QAEjCT,QAFiC,EAEjCA,QAFiC;QAGjCiB,SAAS,EAAEpB,IAAI,CAACqB,UAALrB,CAAgB,SAAhBA,CAHsB;QAIjCsB,UAAU,EAAEtB;MAJqB,CAAnC;MAMA,IAAMuB,gBAAgB,GAAG,EAAzB;;MACA,KAAK,IAAIC,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAGZ,MAAM,CAACa,MAA7C,EAAqDD,UAAU,EAA/D,EAAmE;QACjE,IAAML,KAAK,GAAGP,MAAM,CAACY,UAAD,CAApB;;QAEA,IAAME,eAAe,GAAG,KAAKC,gBAAL,CACtBR,KADsB,EAEtBD,WAFsB,EAGtBJ,WAHsB,EAItBS,gBAJsB,CAAxB;;QAUA,IAAMK,gBAAgB,GAAGZ,aAAa,CAACG,KAAD,EAAQO,eAAR,CAAtC;QAEA,IAAMG,UAA+B,GAAG;UACtCH,eADsC,EACtCA,eADsC;UAEtCE;QAFsC,CAAxC;;QAKA,IAAIF,eAAJ,EAAqB;UACnBG,UAAU,CAAClC,gBAAXkC,GAA8B,KAAKC,oBAAL,CAC5BX,KAD4B,EAE5BJ,OAF4B,EAG5Bf,IAH4B,EAI5BL,gBAJ4B,CAA9BkC;UAMAA,UAAU,CAACE,eAAXF,GAA6B,KAAKG,kBAAL,CAAwBb,KAAxB,EAA+BK,UAA/B,EAA2CrB,QAA3C,CAA7B0B;QACD;;QACDvB,eAAe,CAACkB,UAAD,CAAflB,GAA8BuB,UAA9BvB;MACD;;MACD,OAAOA,eAAP;IACD;;;WAMOK,+BACNpB,EADMoB,SAGNL,eAHMK,EAIO;MAAA,IAFZC,MAEY,SAFZA,MAEY;MAAA,IAFcqB,sBAEd,SAFJtC,gBAEI;MAAA,IAFsCK,IAEtC,SAFsCA,IAEtC;MAAA,IAF4CP,MAE5C,SAF4CA,MAE5C;MAAA,IAFoDU,QAEpD,SAFoDA,QAEpD;MAAA,IAF8DC,IAE9D,SAF8DA,IAE9D;MACb,IAAM8B,UAAU,GAAGC,aAAa,CAAC5C,EAAD,EAAK;QACnCI,gBAAgB,EAAEsC,sBADiB;QAEnCxC,MAFmC,EAEnCA,MAFmC;QAGnCU;MAHmC,CAAL,CAAhC;;MAMA,IAAIC,IAAI,IAAIA,IAAI,CAACgC,KAALhC,CAAWpB,KAAvB,EAA8B;QAC5B,IAAMqD,SAAS,GAAGjC,IAAI,CAACgC,KAALhC,CAAWpB,KAAXoB,KAAqB,IAArBA,GAA4B;UAACkC,KAAK,EAAE,IAAR;UAAcC,KAAK,EAAE;QAArB,CAA5BnC,GAAyDA,IAAI,CAACgC,KAALhC,CAAWpB,KAAtF;QACAE,cAAc,CACZK,EADY,EAEZ;UACEiD,WAAW,EAAE,IADf;UAEEC,OAAO,EAAEP;QAFX,CAFY,EAMZ;UAAA,OAAMlD,KAAK,CAACO,EAAD,EAAK8C,SAAL,CAAX;QAAA,CANY,CAAdnD;MAQD;;MAGD,IAAMwD,YAAY,GAAG;QACnBC,UAAU,EAAE/B,MAAM,CAACa,MADA;QAEnBmB,YAAY,EAAE,CAFK;QAGnBC,cAAc,EAAE,CAHG;QAInBC,aAAa,EAAE;MAJI,CAArB;MAOA7D,aAAa,CAACM,EAAD,EAAK;QAACY,QAAQ,EAAE+B;MAAX,CAAL,CAAbjD;;MAGA,KAAK,IAAIuC,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAGZ,MAAM,CAACa,MAA7C,EAAqDD,UAAU,EAA/D,EAAmE;QACjE,IAAML,KAAK,GAAGP,MAAM,CAACY,UAAD,CAApB;QACA,4BACElB,eAAe,CAACkB,UAAD,CADjB;QAAA,IAAOE,eAAP,yBAAOA,eAAP;QAAA,IAAwBE,gBAAxB,yBAAwBA,gBAAxB;QAAA,IAA0CjC,gBAA1C,yBAA0CA,gBAA1C;QAAA,IAA4DoC,eAA5D,yBAA4DA,eAA5D;;QAIA,IAAIL,eAAe,IAAIP,KAAK,CAACiB,KAANjB,CAAY4B,QAAnC,EAA6C;UAC3CL,YAAY,CAACI,aAAbJ;QACD;;QACD,IAAIvB,KAAK,CAAC6B,WAAV,EAAuB;UACrBN,YAAY,CAACG,cAAbH;QADF,OAEO,IAAIhB,eAAJ,EAAqB;UAE1BgB,YAAY,CAACE,YAAbF;UAGA/C,gBAAgB,CAACQ,QAAjBR,GAA4BQ,QAA5BR;;UAEA,IAAI;YACFwB,KAAK,CAAC8B,SAAN9B,CAAgB;cACdxB,gBADc,EACdA,gBADc;cAEduD,QAAQ,EAAE;gBAAC1B,UAAU,EAAEI;cAAb,CAFI;cAGduB,UAAU,EAAEpB;YAHE,CAAhBZ;UADF,EAME,OAAOiC,GAAP,EAAY;YACZjC,KAAK,CAACkC,UAANlC,CAAiBiC,GAAjBjC,oBAAiCA,KAAjC,iBAA6CnB,IAA7C;UACD;QACF;MACF;;MAED,OAAO0C,YAAP;IACD;;;WAIShB,yBAAgBP,KAAhBO,EAAuC;MAC/C,OAAO,IAAP;IACD;;;WAES4B,6BAAoBnC,KAApBmC,EAAkCvC,OAAlCuC,EAA2D;MACnE,OAAO,IAAP;IACD;;;WAEStB,4BAAmBb,KAAnBa,EAAiCR,UAAjCQ,EAAqD7B,QAArD6B,EAA8E;MACtF,OAAOb,KAAK,CAACiB,KAANjB,CAAYgC,UAAnB;IACD;;;WAGOxB,0BACNR,KADMQ,EAENT,WAFMS,EAGNb,WAHMa,EAINJ,gBAJMI,EAKN;MACA,IAAMD,eAAe,GAAG,KAAKA,eAAL,CAAqBP,KAArB,KAA+BA,KAAK,CAACiB,KAANjB,CAAYoC,OAAnE;;MAEA,IAAI,CAAC7B,eAAL,EAAsB;QACpB,OAAO,KAAP;MACD;;MAEDR,WAAW,CAACC,KAAZD,GAAoBC,KAApBD;MAEA,IAAIsC,MAAM,GAAGrC,KAAK,CAACqC,MAAnB;;MACA,OAAOA,MAAP,EAAe;QAEb,IAAI,CAACA,MAAM,CAACpB,KAAPoB,CAAaD,OAAd,IAAyB,CAACC,MAAM,CAACC,cAAPD,CAAsBtC,WAAtBsC,CAA9B,EAAkE;UAChE,OAAO,KAAP;QACD;;QACDtC,WAAW,CAACC,KAAZD,GAAoBsC,MAApBtC;QACAsC,MAAM,GAAGA,MAAM,CAACA,MAAhBA;MACD;;MAED,IAAI1C,WAAJ,EAAiB;QACf,IAAM4C,WAAW,GAAGxC,WAAW,CAACC,KAAZD,CAAkBb,EAAtC;;QACA,IAAI,EAAEqD,WAAW,IAAInC,gBAAjB,CAAJ,EAAwC;UACtCA,gBAAgB,CAACmC,WAAD,CAAhBnC,GAAgCT,WAAW,CAACI,WAAD,CAA3CK;QACD;;QACD,IAAI,CAACA,gBAAgB,CAACmC,WAAD,CAArB,EAAoC;UAClC,OAAO,KAAP;QACD;MACF;;MAGDvC,KAAK,CAACwC,gBAANxC,CAAuBD,WAAW,CAACf,QAAnCgB;MAEA,OAAO,IAAP;IACD;;;WAEOW,8BACNX,KADMW,EAENf,OAFMe,EAGN9B,IAHM8B,EAIN8B,SAJM9B,EAKD;MAAA;;MACL,IAAMnC,gBAAgB,GAAGkE,MAAM,CAACC,MAAPD,CACvBA,MAAM,CAACE,MAAPF,CAAc,8BAAK,CAACG,aAAN,8EAAqBC,iBAArB,KAA0C9C,KAAK,CAACiB,KAA9DyB,CADuBA,EAEvB;QACEK,iBAAiB,EAAE/C,KAAK,CAACgD,aAD3B;QAGEhE,QAAQ,EAAEgB,KAAK,CAACiD,OAANjD,CAAchB,QAH1B;QAKEkE,aAAa,EAAElD,KAAK,CAACiD,OAANjD,CAAckD,aAL/B;QAMEC,aAAa,EAAE,CANjB;QAOEC,gBAAgB,EAAEpF,gBAAgB,CAAC,KAAKI,EAAN;MAPpC,CAFuBsE,CAAzB;;MAaA,IAAI9C,OAAJ,EAAa;QAAA,4CACUA,OADV;QAAA;;QAAA;UACX,uDAA8B;YAAA,IAAnByD,MAAmB;YAC5BX,MAAM,CAACC,MAAPD,CAAclE,gBAAdkE,EAAgCW,MAAM,CAAClB,mBAAPkB,CAA2BrD,KAA3BqD,CAAhCX;UACD;QAHU;UAAA;QAAA;UAAA;QAAA;MAIZ;;MAED,OAAOA,MAAM,CAACC,MAAPD,CAAclE,gBAAdkE,EAAgC,KAAKP,mBAAL,CAAyBnC,KAAzB,EAAgCJ,OAAhC,CAAhC8C,EAA0ED,SAA1EC,CAAP;IACD;;;;EAnQqC9E,I;;SAAnBK,U;AA4QrB,OAAO,SAAS6B,kBAAT,GAGuC;EAAA,IAF5CwD,UAE4C,uEAFvB,CAEuB;EAAA,IAD5CC,YAC4C,uEADL,EACK;EAC5C,IAAMC,SAAS,GAAG,EAAlB;;EAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACzD,KAAD,EAAQ0D,OAAR,EAAoB;IAC5C,IAAMC,aAAa,GAAG3D,KAAK,CAACiB,KAANjB,CAAY4D,OAAlC;IACA,IAAMC,OAAO,GAAG7D,KAAK,CAACd,EAAtB;IACA,IAAM4E,QAAQ,GAAG9D,KAAK,CAACqC,MAANrC,IAAgBA,KAAK,CAACqC,MAANrC,CAAad,EAA9C;IAEA,IAAI6E,KAAJ;;IAEA,IAAID,QAAQ,IAAI,EAAEA,QAAQ,IAAIP,YAAd,CAAhB,EAA6C;MAE3CE,iBAAiB,CAACzD,KAAK,CAACqC,MAAP,EAAe,KAAf,CAAjBoB;IACD;;IAED,IAAIK,QAAQ,IAAIN,SAAhB,EAA2B;MACzB,IAAMQ,QAAQ,GAAIR,SAAS,CAACM,QAAD,CAATN,GAChBA,SAAS,CAACM,QAAD,CAATN,IAAuB1D,kBAAkB,CAACyD,YAAY,CAACO,QAAD,CAAb,EAAyBP,YAAzB,CAD3C;MAEAQ,KAAK,GAAGC,QAAQ,CAAChE,KAAD,EAAQ0D,OAAR,CAAhBK;MACAP,SAAS,CAACK,OAAD,CAATL,GAAqBQ,QAArBR;IAJF,OAKO,IAAIS,MAAM,CAACC,QAAPD,CAAgBN,aAAhBM,CAAJ,EAAoC;MACzCF,KAAK,GAAGJ,aAAa,IAAIJ,YAAY,CAACO,QAAD,CAAZP,IAA0B,CAA9B,CAArBQ;MAGAP,SAAS,CAACK,OAAD,CAATL,GAAqB,IAArBA;IAJK,OAKA;MACLO,KAAK,GAAGT,UAARS;IACD;;IAED,IAAIL,OAAO,IAAIK,KAAK,IAAIT,UAAxB,EAAoC;MAClCA,UAAU,GAAGS,KAAK,GAAG,CAArBT;IACD;;IAEDC,YAAY,CAACM,OAAD,CAAZN,GAAwBQ,KAAxBR;IACA,OAAOQ,KAAP;EA/BF;;EAiCA,OAAON,iBAAP;AACD;;AAGD,SAASzC,aAAT,CACE5C,EADF,SAWoC;EAAA,IARhCI,gBAQgC,SARhCA,gBAQgC;EAAA,IAPhCF,MAOgC,SAPhCA,MAOgC;EAAA,IANhCU,QAMgC,SANhCA,QAMgC;EAClC,IAAMmF,SAAS,GAAG7F,MAAM,IAAIA,MAAM,CAACY,EAAPZ,KAAc,qBAA1C;EACA,IAAM8F,UAAU,GACb5F,gBAAgB,IAAIA,gBAAgB,CAAC4E,gBAArC5E,IAA0DR,gBAAgB,CAACI,EAAD,CAD7E;EAIA,IAAMiG,MAAM,GAAGF,SAAS,GAAG7F,MAAM,CAAC+F,MAAV,GAAmBjG,EAAE,CAACkG,mBAA9C;EAGA,IAAMC,UAAU,GAAGvF,QAAnB;EACA,OAAO,CACLuF,UAAU,CAACC,CAAXD,GAAeH,UADV,EAELC,MAAM,GAAG,CAACE,UAAU,CAACE,CAAXF,GAAeA,UAAU,CAACF,MAA3B,IAAqCD,UAFzC,EAGLG,UAAU,CAACG,KAAXH,GAAmBH,UAHd,EAILG,UAAU,CAACF,MAAXE,GAAoBH,UAJf,CAAP;AAMD;;AAED,SAAStF,aAAT,CAAuBV,EAAvB,EAAkD;EAChD,IAAMsG,KAAK,GAAGtG,EAAE,CAACuG,kBAAjB;EACA,IAAMN,MAAM,GAAGjG,EAAE,CAACkG,mBAAlB;EAEAxG,aAAa,CAACM,EAAD,EAAK;IAACY,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO0F,KAAP,EAAcL,MAAd;EAAX,CAAL,CAAbvG;EACAM,EAAE,CAACP,KAAHO,CAAS,WAATA;AACD","names":["Pass","clear","setParameters","withParameters","cssToDeviceRatio","LayersPass","render","options","gl","framebuffer","target","_drawLayers","moduleParameters","viewports","views","onViewportActive","clearCanvas","pass","clearGLCanvas","renderStats","viewport","view","id","drawLayerParams","_getDrawLayerParams","subViewports","subViewport","stats","_drawLayersInViewport","layers","push","layerFilter","effects","indexResolver","layerIndexResolver","drawContext","layer","isPicking","startsWith","renderPass","layerFilterCache","layerIndex","length","shouldDrawLayer","_shouldDrawLayer","layerRenderIndex","layerParam","_getModuleParameters","layerParameters","getLayerParameters","globalModuleParameters","glViewport","getGLViewport","props","clearOpts","color","depth","scissorTest","scissor","renderStatus","totalCount","visibleCount","compositeCount","pickableCount","pickable","isComposite","drawLayer","uniforms","parameters","err","raiseError","getModuleParameters","visible","parent","filterSubLayer","rootLayerId","activateViewport","overrides","Object","assign","create","internalState","propsInTransition","autoWrapLongitude","wrapLongitude","context","mousePosition","pickingActive","devicePixelRatio","effect","startIndex","layerIndices","resolvers","resolveLayerIndex","isDrawn","indexOverride","_offset","layerId","parentId","index","resolver","Number","isFinite","useTarget","pixelRatio","height","drawingBufferHeight","dimensions","x","y","width","drawingBufferWidth"],"sources":["../../../src/passes/layers-pass.ts"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport Pass from './pass';\nimport {clear, setParameters, withParameters, cssToDeviceRatio} from '@luma.gl/core';\n\nimport type {Framebuffer} from '@luma.gl/core';\nimport type Viewport from '../viewports/viewport';\nimport type View from '../views/view';\nimport type Layer from '../lib/layer';\nimport type Effect from '../lib/effect';\n\nexport type LayersPassRenderOptions = {\n  target?: Framebuffer;\n  pass?: string;\n  layers: Layer[];\n  viewports: Viewport[];\n  onViewportActive: (viewport: Viewport) => void;\n  views?: Record<string, View>;\n  effects?: Effect[];\n  clearCanvas?: boolean;\n  layerFilter?: (context: FilterContext) => boolean;\n  moduleParameters?: any;\n};\n\ntype DrawLayerParameters = {\n  shouldDrawLayer: boolean;\n  layerRenderIndex: number;\n  moduleParameters?: any;\n  layerParameters?: any;\n};\n\ntype FilterContext = {\n  layer: Layer;\n  viewport: Viewport;\n  isPicking: boolean;\n  renderPass: string;\n};\n\nexport type RenderStats = {\n  totalCount: number;\n  visibleCount: number;\n  compositeCount: number;\n  pickableCount: number;\n};\n\nexport default class LayersPass extends Pass {\n  render(options: LayersPassRenderOptions): any {\n    const gl = this.gl;\n\n    setParameters(gl, {framebuffer: options.target});\n    return this._drawLayers(options);\n  }\n\n  // Draw a list of layers in a list of viewports\n  private _drawLayers(options: LayersPassRenderOptions) {\n    const {\n      target,\n      moduleParameters,\n      viewports,\n      views,\n      onViewportActive,\n      clearCanvas = true\n    } = options;\n    options.pass = options.pass || 'unknown';\n\n    const gl = this.gl;\n    if (clearCanvas) {\n      clearGLCanvas(gl);\n    }\n\n    const renderStats: RenderStats[] = [];\n\n    for (const viewport of viewports) {\n      const view = views && views[viewport.id];\n\n      // Update context to point to this viewport\n      onViewportActive(viewport);\n\n      const drawLayerParams = this._getDrawLayerParams(viewport, options);\n\n      // render this viewport\n      // @ts-expect-error\n      const subViewports = viewport.subViewports || [viewport];\n      for (const subViewport of subViewports) {\n        const stats = this._drawLayersInViewport(\n          gl,\n          {\n            target,\n            moduleParameters,\n            viewport: subViewport,\n            view,\n            pass: options.pass,\n            layers: options.layers\n          },\n          drawLayerParams\n        );\n        renderStats.push(stats);\n      }\n    }\n    return renderStats;\n  }\n\n  // Resolve the parameters needed to draw each layer\n  // When a viewport contains multiple subviewports (e.g. repeated web mercator map),\n  // this is only done once for the parent viewport\n  private _getDrawLayerParams(\n    viewport: Viewport,\n    {layers, pass, layerFilter, effects, moduleParameters}: LayersPassRenderOptions\n  ): DrawLayerParameters[] {\n    const drawLayerParams: DrawLayerParameters[] = [];\n    const indexResolver = layerIndexResolver();\n    const drawContext: FilterContext = {\n      layer: layers[0],\n      viewport,\n      isPicking: pass.startsWith('picking'),\n      renderPass: pass\n    };\n    const layerFilterCache = {};\n    for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n      const layer = layers[layerIndex];\n      // Check if we should draw layer\n      const shouldDrawLayer = this._shouldDrawLayer(\n        layer,\n        drawContext,\n        layerFilter,\n        layerFilterCache\n      );\n\n      // This is the \"logical\" index for ordering this layer in the stack\n      // used to calculate polygon offsets\n      // It can be the same as another layer\n      const layerRenderIndex = indexResolver(layer, shouldDrawLayer);\n\n      const layerParam: DrawLayerParameters = {\n        shouldDrawLayer,\n        layerRenderIndex\n      };\n\n      if (shouldDrawLayer) {\n        layerParam.moduleParameters = this._getModuleParameters(\n          layer,\n          effects,\n          pass,\n          moduleParameters\n        );\n        layerParam.layerParameters = this.getLayerParameters(layer, layerIndex, viewport);\n      }\n      drawLayerParams[layerIndex] = layerParam;\n    }\n    return drawLayerParams;\n  }\n\n  // Draws a list of layers in one viewport\n  // TODO - when picking we could completely skip rendering viewports that dont\n  // intersect with the picking rect\n  /* eslint-disable max-depth, max-statements */\n  private _drawLayersInViewport(\n    gl,\n    {layers, moduleParameters: globalModuleParameters, pass, target, viewport, view},\n    drawLayerParams\n  ): RenderStats {\n    const glViewport = getGLViewport(gl, {\n      moduleParameters: globalModuleParameters,\n      target,\n      viewport\n    });\n\n    if (view && view.props.clear) {\n      const clearOpts = view.props.clear === true ? {color: true, depth: true} : view.props.clear;\n      withParameters(\n        gl,\n        {\n          scissorTest: true,\n          scissor: glViewport\n        },\n        () => clear(gl, clearOpts)\n      );\n    }\n\n    // render layers in normal colors\n    const renderStatus = {\n      totalCount: layers.length,\n      visibleCount: 0,\n      compositeCount: 0,\n      pickableCount: 0\n    };\n\n    setParameters(gl, {viewport: glViewport});\n\n    // render layers in normal colors\n    for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n      const layer = layers[layerIndex];\n      const {shouldDrawLayer, layerRenderIndex, moduleParameters, layerParameters} =\n        drawLayerParams[layerIndex];\n\n      // Calculate stats\n      if (shouldDrawLayer && layer.props.pickable) {\n        renderStatus.pickableCount++;\n      }\n      if (layer.isComposite) {\n        renderStatus.compositeCount++;\n      } else if (shouldDrawLayer) {\n        // Draw the layer\n        renderStatus.visibleCount++;\n\n        // overwrite layer.context.viewport with the sub viewport\n        moduleParameters.viewport = viewport;\n\n        try {\n          layer.drawLayer({\n            moduleParameters,\n            uniforms: {layerIndex: layerRenderIndex},\n            parameters: layerParameters\n          });\n        } catch (err) {\n          layer.raiseError(err, `drawing ${layer} to ${pass}`);\n        }\n      }\n    }\n\n    return renderStatus;\n  }\n  /* eslint-enable max-depth, max-statements */\n\n  /* Methods for subclass overrides */\n  protected shouldDrawLayer(layer: Layer): boolean {\n    return true;\n  }\n\n  protected getModuleParameters(layer: Layer, effects?: Effect[]): any {\n    return null;\n  }\n\n  protected getLayerParameters(layer: Layer, layerIndex: number, viewport: Viewport): any {\n    return layer.props.parameters;\n  }\n\n  /* Private */\n  private _shouldDrawLayer(\n    layer: Layer,\n    drawContext: FilterContext,\n    layerFilter: ((params: FilterContext) => boolean) | undefined,\n    layerFilterCache: Record<string, boolean>\n  ) {\n    const shouldDrawLayer = this.shouldDrawLayer(layer) && layer.props.visible;\n\n    if (!shouldDrawLayer) {\n      return false;\n    }\n\n    drawContext.layer = layer;\n\n    let parent = layer.parent as Layer;\n    while (parent) {\n      // @ts-ignore\n      if (!parent.props.visible || !parent.filterSubLayer(drawContext)) {\n        return false;\n      }\n      drawContext.layer = parent;\n      parent = parent.parent as Layer;\n    }\n\n    if (layerFilter) {\n      const rootLayerId = drawContext.layer.id;\n      if (!(rootLayerId in layerFilterCache)) {\n        layerFilterCache[rootLayerId] = layerFilter(drawContext);\n      }\n      if (!layerFilterCache[rootLayerId]) {\n        return false;\n      }\n    }\n\n    // If a layer is drawn, update its viewportChanged flag\n    layer.activateViewport(drawContext.viewport);\n\n    return true;\n  }\n\n  private _getModuleParameters(\n    layer: Layer,\n    effects: Effect[] | undefined,\n    pass: string,\n    overrides: any\n  ): any {\n    const moduleParameters = Object.assign(\n      Object.create(layer.internalState?.propsInTransition || layer.props),\n      {\n        autoWrapLongitude: layer.wrapLongitude,\n        // @ts-ignore\n        viewport: layer.context.viewport,\n        // @ts-ignore\n        mousePosition: layer.context.mousePosition,\n        pickingActive: 0,\n        devicePixelRatio: cssToDeviceRatio(this.gl)\n      }\n    );\n\n    if (effects) {\n      for (const effect of effects) {\n        Object.assign(moduleParameters, effect.getModuleParameters(layer));\n      }\n    }\n\n    return Object.assign(moduleParameters, this.getModuleParameters(layer, effects), overrides);\n  }\n}\n\n// If the _index prop is defined, return a layer index that's relative to its parent\n// Otherwise return the index of the layer among all rendered layers\n// This is done recursively, i.e. if the user overrides a layer's default index,\n// all its descendants will be resolved relative to that index.\n// This implementation assumes that parent layers always appear before its children\n// which is true if the layer array comes from the LayerManager\nexport function layerIndexResolver(\n  startIndex: number = 0,\n  layerIndices: Record<string, number> = {}\n): (layer: Layer, isDrawn: boolean) => number {\n  const resolvers = {};\n\n  const resolveLayerIndex = (layer, isDrawn) => {\n    const indexOverride = layer.props._offset;\n    const layerId = layer.id;\n    const parentId = layer.parent && layer.parent.id;\n\n    let index;\n\n    if (parentId && !(parentId in layerIndices)) {\n      // Populate layerIndices with the parent layer's index\n      resolveLayerIndex(layer.parent, false);\n    }\n\n    if (parentId in resolvers) {\n      const resolver = (resolvers[parentId] =\n        resolvers[parentId] || layerIndexResolver(layerIndices[parentId], layerIndices));\n      index = resolver(layer, isDrawn);\n      resolvers[layerId] = resolver;\n    } else if (Number.isFinite(indexOverride)) {\n      index = indexOverride + (layerIndices[parentId] || 0);\n      // Mark layer as needing its own resolver\n      // We don't actually create it until it's used for the first time\n      resolvers[layerId] = null;\n    } else {\n      index = startIndex;\n    }\n\n    if (isDrawn && index >= startIndex) {\n      startIndex = index + 1;\n    }\n\n    layerIndices[layerId] = index;\n    return index;\n  };\n  return resolveLayerIndex;\n}\n\n// Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\nfunction getGLViewport(\n  gl,\n  {\n    moduleParameters,\n    target,\n    viewport\n  }: {\n    moduleParameters: any;\n    target?: Framebuffer;\n    viewport: Viewport;\n  }\n): [number, number, number, number] {\n  const useTarget = target && target.id !== 'default-framebuffer';\n  const pixelRatio =\n    (moduleParameters && moduleParameters.devicePixelRatio) || cssToDeviceRatio(gl);\n\n  // Default framebuffer is used when writing to canvas\n  const height = useTarget ? target.height : gl.drawingBufferHeight;\n\n  // Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\n  const dimensions = viewport;\n  return [\n    dimensions.x * pixelRatio,\n    height - (dimensions.y + dimensions.height) * pixelRatio,\n    dimensions.width * pixelRatio,\n    dimensions.height * pixelRatio\n  ];\n}\n\nfunction clearGLCanvas(gl: WebGLRenderingContext) {\n  const width = gl.drawingBufferWidth;\n  const height = gl.drawingBufferHeight;\n  // clear depth and color buffers, restoring transparency\n  setParameters(gl, {viewport: [0, 0, width, height]});\n  gl.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n}\n"]},"metadata":{},"sourceType":"module"}