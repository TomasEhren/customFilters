{"ast":null,"code":"import _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { CullingVolume, Plane, AxisAlignedBoundingBox, makeOrientedBoundingBoxFromPoints } from '@math.gl/culling';\nimport { lngLatToWorld } from '@math.gl/web-mercator';\nimport { osmTile2lngLat } from './utils';\nvar TILE_SIZE = 512;\nvar MAX_MAPS = 3;\nvar REF_POINTS_5 = [[0.5, 0.5], [0, 0], [0, 1], [1, 0], [1, 1]];\nvar REF_POINTS_9 = REF_POINTS_5.concat([[0, 0.5], [0.5, 0], [1, 0.5], [0.5, 1]]);\nvar REF_POINTS_11 = REF_POINTS_9.concat([[0.25, 0.5], [0.75, 0.5]]);\n\nvar OSMNode = /*#__PURE__*/function () {\n  function OSMNode(x, y, z) {\n    _classCallCheck(this, OSMNode);\n\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  _createClass(OSMNode, [{\n    key: \"children\",\n    get: function get() {\n      if (!this._children) {\n        var x = this.x * 2;\n        var y = this.y * 2;\n        var z = this.z + 1;\n        this._children = [new OSMNode(x, y, z), new OSMNode(x, y + 1, z), new OSMNode(x + 1, y, z), new OSMNode(x + 1, y + 1, z)];\n      }\n\n      return this._children;\n    }\n  }, {\n    key: \"update\",\n    value: function update(params) {\n      var viewport = params.viewport,\n          cullingVolume = params.cullingVolume,\n          elevationBounds = params.elevationBounds,\n          minZ = params.minZ,\n          maxZ = params.maxZ,\n          bounds = params.bounds,\n          offset = params.offset,\n          project = params.project;\n      var boundingVolume = this.getBoundingVolume(elevationBounds, offset, project);\n\n      if (bounds && !this.insideBounds(bounds)) {\n        return false;\n      }\n\n      var isInside = cullingVolume.computeVisibility(boundingVolume);\n\n      if (isInside < 0) {\n        return false;\n      }\n\n      if (!this.childVisible) {\n        var z = this.z;\n\n        if (z < maxZ && z >= minZ) {\n          var distance = boundingVolume.distanceTo(viewport.cameraPosition) * viewport.scale / viewport.height;\n          z += Math.floor(Math.log2(distance));\n        }\n\n        if (z >= maxZ) {\n          this.selected = true;\n          return true;\n        }\n      }\n\n      this.selected = false;\n      this.childVisible = true;\n\n      var _iterator = _createForOfIteratorHelper(this.children),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var child = _step.value;\n          child.update(params);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return true;\n    }\n  }, {\n    key: \"getSelected\",\n    value: function getSelected() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (this.selected) {\n        result.push(this);\n      }\n\n      if (this._children) {\n        var _iterator2 = _createForOfIteratorHelper(this._children),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var node = _step2.value;\n            node.getSelected(result);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"insideBounds\",\n    value: function insideBounds(_ref) {\n      var _ref2 = _slicedToArray(_ref, 4),\n          minX = _ref2[0],\n          minY = _ref2[1],\n          maxX = _ref2[2],\n          maxY = _ref2[3];\n\n      var scale = Math.pow(2, this.z);\n      var extent = TILE_SIZE / scale;\n      return this.x * extent < maxX && this.y * extent < maxY && (this.x + 1) * extent > minX && (this.y + 1) * extent > minY;\n    }\n  }, {\n    key: \"getBoundingVolume\",\n    value: function getBoundingVolume(zRange, worldOffset, project) {\n      if (project) {\n        var refPoints = this.z < 1 ? REF_POINTS_11 : this.z < 2 ? REF_POINTS_9 : REF_POINTS_5;\n        var refPointPositions = [];\n\n        var _iterator3 = _createForOfIteratorHelper(refPoints),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var p = _step3.value;\n            var lngLat = osmTile2lngLat(this.x + p[0], this.y + p[1], this.z);\n            lngLat[2] = zRange[0];\n            refPointPositions.push(project(lngLat));\n\n            if (zRange[0] !== zRange[1]) {\n              lngLat[2] = zRange[1];\n              refPointPositions.push(project(lngLat));\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        return makeOrientedBoundingBoxFromPoints(refPointPositions);\n      }\n\n      var scale = Math.pow(2, this.z);\n      var extent = TILE_SIZE / scale;\n      var originX = this.x * extent + worldOffset * TILE_SIZE;\n      var originY = TILE_SIZE - (this.y + 1) * extent;\n      return new AxisAlignedBoundingBox([originX, originY, zRange[0]], [originX + extent, originY + extent, zRange[1]]);\n    }\n  }]);\n\n  return OSMNode;\n}();\n\nexport function getOSMTileIndices(viewport, maxZ, zRange, bounds) {\n  var project = viewport.resolution ? viewport.projectPosition : null;\n  var planes = Object.values(viewport.getFrustumPlanes()).map(function (_ref3) {\n    var normal = _ref3.normal,\n        distance = _ref3.distance;\n    return new Plane(normal.clone().negate(), distance);\n  });\n  var cullingVolume = new CullingVolume(planes);\n  var unitsPerMeter = viewport.distanceScales.unitsPerMeter[2];\n  var elevationMin = zRange && zRange[0] * unitsPerMeter || 0;\n  var elevationMax = zRange && zRange[1] * unitsPerMeter || 0;\n  var minZ = viewport.pitch <= 60 ? maxZ : 0;\n\n  if (bounds) {\n    var _bounds = bounds,\n        _bounds2 = _slicedToArray(_bounds, 4),\n        minLng = _bounds2[0],\n        minLat = _bounds2[1],\n        maxLng = _bounds2[2],\n        maxLat = _bounds2[3];\n\n    var topLeft = lngLatToWorld([minLng, maxLat]);\n    var bottomRight = lngLatToWorld([maxLng, minLat]);\n    bounds = [topLeft[0], TILE_SIZE - topLeft[1], bottomRight[0], TILE_SIZE - bottomRight[1]];\n  }\n\n  var root = new OSMNode(0, 0, 0);\n  var traversalParams = {\n    viewport: viewport,\n    project: project,\n    cullingVolume: cullingVolume,\n    elevationBounds: [elevationMin, elevationMax],\n    minZ: minZ,\n    maxZ: maxZ,\n    bounds: bounds,\n    offset: 0\n  };\n  root.update(traversalParams);\n\n  if (viewport.subViewports && viewport.subViewports.length > 1) {\n    traversalParams.offset = -1;\n\n    while (root.update(traversalParams)) {\n      if (--traversalParams.offset < -MAX_MAPS) {\n        break;\n      }\n    }\n\n    traversalParams.offset = 1;\n\n    while (root.update(traversalParams)) {\n      if (++traversalParams.offset > MAX_MAPS) {\n        break;\n      }\n    }\n  }\n\n  return root.getSelected();\n}","map":{"version":3,"mappings":"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","names":["CullingVolume","Plane","AxisAlignedBoundingBox","makeOrientedBoundingBoxFromPoints","lngLatToWorld","osmTile2lngLat","TILE_SIZE","MAX_MAPS","REF_POINTS_5","REF_POINTS_9","concat","REF_POINTS_11","OSMNode","constructor","x","y","z","_children","update","params","viewport","cullingVolume","elevationBounds","minZ","maxZ","bounds","offset","project","boundingVolume","getBoundingVolume","insideBounds","isInside","computeVisibility","childVisible","distance","distanceTo","cameraPosition","scale","height","Math","floor","log2","selected","children","child","getSelected","result","push","node","minX","minY","maxX","maxY","pow","extent","zRange","worldOffset","refPoints","refPointPositions","p","lngLat","originX","originY","getOSMTileIndices","resolution","projectPosition","planes","Object","values","getFrustumPlanes","map","normal","clone","negate","unitsPerMeter","distanceScales","elevationMin","elevationMax","pitch","minLng","minLat","maxLng","maxLat","topLeft","bottomRight","root","traversalParams","subViewports","length"],"sources":["../../../src/tile-layer/tile-2d-traversal.js"],"sourcesContent":["/* eslint-disable complexity */\nimport {\n  CullingVolume,\n  Plane,\n  AxisAlignedBoundingBox,\n  makeOrientedBoundingBoxFromPoints\n} from '@math.gl/culling';\nimport {lngLatToWorld} from '@math.gl/web-mercator';\nimport {osmTile2lngLat} from './utils';\n\nconst TILE_SIZE = 512;\n// number of world copies to check\nconst MAX_MAPS = 3;\n// for calculating bounding volume of a tile in a non-web-mercator viewport\nconst REF_POINTS_5 = [\n  [0.5, 0.5],\n  [0, 0],\n  [0, 1],\n  [1, 0],\n  [1, 1]\n]; // 4 corners and center\nconst REF_POINTS_9 = REF_POINTS_5.concat([\n  [0, 0.5],\n  [0.5, 0],\n  [1, 0.5],\n  [0.5, 1]\n]); // 4 corners, center and 4 mid points\nconst REF_POINTS_11 = REF_POINTS_9.concat([\n  [0.25, 0.5],\n  [0.75, 0.5]\n]); // 2 additional points on equator for top tile\n\nclass OSMNode {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  get children() {\n    if (!this._children) {\n      const x = this.x * 2;\n      const y = this.y * 2;\n      const z = this.z + 1;\n      this._children = [\n        new OSMNode(x, y, z),\n        new OSMNode(x, y + 1, z),\n        new OSMNode(x + 1, y, z),\n        new OSMNode(x + 1, y + 1, z)\n      ];\n    }\n    return this._children;\n  }\n\n  update(params) {\n    const {viewport, cullingVolume, elevationBounds, minZ, maxZ, bounds, offset, project} = params;\n    const boundingVolume = this.getBoundingVolume(elevationBounds, offset, project);\n\n    // First, check if this tile is visible\n    if (bounds && !this.insideBounds(bounds)) {\n      return false;\n    }\n\n    const isInside = cullingVolume.computeVisibility(boundingVolume);\n    if (isInside < 0) {\n      return false;\n    }\n\n    // Avoid loading overlapping tiles - if a descendant is requested, do not request the ancester\n    if (!this.childVisible) {\n      let {z} = this;\n      if (z < maxZ && z >= minZ) {\n        // Adjust LOD\n        // If the tile is far enough from the camera, accept a lower zoom level\n        const distance =\n          (boundingVolume.distanceTo(viewport.cameraPosition) * viewport.scale) / viewport.height;\n        z += Math.floor(Math.log2(distance));\n      }\n      if (z >= maxZ) {\n        // LOD is acceptable\n        this.selected = true;\n        return true;\n      }\n    }\n\n    // LOD is not enough, recursively test child tiles\n    this.selected = false;\n    this.childVisible = true;\n    for (const child of this.children) {\n      child.update(params);\n    }\n    return true;\n  }\n\n  getSelected(result = []) {\n    if (this.selected) {\n      result.push(this);\n    }\n    if (this._children) {\n      for (const node of this._children) {\n        node.getSelected(result);\n      }\n    }\n    return result;\n  }\n\n  insideBounds([minX, minY, maxX, maxY]) {\n    const scale = Math.pow(2, this.z);\n    const extent = TILE_SIZE / scale;\n\n    return (\n      this.x * extent < maxX &&\n      this.y * extent < maxY &&\n      (this.x + 1) * extent > minX &&\n      (this.y + 1) * extent > minY\n    );\n  }\n\n  getBoundingVolume(zRange, worldOffset, project) {\n    if (project) {\n      // Custom projection\n      // Estimate bounding box from sample points\n      // At low zoom level we need more samples to calculate the bounding volume correctly\n      const refPoints = this.z < 1 ? REF_POINTS_11 : this.z < 2 ? REF_POINTS_9 : REF_POINTS_5;\n\n      // Convert from tile-relative coordinates to common space\n      const refPointPositions = [];\n      for (const p of refPoints) {\n        const lngLat = osmTile2lngLat(this.x + p[0], this.y + p[1], this.z);\n        lngLat[2] = zRange[0];\n        refPointPositions.push(project(lngLat));\n\n        if (zRange[0] !== zRange[1]) {\n          // Account for the elevation volume\n          lngLat[2] = zRange[1];\n          refPointPositions.push(project(lngLat));\n        }\n      }\n\n      return makeOrientedBoundingBoxFromPoints(refPointPositions);\n    }\n\n    // Use WebMercator projection\n    const scale = Math.pow(2, this.z);\n    const extent = TILE_SIZE / scale;\n    const originX = this.x * extent + worldOffset * TILE_SIZE;\n    // deck's common space is y-flipped\n    const originY = TILE_SIZE - (this.y + 1) * extent;\n\n    return new AxisAlignedBoundingBox(\n      [originX, originY, zRange[0]],\n      [originX + extent, originY + extent, zRange[1]]\n    );\n  }\n}\n\nexport function getOSMTileIndices(viewport, maxZ, zRange, bounds) {\n  const project = viewport.resolution ? viewport.projectPosition : null;\n\n  // Get the culling volume of the current camera\n  const planes = Object.values(viewport.getFrustumPlanes()).map(\n    ({normal, distance}) => new Plane(normal.clone().negate(), distance)\n  );\n  const cullingVolume = new CullingVolume(planes);\n\n  // Project zRange from meters to common space\n  const unitsPerMeter = viewport.distanceScales.unitsPerMeter[2];\n  const elevationMin = (zRange && zRange[0] * unitsPerMeter) || 0;\n  const elevationMax = (zRange && zRange[1] * unitsPerMeter) || 0;\n\n  // Always load at the current zoom level if pitch is small\n  const minZ = viewport.pitch <= 60 ? maxZ : 0;\n\n  // Map extent to OSM position\n  if (bounds) {\n    const [minLng, minLat, maxLng, maxLat] = bounds;\n    const topLeft = lngLatToWorld([minLng, maxLat]);\n    const bottomRight = lngLatToWorld([maxLng, minLat]);\n    bounds = [topLeft[0], TILE_SIZE - topLeft[1], bottomRight[0], TILE_SIZE - bottomRight[1]];\n  }\n\n  const root = new OSMNode(0, 0, 0);\n  const traversalParams = {\n    viewport,\n    project,\n    cullingVolume,\n    elevationBounds: [elevationMin, elevationMax],\n    minZ,\n    maxZ,\n    bounds,\n    // num. of worlds from the center. For repeated maps\n    offset: 0\n  };\n\n  root.update(traversalParams);\n\n  if (viewport.subViewports && viewport.subViewports.length > 1) {\n    // Check worlds in repeated maps\n    traversalParams.offset = -1;\n    while (root.update(traversalParams)) {\n      if (--traversalParams.offset < -MAX_MAPS) {\n        break;\n      }\n    }\n    traversalParams.offset = 1;\n    while (root.update(traversalParams)) {\n      if (++traversalParams.offset > MAX_MAPS) {\n        break;\n      }\n    }\n  }\n\n  return root.getSelected();\n}\n"]},"metadata":{},"sourceType":"module"}