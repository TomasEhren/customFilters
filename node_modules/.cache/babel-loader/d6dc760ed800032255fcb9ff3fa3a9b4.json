{"ast":null,"code":"import _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _excluded = [\"timestamp\"];\nimport { DirectionalLight } from './directional-light';\nimport { getSunlightDirection } from './suncalc';\n\nvar SunLight = /*#__PURE__*/function (_DirectionalLight) {\n  _inherits(SunLight, _DirectionalLight);\n\n  var _super = _createSuper(SunLight);\n\n  function SunLight(_ref) {\n    var _this;\n\n    var timestamp = _ref.timestamp,\n        others = _objectWithoutProperties(_ref, _excluded);\n\n    _classCallCheck(this, SunLight);\n\n    _this = _super.call(this, others);\n    _this.timestamp = timestamp;\n    return _this;\n  }\n\n  _createClass(SunLight, [{\n    key: \"getProjectedLight\",\n    value: function getProjectedLight(_ref2) {\n      var layer = _ref2.layer;\n      var viewport = layer.context.viewport;\n      var isGlobe = viewport.resolution > 0;\n\n      if (isGlobe) {\n        var _getSunlightDirection = getSunlightDirection(this.timestamp, 0, 0),\n            _getSunlightDirection2 = _slicedToArray(_getSunlightDirection, 3),\n            x = _getSunlightDirection2[0],\n            y = _getSunlightDirection2[1],\n            z = _getSunlightDirection2[2];\n\n        this.direction = [x, -z, y];\n      } else {\n        var latitude = viewport.latitude,\n            longitude = viewport.longitude;\n        this.direction = getSunlightDirection(this.timestamp, latitude, longitude);\n      }\n\n      return this;\n    }\n  }]);\n\n  return SunLight;\n}(DirectionalLight);\n\nexport { SunLight as default };","map":{"version":3,"mappings":";;;;;;;AAAA,SAAQA,gBAAR,QAA+B,qBAA/B;AACA,SAAQC,oBAAR,QAAmC,WAAnC;;IAEqBC,Q;;;;;EACnBC,wBAAoC;IAAA;;IAAA,IAAvBC,SAAuB,QAAvBA,SAAuB;IAAA,IAATC,MAAS;;IAAA;;IAClC,0BAAMA,MAAN;IAEA,MAAKD,SAAL,GAAiBA,SAAjB;IAHkC;EAInC;;;;WAEDE,kCAA2B;MAAA,IAARC,KAAQ,SAARA,KAAQ;MACzB,IAAOC,QAAP,GAAmBD,KAAK,CAACE,OAAzB,CAAOD,QAAP;MACA,IAAME,OAAO,GAAGF,QAAQ,CAACG,UAATH,GAAsB,CAAtC;;MAEA,IAAIE,OAAJ,EAAa;QAEX,4BAAkBT,oBAAoB,CAAC,KAAKG,SAAN,EAAiB,CAAjB,EAAoB,CAApB,CAAtC;QAAA;QAAA,IAAOQ,CAAP;QAAA,IAAUC,CAAV;QAAA,IAAaC,CAAb;;QACA,KAAKC,SAAL,GAAiB,CAACH,CAAD,EAAI,CAACE,CAAL,EAAQD,CAAR,CAAjB;MAHF,OAIO;QACL,IAAOG,QAAP,GAA8BR,QAA9B,CAAOQ,QAAP;QAAA,IAAiBC,SAAjB,GAA8BT,QAA9B,CAAiBS,SAAjB;QACA,KAAKF,SAAL,GAAiBd,oBAAoB,CAAC,KAAKG,SAAN,EAAiBY,QAAjB,EAA2BC,SAA3B,CAArC;MACD;;MAED,OAAO,IAAP;IACD;;;;EArBmCjB,gB;;SAAjBE,Q","names":["DirectionalLight","getSunlightDirection","SunLight","constructor","timestamp","others","getProjectedLight","layer","viewport","context","isGlobe","resolution","x","y","z","direction","latitude","longitude"],"sources":["../../../../src/effects/lighting/sun-light.js"],"sourcesContent":["import {DirectionalLight} from './directional-light';\nimport {getSunlightDirection} from './suncalc';\n\nexport default class SunLight extends DirectionalLight {\n  constructor({timestamp, ...others}) {\n    super(others);\n\n    this.timestamp = timestamp;\n  }\n\n  getProjectedLight({layer}) {\n    const {viewport} = layer.context;\n    const isGlobe = viewport.resolution > 0;\n\n    if (isGlobe) {\n      // Rotate vector to align with the direction of the globe projection (up at lon:0,lat:0 is [0, -1, 0])\n      const [x, y, z] = getSunlightDirection(this.timestamp, 0, 0);\n      this.direction = [x, -z, y];\n    } else {\n      const {latitude, longitude} = viewport;\n      this.direction = getSunlightDirection(this.timestamp, latitude, longitude);\n    }\n\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}