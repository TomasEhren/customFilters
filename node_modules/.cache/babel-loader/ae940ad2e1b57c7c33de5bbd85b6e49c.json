{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport Accessor from './accessor';\nimport { isWebGL2 } from '@luma.gl/gltools';\nimport { decomposeCompositeGLType } from '../webgl-utils/attribute-utils';\n\nvar ProgramConfiguration = /*#__PURE__*/function () {\n  function ProgramConfiguration(program) {\n    _classCallCheck(this, ProgramConfiguration);\n\n    this.id = program.id;\n    this.attributeInfos = [];\n    this.attributeInfosByName = {};\n    this.attributeInfosByLocation = [];\n    this.varyingInfos = [];\n    this.varyingInfosByName = {};\n    Object.seal(this);\n\n    this._readAttributesFromProgram(program);\n\n    this._readVaryingsFromProgram(program);\n  }\n\n  _createClass(ProgramConfiguration, [{\n    key: \"getAttributeInfo\",\n    value: function getAttributeInfo(locationOrName) {\n      var location = Number(locationOrName);\n\n      if (Number.isFinite(location)) {\n        return this.attributeInfosByLocation[location];\n      }\n\n      return this.attributeInfosByName[locationOrName] || null;\n    }\n  }, {\n    key: \"getAttributeLocation\",\n    value: function getAttributeLocation(locationOrName) {\n      var attributeInfo = this.getAttributeInfo(locationOrName);\n      return attributeInfo ? attributeInfo.location : -1;\n    }\n  }, {\n    key: \"getAttributeAccessor\",\n    value: function getAttributeAccessor(locationOrName) {\n      var attributeInfo = this.getAttributeInfo(locationOrName);\n      return attributeInfo ? attributeInfo.accessor : null;\n    }\n  }, {\n    key: \"getVaryingInfo\",\n    value: function getVaryingInfo(locationOrName) {\n      var location = Number(locationOrName);\n\n      if (Number.isFinite(location)) {\n        return this.varyingInfos[location];\n      }\n\n      return this.varyingInfosByName[locationOrName] || null;\n    }\n  }, {\n    key: \"getVaryingIndex\",\n    value: function getVaryingIndex(locationOrName) {\n      var varying = this.getVaryingInfo();\n      return varying ? varying.location : -1;\n    }\n  }, {\n    key: \"getVaryingAccessor\",\n    value: function getVaryingAccessor(locationOrName) {\n      var varying = this.getVaryingInfo();\n      return varying ? varying.accessor : null;\n    }\n  }, {\n    key: \"_readAttributesFromProgram\",\n    value: function _readAttributesFromProgram(program) {\n      var gl = program.gl;\n      var count = gl.getProgramParameter(program.handle, 35721);\n\n      for (var index = 0; index < count; index++) {\n        var _gl$getActiveAttrib = gl.getActiveAttrib(program.handle, index),\n            name = _gl$getActiveAttrib.name,\n            type = _gl$getActiveAttrib.type,\n            size = _gl$getActiveAttrib.size;\n\n        var location = gl.getAttribLocation(program.handle, name);\n\n        if (location >= 0) {\n          this._addAttribute(location, name, type, size);\n        }\n      }\n\n      this.attributeInfos.sort(function (a, b) {\n        return a.location - b.location;\n      });\n    }\n  }, {\n    key: \"_readVaryingsFromProgram\",\n    value: function _readVaryingsFromProgram(program) {\n      var gl = program.gl;\n\n      if (!isWebGL2(gl)) {\n        return;\n      }\n\n      var count = gl.getProgramParameter(program.handle, 35971);\n\n      for (var location = 0; location < count; location++) {\n        var _gl$getTransformFeedb = gl.getTransformFeedbackVarying(program.handle, location),\n            name = _gl$getTransformFeedb.name,\n            type = _gl$getTransformFeedb.type,\n            size = _gl$getTransformFeedb.size;\n\n        this._addVarying(location, name, type, size);\n      }\n\n      this.varyingInfos.sort(function (a, b) {\n        return a.location - b.location;\n      });\n    }\n  }, {\n    key: \"_addAttribute\",\n    value: function _addAttribute(location, name, compositeType, size) {\n      var _decomposeCompositeGL = decomposeCompositeGLType(compositeType),\n          type = _decomposeCompositeGL.type,\n          components = _decomposeCompositeGL.components;\n\n      var accessor = {\n        type: type,\n        size: size * components\n      };\n\n      this._inferProperties(location, name, accessor);\n\n      var attributeInfo = {\n        location: location,\n        name: name,\n        accessor: new Accessor(accessor)\n      };\n      this.attributeInfos.push(attributeInfo);\n      this.attributeInfosByLocation[location] = attributeInfo;\n      this.attributeInfosByName[attributeInfo.name] = attributeInfo;\n    }\n  }, {\n    key: \"_inferProperties\",\n    value: function _inferProperties(location, name, accessor) {\n      if (/instance/i.test(name)) {\n        accessor.divisor = 1;\n      }\n    }\n  }, {\n    key: \"_addVarying\",\n    value: function _addVarying(location, name, compositeType, size) {\n      var _decomposeCompositeGL2 = decomposeCompositeGLType(compositeType),\n          type = _decomposeCompositeGL2.type,\n          components = _decomposeCompositeGL2.components;\n\n      var accessor = new Accessor({\n        type: type,\n        size: size * components\n      });\n      var varying = {\n        location: location,\n        name: name,\n        accessor: accessor\n      };\n      this.varyingInfos.push(varying);\n      this.varyingInfosByName[varying.name] = varying;\n    }\n  }]);\n\n  return ProgramConfiguration;\n}();\n\nexport { ProgramConfiguration as default };","map":{"version":3,"mappings":"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","names":["Accessor","isWebGL2","decomposeCompositeGLType","ProgramConfiguration","constructor","program","id","attributeInfos","attributeInfosByName","attributeInfosByLocation","varyingInfos","varyingInfosByName","Object","seal","_readAttributesFromProgram","_readVaryingsFromProgram","getAttributeInfo","locationOrName","location","Number","isFinite","getAttributeLocation","attributeInfo","getAttributeAccessor","accessor","getVaryingInfo","getVaryingIndex","varying","getVaryingAccessor","gl","count","getProgramParameter","handle","index","getActiveAttrib","name","type","size","getAttribLocation","_addAttribute","sort","a","b","getTransformFeedbackVarying","_addVarying","compositeType","components","_inferProperties","push","test","divisor"],"sources":["../../../src/classes/program-configuration.js"],"sourcesContent":["// Contains metadata describing attribute configurations for a program's shaders\n// Much of this is automatically extracted from shaders after program linking\nimport Accessor from './accessor';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {decomposeCompositeGLType} from '../webgl-utils/attribute-utils';\n\nexport default class ProgramConfiguration {\n  constructor(program) {\n    this.id = program.id;\n    this.attributeInfos = [];\n    this.attributeInfosByName = {};\n\n    // Locations may not be contiguous the case of matrix attributes\n    // so keep a separate location->attribute map.\n    this.attributeInfosByLocation = [];\n    this.varyingInfos = [];\n    this.varyingInfosByName = {};\n    Object.seal(this);\n    this._readAttributesFromProgram(program);\n    this._readVaryingsFromProgram(program);\n  }\n\n  getAttributeInfo(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return this.attributeInfosByLocation[location];\n    }\n    return this.attributeInfosByName[locationOrName] || null;\n  }\n\n  // Resolves an attribute name or index to an index\n  getAttributeLocation(locationOrName) {\n    const attributeInfo = this.getAttributeInfo(locationOrName);\n    return attributeInfo ? attributeInfo.location : -1;\n  }\n\n  getAttributeAccessor(locationOrName) {\n    const attributeInfo = this.getAttributeInfo(locationOrName);\n    return attributeInfo ? attributeInfo.accessor : null;\n  }\n\n  getVaryingInfo(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return this.varyingInfos[location];\n    }\n    return this.varyingInfosByName[locationOrName] || null;\n  }\n\n  getVaryingIndex(locationOrName) {\n    const varying = this.getVaryingInfo();\n    return varying ? varying.location : -1;\n  }\n\n  getVaryingAccessor(locationOrName) {\n    const varying = this.getVaryingInfo();\n    return varying ? varying.accessor : null;\n  }\n\n  // PRIVATE METHODS\n\n  // linkProgram needs to have been called, although linking does not need to have been successful\n  _readAttributesFromProgram(program) {\n    const {gl} = program;\n    const count = gl.getProgramParameter(program.handle, gl.ACTIVE_ATTRIBUTES);\n\n    for (let index = 0; index < count; index++) {\n      const {name, type, size} = gl.getActiveAttrib(program.handle, index);\n      const location = gl.getAttribLocation(program.handle, name);\n      // Add only user provided attributes, for built-in attributes like\n      // `gl_InstanceID` locaiton will be < 0\n      if (location >= 0) {\n        this._addAttribute(location, name, type, size);\n      }\n    }\n\n    this.attributeInfos.sort((a, b) => a.location - b.location);\n  }\n\n  // linkProgram needs to have been called, although linking does not need to have been successful\n  _readVaryingsFromProgram(program) {\n    const {gl} = program;\n    if (!isWebGL2(gl)) {\n      return;\n    }\n\n    const count = gl.getProgramParameter(program.handle, gl.TRANSFORM_FEEDBACK_VARYINGS);\n    for (let location = 0; location < count; location++) {\n      const {name, type, size} = gl.getTransformFeedbackVarying(program.handle, location);\n      this._addVarying(location, name, type, size);\n    }\n\n    this.varyingInfos.sort((a, b) => a.location - b.location);\n  }\n\n  _addAttribute(location, name, compositeType, size) {\n    const {type, components} = decomposeCompositeGLType(compositeType);\n    const accessor = {type, size: size * components};\n    this._inferProperties(location, name, accessor);\n\n    const attributeInfo = {location, name, accessor: new Accessor(accessor)}; // Base values\n    this.attributeInfos.push(attributeInfo);\n    this.attributeInfosByLocation[location] = attributeInfo; // For quick location based lookup\n    this.attributeInfosByName[attributeInfo.name] = attributeInfo; // For quick name based lookup\n  }\n\n  // Extract additional attribute metadata from shader names (based on attribute naming conventions)\n  _inferProperties(location, name, accessor) {\n    if (/instance/i.test(name)) {\n      // Any attribute containing the word \"instance\" will be assumed to be instanced\n      accessor.divisor = 1;\n    }\n  }\n\n  _addVarying(location, name, compositeType, size) {\n    const {type, components} = decomposeCompositeGLType(compositeType);\n    const accessor = new Accessor({type, size: size * components});\n\n    const varying = {location, name, accessor}; // Base values\n    this.varyingInfos.push(varying);\n    this.varyingInfosByName[varying.name] = varying; // For quick name based lookup\n  }\n}\n"]},"metadata":{},"sourceType":"module"}