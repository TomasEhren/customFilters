{"ast":null,"code":"import { decodeRGB565, GL } from '@loaders.gl/math';\nexport function normalize3DTileColorAttribute(tile, colors, batchTable) {\n  if (!colors && (!tile || !tile.batchIds || !batchTable)) {\n    return null;\n  }\n\n  const {\n    batchIds,\n    isRGB565,\n    pointCount\n  } = tile;\n\n  if (batchIds && batchTable) {\n    const colorArray = new Uint8ClampedArray(pointCount * 3);\n\n    for (let i = 0; i < pointCount; i++) {\n      const batchId = batchIds[i];\n      const dimensions = batchTable.getProperty(batchId, 'dimensions');\n      const color = dimensions.map(d => d * 255);\n      colorArray[i * 3] = color[0];\n      colorArray[i * 3 + 1] = color[1];\n      colorArray[i * 3 + 2] = color[2];\n    }\n\n    return {\n      type: GL.UNSIGNED_BYTE,\n      value: colorArray,\n      size: 3,\n      normalized: true\n    };\n  }\n\n  if (isRGB565) {\n    const colorArray = new Uint8ClampedArray(pointCount * 3);\n\n    for (let i = 0; i < pointCount; i++) {\n      const color = decodeRGB565(colors[i]);\n      colorArray[i * 3] = color[0];\n      colorArray[i * 3 + 1] = color[1];\n      colorArray[i * 3 + 2] = color[2];\n    }\n\n    return {\n      type: GL.UNSIGNED_BYTE,\n      value: colorArray,\n      size: 3,\n      normalized: true\n    };\n  }\n\n  if (colors && colors.length === pointCount * 3) {\n    return {\n      type: GL.UNSIGNED_BYTE,\n      value: colors,\n      size: 3,\n      normalized: true\n    };\n  }\n\n  return {\n    type: GL.UNSIGNED_BYTE,\n    value: colors,\n    size: 4,\n    normalized: true\n  };\n}","map":{"version":3,"mappings":"AAAA,SAAQA,YAAR,EAAsBC,EAAtB,QAA+B,kBAA/B;AAGA,OAAO,SAASC,6BAAT,CAAuCC,IAAvC,EAA6CC,MAA7C,EAAqDC,UAArD,EAAkE;EAEvE,IAAI,CAACD,MAAD,KAAY,CAACD,IAAD,IAAS,CAACA,IAAI,CAACG,QAAf,IAA2B,CAACD,UAAxC,CAAJ,EAAyD;IACvD,OAAO,IAAP;EACD;;EAED,MAAM;IAACC,QAAD;IAAWC,QAAX;IAAqBC;EAArB,IAAmCL,IAAzC;;EAEA,IAAIG,QAAQ,IAAID,UAAhB,EAA4B;IAC1B,MAAMI,UAAU,GAAG,IAAIC,iBAAJ,CAAsBF,UAAU,GAAG,CAAnC,CAAnB;;IACA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,UAApB,EAAgCG,CAAC,EAAjC,EAAqC;MACnC,MAAMC,OAAO,GAAGN,QAAQ,CAACK,CAAD,CAAxB;MAEA,MAAME,UAAU,GAAGR,UAAU,CAACS,WAAXT,CAAuBO,OAAvBP,EAAgC,YAAhCA,CAAnB;MACA,MAAMU,KAAK,GAAGF,UAAU,CAACG,GAAXH,CAAgBI,CAAD,IAAOA,CAAC,GAAG,GAA1BJ,CAAd;MACAJ,UAAU,CAACE,CAAC,GAAG,CAAL,CAAVF,GAAoBM,KAAK,CAAC,CAAD,CAAzBN;MACAA,UAAU,CAACE,CAAC,GAAG,CAAJA,GAAQ,CAAT,CAAVF,GAAwBM,KAAK,CAAC,CAAD,CAA7BN;MACAA,UAAU,CAACE,CAAC,GAAG,CAAJA,GAAQ,CAAT,CAAVF,GAAwBM,KAAK,CAAC,CAAD,CAA7BN;IACD;;IACD,OAAO;MACLS,IAAI,EAAEjB,EAAE,CAACkB,aADJ;MAELC,KAAK,EAAEX,UAFF;MAGLY,IAAI,EAAE,CAHD;MAILC,UAAU,EAAE;IAJP,CAAP;EAMD;;EAGD,IAAIf,QAAJ,EAAc;IACZ,MAAME,UAAU,GAAG,IAAIC,iBAAJ,CAAsBF,UAAU,GAAG,CAAnC,CAAnB;;IACA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,UAApB,EAAgCG,CAAC,EAAjC,EAAqC;MACnC,MAAMI,KAAK,GAAGf,YAAY,CAACI,MAAM,CAACO,CAAD,CAAP,CAA1B;MACAF,UAAU,CAACE,CAAC,GAAG,CAAL,CAAVF,GAAoBM,KAAK,CAAC,CAAD,CAAzBN;MACAA,UAAU,CAACE,CAAC,GAAG,CAAJA,GAAQ,CAAT,CAAVF,GAAwBM,KAAK,CAAC,CAAD,CAA7BN;MACAA,UAAU,CAACE,CAAC,GAAG,CAAJA,GAAQ,CAAT,CAAVF,GAAwBM,KAAK,CAAC,CAAD,CAA7BN;IACD;;IACD,OAAO;MACLS,IAAI,EAAEjB,EAAE,CAACkB,aADJ;MAELC,KAAK,EAAEX,UAFF;MAGLY,IAAI,EAAE,CAHD;MAILC,UAAU,EAAE;IAJP,CAAP;EAMD;;EAGD,IAAIlB,MAAM,IAAIA,MAAM,CAACmB,MAAPnB,KAAkBI,UAAU,GAAG,CAA7C,EAAgD;IAC9C,OAAO;MACLU,IAAI,EAAEjB,EAAE,CAACkB,aADJ;MAELC,KAAK,EAAEhB,MAFF;MAGLiB,IAAI,EAAE,CAHD;MAILC,UAAU,EAAE;IAJP,CAAP;EAMD;;EAGD,OAAO;IACLJ,IAAI,EAAEjB,EAAE,CAACkB,aADJ;IAELC,KAAK,EAAEhB,MAFF;IAGLiB,IAAI,EAAE,CAHD;IAILC,UAAU,EAAE;EAJP,CAAP;AAMD","names":["decodeRGB565","GL","normalize3DTileColorAttribute","tile","colors","batchTable","batchIds","isRGB565","pointCount","colorArray","Uint8ClampedArray","i","batchId","dimensions","getProperty","color","map","d","type","UNSIGNED_BYTE","value","size","normalized","length"],"sources":["../../../../../src/lib/parsers/helpers/normalize-3d-tile-colors.ts"],"sourcesContent":["import {decodeRGB565, GL} from '@loaders.gl/math';\n\n/* eslint-disable complexity*/\nexport function normalize3DTileColorAttribute(tile, colors, batchTable?) {\n  // no colors defined\n  if (!colors && (!tile || !tile.batchIds || !batchTable)) {\n    return null;\n  }\n\n  const {batchIds, isRGB565, pointCount} = tile;\n  // Batch table, look up colors in table\n  if (batchIds && batchTable) {\n    const colorArray = new Uint8ClampedArray(pointCount * 3);\n    for (let i = 0; i < pointCount; i++) {\n      const batchId = batchIds[i];\n      // TODO figure out what is `dimensions` used for\n      const dimensions = batchTable.getProperty(batchId, 'dimensions');\n      const color = dimensions.map((d) => d * 255);\n      colorArray[i * 3] = color[0];\n      colorArray[i * 3 + 1] = color[1];\n      colorArray[i * 3 + 2] = color[2];\n    }\n    return {\n      type: GL.UNSIGNED_BYTE,\n      value: colorArray,\n      size: 3,\n      normalized: true\n    };\n  }\n\n  // RGB565 case, convert to RGB\n  if (isRGB565) {\n    const colorArray = new Uint8ClampedArray(pointCount * 3);\n    for (let i = 0; i < pointCount; i++) {\n      const color = decodeRGB565(colors[i]);\n      colorArray[i * 3] = color[0];\n      colorArray[i * 3 + 1] = color[1];\n      colorArray[i * 3 + 2] = color[2];\n    }\n    return {\n      type: GL.UNSIGNED_BYTE,\n      value: colorArray,\n      size: 3,\n      normalized: true\n    };\n  }\n\n  // RGB case (tile.isTranslucent)\n  if (colors && colors.length === pointCount * 3) {\n    return {\n      type: GL.UNSIGNED_BYTE,\n      value: colors,\n      size: 3,\n      normalized: true\n    };\n  }\n\n  // DEFAULT: RGBA case\n  return {\n    type: GL.UNSIGNED_BYTE,\n    value: colors,\n    size: 4,\n    normalized: true\n  };\n}\n/* eslint-enable complexity*/\n"]},"metadata":{},"sourceType":"module"}