{"ast":null,"code":"import _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { getMeshBoundingBox } from '@loaders.gl/schema';\nimport decode, { DECODING_STEPS } from './decode-quantized-mesh';\nimport { addSkirt } from './helpers/skirt';\n\nfunction getMeshAttributes(vertexData, header, bounds) {\n  var minHeight = header.minHeight,\n      maxHeight = header.maxHeight;\n\n  var _ref = bounds || [0, 0, 1, 1],\n      _ref2 = _slicedToArray(_ref, 4),\n      minX = _ref2[0],\n      minY = _ref2[1],\n      maxX = _ref2[2],\n      maxY = _ref2[3];\n\n  var xScale = maxX - minX;\n  var yScale = maxY - minY;\n  var zScale = maxHeight - minHeight;\n  var nCoords = vertexData.length / 3;\n  var positions = new Float32Array(nCoords * 3);\n  var texCoords = new Float32Array(nCoords * 2);\n\n  for (var i = 0; i < nCoords; i++) {\n    var x = vertexData[i] / 32767;\n    var y = vertexData[i + nCoords] / 32767;\n    var z = vertexData[i + nCoords * 2] / 32767;\n    positions[3 * i + 0] = x * xScale + minX;\n    positions[3 * i + 1] = y * yScale + minY;\n    positions[3 * i + 2] = z * zScale + minHeight;\n    texCoords[2 * i + 0] = x;\n    texCoords[2 * i + 1] = y;\n  }\n\n  return {\n    POSITION: {\n      value: positions,\n      size: 3\n    },\n    TEXCOORD_0: {\n      value: texCoords,\n      size: 2\n    }\n  };\n}\n\nfunction getTileMesh(arrayBuffer, options) {\n  if (!arrayBuffer) {\n    return null;\n  }\n\n  var bounds = options.bounds;\n\n  var _decode = decode(arrayBuffer, DECODING_STEPS.triangleIndices),\n      header = _decode.header,\n      vertexData = _decode.vertexData,\n      originalTriangleIndices = _decode.triangleIndices,\n      westIndices = _decode.westIndices,\n      northIndices = _decode.northIndices,\n      eastIndices = _decode.eastIndices,\n      southIndices = _decode.southIndices;\n\n  var triangleIndices = originalTriangleIndices;\n  var attributes = getMeshAttributes(vertexData, header, bounds);\n  var boundingBox = getMeshBoundingBox(attributes);\n\n  if (options.skirtHeight) {\n    var _addSkirt = addSkirt(attributes, triangleIndices, options.skirtHeight, {\n      westIndices: westIndices,\n      northIndices: northIndices,\n      eastIndices: eastIndices,\n      southIndices: southIndices\n    }),\n        newAttributes = _addSkirt.attributes,\n        newTriangles = _addSkirt.triangles;\n\n    attributes = newAttributes;\n    triangleIndices = newTriangles;\n  }\n\n  return {\n    loaderData: {\n      header: {}\n    },\n    header: {\n      vertexCount: triangleIndices.length,\n      boundingBox: boundingBox\n    },\n    mode: 4,\n    indices: {\n      value: triangleIndices,\n      size: 1\n    },\n    attributes: attributes\n  };\n}\n\nexport default function loadQuantizedMesh(arrayBuffer, options) {\n  return getTileMesh(arrayBuffer, options['quantized-mesh']);\n}","map":{"version":3,"mappings":"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","names":["getMeshBoundingBox","decode","DECODING_STEPS","addSkirt","getMeshAttributes","vertexData","header","bounds","minHeight","maxHeight","minX","minY","maxX","maxY","xScale","yScale","zScale","nCoords","length","positions","Float32Array","texCoords","i","x","y","z","POSITION","value","size","TEXCOORD_0","getTileMesh","arrayBuffer","options","triangleIndices","originalTriangleIndices","westIndices","northIndices","eastIndices","southIndices","attributes","boundingBox","skirtHeight","newAttributes","newTriangles","triangles","loaderData","vertexCount","mode","indices","loadQuantizedMesh"],"sources":["../../../src/lib/parse-quantized-mesh.ts"],"sourcesContent":["import {getMeshBoundingBox} from '@loaders.gl/schema';\nimport decode, {DECODING_STEPS} from './decode-quantized-mesh';\nimport {addSkirt} from './helpers/skirt';\n\nfunction getMeshAttributes(vertexData, header, bounds) {\n  const {minHeight, maxHeight} = header;\n  const [minX, minY, maxX, maxY] = bounds || [0, 0, 1, 1];\n  const xScale = maxX - minX;\n  const yScale = maxY - minY;\n  const zScale = maxHeight - minHeight;\n\n  const nCoords = vertexData.length / 3;\n  // vec3. x, y defined by bounds, z in meters\n  const positions = new Float32Array(nCoords * 3);\n\n  // vec2. 1 to 1 relationship with position. represents the uv on the texture image. 0,0 to 1,1.\n  const texCoords = new Float32Array(nCoords * 2);\n\n  // Data is not interleaved; all u, then all v, then all heights\n  for (let i = 0; i < nCoords; i++) {\n    const x = vertexData[i] / 32767;\n    const y = vertexData[i + nCoords] / 32767;\n    const z = vertexData[i + nCoords * 2] / 32767;\n\n    positions[3 * i + 0] = x * xScale + minX;\n    positions[3 * i + 1] = y * yScale + minY;\n    positions[3 * i + 2] = z * zScale + minHeight;\n\n    texCoords[2 * i + 0] = x;\n    texCoords[2 * i + 1] = y;\n  }\n\n  return {\n    POSITION: {value: positions, size: 3},\n    TEXCOORD_0: {value: texCoords, size: 2}\n    // TODO: Parse normals if they exist in the file\n    // NORMAL: {}, - optional, but creates the high poly look with lighting\n  };\n}\n\nfunction getTileMesh(arrayBuffer, options) {\n  if (!arrayBuffer) {\n    return null;\n  }\n  const {bounds} = options;\n  // Don't parse edge indices or format extensions\n  const {\n    header,\n    vertexData,\n    triangleIndices: originalTriangleIndices,\n    westIndices,\n    northIndices,\n    eastIndices,\n    southIndices\n  } = decode(arrayBuffer, DECODING_STEPS.triangleIndices);\n  let triangleIndices = originalTriangleIndices;\n  let attributes = getMeshAttributes(vertexData, header, bounds);\n\n  // Compute bounding box before adding skirt so that z values are not skewed\n  // TODO: Find bounding box from header, instead of doing extra pass over\n  // vertices.\n  const boundingBox = getMeshBoundingBox(attributes);\n\n  if (options.skirtHeight) {\n    const {attributes: newAttributes, triangles: newTriangles} = addSkirt(\n      attributes,\n      triangleIndices,\n      options.skirtHeight,\n      {\n        westIndices,\n        northIndices,\n        eastIndices,\n        southIndices\n      }\n    );\n    attributes = newAttributes;\n    triangleIndices = newTriangles;\n  }\n\n  return {\n    // Data return by this loader implementation\n    loaderData: {\n      header: {}\n    },\n    header: {\n      // @ts-ignore\n      vertexCount: triangleIndices.length,\n      boundingBox\n    },\n    mode: 4, // TRIANGLES\n    indices: {value: triangleIndices, size: 1},\n    attributes\n  };\n}\n\nexport default function loadQuantizedMesh(arrayBuffer, options) {\n  return getTileMesh(arrayBuffer, options['quantized-mesh']);\n}\n"]},"metadata":{},"sourceType":"module"}