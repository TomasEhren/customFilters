{"ast":null,"code":"import { scaleLinear } from 'd3-scale';\nimport getPalette, { DEFAULT_PALETTE, NULL_COLOR } from './palette';\nimport { assert, getAttrValue } from './utils';\nexport default function colorContinuous(_ref) {\n  let {\n    attr,\n    domain,\n    colors = DEFAULT_PALETTE,\n    nullColor = NULL_COLOR\n  } = _ref;\n  assert(Array.isArray(domain), 'Expected \"domain\" to be an array of numbers');\n  const palette = typeof colors === 'string' ? getPalette(colors, domain.length) : colors;\n  const color = scaleLinear().domain(domain).range(palette);\n  return d => {\n    const value = getAttrValue(attr, d);\n    return typeof value === 'number' && Number.isFinite(value) ? color(value) : nullColor;\n  };\n}","map":{"version":3,"mappings":"AAAA,SAAQA,WAAR,QAA0B,UAA1B;AACA,OAAOC,UAAP,IAA2BC,eAA3B,EAA4CC,UAA5C,QAA6D,WAA7D;AACA,SAAQC,MAAR,EAAmCC,YAAnC,QAAsD,SAAtD;AAEA,eAAe,SAASC,eAAT,OAUO;EAAA,IAVkB;IACtCC,IADsC;IAEtCC,MAFsC;IAGtCC,MAAM,GAAGP,eAH6B;IAItCQ,SAAS,GAAGP;EAJ0B,CAUlB;EACpBC,MAAM,CAACO,KAAK,CAACC,OAAND,CAAcH,MAAdG,CAAD,EAAwB,6CAAxB,CAANP;EAEA,MAAMS,OAAO,GAAG,OAAOJ,MAAP,KAAkB,QAAlB,GAA6BR,UAAU,CAACQ,MAAD,EAASD,MAAM,CAACM,MAAhB,CAAvC,GAAiEL,MAAjF;EACA,MAAMM,KAAK,GAAGf,WAAW,GAAUQ,MAArBR,CAA4BQ,MAA5BR,EAAoCgB,KAApChB,CAA0Ca,OAA1Cb,CAAd;EAEA,OAAOiB,CAAC,IAAI;IACV,MAAMC,KAAK,GAAGb,YAAY,CAACE,IAAD,EAAOU,CAAP,CAA1B;IACA,OAAO,OAAOC,KAAP,KAAiB,QAAjB,IAA6BC,MAAM,CAACC,QAAPD,CAAgBD,KAAhBC,CAA7B,GAAsDJ,KAAK,CAACG,KAAD,CAA3D,GAAqER,SAA5E;EAFF;AAID","names":["scaleLinear","getPalette","DEFAULT_PALETTE","NULL_COLOR","assert","getAttrValue","colorContinuous","attr","domain","colors","nullColor","Array","isArray","palette","length","color","range","d","value","Number","isFinite"],"sources":["../../../src/style/color-continuous-style.ts"],"sourcesContent":["import {scaleLinear} from 'd3-scale';\nimport getPalette, {Color, DEFAULT_PALETTE, NULL_COLOR} from './palette';\nimport {assert, AttributeSelector, getAttrValue} from './utils';\n\nexport default function colorContinuous({\n  attr,\n  domain,\n  colors = DEFAULT_PALETTE,\n  nullColor = NULL_COLOR\n}: {\n  attr: AttributeSelector;\n  domain: number[];\n  colors?: string | Color[];\n  nullColor?: Color;\n}): AttributeSelector {\n  assert(Array.isArray(domain), 'Expected \"domain\" to be an array of numbers');\n\n  const palette = typeof colors === 'string' ? getPalette(colors, domain.length) : colors;\n  const color = scaleLinear<Color>().domain(domain).range(palette);\n\n  return d => {\n    const value = getAttrValue(attr, d);\n    return typeof value === 'number' && Number.isFinite(value) ? color(value) : nullColor;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}