{"ast":null,"code":"import _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { isSVG, getBlob } from './svg-utils';\nimport parseToImage from './parse-to-image';\nvar EMPTY_OBJECT = {};\nvar imagebitmapOptionsSupported = true;\nexport default function parseToImageBitmap(_x, _x2, _x3) {\n  return _parseToImageBitmap.apply(this, arguments);\n}\n\nfunction _parseToImageBitmap() {\n  _parseToImageBitmap = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(arrayBuffer, options, url) {\n    var blob, image, imagebitmapOptions;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!isSVG(url)) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 3;\n            return parseToImage(arrayBuffer, options, url);\n\n          case 3:\n            image = _context.sent;\n            blob = image;\n            _context.next = 8;\n            break;\n\n          case 7:\n            blob = getBlob(arrayBuffer, url);\n\n          case 8:\n            imagebitmapOptions = options && options.imagebitmap;\n            _context.next = 11;\n            return safeCreateImageBitmap(blob, imagebitmapOptions);\n\n          case 11:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseToImageBitmap.apply(this, arguments);\n}\n\nfunction safeCreateImageBitmap(_x4) {\n  return _safeCreateImageBitmap.apply(this, arguments);\n}\n\nfunction _safeCreateImageBitmap() {\n  _safeCreateImageBitmap = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(blob) {\n    var imagebitmapOptions,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            imagebitmapOptions = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : null;\n\n            if (isEmptyObject(imagebitmapOptions) || !imagebitmapOptionsSupported) {\n              imagebitmapOptions = null;\n            }\n\n            if (!imagebitmapOptions) {\n              _context2.next = 13;\n              break;\n            }\n\n            _context2.prev = 3;\n            _context2.next = 6;\n            return createImageBitmap(blob, imagebitmapOptions);\n\n          case 6:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](3);\n            console.warn(_context2.t0);\n            imagebitmapOptionsSupported = false;\n\n          case 13:\n            _context2.next = 15;\n            return createImageBitmap(blob);\n\n          case 15:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 9]]);\n  }));\n  return _safeCreateImageBitmap.apply(this, arguments);\n}\n\nfunction isEmptyObject(object) {\n  for (var key in object || EMPTY_OBJECT) {\n    return false;\n  }\n\n  return true;\n}","map":{"version":3,"mappings":";;AACA,SAAQA,KAAR,EAAeC,OAAf,QAA6B,aAA7B;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AAEA,IAAMC,YAAY,GAAG,EAArB;AAEA,IAAIC,2BAA2B,GAAG,IAAlC;AASA,wBAA8BC,kBAA9B;EAAA;AAAA;;;iFAAe,iBACbC,WADa,EAEbC,OAFa,EAGbC,GAHa;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,KAQTR,KAAK,CAACQ,GAAD,CARI;cAAA;cAAA;YAAA;;YAAA;YAAA,OAUSN,YAAY,CAACI,WAAD,EAAcC,OAAd,EAAuBC,GAAvB,CAVrB;;UAAA;YAULC,KAVK;YAWXC,IAAI,GAAGD,KAAPC;YAXW;YAAA;;UAAA;YAcXA,IAAI,GAAGT,OAAO,CAACK,WAAD,EAAcE,GAAd,CAAdE;;UAdW;YAiBPC,kBAjBO,GAiBcJ,OAAO,IAAIA,OAAO,CAACK,WAjBjC;YAAA;YAAA,OAmBAC,qBAAqB,CAACH,IAAD,EAAOC,kBAAP,CAnBrB;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;SA4BAE,qB;;;;;oFAAf,kBACEH,IADF;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAEEC,kBAFF,8DAEkD,IAFlD;;YAIE,IAAIG,aAAa,CAACH,kBAAD,CAAbG,IAAqC,CAACV,2BAA1C,EAAuE;cACrEO,kBAAkB,GAAG,IAArBA;YACD;;YANH,KAQMA,kBARN;cAAA;cAAA;YAAA;;YAAA;YAAA;YAAA,OAWmBI,iBAAiB,CAACL,IAAD,EAAOC,kBAAP,CAXpC;;UAAA;YAAA;;UAAA;YAAA;YAAA;YAaMK,OAAO,CAACC,IAARD;YACAZ,2BAA2B,GAAG,KAA9BA;;UAdN;YAAA;YAAA,OAkBeW,iBAAiB,CAACL,IAAD,CAlBhC;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAqBA,SAASI,aAAT,CAAuBI,MAAvB,EAA+B;EAE7B,KAAK,IAAMC,GAAX,IAAkBD,MAAM,IAAIf,YAA5B,EAA0C;IACxC,OAAO,KAAP;EACD;;EACD,OAAO,IAAP;AACD","names":["isSVG","getBlob","parseToImage","EMPTY_OBJECT","imagebitmapOptionsSupported","parseToImageBitmap","arrayBuffer","options","url","image","blob","imagebitmapOptions","imagebitmap","safeCreateImageBitmap","isEmptyObject","createImageBitmap","console","warn","object","key"],"sources":["../../../../src/lib/parsers/parse-to-image-bitmap.ts"],"sourcesContent":["import type {ImageLoaderOptions} from '../../image-loader';\nimport {isSVG, getBlob} from './svg-utils';\nimport parseToImage from './parse-to-image';\n\nconst EMPTY_OBJECT = {};\n\nlet imagebitmapOptionsSupported = true;\n\n/**\n * Asynchronously parses an array buffer into an ImageBitmap - this contains the decoded data\n * ImageBitmaps are supported on worker threads, but not supported on Edge, IE11 and Safari\n * https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap#Browser_compatibility\n *\n * TODO - createImageBitmap supports source rect (5 param overload), pass through?\n */\nexport default async function parseToImageBitmap(\n  arrayBuffer: ArrayBuffer,\n  options: ImageLoaderOptions,\n  url?: string\n): Promise<ImageBitmap> {\n  let blob;\n\n  // Cannot parse SVG directly to ImageBitmap, parse to Image first\n  if (isSVG(url)) {\n    // Note: this only works on main thread\n    const image = await parseToImage(arrayBuffer, options, url);\n    blob = image;\n  } else {\n    // Create blob from the array buffer\n    blob = getBlob(arrayBuffer, url);\n  }\n\n  const imagebitmapOptions = options && options.imagebitmap;\n\n  return await safeCreateImageBitmap(blob, imagebitmapOptions);\n}\n\n/**\n * Safely creates an imageBitmap with options\n * *\n * Firefox crashes if imagebitmapOptions is supplied\n * Avoid supplying if not provided or supported, remember if not supported\n */\nasync function safeCreateImageBitmap(\n  blob: Blob,\n  imagebitmapOptions: ImageBitmapOptions | null = null\n): Promise<ImageBitmap> {\n  if (isEmptyObject(imagebitmapOptions) || !imagebitmapOptionsSupported) {\n    imagebitmapOptions = null;\n  }\n\n  if (imagebitmapOptions) {\n    try {\n      // @ts-ignore Options\n      return await createImageBitmap(blob, imagebitmapOptions);\n    } catch (error) {\n      console.warn(error); // eslint-disable-line\n      imagebitmapOptionsSupported = false;\n    }\n  }\n\n  return await createImageBitmap(blob);\n}\n\nfunction isEmptyObject(object) {\n  // @ts-ignore\n  for (const key in object || EMPTY_OBJECT) {\n    return false;\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}