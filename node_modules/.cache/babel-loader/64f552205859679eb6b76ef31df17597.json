{"ast":null,"code":"import { log } from '@luma.gl/gltools';\nexport function checkProps(className, props, propChecks) {\n  var _propChecks$removedPr = propChecks.removedProps,\n      removedProps = _propChecks$removedPr === void 0 ? {} : _propChecks$removedPr,\n      _propChecks$deprecate = propChecks.deprecatedProps,\n      deprecatedProps = _propChecks$deprecate === void 0 ? {} : _propChecks$deprecate,\n      _propChecks$replacedP = propChecks.replacedProps,\n      replacedProps = _propChecks$replacedP === void 0 ? {} : _propChecks$replacedP;\n\n  for (var propName in removedProps) {\n    if (propName in props) {\n      var replacementProp = removedProps[propName];\n      var replacement = replacementProp ? \"\".concat(className, \".\").concat(removedProps[propName]) : 'N/A';\n      log.removed(\"\".concat(className, \".\").concat(propName), replacement)();\n    }\n  }\n\n  for (var _propName in deprecatedProps) {\n    if (_propName in props) {\n      var _replacementProp = deprecatedProps[_propName];\n      log.deprecated(\"\".concat(className, \".\").concat(_propName), \"\".concat(className, \".\").concat(_replacementProp))();\n    }\n  }\n\n  var newProps = null;\n\n  for (var _propName2 in replacedProps) {\n    if (_propName2 in props) {\n      var _replacementProp2 = replacedProps[_propName2];\n      log.deprecated(\"\".concat(className, \".\").concat(_propName2), \"\".concat(className, \".\").concat(_replacementProp2))();\n      newProps = newProps || Object.assign({}, props);\n      newProps[_replacementProp2] = props[_propName2];\n      delete newProps[_propName2];\n    }\n  }\n\n  return newProps || props;\n}","map":{"version":3,"mappings":"AA6BA,SAAQA,GAAR,QAAkB,kBAAlB;AAEA,OAAO,SAASC,UAAT,CAAoBC,SAApB,EAA+BC,KAA/B,EAAsCC,UAAtC,EAAkD;EACvD,4BAAsEA,UAAtE,CAAOC,YAAP;EAAA,IAAOA,YAAP,sCAAsB,EAAtB;EAAA,4BAAsED,UAAtE,CAA0BE,eAA1B;EAAA,IAA0BA,eAA1B,sCAA4C,EAA5C;EAAA,4BAAsEF,UAAtE,CAAgDG,aAAhD;EAAA,IAAgDA,aAAhD,sCAAgE,EAAhE;;EAIA,KAAK,IAAMC,QAAX,IAAuBH,YAAvB,EAAqC;IACnC,IAAIG,QAAQ,IAAIL,KAAhB,EAAuB;MACrB,IAAMM,eAAe,GAAGJ,YAAY,CAACG,QAAD,CAApC;MACA,IAAME,WAAW,GAAGD,eAAe,aAAMP,SAAN,cAAmBG,YAAY,CAACG,QAAD,CAA/B,IAA8C,KAAjF;MACAR,GAAG,CAACW,OAAJX,WAAeE,SAAfF,cAA4BQ,QAA5BR,GAAwCU,WAAxCV;IACD;EACF;;EAID,KAAK,IAAMQ,SAAX,IAAuBF,eAAvB,EAAwC;IACtC,IAAIE,SAAQ,IAAIL,KAAhB,EAAuB;MACrB,IAAMM,gBAAe,GAAGH,eAAe,CAACE,SAAD,CAAvC;MACAR,GAAG,CAACY,UAAJZ,WAAkBE,SAAlBF,cAA+BQ,SAA/BR,aAA8CE,SAA9CF,cAA2DS,gBAA3DT;IACD;EACF;;EAID,IAAIa,QAAQ,GAAG,IAAf;;EACA,KAAK,IAAML,UAAX,IAAuBD,aAAvB,EAAsC;IACpC,IAAIC,UAAQ,IAAIL,KAAhB,EAAuB;MACrB,IAAMM,iBAAe,GAAGF,aAAa,CAACC,UAAD,CAArC;MACAR,GAAG,CAACY,UAAJZ,WAAkBE,SAAlBF,cAA+BQ,UAA/BR,aAA8CE,SAA9CF,cAA2DS,iBAA3DT;MACAa,QAAQ,GAAGA,QAAQ,IAAIC,MAAM,CAACC,MAAPD,CAAc,EAAdA,EAAkBX,KAAlBW,CAAvBD;MACAA,QAAQ,CAACJ,iBAAD,CAARI,GAA4BV,KAAK,CAACK,UAAD,CAAjCK;MACA,OAAOA,QAAQ,CAACL,UAAD,CAAf;IACD;EACF;;EAED,OAAOK,QAAQ,IAAIV,KAAnB;AACD","names":["log","checkProps","className","props","propChecks","removedProps","deprecatedProps","replacedProps","propName","replacementProp","replacement","removed","deprecated","newProps","Object","assign"],"sources":["../../../src/utils/check-props.js"],"sourcesContent":["/* Use as\nimport {checkProps} from '../util/check-props;'\n\nconst PROP_CHECKS = {\n  // Removed props no longer supported, print error and link to upgrade guide\n  removedProps: {\n  },\n  // Deprecated props\n  deprecatedProps: {\n    offset: 'accessor',\n    stride: 'accessor',\n    type: 'accessor',\n    size: 'accessor',\n    divisor: 'accessor',\n    normalized: 'accessor',\n    integer: 'accessor'\n  },\n  // Deprecated props that can be autosubstituted, print warning and return updated props object\n  replacedProps: {\n    bytes: 'byteLength'\n  }\n}\n\nclass Buffer {\n  setProps(props) {\n    checkProps('Buffer', props, PROP_CHECKS);\n  }\n}\n*/\nimport {log} from '@luma.gl/gltools';\n\nexport function checkProps(className, props, propChecks) {\n  const {removedProps = {}, deprecatedProps = {}, replacedProps = {}} = propChecks;\n\n  // removedProps: Removed props no longer supported\n  // print error and link to upgrade guide\n  for (const propName in removedProps) {\n    if (propName in props) {\n      const replacementProp = removedProps[propName];\n      const replacement = replacementProp ? `${className}.${removedProps[propName]}` : 'N/A';\n      log.removed(`${className}.${propName}`, replacement)();\n    }\n  }\n\n  // deprecatedProps: Deprecated props that can not be autosubstituted\n  // print warning and rely on caller to substitute\n  for (const propName in deprecatedProps) {\n    if (propName in props) {\n      const replacementProp = deprecatedProps[propName];\n      log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();\n    }\n  }\n\n  // replacedProps: Deprecated props that can be autosubstituted\n  // print warning and return updated props object\n  let newProps = null;\n  for (const propName in replacedProps) {\n    if (propName in props) {\n      const replacementProp = replacedProps[propName];\n      log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();\n      newProps = newProps || Object.assign({}, props);\n      newProps[replacementProp] = props[propName];\n      delete newProps[propName];\n    }\n  }\n\n  return newProps || props;\n}\n"]},"metadata":{},"sourceType":"module"}