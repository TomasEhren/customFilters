{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport LayersPass from './layers-pass';\nimport { withParameters } from '@luma.gl/core';\nimport { OPERATION } from '../lib/constants';\nimport log from '../utils/log';\nvar PICKING_PARAMETERS = {\n  blendFunc: [1, 0, 32771, 0],\n  blendEquation: 32774\n};\n\nvar PickLayersPass = /*#__PURE__*/function (_LayersPass) {\n  _inherits(PickLayersPass, _LayersPass);\n\n  var _super = _createSuper(PickLayersPass);\n\n  function PickLayersPass() {\n    var _this;\n\n    _classCallCheck(this, PickLayersPass);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"pickZ\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_colors\", null);\n\n    return _this;\n  }\n\n  _createClass(PickLayersPass, [{\n    key: \"render\",\n    value: function render(props) {\n      if (props.pickingFBO) {\n        return this._drawPickingBuffer(props);\n      }\n\n      return _get(_getPrototypeOf(PickLayersPass.prototype), \"render\", this).call(this, props);\n    }\n  }, {\n    key: \"_drawPickingBuffer\",\n    value: function _drawPickingBuffer(_ref) {\n      var _this2 = this;\n\n      var layers = _ref.layers,\n          layerFilter = _ref.layerFilter,\n          views = _ref.views,\n          viewports = _ref.viewports,\n          onViewportActive = _ref.onViewportActive,\n          pickingFBO = _ref.pickingFBO,\n          _ref$deviceRect = _ref.deviceRect,\n          x = _ref$deviceRect.x,\n          y = _ref$deviceRect.y,\n          width = _ref$deviceRect.width,\n          height = _ref$deviceRect.height,\n          effects = _ref.effects,\n          _ref$pass = _ref.pass,\n          pass = _ref$pass === void 0 ? 'picking' : _ref$pass,\n          pickZ = _ref.pickZ;\n      var gl = this.gl;\n      this.pickZ = pickZ;\n      var encodedColors = pickZ ? null : {\n        byLayer: new Map(),\n        byAlpha: []\n      };\n      this._colors = encodedColors;\n      var renderStatus = withParameters(gl, _objectSpread(_objectSpread({\n        scissorTest: true,\n        scissor: [x, y, width, height],\n        clearColor: [0, 0, 0, 0],\n        depthMask: true,\n        depthTest: true,\n        depthRange: [0, 1],\n        colorMask: [true, true, true, true]\n      }, PICKING_PARAMETERS), {}, {\n        blend: !pickZ\n      }), function () {\n        return _get(_getPrototypeOf(PickLayersPass.prototype), \"render\", _this2).call(_this2, {\n          target: pickingFBO,\n          layers: layers,\n          layerFilter: layerFilter,\n          views: views,\n          viewports: viewports,\n          onViewportActive: onViewportActive,\n          effects: effects === null || effects === void 0 ? void 0 : effects.filter(function (e) {\n            return e.useInPicking;\n          }),\n          pass: pass\n        });\n      });\n      this._colors = null;\n      var decodePickingColor = encodedColors && decodeColor.bind(null, encodedColors);\n      return {\n        decodePickingColor: decodePickingColor,\n        stats: renderStatus\n      };\n    }\n  }, {\n    key: \"shouldDrawLayer\",\n    value: function shouldDrawLayer(layer) {\n      return layer.props.pickable && layer.props.operation === OPERATION.DRAW;\n    }\n  }, {\n    key: \"getModuleParameters\",\n    value: function getModuleParameters() {\n      return {\n        pickingActive: 1,\n        pickingAttribute: this.pickZ,\n        lightSources: {}\n      };\n    }\n  }, {\n    key: \"getLayerParameters\",\n    value: function getLayerParameters(layer, layerIndex, viewport) {\n      var pickParameters = _objectSpread({}, layer.props.parameters);\n\n      if (!this._colors) {\n        pickParameters.blend = false;\n      } else {\n        Object.assign(pickParameters, PICKING_PARAMETERS);\n        pickParameters.blend = true;\n        pickParameters.blendColor = encodeColor(this._colors, layer, viewport);\n      }\n\n      return pickParameters;\n    }\n  }]);\n\n  return PickLayersPass;\n}(LayersPass);\n\nexport { PickLayersPass as default };\n\nfunction encodeColor(encoded, layer, viewport) {\n  var byLayer = encoded.byLayer,\n      byAlpha = encoded.byAlpha;\n  var a;\n  var entry = byLayer.get(layer);\n\n  if (entry) {\n    entry.viewports.push(viewport);\n    a = entry.a;\n  } else {\n    a = byLayer.size + 1;\n\n    if (a <= 255) {\n      entry = {\n        a: a,\n        layer: layer,\n        viewports: [viewport]\n      };\n      byLayer.set(layer, entry);\n      byAlpha[a] = entry;\n    } else {\n      log.warn('Too many pickable layers, only picking the first 255')();\n      a = 0;\n    }\n  }\n\n  return [0, 0, 0, a / 255];\n}\n\nfunction decodeColor(encoded, pickedColor) {\n  var entry = encoded.byAlpha[pickedColor[3]];\n  return entry && {\n    pickedLayer: entry.layer,\n    pickedViewports: entry.viewports,\n    pickedObjectIndex: entry.layer.decodePickingColor(pickedColor)\n  };\n}","map":{"version":3,"mappings":"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","names":["LayersPass","withParameters","OPERATION","log","PICKING_PARAMETERS","blendFunc","blendEquation","PickLayersPass","args","_defineProperty","render","props","pickingFBO","_drawPickingBuffer","layers","layerFilter","views","viewports","onViewportActive","deviceRect","x","y","width","height","effects","pass","pickZ","gl","encodedColors","byLayer","Map","byAlpha","_colors","renderStatus","scissorTest","scissor","clearColor","depthMask","depthTest","depthRange","colorMask","blend","target","filter","e","useInPicking","decodePickingColor","decodeColor","bind","stats","shouldDrawLayer","layer","pickable","operation","DRAW","getModuleParameters","pickingActive","pickingAttribute","lightSources","getLayerParameters","layerIndex","viewport","pickParameters","parameters","Object","assign","blendColor","encodeColor","encoded","a","entry","get","push","size","set","warn","pickedColor","pickedLayer","pickedViewports","pickedObjectIndex"],"sources":["../../../src/passes/pick-layers-pass.ts"],"sourcesContent":["import LayersPass, {LayersPassRenderOptions, RenderStats} from './layers-pass';\nimport {withParameters} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport {OPERATION} from '../lib/constants';\nimport log from '../utils/log';\n\nimport type {Framebuffer} from '@luma.gl/core';\nimport type Viewport from '../viewports/viewport';\nimport type Layer from '../lib/layer';\n\nconst PICKING_PARAMETERS = {\n  blendFunc: [GL.ONE, GL.ZERO, GL.CONSTANT_ALPHA, GL.ZERO],\n  blendEquation: GL.FUNC_ADD\n};\n\ntype PickLayersPassRenderOptions = LayersPassRenderOptions & {\n  pickingFBO: Framebuffer;\n  deviceRect: {x: number; y: number; width: number; height: number};\n  pickZ: boolean;\n};\n\ntype EncodedPickingColors = {\n  a: number;\n  layer: Layer;\n  viewports: Viewport[];\n};\n\nexport default class PickLayersPass extends LayersPass {\n  private pickZ?: boolean;\n  private _colors: {\n    byLayer: Map<Layer, EncodedPickingColors>;\n    byAlpha: EncodedPickingColors[];\n  } | null = null;\n\n  render(props: PickLayersPassRenderOptions) {\n    if (props.pickingFBO) {\n      // When drawing into an off-screen buffer, use the alpha channel to encode layer index\n      return this._drawPickingBuffer(props);\n    }\n    // When drawing to screen (debug mode), do not use the alpha channel so that result is always visible\n    return super.render(props);\n  }\n\n  // Private\n  // Draws list of layers and viewports into the picking buffer\n  // Note: does not sample the buffer, that has to be done by the caller\n  _drawPickingBuffer({\n    layers,\n    layerFilter,\n    views,\n    viewports,\n    onViewportActive,\n    pickingFBO,\n    deviceRect: {x, y, width, height},\n    effects,\n    pass = 'picking',\n    pickZ\n  }: PickLayersPassRenderOptions): {\n    decodePickingColor:\n      | null\n      | ((pickedColor: number[]) =>\n          | {\n              pickedLayer: Layer;\n              pickedViewports: Viewport[];\n              pickedObjectIndex: number;\n            }\n          | undefined);\n    stats: RenderStats;\n  } {\n    const gl = this.gl;\n    this.pickZ = pickZ;\n\n    // Track encoded layer indices\n    const encodedColors = pickZ\n      ? null\n      : {\n          byLayer: new Map(),\n          byAlpha: []\n        };\n    // Temporarily store it on the instance so that it can be accessed by this.getLayerParameters\n    this._colors = encodedColors;\n\n    // Make sure we clear scissor test and fbo bindings in case of exceptions\n    // We are only interested in one pixel, no need to render anything else\n    // Note that the callback here is called synchronously.\n    // Set blend mode for picking\n    // always overwrite existing pixel with [r,g,b,layerIndex]\n    const renderStatus = withParameters(\n      gl,\n      {\n        scissorTest: true,\n        scissor: [x, y, width, height],\n        clearColor: [0, 0, 0, 0],\n        // When used as Mapbox custom layer, the context state may be dirty\n        // TODO - Remove when mapbox fixes this issue\n        // https://github.com/mapbox/mapbox-gl-js/issues/7801\n        depthMask: true,\n        depthTest: true,\n        depthRange: [0, 1],\n        colorMask: [true, true, true, true],\n        // Blending\n        ...PICKING_PARAMETERS,\n        blend: !pickZ\n      },\n      () =>\n        super.render({\n          target: pickingFBO,\n          layers,\n          layerFilter,\n          views,\n          viewports,\n          onViewportActive,\n          effects: effects?.filter(e => e.useInPicking),\n          pass\n        })\n    );\n\n    // Clear the temp field\n    this._colors = null;\n    const decodePickingColor = encodedColors && decodeColor.bind(null, encodedColors);\n    return {decodePickingColor, stats: renderStatus};\n  }\n\n  protected shouldDrawLayer(layer: Layer): boolean {\n    return layer.props.pickable && layer.props.operation === OPERATION.DRAW;\n  }\n\n  protected getModuleParameters() {\n    return {\n      pickingActive: 1,\n      pickingAttribute: this.pickZ,\n      // turn off lighting by adding empty light source object\n      // lights shader module relies on the `lightSources` to turn on/off lighting\n      lightSources: {}\n    };\n  }\n\n  protected getLayerParameters(layer: Layer, layerIndex: number, viewport: Viewport): any {\n    const pickParameters = {...layer.props.parameters};\n\n    if (!this._colors) {\n      pickParameters.blend = false;\n    } else {\n      Object.assign(pickParameters, PICKING_PARAMETERS);\n      pickParameters.blend = true;\n      pickParameters.blendColor = encodeColor(this._colors, layer, viewport);\n    }\n\n    return pickParameters;\n  }\n}\n\n// Assign an unique alpha value for each pickable layer and track the encoding in the cache object\n// Returns normalized blend color\nfunction encodeColor(\n  encoded: {\n    byLayer: Map<Layer, EncodedPickingColors>;\n    byAlpha: EncodedPickingColors[];\n  },\n  layer: Layer,\n  viewport: Viewport\n): number[] {\n  const {byLayer, byAlpha} = encoded;\n  let a;\n\n  // Encode layerIndex in the alpha channel\n  // TODO - combine small layers to better utilize the picking color space\n  let entry = byLayer.get(layer);\n  if (entry) {\n    entry.viewports.push(viewport);\n    a = entry.a;\n  } else {\n    a = byLayer.size + 1;\n    if (a <= 255) {\n      entry = {a, layer, viewports: [viewport]};\n      byLayer.set(layer, entry);\n      byAlpha[a] = entry;\n    } else {\n      log.warn('Too many pickable layers, only picking the first 255')();\n      a = 0;\n    }\n  }\n  return [0, 0, 0, a / 255];\n}\n\n// Given a picked color, retrieve the corresponding layer and viewports from cache\nfunction decodeColor(\n  encoded: {\n    byLayer: Map<Layer, EncodedPickingColors>;\n    byAlpha: EncodedPickingColors[];\n  },\n  pickedColor: number[]\n):\n  | {\n      pickedLayer: Layer;\n      pickedViewports: Viewport[];\n      pickedObjectIndex: number;\n    }\n  | undefined {\n  const entry = encoded.byAlpha[pickedColor[3]];\n  return (\n    entry && {\n      pickedLayer: entry.layer,\n      pickedViewports: entry.viewports,\n      pickedObjectIndex: entry.layer.decodePickingColor(pickedColor)\n    }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}