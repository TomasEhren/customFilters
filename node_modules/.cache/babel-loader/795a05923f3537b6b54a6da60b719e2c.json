{"ast":null,"code":"import Transition from './transition';\nconst EPSILON = 1e-5;\n\nfunction updateSpringElement(prev, cur, dest, damping, stiffness) {\n  const velocity = cur - prev;\n  const delta = dest - cur;\n  const spring = delta * stiffness;\n  const damper = -velocity * damping;\n  return spring + damper + velocity + cur;\n}\n\nfunction updateSpring(prev, cur, dest, damping, stiffness) {\n  if (Array.isArray(dest)) {\n    const next = [];\n\n    for (let i = 0; i < dest.length; i++) {\n      next[i] = updateSpringElement(prev[i], cur[i], dest[i], damping, stiffness);\n    }\n\n    return next;\n  }\n\n  return updateSpringElement(prev, cur, dest, damping, stiffness);\n}\n\nfunction distance(value1, value2) {\n  if (Array.isArray(value1)) {\n    let distanceSquare = 0;\n\n    for (let i = 0; i < value1.length; i++) {\n      const d = value1[i] - value2[i];\n      distanceSquare += d * d;\n    }\n\n    return Math.sqrt(distanceSquare);\n  }\n\n  return Math.abs(value1 - value2);\n}\n\nexport default class CPUSpringTransition extends Transition {\n  get value() {\n    return this._currValue;\n  }\n\n  _onUpdate() {\n    const {\n      fromValue,\n      toValue,\n      damping,\n      stiffness\n    } = this.settings;\n    const {\n      _prevValue = fromValue,\n      _currValue = fromValue\n    } = this;\n    let nextValue = updateSpring(_prevValue, _currValue, toValue, damping, stiffness);\n    const delta = distance(nextValue, toValue);\n    const velocity = distance(nextValue, _currValue);\n\n    if (delta < EPSILON && velocity < EPSILON) {\n      nextValue = toValue;\n      this.end();\n    }\n\n    this._prevValue = _currValue;\n    this._currValue = nextValue;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,OAAOA,UAAP,MAAuB,cAAvB;AAEA,MAAMC,OAAO,GAAG,IAAhB;;AAUA,SAASC,mBAAT,CAA6BC,IAA7B,EAAmCC,GAAnC,EAAwCC,IAAxC,EAA8CC,OAA9C,EAAuDC,SAAvD,EAAkE;EAChE,MAAMC,QAAQ,GAAGJ,GAAG,GAAGD,IAAvB;EACA,MAAMM,KAAK,GAAGJ,IAAI,GAAGD,GAArB;EACA,MAAMM,MAAM,GAAGD,KAAK,GAAGF,SAAvB;EACA,MAAMI,MAAM,GAAG,CAACH,QAAD,GAAYF,OAA3B;EACA,OAAOI,MAAM,GAAGC,MAATD,GAAkBF,QAAlBE,GAA6BN,GAApC;AACD;;AAUD,SAASQ,YAAT,CAAsBT,IAAtB,EAA4BC,GAA5B,EAAiCC,IAAjC,EAAuCC,OAAvC,EAAgDC,SAAhD,EAA2D;EACzD,IAAIM,KAAK,CAACC,OAAND,CAAcR,IAAdQ,CAAJ,EAAyB;IACvB,MAAME,IAAI,GAAG,EAAb;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,IAAI,CAACY,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;MACpCD,IAAI,CAACC,CAAD,CAAJD,GAAUb,mBAAmB,CAACC,IAAI,CAACa,CAAD,CAAL,EAAUZ,GAAG,CAACY,CAAD,CAAb,EAAkBX,IAAI,CAACW,CAAD,CAAtB,EAA2BV,OAA3B,EAAoCC,SAApC,CAA7BQ;IACD;;IACD,OAAOA,IAAP;EACD;;EACD,OAAOb,mBAAmB,CAACC,IAAD,EAAOC,GAAP,EAAYC,IAAZ,EAAkBC,OAAlB,EAA2BC,SAA3B,CAA1B;AACD;;AAKD,SAASW,QAAT,CAAkBC,MAAlB,EAA0BC,MAA1B,EAAkC;EAChC,IAAIP,KAAK,CAACC,OAAND,CAAcM,MAAdN,CAAJ,EAA2B;IACzB,IAAIQ,cAAc,GAAG,CAArB;;IACA,KAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGG,MAAM,CAACF,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;MACtC,MAAMM,CAAC,GAAGH,MAAM,CAACH,CAAD,CAANG,GAAYC,MAAM,CAACJ,CAAD,CAA5B;MACAK,cAAc,IAAIC,CAAC,GAAGA,CAAtBD;IACD;;IACD,OAAOE,IAAI,CAACC,IAALD,CAAUF,cAAVE,CAAP;EACD;;EACD,OAAOA,IAAI,CAACE,GAALF,CAASJ,MAAM,GAAGC,MAAlBG,CAAP;AACD;;AAED,eAAe,MAAMG,mBAAN,SAAkC1B,UAAlC,CAA6C;EACjD,IAAL2B,KAAK,GAAG;IACV,OAAO,KAAKC,UAAZ;EACD;;EAEDC,SAAS,GAAG;IAIV,MAAM;MAACC,SAAD;MAAYC,OAAZ;MAAqBzB,OAArB;MAA8BC;IAA9B,IAA2C,KAAKyB,QAAtD;IACA,MAAM;MAACC,UAAU,GAAGH,SAAd;MAAyBF,UAAU,GAAGE;IAAtC,IAAmD,IAAzD;IACA,IAAII,SAAS,GAAGtB,YAAY,CAACqB,UAAD,EAAaL,UAAb,EAAyBG,OAAzB,EAAkCzB,OAAlC,EAA2CC,SAA3C,CAA5B;IACA,MAAME,KAAK,GAAGS,QAAQ,CAACgB,SAAD,EAAYH,OAAZ,CAAtB;IACA,MAAMvB,QAAQ,GAAGU,QAAQ,CAACgB,SAAD,EAAYN,UAAZ,CAAzB;;IAEA,IAAInB,KAAK,GAAGR,OAARQ,IAAmBD,QAAQ,GAAGP,OAAlC,EAA2C;MACzCiC,SAAS,GAAGH,OAAZG;MACA,KAAKC,GAAL;IACD;;IAED,KAAKF,UAAL,GAAkBL,UAAlB;IACA,KAAKA,UAAL,GAAkBM,SAAlB;EACD;;AAtByD","names":["Transition","EPSILON","updateSpringElement","prev","cur","dest","damping","stiffness","velocity","delta","spring","damper","updateSpring","Array","isArray","next","i","length","distance","value1","value2","distanceSquare","d","Math","sqrt","abs","CPUSpringTransition","value","_currValue","_onUpdate","fromValue","toValue","settings","_prevValue","nextValue","end"],"sources":["../../../src/transitions/cpu-spring-transition.js"],"sourcesContent":["import Transition from './transition';\n\nconst EPSILON = 1e-5;\n\n/*\n * Calculate the next value in the spring transition\n * @param prev {Number} - previous value\n * @param cur {Number} - current value\n * @param dest {Number} - destination value\n * @param damping {Number}\n * @param stiffness {Number}\n */\nfunction updateSpringElement(prev, cur, dest, damping, stiffness) {\n  const velocity = cur - prev;\n  const delta = dest - cur;\n  const spring = delta * stiffness;\n  const damper = -velocity * damping;\n  return spring + damper + velocity + cur;\n}\n\n/*\n * Calculate the next value in the spring transition\n * @param prev {Number|Array} - previous value\n * @param cur {Number|Array} - current value\n * @param dest {Number|Array} - destination value\n * @param damping {Number}\n * @param stiffness {Number}\n */\nfunction updateSpring(prev, cur, dest, damping, stiffness) {\n  if (Array.isArray(dest)) {\n    const next = [];\n    for (let i = 0; i < dest.length; i++) {\n      next[i] = updateSpringElement(prev[i], cur[i], dest[i], damping, stiffness);\n    }\n    return next;\n  }\n  return updateSpringElement(prev, cur, dest, damping, stiffness);\n}\n\n/*\n * Calculate the distance between two numbers or two vectors\n */\nfunction distance(value1, value2) {\n  if (Array.isArray(value1)) {\n    let distanceSquare = 0;\n    for (let i = 0; i < value1.length; i++) {\n      const d = value1[i] - value2[i];\n      distanceSquare += d * d;\n    }\n    return Math.sqrt(distanceSquare);\n  }\n  return Math.abs(value1 - value2);\n}\n\nexport default class CPUSpringTransition extends Transition {\n  get value() {\n    return this._currValue;\n  }\n\n  _onUpdate() {\n    // TODO - use timeline\n    // const {time} = this;\n\n    const {fromValue, toValue, damping, stiffness} = this.settings;\n    const {_prevValue = fromValue, _currValue = fromValue} = this;\n    let nextValue = updateSpring(_prevValue, _currValue, toValue, damping, stiffness);\n    const delta = distance(nextValue, toValue);\n    const velocity = distance(nextValue, _currValue);\n\n    if (delta < EPSILON && velocity < EPSILON) {\n      nextValue = toValue;\n      this.end();\n    }\n\n    this._prevValue = _currValue;\n    this._currValue = nextValue;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}