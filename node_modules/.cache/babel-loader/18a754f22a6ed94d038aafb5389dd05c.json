{"ast":null,"code":"import { log, COORDINATE_SYSTEM } from '@deck.gl/core';\nconst R_EARTH = 6378000;\n\nfunction toFinite(n) {\n  return Number.isFinite(n) ? n : 0;\n}\n\nexport function getBoundingBox(attributes, vertexCount) {\n  const positions = attributes.positions.value;\n  let yMin = Infinity;\n  let yMax = -Infinity;\n  let xMin = Infinity;\n  let xMax = -Infinity;\n  let y;\n  let x;\n\n  for (let i = 0; i < vertexCount; i++) {\n    x = positions[i * 3];\n    y = positions[i * 3 + 1];\n    yMin = y < yMin ? y : yMin;\n    yMax = y > yMax ? y : yMax;\n    xMin = x < xMin ? x : xMin;\n    xMax = x > xMax ? x : xMax;\n  }\n\n  const boundingBox = {\n    xMin: toFinite(xMin),\n    xMax: toFinite(xMax),\n    yMin: toFinite(yMin),\n    yMax: toFinite(yMax)\n  };\n  return boundingBox;\n}\n\nfunction getTranslation(boundingBox, gridOffset, coordinateSystem, viewport) {\n  const {\n    width,\n    height\n  } = viewport;\n  const worldOrigin = coordinateSystem === COORDINATE_SYSTEM.CARTESIAN ? [-width / 2, -height / 2] : [-180, -90];\n  log.assert(coordinateSystem === COORDINATE_SYSTEM.CARTESIAN || coordinateSystem === COORDINATE_SYSTEM.LNGLAT || coordinateSystem === COORDINATE_SYSTEM.DEFAULT);\n  const {\n    xMin,\n    yMin\n  } = boundingBox;\n  return [-1 * (alignToCell(xMin - worldOrigin[0], gridOffset.xOffset) + worldOrigin[0]), -1 * (alignToCell(yMin - worldOrigin[1], gridOffset.yOffset) + worldOrigin[1])];\n}\n\nexport function alignToCell(inValue, cellSize) {\n  const sign = inValue < 0 ? -1 : 1;\n  let value = sign < 0 ? Math.abs(inValue) + cellSize : Math.abs(inValue);\n  value = Math.floor(value / cellSize) * cellSize;\n  return value * sign;\n}\nexport function getGridOffset(boundingBox, cellSize) {\n  let convertToMeters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  if (!convertToMeters) {\n    return {\n      xOffset: cellSize,\n      yOffset: cellSize\n    };\n  }\n\n  const {\n    yMin,\n    yMax\n  } = boundingBox;\n  const centerLat = (yMin + yMax) / 2;\n  return calculateGridLatLonOffset(cellSize, centerLat);\n}\nexport function getGridParams(boundingBox, cellSize, viewport, coordinateSystem) {\n  const gridOffset = getGridOffset(boundingBox, cellSize, coordinateSystem !== COORDINATE_SYSTEM.CARTESIAN);\n  const translation = getTranslation(boundingBox, gridOffset, coordinateSystem, viewport);\n  const {\n    xMin,\n    yMin,\n    xMax,\n    yMax\n  } = boundingBox;\n  const width = xMax - xMin + gridOffset.xOffset;\n  const height = yMax - yMin + gridOffset.yOffset;\n  const numCol = Math.ceil(width / gridOffset.xOffset);\n  const numRow = Math.ceil(height / gridOffset.yOffset);\n  return {\n    gridOffset,\n    translation,\n    width,\n    height,\n    numCol,\n    numRow\n  };\n}\n\nfunction calculateGridLatLonOffset(cellSize, latitude) {\n  const yOffset = calculateLatOffset(cellSize);\n  const xOffset = calculateLonOffset(latitude, cellSize);\n  return {\n    yOffset,\n    xOffset\n  };\n}\n\nfunction calculateLatOffset(dy) {\n  return dy / R_EARTH * (180 / Math.PI);\n}\n\nfunction calculateLonOffset(lat, dx) {\n  return dx / R_EARTH * (180 / Math.PI) / Math.cos(lat * Math.PI / 180);\n}","map":{"version":3,"mappings":"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","names":["log","COORDINATE_SYSTEM","R_EARTH","toFinite","n","Number","isFinite","getBoundingBox","attributes","vertexCount","positions","value","yMin","Infinity","yMax","xMin","xMax","y","x","i","boundingBox","getTranslation","gridOffset","coordinateSystem","viewport","width","height","worldOrigin","CARTESIAN","assert","LNGLAT","DEFAULT","alignToCell","xOffset","yOffset","inValue","cellSize","sign","Math","abs","floor","getGridOffset","convertToMeters","centerLat","calculateGridLatLonOffset","getGridParams","translation","numCol","ceil","numRow","latitude","calculateLatOffset","calculateLonOffset","dy","PI","lat","dx","cos"],"sources":["../../../src/utils/grid-aggregation-utils.js"],"sourcesContent":["import {log, COORDINATE_SYSTEM} from '@deck.gl/core';\nconst R_EARTH = 6378000;\n\nfunction toFinite(n) {\n  return Number.isFinite(n) ? n : 0;\n}\n\n// Parse input data to build positions, wights and bounding box.\n/* eslint-disable max-statements */\nexport function getBoundingBox(attributes, vertexCount) {\n  // TODO - value might not exist (e.g. attribute transition)\n  const positions = attributes.positions.value;\n\n  let yMin = Infinity;\n  let yMax = -Infinity;\n  let xMin = Infinity;\n  let xMax = -Infinity;\n  let y;\n  let x;\n\n  for (let i = 0; i < vertexCount; i++) {\n    x = positions[i * 3];\n    y = positions[i * 3 + 1];\n    yMin = y < yMin ? y : yMin;\n    yMax = y > yMax ? y : yMax;\n    xMin = x < xMin ? x : xMin;\n    xMax = x > xMax ? x : xMax;\n  }\n\n  const boundingBox = {\n    xMin: toFinite(xMin),\n    xMax: toFinite(xMax),\n    yMin: toFinite(yMin),\n    yMax: toFinite(yMax)\n  };\n\n  return boundingBox;\n}\n/* eslint-enable max-statements */\n\n// Returns XY translation for positions to peform aggregation in +ve sapce\nfunction getTranslation(boundingBox, gridOffset, coordinateSystem, viewport) {\n  const {width, height} = viewport;\n\n  // Origin to define grid\n  // DEFAULT coordinate system is treated as LNGLAT\n  const worldOrigin =\n    coordinateSystem === COORDINATE_SYSTEM.CARTESIAN ? [-width / 2, -height / 2] : [-180, -90];\n\n  // Other coordinate systems not supported/verified yet\n  log.assert(\n    coordinateSystem === COORDINATE_SYSTEM.CARTESIAN ||\n      coordinateSystem === COORDINATE_SYSTEM.LNGLAT ||\n      coordinateSystem === COORDINATE_SYSTEM.DEFAULT\n  );\n\n  const {xMin, yMin} = boundingBox;\n  return [\n    // Align origin to match grid cell boundaries in CPU and GPU aggregations\n    -1 * (alignToCell(xMin - worldOrigin[0], gridOffset.xOffset) + worldOrigin[0]),\n    -1 * (alignToCell(yMin - worldOrigin[1], gridOffset.yOffset) + worldOrigin[1])\n  ];\n}\n\n// Aligns `inValue` to given `cellSize`\nexport function alignToCell(inValue, cellSize) {\n  const sign = inValue < 0 ? -1 : 1;\n\n  let value = sign < 0 ? Math.abs(inValue) + cellSize : Math.abs(inValue);\n\n  value = Math.floor(value / cellSize) * cellSize;\n\n  return value * sign;\n}\n\n/**\n * Based on geometric center of sample points, calculate cellSize in lng/lat (degree) space\n * @param {object} boundingBox - {xMin, yMin, xMax, yMax} contains bounding box of data\n * @param {number} cellSize - grid cell size in meters\n * @param {boolean, optional} converToDegrees - when true offsets are converted from meters to lng/lat (degree) space\n * @returns {xOffset, yOffset} - cellSize size\n */\n\nexport function getGridOffset(boundingBox, cellSize, convertToMeters = true) {\n  if (!convertToMeters) {\n    return {xOffset: cellSize, yOffset: cellSize};\n  }\n\n  const {yMin, yMax} = boundingBox;\n  const centerLat = (yMin + yMax) / 2;\n\n  return calculateGridLatLonOffset(cellSize, centerLat);\n}\n\nexport function getGridParams(boundingBox, cellSize, viewport, coordinateSystem) {\n  const gridOffset = getGridOffset(\n    boundingBox,\n    cellSize,\n    coordinateSystem !== COORDINATE_SYSTEM.CARTESIAN\n  );\n\n  const translation = getTranslation(boundingBox, gridOffset, coordinateSystem, viewport);\n\n  const {xMin, yMin, xMax, yMax} = boundingBox;\n\n  const width = xMax - xMin + gridOffset.xOffset;\n  const height = yMax - yMin + gridOffset.yOffset;\n\n  const numCol = Math.ceil(width / gridOffset.xOffset);\n  const numRow = Math.ceil(height / gridOffset.yOffset);\n  return {gridOffset, translation, width, height, numCol, numRow};\n}\n\n/**\n * calculate grid layer cell size in lat lon based on world unit size\n * and current latitude\n * @param {number} cellSize\n * @param {number} latitude\n * @returns {object} - lat delta and lon delta\n */\nfunction calculateGridLatLonOffset(cellSize, latitude) {\n  const yOffset = calculateLatOffset(cellSize);\n  const xOffset = calculateLonOffset(latitude, cellSize);\n  return {yOffset, xOffset};\n}\n\n/**\n * with a given x-km change, calculate the increment of latitude\n * based on stackoverflow http://stackoverflow.com/questions/7477003\n * @param {number} dy - change in km\n * @return {number} - increment in latitude\n */\nfunction calculateLatOffset(dy) {\n  return (dy / R_EARTH) * (180 / Math.PI);\n}\n\n/**\n * with a given x-km change, and current latitude\n * calculate the increment of longitude\n * based on stackoverflow http://stackoverflow.com/questions/7477003\n * @param {number} lat - latitude of current location (based on city)\n * @param {number} dx - change in km\n * @return {number} - increment in longitude\n */\nfunction calculateLonOffset(lat, dx) {\n  return ((dx / R_EARTH) * (180 / Math.PI)) / Math.cos((lat * Math.PI) / 180);\n}\n"]},"metadata":{},"sourceType":"module"}