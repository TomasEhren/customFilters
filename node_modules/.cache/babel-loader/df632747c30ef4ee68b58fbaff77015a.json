{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport Viewport from '../viewports/viewport';\nimport { parsePosition, getPosition } from '../utils/positions';\nimport { deepEqual } from '../utils/deep-equal';\nimport assert from '../utils/assert';\n\nvar View = /*#__PURE__*/function () {\n  function View() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, View);\n\n    var _props$id = props.id,\n        id = _props$id === void 0 ? null : _props$id,\n        _props$x = props.x,\n        x = _props$x === void 0 ? 0 : _props$x,\n        _props$y = props.y,\n        y = _props$y === void 0 ? 0 : _props$y,\n        _props$width = props.width,\n        width = _props$width === void 0 ? '100%' : _props$width,\n        _props$height = props.height,\n        height = _props$height === void 0 ? '100%' : _props$height,\n        viewportInstance = props.viewportInstance,\n        _props$type = props.type,\n        type = _props$type === void 0 ? Viewport : _props$type;\n    assert(!viewportInstance || viewportInstance instanceof Viewport);\n    this.viewportInstance = viewportInstance;\n    this.id = id || this.constructor.displayName || 'view';\n    this.type = type;\n    this.props = _objectSpread(_objectSpread({}, props), {}, {\n      id: this.id\n    });\n\n    this._parseDimensions({\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    });\n\n    this.equals = this.equals.bind(this);\n    Object.seal(this);\n  }\n\n  _createClass(View, [{\n    key: \"equals\",\n    value: function equals(view) {\n      if (this === view) {\n        return true;\n      }\n\n      if (this.viewportInstance) {\n        return view.viewportInstance && this.viewportInstance.equals(view.viewportInstance);\n      }\n\n      var viewChanged = deepEqual(this.props, view.props);\n      return viewChanged;\n    }\n  }, {\n    key: \"makeViewport\",\n    value: function makeViewport(_ref) {\n      var width = _ref.width,\n          height = _ref.height,\n          viewState = _ref.viewState;\n\n      if (this.viewportInstance) {\n        return this.viewportInstance;\n      }\n\n      viewState = this.filterViewState(viewState);\n      var viewportDimensions = this.getDimensions({\n        width: width,\n        height: height\n      });\n      return this._getViewport(viewState, viewportDimensions);\n    }\n  }, {\n    key: \"getViewStateId\",\n    value: function getViewStateId() {\n      switch (typeof this.props.viewState) {\n        case 'string':\n          return this.props.viewState;\n\n        case 'object':\n          return this.props.viewState && this.props.viewState.id;\n\n        default:\n          return this.id;\n      }\n    }\n  }, {\n    key: \"filterViewState\",\n    value: function filterViewState(viewState) {\n      if (this.props.viewState && typeof this.props.viewState === 'object') {\n        if (!this.props.viewState.id) {\n          return this.props.viewState;\n        }\n\n        var newViewState = _objectSpread({}, viewState);\n\n        for (var key in this.props.viewState) {\n          if (key !== 'id') {\n            newViewState[key] = this.props.viewState[key];\n          }\n        }\n\n        return newViewState;\n      }\n\n      return viewState;\n    }\n  }, {\n    key: \"getDimensions\",\n    value: function getDimensions(_ref2) {\n      var width = _ref2.width,\n          height = _ref2.height;\n      return {\n        x: getPosition(this._x, width),\n        y: getPosition(this._y, height),\n        width: getPosition(this._width, width),\n        height: getPosition(this._height, height)\n      };\n    }\n  }, {\n    key: \"_getControllerProps\",\n    value: function _getControllerProps(defaultOpts) {\n      var opts = this.props.controller;\n\n      if (!opts) {\n        return null;\n      }\n\n      if (opts === true) {\n        return defaultOpts;\n      }\n\n      if (typeof opts === 'function') {\n        opts = {\n          type: opts\n        };\n      }\n\n      return _objectSpread(_objectSpread({}, defaultOpts), opts);\n    }\n  }, {\n    key: \"_getViewport\",\n    value: function _getViewport(viewState, viewportDimensions) {\n      var ViewportType = this.type;\n      return new ViewportType(_objectSpread(_objectSpread(_objectSpread({}, viewState), this.props), viewportDimensions));\n    }\n  }, {\n    key: \"_parseDimensions\",\n    value: function _parseDimensions(_ref3) {\n      var x = _ref3.x,\n          y = _ref3.y,\n          width = _ref3.width,\n          height = _ref3.height;\n      this._x = parsePosition(x);\n      this._y = parsePosition(y);\n      this._width = parsePosition(width);\n      this._height = parsePosition(height);\n    }\n  }]);\n\n  return View;\n}();\n\nexport { View as default };","map":{"version":3,"mappings":"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","names":["Viewport","parsePosition","getPosition","deepEqual","assert","View","constructor","props","id","x","y","width","height","viewportInstance","type","displayName","_parseDimensions","equals","bind","Object","seal","view","viewChanged","makeViewport","viewState","filterViewState","viewportDimensions","getDimensions","_getViewport","getViewStateId","newViewState","key","_x","_y","_width","_height","_getControllerProps","defaultOpts","opts","controller","ViewportType"],"sources":["../../../src/views/view.js"],"sourcesContent":["import Viewport from '../viewports/viewport';\nimport {parsePosition, getPosition} from '../utils/positions';\nimport {deepEqual} from '../utils/deep-equal';\nimport assert from '../utils/assert';\n\nexport default class View {\n  constructor(props = {}) {\n    const {\n      id = null,\n\n      // Window width/height in pixels (for pixel projection)\n      x = 0,\n      y = 0,\n      width = '100%',\n      height = '100%',\n\n      // A View can be a wrapper for a viewport instance\n      viewportInstance,\n\n      // Internal: Viewport Type\n      type = Viewport // TODO - default to WebMercator?\n    } = props;\n\n    assert(!viewportInstance || viewportInstance instanceof Viewport);\n    this.viewportInstance = viewportInstance;\n\n    // Id\n    this.id = id || this.constructor.displayName || 'view';\n    this.type = type;\n\n    this.props = {...props, id: this.id};\n\n    // Extents\n    this._parseDimensions({x, y, width, height});\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n\n    Object.seal(this);\n  }\n\n  equals(view) {\n    if (this === view) {\n      return true;\n    }\n\n    // if `viewportInstance` is set, it is the only prop that is used\n    // Delegate to `Viewport.equals`\n    if (this.viewportInstance) {\n      return view.viewportInstance && this.viewportInstance.equals(view.viewportInstance);\n    }\n\n    const viewChanged = deepEqual(this.props, view.props);\n\n    return viewChanged;\n  }\n\n  // Build a `Viewport` from a view descriptor\n  // TODO - add support for autosizing viewports using width and height\n  makeViewport({width, height, viewState}) {\n    if (this.viewportInstance) {\n      return this.viewportInstance;\n    }\n\n    viewState = this.filterViewState(viewState);\n\n    // Resolve relative viewport dimensions\n    const viewportDimensions = this.getDimensions({width, height});\n    return this._getViewport(viewState, viewportDimensions);\n  }\n\n  getViewStateId() {\n    switch (typeof this.props.viewState) {\n      case 'string':\n        // if View.viewState is a string, return it\n        return this.props.viewState;\n\n      case 'object':\n        // If it is an object, return its id component\n        return this.props.viewState && this.props.viewState.id;\n\n      default:\n        return this.id;\n    }\n  }\n\n  // Allows view to override (or completely define) viewState\n  filterViewState(viewState) {\n    if (this.props.viewState && typeof this.props.viewState === 'object') {\n      // If we have specified an id, then intent is to override,\n      // If not, completely specify the view state\n      if (!this.props.viewState.id) {\n        return this.props.viewState;\n      }\n\n      // Merge in all props from View's viewState, except id\n      const newViewState = {...viewState};\n      for (const key in this.props.viewState) {\n        if (key !== 'id') {\n          newViewState[key] = this.props.viewState[key];\n        }\n      }\n      return newViewState;\n    }\n\n    return viewState;\n  }\n\n  // Resolve relative viewport dimensions into actual dimensions (y='50%', width=800 => y=400)\n  getDimensions({width, height}) {\n    return {\n      x: getPosition(this._x, width),\n      y: getPosition(this._y, height),\n      width: getPosition(this._width, width),\n      height: getPosition(this._height, height)\n    };\n  }\n\n  // Used by sub classes to resolve controller props\n  _getControllerProps(defaultOpts) {\n    let opts = this.props.controller;\n\n    if (!opts) {\n      return null;\n    }\n    if (opts === true) {\n      return defaultOpts;\n    }\n    if (typeof opts === 'function') {\n      opts = {type: opts};\n    }\n    return {...defaultOpts, ...opts};\n  }\n\n  // Overridable method\n  _getViewport(viewState, viewportDimensions) {\n    // Get the type of the viewport\n    const {type: ViewportType} = this;\n    return new ViewportType({...viewState, ...this.props, ...viewportDimensions});\n  }\n\n  // Parse relative viewport dimension descriptors (e.g {y: '50%', height: '50%'})\n  _parseDimensions({x, y, width, height}) {\n    this._x = parsePosition(x);\n    this._y = parsePosition(y);\n    this._width = parsePosition(width);\n    this._height = parsePosition(height);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}