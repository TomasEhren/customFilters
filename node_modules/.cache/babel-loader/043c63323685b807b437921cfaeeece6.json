{"ast":null,"code":"import { formatValue, equals, config } from '../lib/common';\nimport { degrees, radians, clamp } from '../lib/common';\nimport Vector3 from './vector3';\nimport * as vec3 from 'gl-matrix/vec3';\nconst EPSILON = 0.000001;\nconst EARTH_RADIUS_METERS = 6.371e6;\nexport default class SphericalCoordinates {\n  constructor() {\n    let {\n      phi = 0,\n      theta = 0,\n      radius = 1,\n      bearing = undefined,\n      pitch = undefined,\n      altitude = undefined,\n      radiusScale = EARTH_RADIUS_METERS\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.phi = phi;\n    this.theta = theta;\n    this.radius = radius || altitude || 1;\n    this.radiusScale = radiusScale || 1;\n\n    if (bearing !== undefined) {\n      this.bearing = bearing;\n    }\n\n    if (pitch !== undefined) {\n      this.pitch = pitch;\n    }\n\n    this.check();\n  }\n\n  toString() {\n    return this.formatString(config);\n  }\n\n  formatString(_ref) {\n    let {\n      printTypes = false\n    } = _ref;\n    const f = formatValue;\n    return \"\".concat(printTypes ? 'Spherical' : '', \"[rho:\").concat(f(this.radius), \",theta:\").concat(f(this.theta), \",phi:\").concat(f(this.phi), \"]\");\n  }\n\n  equals(other) {\n    return equals(this.radius, other.radius) && equals(this.theta, other.theta) && equals(this.phi, other.phi);\n  }\n\n  exactEquals(other) {\n    return this.radius === other.radius && this.theta === other.theta && this.phi === other.phi;\n  }\n\n  get bearing() {\n    return 180 - degrees(this.phi);\n  }\n\n  set bearing(v) {\n    this.phi = Math.PI - radians(v);\n  }\n\n  get pitch() {\n    return degrees(this.theta);\n  }\n\n  set pitch(v) {\n    this.theta = radians(v);\n  }\n\n  get longitude() {\n    return degrees(this.phi);\n  }\n\n  get latitude() {\n    return degrees(this.theta);\n  }\n\n  get lng() {\n    return degrees(this.phi);\n  }\n\n  get lat() {\n    return degrees(this.theta);\n  }\n\n  get z() {\n    return (this.radius - 1) * this.radiusScale;\n  }\n\n  set(radius, phi, theta) {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n    return this.check();\n  }\n\n  clone() {\n    return new SphericalCoordinates().copy(this);\n  }\n\n  copy(other) {\n    this.radius = other.radius;\n    this.phi = other.phi;\n    this.theta = other.theta;\n    return this.check();\n  }\n\n  fromLngLatZ(_ref2) {\n    let [lng, lat, z] = _ref2;\n    this.radius = 1 + z / this.radiusScale;\n    this.phi = radians(lat);\n    this.theta = radians(lng);\n  }\n\n  fromVector3(v) {\n    this.radius = vec3.length(v);\n\n    if (this.radius > 0) {\n      this.theta = Math.atan2(v[0], v[1]);\n      this.phi = Math.acos(clamp(v[2] / this.radius, -1, 1));\n    }\n\n    return this.check();\n  }\n\n  toVector3() {\n    return new Vector3(0, 0, this.radius).rotateX({\n      radians: this.theta\n    }).rotateZ({\n      radians: this.phi\n    });\n  }\n\n  makeSafe() {\n    this.phi = Math.max(EPSILON, Math.min(Math.PI - EPSILON, this.phi));\n    return this;\n  }\n\n  check() {\n    if (!Number.isFinite(this.phi) || !Number.isFinite(this.theta) || !(this.radius > 0)) {\n      throw new Error('SphericalCoordinates: some fields set to invalid numbers');\n    }\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["formatValue","equals","config","degrees","radians","clamp","Vector3","vec3","EPSILON","EARTH_RADIUS_METERS","SphericalCoordinates","constructor","phi","theta","radius","bearing","undefined","pitch","altitude","radiusScale","check","toString","formatString","printTypes","f","other","exactEquals","v","Math","PI","longitude","latitude","lng","lat","z","set","clone","copy","fromLngLatZ","fromVector3","length","atan2","acos","toVector3","rotateX","rotateZ","makeSafe","max","min","Number","isFinite","Error"],"sources":["../../../src/classes/spherical-coordinates.js"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Adaptation of THREE.js Spherical class, under MIT license\nimport {formatValue, equals, config} from '../lib/common';\nimport {degrees, radians, clamp} from '../lib/common';\nimport Vector3 from './vector3';\n\n// @ts-ignore: error TS2307: Cannot find module 'gl-matrix/...'.\nimport * as vec3 from 'gl-matrix/vec3';\n\n// TODO - import epsilon\nconst EPSILON = 0.000001;\n\nconst EARTH_RADIUS_METERS = 6.371e6;\n\n// Todo [rho, theta, phi] ?\nexport default class SphericalCoordinates {\n  // @ts-ignore TS2740: Type '{}' is missing the following properties from type\n  // eslint-disable-next-line complexity\n  constructor({\n    phi = 0,\n    theta = 0,\n    radius = 1,\n    bearing = undefined,\n    pitch = undefined,\n    altitude = undefined,\n    radiusScale = EARTH_RADIUS_METERS\n  } = {}) {\n    this.phi = phi;\n    this.theta = theta;\n    // TODO - silently accepts illegal 0\n    this.radius = radius || altitude || 1; // radial distance from center\n    this.radiusScale = radiusScale || 1; // Used by lngLatZ\n\n    if (bearing !== undefined) {\n      this.bearing = bearing; // up / down towards top and bottom pole\n    }\n    if (pitch !== undefined) {\n      this.pitch = pitch; // around the equator of the sphere\n    }\n    this.check();\n  }\n\n  toString() {\n    return this.formatString(config);\n  }\n\n  formatString({printTypes = false}) {\n    const f = formatValue;\n    return `${printTypes ? 'Spherical' : ''}\\\n[rho:${f(this.radius)},theta:${f(this.theta)},phi:${f(this.phi)}]`;\n  }\n\n  equals(other) {\n    return (\n      equals(this.radius, other.radius) &&\n      equals(this.theta, other.theta) &&\n      equals(this.phi, other.phi)\n    );\n  }\n\n  exactEquals(other) {\n    return this.radius === other.radius && this.theta === other.theta && this.phi === other.phi;\n  }\n\n  /* eslint-disable brace-style */\n  // Cartographic (bearing 0 north, pitch 0 look from above)\n  get bearing() {\n    return 180 - degrees(this.phi);\n  }\n  set bearing(v) {\n    this.phi = Math.PI - radians(v);\n  }\n  get pitch() {\n    return degrees(this.theta);\n  }\n  set pitch(v) {\n    this.theta = radians(v);\n  }\n  // get pitch() { return 90 - degrees(this.phi); }\n  // set pitch(v) { this.phi = radians(v) + Math.PI / 2; }\n  // get altitude() { return this.radius - 1; } // relative altitude\n\n  // lnglatZ coordinates\n  get longitude() {\n    return degrees(this.phi);\n  }\n  get latitude() {\n    return degrees(this.theta);\n  }\n  get lng() {\n    return degrees(this.phi);\n  }\n  get lat() {\n    return degrees(this.theta);\n  }\n  get z() {\n    return (this.radius - 1) * this.radiusScale;\n  }\n  /* eslint-enable brace-style */\n\n  set(radius, phi, theta) {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n    return this.check();\n  }\n\n  clone() {\n    return new SphericalCoordinates().copy(this);\n  }\n\n  copy(other) {\n    this.radius = other.radius;\n    this.phi = other.phi;\n    this.theta = other.theta;\n    return this.check();\n  }\n\n  fromLngLatZ([lng, lat, z]) {\n    this.radius = 1 + z / this.radiusScale;\n    this.phi = radians(lat);\n    this.theta = radians(lng);\n  }\n\n  fromVector3(v) {\n    this.radius = vec3.length(v);\n    if (this.radius > 0) {\n      this.theta = Math.atan2(v[0], v[1]); // equator angle around y-up axis\n      this.phi = Math.acos(clamp(v[2] / this.radius, -1, 1)); // polar angle\n    }\n    return this.check();\n  }\n\n  toVector3() {\n    return new Vector3(0, 0, this.radius)\n      .rotateX({radians: this.theta})\n      .rotateZ({radians: this.phi});\n  }\n\n  // restrict phi to be betwee EPS and PI-EPS\n  makeSafe() {\n    this.phi = Math.max(EPSILON, Math.min(Math.PI - EPSILON, this.phi));\n    return this;\n  }\n\n  check() {\n    // this.makeSafe();\n    if (!Number.isFinite(this.phi) || !Number.isFinite(this.theta) || !(this.radius > 0)) {\n      throw new Error('SphericalCoordinates: some fields set to invalid numbers');\n    }\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}