{"ast":null,"code":"export function removeNontransferableOptions(object) {\n  return JSON.parse(stringifyJSON(object));\n}\n\nfunction stringifyJSON(v) {\n  const cache = new Set();\n  return JSON.stringify(v, (key, value) => {\n    if (typeof value === 'object' && value !== null) {\n      if (cache.has(value)) {\n        try {\n          return JSON.parse(JSON.stringify(value));\n        } catch (err) {\n          return undefined;\n        }\n      }\n\n      cache.add(value);\n    }\n\n    return value;\n  });\n}","map":{"version":3,"mappings":"AAIA,OAAO,SAASA,4BAAT,CAAsCC,MAAtC,EAA8D;EAInE,OAAOC,IAAI,CAACC,KAALD,CAAWE,aAAa,CAACH,MAAD,CAAxBC,CAAP;AACD;;AAED,SAASE,aAAT,CAAuBC,CAAvB,EAAmC;EACjC,MAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;EACA,OAAOL,IAAI,CAACM,SAALN,CAAeG,CAAfH,EAAkB,CAACO,GAAD,EAAMC,KAAN,KAAgB;IACvC,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA3C,EAAiD;MAC/C,IAAIJ,KAAK,CAACK,GAANL,CAAUI,KAAVJ,CAAJ,EAAsB;QAEpB,IAAI;UAEF,OAAOJ,IAAI,CAACC,KAALD,CAAWA,IAAI,CAACM,SAALN,CAAeQ,KAAfR,CAAXA,CAAP;QAFF,EAGE,OAAOU,GAAP,EAAY;UAEZ,OAAOC,SAAP;QACD;MACF;;MAEDP,KAAK,CAACQ,GAANR,CAAUI,KAAVJ;IACD;;IACD,OAAOI,KAAP;EAfK,EAAP;AAiBD","names":["removeNontransferableOptions","object","JSON","parse","stringifyJSON","v","cache","Set","stringify","key","value","has","err","undefined","add"],"sources":["../../../../src/lib/worker-utils/remove-nontransferable-options.ts"],"sourcesContent":["/**\n * Safely stringify JSON (drop non serializable values like functions and regexps)\n * @param value\n */\nexport function removeNontransferableOptions(object: object): object {\n  // options.log object contains functions which cannot be transferred\n  // TODO - decide how to handle logging on workers\n  // TODO - warn if options stringification is long\n  return JSON.parse(stringifyJSON(object));\n}\n\nfunction stringifyJSON(v: unknown) {\n  const cache = new Set();\n  return JSON.stringify(v, (key, value) => {\n    if (typeof value === 'object' && value !== null) {\n      if (cache.has(value)) {\n        // Circular reference found\n        try {\n          // If this value does not reference a parent it can be deduped\n          return JSON.parse(JSON.stringify(value));\n        } catch (err) {\n          // discard key if value cannot be deduped\n          return undefined;\n        }\n      }\n      // Store value in our set\n      cache.add(value);\n    }\n    return value;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}