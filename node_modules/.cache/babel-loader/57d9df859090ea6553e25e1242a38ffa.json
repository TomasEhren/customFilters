{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(makePrimitiveIterator);\n\nimport { GL } from '../constants';\nimport { getPrimitiveModeType } from '../primitives/modes';\nimport { assert } from '@loaders.gl/loader-utils';\nexport function makePrimitiveIterator(indices) {\n  var attributes,\n      mode,\n      start,\n      end,\n      info,\n      i,\n      _args = arguments;\n  return _regeneratorRuntime.wrap(function makePrimitiveIterator$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          attributes = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          mode = _args.length > 2 ? _args[2] : undefined;\n          start = _args.length > 3 && _args[3] !== undefined ? _args[3] : 0;\n          end = _args.length > 4 ? _args[4] : undefined;\n\n          if (indices) {\n            indices = indices.values || indices.value || indices;\n          }\n\n          if (end === undefined) {\n            end = indices ? indices.length : start;\n          }\n\n          info = {\n            attributes: attributes,\n            type: getPrimitiveModeType(mode),\n            i1: 0,\n            i2: 0,\n            i3: 0\n          };\n          i = start;\n\n        case 8:\n          if (!(i < end)) {\n            _context.next = 47;\n            break;\n          }\n\n          _context.t0 = mode;\n          _context.next = _context.t0 === GL.POINTS ? 12 : _context.t0 === GL.LINES ? 15 : _context.t0 === GL.LINE_STRIP ? 19 : _context.t0 === GL.LINE_LOOP ? 23 : _context.t0 === GL.TRIANGLES ? 27 : _context.t0 === GL.TRIANGLE_STRIP ? 32 : _context.t0 === GL.TRIANGLE_FAN ? 36 : 41;\n          break;\n\n        case 12:\n          info.i1 = i;\n          i += 1;\n          return _context.abrupt(\"break\", 42);\n\n        case 15:\n          info.i1 = i;\n          info.i2 = i + 1;\n          i += 2;\n          return _context.abrupt(\"break\", 42);\n\n        case 19:\n          info.i1 = i;\n          info.i2 = i + 1;\n          i += 1;\n          return _context.abrupt(\"break\", 42);\n\n        case 23:\n          info.i1 = i;\n          info.i2 = i + 1;\n          i += 1;\n          return _context.abrupt(\"break\", 42);\n\n        case 27:\n          info.i1 = i;\n          info.i2 = i + 1;\n          info.i3 = i + 2;\n          i += 3;\n          return _context.abrupt(\"break\", 42);\n\n        case 32:\n          info.i1 = i;\n          info.i2 = i + 1;\n          i += 1;\n          return _context.abrupt(\"break\", 42);\n\n        case 36:\n          info.i1 = 1;\n          info.i2 = i;\n          info.i3 = i + 1;\n          i += 1;\n          return _context.abrupt(\"break\", 42);\n\n        case 41:\n          assert(false);\n\n        case 42:\n          if (indices) {\n            if ('i1' in info) {\n              info.i1 = indices[info.i1];\n              info.i2 = indices[info.i2];\n              info.i3 = indices[info.i3];\n            }\n          }\n\n          _context.next = 45;\n          return info;\n\n        case 45:\n          _context.next = 8;\n          break;\n\n        case 47:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"mappings":"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","names":["makePrimitiveIterator","GL","getPrimitiveModeType","assert","indices","attributes","mode","start","end","values","value","undefined","length","info","type","i1","i2","i3","i","POINTS","LINES","LINE_STRIP","LINE_LOOP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN"],"sources":["../../../../src/geometry/iterators/primitive-iterator.ts"],"sourcesContent":["import {GL} from '../constants';\nimport {getPrimitiveModeType} from '../primitives/modes';\nimport {assert} from '@loaders.gl/loader-utils';\n\n/**\n * Iteration info for making primitive iterator\n */\ntype Information = {\n  attributes: object;\n  type: number | void;\n  i1: number;\n  i2: number;\n  i3: number;\n  primitiveIndex?: object;\n};\n/**\n * Will iterate over each primitive, expanding (dereferencing) indices\n * @param indices\n * @param attributes\n * @param mode\n * @param start\n * @param end\n */\n// eslint-disable-next-line complexity\nexport function* makePrimitiveIterator(\n  indices?: any,\n  attributes: object = {},\n  mode?: number,\n  start = 0,\n  end?: number\n): Iterable<{attributes: object; type: number; i1: number; i2: number; i3: number}> {\n  // support indices being an object with a values array\n  if (indices) {\n    indices = indices.values || indices.value || indices;\n  }\n\n  // Autodeduce length from indices\n  if (end === undefined) {\n    end = indices ? indices.length : start;\n  }\n\n  // iteration info\n  const info: Information = {\n    attributes,\n    type: getPrimitiveModeType(mode),\n    i1: 0,\n    i2: 0,\n    i3: 0\n  };\n\n  let i = start;\n  // @ts-ignore\n  while (i < end) {\n    switch (mode) {\n      case GL.POINTS: // draw single points.\n        info.i1 = i;\n        i += 1;\n        break;\n      case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 2;\n        break;\n      case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLES: // draw triangles. Each set of three vertices creates a separate triangle.\n        info.i1 = i;\n        info.i2 = i + 1;\n        info.i3 = i + 2;\n        i += 3;\n        break;\n      case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n        info.i1 = 1;\n        info.i2 = i;\n        info.i3 = i + 1;\n        i += 1;\n        break;\n\n      default:\n        assert(false);\n    }\n\n    // if indices are present, lookup actual vertices in indices\n    if (indices) {\n      if ('i1' in info) {\n        info.i1 = indices[info.i1];\n        info.i2 = indices[info.i2];\n        info.i3 = indices[info.i3];\n      }\n    }\n    // @ts-ignore\n    yield info;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}