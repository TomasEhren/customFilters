{"ast":null,"code":"const vs = \"\\nuniform DATAFILTER_TYPE filter_min;\\nuniform DATAFILTER_TYPE filter_softMin;\\nuniform DATAFILTER_TYPE filter_softMax;\\nuniform DATAFILTER_TYPE filter_max;\\nuniform bool filter_useSoftMargin;\\nuniform bool filter_enabled;\\nuniform bool filter_transformSize;\\n\\n#ifdef NON_INSTANCED_MODEL\\n  #define DATAFILTER_ATTRIB filterValues\\n  #define DATAFILTER_ATTRIB_64LOW filterValues64Low\\n#else\\n  #define DATAFILTER_ATTRIB instanceFilterValues\\n  #define DATAFILTER_ATTRIB_64LOW instanceFilterValues64Low\\n#endif\\n\\nattribute DATAFILTER_TYPE DATAFILTER_ATTRIB;\\n#ifdef DATAFILTER_DOUBLE\\n  attribute DATAFILTER_TYPE DATAFILTER_ATTRIB_64LOW;\\n\\n  uniform DATAFILTER_TYPE filter_min64High;\\n  uniform DATAFILTER_TYPE filter_max64High;\\n#endif\\n\\nvarying float dataFilter_value;\\n\\nfloat dataFilter_reduceValue(float value) {\\n  return value;\\n}\\nfloat dataFilter_reduceValue(vec2 value) {\\n  return min(value.x, value.y);\\n}\\nfloat dataFilter_reduceValue(vec3 value) {\\n  return min(min(value.x, value.y), value.z);\\n}\\nfloat dataFilter_reduceValue(vec4 value) {\\n  return min(min(value.x, value.y), min(value.z, value.w));\\n}\\nvoid dataFilter_setValue(DATAFILTER_TYPE valueFromMin, DATAFILTER_TYPE valueFromMax) {\\n  if (filter_enabled) {\\n    if (filter_useSoftMargin) {\\n      dataFilter_value = dataFilter_reduceValue(\\n        smoothstep(filter_min, filter_softMin, valueFromMin) *\\n        (1.0 - smoothstep(filter_softMax, filter_max, valueFromMax))\\n      );\\n    } else {\\n      dataFilter_value = dataFilter_reduceValue(\\n        step(filter_min, valueFromMin) * step(valueFromMax, filter_max)\\n      );\\n    }\\n  } else {\\n    dataFilter_value = 1.0;\\n  }\\n}\\n\";\nconst fs = \"\\nuniform bool filter_transformColor;\\nvarying float dataFilter_value;\\n\";\n\nconst getUniforms = opts => {\n  if (!opts || !opts.extensions) {\n    return {};\n  }\n\n  const {\n    filterRange = [-1, 1],\n    filterEnabled = true,\n    filterTransformSize = true,\n    filterTransformColor = true\n  } = opts;\n  const filterSoftRange = opts.filterSoftRange || filterRange;\n  const uniforms = Number.isFinite(filterRange[0]) ? {\n    filter_min: filterRange[0],\n    filter_softMin: filterSoftRange[0],\n    filter_softMax: filterSoftRange[1],\n    filter_max: filterRange[1]\n  } : {\n    filter_min: filterRange.map(r => r[0]),\n    filter_softMin: filterSoftRange.map(r => r[0]),\n    filter_softMax: filterSoftRange.map(r => r[1]),\n    filter_max: filterRange.map(r => r[1])\n  };\n  uniforms.filter_enabled = filterEnabled;\n  uniforms.filter_useSoftMargin = Boolean(opts.filterSoftRange);\n  uniforms.filter_transformSize = filterEnabled && filterTransformSize;\n  uniforms.filter_transformColor = filterEnabled && filterTransformColor;\n  return uniforms;\n};\n\nconst getUniforms64 = opts => {\n  if (!opts || !opts.extensions) {\n    return {};\n  }\n\n  const uniforms = getUniforms(opts);\n\n  if (Number.isFinite(uniforms.filter_min)) {\n    const min64High = Math.fround(uniforms.filter_min);\n    uniforms.filter_min -= min64High;\n    uniforms.filter_softMin -= min64High;\n    uniforms.filter_min64High = min64High;\n    const max64High = Math.fround(uniforms.filter_max);\n    uniforms.filter_max -= max64High;\n    uniforms.filter_softMax -= max64High;\n    uniforms.filter_max64High = max64High;\n  } else {\n    const min64High = uniforms.filter_min.map(Math.fround);\n    uniforms.filter_min = uniforms.filter_min.map((x, i) => x - min64High[i]);\n    uniforms.filter_softMin = uniforms.filter_softMin.map((x, i) => x - min64High[i]);\n    uniforms.filter_min64High = min64High;\n    const max64High = uniforms.filter_max.map(Math.fround);\n    uniforms.filter_max = uniforms.filter_max.map((x, i) => x - max64High[i]);\n    uniforms.filter_softMax = uniforms.filter_softMax.map((x, i) => x - max64High[i]);\n    uniforms.filter_max64High = max64High;\n  }\n\n  return uniforms;\n};\n\nconst inject = {\n  'vs:#main-start': \"\\n    #ifdef DATAFILTER_DOUBLE\\n      dataFilter_setValue(\\n        DATAFILTER_ATTRIB - filter_min64High + DATAFILTER_ATTRIB_64LOW,\\n        DATAFILTER_ATTRIB - filter_max64High + DATAFILTER_ATTRIB_64LOW\\n      );\\n    #else\\n      dataFilter_setValue(DATAFILTER_ATTRIB, DATAFILTER_ATTRIB);\\n    #endif\\n  \",\n  'vs:DECKGL_FILTER_SIZE': \"\\n    if (filter_transformSize) {\\n      size = size * dataFilter_value;\\n    }\\n  \",\n  'fs:DECKGL_FILTER_COLOR': \"\\n    if (dataFilter_value == 0.0) discard;\\n    if (filter_transformColor) {\\n      color.a *= dataFilter_value;\\n    }\\n  \"\n};\nexport const shaderModule = {\n  name: 'data-filter',\n  vs,\n  fs,\n  inject,\n  getUniforms\n};\nexport const shaderModule64 = {\n  name: 'data-filter-fp64',\n  vs,\n  fs,\n  inject,\n  getUniforms: getUniforms64\n};","map":{"version":3,"mappings":"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","names":["vs","fs","getUniforms","opts","extensions","filterRange","filterEnabled","filterTransformSize","filterTransformColor","filterSoftRange","uniforms","Number","isFinite","filter_min","filter_softMin","filter_softMax","filter_max","map","r","filter_enabled","filter_useSoftMargin","Boolean","filter_transformSize","filter_transformColor","getUniforms64","min64High","Math","fround","filter_min64High","max64High","filter_max64High","x","i","inject","shaderModule","name","shaderModule64"],"sources":["../../../src/data-filter/shader-module.js"],"sourcesContent":["/*\n * data filter shader module\n */\nconst vs = `\nuniform DATAFILTER_TYPE filter_min;\nuniform DATAFILTER_TYPE filter_softMin;\nuniform DATAFILTER_TYPE filter_softMax;\nuniform DATAFILTER_TYPE filter_max;\nuniform bool filter_useSoftMargin;\nuniform bool filter_enabled;\nuniform bool filter_transformSize;\n\n#ifdef NON_INSTANCED_MODEL\n  #define DATAFILTER_ATTRIB filterValues\n  #define DATAFILTER_ATTRIB_64LOW filterValues64Low\n#else\n  #define DATAFILTER_ATTRIB instanceFilterValues\n  #define DATAFILTER_ATTRIB_64LOW instanceFilterValues64Low\n#endif\n\nattribute DATAFILTER_TYPE DATAFILTER_ATTRIB;\n#ifdef DATAFILTER_DOUBLE\n  attribute DATAFILTER_TYPE DATAFILTER_ATTRIB_64LOW;\n\n  uniform DATAFILTER_TYPE filter_min64High;\n  uniform DATAFILTER_TYPE filter_max64High;\n#endif\n\nvarying float dataFilter_value;\n\nfloat dataFilter_reduceValue(float value) {\n  return value;\n}\nfloat dataFilter_reduceValue(vec2 value) {\n  return min(value.x, value.y);\n}\nfloat dataFilter_reduceValue(vec3 value) {\n  return min(min(value.x, value.y), value.z);\n}\nfloat dataFilter_reduceValue(vec4 value) {\n  return min(min(value.x, value.y), min(value.z, value.w));\n}\nvoid dataFilter_setValue(DATAFILTER_TYPE valueFromMin, DATAFILTER_TYPE valueFromMax) {\n  if (filter_enabled) {\n    if (filter_useSoftMargin) {\n      dataFilter_value = dataFilter_reduceValue(\n        smoothstep(filter_min, filter_softMin, valueFromMin) *\n        (1.0 - smoothstep(filter_softMax, filter_max, valueFromMax))\n      );\n    } else {\n      dataFilter_value = dataFilter_reduceValue(\n        step(filter_min, valueFromMin) * step(valueFromMax, filter_max)\n      );\n    }\n  } else {\n    dataFilter_value = 1.0;\n  }\n}\n`;\n\nconst fs = `\nuniform bool filter_transformColor;\nvarying float dataFilter_value;\n`;\n\nconst getUniforms = opts => {\n  if (!opts || !opts.extensions) {\n    return {};\n  }\n  const {\n    filterRange = [-1, 1],\n    filterEnabled = true,\n    filterTransformSize = true,\n    filterTransformColor = true\n  } = opts;\n  const filterSoftRange = opts.filterSoftRange || filterRange;\n\n  const uniforms = Number.isFinite(filterRange[0])\n    ? {\n        filter_min: filterRange[0],\n        filter_softMin: filterSoftRange[0],\n        filter_softMax: filterSoftRange[1],\n        filter_max: filterRange[1]\n      }\n    : {\n        filter_min: filterRange.map(r => r[0]),\n        filter_softMin: filterSoftRange.map(r => r[0]),\n        filter_softMax: filterSoftRange.map(r => r[1]),\n        filter_max: filterRange.map(r => r[1])\n      };\n  uniforms.filter_enabled = filterEnabled;\n  uniforms.filter_useSoftMargin = Boolean(opts.filterSoftRange);\n  uniforms.filter_transformSize = filterEnabled && filterTransformSize;\n  uniforms.filter_transformColor = filterEnabled && filterTransformColor;\n\n  return uniforms;\n};\n\nconst getUniforms64 = opts => {\n  if (!opts || !opts.extensions) {\n    return {};\n  }\n  const uniforms = getUniforms(opts);\n  if (Number.isFinite(uniforms.filter_min)) {\n    const min64High = Math.fround(uniforms.filter_min);\n    uniforms.filter_min -= min64High;\n    uniforms.filter_softMin -= min64High;\n    uniforms.filter_min64High = min64High;\n\n    const max64High = Math.fround(uniforms.filter_max);\n    uniforms.filter_max -= max64High;\n    uniforms.filter_softMax -= max64High;\n    uniforms.filter_max64High = max64High;\n  } else {\n    const min64High = uniforms.filter_min.map(Math.fround);\n    uniforms.filter_min = uniforms.filter_min.map((x, i) => x - min64High[i]);\n    uniforms.filter_softMin = uniforms.filter_softMin.map((x, i) => x - min64High[i]);\n    uniforms.filter_min64High = min64High;\n\n    const max64High = uniforms.filter_max.map(Math.fround);\n    uniforms.filter_max = uniforms.filter_max.map((x, i) => x - max64High[i]);\n    uniforms.filter_softMax = uniforms.filter_softMax.map((x, i) => x - max64High[i]);\n    uniforms.filter_max64High = max64High;\n  }\n  return uniforms;\n};\n\nconst inject = {\n  'vs:#main-start': `\n    #ifdef DATAFILTER_DOUBLE\n      dataFilter_setValue(\n        DATAFILTER_ATTRIB - filter_min64High + DATAFILTER_ATTRIB_64LOW,\n        DATAFILTER_ATTRIB - filter_max64High + DATAFILTER_ATTRIB_64LOW\n      );\n    #else\n      dataFilter_setValue(DATAFILTER_ATTRIB, DATAFILTER_ATTRIB);\n    #endif\n  `,\n\n  'vs:DECKGL_FILTER_SIZE': `\n    if (filter_transformSize) {\n      size = size * dataFilter_value;\n    }\n  `,\n\n  'fs:DECKGL_FILTER_COLOR': `\n    if (dataFilter_value == 0.0) discard;\n    if (filter_transformColor) {\n      color.a *= dataFilter_value;\n    }\n  `\n};\n\nexport const shaderModule = {\n  name: 'data-filter',\n  vs,\n  fs,\n  inject,\n  getUniforms\n};\n\nexport const shaderModule64 = {\n  name: 'data-filter-fp64',\n  vs,\n  fs,\n  inject,\n  getUniforms: getUniforms64\n};\n"]},"metadata":{},"sourceType":"module"}