{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { uid, assert } from '@luma.gl/webgl';\nexport var DRAW_MODE = {\n  POINTS: 0x0000,\n  LINES: 0x0001,\n  LINE_LOOP: 0x0002,\n  LINE_STRIP: 0x0003,\n  TRIANGLES: 0x0004,\n  TRIANGLE_STRIP: 0x0005,\n  TRIANGLE_FAN: 0x0006\n};\n\nvar Geometry = /*#__PURE__*/function () {\n  function Geometry() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Geometry);\n\n    var _props$id = props.id,\n        id = _props$id === void 0 ? uid('geometry') : _props$id,\n        _props$drawMode = props.drawMode,\n        drawMode = _props$drawMode === void 0 ? DRAW_MODE.TRIANGLES : _props$drawMode,\n        _props$attributes = props.attributes,\n        attributes = _props$attributes === void 0 ? {} : _props$attributes,\n        _props$indices = props.indices,\n        indices = _props$indices === void 0 ? null : _props$indices,\n        _props$vertexCount = props.vertexCount,\n        vertexCount = _props$vertexCount === void 0 ? null : _props$vertexCount;\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n\n    this._setAttributes(attributes, indices);\n\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n  }\n\n  _createClass(Geometry, [{\n    key: \"mode\",\n    get: function get() {\n      return this.drawMode;\n    }\n  }, {\n    key: \"getVertexCount\",\n    value: function getVertexCount() {\n      return this.vertexCount;\n    }\n  }, {\n    key: \"getAttributes\",\n    value: function getAttributes() {\n      return this.indices ? _objectSpread({\n        indices: this.indices\n      }, this.attributes) : this.attributes;\n    }\n  }, {\n    key: \"_print\",\n    value: function _print(attributeName) {\n      return \"Geometry \".concat(this.id, \" attribute \").concat(attributeName);\n    }\n  }, {\n    key: \"_setAttributes\",\n    value: function _setAttributes(attributes, indices) {\n      if (indices) {\n        this.indices = ArrayBuffer.isView(indices) ? {\n          value: indices,\n          size: 1\n        } : indices;\n      }\n\n      for (var attributeName in attributes) {\n        var attribute = attributes[attributeName];\n        attribute = ArrayBuffer.isView(attribute) ? {\n          value: attribute\n        } : attribute;\n        assert(ArrayBuffer.isView(attribute.value), \"\".concat(this._print(attributeName), \": must be typed array or object with value as typed array\"));\n\n        if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {\n          attribute.size = 3;\n        }\n\n        if (attributeName === 'indices') {\n          assert(!this.indices);\n          this.indices = attribute;\n        } else {\n          this.attributes[attributeName] = attribute;\n        }\n      }\n\n      if (this.indices && this.indices.isIndexed !== undefined) {\n        this.indices = Object.assign({}, this.indices);\n        delete this.indices.isIndexed;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_calculateVertexCount\",\n    value: function _calculateVertexCount(attributes, indices) {\n      if (indices) {\n        return indices.value.length;\n      }\n\n      var vertexCount = Infinity;\n\n      for (var attributeName in attributes) {\n        var attribute = attributes[attributeName];\n        var value = attribute.value,\n            size = attribute.size,\n            constant = attribute.constant;\n\n        if (!constant && value && size >= 1) {\n          vertexCount = Math.min(vertexCount, value.length / size);\n        }\n      }\n\n      assert(Number.isFinite(vertexCount));\n      return vertexCount;\n    }\n  }], [{\n    key: \"DRAW_MODE\",\n    get: function get() {\n      return DRAW_MODE;\n    }\n  }]);\n\n  return Geometry;\n}();\n\nexport { Geometry as default };","map":{"version":3,"mappings":"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","names":["uid","assert","DRAW_MODE","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","Geometry","constructor","props","id","drawMode","attributes","indices","vertexCount","userData","_setAttributes","_calculateVertexCount","getVertexCount","getAttributes","_print","attributeName","ArrayBuffer","isView","value","size","attribute","isIndexed","undefined","Object","assign","length","Infinity","constant","Math","min","Number","isFinite"],"sources":["../../../src/geometry/geometry.js"],"sourcesContent":["import {uid, assert} from '@luma.gl/webgl';\n\n// Rendering primitives - specify how to extract primitives from vertices.\n// NOTE: These are numerically identical to the corresponding WebGL/OpenGL constants\nexport const DRAW_MODE = {\n  POINTS: 0x0000, // draw single points.\n  LINES: 0x0001, // draw lines. Each vertex connects to the one after it.\n  LINE_LOOP: 0x0002, // draw lines. Each set of two vertices is treated as a separate line segment.\n  LINE_STRIP: 0x0003, // draw a connected group of line segments from the first vertex to the last\n  TRIANGLES: 0x0004, // draw triangles. Each set of three vertices creates a separate triangle.\n  TRIANGLE_STRIP: 0x0005, // draw a connected group of triangles.\n  TRIANGLE_FAN: 0x0006 // draw a connected group of triangles.\n  // Each vertex connects to the previous and the first vertex in the fan.\n};\n\nexport default class Geometry {\n  static get DRAW_MODE() {\n    return DRAW_MODE;\n  }\n\n  constructor(props = {}) {\n    const {\n      id = uid('geometry'),\n      drawMode = DRAW_MODE.TRIANGLES,\n      attributes = {},\n      indices = null,\n      vertexCount = null\n    } = props;\n\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n\n    this._setAttributes(attributes, indices);\n\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n\n    // stubRemovedMethods(this, [\n    //   'setNeedsRedraw', 'needsRedraw', 'setAttributes'\n    // ], 'Immutable');\n\n    // stubRemovedMethods(this, [\n    //   'hasAttribute', 'getAttribute', 'getArray'\n    // ], 'Use geometry.attributes and geometry.indices');\n\n    // deprecateMethods(this, ['getAttributes'])\n  }\n\n  get mode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  // Return an object with all attributes plus indices added as a field.\n  getAttributes() {\n    return this.indices ? {indices: this.indices, ...this.attributes} : this.attributes;\n  }\n\n  // PRIVATE\n\n  _print(attributeName) {\n    return `Geometry ${this.id} attribute ${attributeName}`;\n  }\n\n  // Attribute\n  // value: typed array\n  // type: indices, vertices, uvs\n  // size: elements per vertex\n  // target: WebGL buffer type (string or constant)\n  _setAttributes(attributes, indices) {\n    if (indices) {\n      this.indices = ArrayBuffer.isView(indices) ? {value: indices, size: 1} : indices;\n    }\n\n    for (const attributeName in attributes) {\n      let attribute = attributes[attributeName];\n\n      // Wrap \"unwrapped\" arrays and try to autodetect their type\n      attribute = ArrayBuffer.isView(attribute) ? {value: attribute} : attribute;\n\n      assert(\n        ArrayBuffer.isView(attribute.value),\n        `${this._print(attributeName)}: must be typed array or object with value as typed array`\n      );\n\n      if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {\n        attribute.size = 3;\n      }\n\n      // Move indices to separate field\n      if (attributeName === 'indices') {\n        assert(!this.indices);\n        this.indices = attribute;\n      } else {\n        this.attributes[attributeName] = attribute;\n      }\n    }\n\n    if (this.indices && this.indices.isIndexed !== undefined) {\n      this.indices = Object.assign({}, this.indices);\n      delete this.indices.isIndexed;\n    }\n\n    return this;\n  }\n\n  _calculateVertexCount(attributes, indices) {\n    if (indices) {\n      return indices.value.length;\n    }\n    let vertexCount = Infinity;\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const {value, size, constant} = attribute;\n      if (!constant && value && size >= 1) {\n        vertexCount = Math.min(vertexCount, value.length / size);\n      }\n    }\n\n    assert(Number.isFinite(vertexCount));\n    return vertexCount;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}