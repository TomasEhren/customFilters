{"ast":null,"code":"import Resource from './resource';\nimport Texture from './texture';\nimport Framebuffer from './framebuffer';\nimport { parseUniformName, getUniformSetter } from './uniforms';\nimport { VertexShader, FragmentShader } from './shader';\nimport ProgramConfiguration from './program-configuration';\nimport { copyUniform, checkUniformValues } from './uniforms';\nimport { isWebGL2, assertWebGL2Context, withParameters, log } from '@luma.gl/gltools';\nimport { getKey } from '../webgl-utils/constants-to-keys';\nimport { getPrimitiveDrawMode } from '../webgl-utils/attribute-utils';\nimport { assert } from '../utils/assert';\nimport { uid } from '../utils/utils';\nconst LOG_PROGRAM_PERF_PRIORITY = 4;\nconst GL_SEPARATE_ATTRIBS = 0x8c8d;\nconst V6_DEPRECATED_METHODS = ['setVertexArray', 'setAttributes', 'setBuffers', 'unsetBuffers', 'use', 'getUniformCount', 'getUniformInfo', 'getUniformLocation', 'getUniformValue', 'getVarying', 'getFragDataLocation', 'getAttachedShaders', 'getAttributeCount', 'getAttributeLocation', 'getAttributeInfo'];\nexport default class Program extends Resource {\n  constructor(gl) {\n    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(gl, props);\n    this.stubRemovedMethods('Program', 'v6.0', V6_DEPRECATED_METHODS);\n    this._isCached = false;\n    this.initialize(props);\n    Object.seal(this);\n\n    this._setId(props.id);\n  }\n\n  initialize() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      hash,\n      vs,\n      fs,\n      varyings,\n      bufferMode = GL_SEPARATE_ATTRIBS\n    } = props;\n    this.hash = hash || '';\n    this.vs = typeof vs === 'string' ? new VertexShader(this.gl, {\n      id: `${props.id}-vs`,\n      source: vs\n    }) : vs;\n    this.fs = typeof fs === 'string' ? new FragmentShader(this.gl, {\n      id: `${props.id}-fs`,\n      source: fs\n    }) : fs;\n    assert(this.vs instanceof VertexShader);\n    assert(this.fs instanceof FragmentShader);\n    this.uniforms = {};\n    this._textureUniforms = {};\n\n    if (varyings && varyings.length > 0) {\n      assertWebGL2Context(this.gl);\n      this.varyings = varyings;\n      this.gl2.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n    }\n\n    this._compileAndLink();\n\n    this._readUniformLocationsFromLinkedProgram();\n\n    this.configuration = new ProgramConfiguration(this);\n    return this.setProps(props);\n  }\n\n  delete() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (this._isCached) {\n      return this;\n    }\n\n    return super.delete(options);\n  }\n\n  setProps(props) {\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms);\n    }\n\n    return this;\n  }\n\n  draw(_ref) {\n    let {\n      logPriority,\n      drawMode = 4,\n      vertexCount,\n      offset = 0,\n      start,\n      end,\n      isIndexed = false,\n      indexType = 5123,\n      instanceCount = 0,\n      isInstanced = instanceCount > 0,\n      vertexArray = null,\n      transformFeedback,\n      framebuffer,\n      parameters = {},\n      uniforms,\n      samplers\n    } = _ref;\n\n    if (uniforms || samplers) {\n      log.deprecated('Program.draw({uniforms})', 'Program.setUniforms(uniforms)')();\n      this.setUniforms(uniforms || {});\n    }\n\n    if (log.priority >= logPriority) {\n      const fb = framebuffer ? framebuffer.id : 'default';\n      const message = `mode=${getKey(this.gl, drawMode)} verts=${vertexCount} ` + `instances=${instanceCount} indexType=${getKey(this.gl, indexType)} ` + `isInstanced=${isInstanced} isIndexed=${isIndexed} ` + `Framebuffer=${fb}`;\n      log.log(logPriority, message)();\n    }\n\n    assert(vertexArray);\n    this.gl.useProgram(this.handle);\n\n    if (!this._areTexturesRenderable() || vertexCount === 0 || isInstanced && instanceCount === 0) {\n      return false;\n    }\n\n    vertexArray.bindForDraw(vertexCount, instanceCount, () => {\n      if (framebuffer !== undefined) {\n        parameters = Object.assign({}, parameters, {\n          framebuffer\n        });\n      }\n\n      if (transformFeedback) {\n        const primitiveMode = getPrimitiveDrawMode(drawMode);\n        transformFeedback.begin(primitiveMode);\n      }\n\n      this._bindTextures();\n\n      withParameters(this.gl, parameters, () => {\n        if (isIndexed && isInstanced) {\n          this.gl2.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n        } else if (isIndexed && isWebGL2(this.gl) && !isNaN(start) && !isNaN(end)) {\n          this.gl2.drawRangeElements(drawMode, start, end, vertexCount, indexType, offset);\n        } else if (isIndexed) {\n          this.gl.drawElements(drawMode, vertexCount, indexType, offset);\n        } else if (isInstanced) {\n          this.gl2.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n        } else {\n          this.gl.drawArrays(drawMode, offset, vertexCount);\n        }\n      });\n\n      if (transformFeedback) {\n        transformFeedback.end();\n      }\n    });\n    return true;\n  }\n\n  setUniforms() {\n    let uniforms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (log.priority >= 2) {\n      checkUniformValues(uniforms, this.id, this._uniformSetters);\n    }\n\n    this.gl.useProgram(this.handle);\n\n    for (const uniformName in uniforms) {\n      const uniform = uniforms[uniformName];\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter) {\n        let value = uniform;\n        let textureUpdate = false;\n\n        if (value instanceof Framebuffer) {\n          value = value.texture;\n        }\n\n        if (value instanceof Texture) {\n          textureUpdate = this.uniforms[uniformName] !== uniform;\n\n          if (textureUpdate) {\n            if (uniformSetter.textureIndex === undefined) {\n              uniformSetter.textureIndex = this._textureIndexCounter++;\n            }\n\n            const texture = value;\n            const {\n              textureIndex\n            } = uniformSetter;\n            texture.bind(textureIndex);\n            value = textureIndex;\n            this._textureUniforms[uniformName] = texture;\n          } else {\n            value = uniformSetter.textureIndex;\n          }\n        } else if (this._textureUniforms[uniformName]) {\n          delete this._textureUniforms[uniformName];\n        }\n\n        if (uniformSetter(value) || textureUpdate) {\n          copyUniform(this.uniforms, uniformName, uniform);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  _areTexturesRenderable() {\n    let texturesRenderable = true;\n\n    for (const uniformName in this._textureUniforms) {\n      const texture = this._textureUniforms[uniformName];\n      texture.update();\n      texturesRenderable = texturesRenderable && texture.loaded;\n    }\n\n    return texturesRenderable;\n  }\n\n  _bindTextures() {\n    for (const uniformName in this._textureUniforms) {\n      const textureIndex = this._uniformSetters[uniformName].textureIndex;\n\n      this._textureUniforms[uniformName].bind(textureIndex);\n    }\n  }\n\n  _createHandle() {\n    return this.gl.createProgram();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteProgram(this.handle);\n  }\n\n  _getOptionsFromHandle(handle) {\n    const shaderHandles = this.gl.getAttachedShaders(handle);\n    const opts = {};\n\n    for (const shaderHandle of shaderHandles) {\n      const type = this.gl.getShaderParameter(this.handle, 35663);\n\n      switch (type) {\n        case 35633:\n          opts.vs = new VertexShader({\n            handle: shaderHandle\n          });\n          break;\n\n        case 35632:\n          opts.fs = new FragmentShader({\n            handle: shaderHandle\n          });\n          break;\n\n        default:\n      }\n    }\n\n    return opts;\n  }\n\n  _getParameter(pname) {\n    return this.gl.getProgramParameter(this.handle, pname);\n  }\n\n  _setId(id) {\n    if (!id) {\n      const programName = this._getName();\n\n      this.id = uid(programName);\n    }\n  }\n\n  _getName() {\n    let programName = this.vs.getName() || this.fs.getName();\n    programName = programName.replace(/shader/i, '');\n    programName = programName ? `${programName}-program` : 'program';\n    return programName;\n  }\n\n  _compileAndLink() {\n    const {\n      gl\n    } = this;\n    gl.attachShader(this.handle, this.vs.handle);\n    gl.attachShader(this.handle, this.fs.handle);\n    log.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n    gl.linkProgram(this.handle);\n    log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n\n    if (gl.debug || log.level > 0) {\n      const linked = gl.getProgramParameter(this.handle, 35714);\n\n      if (!linked) {\n        throw new Error(`Error linking: ${gl.getProgramInfoLog(this.handle)}`);\n      }\n\n      gl.validateProgram(this.handle);\n      const validated = gl.getProgramParameter(this.handle, 35715);\n\n      if (!validated) {\n        throw new Error(`Error validating: ${gl.getProgramInfoLog(this.handle)}`);\n      }\n    }\n  }\n\n  _readUniformLocationsFromLinkedProgram() {\n    const {\n      gl\n    } = this;\n    this._uniformSetters = {};\n    this._uniformCount = this._getParameter(35718);\n\n    for (let i = 0; i < this._uniformCount; i++) {\n      const info = this.gl.getActiveUniform(this.handle, i);\n      const {\n        name\n      } = parseUniformName(info.name);\n      let location = gl.getUniformLocation(this.handle, name);\n      this._uniformSetters[name] = getUniformSetter(gl, location, info);\n\n      if (info.size > 1) {\n        for (let l = 0; l < info.size; l++) {\n          location = gl.getUniformLocation(this.handle, `${name}[${l}]`);\n          this._uniformSetters[`${name}[${l}]`] = getUniformSetter(gl, location, info);\n        }\n      }\n    }\n\n    this._textureIndexCounter = 0;\n  }\n\n  getActiveUniforms(uniformIndices, pname) {\n    return this.gl2.getActiveUniforms(this.handle, uniformIndices, pname);\n  }\n\n  getUniformBlockIndex(blockName) {\n    return this.gl2.getUniformBlockIndex(this.handle, blockName);\n  }\n\n  getActiveUniformBlockParameter(blockIndex, pname) {\n    return this.gl2.getActiveUniformBlockParameter(this.handle, blockIndex, pname);\n  }\n\n  uniformBlockBinding(blockIndex, blockBinding) {\n    this.gl2.uniformBlockBinding(this.handle, blockIndex, blockBinding);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Resource","Texture","Framebuffer","parseUniformName","getUniformSetter","VertexShader","FragmentShader","ProgramConfiguration","copyUniform","checkUniformValues","isWebGL2","assertWebGL2Context","withParameters","log","getKey","getPrimitiveDrawMode","assert","uid","LOG_PROGRAM_PERF_PRIORITY","GL_SEPARATE_ATTRIBS","V6_DEPRECATED_METHODS","Program","constructor","gl","props","stubRemovedMethods","_isCached","initialize","Object","seal","_setId","id","hash","vs","fs","varyings","bufferMode","source","uniforms","_textureUniforms","length","gl2","transformFeedbackVaryings","handle","_compileAndLink","_readUniformLocationsFromLinkedProgram","configuration","setProps","delete","options","setUniforms","draw","logPriority","drawMode","vertexCount","offset","start","end","isIndexed","indexType","instanceCount","isInstanced","vertexArray","transformFeedback","framebuffer","parameters","samplers","deprecated","priority","fb","message","useProgram","_areTexturesRenderable","bindForDraw","undefined","assign","primitiveMode","begin","_bindTextures","drawElementsInstanced","isNaN","drawRangeElements","drawElements","drawArraysInstanced","drawArrays","_uniformSetters","uniformName","uniform","uniformSetter","value","textureUpdate","texture","textureIndex","_textureIndexCounter","bind","texturesRenderable","update","loaded","_createHandle","createProgram","_deleteHandle","deleteProgram","_getOptionsFromHandle","shaderHandles","getAttachedShaders","opts","shaderHandle","type","getShaderParameter","_getParameter","pname","getProgramParameter","programName","_getName","getName","replace","attachShader","time","linkProgram","timeEnd","debug","level","linked","Error","getProgramInfoLog","validateProgram","validated","_uniformCount","i","info","getActiveUniform","name","location","getUniformLocation","size","l","getActiveUniforms","uniformIndices","getUniformBlockIndex","blockName","getActiveUniformBlockParameter","blockIndex","uniformBlockBinding","blockBinding"],"sources":["../../../src/classes/program.js"],"sourcesContent":["import GL from '@luma.gl/constants';\n\nimport Resource from './resource';\nimport Texture from './texture';\nimport Framebuffer from './framebuffer';\nimport {parseUniformName, getUniformSetter} from './uniforms';\nimport {VertexShader, FragmentShader} from './shader';\nimport ProgramConfiguration from './program-configuration';\nimport {copyUniform, checkUniformValues} from './uniforms';\n\nimport {isWebGL2, assertWebGL2Context, withParameters, log} from '@luma.gl/gltools';\nimport {getKey} from '../webgl-utils/constants-to-keys';\nimport {getPrimitiveDrawMode} from '../webgl-utils/attribute-utils';\nimport {assert} from '../utils/assert';\nimport {uid} from '../utils/utils';\n\nconst LOG_PROGRAM_PERF_PRIORITY = 4;\n\nconst GL_SEPARATE_ATTRIBS = 0x8c8d;\n\nconst V6_DEPRECATED_METHODS = [\n  'setVertexArray',\n  'setAttributes',\n  'setBuffers',\n  'unsetBuffers',\n\n  'use',\n  'getUniformCount',\n  'getUniformInfo',\n  'getUniformLocation',\n  'getUniformValue',\n\n  'getVarying',\n  'getFragDataLocation',\n  'getAttachedShaders',\n  'getAttributeCount',\n  'getAttributeLocation',\n  'getAttributeInfo'\n];\n\nexport default class Program extends Resource {\n  constructor(gl, props = {}) {\n    super(gl, props);\n\n    this.stubRemovedMethods('Program', 'v6.0', V6_DEPRECATED_METHODS);\n\n    // Experimental flag to avoid deleting Program object while it is cached\n    this._isCached = false;\n\n    this.initialize(props);\n\n    Object.seal(this);\n\n    this._setId(props.id);\n  }\n\n  initialize(props = {}) {\n    const {hash, vs, fs, varyings, bufferMode = GL_SEPARATE_ATTRIBS} = props;\n\n    this.hash = hash || ''; // Used by ProgramManager\n\n    // Create shaders if needed\n    this.vs =\n      typeof vs === 'string' ? new VertexShader(this.gl, {id: `${props.id}-vs`, source: vs}) : vs;\n    this.fs =\n      typeof fs === 'string' ? new FragmentShader(this.gl, {id: `${props.id}-fs`, source: fs}) : fs;\n    assert(this.vs instanceof VertexShader);\n    assert(this.fs instanceof FragmentShader);\n\n    // uniforms\n    this.uniforms = {};\n\n    this._textureUniforms = {};\n\n    // Setup varyings if supplied\n    if (varyings && varyings.length > 0) {\n      assertWebGL2Context(this.gl);\n      this.varyings = varyings;\n      this.gl2.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n    }\n\n    this._compileAndLink();\n    this._readUniformLocationsFromLinkedProgram();\n    this.configuration = new ProgramConfiguration(this);\n\n    return this.setProps(props);\n  }\n\n  delete(options = {}) {\n    if (this._isCached) {\n      // This object is cached, do not delete\n      return this;\n    }\n    return super.delete(options);\n  }\n\n  setProps(props) {\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms);\n    }\n    return this;\n  }\n\n  // A good thing about the WebGL API is that there are so many ways to draw things ;)\n  // This function unifies those ways into a single call using common parameters with sane defaults\n  draw({\n    logPriority, // Probe log priority, enables Model to do more integrated logging\n\n    drawMode = GL.TRIANGLES,\n    vertexCount,\n    offset = 0,\n    start,\n    end,\n    isIndexed = false,\n    indexType = GL.UNSIGNED_SHORT,\n    instanceCount = 0,\n    isInstanced = instanceCount > 0,\n\n    vertexArray = null,\n    transformFeedback,\n    framebuffer,\n    parameters = {},\n\n    // Deprecated\n    uniforms,\n    samplers\n  }) {\n    if (uniforms || samplers) {\n      // DEPRECATED: v7.0 (deprecated earlier but warning not properly implemented)\n      log.deprecated('Program.draw({uniforms})', 'Program.setUniforms(uniforms)')();\n      this.setUniforms(uniforms || {});\n    }\n\n    if (log.priority >= logPriority) {\n      const fb = framebuffer ? framebuffer.id : 'default';\n      const message =\n        `mode=${getKey(this.gl, drawMode)} verts=${vertexCount} ` +\n        `instances=${instanceCount} indexType=${getKey(this.gl, indexType)} ` +\n        `isInstanced=${isInstanced} isIndexed=${isIndexed} ` +\n        `Framebuffer=${fb}`;\n      log.log(logPriority, message)();\n    }\n\n    // TODO - move vertex array binding and transform feedback binding to withParameters?\n    assert(vertexArray);\n\n    this.gl.useProgram(this.handle);\n\n    if (\n      // Note: async textures set as uniforms might still be loading.\n      // Now that all uniforms have been updated, check if any texture\n      // in the uniforms is not yet initialized, then we don't draw\n      !this._areTexturesRenderable() ||\n      // Avoid WebGL draw call when not rendering any data\n      vertexCount === 0 ||\n      (isInstanced && instanceCount === 0)\n    ) {\n      return false;\n    }\n\n    vertexArray.bindForDraw(vertexCount, instanceCount, () => {\n      if (framebuffer !== undefined) {\n        parameters = Object.assign({}, parameters, {framebuffer});\n      }\n\n      if (transformFeedback) {\n        const primitiveMode = getPrimitiveDrawMode(drawMode);\n        transformFeedback.begin(primitiveMode);\n      }\n\n      this._bindTextures();\n\n      withParameters(this.gl, parameters, () => {\n        // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension\n        if (isIndexed && isInstanced) {\n          this.gl2.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n        } else if (isIndexed && isWebGL2(this.gl) && !isNaN(start) && !isNaN(end)) {\n          this.gl2.drawRangeElements(drawMode, start, end, vertexCount, indexType, offset);\n        } else if (isIndexed) {\n          this.gl.drawElements(drawMode, vertexCount, indexType, offset);\n        } else if (isInstanced) {\n          this.gl2.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n        } else {\n          this.gl.drawArrays(drawMode, offset, vertexCount);\n        }\n      });\n\n      if (transformFeedback) {\n        transformFeedback.end();\n      }\n    });\n\n    return true;\n  }\n\n  setUniforms(uniforms = {}) {\n    if (log.priority >= 2) {\n      checkUniformValues(uniforms, this.id, this._uniformSetters);\n    }\n\n    this.gl.useProgram(this.handle);\n\n    for (const uniformName in uniforms) {\n      const uniform = uniforms[uniformName];\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter) {\n        let value = uniform;\n        let textureUpdate = false;\n\n        if (value instanceof Framebuffer) {\n          value = value.texture;\n        }\n        if (value instanceof Texture) {\n          textureUpdate = this.uniforms[uniformName] !== uniform;\n\n          if (textureUpdate) {\n            // eslint-disable-next-line max-depth\n            if (uniformSetter.textureIndex === undefined) {\n              uniformSetter.textureIndex = this._textureIndexCounter++;\n            }\n\n            // Bind texture to index\n            const texture = value;\n            const {textureIndex} = uniformSetter;\n\n            texture.bind(textureIndex);\n            value = textureIndex;\n\n            this._textureUniforms[uniformName] = texture;\n          } else {\n            value = uniformSetter.textureIndex;\n          }\n        } else if (this._textureUniforms[uniformName]) {\n          delete this._textureUniforms[uniformName];\n        }\n\n        // NOTE(Tarek): uniformSetter returns whether\n        //   value had to be updated or not.\n        if (uniformSetter(value) || textureUpdate) {\n          copyUniform(this.uniforms, uniformName, uniform);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  // Checks if all texture-values uniforms are renderable (i.e. loaded)\n  // Update a texture if needed (e.g. from video)\n  // Note: This is currently done before every draw call\n  _areTexturesRenderable() {\n    let texturesRenderable = true;\n\n    for (const uniformName in this._textureUniforms) {\n      const texture = this._textureUniforms[uniformName];\n      texture.update();\n      texturesRenderable = texturesRenderable && texture.loaded;\n    }\n\n    return texturesRenderable;\n  }\n\n  // Binds textures\n  // Note: This is currently done before every draw call\n  _bindTextures() {\n    for (const uniformName in this._textureUniforms) {\n      const textureIndex = this._uniformSetters[uniformName].textureIndex;\n      this._textureUniforms[uniformName].bind(textureIndex);\n    }\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createProgram();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteProgram(this.handle);\n  }\n\n  // Extract opts needed to initialize a `Program` from an independently created WebGLProgram handle\n  _getOptionsFromHandle(handle) {\n    const shaderHandles = this.gl.getAttachedShaders(handle);\n    const opts = {};\n    for (const shaderHandle of shaderHandles) {\n      const type = this.gl.getShaderParameter(this.handle, GL.SHADER_TYPE);\n      switch (type) {\n        case GL.VERTEX_SHADER:\n          // @ts-ignore\n          opts.vs = new VertexShader({handle: shaderHandle});\n          break;\n        case GL.FRAGMENT_SHADER:\n          // @ts-ignore\n          opts.fs = new FragmentShader({handle: shaderHandle});\n          break;\n        default:\n      }\n    }\n    return opts;\n  }\n\n  _getParameter(pname) {\n    return this.gl.getProgramParameter(this.handle, pname);\n  }\n\n  // If program is not named, name it after shader names\n  // TODO - this.id will already have been initialized\n  _setId(id) {\n    if (!id) {\n      const programName = this._getName();\n      this.id = uid(programName);\n    }\n  }\n\n  // Generate a default name for the program based on names of the shaders\n  _getName() {\n    let programName = this.vs.getName() || this.fs.getName();\n    programName = programName.replace(/shader/i, '');\n    programName = programName ? `${programName}-program` : 'program';\n    return programName;\n  }\n\n  _compileAndLink() {\n    const {gl} = this;\n    gl.attachShader(this.handle, this.vs.handle);\n    gl.attachShader(this.handle, this.fs.handle);\n    log.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n    gl.linkProgram(this.handle);\n    log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n\n    // Avoid checking program linking error in production\n    // @ts-ignore\n    if (gl.debug || log.level > 0) {\n      const linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n      if (!linked) {\n        throw new Error(`Error linking: ${gl.getProgramInfoLog(this.handle)}`);\n      }\n\n      gl.validateProgram(this.handle);\n      const validated = gl.getProgramParameter(this.handle, gl.VALIDATE_STATUS);\n      if (!validated) {\n        throw new Error(`Error validating: ${gl.getProgramInfoLog(this.handle)}`);\n      }\n    }\n  }\n\n  // query uniform locations and build name to setter map.\n  // TODO - This overlaps with ProgramConfiguration?\n  _readUniformLocationsFromLinkedProgram() {\n    const {gl} = this;\n    this._uniformSetters = {};\n    this._uniformCount = this._getParameter(GL.ACTIVE_UNIFORMS);\n    for (let i = 0; i < this._uniformCount; i++) {\n      const info = this.gl.getActiveUniform(this.handle, i);\n      const {name} = parseUniformName(info.name);\n      let location = gl.getUniformLocation(this.handle, name);\n      this._uniformSetters[name] = getUniformSetter(gl, location, info);\n      if (info.size > 1) {\n        for (let l = 0; l < info.size; l++) {\n          location = gl.getUniformLocation(this.handle, `${name}[${l}]`);\n          this._uniformSetters[`${name}[${l}]`] = getUniformSetter(gl, location, info);\n        }\n      }\n    }\n    this._textureIndexCounter = 0;\n  }\n\n  // TO BE REMOVED in v7?\n\n  // Rretrieves information about active uniforms identifed by their indices (`uniformIndices`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniforms\n  getActiveUniforms(uniformIndices, pname) {\n    return this.gl2.getActiveUniforms(this.handle, uniformIndices, pname);\n  }\n\n  // Retrieves the index of a uniform block\n  getUniformBlockIndex(blockName) {\n    return this.gl2.getUniformBlockIndex(this.handle, blockName);\n  }\n\n  // Retrieves information about an active uniform block (`blockIndex`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter\n  getActiveUniformBlockParameter(blockIndex, pname) {\n    return this.gl2.getActiveUniformBlockParameter(this.handle, blockIndex, pname);\n  }\n\n  // Binds a uniform block (`blockIndex`) to a specific binding point (`blockBinding`)\n  uniformBlockBinding(blockIndex, blockBinding) {\n    this.gl2.uniformBlockBinding(this.handle, blockIndex, blockBinding);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}