{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { classifyRings, project, readFeature } from '../../helpers/binary-util-functions';\nvar endPos;\nvar cmd;\nvar cmdLen;\nvar length;\nvar x;\nvar y;\nvar i;\nexport var TEST_EXPORTS = {\n  classifyRings: classifyRings\n};\n\nvar VectorTileFeature = /*#__PURE__*/function () {\n  function VectorTileFeature(pbf, end, extent, keys, values, geometryInfo) {\n    _classCallCheck(this, VectorTileFeature);\n\n    _defineProperty(this, \"properties\", void 0);\n\n    _defineProperty(this, \"extent\", void 0);\n\n    _defineProperty(this, \"type\", void 0);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"_pbf\", void 0);\n\n    _defineProperty(this, \"_geometry\", void 0);\n\n    _defineProperty(this, \"_keys\", void 0);\n\n    _defineProperty(this, \"_values\", void 0);\n\n    _defineProperty(this, \"_geometryInfo\", void 0);\n\n    this.properties = {};\n    this.extent = extent;\n    this.type = 0;\n    this.id = null;\n    this._pbf = pbf;\n    this._geometry = -1;\n    this._keys = keys;\n    this._values = values;\n    this._geometryInfo = geometryInfo;\n    pbf.readFields(readFeature, this, end);\n  }\n\n  _createClass(VectorTileFeature, [{\n    key: \"loadGeometry\",\n    value: function loadGeometry() {\n      var pbf = this._pbf;\n      pbf.pos = this._geometry;\n      endPos = pbf.readVarint() + pbf.pos;\n      cmd = 1;\n      length = 0;\n      x = 0;\n      y = 0;\n      i = 0;\n      var indices = [];\n      var data = [];\n\n      while (pbf.pos < endPos) {\n        if (length <= 0) {\n          cmdLen = pbf.readVarint();\n          cmd = cmdLen & 0x7;\n          length = cmdLen >> 3;\n        }\n\n        length--;\n\n        if (cmd === 1 || cmd === 2) {\n          x += pbf.readSVarint();\n          y += pbf.readSVarint();\n\n          if (cmd === 1) {\n            indices.push(i);\n          }\n\n          data.push(x, y);\n          i += 2;\n        } else if (cmd === 7) {\n          if (i > 0) {\n            var start = indices[indices.length - 1];\n            data.push(data[start], data[start + 1]);\n            i += 2;\n          }\n        } else {\n          throw new Error(\"unknown command \".concat(cmd));\n        }\n      }\n\n      return {\n        data: data,\n        indices: indices\n      };\n    }\n  }, {\n    key: \"_toBinaryCoordinates\",\n    value: function _toBinaryCoordinates(transform) {\n      var geom = this.loadGeometry();\n      var geometry;\n      transform(geom.data, this);\n      var coordLength = 2;\n\n      switch (this.type) {\n        case 1:\n          this._geometryInfo.pointFeaturesCount++;\n          this._geometryInfo.pointPositionsCount += geom.indices.length;\n          geometry = _objectSpread({\n            type: 'Point'\n          }, geom);\n          break;\n\n        case 2:\n          this._geometryInfo.lineFeaturesCount++;\n          this._geometryInfo.linePathsCount += geom.indices.length;\n          this._geometryInfo.linePositionsCount += geom.data.length / coordLength;\n          geometry = _objectSpread({\n            type: 'LineString'\n          }, geom);\n          break;\n\n        case 3:\n          geometry = classifyRings(geom);\n          this._geometryInfo.polygonFeaturesCount++;\n          this._geometryInfo.polygonObjectsCount += geometry.indices.length;\n\n          var _iterator = _createForOfIteratorHelper(geometry.indices),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var indices = _step.value;\n              this._geometryInfo.polygonRingsCount += indices.length;\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          this._geometryInfo.polygonPositionsCount += geometry.data.length / coordLength;\n          break;\n\n        default:\n          throw new Error(\"Invalid geometry type: \".concat(this.type));\n      }\n\n      var result = {\n        type: 'Feature',\n        geometry: geometry,\n        properties: this.properties\n      };\n\n      if (this.id !== null) {\n        result.id = this.id;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"toBinaryCoordinates\",\n    value: function toBinaryCoordinates(options) {\n      if (typeof options === 'function') {\n        return this._toBinaryCoordinates(options);\n      }\n\n      var x = options.x,\n          y = options.y,\n          z = options.z;\n      var size = this.extent * Math.pow(2, z);\n      var x0 = this.extent * x;\n      var y0 = this.extent * y;\n      return this._toBinaryCoordinates(function (data) {\n        return project(data, x0, y0, size);\n      });\n    }\n  }]);\n\n  return VectorTileFeature;\n}();\n\nexport { VectorTileFeature as default };","map":{"version":3,"mappings":"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","names":["classifyRings","project","readFeature","endPos","cmd","cmdLen","length","x","y","i","TEST_EXPORTS","VectorTileFeature","constructor","pbf","end","extent","keys","values","geometryInfo","_defineProperty","properties","type","id","_pbf","_geometry","_keys","_values","_geometryInfo","readFields","loadGeometry","pos","readVarint","indices","data","readSVarint","push","start","Error","_toBinaryCoordinates","transform","geom","geometry","coordLength","pointFeaturesCount","pointPositionsCount","lineFeaturesCount","linePathsCount","linePositionsCount","polygonFeaturesCount","polygonObjectsCount","polygonRingsCount","polygonPositionsCount","result","toBinaryCoordinates","options","z","size","Math","pow","x0","y0"],"sources":["../../../../src/lib/binary-vector-tile/vector-tile-feature.ts"],"sourcesContent":["// This code is forked from https://github.com/mapbox/vector-tile-js under BSD 3-clause license.\n\nimport Protobuf from 'pbf';\nimport {FlatFeature, FlatIndexedGeometry, GeojsonGeometryInfo} from '@loaders.gl/schema';\nimport {classifyRings, project, readFeature} from '../../helpers/binary-util-functions';\n\n// Reduce GC by reusing variables\nlet endPos: number;\nlet cmd: number;\nlet cmdLen: number;\nlet length: number;\nlet x: number;\nlet y: number;\nlet i: number;\n\nexport const TEST_EXPORTS = {\n  classifyRings\n};\n\nexport default class VectorTileFeature {\n  properties: {[x: string]: string | number | boolean | null};\n  extent: any;\n  type: number;\n  id: number | null;\n  _pbf: Protobuf;\n  _geometry: number;\n  _keys: string[];\n  _values: (string | number | boolean | null)[];\n  _geometryInfo: GeojsonGeometryInfo;\n\n  // eslint-disable-next-line max-params\n  constructor(\n    pbf: Protobuf,\n    end: number,\n    extent: any,\n    keys: string[],\n    values: (string | number | boolean | null)[],\n    geometryInfo: GeojsonGeometryInfo\n  ) {\n    // Public\n    this.properties = {};\n    this.extent = extent;\n    this.type = 0;\n    this.id = null;\n\n    // Private\n    this._pbf = pbf;\n    this._geometry = -1;\n    this._keys = keys;\n    this._values = values;\n    this._geometryInfo = geometryInfo;\n\n    pbf.readFields(readFeature, this, end);\n  }\n\n  // eslint-disable-next-line complexity, max-statements\n  loadGeometry(): FlatIndexedGeometry {\n    const pbf = this._pbf;\n    pbf.pos = this._geometry;\n\n    endPos = pbf.readVarint() + pbf.pos;\n    cmd = 1;\n    length = 0;\n    x = 0;\n    y = 0;\n    i = 0;\n\n    // Note: I attempted to replace the `data` array with a\n    // Float32Array, but performance was worse, both using\n    // `set()` and direct index access. Also, we cannot\n    // know how large the buffer should be, so it would\n    // increase memory usage\n    const indices: number[] = []; // Indices where geometries start\n    const data: number[] = []; // Flat array of coordinate data\n\n    while (pbf.pos < endPos) {\n      if (length <= 0) {\n        cmdLen = pbf.readVarint();\n        cmd = cmdLen & 0x7;\n        length = cmdLen >> 3;\n      }\n\n      length--;\n\n      if (cmd === 1 || cmd === 2) {\n        x += pbf.readSVarint();\n        y += pbf.readSVarint();\n\n        if (cmd === 1) {\n          // New line\n          indices.push(i);\n        }\n        data.push(x, y);\n        i += 2;\n      } else if (cmd === 7) {\n        // Workaround for https://github.com/mapbox/mapnik-vector-tile/issues/90\n        if (i > 0) {\n          const start = indices[indices.length - 1]; // start index of polygon\n          data.push(data[start], data[start + 1]); // closePolygon\n          i += 2;\n        }\n      } else {\n        throw new Error(`unknown command ${cmd}`);\n      }\n    }\n\n    return {data, indices};\n  }\n\n  /**\n   *\n   * @param transform\n   * @returns result\n   */\n  _toBinaryCoordinates(transform) {\n    // Expands the protobuf data to an intermediate Flat GeoJSON\n    // data format, which maps closely to the binary data buffers.\n    // It is similar to GeoJSON, but rather than storing the coordinates\n    // in multidimensional arrays, we have a 1D `data` with all the\n    // coordinates, and then index into this using the `indices`\n    // parameter, e.g.\n    //\n    // geometry: {\n    //   type: 'Point', data: [1,2], indices: [0]\n    // }\n    // geometry: {\n    //   type: 'LineString', data: [1,2,3,4,...], indices: [0]\n    // }\n    // geometry: {\n    //   type: 'Polygon', data: [1,2,3,4,...], indices: [[0, 2]]\n    // }\n    // Thus the indices member lets us look up the relevant range\n    // from the data array.\n    // The Multi* versions of the above types share the same data\n    // structure, just with multiple elements in the indices array\n    const geom = this.loadGeometry();\n    let geometry;\n\n    // Apply the supplied transformation to data\n    transform(geom.data, this);\n\n    const coordLength = 2;\n\n    // eslint-disable-next-line default-case\n    switch (this.type) {\n      case 1: // Point\n        this._geometryInfo.pointFeaturesCount++;\n        this._geometryInfo.pointPositionsCount += geom.indices.length;\n        geometry = {type: 'Point', ...geom};\n        break;\n\n      case 2: // LineString\n        this._geometryInfo.lineFeaturesCount++;\n        this._geometryInfo.linePathsCount += geom.indices.length;\n        this._geometryInfo.linePositionsCount += geom.data.length / coordLength;\n        geometry = {type: 'LineString', ...geom};\n        break;\n\n      case 3: // Polygon\n        geometry = classifyRings(geom);\n\n        // Unlike Point & LineString geom.indices is a 2D array, thanks\n        // to the classifyRings method\n        this._geometryInfo.polygonFeaturesCount++;\n        this._geometryInfo.polygonObjectsCount += geometry.indices.length;\n\n        for (const indices of geometry.indices) {\n          this._geometryInfo.polygonRingsCount += indices.length;\n        }\n        this._geometryInfo.polygonPositionsCount += geometry.data.length / coordLength;\n\n        break;\n      default:\n        throw new Error(`Invalid geometry type: ${this.type}`);\n    }\n\n    const result: FlatFeature = {type: 'Feature', geometry, properties: this.properties};\n\n    if (this.id !== null) {\n      result.id = this.id;\n    }\n\n    return result;\n  }\n\n  toBinaryCoordinates(\n    options: {x: number; y: number; z: number} | ((data: number[], feature: {extent: any}) => void)\n  ): FlatFeature {\n    if (typeof options === 'function') {\n      return this._toBinaryCoordinates(options);\n    }\n    const {x, y, z} = options;\n    const size = this.extent * Math.pow(2, z);\n    const x0 = this.extent * x;\n    const y0 = this.extent * y;\n\n    return this._toBinaryCoordinates((data: number[]) => project(data, x0, y0, size));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}