{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nexport function getEmptyPickingInfo(_ref) {\n  var pickInfo = _ref.pickInfo,\n      viewports = _ref.viewports,\n      pixelRatio = _ref.pixelRatio,\n      x = _ref.x,\n      y = _ref.y,\n      z = _ref.z;\n  var pickedViewport = viewports[0];\n\n  if (viewports.length > 1) {\n    pickedViewport = getViewportFromCoordinates((pickInfo === null || pickInfo === void 0 ? void 0 : pickInfo.pickedViewports) || viewports, {\n      x: x,\n      y: y\n    });\n  }\n\n  var coordinate = pickedViewport && pickedViewport.unproject([x - pickedViewport.x, y - pickedViewport.y, z]);\n  return {\n    color: null,\n    layer: null,\n    viewport: pickedViewport,\n    index: -1,\n    picked: false,\n    x: x,\n    y: y,\n    pixel: [x, y],\n    coordinate: coordinate,\n    devicePixel: pickInfo && 'pickedX' in pickInfo ? [pickInfo.pickedX, pickInfo.pickedY] : null,\n    pixelRatio: pixelRatio\n  };\n}\nexport function processPickInfo(opts) {\n  var pickInfo = opts.pickInfo,\n      lastPickedInfo = opts.lastPickedInfo,\n      mode = opts.mode,\n      layers = opts.layers;\n  var pickedColor = pickInfo.pickedColor,\n      pickedLayer = pickInfo.pickedLayer,\n      pickedObjectIndex = pickInfo.pickedObjectIndex;\n  var affectedLayers = pickedLayer ? [pickedLayer] : [];\n\n  if (mode === 'hover') {\n    var lastPickedObjectIndex = lastPickedInfo.index;\n    var lastPickedLayerId = lastPickedInfo.layerId;\n    var pickedLayerId = pickedLayer && pickedLayer.props.id;\n\n    if (pickedLayerId !== lastPickedLayerId || pickedObjectIndex !== lastPickedObjectIndex) {\n      if (pickedLayerId !== lastPickedLayerId) {\n        var lastPickedLayer = layers.find(function (layer) {\n          return layer.props.id === lastPickedLayerId;\n        });\n\n        if (lastPickedLayer) {\n          affectedLayers.unshift(lastPickedLayer);\n        }\n      }\n\n      lastPickedInfo.layerId = pickedLayerId;\n      lastPickedInfo.index = pickedObjectIndex;\n      lastPickedInfo.info = null;\n    }\n  }\n\n  var baseInfo = getEmptyPickingInfo(opts);\n  var infos = new Map();\n  infos.set(null, baseInfo);\n  affectedLayers.forEach(function (layer) {\n    var info = _objectSpread({}, baseInfo);\n\n    if (layer === pickedLayer) {\n      info.color = pickedColor;\n      info.index = pickedObjectIndex;\n      info.picked = true;\n    }\n\n    info = getLayerPickingInfo({\n      layer: layer,\n      info: info,\n      mode: mode\n    });\n\n    if (layer === pickedLayer && mode === 'hover') {\n      lastPickedInfo.info = info;\n    }\n\n    infos.set(info.layer.id, info);\n\n    if (mode === 'hover') {\n      info.layer.updateAutoHighlight(info);\n    }\n  });\n  return infos;\n}\nexport function getLayerPickingInfo(_ref2) {\n  var layer = _ref2.layer,\n      info = _ref2.info,\n      mode = _ref2.mode;\n\n  while (layer && info) {\n    var sourceLayer = info.layer || null;\n    info.sourceLayer = sourceLayer;\n    info.layer = layer;\n    info = layer.getPickingInfo({\n      info: info,\n      mode: mode,\n      sourceLayer: sourceLayer\n    });\n    layer = layer.parent;\n  }\n\n  return info;\n}\n\nfunction getViewportFromCoordinates(viewports, pixel) {\n  for (var i = viewports.length - 1; i >= 0; i--) {\n    var viewport = viewports[i];\n\n    if (viewport.containsPixel(pixel)) {\n      return viewport;\n    }\n  }\n\n  return viewports[0];\n}","map":{"version":3,"mappings":"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","names":["getEmptyPickingInfo","pickInfo","viewports","pixelRatio","x","y","z","pickedViewport","length","getViewportFromCoordinates","pickedViewports","coordinate","unproject","color","layer","viewport","index","picked","pixel","devicePixel","pickedX","pickedY","processPickInfo","opts","lastPickedInfo","mode","layers","pickedColor","pickedLayer","pickedObjectIndex","affectedLayers","lastPickedObjectIndex","lastPickedLayerId","layerId","pickedLayerId","props","id","lastPickedLayer","find","unshift","info","baseInfo","infos","Map","set","forEach","getLayerPickingInfo","updateAutoHighlight","sourceLayer","getPickingInfo","parent","i","containsPixel"],"sources":["../../../../src/lib/picking/pick-info.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Even if nothing gets picked, we need to expose some information of the picking action:\n// x, y, coordinates etc.\nexport function getEmptyPickingInfo({pickInfo, viewports, pixelRatio, x, y, z}) {\n  // If more than one viewports are used in the picking pass, locate the viewport that\n  // drew the picked pixel\n  let pickedViewport = viewports[0];\n  if (viewports.length > 1) {\n    // Find the viewport that contain the picked pixel\n    pickedViewport = getViewportFromCoordinates(pickInfo?.pickedViewports || viewports, {x, y});\n  }\n  const coordinate =\n    pickedViewport && pickedViewport.unproject([x - pickedViewport.x, y - pickedViewport.y, z]);\n\n  return {\n    color: null,\n    layer: null,\n    viewport: pickedViewport,\n    index: -1,\n    picked: false,\n    x,\n    y,\n    pixel: [x, y],\n    coordinate,\n    devicePixel: pickInfo && 'pickedX' in pickInfo ? [pickInfo.pickedX, pickInfo.pickedY] : null,\n    pixelRatio\n  };\n}\n\n/* eslint-disable max-depth */\nexport function processPickInfo(opts) {\n  const {pickInfo, lastPickedInfo, mode, layers} = opts;\n  const {pickedColor, pickedLayer, pickedObjectIndex} = pickInfo;\n\n  const affectedLayers = pickedLayer ? [pickedLayer] : [];\n\n  if (mode === 'hover') {\n    // only invoke onHover events if picked object has changed\n    const lastPickedObjectIndex = lastPickedInfo.index;\n    const lastPickedLayerId = lastPickedInfo.layerId;\n    const pickedLayerId = pickedLayer && pickedLayer.props.id;\n\n    // proceed only if picked object changed\n    if (pickedLayerId !== lastPickedLayerId || pickedObjectIndex !== lastPickedObjectIndex) {\n      if (pickedLayerId !== lastPickedLayerId) {\n        // We cannot store a ref to lastPickedLayer in the context because\n        // the state of an outdated layer is no longer valid\n        // and the props may have changed\n        const lastPickedLayer = layers.find(layer => layer.props.id === lastPickedLayerId);\n        if (lastPickedLayer) {\n          // Let leave event fire before enter event\n          affectedLayers.unshift(lastPickedLayer);\n        }\n      }\n\n      // Update layer manager context\n      lastPickedInfo.layerId = pickedLayerId;\n      lastPickedInfo.index = pickedObjectIndex;\n      lastPickedInfo.info = null;\n    }\n  }\n\n  const baseInfo = getEmptyPickingInfo(opts);\n\n  // Use a Map to store all picking infos.\n  // The following two forEach loops are the result of\n  // https://github.com/visgl/deck.gl/issues/443\n  // Please be very careful when changing this pattern\n  const infos = new Map();\n\n  // Make sure infos always contain something even if no layer is affected\n  infos.set(null, baseInfo);\n\n  affectedLayers.forEach(layer => {\n    let info = {...baseInfo};\n\n    if (layer === pickedLayer) {\n      info.color = pickedColor;\n      info.index = pickedObjectIndex;\n      info.picked = true;\n    }\n\n    info = getLayerPickingInfo({layer, info, mode});\n\n    if (layer === pickedLayer && mode === 'hover') {\n      lastPickedInfo.info = info;\n    }\n\n    // This guarantees that there will be only one copy of info for\n    // one composite layer\n    infos.set(info.layer.id, info);\n\n    if (mode === 'hover') {\n      info.layer.updateAutoHighlight(info);\n    }\n  });\n\n  return infos;\n}\n\n// Walk up the layer composite chain to populate the info object\nexport function getLayerPickingInfo({layer, info, mode}) {\n  while (layer && info) {\n    // For a composite layer, sourceLayer will point to the sublayer\n    // where the event originates from.\n    // It provides additional context for the composite layer's\n    // getPickingInfo() method to populate the info object\n    const sourceLayer = info.layer || null;\n    info.sourceLayer = sourceLayer;\n    info.layer = layer;\n    // layer.pickLayer() function requires a non-null ```layer.state```\n    // object to function properly. So the layer referenced here\n    // must be the \"current\" layer, not an \"out-dated\" / \"invalidated\" layer\n    info = layer.getPickingInfo({info, mode, sourceLayer});\n    layer = layer.parent;\n  }\n  return info;\n}\n\n// Indentifies which viewport, if any corresponds to x and y\n// If multiple viewports contain the target pixel, last viewport drawn is returend\n// Returns first viewport if no match\nfunction getViewportFromCoordinates(viewports, pixel) {\n  // find the last viewport that contains the pixel\n  for (let i = viewports.length - 1; i >= 0; i--) {\n    const viewport = viewports[i];\n    if (viewport.containsPixel(pixel)) {\n      return viewport;\n    }\n  }\n  return viewports[0];\n}\n"]},"metadata":{},"sourceType":"module"}