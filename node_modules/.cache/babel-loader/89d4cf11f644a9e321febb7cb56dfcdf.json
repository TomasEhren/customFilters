{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { clamp } from '@math.gl/core';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport { mod } from '../utils/math-utils';\nvar DEFAULT_STATE = {\n  rotationX: 0,\n  rotationOrbit: 0,\n  zoom: 0,\n  target: [0, 0, 0],\n  minRotationX: -90,\n  maxRotationX: 90,\n  minZoom: -Infinity,\n  maxZoom: Infinity\n};\nexport var OrbitState = /*#__PURE__*/function (_ViewState) {\n  _inherits(OrbitState, _ViewState);\n\n  var _super = _createSuper(OrbitState);\n\n  function OrbitState(_ref) {\n    var _this;\n\n    var makeViewport = _ref.makeViewport,\n        width = _ref.width,\n        height = _ref.height,\n        _ref$rotationX = _ref.rotationX,\n        rotationX = _ref$rotationX === void 0 ? DEFAULT_STATE.rotationX : _ref$rotationX,\n        _ref$rotationOrbit = _ref.rotationOrbit,\n        rotationOrbit = _ref$rotationOrbit === void 0 ? DEFAULT_STATE.rotationOrbit : _ref$rotationOrbit,\n        _ref$target = _ref.target,\n        target = _ref$target === void 0 ? DEFAULT_STATE.target : _ref$target,\n        _ref$zoom = _ref.zoom,\n        zoom = _ref$zoom === void 0 ? DEFAULT_STATE.zoom : _ref$zoom,\n        _ref$minRotationX = _ref.minRotationX,\n        minRotationX = _ref$minRotationX === void 0 ? DEFAULT_STATE.minRotationX : _ref$minRotationX,\n        _ref$maxRotationX = _ref.maxRotationX,\n        maxRotationX = _ref$maxRotationX === void 0 ? DEFAULT_STATE.maxRotationX : _ref$maxRotationX,\n        _ref$minZoom = _ref.minZoom,\n        minZoom = _ref$minZoom === void 0 ? DEFAULT_STATE.minZoom : _ref$minZoom,\n        _ref$maxZoom = _ref.maxZoom,\n        maxZoom = _ref$maxZoom === void 0 ? DEFAULT_STATE.maxZoom : _ref$maxZoom,\n        startPanPosition = _ref.startPanPosition,\n        startRotatePos = _ref.startRotatePos,\n        startRotationX = _ref.startRotationX,\n        startRotationOrbit = _ref.startRotationOrbit,\n        startZoomPosition = _ref.startZoomPosition,\n        startZoom = _ref.startZoom;\n\n    _classCallCheck(this, OrbitState);\n\n    _this = _super.call(this, {\n      width: width,\n      height: height,\n      rotationX: rotationX,\n      rotationOrbit: rotationOrbit,\n      target: target,\n      zoom: zoom,\n      minRotationX: minRotationX,\n      maxRotationX: maxRotationX,\n      minZoom: minZoom,\n      maxZoom: maxZoom\n    });\n    _this._state = {\n      startPanPosition: startPanPosition,\n      startRotatePos: startRotatePos,\n      startRotationX: startRotationX,\n      startRotationOrbit: startRotationOrbit,\n      startZoomPosition: startZoomPosition,\n      startZoom: startZoom\n    };\n    _this.makeViewport = makeViewport;\n    return _this;\n  }\n\n  _createClass(OrbitState, [{\n    key: \"panStart\",\n    value: function panStart(_ref2) {\n      var pos = _ref2.pos;\n      return this._getUpdatedState({\n        startPanPosition: this._unproject(pos)\n      });\n    }\n  }, {\n    key: \"pan\",\n    value: function pan(_ref3) {\n      var pos = _ref3.pos,\n          startPosition = _ref3.startPosition;\n      var startPanPosition = this._state.startPanPosition || startPosition;\n\n      if (!startPanPosition) {\n        return this;\n      }\n\n      var viewport = this.makeViewport(this._viewportProps);\n      var newProps = viewport.panByPosition(startPanPosition, pos);\n      return this._getUpdatedState(newProps);\n    }\n  }, {\n    key: \"panEnd\",\n    value: function panEnd() {\n      return this._getUpdatedState({\n        startPanPosition: null\n      });\n    }\n  }, {\n    key: \"rotateStart\",\n    value: function rotateStart(_ref4) {\n      var pos = _ref4.pos;\n      return this._getUpdatedState({\n        startRotatePos: pos,\n        startRotationX: this._viewportProps.rotationX,\n        startRotationOrbit: this._viewportProps.rotationOrbit\n      });\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(_ref5) {\n      var pos = _ref5.pos,\n          _ref5$deltaAngleX = _ref5.deltaAngleX,\n          deltaAngleX = _ref5$deltaAngleX === void 0 ? 0 : _ref5$deltaAngleX,\n          _ref5$deltaAngleY = _ref5.deltaAngleY,\n          deltaAngleY = _ref5$deltaAngleY === void 0 ? 0 : _ref5$deltaAngleY;\n      var _this$_state = this._state,\n          startRotatePos = _this$_state.startRotatePos,\n          startRotationX = _this$_state.startRotationX,\n          startRotationOrbit = _this$_state.startRotationOrbit;\n      var _this$_viewportProps = this._viewportProps,\n          width = _this$_viewportProps.width,\n          height = _this$_viewportProps.height;\n\n      if (!startRotatePos || !Number.isFinite(startRotationX) || !Number.isFinite(startRotationOrbit)) {\n        return this;\n      }\n\n      var newRotation;\n\n      if (pos) {\n        var deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n        var deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n\n        if (startRotationX < -90 || startRotationX > 90) {\n          deltaScaleX *= -1;\n        }\n\n        newRotation = {\n          rotationX: startRotationX + deltaScaleY * 180,\n          rotationOrbit: startRotationOrbit + deltaScaleX * 180\n        };\n      } else {\n        newRotation = {\n          rotationX: startRotationX + deltaAngleY,\n          rotationOrbit: startRotationOrbit + deltaAngleX\n        };\n      }\n\n      return this._getUpdatedState(newRotation);\n    }\n  }, {\n    key: \"rotateEnd\",\n    value: function rotateEnd() {\n      return this._getUpdatedState({\n        startRotationX: null,\n        startRotationOrbit: null\n      });\n    }\n  }, {\n    key: \"shortestPathFrom\",\n    value: function shortestPathFrom(viewState) {\n      var fromProps = viewState.getViewportProps();\n\n      var props = _objectSpread({}, this._viewportProps);\n\n      var rotationOrbit = props.rotationOrbit;\n\n      if (Math.abs(rotationOrbit - fromProps.rotationOrbit) > 180) {\n        props.rotationOrbit = rotationOrbit < 0 ? rotationOrbit + 360 : rotationOrbit - 360;\n      }\n\n      return props;\n    }\n  }, {\n    key: \"zoomStart\",\n    value: function zoomStart(_ref6) {\n      var pos = _ref6.pos;\n      return this._getUpdatedState({\n        startZoomPosition: this._unproject(pos),\n        startZoom: this._viewportProps.zoom\n      });\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(_ref7) {\n      var pos = _ref7.pos,\n          startPos = _ref7.startPos,\n          scale = _ref7.scale;\n      var zoom = this._viewportProps.zoom;\n      var _this$_state2 = this._state,\n          startZoom = _this$_state2.startZoom,\n          startZoomPosition = _this$_state2.startZoomPosition;\n\n      if (!Number.isFinite(startZoom)) {\n        startZoom = zoom;\n        startZoomPosition = this._unproject(startPos) || this._unproject(pos);\n      }\n\n      var newZoom = this._calculateNewZoom({\n        scale: scale,\n        startZoom: startZoom\n      });\n\n      var zoomedViewport = this.makeViewport(_objectSpread(_objectSpread({}, this._viewportProps), {}, {\n        zoom: newZoom\n      }));\n      return this._getUpdatedState(_objectSpread({\n        zoom: newZoom\n      }, zoomedViewport.panByPosition(startZoomPosition, pos)));\n    }\n  }, {\n    key: \"zoomEnd\",\n    value: function zoomEnd() {\n      return this._getUpdatedState({\n        startZoomPosition: null,\n        startZoom: null\n      });\n    }\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      return this._getUpdatedState({\n        zoom: this._calculateNewZoom({\n          scale: speed\n        })\n      });\n    }\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      return this._getUpdatedState({\n        zoom: this._calculateNewZoom({\n          scale: 1 / speed\n        })\n      });\n    }\n  }, {\n    key: \"moveLeft\",\n    value: function moveLeft() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n      return this._panFromCenter([-speed, 0]);\n    }\n  }, {\n    key: \"moveRight\",\n    value: function moveRight() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n      return this._panFromCenter([speed, 0]);\n    }\n  }, {\n    key: \"moveUp\",\n    value: function moveUp() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n      return this._panFromCenter([0, -speed]);\n    }\n  }, {\n    key: \"moveDown\",\n    value: function moveDown() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n      return this._panFromCenter([0, speed]);\n    }\n  }, {\n    key: \"rotateLeft\",\n    value: function rotateLeft() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n      return this._getUpdatedState({\n        rotationOrbit: this._viewportProps.rotationOrbit - speed\n      });\n    }\n  }, {\n    key: \"rotateRight\",\n    value: function rotateRight() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n      return this._getUpdatedState({\n        rotationOrbit: this._viewportProps.rotationOrbit + speed\n      });\n    }\n  }, {\n    key: \"rotateUp\",\n    value: function rotateUp() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      return this._getUpdatedState({\n        rotationX: this._viewportProps.rotationX - speed\n      });\n    }\n  }, {\n    key: \"rotateDown\",\n    value: function rotateDown() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      return this._getUpdatedState({\n        rotationX: this._viewportProps.rotationX + speed\n      });\n    }\n  }, {\n    key: \"_unproject\",\n    value: function _unproject(pos) {\n      var viewport = this.makeViewport(this._viewportProps);\n      return pos && viewport.unproject(pos);\n    }\n  }, {\n    key: \"_calculateNewZoom\",\n    value: function _calculateNewZoom(_ref8) {\n      var scale = _ref8.scale,\n          startZoom = _ref8.startZoom;\n      var _this$_viewportProps2 = this._viewportProps,\n          maxZoom = _this$_viewportProps2.maxZoom,\n          minZoom = _this$_viewportProps2.minZoom;\n\n      if (!Number.isFinite(startZoom)) {\n        startZoom = this._viewportProps.zoom;\n      }\n\n      var zoom = startZoom + Math.log2(scale);\n      return clamp(zoom, minZoom, maxZoom);\n    }\n  }, {\n    key: \"_panFromCenter\",\n    value: function _panFromCenter(offset) {\n      var _this$_viewportProps3 = this._viewportProps,\n          width = _this$_viewportProps3.width,\n          height = _this$_viewportProps3.height,\n          target = _this$_viewportProps3.target;\n      return this.pan({\n        startPosition: target,\n        pos: [width / 2 + offset[0], height / 2 + offset[1]]\n      });\n    }\n  }, {\n    key: \"_getUpdatedState\",\n    value: function _getUpdatedState(newProps) {\n      return new this.constructor(_objectSpread(_objectSpread(_objectSpread({}, this._viewportProps), this._state), newProps));\n    }\n  }, {\n    key: \"_applyConstraints\",\n    value: function _applyConstraints(props) {\n      var maxZoom = props.maxZoom,\n          minZoom = props.minZoom,\n          zoom = props.zoom,\n          maxRotationX = props.maxRotationX,\n          minRotationX = props.minRotationX,\n          rotationOrbit = props.rotationOrbit;\n      props.zoom = clamp(zoom, minZoom, maxZoom);\n      props.rotationX = clamp(props.rotationX, minRotationX, maxRotationX);\n\n      if (rotationOrbit < -180 || rotationOrbit > 180) {\n        props.rotationOrbit = mod(rotationOrbit + 180, 360) - 180;\n      }\n\n      return props;\n    }\n  }]);\n\n  return OrbitState;\n}(ViewState);\n\nvar OrbitController = /*#__PURE__*/function (_Controller) {\n  _inherits(OrbitController, _Controller);\n\n  var _super2 = _createSuper(OrbitController);\n\n  function OrbitController(props) {\n    _classCallCheck(this, OrbitController);\n\n    return _super2.call(this, OrbitState, props);\n  }\n\n  _createClass(OrbitController, [{\n    key: \"linearTransitionProps\",\n    get: function get() {\n      return ['target', 'zoom', 'rotationX', 'rotationOrbit'];\n    }\n  }]);\n\n  return OrbitController;\n}(Controller);\n\nexport { OrbitController as default };","map":{"version":3,"mappings":"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","names":["clamp","Controller","ViewState","mod","DEFAULT_STATE","rotationX","rotationOrbit","zoom","target","minRotationX","maxRotationX","minZoom","Infinity","maxZoom","OrbitState","constructor","makeViewport","width","height","startPanPosition","startRotatePos","startRotationX","startRotationOrbit","startZoomPosition","startZoom","_state","panStart","pos","_getUpdatedState","_unproject","pan","startPosition","viewport","_viewportProps","newProps","panByPosition","panEnd","rotateStart","rotate","deltaAngleX","deltaAngleY","Number","isFinite","newRotation","deltaScaleX","deltaScaleY","rotateEnd","shortestPathFrom","viewState","fromProps","getViewportProps","props","Math","abs","zoomStart","startPos","scale","newZoom","_calculateNewZoom","zoomedViewport","zoomEnd","zoomIn","speed","zoomOut","moveLeft","_panFromCenter","moveRight","moveUp","moveDown","rotateLeft","rotateRight","rotateUp","rotateDown","unproject","log2","offset","_applyConstraints","OrbitController"],"sources":["../../../src/controllers/orbit-controller.ts"],"sourcesContent":["import {clamp} from '@math.gl/core';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport {mod} from '../utils/math-utils';\n\nconst DEFAULT_STATE = {\n  rotationX: 0,\n  rotationOrbit: 0,\n  zoom: 0,\n  target: [0, 0, 0],\n  minRotationX: -90,\n  maxRotationX: 90,\n  minZoom: -Infinity,\n  maxZoom: Infinity\n};\n\n/* Helpers */\n\nexport class OrbitState extends ViewState {\n  constructor({\n    makeViewport,\n\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n    rotationX = DEFAULT_STATE.rotationX, // Rotation around x axis\n    rotationOrbit = DEFAULT_STATE.rotationOrbit, // Rotation around orbit axis\n    target = DEFAULT_STATE.target,\n    zoom = DEFAULT_STATE.zoom,\n\n    /* Viewport constraints */\n    minRotationX = DEFAULT_STATE.minRotationX,\n    maxRotationX = DEFAULT_STATE.maxRotationX,\n    minZoom = DEFAULT_STATE.minZoom,\n    maxZoom = DEFAULT_STATE.maxZoom,\n\n    /** Interaction states, required to calculate change during transform */\n    // Model state when the pan operation first started\n    startPanPosition,\n    // Model state when the rotate operation first started\n    startRotatePos,\n    startRotationX,\n    startRotationOrbit,\n    // Model state when the zoom operation first started\n    startZoomPosition,\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      rotationX,\n      rotationOrbit,\n      target,\n      zoom,\n      minRotationX,\n      maxRotationX,\n      minZoom,\n      maxZoom\n    });\n\n    this._state = {\n      startPanPosition,\n      startRotatePos,\n      startRotationX,\n      startRotationOrbit,\n      startZoomPosition,\n      startZoom\n    };\n\n    this.makeViewport = makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedState({\n      startPanPosition: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos, startPosition}) {\n    const startPanPosition = this._state.startPanPosition || startPosition;\n\n    if (!startPanPosition) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this._viewportProps);\n    const newProps = viewport.panByPosition(startPanPosition, pos);\n\n    return this._getUpdatedState(newProps);\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanPosition: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startRotationX: this._viewportProps.rotationX,\n      startRotationOrbit: this._viewportProps.rotationOrbit\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startRotationX, startRotationOrbit} = this._state;\n    const {width, height} = this._viewportProps;\n\n    if (\n      !startRotatePos ||\n      !Number.isFinite(startRotationX) ||\n      !Number.isFinite(startRotationOrbit)\n    ) {\n      return this;\n    }\n\n    let newRotation;\n    if (pos) {\n      let deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n\n      if (startRotationX < -90 || startRotationX > 90) {\n        // When looking at the \"back\" side of the scene, invert horizontal drag\n        // so that the camera movement follows user input\n        deltaScaleX *= -1;\n      }\n      newRotation = {\n        rotationX: startRotationX + deltaScaleY * 180,\n        rotationOrbit: startRotationOrbit + deltaScaleX * 180\n      };\n    } else {\n      newRotation = {\n        rotationX: startRotationX + deltaAngleY,\n        rotationOrbit: startRotationOrbit + deltaAngleX\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startRotationX: null,\n      startRotationOrbit: null\n    });\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = {...this._viewportProps};\n    const {rotationOrbit} = props;\n\n    if (Math.abs(rotationOrbit - fromProps.rotationOrbit) > 180) {\n      props.rotationOrbit = rotationOrbit < 0 ? rotationOrbit + 360 : rotationOrbit - 360;\n    }\n\n    return props;\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomPosition: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current target is\n   * @param {[Number, Number]} startPos - the target position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    const {zoom} = this._viewportProps;\n    let {startZoom, startZoomPosition} = this._state;\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = zoom;\n      startZoomPosition = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    const newZoom = this._calculateNewZoom({scale, startZoom});\n    const zoomedViewport = this.makeViewport({...this._viewportProps, zoom: newZoom});\n\n    return this._getUpdatedState({\n      zoom: newZoom,\n      ...zoomedViewport.panByPosition(startZoomPosition, pos)\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: speed})\n    });\n  }\n\n  zoomOut(speed = 2) {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: 1 / speed})\n    });\n  }\n\n  moveLeft(speed = 50) {\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveRight(speed = 50) {\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveUp(speed = 50) {\n    return this._panFromCenter([0, -speed]);\n  }\n\n  moveDown(speed = 50) {\n    return this._panFromCenter([0, speed]);\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      rotationOrbit: this._viewportProps.rotationOrbit - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      rotationOrbit: this._viewportProps.rotationOrbit + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      rotationX: this._viewportProps.rotationX - speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      rotationX: this._viewportProps.rotationX + speed\n    });\n  }\n\n  /* Private methods */\n\n  _unproject(pos) {\n    const viewport = this.makeViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    if (!Number.isFinite(startZoom)) {\n      startZoom = this._viewportProps.zoom;\n    }\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  _panFromCenter(offset) {\n    const {width, height, target} = this._viewportProps;\n    return this.pan({\n      startPosition: target,\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new this.constructor({...this._viewportProps, ...this._state, ...newProps});\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom, maxRotationX, minRotationX, rotationOrbit} = props;\n\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n    props.rotationX = clamp(props.rotationX, minRotationX, maxRotationX);\n    if (rotationOrbit < -180 || rotationOrbit > 180) {\n      props.rotationOrbit = mod(rotationOrbit + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class OrbitController extends Controller {\n  constructor(props) {\n    super(OrbitState, props);\n  }\n\n  get linearTransitionProps() {\n    return ['target', 'zoom', 'rotationX', 'rotationOrbit'];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}