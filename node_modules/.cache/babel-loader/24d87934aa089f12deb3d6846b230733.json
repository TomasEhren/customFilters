{"ast":null,"code":"import { Timeline } from '@luma.gl/core';\nimport { LIFECYCLE } from '../lifecycle/constants';\nimport log from '../utils/log';\nimport debug from '../debug';\nimport { flatten } from '../utils/flatten';\nimport { Stats } from '@probe.gl/stats';\nimport ResourceManager from './resource/resource-manager';\nimport Viewport from '../viewports/viewport';\nimport { createProgramManager } from '../shaderlib';\nconst TRACE_SET_LAYERS = 'layerManager.setLayers';\nconst TRACE_ACTIVATE_VIEWPORT = 'layerManager.activateViewport';\nconst INITIAL_CONTEXT = Object.seal({\n  layerManager: null,\n  resourceManager: null,\n  deck: null,\n  gl: null,\n  stats: null,\n  shaderCache: null,\n  pickingFBO: null,\n  mousePosition: null,\n  userData: {}\n});\nexport default class LayerManager {\n  constructor(gl) {\n    let {\n      deck,\n      stats,\n      viewport,\n      timeline\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.lastRenderedLayers = [];\n    this.layers = [];\n    this.resourceManager = new ResourceManager({\n      gl,\n      protocol: 'deck://'\n    });\n    this.context = { ...INITIAL_CONTEXT,\n      layerManager: this,\n      gl,\n      deck,\n      programManager: gl && createProgramManager(gl),\n      stats: stats || new Stats({\n        id: 'deck.gl'\n      }),\n      viewport: viewport || new Viewport({\n        id: 'DEFAULT-INITIAL-VIEWPORT'\n      }),\n      timeline: timeline || new Timeline(),\n      resourceManager: this.resourceManager\n    };\n    this._nextLayers = null;\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = false;\n    this._debug = false;\n    this.activateViewport = this.activateViewport.bind(this);\n    Object.seal(this);\n  }\n\n  finalize() {\n    this.resourceManager.finalize();\n\n    for (const layer of this.layers) {\n      this._finalizeLayer(layer);\n    }\n  }\n\n  needsRedraw() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      clearRedrawFlags: false\n    };\n    let redraw = this._needsRedraw;\n\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    for (const layer of this.layers) {\n      const layerNeedsRedraw = layer.getNeedsRedraw(opts);\n      redraw = redraw || layerNeedsRedraw;\n    }\n\n    return redraw;\n  }\n\n  needsUpdate() {\n    if (this._nextLayers && this._nextLayers !== this.lastRenderedLayers) {\n      return 'layers changed';\n    }\n\n    return this._needsUpdate;\n  }\n\n  setNeedsRedraw(reason) {\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n  }\n\n  getLayers() {\n    let {\n      layerIds = null\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return layerIds ? this.layers.filter(layer => layerIds.find(layerId => layer.id.indexOf(layerId) === 0)) : this.layers;\n  }\n\n  setProps(props) {\n    if ('debug' in props) {\n      this._debug = props.debug;\n    }\n\n    if ('userData' in props) {\n      this.context.userData = props.userData;\n    }\n\n    if ('layers' in props) {\n      this._nextLayers = props.layers;\n    }\n\n    if ('onError' in props) {\n      this.context.onError = props.onError;\n    }\n  }\n\n  setLayers(newLayers, reason) {\n    debug(TRACE_SET_LAYERS, this, reason, newLayers);\n    this.lastRenderedLayers = newLayers;\n    newLayers = flatten(newLayers, Boolean);\n\n    for (const layer of newLayers) {\n      layer.context = this.context;\n    }\n\n    this._updateLayers(this.layers, newLayers);\n\n    return this;\n  }\n\n  updateLayers() {\n    const reason = this.needsUpdate();\n\n    if (reason) {\n      this.setNeedsRedraw(\"updating layers: \".concat(reason));\n      this.setLayers(this._nextLayers || this.lastRenderedLayers, reason);\n    }\n\n    this._nextLayers = null;\n  }\n\n  activateViewport(viewport) {\n    debug(TRACE_ACTIVATE_VIEWPORT, this, viewport);\n\n    if (viewport) {\n      this.context.viewport = viewport;\n    }\n\n    return this;\n  }\n\n  _handleError(stage, error, layer) {\n    layer.raiseError(error, \"\".concat(stage, \" of \").concat(layer));\n  }\n\n  _updateLayers(oldLayers, newLayers) {\n    const oldLayerMap = {};\n\n    for (const oldLayer of oldLayers) {\n      if (oldLayerMap[oldLayer.id]) {\n        log.warn(\"Multiple old layers with same id \".concat(oldLayer.id))();\n      } else {\n        oldLayerMap[oldLayer.id] = oldLayer;\n      }\n    }\n\n    const generatedLayers = [];\n\n    this._updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers);\n\n    this._finalizeOldLayers(oldLayerMap);\n\n    let needsUpdate = false;\n\n    for (const layer of generatedLayers) {\n      if (layer.hasUniformTransition()) {\n        needsUpdate = true;\n        break;\n      }\n    }\n\n    this._needsUpdate = needsUpdate;\n    this.layers = generatedLayers;\n  }\n\n  _updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers) {\n    for (const newLayer of newLayers) {\n      newLayer.context = this.context;\n      const oldLayer = oldLayerMap[newLayer.id];\n\n      if (oldLayer === null) {\n        log.warn(\"Multiple new layers with same id \".concat(newLayer.id))();\n      }\n\n      oldLayerMap[newLayer.id] = null;\n      let sublayers = null;\n\n      try {\n        if (this._debug && oldLayer !== newLayer) {\n          newLayer.validateProps();\n        }\n\n        if (!oldLayer) {\n          this._initializeLayer(newLayer);\n        } else {\n          this._transferLayerState(oldLayer, newLayer);\n\n          this._updateLayer(newLayer);\n        }\n\n        generatedLayers.push(newLayer);\n        sublayers = newLayer.isComposite && newLayer.getSubLayers();\n      } catch (err) {\n        this._handleError('matching', err, newLayer);\n      }\n\n      if (sublayers) {\n        this._updateSublayersRecursively(sublayers, oldLayerMap, generatedLayers);\n      }\n    }\n  }\n\n  _finalizeOldLayers(oldLayerMap) {\n    for (const layerId in oldLayerMap) {\n      const layer = oldLayerMap[layerId];\n\n      if (layer) {\n        this._finalizeLayer(layer);\n      }\n    }\n  }\n\n  _initializeLayer(layer) {\n    try {\n      layer._initialize();\n\n      layer.lifecycle = LIFECYCLE.INITIALIZED;\n    } catch (err) {\n      this._handleError('initialization', err, layer);\n    }\n  }\n\n  _transferLayerState(oldLayer, newLayer) {\n    newLayer._transferState(oldLayer);\n\n    newLayer.lifecycle = LIFECYCLE.MATCHED;\n\n    if (newLayer !== oldLayer) {\n      oldLayer.lifecycle = LIFECYCLE.AWAITING_GC;\n    }\n  }\n\n  _updateLayer(layer) {\n    try {\n      layer._update();\n    } catch (err) {\n      this._handleError('update', err, layer);\n    }\n  }\n\n  _finalizeLayer(layer) {\n    this._needsRedraw = this._needsRedraw || \"finalized \".concat(layer);\n    layer.lifecycle = LIFECYCLE.AWAITING_FINALIZATION;\n\n    try {\n      layer._finalize();\n\n      layer.lifecycle = LIFECYCLE.FINALIZED;\n    } catch (err) {\n      this._handleError('finalization', err, layer);\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Timeline","LIFECYCLE","log","debug","flatten","Stats","ResourceManager","Viewport","createProgramManager","TRACE_SET_LAYERS","TRACE_ACTIVATE_VIEWPORT","INITIAL_CONTEXT","Object","seal","layerManager","resourceManager","deck","gl","stats","shaderCache","pickingFBO","mousePosition","userData","LayerManager","constructor","viewport","timeline","lastRenderedLayers","layers","protocol","context","programManager","id","_nextLayers","_needsRedraw","_needsUpdate","_debug","activateViewport","bind","finalize","layer","_finalizeLayer","needsRedraw","opts","clearRedrawFlags","redraw","layerNeedsRedraw","getNeedsRedraw","needsUpdate","setNeedsRedraw","reason","setNeedsUpdate","getLayers","layerIds","filter","find","layerId","indexOf","setProps","props","onError","setLayers","newLayers","Boolean","_updateLayers","updateLayers","_handleError","stage","error","raiseError","oldLayers","oldLayerMap","oldLayer","warn","generatedLayers","_updateSublayersRecursively","_finalizeOldLayers","hasUniformTransition","newLayer","sublayers","validateProps","_initializeLayer","_transferLayerState","_updateLayer","push","isComposite","getSubLayers","err","_initialize","lifecycle","INITIALIZED","_transferState","MATCHED","AWAITING_GC","_update","AWAITING_FINALIZATION","_finalize","FINALIZED"],"sources":["../../../src/lib/layer-manager.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Timeline} from '@luma.gl/core';\nimport {LIFECYCLE} from '../lifecycle/constants';\nimport log from '../utils/log';\nimport debug from '../debug';\nimport {flatten} from '../utils/flatten';\nimport {Stats} from '@probe.gl/stats';\nimport ResourceManager from './resource/resource-manager';\n\nimport Viewport from '../viewports/viewport';\nimport {createProgramManager} from '../shaderlib';\n\nconst TRACE_SET_LAYERS = 'layerManager.setLayers';\nconst TRACE_ACTIVATE_VIEWPORT = 'layerManager.activateViewport';\n\n// CONTEXT IS EXPOSED TO LAYERS\nconst INITIAL_CONTEXT = Object.seal({\n  layerManager: null,\n  resourceManager: null,\n  deck: null,\n  gl: null,\n\n  // General resources\n  stats: null, // for tracking lifecycle performance\n\n  // GL Resources\n  shaderCache: null,\n  pickingFBO: null, // Screen-size framebuffer that layers can reuse\n\n  mousePosition: null,\n\n  userData: {} // Place for any custom app `context`\n});\n\nexport default class LayerManager {\n  // eslint-disable-next-line\n  constructor(gl, {deck, stats, viewport, timeline} = {}) {\n    // Currently deck.gl expects the DeckGL.layers array to be different\n    // whenever React rerenders. If the same layers array is used, the\n    // LayerManager's diffing algorithm will generate a fatal error and\n    // break the rendering.\n\n    // `this.lastRenderedLayers` stores the UNFILTERED layers sent\n    // down to LayerManager, so that `layers` reference can be compared.\n    // If it's the same across two React render calls, the diffing logic\n    // will be skipped.\n    this.lastRenderedLayers = [];\n    this.layers = [];\n    this.resourceManager = new ResourceManager({gl, protocol: 'deck://'});\n\n    this.context = {\n      ...INITIAL_CONTEXT,\n      layerManager: this,\n      gl,\n      deck,\n      // Enabling luma.gl Program caching using private API (_cachePrograms)\n      programManager: gl && createProgramManager(gl),\n      stats: stats || new Stats({id: 'deck.gl'}),\n      // Make sure context.viewport is not empty on the first layer initialization\n      viewport: viewport || new Viewport({id: 'DEFAULT-INITIAL-VIEWPORT'}), // Current viewport, exposed to layers for project* function\n      timeline: timeline || new Timeline(),\n      resourceManager: this.resourceManager\n    };\n\n    this._nextLayers = null;\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = false;\n    this._debug = false;\n\n    this.activateViewport = this.activateViewport.bind(this);\n\n    Object.seal(this);\n  }\n\n  // Method to call when the layer manager is not needed anymore.\n  finalize() {\n    this.resourceManager.finalize();\n    // Finalize all layers\n    for (const layer of this.layers) {\n      this._finalizeLayer(layer);\n    }\n  }\n\n  // Check if a redraw is needed\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    let redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    // This layers list doesn't include sublayers, relying on composite layers\n    for (const layer of this.layers) {\n      // Call every layer to clear their flags\n      const layerNeedsRedraw = layer.getNeedsRedraw(opts);\n      redraw = redraw || layerNeedsRedraw;\n    }\n\n    return redraw;\n  }\n\n  // Check if a deep update of all layers is needed\n  needsUpdate() {\n    if (this._nextLayers && this._nextLayers !== this.lastRenderedLayers) {\n      // New layers array may be the same as the old one if `setProps` is called by React\n      return 'layers changed';\n    }\n    return this._needsUpdate;\n  }\n\n  // Layers will be redrawn (in next animation frame)\n  setNeedsRedraw(reason) {\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n  }\n\n  // Gets an (optionally) filtered list of layers\n  getLayers({layerIds = null} = {}) {\n    // Filtering by layerId compares beginning of strings, so that sublayers will be included\n    // Dependes on the convention of adding suffixes to the parent's layer name\n    return layerIds\n      ? this.layers.filter(layer => layerIds.find(layerId => layer.id.indexOf(layerId) === 0))\n      : this.layers;\n  }\n\n  // Set props needed for layer rendering and picking.\n  setProps(props) {\n    if ('debug' in props) {\n      this._debug = props.debug;\n    }\n\n    // A way for apps to add data to context that can be accessed in layers\n    if ('userData' in props) {\n      this.context.userData = props.userData;\n    }\n\n    // New layers will be processed in `updateLayers` in the next update cycle\n    if ('layers' in props) {\n      this._nextLayers = props.layers;\n    }\n\n    if ('onError' in props) {\n      this.context.onError = props.onError;\n    }\n  }\n\n  // Supply a new layer list, initiating sublayer generation and layer matching\n  setLayers(newLayers, reason) {\n    debug(TRACE_SET_LAYERS, this, reason, newLayers);\n\n    this.lastRenderedLayers = newLayers;\n\n    newLayers = flatten(newLayers, Boolean);\n\n    for (const layer of newLayers) {\n      layer.context = this.context;\n    }\n\n    this._updateLayers(this.layers, newLayers);\n\n    return this;\n  }\n\n  // Update layers from last cycle if `setNeedsUpdate()` has been called\n  updateLayers() {\n    // NOTE: For now, even if only some layer has changed, we update all layers\n    // to ensure that layer id maps etc remain consistent even if different\n    // sublayers are rendered\n    const reason = this.needsUpdate();\n    if (reason) {\n      this.setNeedsRedraw(`updating layers: ${reason}`);\n      // Force a full update\n      this.setLayers(this._nextLayers || this.lastRenderedLayers, reason);\n    }\n    // Updated, clear the backlog\n    this._nextLayers = null;\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  // Make a viewport \"current\" in layer context, updating viewportChanged flags\n  activateViewport(viewport) {\n    debug(TRACE_ACTIVATE_VIEWPORT, this, viewport);\n    if (viewport) {\n      this.context.viewport = viewport;\n    }\n    return this;\n  }\n\n  _handleError(stage, error, layer) {\n    layer.raiseError(error, `${stage} of ${layer}`);\n  }\n\n  // Match all layers, checking for caught errors\n  // To avoid having an exception in one layer disrupt other layers\n  // TODO - mark layers with exceptions as bad and remove from rendering cycle?\n  _updateLayers(oldLayers, newLayers) {\n    // Create old layer map\n    const oldLayerMap = {};\n    for (const oldLayer of oldLayers) {\n      if (oldLayerMap[oldLayer.id]) {\n        log.warn(`Multiple old layers with same id ${oldLayer.id}`)();\n      } else {\n        oldLayerMap[oldLayer.id] = oldLayer;\n      }\n    }\n\n    // Allocate array for generated layers\n    const generatedLayers = [];\n\n    // Match sublayers\n    this._updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers);\n\n    // Finalize unmatched layers\n    this._finalizeOldLayers(oldLayerMap);\n\n    let needsUpdate = false;\n    for (const layer of generatedLayers) {\n      if (layer.hasUniformTransition()) {\n        needsUpdate = true;\n        break;\n      }\n    }\n\n    this._needsUpdate = needsUpdate;\n    this.layers = generatedLayers;\n  }\n\n  /* eslint-disable complexity,max-statements */\n  // Note: adds generated layers to `generatedLayers` array parameter\n  _updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers) {\n    for (const newLayer of newLayers) {\n      newLayer.context = this.context;\n\n      // Given a new coming layer, find its matching old layer (if any)\n      const oldLayer = oldLayerMap[newLayer.id];\n      if (oldLayer === null) {\n        // null, rather than undefined, means this id was originally there\n        log.warn(`Multiple new layers with same id ${newLayer.id}`)();\n      }\n      // Remove the old layer from candidates, as it has been matched with this layer\n      oldLayerMap[newLayer.id] = null;\n\n      let sublayers = null;\n\n      // We must not generate exceptions until after layer matching is complete\n      try {\n        if (this._debug && oldLayer !== newLayer) {\n          newLayer.validateProps();\n        }\n\n        if (!oldLayer) {\n          this._initializeLayer(newLayer);\n        } else {\n          this._transferLayerState(oldLayer, newLayer);\n          this._updateLayer(newLayer);\n        }\n        generatedLayers.push(newLayer);\n\n        // Call layer lifecycle method: render sublayers\n        sublayers = newLayer.isComposite && newLayer.getSubLayers();\n        // End layer lifecycle method: render sublayers\n      } catch (err) {\n        this._handleError('matching', err, newLayer); // Record first exception\n      }\n\n      if (sublayers) {\n        this._updateSublayersRecursively(sublayers, oldLayerMap, generatedLayers);\n      }\n    }\n  }\n  /* eslint-enable complexity,max-statements */\n\n  // Finalize any old layers that were not matched\n  _finalizeOldLayers(oldLayerMap) {\n    for (const layerId in oldLayerMap) {\n      const layer = oldLayerMap[layerId];\n      if (layer) {\n        this._finalizeLayer(layer);\n      }\n    }\n  }\n\n  // EXCEPTION SAFE LAYER ACCESS\n\n  // Initializes a single layer, calling layer methods\n  _initializeLayer(layer) {\n    try {\n      layer._initialize();\n      layer.lifecycle = LIFECYCLE.INITIALIZED;\n    } catch (err) {\n      this._handleError('initialization', err, layer);\n      // TODO - what should the lifecycle state be here? LIFECYCLE.INITIALIZATION_FAILED?\n    }\n  }\n\n  _transferLayerState(oldLayer, newLayer) {\n    newLayer._transferState(oldLayer);\n    newLayer.lifecycle = LIFECYCLE.MATCHED;\n\n    if (newLayer !== oldLayer) {\n      oldLayer.lifecycle = LIFECYCLE.AWAITING_GC;\n    }\n  }\n\n  // Updates a single layer, cleaning all flags\n  _updateLayer(layer) {\n    try {\n      layer._update();\n    } catch (err) {\n      this._handleError('update', err, layer);\n    }\n  }\n\n  // Finalizes a single layer\n  _finalizeLayer(layer) {\n    this._needsRedraw = this._needsRedraw || `finalized ${layer}`;\n\n    layer.lifecycle = LIFECYCLE.AWAITING_FINALIZATION;\n\n    try {\n      layer._finalize();\n      layer.lifecycle = LIFECYCLE.FINALIZED;\n    } catch (err) {\n      this._handleError('finalization', err, layer);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}