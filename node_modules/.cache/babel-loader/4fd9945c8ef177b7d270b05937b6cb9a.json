{"ast":null,"code":"import TransitionInterpolator from './transition-interpolator';\nimport { lerp } from '@math.gl/core';\nconst DEFAULT_PROPS = ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\nconst DEFAULT_REQUIRED_PROPS = ['longitude', 'latitude', 'zoom'];\nexport default class LinearInterpolator extends TransitionInterpolator {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const transitionProps = Array.isArray(opts) ? opts : opts.transitionProps;\n    super(transitionProps || {\n      compare: DEFAULT_PROPS,\n      extract: DEFAULT_PROPS,\n      required: DEFAULT_REQUIRED_PROPS\n    });\n    this.opts = opts;\n  }\n\n  initializeProps(startProps, endProps) {\n    const result = super.initializeProps(startProps, endProps);\n    const {\n      makeViewport,\n      around\n    } = this.opts;\n\n    if (makeViewport && around) {\n      const startViewport = makeViewport(startProps);\n      const endViewport = makeViewport(endProps);\n      const aroundPosition = startViewport.unproject(around);\n      result.start.around = around;\n      Object.assign(result.end, {\n        around: endViewport.project(aroundPosition),\n        aroundPosition,\n        width: endProps.width,\n        height: endProps.height\n      });\n    }\n\n    return result;\n  }\n\n  interpolateProps(startProps, endProps, t) {\n    const propsInTransition = {};\n\n    for (const key of this._propsToExtract) {\n      propsInTransition[key] = lerp(startProps[key] || 0, endProps[key] || 0, t);\n    }\n\n    if (endProps.aroundPosition) {\n      const viewport = this.opts.makeViewport({ ...endProps,\n        ...propsInTransition\n      });\n      Object.assign(propsInTransition, viewport.panByPosition(endProps.aroundPosition, lerp(startProps.around, endProps.around, t)));\n    }\n\n    return propsInTransition;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,OAAOA,sBAAP,MAAmC,2BAAnC;AACA,SAAQC,IAAR,QAAmB,eAAnB;AAEA,MAAMC,aAAa,GAAG,CAAC,WAAD,EAAc,UAAd,EAA0B,MAA1B,EAAkC,SAAlC,EAA6C,OAA7C,CAAtB;AACA,MAAMC,sBAAsB,GAAG,CAAC,WAAD,EAAc,UAAd,EAA0B,MAA1B,CAA/B;AAKA,eAAe,MAAMC,kBAAN,SAAiCJ,sBAAjC,CAAwD;EAOrEK,WAAW,GAAY;IAAA,IAAXC,IAAW,uEAAJ,EAAI;IAErB,MAAMC,eAAe,GAAGC,KAAK,CAACC,OAAND,CAAcF,IAAdE,IAAsBF,IAAtBE,GAA6BF,IAAI,CAACC,eAA1D;IACA,MACEA,eAAe,IAAI;MACjBG,OAAO,EAAER,aADQ;MAEjBS,OAAO,EAAET,aAFQ;MAGjBU,QAAQ,EAAET;IAHO,CADrB;IAOA,KAAKG,IAAL,GAAYA,IAAZ;EACD;;EAEDO,eAAe,CAACC,UAAD,EAAaC,QAAb,EAAuB;IACpC,MAAMC,MAAM,GAAG,MAAMH,eAAN,CAAsBC,UAAtB,EAAkCC,QAAlC,CAAf;IAEA,MAAM;MAACE,YAAD;MAAeC;IAAf,IAAyB,KAAKZ,IAApC;;IACA,IAAIW,YAAY,IAAIC,MAApB,EAA4B;MAC1B,MAAMC,aAAa,GAAGF,YAAY,CAACH,UAAD,CAAlC;MACA,MAAMM,WAAW,GAAGH,YAAY,CAACF,QAAD,CAAhC;MACA,MAAMM,cAAc,GAAGF,aAAa,CAACG,SAAdH,CAAwBD,MAAxBC,CAAvB;MACAH,MAAM,CAACO,KAAPP,CAAaE,MAAbF,GAAsBE,MAAtBF;MACAQ,MAAM,CAACC,MAAPD,CAAcR,MAAM,CAACU,GAArBF,EAA0B;QACxBN,MAAM,EAAEE,WAAW,CAACO,OAAZP,CAAoBC,cAApBD,CADgB;QAExBC,cAFwB;QAGxBO,KAAK,EAAEb,QAAQ,CAACa,KAHQ;QAIxBC,MAAM,EAAEd,QAAQ,CAACc;MAJO,CAA1BL;IAMD;;IAED,OAAOR,MAAP;EACD;;EAEDc,gBAAgB,CAAChB,UAAD,EAAaC,QAAb,EAAuBgB,CAAvB,EAA0B;IACxC,MAAMC,iBAAiB,GAAG,EAA1B;;IACA,KAAK,MAAMC,GAAX,IAAkB,KAAKC,eAAvB,EAAwC;MACtCF,iBAAiB,CAACC,GAAD,CAAjBD,GAAyB/B,IAAI,CAACa,UAAU,CAACmB,GAAD,CAAVnB,IAAmB,CAApB,EAAuBC,QAAQ,CAACkB,GAAD,CAARlB,IAAiB,CAAxC,EAA2CgB,CAA3C,CAA7BC;IACD;;IAED,IAAIjB,QAAQ,CAACM,cAAb,EAA6B;MAE3B,MAAMc,QAAQ,GAAG,KAAK7B,IAAL,CAAUW,YAAV,CAAuB,EAAC,GAAGF,QAAJ;QAAc,GAAGiB;MAAjB,CAAvB,CAAjB;MACAR,MAAM,CAACC,MAAPD,CACEQ,iBADFR,EAEEW,QAAQ,CAACC,aAATD,CACEpB,QAAQ,CAACM,cADXc,EAGElC,IAAI,CAACa,UAAU,CAACI,MAAZ,EAAoBH,QAAQ,CAACG,MAA7B,EAAqCa,CAArC,CAHNI,CAFFX;IAQD;;IACD,OAAOQ,iBAAP;EACD;;AA3DoE","names":["TransitionInterpolator","lerp","DEFAULT_PROPS","DEFAULT_REQUIRED_PROPS","LinearInterpolator","constructor","opts","transitionProps","Array","isArray","compare","extract","required","initializeProps","startProps","endProps","result","makeViewport","around","startViewport","endViewport","aroundPosition","unproject","start","Object","assign","end","project","width","height","interpolateProps","t","propsInTransition","key","_propsToExtract","viewport","panByPosition"],"sources":["../../../src/transitions/linear-interpolator.js"],"sourcesContent":["import TransitionInterpolator from './transition-interpolator';\nimport {lerp} from '@math.gl/core';\n\nconst DEFAULT_PROPS = ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\nconst DEFAULT_REQUIRED_PROPS = ['longitude', 'latitude', 'zoom'];\n\n/**\n * Performs linear interpolation of two view states.\n */\nexport default class LinearInterpolator extends TransitionInterpolator {\n  /**\n   * @param {Object} opts\n   * @param {Array} opts.transitionProps - list of props to apply linear transition to.\n   * @param {Array} opts.around - a screen point to zoom/rotate around.\n   * @param {Function} opts.makeViewport - construct a viewport instance with given props.\n   */\n  constructor(opts = {}) {\n    // Backward compatibility\n    const transitionProps = Array.isArray(opts) ? opts : opts.transitionProps;\n    super(\n      transitionProps || {\n        compare: DEFAULT_PROPS,\n        extract: DEFAULT_PROPS,\n        required: DEFAULT_REQUIRED_PROPS\n      }\n    );\n    this.opts = opts;\n  }\n\n  initializeProps(startProps, endProps) {\n    const result = super.initializeProps(startProps, endProps);\n\n    const {makeViewport, around} = this.opts;\n    if (makeViewport && around) {\n      const startViewport = makeViewport(startProps);\n      const endViewport = makeViewport(endProps);\n      const aroundPosition = startViewport.unproject(around);\n      result.start.around = around;\n      Object.assign(result.end, {\n        around: endViewport.project(aroundPosition),\n        aroundPosition,\n        width: endProps.width,\n        height: endProps.height\n      });\n    }\n\n    return result;\n  }\n\n  interpolateProps(startProps, endProps, t) {\n    const propsInTransition = {};\n    for (const key of this._propsToExtract) {\n      propsInTransition[key] = lerp(startProps[key] || 0, endProps[key] || 0, t);\n    }\n\n    if (endProps.aroundPosition) {\n      // Linear transition should be performed in common space\n      const viewport = this.opts.makeViewport({...endProps, ...propsInTransition});\n      Object.assign(\n        propsInTransition,\n        viewport.panByPosition(\n          endProps.aroundPosition,\n          // anchor point in current screen coordinates\n          lerp(startProps.around, endProps.around, t)\n        )\n      );\n    }\n    return propsInTransition;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}