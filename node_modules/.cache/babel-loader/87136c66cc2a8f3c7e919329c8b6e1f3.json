{"ast":null,"code":"import { padToNBytes, assert } from '@loaders.gl/loader-utils';\nvar MAGIC_glTF = 0x676c5446;\nvar GLB_FILE_HEADER_SIZE = 12;\nvar GLB_CHUNK_HEADER_SIZE = 8;\nvar GLB_CHUNK_TYPE_JSON = 0x4e4f534a;\nvar GLB_CHUNK_TYPE_BIN = 0x004e4942;\nvar GLB_CHUNK_TYPE_JSON_XVIZ_DEPRECATED = 0;\nvar GLB_CHUNK_TYPE_BIX_XVIZ_DEPRECATED = 1;\nvar GLB_V1_CONTENT_FORMAT_JSON = 0x0;\nvar LE = true;\n\nfunction getMagicString(dataView) {\n  var byteOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return \"\".concat(String.fromCharCode(dataView.getUint8(byteOffset + 0))).concat(String.fromCharCode(dataView.getUint8(byteOffset + 1))).concat(String.fromCharCode(dataView.getUint8(byteOffset + 2))).concat(String.fromCharCode(dataView.getUint8(byteOffset + 3)));\n}\n\nexport function isGLB(arrayBuffer) {\n  var byteOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var dataView = new DataView(arrayBuffer);\n  var _options$magic = options.magic,\n      magic = _options$magic === void 0 ? MAGIC_glTF : _options$magic;\n  var magic1 = dataView.getUint32(byteOffset, false);\n  return magic1 === magic || magic1 === MAGIC_glTF;\n}\nexport default function parseGLBSync(glb, arrayBuffer) {\n  var byteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var dataView = new DataView(arrayBuffer);\n  var type = getMagicString(dataView, byteOffset + 0);\n  var version = dataView.getUint32(byteOffset + 4, LE);\n  var byteLength = dataView.getUint32(byteOffset + 8, LE);\n  Object.assign(glb, {\n    header: {\n      byteOffset: byteOffset,\n      byteLength: byteLength,\n      hasBinChunk: false\n    },\n    type: type,\n    version: version,\n    json: {},\n    binChunks: []\n  });\n  byteOffset += GLB_FILE_HEADER_SIZE;\n\n  switch (glb.version) {\n    case 1:\n      return parseGLBV1(glb, dataView, byteOffset);\n\n    case 2:\n      return parseGLBV2(glb, dataView, byteOffset, options = {});\n\n    default:\n      throw new Error(\"Invalid GLB version \".concat(glb.version, \". Only supports v1 and v2.\"));\n  }\n}\n\nfunction parseGLBV1(glb, dataView, byteOffset) {\n  assert(glb.header.byteLength > GLB_FILE_HEADER_SIZE + GLB_CHUNK_HEADER_SIZE);\n  var contentLength = dataView.getUint32(byteOffset + 0, LE);\n  var contentFormat = dataView.getUint32(byteOffset + 4, LE);\n  byteOffset += GLB_CHUNK_HEADER_SIZE;\n  assert(contentFormat === GLB_V1_CONTENT_FORMAT_JSON);\n  parseJSONChunk(glb, dataView, byteOffset, contentLength);\n  byteOffset += contentLength;\n  byteOffset += parseBINChunk(glb, dataView, byteOffset, glb.header.byteLength);\n  return byteOffset;\n}\n\nfunction parseGLBV2(glb, dataView, byteOffset, options) {\n  assert(glb.header.byteLength > GLB_FILE_HEADER_SIZE + GLB_CHUNK_HEADER_SIZE);\n  parseGLBChunksSync(glb, dataView, byteOffset, options);\n  return byteOffset + glb.header.byteLength;\n}\n\nfunction parseGLBChunksSync(glb, dataView, byteOffset, options) {\n  while (byteOffset + 8 <= glb.header.byteLength) {\n    var chunkLength = dataView.getUint32(byteOffset + 0, LE);\n    var chunkFormat = dataView.getUint32(byteOffset + 4, LE);\n    byteOffset += GLB_CHUNK_HEADER_SIZE;\n\n    switch (chunkFormat) {\n      case GLB_CHUNK_TYPE_JSON:\n        parseJSONChunk(glb, dataView, byteOffset, chunkLength);\n        break;\n\n      case GLB_CHUNK_TYPE_BIN:\n        parseBINChunk(glb, dataView, byteOffset, chunkLength);\n        break;\n\n      case GLB_CHUNK_TYPE_JSON_XVIZ_DEPRECATED:\n        if (!options.strict) {\n          parseJSONChunk(glb, dataView, byteOffset, chunkLength);\n        }\n\n        break;\n\n      case GLB_CHUNK_TYPE_BIX_XVIZ_DEPRECATED:\n        if (!options.strict) {\n          parseBINChunk(glb, dataView, byteOffset, chunkLength);\n        }\n\n        break;\n\n      default:\n        break;\n    }\n\n    byteOffset += padToNBytes(chunkLength, 4);\n  }\n\n  return byteOffset;\n}\n\nfunction parseJSONChunk(glb, dataView, byteOffset, chunkLength) {\n  var jsonChunk = new Uint8Array(dataView.buffer, byteOffset, chunkLength);\n  var textDecoder = new TextDecoder('utf8');\n  var jsonText = textDecoder.decode(jsonChunk);\n  glb.json = JSON.parse(jsonText);\n  return padToNBytes(chunkLength, 4);\n}\n\nfunction parseBINChunk(glb, dataView, byteOffset, chunkLength) {\n  glb.header.hasBinChunk = true;\n  glb.binChunks.push({\n    byteOffset: byteOffset,\n    byteLength: chunkLength,\n    arrayBuffer: dataView.buffer\n  });\n  return padToNBytes(chunkLength, 4);\n}","map":{"version":3,"mappings":"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","names":["padToNBytes","assert","MAGIC_glTF","GLB_FILE_HEADER_SIZE","GLB_CHUNK_HEADER_SIZE","GLB_CHUNK_TYPE_JSON","GLB_CHUNK_TYPE_BIN","GLB_CHUNK_TYPE_JSON_XVIZ_DEPRECATED","GLB_CHUNK_TYPE_BIX_XVIZ_DEPRECATED","GLB_V1_CONTENT_FORMAT_JSON","LE","getMagicString","dataView","byteOffset","String","fromCharCode","getUint8","isGLB","arrayBuffer","options","DataView","magic","magic1","getUint32","parseGLBSync","glb","type","version","byteLength","Object","assign","header","hasBinChunk","json","binChunks","parseGLBV1","parseGLBV2","Error","contentLength","contentFormat","parseJSONChunk","parseBINChunk","parseGLBChunksSync","chunkLength","chunkFormat","strict","jsonChunk","Uint8Array","buffer","textDecoder","TextDecoder","jsonText","decode","JSON","parse","push"],"sources":["../../../../src/lib/parsers/parse-glb.ts"],"sourcesContent":["/* eslint-disable camelcase, max-statements */\n// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#glb-file-format-specification\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/1.0/Khronos/KHR_binary_glTF\nimport type {GLB} from '../types/glb-types';\nimport {padToNBytes, assert} from '@loaders.gl/loader-utils';\n\nexport type GLBParseOptions = {\n  magic?: number;\n  strict?: boolean;\n};\n\nconst MAGIC_glTF = 0x676c5446; // glTF in Big-Endian ASCII\n\nconst GLB_FILE_HEADER_SIZE = 12;\nconst GLB_CHUNK_HEADER_SIZE = 8;\n\nconst GLB_CHUNK_TYPE_JSON = 0x4e4f534a;\nconst GLB_CHUNK_TYPE_BIN = 0x004e4942;\nconst GLB_CHUNK_TYPE_JSON_XVIZ_DEPRECATED = 0; // DEPRECATED - Backward compatibility for old xviz files\nconst GLB_CHUNK_TYPE_BIX_XVIZ_DEPRECATED = 1; // DEPRECATED - Backward compatibility for old xviz files\n\nconst GLB_V1_CONTENT_FORMAT_JSON = 0x0;\n\nconst LE = true; // Binary GLTF is little endian.\n\nfunction getMagicString(dataView, byteOffset = 0) {\n  return `\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 0))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 1))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 2))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 3))}`;\n}\n\n// Check if a data view is a GLB\nexport function isGLB(\n  arrayBuffer: ArrayBuffer,\n  byteOffset: number = 0,\n  options: GLBParseOptions = {}\n): boolean {\n  const dataView = new DataView(arrayBuffer);\n  // Check that GLB Header starts with the magic number\n  const {magic = MAGIC_glTF} = options;\n  const magic1 = dataView.getUint32(byteOffset, false);\n  return magic1 === magic || magic1 === MAGIC_glTF;\n}\n\nexport default function parseGLBSync(\n  glb: GLB,\n  arrayBuffer: ArrayBuffer,\n  byteOffset: number = 0,\n  options: GLBParseOptions = {}\n) {\n  // Check that GLB Header starts with the magic number\n  const dataView = new DataView(arrayBuffer);\n\n  // Compare format with GLBLoader documentation\n  const type = getMagicString(dataView, byteOffset + 0);\n  const version = dataView.getUint32(byteOffset + 4, LE); // Version 2 of binary glTF container format\n  const byteLength = dataView.getUint32(byteOffset + 8, LE); // Total byte length of binary file\n\n  Object.assign(glb, {\n    // Put less important stuff in a header, to avoid clutter\n    header: {\n      byteOffset, // Byte offset into the initial arrayBuffer\n      byteLength,\n      hasBinChunk: false\n    },\n\n    type,\n    version,\n\n    json: {},\n    binChunks: []\n  } as GLB);\n\n  byteOffset += GLB_FILE_HEADER_SIZE;\n\n  switch (glb.version) {\n    case 1:\n      // eslint-disable-next-line\n      return parseGLBV1(glb, dataView, byteOffset);\n    case 2:\n      // eslint-disable-next-line\n      return parseGLBV2(glb, dataView, byteOffset, (options = {}));\n    default:\n      throw new Error(`Invalid GLB version ${glb.version}. Only supports v1 and v2.`);\n  }\n}\n\nfunction parseGLBV1(glb: GLB, dataView: DataView, byteOffset: number): number {\n  // Sanity: ensure file is big enough to hold at least the headers\n  assert(glb.header.byteLength > GLB_FILE_HEADER_SIZE + GLB_CHUNK_HEADER_SIZE);\n\n  // Explanation of GLB structure:\n  // https://cloud.githubusercontent.com/assets/3479527/22600725/36b87122-ea55-11e6-9d40-6fd42819fcab.png\n  const contentLength = dataView.getUint32(byteOffset + 0, LE); // Byte length of chunk\n  const contentFormat = dataView.getUint32(byteOffset + 4, LE); // Chunk format as uint32\n  byteOffset += GLB_CHUNK_HEADER_SIZE;\n\n  // GLB v1 only supports a single chunk type\n  assert(contentFormat === GLB_V1_CONTENT_FORMAT_JSON);\n\n  parseJSONChunk(glb, dataView, byteOffset, contentLength);\n  // No need to call the function padToBytes() from parseJSONChunk()\n  byteOffset += contentLength;\n  byteOffset += parseBINChunk(glb, dataView, byteOffset, glb.header.byteLength);\n\n  return byteOffset;\n}\n\nfunction parseGLBV2(\n  glb: GLB,\n  dataView: DataView,\n  byteOffset: number,\n  options: GLBParseOptions\n): number {\n  // Sanity: ensure file is big enough to hold at least the first chunk header\n  assert(glb.header.byteLength > GLB_FILE_HEADER_SIZE + GLB_CHUNK_HEADER_SIZE);\n\n  parseGLBChunksSync(glb, dataView, byteOffset, options);\n\n  return byteOffset + glb.header.byteLength;\n}\n\nfunction parseGLBChunksSync(\n  glb: GLB,\n  dataView: DataView,\n  byteOffset: number,\n  options: GLBParseOptions\n) {\n  // Per spec we must iterate over chunks, ignoring all except JSON and BIN\n  // Iterate as long as there is space left for another chunk header\n  while (byteOffset + 8 <= glb.header.byteLength) {\n    const chunkLength = dataView.getUint32(byteOffset + 0, LE); // Byte length of chunk\n    const chunkFormat = dataView.getUint32(byteOffset + 4, LE); // Chunk format as uint32\n    byteOffset += GLB_CHUNK_HEADER_SIZE;\n\n    // Per spec we must iterate over chunks, ignoring all except JSON and BIN\n    switch (chunkFormat) {\n      case GLB_CHUNK_TYPE_JSON:\n        parseJSONChunk(glb, dataView, byteOffset, chunkLength);\n        break;\n      case GLB_CHUNK_TYPE_BIN:\n        parseBINChunk(glb, dataView, byteOffset, chunkLength);\n        break;\n\n      // Backward compatibility for very old xviz files\n      case GLB_CHUNK_TYPE_JSON_XVIZ_DEPRECATED:\n        if (!options.strict) {\n          parseJSONChunk(glb, dataView, byteOffset, chunkLength);\n        }\n        break;\n      case GLB_CHUNK_TYPE_BIX_XVIZ_DEPRECATED:\n        if (!options.strict) {\n          parseBINChunk(glb, dataView, byteOffset, chunkLength);\n        }\n        break;\n\n      default:\n        // Ignore, per spec\n        // console.warn(`Unknown GLB chunk type`); // eslint-disable-line\n        break;\n    }\n\n    byteOffset += padToNBytes(chunkLength, 4);\n  }\n\n  return byteOffset;\n}\n\n// Parse a GLB JSON chunk\nfunction parseJSONChunk(glb: GLB, dataView: DataView, byteOffset: number, chunkLength: number) {\n  // 1. Create a \"view\" of the binary encoded JSON data inside the GLB\n  const jsonChunk = new Uint8Array(dataView.buffer, byteOffset, chunkLength);\n\n  // 2. Decode the JSON binary array into clear text\n  const textDecoder = new TextDecoder('utf8');\n  const jsonText = textDecoder.decode(jsonChunk);\n\n  // 3. Parse the JSON text into a JavaScript data structure\n  glb.json = JSON.parse(jsonText);\n\n  return padToNBytes(chunkLength, 4);\n}\n\n// Parse a GLB BIN chunk\nfunction parseBINChunk(glb: GLB, dataView, byteOffset, chunkLength) {\n  // Note: BIN chunk can be optional\n  glb.header.hasBinChunk = true;\n  glb.binChunks.push({\n    byteOffset,\n    byteLength: chunkLength,\n    arrayBuffer: dataView.buffer\n    // TODO - copy, or create typed array view?\n  });\n\n  return padToNBytes(chunkLength, 4);\n}\n"]},"metadata":{},"sourceType":"module"}