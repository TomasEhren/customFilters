{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nvar GEOM_TYPES = ['points', 'lines', 'polygons'];\nexport default function findIndexBinary(data, uniqueIdProperty, featureId, layerName) {\n  var _iterator = _createForOfIteratorHelper(GEOM_TYPES),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var gt = _step.value;\n      var index = data[gt] && findIndexByType(data[gt], uniqueIdProperty, featureId, layerName);\n\n      if (index >= 0) {\n        return index;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return -1;\n}\n\nfunction findIndexByType(geomData, uniqueIdProperty, featureId, layerName) {\n  var featureIds = geomData.featureIds.value;\n\n  if (!featureIds.length) {\n    return -1;\n  }\n\n  var startFeatureIndex = 0;\n  var endFeatureIndex = featureIds[featureIds.length - 1] + 1;\n\n  if (layerName) {\n    var layerRange = getLayerRange(geomData, layerName);\n\n    if (layerRange) {\n      startFeatureIndex = layerRange[0];\n      endFeatureIndex = layerRange[1] + 1;\n    } else {\n      return -1;\n    }\n  }\n\n  var featureIndex = -1;\n\n  if (uniqueIdProperty in geomData.numericProps) {\n    var vertexIndex = geomData.numericProps[uniqueIdProperty].value.findIndex(function (x, i) {\n      return x === featureId && featureIds[i] >= startFeatureIndex && featureIds[i] < endFeatureIndex;\n    });\n    return vertexIndex >= 0 ? geomData.globalFeatureIds.value[vertexIndex] : -1;\n  } else if (uniqueIdProperty) {\n    featureIndex = findIndex(geomData.properties, function (elem) {\n      return elem[uniqueIdProperty] === featureId;\n    }, startFeatureIndex, endFeatureIndex);\n  } else {\n    featureIndex = findIndex(geomData.fields, function (elem) {\n      return elem.id === featureId;\n    }, startFeatureIndex, endFeatureIndex);\n  }\n\n  return featureIndex >= 0 ? getGlobalFeatureId(geomData, featureIndex) : -1;\n}\n\nfunction getLayerRange(geomData, layerName) {\n  if (!geomData.__layers) {\n    var layerNames = {};\n    var properties = geomData.properties;\n\n    for (var i = 0; i < properties.length; i++) {\n      var key = properties[i].layerName;\n\n      if (!key) {} else if (layerNames[key]) {\n        layerNames[key][1] = i;\n      } else {\n        layerNames[key] = [i, i];\n      }\n    }\n\n    geomData.__layers = layerNames;\n  }\n\n  return geomData.__layers[layerName];\n}\n\nfunction getGlobalFeatureId(geomData, featureIndex) {\n  if (!geomData.__ids) {\n    var result = [];\n    var featureIds = geomData.featureIds.value;\n    var globalFeatureIds = geomData.globalFeatureIds.value;\n\n    for (var i = 0; i < featureIds.length; i++) {\n      result[featureIds[i]] = globalFeatureIds[i];\n    }\n\n    geomData.__ids = result;\n  }\n\n  return geomData.__ids[featureIndex];\n}\n\nfunction findIndex(array, predicate, startIndex, endIndex) {\n  for (var i = startIndex; i < endIndex; i++) {\n    if (predicate(array[i], i)) {\n      return i;\n    }\n  }\n\n  return -1;\n}","map":{"version":3,"mappings":"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","names":["GEOM_TYPES","findIndexBinary","data","uniqueIdProperty","featureId","layerName","gt","index","findIndexByType","geomData","featureIds","value","length","startFeatureIndex","endFeatureIndex","layerRange","getLayerRange","featureIndex","numericProps","vertexIndex","findIndex","x","i","globalFeatureIds","properties","elem","fields","id","getGlobalFeatureId","__layers","layerNames","key","__ids","result","array","predicate","startIndex","endIndex"],"sources":["../../../src/mvt-layer/find-index-binary.js"],"sourcesContent":["const GEOM_TYPES = ['points', 'lines', 'polygons'];\n/**\n * Return the index of feature (numericProps or featureIds) for given feature id\n * Example: findIndexBinary(data, 'id', 33) will return the index in the array of numericProps\n * of the feature 33.\n * @param {Object} data - The data in binary format\n * @param {String} uniqueIdProperty - Name of the unique id property\n * @param {Number|String} featureId - feature id to find\n * @param {String} layerName - the layer to search in\n */\nexport default function findIndexBinary(data, uniqueIdProperty, featureId, layerName) {\n  for (const gt of GEOM_TYPES) {\n    const index = data[gt] && findIndexByType(data[gt], uniqueIdProperty, featureId, layerName);\n    if (index >= 0) {\n      return index;\n    }\n  }\n\n  return -1;\n}\n\nfunction findIndexByType(geomData, uniqueIdProperty, featureId, layerName) {\n  const featureIds = geomData.featureIds.value;\n\n  if (!featureIds.length) {\n    return -1;\n  }\n\n  let startFeatureIndex = 0;\n  let endFeatureIndex = featureIds[featureIds.length - 1] + 1;\n  if (layerName) {\n    const layerRange = getLayerRange(geomData, layerName);\n    if (layerRange) {\n      startFeatureIndex = layerRange[0];\n      endFeatureIndex = layerRange[1] + 1;\n    } else {\n      return -1;\n    }\n  }\n\n  // Look for the uniqueIdProperty\n  let featureIndex = -1;\n  if (uniqueIdProperty in geomData.numericProps) {\n    const vertexIndex = geomData.numericProps[uniqueIdProperty].value.findIndex(\n      (x, i) =>\n        x === featureId && featureIds[i] >= startFeatureIndex && featureIds[i] < endFeatureIndex\n    );\n    return vertexIndex >= 0 ? geomData.globalFeatureIds.value[vertexIndex] : -1;\n  } else if (uniqueIdProperty) {\n    featureIndex = findIndex(\n      geomData.properties,\n      elem => elem[uniqueIdProperty] === featureId,\n      startFeatureIndex,\n      endFeatureIndex\n    );\n  } else {\n    featureIndex = findIndex(\n      geomData.fields,\n      elem => elem.id === featureId,\n      startFeatureIndex,\n      endFeatureIndex\n    );\n  }\n  return featureIndex >= 0 ? getGlobalFeatureId(geomData, featureIndex) : -1;\n}\n\n// Returns [firstFeatureIndex, lastFeatureIndex]\n// MVTLoader parses tiles layer-by-layer, so each layer is a continuous range\nfunction getLayerRange(geomData, layerName) {\n  if (!geomData.__layers) {\n    // Cache a map from properties.layerName to index ranges\n    const layerNames = {};\n    const {properties} = geomData;\n    for (let i = 0; i < properties.length; i++) {\n      const {layerName: key} = properties[i];\n      if (!key) {\n        // ignore\n      } else if (layerNames[key]) {\n        layerNames[key][1] = i;\n      } else {\n        layerNames[key] = [i, i];\n      }\n    }\n    geomData.__layers = layerNames;\n  }\n  return geomData.__layers[layerName];\n}\n\n// Returns global feature id\nfunction getGlobalFeatureId(geomData, featureIndex) {\n  if (!geomData.__ids) {\n    // Cache a map from featureId to globalFeatureId\n    const result = [];\n    const featureIds = geomData.featureIds.value;\n    const globalFeatureIds = geomData.globalFeatureIds.value;\n    for (let i = 0; i < featureIds.length; i++) {\n      result[featureIds[i]] = globalFeatureIds[i];\n    }\n    geomData.__ids = result;\n  }\n  return geomData.__ids[featureIndex];\n}\n\n// Like array.findIndex, but only search within a range\nfunction findIndex(array, predicate, startIndex, endIndex) {\n  for (let i = startIndex; i < endIndex; i++) {\n    if (predicate(array[i], i)) {\n      return i;\n    }\n  }\n  return -1;\n}\n"]},"metadata":{},"sourceType":"module"}