{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport MathArray from './math-array';\nimport { checkNumber } from '../../lib/validators';\nimport { config } from '../../lib/common';\nimport assert from '../../lib/assert';\n\nvar Matrix = /*#__PURE__*/function (_MathArray) {\n  _inherits(Matrix, _MathArray);\n\n  var _super = _createSuper(Matrix);\n\n  function Matrix() {\n    _classCallCheck(this, Matrix);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Matrix, [{\n    key: \"ELEMENTS\",\n    get: function get() {\n      assert(false);\n      return 0;\n    }\n  }, {\n    key: \"RANK\",\n    get: function get() {\n      assert(false);\n      return 0;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var string = '[';\n\n      if (config.printRowMajor) {\n        string += 'row-major:';\n\n        for (var row = 0; row < this.RANK; ++row) {\n          for (var col = 0; col < this.RANK; ++col) {\n            string += \" \".concat(this[col * this.RANK + row]);\n          }\n        }\n      } else {\n        string += 'column-major:';\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          string += \" \".concat(this[i]);\n        }\n      }\n\n      string += ']';\n      return string;\n    }\n  }, {\n    key: \"getElementIndex\",\n    value: function getElementIndex(row, col) {\n      return col * this.RANK + row;\n    }\n  }, {\n    key: \"getElement\",\n    value: function getElement(row, col) {\n      return this[col * this.RANK + row];\n    }\n  }, {\n    key: \"setElement\",\n    value: function setElement(row, col, value) {\n      this[col * this.RANK + row] = checkNumber(value);\n      return this;\n    }\n  }, {\n    key: \"getColumn\",\n    value: function getColumn(columnIndex) {\n      var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Array(this.RANK).fill(-0);\n      var firstIndex = columnIndex * this.RANK;\n\n      for (var i = 0; i < this.RANK; ++i) {\n        result[i] = this[firstIndex + i];\n      }\n\n      return result;\n    }\n  }, {\n    key: \"setColumn\",\n    value: function setColumn(columnIndex, columnVector) {\n      var firstIndex = columnIndex * this.RANK;\n\n      for (var i = 0; i < this.RANK; ++i) {\n        this[firstIndex + i] = columnVector[i];\n      }\n\n      return this;\n    }\n  }]);\n\n  return Matrix;\n}(MathArray);\n\nexport { Matrix as default };","map":{"version":3,"mappings":";;;;AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAAQC,WAAR,QAA0B,sBAA1B;AACA,SAAQC,MAAR,QAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;;IAEqBC,M;;;;;;;;;;;;;SAEP,eAAG;MACbD,MAAM,CAAC,KAAD,CAANA;MACA,OAAO,CAAP;IACD;;;SAEO,eAAG;MACTA,MAAM,CAAC,KAAD,CAANA;MACA,OAAO,CAAP;IACD;;;WAaDE,oBAAW;MACT,IAAIC,MAAM,GAAG,GAAb;;MACA,IAAIJ,MAAM,CAACK,aAAX,EAA0B;QACxBD,MAAM,IAAI,YAAVA;;QACA,KAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKC,IAA7B,EAAmC,EAAED,GAArC,EAA0C;UACxC,KAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKD,IAA7B,EAAmC,EAAEC,GAArC,EAA0C;YACxCJ,MAAM,eAAQ,KAAKI,GAAG,GAAG,KAAKD,IAAXC,GAAkBF,GAAvB,CAAR,CAANF;UACD;QACF;MANH,OAOO;QACLA,MAAM,IAAI,eAAVA;;QACA,KAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,QAAzB,EAAmC,EAAED,CAArC,EAAwC;UACtCL,MAAM,eAAQ,KAAKK,CAAL,CAAR,CAANL;QACD;MACF;;MACDA,MAAM,IAAI,GAAVA;MACA,OAAOA,MAAP;IACD;;;WAEDO,yBAAgBL,GAAhBK,EAAqBH,GAArBG,EAA0B;MACxB,OAAOH,GAAG,GAAG,KAAKD,IAAXC,GAAkBF,GAAzB;IACD;;;WAGDM,oBAAWN,GAAXM,EAAgBJ,GAAhBI,EAAqB;MACnB,OAAO,KAAKJ,GAAG,GAAG,KAAKD,IAAXC,GAAkBF,GAAvB,CAAP;IACD;;;WAGDO,oBAAWP,GAAXO,EAAgBL,GAAhBK,EAAqBC,KAArBD,EAA4B;MAC1B,KAAKL,GAAG,GAAG,KAAKD,IAAXC,GAAkBF,GAAvB,IAA8BP,WAAW,CAACe,KAAD,CAAzC;MACA,OAAO,IAAP;IACD;;;WAEDC,mBAAUC,WAAVD,EAA+D;MAAA,IAAxCE,MAAwC,uEAA/B,IAAIC,KAAJ,CAAU,KAAKX,IAAf,EAAqBY,IAArB,CAA0B,CAAC,CAA3B,CAA+B;MAC7D,IAAMC,UAAU,GAAGJ,WAAW,GAAG,KAAKT,IAAtC;;MACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKF,IAAzB,EAA+B,EAAEE,CAAjC,EAAoC;QAClCQ,MAAM,CAACR,CAAD,CAANQ,GAAY,KAAKG,UAAU,GAAGX,CAAlB,CAAZQ;MACD;;MACD,OAAOA,MAAP;IACD;;;WAEDI,mBAAUL,WAAVK,EAAuBC,YAAvBD,EAAqC;MACnC,IAAMD,UAAU,GAAGJ,WAAW,GAAG,KAAKT,IAAtC;;MACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKF,IAAzB,EAA+B,EAAEE,CAAjC,EAAoC;QAClC,KAAKW,UAAU,GAAGX,CAAlB,IAAuBa,YAAY,CAACb,CAAD,CAAnC;MACD;;MACD,OAAO,IAAP;IACD;;;;EAvEiCX,S;;SAAfI,M","names":["MathArray","checkNumber","config","assert","Matrix","toString","string","printRowMajor","row","RANK","col","i","ELEMENTS","getElementIndex","getElement","setElement","value","getColumn","columnIndex","result","Array","fill","firstIndex","setColumn","columnVector"],"sources":["../../../../src/classes/base/matrix.js"],"sourcesContent":["import MathArray from './math-array';\nimport {checkNumber} from '../../lib/validators';\nimport {config} from '../../lib/common';\nimport assert from '../../lib/assert';\n\nexport default class Matrix extends MathArray {\n  // Defined by derived class\n  get ELEMENTS() {\n    assert(false);\n    return 0;\n  }\n\n  get RANK() {\n    assert(false);\n    return 0;\n  }\n\n  // fromObject(object) {\n  //   const array = object.elements;\n  //   return this.fromRowMajor(array);\n  // }\n\n  // toObject(object) {\n  //   const array = object.elements;\n  //   this.toRowMajor(array);\n  //   return object;\n  // }\n\n  toString() {\n    let string = '[';\n    if (config.printRowMajor) {\n      string += 'row-major:';\n      for (let row = 0; row < this.RANK; ++row) {\n        for (let col = 0; col < this.RANK; ++col) {\n          string += ` ${this[col * this.RANK + row]}`;\n        }\n      }\n    } else {\n      string += 'column-major:';\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        string += ` ${this[i]}`;\n      }\n    }\n    string += ']';\n    return string;\n  }\n\n  getElementIndex(row, col) {\n    return col * this.RANK + row;\n  }\n\n  // By default assumes row major indices\n  getElement(row, col) {\n    return this[col * this.RANK + row];\n  }\n\n  // By default assumes row major indices\n  setElement(row, col, value) {\n    this[col * this.RANK + row] = checkNumber(value);\n    return this;\n  }\n\n  getColumn(columnIndex, result = new Array(this.RANK).fill(-0)) {\n    const firstIndex = columnIndex * this.RANK;\n    for (let i = 0; i < this.RANK; ++i) {\n      result[i] = this[firstIndex + i];\n    }\n    return result;\n  }\n\n  setColumn(columnIndex, columnVector) {\n    const firstIndex = columnIndex * this.RANK;\n    for (let i = 0; i < this.RANK; ++i) {\n      this[firstIndex + i] = columnVector[i];\n    }\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}