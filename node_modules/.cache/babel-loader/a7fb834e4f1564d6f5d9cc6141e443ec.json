{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { log } from '@luma.gl/gltools';\nimport { Stats } from 'probe.gl';\nimport { isBrowser, global } from 'probe.gl/env';\nvar VERSION = typeof \"8.5.10\" !== 'undefined' ? \"8.5.10\" : 'untranspiled source';\nvar STARTUP_MESSAGE = 'set luma.log.level=1 (or higher) to trace rendering';\n\nvar StatsManager = /*#__PURE__*/function () {\n  function StatsManager() {\n    _classCallCheck(this, StatsManager);\n\n    this.stats = new Map();\n  }\n\n  _createClass(StatsManager, [{\n    key: \"get\",\n    value: function get(name) {\n      if (!this.stats.has(name)) {\n        this.stats.set(name, new Stats({\n          id: name\n        }));\n      }\n\n      return this.stats.get(name);\n    }\n  }]);\n\n  return StatsManager;\n}();\n\nvar lumaStats = new StatsManager();\n\nif (global.luma && global.luma.VERSION !== VERSION) {\n  throw new Error(\"luma.gl - multiple VERSIONs detected: \".concat(global.luma.VERSION, \" vs \").concat(VERSION));\n}\n\nif (!global.luma) {\n  if (isBrowser()) {\n    log.log(1, \"luma.gl \".concat(VERSION, \" - \").concat(STARTUP_MESSAGE))();\n  }\n\n  global.luma = global.luma || {\n    VERSION: VERSION,\n    version: VERSION,\n    log: log,\n    stats: lumaStats,\n    globals: {\n      modules: {},\n      nodeIO: {}\n    }\n  };\n}\n\nexport { lumaStats };\nexport default global.luma;","map":{"version":3,"mappings":";;AAAA,SAAQA,GAAR,QAAkB,kBAAlB;AACA,SAAQC,KAAR,QAAoB,UAApB;AACA,SAAQC,SAAR,EAAmBC,MAAnB,QAAgC,cAAhC;AAKA,IAAMC,OAAO,GAAG,oBAAuB,WAAvB,cAAmD,qBAAnE;AAEA,IAAMC,eAAe,GAAG,qDAAxB;;IAKMC,Y;EACJC,wBAAc;IAAA;;IACZ,KAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;EACD;;;;WAEDC,aAAIC,IAAJD,EAAU;MACR,IAAI,CAAC,KAAKF,KAAL,CAAWI,GAAX,CAAeD,IAAf,CAAL,EAA2B;QACzB,KAAKH,KAAL,CAAWK,GAAX,CAAeF,IAAf,EAAqB,IAAIV,KAAJ,CAAU;UAACa,EAAE,EAAEH;QAAL,CAAV,CAArB;MACD;;MAED,OAAO,KAAKH,KAAL,CAAWE,GAAX,CAAeC,IAAf,CAAP;IACD;;;;;;AAGH,IAAMI,SAAS,GAAG,IAAIT,YAAJ,EAAlB;;AAEA,IAAIH,MAAM,CAACa,IAAPb,IAAeA,MAAM,CAACa,IAAPb,CAAYC,OAAZD,KAAwBC,OAA3C,EAAoD;EAClD,MAAM,IAAIa,KAAJ,iDAAmDd,MAAM,CAACa,IAAPb,CAAYC,OAA/D,iBAA6EA,OAA7E,EAAN;AACD;;AAED,IAAI,CAACD,MAAM,CAACa,IAAZ,EAAkB;EAChB,IAAId,SAAS,EAAb,EAAiB;IACfF,GAAG,CAACA,GAAJA,CAAQ,CAARA,oBAAsBI,OAAtBJ,gBAAmCK,eAAnCL;EACD;;EAEDG,MAAM,CAACa,IAAPb,GAAcA,MAAM,CAACa,IAAPb,IAAe;IAC3BC,OAD2B,EAC3BA,OAD2B;IAE3Bc,OAAO,EAAEd,OAFkB;IAG3BJ,GAH2B,EAG3BA,GAH2B;IAO3BQ,KAAK,EAAEO,SAPoB;IAc3BI,OAAO,EAAE;MACPC,OAAO,EAAE,EADF;MAEPC,MAAM,EAAE;IAFD;EAdkB,CAA7BlB;AAmBD;;AAED,SAAQY,SAAR;AACA,eAAeZ,MAAM,CAACa,IAAtB","names":["log","Stats","isBrowser","global","VERSION","STARTUP_MESSAGE","StatsManager","constructor","stats","Map","get","name","has","set","id","lumaStats","luma","Error","version","globals","modules","nodeIO"],"sources":["../../src/init.js"],"sourcesContent":["import {log} from '@luma.gl/gltools';\nimport {Stats} from 'probe.gl';\nimport {isBrowser, global} from 'probe.gl/env';\n\n// Version detection using babel plugin\n/* global __VERSION__ */\n// @ts-ignore\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'untranspiled source';\n\nconst STARTUP_MESSAGE = 'set luma.log.level=1 (or higher) to trace rendering';\n// Assign luma.log.level in console to control logging: \\\n// 0: none, 1: minimal, 2: verbose, 3: attribute/uniforms, 4: gl logs\n// luma.log.break[], set to gl funcs, luma.log.profile[] set to model names`;\n\nclass StatsManager {\n  constructor() {\n    this.stats = new Map();\n  }\n\n  get(name) {\n    if (!this.stats.has(name)) {\n      this.stats.set(name, new Stats({id: name}));\n    }\n\n    return this.stats.get(name);\n  }\n}\n\nconst lumaStats = new StatsManager();\n\nif (global.luma && global.luma.VERSION !== VERSION) {\n  throw new Error(`luma.gl - multiple VERSIONs detected: ${global.luma.VERSION} vs ${VERSION}`);\n}\n\nif (!global.luma) {\n  if (isBrowser()) {\n    log.log(1, `luma.gl ${VERSION} - ${STARTUP_MESSAGE}`)();\n  }\n\n  global.luma = global.luma || {\n    VERSION,\n    version: VERSION,\n    log,\n\n    // A global stats object that various components can add information to\n    // E.g. see webgl/resource.js\n    stats: lumaStats,\n\n    // Keep some luma globals in a sub-object\n    // This allows us to dynamically detect if certain modules have been\n    // included (such as IO and headless) and enable related functionality,\n    // without unconditionally requiring and thus bundling big dependencies\n    // into the app.\n    globals: {\n      modules: {},\n      nodeIO: {}\n    }\n  };\n}\n\nexport {lumaStats};\nexport default global.luma;\n"]},"metadata":{},"sourceType":"module"}