{"ast":null,"code":"var DOWN_EVENT = 1;\nvar MOVE_EVENT = 2;\nvar UP_EVENT = 4;\nvar MOUSE_EVENTS = {\n  pointerdown: DOWN_EVENT,\n  pointermove: MOVE_EVENT,\n  pointerup: UP_EVENT,\n  mousedown: DOWN_EVENT,\n  mousemove: MOVE_EVENT,\n  mouseup: UP_EVENT\n};\nvar MOUSE_EVENT_WHICH_LEFT = 1;\nvar MOUSE_EVENT_WHICH_MIDDLE = 2;\nvar MOUSE_EVENT_WHICH_RIGHT = 3;\nvar MOUSE_EVENT_BUTTON_LEFT = 0;\nvar MOUSE_EVENT_BUTTON_MIDDLE = 1;\nvar MOUSE_EVENT_BUTTON_RIGHT = 2;\nvar MOUSE_EVENT_BUTTONS_LEFT_MASK = 1;\nvar MOUSE_EVENT_BUTTONS_RIGHT_MASK = 2;\nvar MOUSE_EVENT_BUTTONS_MIDDLE_MASK = 4;\nexport function whichButtons(event) {\n  var eventType = MOUSE_EVENTS[event.srcEvent.type];\n\n  if (!eventType) {\n    return null;\n  }\n\n  var _event$srcEvent = event.srcEvent,\n      buttons = _event$srcEvent.buttons,\n      button = _event$srcEvent.button,\n      which = _event$srcEvent.which;\n  var leftButton = false;\n  var middleButton = false;\n  var rightButton = false;\n\n  if (eventType === UP_EVENT || eventType === MOVE_EVENT && !Number.isFinite(buttons)) {\n    leftButton = which === MOUSE_EVENT_WHICH_LEFT;\n    middleButton = which === MOUSE_EVENT_WHICH_MIDDLE;\n    rightButton = which === MOUSE_EVENT_WHICH_RIGHT;\n  } else if (eventType === MOVE_EVENT) {\n    leftButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_LEFT_MASK);\n    middleButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_MIDDLE_MASK);\n    rightButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_RIGHT_MASK);\n  } else if (eventType === DOWN_EVENT) {\n    leftButton = button === MOUSE_EVENT_BUTTON_LEFT;\n    middleButton = button === MOUSE_EVENT_BUTTON_MIDDLE;\n    rightButton = button === MOUSE_EVENT_BUTTON_RIGHT;\n  }\n\n  return {\n    leftButton: leftButton,\n    middleButton: middleButton,\n    rightButton: rightButton\n  };\n}\nexport function getOffsetPosition(event, rootElement) {\n  var srcEvent = event.srcEvent;\n\n  if (!event.center && !Number.isFinite(srcEvent.clientX)) {\n    return null;\n  }\n\n  var center = event.center || {\n    x: srcEvent.clientX,\n    y: srcEvent.clientY\n  };\n  var rect = rootElement.getBoundingClientRect();\n  var scaleX = rect.width / rootElement.offsetWidth || 1;\n  var scaleY = rect.height / rootElement.offsetHeight || 1;\n  var offsetCenter = {\n    x: (center.x - rect.left - rootElement.clientLeft) / scaleX,\n    y: (center.y - rect.top - rootElement.clientTop) / scaleY\n  };\n  return {\n    center: center,\n    offsetCenter: offsetCenter\n  };\n}","map":{"version":3,"mappings":"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","names":["DOWN_EVENT","MOVE_EVENT","UP_EVENT","MOUSE_EVENTS","pointerdown","pointermove","pointerup","mousedown","mousemove","mouseup","MOUSE_EVENT_WHICH_LEFT","MOUSE_EVENT_WHICH_MIDDLE","MOUSE_EVENT_WHICH_RIGHT","MOUSE_EVENT_BUTTON_LEFT","MOUSE_EVENT_BUTTON_MIDDLE","MOUSE_EVENT_BUTTON_RIGHT","MOUSE_EVENT_BUTTONS_LEFT_MASK","MOUSE_EVENT_BUTTONS_RIGHT_MASK","MOUSE_EVENT_BUTTONS_MIDDLE_MASK","whichButtons","event","eventType","srcEvent","type","buttons","button","which","leftButton","middleButton","rightButton","Number","isFinite","Boolean","getOffsetPosition","rootElement","center","clientX","x","y","clientY","rect","getBoundingClientRect","scaleX","width","offsetWidth","scaleY","height","offsetHeight","offsetCenter","left","clientLeft","top","clientTop"],"sources":["../../../src/utils/event-utils.js"],"sourcesContent":["/* Constants */\nconst DOWN_EVENT = 1;\nconst MOVE_EVENT = 2;\nconst UP_EVENT = 4;\nconst MOUSE_EVENTS = {\n  pointerdown: DOWN_EVENT,\n  pointermove: MOVE_EVENT,\n  pointerup: UP_EVENT,\n  mousedown: DOWN_EVENT,\n  mousemove: MOVE_EVENT,\n  mouseup: UP_EVENT\n};\n\n// MouseEvent.which https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/which\nconst MOUSE_EVENT_WHICH_LEFT = 1;\nconst MOUSE_EVENT_WHICH_MIDDLE = 2;\nconst MOUSE_EVENT_WHICH_RIGHT = 3;\n// MouseEvent.button https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\nconst MOUSE_EVENT_BUTTON_LEFT = 0;\nconst MOUSE_EVENT_BUTTON_MIDDLE = 1;\nconst MOUSE_EVENT_BUTTON_RIGHT = 2;\n// MouseEvent.buttons https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\nconst MOUSE_EVENT_BUTTONS_LEFT_MASK = 1;\nconst MOUSE_EVENT_BUTTONS_RIGHT_MASK = 2;\nconst MOUSE_EVENT_BUTTONS_MIDDLE_MASK = 4;\n\n/**\n * Extract the involved mouse button\n */\nexport function whichButtons(event) {\n  const eventType = MOUSE_EVENTS[event.srcEvent.type];\n  if (!eventType) {\n    // Not a mouse evet\n    return null;\n  }\n\n  const {buttons, button, which} = event.srcEvent;\n  let leftButton = false;\n  let middleButton = false;\n  let rightButton = false;\n\n  if (\n    // button is up, need to find out which one was pressed before\n    eventType === UP_EVENT ||\n    // moving but does not support `buttons` API\n    (eventType === MOVE_EVENT && !Number.isFinite(buttons))\n  ) {\n    leftButton = which === MOUSE_EVENT_WHICH_LEFT;\n    middleButton = which === MOUSE_EVENT_WHICH_MIDDLE;\n    rightButton = which === MOUSE_EVENT_WHICH_RIGHT;\n  } else if (eventType === MOVE_EVENT) {\n    leftButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_LEFT_MASK);\n    middleButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_MIDDLE_MASK);\n    rightButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_RIGHT_MASK);\n  } else if (eventType === DOWN_EVENT) {\n    leftButton = button === MOUSE_EVENT_BUTTON_LEFT;\n    middleButton = button === MOUSE_EVENT_BUTTON_MIDDLE;\n    rightButton = button === MOUSE_EVENT_BUTTON_RIGHT;\n  }\n\n  return {leftButton, middleButton, rightButton};\n}\n\n/**\n * Calculate event position relative to the root element\n */\nexport function getOffsetPosition(event, rootElement) {\n  const {srcEvent} = event;\n\n  // `center` is a hammer.js event property\n  if (!event.center && !Number.isFinite(srcEvent.clientX)) {\n    // Not a gestural event\n    return null;\n  }\n\n  const center = event.center || {\n    x: srcEvent.clientX,\n    y: srcEvent.clientY\n  };\n\n  const rect = rootElement.getBoundingClientRect();\n\n  // Fix scale for map affected by a CSS transform.\n  // See https://stackoverflow.com/a/26893663/3528533\n  const scaleX = rect.width / rootElement.offsetWidth || 1;\n  const scaleY = rect.height / rootElement.offsetHeight || 1;\n\n  // Calculate center relative to the root element\n  const offsetCenter = {\n    x: (center.x - rect.left - rootElement.clientLeft) / scaleX,\n    y: (center.y - rect.top - rootElement.clientTop) / scaleY\n  };\n\n  return {center, offsetCenter};\n}\n"]},"metadata":{},"sourceType":"module"}