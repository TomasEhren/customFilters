{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport GLTFScenegraph from '../../api/gltf-scenegraph';\nvar KHR_MATERIALS_UNLIT = 'KHR_materials_unlit';\nexport var name = KHR_MATERIALS_UNLIT;\nexport function decode(_x) {\n  return _decode.apply(this, arguments);\n}\n\nfunction _decode() {\n  _decode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(gltfData) {\n    var gltfScenegraph, json, _iterator2, _step2, material, extension;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            gltfScenegraph = new GLTFScenegraph(gltfData);\n            json = gltfScenegraph.json;\n            gltfScenegraph.removeExtension(KHR_MATERIALS_UNLIT);\n            _iterator2 = _createForOfIteratorHelper(json.materials || []);\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                material = _step2.value;\n                extension = material.extensions && material.extensions.KHR_materials_unlit;\n\n                if (extension) {\n                  material.unlit = true;\n                }\n\n                gltfScenegraph.removeObjectExtension(material, KHR_MATERIALS_UNLIT);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _decode.apply(this, arguments);\n}\n\nexport function encode(gltfData) {\n  var gltfScenegraph = new GLTFScenegraph(gltfData);\n  var json = gltfScenegraph.json;\n\n  if (gltfScenegraph.materials) {\n    var _iterator = _createForOfIteratorHelper(json.materials || []),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var material = _step.value;\n\n        if (material.unlit) {\n          delete material.unlit;\n          gltfScenegraph.addObjectExtension(material, KHR_MATERIALS_UNLIT, {});\n          gltfScenegraph.addExtension(KHR_MATERIALS_UNLIT);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n}","map":{"version":3,"mappings":";;;AAKA,OAAOA,cAAP,MAA2B,2BAA3B;AAEA,IAAMC,mBAAmB,GAAG,qBAA5B;AAEA,OAAO,IAAMC,IAAI,GAAGD,mBAAb;AAEP,gBAAsBE,MAAtB;EAAA;AAAA;;;qEAAO,iBAAsBC,QAAtB;IAAA;;IAAA;MAAA;QAAA;UAAA;YACCC,cADD,GACkB,IAAIL,cAAJ,CAAmBI,QAAnB,CADlB;YAEEE,IAFF,GAEUD,cAFV,CAEEC,IAFF;YAKLD,cAAc,CAACE,eAAfF,CAA+BJ,mBAA/BI;YALK,wCASkBC,IAAI,CAACE,SAALF,IAAkB,EATpC;;YAAA;cASL,uDAA6C;gBAAlCG,QAAkC;gBACrCC,SADqC,GACzBD,QAAQ,CAACE,UAATF,IAAuBA,QAAQ,CAACE,UAATF,CAAoBG,mBADlB;;gBAE3C,IAAIF,SAAJ,EAAe;kBAEbD,QAAQ,CAACI,KAATJ,GAAiB,IAAjBA;gBACD;;gBACDJ,cAAc,CAACS,qBAAfT,CAAqCI,QAArCJ,EAA+CJ,mBAA/CI;cACD;YAhBI;cAAA;YAAA;cAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAmBP,OAAO,SAASU,MAAT,CAAgBX,QAAhB,EAA0B;EAC/B,IAAMC,cAAc,GAAG,IAAIL,cAAJ,CAAmBI,QAAnB,CAAvB;EACA,IAAOE,IAAP,GAAeD,cAAf,CAAOC,IAAP;;EAKA,IAAID,cAAc,CAACG,SAAnB,EAA8B;IAAA,2CACLF,IAAI,CAACE,SAALF,IAAkB,EADb;IAAA;;IAAA;MAC5B,oDAA6C;QAAA,IAAlCG,QAAkC;;QAE3C,IAAIA,QAAQ,CAACI,KAAb,EAAoB;UAElB,OAAOJ,QAAQ,CAACI,KAAhB;UACAR,cAAc,CAACW,kBAAfX,CAAkCI,QAAlCJ,EAA4CJ,mBAA5CI,EAAiE,EAAjEA;UACAA,cAAc,CAACY,YAAfZ,CAA4BJ,mBAA5BI;QACD;MACF;IAT2B;MAAA;IAAA;MAAA;IAAA;EAU7B;AACF","names":["GLTFScenegraph","KHR_MATERIALS_UNLIT","name","decode","gltfData","gltfScenegraph","json","removeExtension","materials","material","extension","extensions","KHR_materials_unlit","unlit","removeObjectExtension","encode","addObjectExtension","addExtension"],"sources":["../../../../../src/lib/extensions/deprecated/KHR_materials_unlit.ts"],"sourcesContent":["// GLTF EXTENSION: KHR_materials_unlit\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit\n\nimport type {GLTF} from '../../types/gltf-types';\n\nimport GLTFScenegraph from '../../api/gltf-scenegraph';\n\nconst KHR_MATERIALS_UNLIT = 'KHR_materials_unlit';\n\nexport const name = KHR_MATERIALS_UNLIT;\n\nexport async function decode(gltfData: {json: GLTF}): Promise<void> {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  // Remove the top-level extension\n  gltfScenegraph.removeExtension(KHR_MATERIALS_UNLIT);\n\n  // Any nodes that have the extension, add lights field pointing to light object\n  // and remove the extension\n  for (const material of json.materials || []) {\n    const extension = material.extensions && material.extensions.KHR_materials_unlit;\n    if (extension) {\n      // @ts-ignore TODO\n      material.unlit = true;\n    }\n    gltfScenegraph.removeObjectExtension(material, KHR_MATERIALS_UNLIT);\n  }\n}\n\nexport function encode(gltfData) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  // Any nodes that have lights field pointing to light object\n  // add the extension\n  // @ts-ignore\n  if (gltfScenegraph.materials) {\n    for (const material of json.materials || []) {\n      // @ts-ignore\n      if (material.unlit) {\n        // @ts-ignore\n        delete material.unlit;\n        gltfScenegraph.addObjectExtension(material, KHR_MATERIALS_UNLIT, {});\n        gltfScenegraph.addExtension(KHR_MATERIALS_UNLIT);\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}