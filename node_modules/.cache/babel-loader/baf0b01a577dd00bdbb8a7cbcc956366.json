{"ast":null,"code":"export default function getShaderName(shader) {\n  let defaultName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'unnamed';\n  const SHADER_NAME_REGEXP = /#define[\\s*]SHADER_NAME[\\s*]([A-Za-z0-9_-]+)[\\s*]/;\n  const match = shader.match(SHADER_NAME_REGEXP);\n  return match ? match[1] : defaultName;\n}","map":{"version":3,"mappings":"AAEA,eAAe,SAASA,aAAT,CAAuBC,MAAvB,EAAwD;EAAA,IAAzBC,WAAyB,uEAAX,SAAW;EACrE,MAAMC,kBAAkB,GAAG,mDAA3B;EACA,MAAMC,KAAK,GAAGH,MAAM,CAACG,KAAPH,CAAaE,kBAAbF,CAAd;EACA,OAAOG,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAR,GAAcF,WAA1B;AACD","names":["getShaderName","shader","defaultName","SHADER_NAME_REGEXP","match"],"sources":["../../../src/glsl-utils/get-shader-name.js"],"sourcesContent":["// Supports GLSLIFY style naming of shaders\n// #define SHADER_NAME ...\nexport default function getShaderName(shader, defaultName = 'unnamed') {\n  const SHADER_NAME_REGEXP = /#define[\\s*]SHADER_NAME[\\s*]([A-Za-z0-9_-]+)[\\s*]/;\n  const match = shader.match(SHADER_NAME_REGEXP);\n  return match ? match[1] : defaultName;\n}\n"]},"metadata":{},"sourceType":"module"}