{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './scatterplot-layer-vertex.glsl';\nimport fs from './scatterplot-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  radiusUnits: 'meters',\n  radiusScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  radiusMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  lineWidthUnits: 'meters',\n  lineWidthScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  lineWidthMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  lineWidthMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  stroked: false,\n  filled: true,\n  billboard: false,\n  antialiasing: true,\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getRadius: {\n    type: 'accessor',\n    value: 1\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  strokeWidth: {\n    deprecatedFor: 'getLineWidth'\n  },\n  outline: {\n    deprecatedFor: 'stroked'\n  },\n  getColor: {\n    deprecatedFor: ['getFillColor', 'getLineColor']\n  }\n};\n\nvar ScatterplotLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(ScatterplotLayer, _Layer);\n\n  var _super = _createSuper(ScatterplotLayer);\n\n  function ScatterplotLayer() {\n    _classCallCheck(this, ScatterplotLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ScatterplotLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _get(_getPrototypeOf(ScatterplotLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.getAttributeManager().addInstanced({\n        instancePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getPosition'\n        },\n        instanceRadius: {\n          size: 1,\n          transition: true,\n          accessor: 'getRadius',\n          defaultValue: 1\n        },\n        instanceFillColors: {\n          size: this.props.colorFormat.length,\n          transition: true,\n          normalized: true,\n          type: 5121,\n          accessor: 'getFillColor',\n          defaultValue: [0, 0, 0, 255]\n        },\n        instanceLineColors: {\n          size: this.props.colorFormat.length,\n          transition: true,\n          normalized: true,\n          type: 5121,\n          accessor: 'getLineColor',\n          defaultValue: [0, 0, 0, 255]\n        },\n        instanceLineWidths: {\n          size: 1,\n          transition: true,\n          accessor: 'getLineWidth',\n          defaultValue: 1\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      _get(_getPrototypeOf(ScatterplotLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      if (changeFlags.extensionsChanged) {\n        var _this$state$model;\n\n        var gl = this.context.gl;\n        (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n        this.state.model = this._getModel(gl);\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var _this$props = this.props,\n          radiusUnits = _this$props.radiusUnits,\n          radiusScale = _this$props.radiusScale,\n          radiusMinPixels = _this$props.radiusMinPixels,\n          radiusMaxPixels = _this$props.radiusMaxPixels,\n          stroked = _this$props.stroked,\n          filled = _this$props.filled,\n          billboard = _this$props.billboard,\n          antialiasing = _this$props.antialiasing,\n          lineWidthUnits = _this$props.lineWidthUnits,\n          lineWidthScale = _this$props.lineWidthScale,\n          lineWidthMinPixels = _this$props.lineWidthMinPixels,\n          lineWidthMaxPixels = _this$props.lineWidthMaxPixels;\n      this.state.model.setUniforms(uniforms).setUniforms({\n        stroked: stroked ? 1 : 0,\n        filled: filled,\n        billboard: billboard,\n        antialiasing: antialiasing,\n        radiusUnits: UNIT[radiusUnits],\n        radiusScale: radiusScale,\n        radiusMinPixels: radiusMinPixels,\n        radiusMaxPixels: radiusMaxPixels,\n        lineWidthUnits: UNIT[lineWidthUnits],\n        lineWidthScale: lineWidthScale,\n        lineWidthMinPixels: lineWidthMinPixels,\n        lineWidthMaxPixels: lineWidthMaxPixels\n      }).draw();\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var positions = [-1, -1, 0, 1, -1, 0, 1, 1, 0, -1, 1, 0];\n      return new Model(gl, _objectSpread(_objectSpread({}, this.getShaders()), {}, {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 6,\n          vertexCount: 4,\n          attributes: {\n            positions: {\n              size: 3,\n              value: new Float32Array(positions)\n            }\n          }\n        }),\n        isInstanced: true\n      }));\n    }\n  }]);\n\n  return ScatterplotLayer;\n}(Layer);\n\nexport { ScatterplotLayer as default };\nScatterplotLayer.layerName = 'ScatterplotLayer';\nScatterplotLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["Layer","project32","picking","UNIT","Model","Geometry","vs","fs","DEFAULT_COLOR","defaultProps","radiusUnits","radiusScale","type","min","value","radiusMinPixels","radiusMaxPixels","Number","MAX_SAFE_INTEGER","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","stroked","filled","billboard","antialiasing","getPosition","x","position","getRadius","getFillColor","getLineColor","getLineWidth","strokeWidth","deprecatedFor","outline","getColor","ScatterplotLayer","getShaders","modules","initializeState","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceRadius","defaultValue","instanceFillColors","props","colorFormat","length","normalized","instanceLineColors","instanceLineWidths","updateState","oldProps","changeFlags","extensionsChanged","gl","context","state","model","delete","_getModel","invalidateAll","draw","uniforms","setUniforms","positions","id","geometry","drawMode","vertexCount","attributes","Float32Array","isInstanced","layerName"],"sources":["../../../src/scatterplot-layer/scatterplot-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './scatterplot-layer-vertex.glsl';\nimport fs from './scatterplot-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  radiusUnits: 'meters',\n  radiusScale: {type: 'number', min: 0, value: 1},\n  radiusMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  radiusMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: {type: 'number', min: 0, value: 1},\n  lineWidthMinPixels: {type: 'number', min: 0, value: 0},\n  lineWidthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n\n  stroked: false,\n  filled: true,\n  billboard: false,\n  antialiasing: true,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getRadius: {type: 'accessor', value: 1},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n\n  // deprecated\n  strokeWidth: {deprecatedFor: 'getLineWidth'},\n  outline: {deprecatedFor: 'stroked'},\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\nexport default class ScatterplotLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceRadius: {\n        size: 1,\n        transition: true,\n        accessor: 'getRadius',\n        defaultValue: 1\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      radiusUnits,\n      radiusScale,\n      radiusMinPixels,\n      radiusMaxPixels,\n      stroked,\n      filled,\n      billboard,\n      antialiasing,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels\n    } = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        stroked: stroked ? 1 : 0,\n        filled,\n        billboard,\n        antialiasing,\n        radiusUnits: UNIT[radiusUnits],\n        radiusScale,\n        radiusMinPixels,\n        radiusMaxPixels,\n        lineWidthUnits: UNIT[lineWidthUnits],\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels\n      })\n      .draw();\n  }\n\n  _getModel(gl) {\n    // a square that minimally cover the unit circle\n    const positions = [-1, -1, 0, 1, -1, 0, 1, 1, 0, -1, 1, 0];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount: 4,\n        attributes: {\n          positions: {size: 3, value: new Float32Array(positions)}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n\nScatterplotLayer.layerName = 'ScatterplotLayer';\nScatterplotLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}