{"ast":null,"code":"import MathArray from './base/math-array';\nimport { clamp } from '../lib/common';\nimport { checkNumber } from '../lib/validators';\nimport Quaternion from './quaternion';\nconst ERR_UNKNOWN_ORDER = 'Unknown Euler angle order';\nconst ALMOST_ONE = 0.99999;\n\nfunction validateOrder(value) {\n  return value >= 0 && value < 6;\n}\n\nfunction checkOrder(value) {\n  if (value < 0 && value >= 6) {\n    throw new Error(ERR_UNKNOWN_ORDER);\n  }\n\n  return value;\n}\n\nexport default class Euler extends MathArray {\n  static get ZYX() {\n    return 0;\n  }\n\n  static get YXZ() {\n    return 1;\n  }\n\n  static get XZY() {\n    return 2;\n  }\n\n  static get ZXY() {\n    return 3;\n  }\n\n  static get YZX() {\n    return 4;\n  }\n\n  static get XYZ() {\n    return 5;\n  }\n\n  static get RollPitchYaw() {\n    return 0;\n  }\n\n  static get DefaultOrder() {\n    return Euler.ZYX;\n  }\n\n  static get RotationOrders() {\n    return ['ZYX', 'YXZ', 'XZY', 'ZXY', 'YZX', 'XYZ'];\n  }\n\n  static rotationOrder(order) {\n    return Euler.RotationOrders[order];\n  }\n\n  get ELEMENTS() {\n    return 4;\n  }\n\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Euler.DefaultOrder;\n    super(-0, -0, -0, -0);\n\n    if (arguments.length > 0 && Array.isArray(arguments[0])) {\n      this.fromVector3(...arguments);\n    } else {\n      this.set(x, y, z, order);\n    }\n  }\n\n  fromQuaternion(quaternion) {\n    const [x, y, z, w] = quaternion;\n    const ysqr = y * y;\n    const t0 = -2.0 * (ysqr + z * z) + 1.0;\n    const t1 = +2.0 * (x * y + w * z);\n    let t2 = -2.0 * (x * z - w * y);\n    const t3 = +2.0 * (y * z + w * x);\n    const t4 = -2.0 * (x * x + ysqr) + 1.0;\n    t2 = t2 > 1.0 ? 1.0 : t2;\n    t2 = t2 < -1.0 ? -1.0 : t2;\n    const roll = Math.atan2(t3, t4);\n    const pitch = Math.asin(t2);\n    const yaw = Math.atan2(t1, t0);\n    return new Euler(roll, pitch, yaw, Euler.RollPitchYaw);\n  }\n\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = Number.isFinite(array[3]) || this.order;\n    return this.check();\n  }\n\n  set() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let order = arguments.length > 3 ? arguments[3] : undefined;\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = Number.isFinite(order) ? order : this[3];\n    return this.check();\n  }\n\n  validate() {\n    return validateOrder(this[3]) && Number.isFinite(this[0]) && Number.isFinite(this[1]) && Number.isFinite(this[2]);\n  }\n\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    return array;\n  }\n\n  toArray4() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    array[offset + 3] = this[3];\n    return array;\n  }\n\n  toVector3() {\n    let result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0];\n    result[0] = this[0];\n    result[1] = this[1];\n    result[2] = this[2];\n    return result;\n  }\n\n  get x() {\n    return this[0];\n  }\n\n  set x(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get y() {\n    return this[1];\n  }\n\n  set y(value) {\n    this[1] = checkNumber(value);\n  }\n\n  get z() {\n    return this[2];\n  }\n\n  set z(value) {\n    this[2] = checkNumber(value);\n  }\n\n  get alpha() {\n    return this[0];\n  }\n\n  set alpha(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get beta() {\n    return this[1];\n  }\n\n  set beta(value) {\n    this[1] = checkNumber(value);\n  }\n\n  get gamma() {\n    return this[2];\n  }\n\n  set gamma(value) {\n    this[2] = checkNumber(value);\n  }\n\n  get phi() {\n    return this[0];\n  }\n\n  set phi(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get theta() {\n    return this[1];\n  }\n\n  set theta(value) {\n    this[1] = checkNumber(value);\n  }\n\n  get psi() {\n    return this[2];\n  }\n\n  set psi(value) {\n    this[2] = checkNumber(value);\n  }\n\n  get roll() {\n    return this[0];\n  }\n\n  set roll(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get pitch() {\n    return this[1];\n  }\n\n  set pitch(value) {\n    this[1] = checkNumber(value);\n  }\n\n  get yaw() {\n    return this[2];\n  }\n\n  set yaw(value) {\n    this[2] = checkNumber(value);\n  }\n\n  get order() {\n    return this[3];\n  }\n\n  set order(value) {\n    this[3] = checkOrder(value);\n  }\n\n  fromVector3(v, order) {\n    return this.set(v[0], v[1], v[2], Number.isFinite(order) ? order : this[3]);\n  }\n\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this[0] = array[0 + offset];\n    this[1] = array[1 + offset];\n    this[2] = array[2 + offset];\n\n    if (array[3] !== undefined) {\n      this[3] = array[3];\n    }\n\n    return this.check();\n  }\n\n  fromRollPitchYaw(roll, pitch, yaw) {\n    return this.set(roll, pitch, yaw, Euler.ZYX);\n  }\n\n  fromRotationMatrix(m) {\n    let order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Euler.DefaultOrder;\n\n    this._fromRotationMatrix(m, order);\n\n    return this.check();\n  }\n\n  getRotationMatrix(m) {\n    return this._getRotationMatrix(m);\n  }\n\n  getQuaternion() {\n    const q = new Quaternion();\n\n    switch (this[3]) {\n      case Euler.XYZ:\n        return q.rotateX(this[0]).rotateY(this[1]).rotateZ(this[2]);\n\n      case Euler.YXZ:\n        return q.rotateY(this[0]).rotateX(this[1]).rotateZ(this[2]);\n\n      case Euler.ZXY:\n        return q.rotateZ(this[0]).rotateX(this[1]).rotateY(this[2]);\n\n      case Euler.ZYX:\n        return q.rotateZ(this[0]).rotateY(this[1]).rotateX(this[2]);\n\n      case Euler.YZX:\n        return q.rotateY(this[0]).rotateZ(this[1]).rotateX(this[2]);\n\n      case Euler.XZY:\n        return q.rotateX(this[0]).rotateZ(this[1]).rotateY(this[2]);\n\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n  }\n\n  _fromRotationMatrix(m) {\n    let order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Euler.DefaultOrder;\n    const te = m.elements;\n    const m11 = te[0],\n          m12 = te[4],\n          m13 = te[8];\n    const m21 = te[1],\n          m22 = te[5],\n          m23 = te[9];\n    const m31 = te[2],\n          m32 = te[6],\n          m33 = te[10];\n    order = order || this[3];\n\n    switch (order) {\n      case Euler.XYZ:\n        this[1] = Math.asin(clamp(m13, -1, 1));\n\n        if (Math.abs(m13) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m33);\n          this[2] = Math.atan2(-m12, m11);\n        } else {\n          this[0] = Math.atan2(m32, m22);\n          this[2] = 0;\n        }\n\n        break;\n\n      case Euler.YXZ:\n        this[0] = Math.asin(-clamp(m23, -1, 1));\n\n        if (Math.abs(m23) < ALMOST_ONE) {\n          this[1] = Math.atan2(m13, m33);\n          this[2] = Math.atan2(m21, m22);\n        } else {\n          this[1] = Math.atan2(-m31, m11);\n          this[2] = 0;\n        }\n\n        break;\n\n      case Euler.ZXY:\n        this[0] = Math.asin(clamp(m32, -1, 1));\n\n        if (Math.abs(m32) < ALMOST_ONE) {\n          this[1] = Math.atan2(-m31, m33);\n          this[2] = Math.atan2(-m12, m22);\n        } else {\n          this[1] = 0;\n          this[2] = Math.atan2(m21, m11);\n        }\n\n        break;\n\n      case Euler.ZYX:\n        this[1] = Math.asin(-clamp(m31, -1, 1));\n\n        if (Math.abs(m31) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m33);\n          this[2] = Math.atan2(m21, m11);\n        } else {\n          this[0] = 0;\n          this[2] = Math.atan2(-m12, m22);\n        }\n\n        break;\n\n      case Euler.YZX:\n        this[2] = Math.asin(clamp(m21, -1, 1));\n\n        if (Math.abs(m21) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m22);\n          this[1] = Math.atan2(-m31, m11);\n        } else {\n          this[0] = 0;\n          this[1] = Math.atan2(m13, m33);\n        }\n\n        break;\n\n      case Euler.XZY:\n        this[2] = Math.asin(-clamp(m12, -1, 1));\n\n        if (Math.abs(m12) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m22);\n          this[1] = Math.atan2(m13, m11);\n        } else {\n          this[0] = Math.atan2(-m23, m33);\n          this[1] = 0;\n        }\n\n        break;\n\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n\n    this[3] = order;\n    return this;\n  }\n\n  _getRotationMatrix(result) {\n    const te = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n    const x = this.x,\n          y = this.y,\n          z = this.z;\n    const a = Math.cos(x);\n    const c = Math.cos(y);\n    const e = Math.cos(z);\n    const b = Math.sin(x);\n    const d = Math.sin(y);\n    const f = Math.sin(z);\n\n    switch (this[3]) {\n      case Euler.XYZ:\n        {\n          const ae = a * e,\n                af = a * f,\n                be = b * e,\n                bf = b * f;\n          te[0] = c * e;\n          te[4] = -c * f;\n          te[8] = d;\n          te[1] = af + be * d;\n          te[5] = ae - bf * d;\n          te[9] = -b * c;\n          te[2] = bf - ae * d;\n          te[6] = be + af * d;\n          te[10] = a * c;\n          break;\n        }\n\n      case Euler.YXZ:\n        {\n          const ce = c * e,\n                cf = c * f,\n                de = d * e,\n                df = d * f;\n          te[0] = ce + df * b;\n          te[4] = de * b - cf;\n          te[8] = a * d;\n          te[1] = a * f;\n          te[5] = a * e;\n          te[9] = -b;\n          te[2] = cf * b - de;\n          te[6] = df + ce * b;\n          te[10] = a * c;\n          break;\n        }\n\n      case Euler.ZXY:\n        {\n          const ce = c * e,\n                cf = c * f,\n                de = d * e,\n                df = d * f;\n          te[0] = ce - df * b;\n          te[4] = -a * f;\n          te[8] = de + cf * b;\n          te[1] = cf + de * b;\n          te[5] = a * e;\n          te[9] = df - ce * b;\n          te[2] = -a * d;\n          te[6] = b;\n          te[10] = a * c;\n          break;\n        }\n\n      case Euler.ZYX:\n        {\n          const ae = a * e,\n                af = a * f,\n                be = b * e,\n                bf = b * f;\n          te[0] = c * e;\n          te[4] = be * d - af;\n          te[8] = ae * d + bf;\n          te[1] = c * f;\n          te[5] = bf * d + ae;\n          te[9] = af * d - be;\n          te[2] = -d;\n          te[6] = b * c;\n          te[10] = a * c;\n          break;\n        }\n\n      case Euler.YZX:\n        {\n          const ac = a * c,\n                ad = a * d,\n                bc = b * c,\n                bd = b * d;\n          te[0] = c * e;\n          te[4] = bd - ac * f;\n          te[8] = bc * f + ad;\n          te[1] = f;\n          te[5] = a * e;\n          te[9] = -b * e;\n          te[2] = -d * e;\n          te[6] = ad * f + bc;\n          te[10] = ac - bd * f;\n          break;\n        }\n\n      case Euler.XZY:\n        {\n          const ac = a * c,\n                ad = a * d,\n                bc = b * c,\n                bd = b * d;\n          te[0] = c * e;\n          te[4] = -f;\n          te[8] = d * e;\n          te[1] = ac * f + bd;\n          te[5] = a * e;\n          te[9] = ad * f - bc;\n          te[2] = bc * f - ad;\n          te[6] = b * e;\n          te[10] = bd * f + ac;\n          break;\n        }\n\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = 0;\n    te[12] = 0;\n    te[13] = 0;\n    te[14] = 0;\n    te[15] = 1;\n    return te;\n  }\n\n  toQuaternion() {\n    const cy = Math.cos(this.yaw * 0.5);\n    const sy = Math.sin(this.yaw * 0.5);\n    const cr = Math.cos(this.roll * 0.5);\n    const sr = Math.sin(this.roll * 0.5);\n    const cp = Math.cos(this.pitch * 0.5);\n    const sp = Math.sin(this.pitch * 0.5);\n    const w = cy * cr * cp + sy * sr * sp;\n    const x = cy * sr * cp - sy * cr * sp;\n    const y = cy * cr * sp + sy * sr * cp;\n    const z = sy * cr * cp - cy * sr * sp;\n    return new Quaternion(x, y, z, w);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["MathArray","clamp","checkNumber","Quaternion","ERR_UNKNOWN_ORDER","ALMOST_ONE","validateOrder","value","checkOrder","Error","Euler","ZYX","YXZ","XZY","ZXY","YZX","XYZ","RollPitchYaw","DefaultOrder","RotationOrders","rotationOrder","order","ELEMENTS","constructor","x","y","z","arguments","length","Array","isArray","fromVector3","set","fromQuaternion","quaternion","w","ysqr","t0","t1","t2","t3","t4","roll","Math","atan2","pitch","asin","yaw","copy","array","Number","isFinite","check","validate","toArray","offset","toArray4","toVector3","result","alpha","beta","gamma","phi","theta","psi","v","fromArray","undefined","fromRollPitchYaw","fromRotationMatrix","m","_fromRotationMatrix","getRotationMatrix","_getRotationMatrix","getQuaternion","q","rotateX","rotateY","rotateZ","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","abs","a","cos","c","e","b","sin","d","f","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","toQuaternion","cy","sy","cr","sr","cp","sp"],"sources":["../../../src/classes/euler.js"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport MathArray from './base/math-array';\nimport {clamp} from '../lib/common';\nimport {checkNumber} from '../lib/validators';\nimport Quaternion from './quaternion';\n\n// Internal constants\nconst ERR_UNKNOWN_ORDER = 'Unknown Euler angle order';\nconst ALMOST_ONE = 0.99999;\n\nfunction validateOrder(value) {\n  return value >= 0 && value < 6;\n}\n\nfunction checkOrder(value) {\n  if (value < 0 && value >= 6) {\n    throw new Error(ERR_UNKNOWN_ORDER);\n  }\n  return value;\n}\n\nexport default class Euler extends MathArray {\n  // static XYZ = 0;\n  // static YZX = 1;\n  // static ZXY = 2;\n  // static XZY = 3;\n  // static YXZ = 4;\n  // static ZYX = 5;\n  // static RollPitchYaw = 0;\n  // static DefaultOrder = 0;\n\n  // Constants\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  static get ZYX() {\n    return 0;\n  }\n\n  static get YXZ() {\n    return 1;\n  }\n\n  static get XZY() {\n    return 2;\n  }\n\n  static get ZXY() {\n    return 3;\n  }\n\n  static get YZX() {\n    return 4;\n  }\n\n  static get XYZ() {\n    return 5;\n  }\n\n  static get RollPitchYaw() {\n    return 0;\n  }\n\n  static get DefaultOrder() {\n    return Euler.ZYX;\n  }\n\n  static get RotationOrders() {\n    return ['ZYX', 'YXZ', 'XZY', 'ZXY', 'YZX', 'XYZ'];\n  }\n\n  static rotationOrder(order) {\n    return Euler.RotationOrders[order];\n  }\n\n  get ELEMENTS() {\n    return 4;\n  }\n\n  /* eslint-enable no-multi-spaces, brace-style, no-return-assign */\n\n  /**\n   * @class\n   * @param {Number | Number[]} x\n   * @param {Number=} [y]\n   * @param {Number=} [z]\n   * @param {Number=} [order]\n   */\n  constructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0);\n    // eslint-disable-next-line prefer-rest-params\n    if (arguments.length > 0 && Array.isArray(arguments[0])) {\n      // eslint-disable-next-line prefer-rest-params\n      this.fromVector3(...arguments);\n    } else {\n      // @ts-ignore error TS2345: Argument of type 'number | [number, number, number, number]' not assignable to 'number'\n      this.set(x, y, z, order);\n    }\n  }\n\n  fromQuaternion(quaternion) {\n    const [x, y, z, w] = quaternion;\n    const ysqr = y * y;\n    const t0 = -2.0 * (ysqr + z * z) + 1.0;\n    const t1 = +2.0 * (x * y + w * z);\n    let t2 = -2.0 * (x * z - w * y);\n    const t3 = +2.0 * (y * z + w * x);\n    const t4 = -2.0 * (x * x + ysqr) + 1.0;\n\n    t2 = t2 > 1.0 ? 1.0 : t2;\n    t2 = t2 < -1.0 ? -1.0 : t2;\n\n    const roll = Math.atan2(t3, t4);\n    const pitch = Math.asin(t2);\n    const yaw = Math.atan2(t1, t0);\n\n    return new Euler(roll, pitch, yaw, Euler.RollPitchYaw);\n  }\n\n  // fromQuaternion(q, order) {\n  //   this._fromRotationMat[-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n  //   return this.check();\n  // }\n\n  // If copied array does contain fourth element, preserves currently set order\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = Number.isFinite(array[3]) || this.order;\n    return this.check();\n  }\n\n  // Sets the three angles, and optionally sets the rotation order\n  // If order is not specified, preserves currently set order\n  set(x = 0, y = 0, z = 0, order) {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = Number.isFinite(order) ? order : this[3];\n    return this.check();\n  }\n\n  validate() {\n    return (\n      validateOrder(this[3]) &&\n      Number.isFinite(this[0]) &&\n      Number.isFinite(this[1]) &&\n      Number.isFinite(this[2])\n    );\n  }\n\n  // Does not copy the orientation element\n  toArray(array = [], offset = 0) {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    return array;\n  }\n\n  // Copies the orientation element\n  toArray4(array = [], offset = 0) {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    array[offset + 3] = this[3];\n    return array;\n  }\n\n  toVector3(result = [-0, -0, -0]) {\n    result[0] = this[0];\n    result[1] = this[1];\n    result[2] = this[2];\n    return result;\n  }\n\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n\n  // x, y, z angle notation (note: only corresponds to axis in XYZ orientation)\n  /** @type {number} */\n  get x() {\n    return this[0];\n  }\n\n  set x(value) {\n    this[0] = checkNumber(value);\n  }\n\n  /** @type {number} */\n  get y() {\n    return this[1];\n  }\n\n  set y(value) {\n    this[1] = checkNumber(value);\n  }\n\n  /** @type {number} */\n  get z() {\n    return this[2];\n  }\n\n  set z(value) {\n    this[2] = checkNumber(value);\n  }\n\n  // alpha, beta, gamma angle notation\n  get alpha() {\n    return this[0];\n  }\n\n  set alpha(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get beta() {\n    return this[1];\n  }\n\n  set beta(value) {\n    this[1] = checkNumber(value);\n  }\n\n  get gamma() {\n    return this[2];\n  }\n\n  set gamma(value) {\n    this[2] = checkNumber(value);\n  }\n\n  // phi, theta, psi angle notation\n  get phi() {\n    return this[0];\n  }\n\n  set phi(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get theta() {\n    return this[1];\n  }\n\n  set theta(value) {\n    this[1] = checkNumber(value);\n  }\n\n  get psi() {\n    return this[2];\n  }\n\n  set psi(value) {\n    this[2] = checkNumber(value);\n  }\n\n  // roll, pitch, yaw angle notation\n  /** @type {number} */\n  get roll() {\n    return this[0];\n  }\n\n  set roll(value) {\n    this[0] = checkNumber(value);\n  }\n\n  /** @type {number} */\n  get pitch() {\n    return this[1];\n  }\n\n  set pitch(value) {\n    this[1] = checkNumber(value);\n  }\n\n  /** @type {number} */\n  get yaw() {\n    return this[2];\n  }\n\n  set yaw(value) {\n    this[2] = checkNumber(value);\n  }\n\n  // rotation order, in all three angle notations\n  get order() {\n    return this[3];\n  }\n\n  set order(value) {\n    this[3] = checkOrder(value);\n  }\n\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n\n  // Constructors\n  fromVector3(v, order) {\n    return this.set(v[0], v[1], v[2], Number.isFinite(order) ? order : this[3]);\n  }\n\n  // TODO - with and without 4th element\n  fromArray(array, offset = 0) {\n    this[0] = array[0 + offset];\n    this[1] = array[1 + offset];\n    this[2] = array[2 + offset];\n    if (array[3] !== undefined) {\n      this[3] = array[3];\n    }\n    return this.check();\n  }\n\n  // Common ZYX rotation order\n  fromRollPitchYaw(roll, pitch, yaw) {\n    return this.set(roll, pitch, yaw, Euler.ZYX);\n  }\n\n  fromRotationMatrix(m, order = Euler.DefaultOrder) {\n    this._fromRotationMatrix(m, order);\n    return this.check();\n  }\n\n  // ACCESSORS\n\n  getRotationMatrix(m) {\n    return this._getRotationMatrix(m);\n  }\n\n  // TODO - move to Quaternion\n  getQuaternion() {\n    const q = new Quaternion();\n    switch (this[3]) {\n      case Euler.XYZ:\n        return q.rotateX(this[0]).rotateY(this[1]).rotateZ(this[2]);\n      case Euler.YXZ:\n        return q.rotateY(this[0]).rotateX(this[1]).rotateZ(this[2]);\n      case Euler.ZXY:\n        return q.rotateZ(this[0]).rotateX(this[1]).rotateY(this[2]);\n      case Euler.ZYX:\n        return q.rotateZ(this[0]).rotateY(this[1]).rotateX(this[2]);\n      case Euler.YZX:\n        return q.rotateY(this[0]).rotateZ(this[1]).rotateX(this[2]);\n      case Euler.XZY:\n        return q.rotateX(this[0]).rotateZ(this[1]).rotateY(this[2]);\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n  }\n\n  // INTERNAL METHODS\n\n  // Concersion from Euler to rotation matrix and from matrix to Euler\n  // Adapted from three.js under MIT license\n\n  // // WARNING: this discards revolution information -bhouston\n  // reorder(newOrder) {\n  //   const q = new Quaternion().setFromEuler(this);\n  //   return this.setFromQuaternion(q, newOrder);\n\n  /* eslint-disable complexity, max-statements, one-var */\n  _fromRotationMatrix(m, order = Euler.DefaultOrder) {\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    const te = m.elements;\n    const m11 = te[0],\n      m12 = te[4],\n      m13 = te[8];\n    const m21 = te[1],\n      m22 = te[5],\n      m23 = te[9];\n    const m31 = te[2],\n      m32 = te[6],\n      m33 = te[10];\n\n    order = order || this[3];\n\n    switch (order) {\n      case Euler.XYZ:\n        this[1] = Math.asin(clamp(m13, -1, 1));\n\n        if (Math.abs(m13) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m33);\n          this[2] = Math.atan2(-m12, m11);\n        } else {\n          this[0] = Math.atan2(m32, m22);\n          this[2] = 0;\n        }\n        break;\n\n      case Euler.YXZ:\n        this[0] = Math.asin(-clamp(m23, -1, 1));\n\n        if (Math.abs(m23) < ALMOST_ONE) {\n          this[1] = Math.atan2(m13, m33);\n          this[2] = Math.atan2(m21, m22);\n        } else {\n          this[1] = Math.atan2(-m31, m11);\n          this[2] = 0;\n        }\n        break;\n\n      case Euler.ZXY:\n        this[0] = Math.asin(clamp(m32, -1, 1));\n\n        if (Math.abs(m32) < ALMOST_ONE) {\n          this[1] = Math.atan2(-m31, m33);\n          this[2] = Math.atan2(-m12, m22);\n        } else {\n          this[1] = 0;\n          this[2] = Math.atan2(m21, m11);\n        }\n        break;\n\n      case Euler.ZYX:\n        this[1] = Math.asin(-clamp(m31, -1, 1));\n\n        if (Math.abs(m31) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m33);\n          this[2] = Math.atan2(m21, m11);\n        } else {\n          this[0] = 0;\n          this[2] = Math.atan2(-m12, m22);\n        }\n        break;\n\n      case Euler.YZX:\n        this[2] = Math.asin(clamp(m21, -1, 1));\n\n        if (Math.abs(m21) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m22);\n          this[1] = Math.atan2(-m31, m11);\n        } else {\n          this[0] = 0;\n          this[1] = Math.atan2(m13, m33);\n        }\n        break;\n\n      case Euler.XZY:\n        this[2] = Math.asin(-clamp(m12, -1, 1));\n\n        if (Math.abs(m12) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m22);\n          this[1] = Math.atan2(m13, m11);\n        } else {\n          this[0] = Math.atan2(-m23, m33);\n          this[1] = 0;\n        }\n        break;\n\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n\n    this[3] = order;\n\n    return this;\n  }\n\n  _getRotationMatrix(result) {\n    const te = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const a = Math.cos(x);\n    const c = Math.cos(y);\n    const e = Math.cos(z);\n    const b = Math.sin(x);\n    const d = Math.sin(y);\n    const f = Math.sin(z);\n\n    switch (this[3]) {\n      case Euler.XYZ: {\n        const ae = a * e,\n          af = a * f,\n          be = b * e,\n          bf = b * f;\n\n        te[0] = c * e;\n        te[4] = -c * f;\n        te[8] = d;\n\n        te[1] = af + be * d;\n        te[5] = ae - bf * d;\n        te[9] = -b * c;\n\n        te[2] = bf - ae * d;\n        te[6] = be + af * d;\n        te[10] = a * c;\n        break;\n      }\n\n      case Euler.YXZ: {\n        const ce = c * e,\n          cf = c * f,\n          de = d * e,\n          df = d * f;\n\n        te[0] = ce + df * b;\n        te[4] = de * b - cf;\n        te[8] = a * d;\n\n        te[1] = a * f;\n        te[5] = a * e;\n        te[9] = -b;\n\n        te[2] = cf * b - de;\n        te[6] = df + ce * b;\n        te[10] = a * c;\n        break;\n      }\n\n      case Euler.ZXY: {\n        const ce = c * e,\n          cf = c * f,\n          de = d * e,\n          df = d * f;\n\n        te[0] = ce - df * b;\n        te[4] = -a * f;\n        te[8] = de + cf * b;\n\n        te[1] = cf + de * b;\n        te[5] = a * e;\n        te[9] = df - ce * b;\n\n        te[2] = -a * d;\n        te[6] = b;\n        te[10] = a * c;\n        break;\n      }\n\n      case Euler.ZYX: {\n        const ae = a * e,\n          af = a * f,\n          be = b * e,\n          bf = b * f;\n\n        te[0] = c * e;\n        te[4] = be * d - af;\n        te[8] = ae * d + bf;\n\n        te[1] = c * f;\n        te[5] = bf * d + ae;\n        te[9] = af * d - be;\n\n        te[2] = -d;\n        te[6] = b * c;\n        te[10] = a * c;\n        break;\n      }\n\n      case Euler.YZX: {\n        const ac = a * c,\n          ad = a * d,\n          bc = b * c,\n          bd = b * d;\n\n        te[0] = c * e;\n        te[4] = bd - ac * f;\n        te[8] = bc * f + ad;\n\n        te[1] = f;\n        te[5] = a * e;\n        te[9] = -b * e;\n\n        te[2] = -d * e;\n        te[6] = ad * f + bc;\n        te[10] = ac - bd * f;\n        break;\n      }\n\n      case Euler.XZY: {\n        const ac = a * c,\n          ad = a * d,\n          bc = b * c,\n          bd = b * d;\n\n        te[0] = c * e;\n        te[4] = -f;\n        te[8] = d * e;\n\n        te[1] = ac * f + bd;\n        te[5] = a * e;\n        te[9] = ad * f - bc;\n\n        te[2] = bc * f - ad;\n        te[6] = b * e;\n        te[10] = bd * f + ac;\n        break;\n      }\n\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n\n    // last column\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = 0;\n\n    // bottom row\n    te[12] = 0;\n    te[13] = 0;\n    te[14] = 0;\n    te[15] = 1;\n\n    return te;\n  }\n\n  toQuaternion() {\n    // Abbreviations for the various angular functions\n    const cy = Math.cos(this.yaw * 0.5);\n    const sy = Math.sin(this.yaw * 0.5);\n    const cr = Math.cos(this.roll * 0.5);\n    const sr = Math.sin(this.roll * 0.5);\n    const cp = Math.cos(this.pitch * 0.5);\n    const sp = Math.sin(this.pitch * 0.5);\n\n    const w = cy * cr * cp + sy * sr * sp;\n    const x = cy * sr * cp - sy * cr * sp;\n    const y = cy * cr * sp + sy * sr * cp;\n    const z = sy * cr * cp - cy * sr * sp;\n\n    return new Quaternion(x, y, z, w);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}