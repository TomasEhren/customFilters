{"ast":null,"code":"import { Layer, project32, picking, COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport { lngLatToWorld } from '@math.gl/web-mercator';\nimport createMesh from './create-mesh';\nimport vs from './bitmap-layer-vertex';\nimport fs from './bitmap-layer-fragment';\nconst defaultProps = {\n  image: {\n    type: 'image',\n    value: null,\n    async: true\n  },\n  bounds: {\n    type: 'array',\n    value: [1, 0, 0, 1],\n    compare: true\n  },\n  _imageCoordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n  desaturate: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 0\n  },\n  transparentColor: {\n    type: 'color',\n    value: [0, 0, 0, 0]\n  },\n  tintColor: {\n    type: 'color',\n    value: [255, 255, 255]\n  }\n};\nexport default class BitmapLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, picking]\n    });\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.remove(['instancePickingColors']);\n    const noAlloc = true;\n    attributeManager.add({\n      indices: {\n        size: 1,\n        isIndexed: true,\n        update: attribute => attribute.value = this.state.mesh.indices,\n        noAlloc\n      },\n      positions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        update: attribute => attribute.value = this.state.mesh.positions,\n        noAlloc\n      },\n      texCoords: {\n        size: 2,\n        update: attribute => attribute.value = this.state.mesh.texCoords,\n        noAlloc\n      }\n    });\n  }\n\n  updateState(_ref) {\n    let {\n      props,\n      oldProps,\n      changeFlags\n    } = _ref;\n\n    if (changeFlags.extensionsChanged) {\n      var _this$state$model;\n\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (props.bounds !== oldProps.bounds) {\n      const oldMesh = this.state.mesh;\n\n      const mesh = this._createMesh();\n\n      this.state.model.setVertexCount(mesh.vertexCount);\n\n      for (const key in mesh) {\n        if (oldMesh && oldMesh[key] !== mesh[key]) {\n          attributeManager.invalidate(key);\n        }\n      }\n\n      this.setState({\n        mesh,\n        ...this._getCoordinateUniforms()\n      });\n    } else if (props._imageCoordinateSystem !== oldProps._imageCoordinateSystem) {\n      this.setState(this._getCoordinateUniforms());\n    }\n  }\n\n  getPickingInfo(_ref2) {\n    let {\n      info\n    } = _ref2;\n    const {\n      image\n    } = this.props;\n\n    if (!info.color || !image) {\n      info.bitmap = null;\n      return info;\n    }\n\n    const {\n      width,\n      height\n    } = image;\n    info.index = 0;\n    const uv = unpackUVsFromRGB(info.color);\n    const pixel = [Math.floor(uv[0] * width), Math.floor(uv[1] * height)];\n    info.bitmap = {\n      size: {\n        width,\n        height\n      },\n      uv,\n      pixel\n    };\n    return info;\n  }\n\n  disablePickingIndex() {\n    this.setState({\n      disablePicking: true\n    });\n  }\n\n  restorePickingColors() {\n    this.setState({\n      disablePicking: false\n    });\n  }\n\n  _updateAutoHighlight(info) {\n    super._updateAutoHighlight({ ...info,\n      color: this.encodePickingColor(0)\n    });\n  }\n\n  _createMesh() {\n    const {\n      bounds\n    } = this.props;\n    let normalizedBounds = bounds;\n\n    if (Number.isFinite(bounds[0])) {\n      normalizedBounds = [[bounds[0], bounds[1]], [bounds[0], bounds[3]], [bounds[2], bounds[3]], [bounds[2], bounds[1]]];\n    }\n\n    return createMesh(normalizedBounds, this.context.viewport.resolution);\n  }\n\n  _getModel(gl) {\n    if (!gl) {\n      return null;\n    }\n\n    return new Model(gl, { ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 4,\n        vertexCount: 6\n      }),\n      isInstanced: false\n    });\n  }\n\n  draw(opts) {\n    const {\n      uniforms,\n      moduleParameters\n    } = opts;\n    const {\n      model,\n      coordinateConversion,\n      bounds,\n      disablePicking\n    } = this.state;\n    const {\n      image,\n      desaturate,\n      transparentColor,\n      tintColor\n    } = this.props;\n\n    if (moduleParameters.pickingActive && disablePicking) {\n      return;\n    }\n\n    if (image && model) {\n      model.setUniforms(uniforms).setUniforms({\n        bitmapTexture: image,\n        desaturate,\n        transparentColor: transparentColor.map(x => x / 255),\n        tintColor: tintColor.slice(0, 3).map(x => x / 255),\n        coordinateConversion,\n        bounds\n      }).draw();\n    }\n  }\n\n  _getCoordinateUniforms() {\n    const {\n      LNGLAT,\n      CARTESIAN,\n      DEFAULT\n    } = COORDINATE_SYSTEM;\n    let {\n      _imageCoordinateSystem: imageCoordinateSystem\n    } = this.props;\n\n    if (imageCoordinateSystem !== DEFAULT) {\n      const {\n        bounds\n      } = this.props;\n\n      if (!Number.isFinite(bounds[0])) {\n        throw new Error('_imageCoordinateSystem only supports rectangular bounds');\n      }\n\n      const defaultImageCoordinateSystem = this.context.viewport.resolution ? LNGLAT : CARTESIAN;\n      imageCoordinateSystem = imageCoordinateSystem === LNGLAT ? LNGLAT : CARTESIAN;\n\n      if (imageCoordinateSystem === LNGLAT && defaultImageCoordinateSystem === CARTESIAN) {\n        return {\n          coordinateConversion: -1,\n          bounds\n        };\n      }\n\n      if (imageCoordinateSystem === CARTESIAN && defaultImageCoordinateSystem === LNGLAT) {\n        const bottomLeft = lngLatToWorld([bounds[0], bounds[1]]);\n        const topRight = lngLatToWorld([bounds[2], bounds[3]]);\n        return {\n          coordinateConversion: 1,\n          bounds: [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]]\n        };\n      }\n    }\n\n    return {\n      coordinateConversion: 0,\n      bounds: [0, 0, 0, 0]\n    };\n  }\n\n}\nBitmapLayer.layerName = 'BitmapLayer';\nBitmapLayer.defaultProps = defaultProps;\n\nfunction unpackUVsFromRGB(color) {\n  const [u, v, fracUV] = color;\n  const vFrac = (fracUV & 0xf0) / 256;\n  const uFrac = (fracUV & 0x0f) / 16;\n  return [(u + uFrac) / 256, (v + vFrac) / 256];\n}","map":{"version":3,"mappings":"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","names":["Layer","project32","picking","COORDINATE_SYSTEM","Model","Geometry","lngLatToWorld","createMesh","vs","fs","defaultProps","image","type","value","async","bounds","compare","_imageCoordinateSystem","DEFAULT","desaturate","min","max","transparentColor","tintColor","BitmapLayer","getShaders","modules","initializeState","attributeManager","getAttributeManager","remove","noAlloc","add","indices","size","isIndexed","update","attribute","state","mesh","positions","fp64","use64bitPositions","texCoords","updateState","props","oldProps","changeFlags","extensionsChanged","gl","context","model","delete","_getModel","invalidateAll","oldMesh","_createMesh","setVertexCount","vertexCount","key","invalidate","setState","_getCoordinateUniforms","getPickingInfo","info","color","bitmap","width","height","index","uv","unpackUVsFromRGB","pixel","Math","floor","disablePickingIndex","disablePicking","restorePickingColors","_updateAutoHighlight","encodePickingColor","normalizedBounds","Number","isFinite","viewport","resolution","id","geometry","drawMode","isInstanced","draw","opts","uniforms","moduleParameters","coordinateConversion","pickingActive","setUniforms","bitmapTexture","map","x","slice","LNGLAT","CARTESIAN","imageCoordinateSystem","Error","defaultImageCoordinateSystem","bottomLeft","topRight","layerName","u","v","fracUV","vFrac","uFrac"],"sources":["../../../src/bitmap-layer/bitmap-layer.js"],"sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {Layer, project32, picking, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport {Model, Geometry} from '@luma.gl/core';\nimport {lngLatToWorld} from '@math.gl/web-mercator';\n\nimport createMesh from './create-mesh';\n\nimport vs from './bitmap-layer-vertex';\nimport fs from './bitmap-layer-fragment';\n\nconst defaultProps = {\n  image: {type: 'image', value: null, async: true},\n  bounds: {type: 'array', value: [1, 0, 0, 1], compare: true},\n  _imageCoordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n\n  desaturate: {type: 'number', min: 0, max: 1, value: 0},\n  // More context: because of the blending mode we're using for ground imagery,\n  // alpha is not effective when blending the bitmap layers with the base map.\n  // Instead we need to manually dim/blend rgb values with a background color.\n  transparentColor: {type: 'color', value: [0, 0, 0, 0]},\n  tintColor: {type: 'color', value: [255, 255, 255]}\n};\n\n/*\n * @class\n * @param {object} props\n * @param {number} props.transparentColor - color to interpret transparency to\n * @param {number} props.tintColor - color bias\n */\nexport default class BitmapLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    attributeManager.remove(['instancePickingColors']);\n    const noAlloc = true;\n\n    attributeManager.add({\n      indices: {\n        size: 1,\n        isIndexed: true,\n        update: attribute => (attribute.value = this.state.mesh.indices),\n        noAlloc\n      },\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        update: attribute => (attribute.value = this.state.mesh.positions),\n        noAlloc\n      },\n      texCoords: {\n        size: 2,\n        update: attribute => (attribute.value = this.state.mesh.texCoords),\n        noAlloc\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    // setup model first\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (props.bounds !== oldProps.bounds) {\n      const oldMesh = this.state.mesh;\n      const mesh = this._createMesh();\n      this.state.model.setVertexCount(mesh.vertexCount);\n      for (const key in mesh) {\n        if (oldMesh && oldMesh[key] !== mesh[key]) {\n          attributeManager.invalidate(key);\n        }\n      }\n      this.setState({mesh, ...this._getCoordinateUniforms()});\n    } else if (props._imageCoordinateSystem !== oldProps._imageCoordinateSystem) {\n      this.setState(this._getCoordinateUniforms());\n    }\n  }\n\n  getPickingInfo({info}) {\n    const {image} = this.props;\n\n    if (!info.color || !image) {\n      info.bitmap = null;\n      return info;\n    }\n\n    const {width, height} = image;\n\n    // Picking color doesn't represent object index in this layer\n    info.index = 0;\n\n    // Calculate uv and pixel in bitmap\n    const uv = unpackUVsFromRGB(info.color);\n\n    const pixel = [Math.floor(uv[0] * width), Math.floor(uv[1] * height)];\n\n    info.bitmap = {\n      size: {width, height}, // Size of bitmap\n      uv, // Floating point precision in 0-1 range\n      pixel // Truncated to integer and scaled to pixel size\n    };\n\n    return info;\n  }\n\n  // Override base Layer multi-depth picking logic\n  disablePickingIndex() {\n    this.setState({disablePicking: true});\n  }\n\n  restorePickingColors() {\n    this.setState({disablePicking: false});\n  }\n\n  _updateAutoHighlight(info) {\n    super._updateAutoHighlight({\n      ...info,\n      color: this.encodePickingColor(0)\n    });\n  }\n\n  _createMesh() {\n    const {bounds} = this.props;\n\n    let normalizedBounds = bounds;\n    // bounds as [minX, minY, maxX, maxY]\n    if (Number.isFinite(bounds[0])) {\n      /*\n        (minX0, maxY3) ---- (maxX2, maxY3)\n               |                  |\n               |                  |\n               |                  |\n        (minX0, minY1) ---- (maxX2, minY1)\n     */\n      normalizedBounds = [\n        [bounds[0], bounds[1]],\n        [bounds[0], bounds[3]],\n        [bounds[2], bounds[3]],\n        [bounds[2], bounds[1]]\n      ];\n    }\n\n    return createMesh(normalizedBounds, this.context.viewport.resolution);\n  }\n\n  _getModel(gl) {\n    if (!gl) {\n      return null;\n    }\n\n    /*\n      0,0 --- 1,0\n       |       |\n      0,1 --- 1,1\n    */\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLES,\n        vertexCount: 6\n      }),\n      isInstanced: false\n    });\n  }\n\n  draw(opts) {\n    const {uniforms, moduleParameters} = opts;\n    const {model, coordinateConversion, bounds, disablePicking} = this.state;\n    const {image, desaturate, transparentColor, tintColor} = this.props;\n\n    if (moduleParameters.pickingActive && disablePicking) {\n      return;\n    }\n\n    // // TODO fix zFighting\n    // Render the image\n    if (image && model) {\n      model\n        .setUniforms(uniforms)\n        .setUniforms({\n          bitmapTexture: image,\n          desaturate,\n          transparentColor: transparentColor.map(x => x / 255),\n          tintColor: tintColor.slice(0, 3).map(x => x / 255),\n          coordinateConversion,\n          bounds\n        })\n        .draw();\n    }\n  }\n\n  _getCoordinateUniforms() {\n    const {LNGLAT, CARTESIAN, DEFAULT} = COORDINATE_SYSTEM;\n    let {_imageCoordinateSystem: imageCoordinateSystem} = this.props;\n    if (imageCoordinateSystem !== DEFAULT) {\n      const {bounds} = this.props;\n      if (!Number.isFinite(bounds[0])) {\n        throw new Error('_imageCoordinateSystem only supports rectangular bounds');\n      }\n\n      // The default behavior (linearly interpolated tex coords)\n      const defaultImageCoordinateSystem = this.context.viewport.resolution ? LNGLAT : CARTESIAN;\n      imageCoordinateSystem = imageCoordinateSystem === LNGLAT ? LNGLAT : CARTESIAN;\n\n      if (imageCoordinateSystem === LNGLAT && defaultImageCoordinateSystem === CARTESIAN) {\n        // LNGLAT in Mercator, e.g. display LNGLAT-encoded image in WebMercator projection\n        return {coordinateConversion: -1, bounds};\n      }\n      if (imageCoordinateSystem === CARTESIAN && defaultImageCoordinateSystem === LNGLAT) {\n        // Mercator in LNGLAT, e.g. display WebMercator encoded image in Globe projection\n        const bottomLeft = lngLatToWorld([bounds[0], bounds[1]]);\n        const topRight = lngLatToWorld([bounds[2], bounds[3]]);\n        return {\n          coordinateConversion: 1,\n          bounds: [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]]\n        };\n      }\n    }\n    return {\n      coordinateConversion: 0,\n      bounds: [0, 0, 0, 0]\n    };\n  }\n}\n\nBitmapLayer.layerName = 'BitmapLayer';\nBitmapLayer.defaultProps = defaultProps;\n\n/**\n * Decode uv floats from rgb bytes where b contains 4-bit fractions of uv\n * @param {number[]} color\n * @returns {number[]} uvs\n * https://stackoverflow.com/questions/30242013/glsl-compressing-packing-multiple-0-1-colours-var4-into-a-single-var4-variab\n */\nfunction unpackUVsFromRGB(color) {\n  const [u, v, fracUV] = color;\n  const vFrac = (fracUV & 0xf0) / 256;\n  const uFrac = (fracUV & 0x0f) / 16;\n  return [(u + uFrac) / 256, (v + vFrac) / 256];\n}\n"]},"metadata":{},"sourceType":"module"}