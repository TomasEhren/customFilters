{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { clamp } from '@math.gl/core';\nimport Controller from './controller';\nimport { OrbitState } from './orbit-controller';\n\nclass OrthographicState extends OrbitState {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"zoomAxis\", void 0);\n\n    this.zoomAxis = props.zoomAxis || 'all';\n  }\n\n  _applyConstraints(props) {\n    const {\n      maxZoom,\n      minZoom,\n      zoom\n    } = props;\n    props.zoom = Array.isArray(zoom) ? [clamp(zoom[0], minZoom, maxZoom), clamp(zoom[1], minZoom, maxZoom)] : clamp(zoom, minZoom, maxZoom);\n    return props;\n  }\n\n  _calculateNewZoom(_ref) {\n    let {\n      scale,\n      startZoom\n    } = _ref;\n    const {\n      maxZoom,\n      minZoom\n    } = this._viewportProps;\n\n    if (!startZoom && startZoom !== 0) {\n      startZoom = this._viewportProps.zoom;\n    }\n\n    let deltaZoom = Math.log2(scale);\n\n    if (Array.isArray(startZoom)) {\n      let [newZoomX, newZoomY] = startZoom;\n\n      switch (this.zoomAxis) {\n        case 'X':\n          newZoomX = clamp(newZoomX + deltaZoom, minZoom, maxZoom);\n          break;\n\n        case 'Y':\n          newZoomY = clamp(newZoomY + deltaZoom, minZoom, maxZoom);\n          break;\n\n        default:\n          let z = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);\n\n          if (z < minZoom) {\n            deltaZoom += minZoom - z;\n          }\n\n          z = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);\n\n          if (z > maxZoom) {\n            deltaZoom += maxZoom - z;\n          }\n\n          newZoomX += deltaZoom;\n          newZoomY += deltaZoom;\n      }\n\n      return [newZoomX, newZoomY];\n    }\n\n    return clamp(startZoom + deltaZoom, minZoom, maxZoom);\n  }\n\n}\n\nexport default class OrthographicController extends Controller {\n  constructor(props) {\n    props.dragMode = props.dragMode || 'pan';\n    super(OrthographicState, props);\n  }\n\n  _onPanRotate(event) {\n    return false;\n  }\n\n  get linearTransitionProps() {\n    return ['target', 'zoom'];\n  }\n\n}","map":{"version":3,"mappings":"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","names":["clamp","Controller","OrbitState","OrthographicState","constructor","props","_defineProperty","zoomAxis","_applyConstraints","maxZoom","minZoom","zoom","Array","isArray","_calculateNewZoom","scale","startZoom","_viewportProps","deltaZoom","Math","log2","newZoomX","newZoomY","z","min","max","OrthographicController","dragMode","_onPanRotate","event","linearTransitionProps"],"sources":["../../../src/controllers/orthographic-controller.ts"],"sourcesContent":["import {clamp} from '@math.gl/core';\nimport Controller from './controller';\nimport {OrbitState} from './orbit-controller';\n\nclass OrthographicState extends OrbitState {\n  zoomAxis: 'X' | 'Y' | 'all';\n\n  constructor(props) {\n    super(props);\n\n    this.zoomAxis = props.zoomAxis || 'all';\n  }\n\n  _applyConstraints(props) {\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = Array.isArray(zoom)\n      ? [clamp(zoom[0], minZoom, maxZoom), clamp(zoom[1], minZoom, maxZoom)]\n      : clamp(zoom, minZoom, maxZoom);\n    return props;\n  }\n\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    if (!startZoom && startZoom !== 0) {\n      startZoom = this._viewportProps.zoom;\n    }\n    let deltaZoom = Math.log2(scale);\n    if (Array.isArray(startZoom)) {\n      let [newZoomX, newZoomY] = startZoom;\n      switch (this.zoomAxis) {\n        case 'X':\n          // Scale x only\n          newZoomX = clamp(newZoomX + deltaZoom, minZoom, maxZoom);\n          break;\n        case 'Y':\n          // Scale y only\n          newZoomY = clamp(newZoomY + deltaZoom, minZoom, maxZoom);\n          break;\n        default:\n          // Lock aspect ratio\n          let z = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z < minZoom) {\n            deltaZoom += minZoom - z;\n          }\n          z = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z > maxZoom) {\n            deltaZoom += maxZoom - z;\n          }\n          newZoomX += deltaZoom;\n          newZoomY += deltaZoom;\n      }\n      return [newZoomX, newZoomY];\n    }\n    // Ignore `zoomAxis`\n    // `LinearTransitionInterpolator` does not support interpolation between a number and an array\n    // So if zoom is a number (legacy use case), new zoom still has to be a number\n    return clamp(startZoom + deltaZoom, minZoom, maxZoom);\n  }\n}\n\nexport default class OrthographicController extends Controller {\n  constructor(props) {\n    props.dragMode = props.dragMode || 'pan';\n    super(OrthographicState, props);\n  }\n\n  _onPanRotate(event) {\n    // No rotation in orthographic view\n    return false;\n  }\n\n  get linearTransitionProps(): string[] | null {\n    return ['target', 'zoom'];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}