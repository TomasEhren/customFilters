{"ast":null,"code":"import { CompositeLayer } from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport GPUGridLayer from '../gpu-grid-layer/gpu-grid-layer';\nimport CPUGridLayer from '../cpu-grid-layer/cpu-grid-layer';\nconst defaultProps = { ...GPUGridLayer.defaultProps,\n  ...CPUGridLayer.defaultProps,\n  gpuAggregation: false\n};\nexport default class GridLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      useGPUAggregation: true\n    };\n  }\n\n  updateState(_ref) {\n    let {\n      oldProps,\n      props,\n      changeFlags\n    } = _ref;\n    const newState = {};\n    newState.useGPUAggregation = this.canUseGPUAggregation(props);\n    this.setState(newState);\n  }\n\n  renderLayers() {\n    const {\n      data,\n      updateTriggers\n    } = this.props;\n    const id = this.state.useGPUAggregation ? 'GPU' : 'CPU';\n    const LayerType = this.state.useGPUAggregation ? this.getSubLayerClass('GPU', GPUGridLayer) : this.getSubLayerClass('CPU', CPUGridLayer);\n    return new LayerType(this.props, this.getSubLayerProps({\n      id,\n      updateTriggers\n    }), {\n      data\n    });\n  }\n\n  canUseGPUAggregation(props) {\n    const {\n      gpuAggregation,\n      lowerPercentile,\n      upperPercentile,\n      getColorValue,\n      getElevationValue,\n      colorScaleType\n    } = props;\n\n    if (!gpuAggregation) {\n      return false;\n    }\n\n    if (!GPUGridAggregator.isSupported(this.context.gl)) {\n      return false;\n    }\n\n    if (lowerPercentile !== 0 || upperPercentile !== 100) {\n      return false;\n    }\n\n    if (getColorValue !== null || getElevationValue !== null) {\n      return false;\n    }\n\n    if (colorScaleType === 'quantile' || colorScaleType === 'ordinal') {\n      return false;\n    }\n\n    return true;\n  }\n\n}\nGridLayer.layerName = 'GridLayer';\nGridLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"AAAA,SAAQA,cAAR,QAA6B,eAA7B;AACA,OAAOC,iBAAP,MAA8B,mDAA9B;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AAEA,MAAMC,YAAY,GAAG,EACnB,GAAGF,YAAY,CAACE,YADG;EAEnB,GAAGD,YAAY,CAACC,YAFG;EAGnBC,cAAc,EAAE;AAHG,CAArB;AAMA,eAAe,MAAMC,SAAN,SAAwBN,cAAxB,CAAuC;EACpDO,eAAe,GAAG;IAChB,KAAKC,KAAL,GAAa;MACXC,iBAAiB,EAAE;IADR,CAAb;EAGD;;EAEDC,WAAW,OAAiC;IAAA,IAAhC;MAACC,QAAD;MAAWC,KAAX;MAAkBC;IAAlB,CAAgC;IAC1C,MAAMC,QAAQ,GAAG,EAAjB;IACAA,QAAQ,CAACL,iBAATK,GAA6B,KAAKC,oBAAL,CAA0BH,KAA1B,CAA7BE;IACA,KAAKE,QAAL,CAAcF,QAAd;EACD;;EAEDG,YAAY,GAAG;IACb,MAAM;MAACC,IAAD;MAAOC;IAAP,IAAyB,KAAKP,KAApC;IACA,MAAMQ,EAAE,GAAG,KAAKZ,KAAL,CAAWC,iBAAX,GAA+B,KAA/B,GAAuC,KAAlD;IACA,MAAMY,SAAS,GAAG,KAAKb,KAAL,CAAWC,iBAAX,GACd,KAAKa,gBAAL,CAAsB,KAAtB,EAA6BpB,YAA7B,CADc,GAEd,KAAKoB,gBAAL,CAAsB,KAAtB,EAA6BnB,YAA7B,CAFJ;IAGA,OAAO,IAAIkB,SAAJ,CACL,KAAKT,KADA,EAEL,KAAKW,gBAAL,CAAsB;MACpBH,EADoB;MAEpBD;IAFoB,CAAtB,CAFK,EAML;MACED;IADF,CANK,CAAP;EAUD;;EAIDH,oBAAoB,CAACH,KAAD,EAAQ;IAC1B,MAAM;MACJP,cADI;MAEJmB,eAFI;MAGJC,eAHI;MAIJC,aAJI;MAKJC,iBALI;MAMJC;IANI,IAOFhB,KAPJ;;IAQA,IAAI,CAACP,cAAL,EAAqB;MAEnB,OAAO,KAAP;IACD;;IACD,IAAI,CAACJ,iBAAiB,CAAC4B,WAAlB5B,CAA8B,KAAK6B,OAAL,CAAaC,EAA3C9B,CAAL,EAAqD;MACnD,OAAO,KAAP;IACD;;IACD,IAAIuB,eAAe,KAAK,CAApBA,IAAyBC,eAAe,KAAK,GAAjD,EAAsD;MAEpD,OAAO,KAAP;IACD;;IACD,IAAIC,aAAa,KAAK,IAAlBA,IAA0BC,iBAAiB,KAAK,IAApD,EAA0D;MAExD,OAAO,KAAP;IACD;;IACD,IAAIC,cAAc,KAAK,UAAnBA,IAAiCA,cAAc,KAAK,SAAxD,EAAmE;MAEjE,OAAO,KAAP;IACD;;IACD,OAAO,IAAP;EACD;;AA9DmD;AAiEtDtB,SAAS,CAAC0B,SAAV1B,GAAsB,WAAtBA;AACAA,SAAS,CAACF,YAAVE,GAAyBF,YAAzBE","names":["CompositeLayer","GPUGridAggregator","GPUGridLayer","CPUGridLayer","defaultProps","gpuAggregation","GridLayer","initializeState","state","useGPUAggregation","updateState","oldProps","props","changeFlags","newState","canUseGPUAggregation","setState","renderLayers","data","updateTriggers","id","LayerType","getSubLayerClass","getSubLayerProps","lowerPercentile","upperPercentile","getColorValue","getElevationValue","colorScaleType","isSupported","context","gl","layerName"],"sources":["../../../src/grid-layer/grid-layer.js"],"sourcesContent":["import {CompositeLayer} from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport GPUGridLayer from '../gpu-grid-layer/gpu-grid-layer';\nimport CPUGridLayer from '../cpu-grid-layer/cpu-grid-layer';\n\nconst defaultProps = {\n  ...GPUGridLayer.defaultProps,\n  ...CPUGridLayer.defaultProps,\n  gpuAggregation: false\n};\n\nexport default class GridLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      useGPUAggregation: true\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const newState = {};\n    newState.useGPUAggregation = this.canUseGPUAggregation(props);\n    this.setState(newState);\n  }\n\n  renderLayers() {\n    const {data, updateTriggers} = this.props;\n    const id = this.state.useGPUAggregation ? 'GPU' : 'CPU';\n    const LayerType = this.state.useGPUAggregation\n      ? this.getSubLayerClass('GPU', GPUGridLayer)\n      : this.getSubLayerClass('CPU', CPUGridLayer);\n    return new LayerType(\n      this.props,\n      this.getSubLayerProps({\n        id,\n        updateTriggers\n      }),\n      {\n        data\n      }\n    );\n  }\n\n  // Private methods\n\n  canUseGPUAggregation(props) {\n    const {\n      gpuAggregation,\n      lowerPercentile,\n      upperPercentile,\n      getColorValue,\n      getElevationValue,\n      colorScaleType\n    } = props;\n    if (!gpuAggregation) {\n      // cpu aggregation is requested\n      return false;\n    }\n    if (!GPUGridAggregator.isSupported(this.context.gl)) {\n      return false;\n    }\n    if (lowerPercentile !== 0 || upperPercentile !== 100) {\n      // percentile calculations requires sorting not supported on GPU\n      return false;\n    }\n    if (getColorValue !== null || getElevationValue !== null) {\n      // accessor for custom color or elevation calculation is specified\n      return false;\n    }\n    if (colorScaleType === 'quantile' || colorScaleType === 'ordinal') {\n      // quantile and ordinal scales are not supported on GPU\n      return false;\n    }\n    return true;\n  }\n}\n\nGridLayer.layerName = 'GridLayer';\nGridLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}