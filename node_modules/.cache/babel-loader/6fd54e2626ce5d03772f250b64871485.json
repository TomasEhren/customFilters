{"ast":null,"code":"const DEFAULT_CHUNK_SIZE = 1024 * 1024;\nexport async function* makeBlobIterator(blob, options) {\n  const chunkSize = (options === null || options === void 0 ? void 0 : options.chunkSize) || DEFAULT_CHUNK_SIZE;\n  let offset = 0;\n\n  while (offset < blob.size) {\n    const end = offset + chunkSize;\n    const chunk = await blob.slice(offset, end).arrayBuffer();\n    offset = end;\n    yield chunk;\n  }\n}","map":{"version":3,"mappings":"AAEA,MAAMA,kBAAkB,GAAG,OAAO,IAAlC;AAQA,OAAO,gBAAgBC,gBAAhB,CACLC,IADK,EAELC,OAFK,EAGuB;EAC5B,MAAMC,SAAS,GAAG,QAAO,SAAPD,WAAO,WAAPA,mBAAO,CAAEC,SAAT,KAAsBJ,kBAAxC;EAEA,IAAIK,MAAM,GAAG,CAAb;;EACA,OAAOA,MAAM,GAAGH,IAAI,CAACI,IAArB,EAA2B;IACzB,MAAMC,GAAG,GAAGF,MAAM,GAAGD,SAArB;IAEA,MAAMI,KAAK,GAAG,MAAMN,IAAI,CAACO,KAALP,CAAWG,MAAXH,EAAmBK,GAAnBL,EAAwBQ,WAAxBR,EAApB;IAEAG,MAAM,GAAGE,GAATF;IACA,MAAMG,KAAN;EACD;AACF","names":["DEFAULT_CHUNK_SIZE","makeBlobIterator","blob","options","chunkSize","offset","size","end","chunk","slice","arrayBuffer"],"sources":["../../../../src/iterators/make-iterator/make-blob-iterator.ts"],"sourcesContent":["import type {IteratorOptions} from './make-iterator';\n\nconst DEFAULT_CHUNK_SIZE = 1024 * 1024; // 1MB â€” biggest value that keeps UI responsive\n\n/**\n * Returns an iterator that breaks a big Blob into chunks and yields them one-by-one\n * @param blob Blob or File object\n * @param options\n * @param options.chunkSize\n */\nexport async function* makeBlobIterator(\n  blob: Blob,\n  options?: IteratorOptions\n): AsyncIterable<ArrayBuffer> {\n  const chunkSize = options?.chunkSize || DEFAULT_CHUNK_SIZE;\n\n  let offset = 0;\n  while (offset < blob.size) {\n    const end = offset + chunkSize;\n\n    const chunk = await blob.slice(offset, end).arrayBuffer();\n\n    offset = end;\n    yield chunk;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}