{"ast":null,"code":"import _awaitAsyncGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nvar DEFAULT_CHUNK_SIZE = 1024 * 1024;\nexport function makeBlobIterator(_x, _x2) {\n  return _makeBlobIterator.apply(this, arguments);\n}\n\nfunction _makeBlobIterator() {\n  _makeBlobIterator = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(blob, options) {\n    var chunkSize, offset, end, chunk;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            chunkSize = (options === null || options === void 0 ? void 0 : options.chunkSize) || DEFAULT_CHUNK_SIZE;\n            offset = 0;\n\n          case 2:\n            if (!(offset < blob.size)) {\n              _context.next = 12;\n              break;\n            }\n\n            end = offset + chunkSize;\n            _context.next = 6;\n            return _awaitAsyncGenerator(blob.slice(offset, end).arrayBuffer());\n\n          case 6:\n            chunk = _context.sent;\n            offset = end;\n            _context.next = 10;\n            return chunk;\n\n          case 10:\n            _context.next = 2;\n            break;\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _makeBlobIterator.apply(this, arguments);\n}","map":{"version":3,"mappings":";;;AAEA,IAAMA,kBAAkB,GAAG,OAAO,IAAlC;AAQA,gBAAuBC,gBAAvB;EAAA;AAAA;;;iFAAO,iBACLC,IADK,EAELC,OAFK;IAAA;IAAA;MAAA;QAAA;UAAA;YAICC,SAJD,GAIa,QAAO,SAAPD,WAAO,WAAPA,mBAAO,CAAEC,SAAT,KAAsBJ,kBAJnC;YAMDK,MANC,GAMQ,CANR;;UAAA;YAAA,MAOEA,MAAM,GAAGH,IAAI,CAACI,IAPhB;cAAA;cAAA;YAAA;;YAQGC,GARH,GAQSF,MAAM,GAAGD,SARlB;YAAA;YAAA,4BAUiBF,IAAI,CAACM,KAALN,CAAWG,MAAXH,EAAmBK,GAAnBL,EAAwBO,WAAxBP,EAVjB;;UAAA;YAUGQ,KAVH;YAYHL,MAAM,GAAGE,GAATF;YAZG;YAaH,OAAMK,KAAN;;UAbG;YAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","names":["DEFAULT_CHUNK_SIZE","makeBlobIterator","blob","options","chunkSize","offset","size","end","slice","arrayBuffer","chunk"],"sources":["../../../../src/iterators/make-iterator/make-blob-iterator.ts"],"sourcesContent":["import type {IteratorOptions} from './make-iterator';\n\nconst DEFAULT_CHUNK_SIZE = 1024 * 1024; // 1MB â€” biggest value that keeps UI responsive\n\n/**\n * Returns an iterator that breaks a big Blob into chunks and yields them one-by-one\n * @param blob Blob or File object\n * @param options\n * @param options.chunkSize\n */\nexport async function* makeBlobIterator(\n  blob: Blob,\n  options?: IteratorOptions\n): AsyncIterable<ArrayBuffer> {\n  const chunkSize = options?.chunkSize || DEFAULT_CHUNK_SIZE;\n\n  let offset = 0;\n  while (offset < blob.size) {\n    const end = offset + chunkSize;\n\n    const chunk = await blob.slice(offset, end).arrayBuffer();\n\n    offset = end;\n    yield chunk;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}