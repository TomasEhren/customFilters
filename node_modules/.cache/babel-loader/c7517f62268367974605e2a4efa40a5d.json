{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nvar _DEFAULT_TEXTURE_PARA;\n\nimport { Texture2D, copyToTexture, cloneTextureFrom } from '@luma.gl/core';\nimport { ImageLoader } from '@loaders.gl/images';\nimport { load } from '@loaders.gl/core';\nimport { createIterable } from '@deck.gl/core';\nvar DEFAULT_CANVAS_WIDTH = 1024;\nvar DEFAULT_BUFFER = 4;\n\nvar noop = function noop() {};\n\nvar DEFAULT_TEXTURE_PARAMETERS = (_DEFAULT_TEXTURE_PARA = {}, _defineProperty(_DEFAULT_TEXTURE_PARA, 10241, 9987), _defineProperty(_DEFAULT_TEXTURE_PARA, 10240, 9729), _defineProperty(_DEFAULT_TEXTURE_PARA, 10242, 33071), _defineProperty(_DEFAULT_TEXTURE_PARA, 10243, 33071), _DEFAULT_TEXTURE_PARA);\n\nfunction nextPowOfTwo(number) {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\nfunction resizeImage(ctx, imageData, width, height) {\n  if (width === imageData.width && height === imageData.height) {\n    return imageData;\n  }\n\n  ctx.canvas.height = height;\n  ctx.canvas.width = width;\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  ctx.drawImage(imageData, 0, 0, imageData.width, imageData.height, 0, 0, width, height);\n  return ctx.canvas;\n}\n\nfunction getIconId(icon) {\n  return icon && (icon.id || icon.url);\n}\n\nfunction resizeTexture(gl, texture, width, height) {\n  var oldWidth = texture.width;\n  var oldHeight = texture.height;\n  var newTexture = cloneTextureFrom(texture, {\n    width: width,\n    height: height\n  });\n  copyToTexture(texture, newTexture, {\n    targetY: 0,\n    width: oldWidth,\n    height: oldHeight\n  });\n  texture.delete();\n  return newTexture;\n}\n\nfunction buildRowMapping(mapping, columns, yOffset) {\n  for (var i = 0; i < columns.length; i++) {\n    var _columns$i = columns[i],\n        icon = _columns$i.icon,\n        xOffset = _columns$i.xOffset;\n    var id = getIconId(icon);\n    mapping[id] = _objectSpread(_objectSpread({}, icon), {}, {\n      x: xOffset,\n      y: yOffset\n    });\n  }\n}\n\nexport function buildMapping(_ref) {\n  var icons = _ref.icons,\n      buffer = _ref.buffer,\n      _ref$mapping = _ref.mapping,\n      mapping = _ref$mapping === void 0 ? {} : _ref$mapping,\n      _ref$xOffset = _ref.xOffset,\n      xOffset = _ref$xOffset === void 0 ? 0 : _ref$xOffset,\n      _ref$yOffset = _ref.yOffset,\n      yOffset = _ref$yOffset === void 0 ? 0 : _ref$yOffset,\n      _ref$rowHeight = _ref.rowHeight,\n      rowHeight = _ref$rowHeight === void 0 ? 0 : _ref$rowHeight,\n      canvasWidth = _ref.canvasWidth;\n  var columns = [];\n\n  for (var i = 0; i < icons.length; i++) {\n    var icon = icons[i];\n    var id = getIconId(icon);\n\n    if (!mapping[id]) {\n      var height = icon.height,\n          width = icon.width;\n\n      if (xOffset + width + buffer > canvasWidth) {\n        buildRowMapping(mapping, columns, yOffset);\n        xOffset = 0;\n        yOffset = rowHeight + yOffset + buffer;\n        rowHeight = 0;\n        columns = [];\n      }\n\n      columns.push({\n        icon: icon,\n        xOffset: xOffset\n      });\n      xOffset = xOffset + width + buffer;\n      rowHeight = Math.max(rowHeight, height);\n    }\n  }\n\n  if (columns.length > 0) {\n    buildRowMapping(mapping, columns, yOffset);\n  }\n\n  return {\n    mapping: mapping,\n    rowHeight: rowHeight,\n    xOffset: xOffset,\n    yOffset: yOffset,\n    canvasWidth: canvasWidth,\n    canvasHeight: nextPowOfTwo(rowHeight + yOffset + buffer)\n  };\n}\nexport function getDiffIcons(data, getIcon, cachedIcons) {\n  if (!data || !getIcon) {\n    return null;\n  }\n\n  cachedIcons = cachedIcons || {};\n  var icons = {};\n\n  var _createIterable = createIterable(data),\n      iterable = _createIterable.iterable,\n      objectInfo = _createIterable.objectInfo;\n\n  var _iterator = _createForOfIteratorHelper(iterable),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var object = _step.value;\n      objectInfo.index++;\n      var icon = getIcon(object, objectInfo);\n      var id = getIconId(icon);\n\n      if (!icon) {\n        throw new Error('Icon is missing.');\n      }\n\n      if (!icon.url) {\n        throw new Error('Icon url is missing.');\n      }\n\n      if (!icons[id] && (!cachedIcons[id] || icon.url !== cachedIcons[id].url)) {\n        icons[id] = _objectSpread(_objectSpread({}, icon), {}, {\n          source: object,\n          sourceIndex: objectInfo.index\n        });\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return icons;\n}\n\nvar IconManager = /*#__PURE__*/function () {\n  function IconManager(gl, _ref2) {\n    var _ref2$onUpdate = _ref2.onUpdate,\n        onUpdate = _ref2$onUpdate === void 0 ? noop : _ref2$onUpdate,\n        _ref2$onError = _ref2.onError,\n        onError = _ref2$onError === void 0 ? noop : _ref2$onError;\n\n    _classCallCheck(this, IconManager);\n\n    this.gl = gl;\n    this.onUpdate = onUpdate;\n    this.onError = onError;\n    this._loadOptions = null;\n    this._getIcon = null;\n    this._texture = null;\n    this._externalTexture = null;\n    this._mapping = {};\n    this._pendingCount = 0;\n    this._autoPacking = false;\n    this._xOffset = 0;\n    this._yOffset = 0;\n    this._rowHeight = 0;\n    this._buffer = DEFAULT_BUFFER;\n    this._canvasWidth = DEFAULT_CANVAS_WIDTH;\n    this._canvasHeight = 0;\n    this._canvas = null;\n  }\n\n  _createClass(IconManager, [{\n    key: \"finalize\",\n    value: function finalize() {\n      var _this$_texture;\n\n      (_this$_texture = this._texture) === null || _this$_texture === void 0 ? void 0 : _this$_texture.delete();\n    }\n  }, {\n    key: \"getTexture\",\n    value: function getTexture() {\n      return this._texture || this._externalTexture;\n    }\n  }, {\n    key: \"getIconMapping\",\n    value: function getIconMapping(icon) {\n      var id = this._autoPacking ? getIconId(icon) : icon;\n      return this._mapping[id] || {};\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(_ref3) {\n      var loadOptions = _ref3.loadOptions,\n          autoPacking = _ref3.autoPacking,\n          iconAtlas = _ref3.iconAtlas,\n          iconMapping = _ref3.iconMapping,\n          data = _ref3.data,\n          getIcon = _ref3.getIcon;\n\n      if (loadOptions) {\n        this._loadOptions = loadOptions;\n      }\n\n      if (autoPacking !== undefined) {\n        this._autoPacking = autoPacking;\n      }\n\n      if (getIcon) {\n        this._getIcon = getIcon;\n      }\n\n      if (iconMapping) {\n        this._mapping = iconMapping;\n      }\n\n      if (iconAtlas) {\n        this._updateIconAtlas(iconAtlas);\n      }\n\n      if (this._autoPacking && (data || getIcon) && typeof document !== 'undefined') {\n        this._canvas = this._canvas || document.createElement('canvas');\n\n        this._updateAutoPacking(data);\n      }\n    }\n  }, {\n    key: \"isLoaded\",\n    get: function get() {\n      return this._pendingCount === 0;\n    }\n  }, {\n    key: \"_updateIconAtlas\",\n    value: function _updateIconAtlas(iconAtlas) {\n      var _this$_texture2;\n\n      (_this$_texture2 = this._texture) === null || _this$_texture2 === void 0 ? void 0 : _this$_texture2.delete();\n      this._texture = null;\n      this._externalTexture = iconAtlas;\n      this.onUpdate();\n    }\n  }, {\n    key: \"_updateAutoPacking\",\n    value: function _updateAutoPacking(data) {\n      var icons = Object.values(getDiffIcons(data, this._getIcon, this._mapping) || {});\n\n      if (icons.length > 0) {\n        var _buildMapping = buildMapping({\n          icons: icons,\n          buffer: this._buffer,\n          canvasWidth: this._canvasWidth,\n          mapping: this._mapping,\n          rowHeight: this._rowHeight,\n          xOffset: this._xOffset,\n          yOffset: this._yOffset\n        }),\n            mapping = _buildMapping.mapping,\n            xOffset = _buildMapping.xOffset,\n            yOffset = _buildMapping.yOffset,\n            rowHeight = _buildMapping.rowHeight,\n            canvasHeight = _buildMapping.canvasHeight;\n\n        this._rowHeight = rowHeight;\n        this._mapping = mapping;\n        this._xOffset = xOffset;\n        this._yOffset = yOffset;\n        this._canvasHeight = canvasHeight;\n\n        if (!this._texture) {\n          this._texture = new Texture2D(this.gl, {\n            width: this._canvasWidth,\n            height: this._canvasHeight,\n            parameters: DEFAULT_TEXTURE_PARAMETERS\n          });\n        }\n\n        if (this._texture.height !== this._canvasHeight) {\n          this._texture = resizeTexture(this.gl, this._texture, this._canvasWidth, this._canvasHeight);\n        }\n\n        this.onUpdate();\n\n        this._loadIcons(icons);\n      }\n    }\n  }, {\n    key: \"_loadIcons\",\n    value: function _loadIcons(icons) {\n      var _this = this;\n\n      var ctx = this._canvas.getContext('2d');\n\n      var _iterator2 = _createForOfIteratorHelper(icons),\n          _step2;\n\n      try {\n        var _loop = function _loop() {\n          var icon = _step2.value;\n          _this._pendingCount++;\n          load(icon.url, ImageLoader, _this._loadOptions).then(function (imageData) {\n            var id = getIconId(icon);\n            var _this$_mapping$id = _this._mapping[id],\n                x = _this$_mapping$id.x,\n                y = _this$_mapping$id.y,\n                width = _this$_mapping$id.width,\n                height = _this$_mapping$id.height;\n            var data = resizeImage(ctx, imageData, width, height);\n\n            _this._texture.setSubImageData({\n              data: data,\n              x: x,\n              y: y,\n              width: width,\n              height: height\n            });\n\n            _this._texture.generateMipmap();\n\n            _this.onUpdate();\n          }).catch(function (error) {\n            _this.onError({\n              url: icon.url,\n              source: icon.source,\n              sourceIndex: icon.sourceIndex,\n              loadOptions: _this._loadOptions,\n              error: error\n            });\n          }).finally(function () {\n            _this._pendingCount--;\n          });\n        };\n\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }]);\n\n  return IconManager;\n}();\n\nexport { IconManager as default };","map":{"version":3,"mappings":"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","names":["Texture2D","copyToTexture","cloneTextureFrom","ImageLoader","load","createIterable","DEFAULT_CANVAS_WIDTH","DEFAULT_BUFFER","noop","DEFAULT_TEXTURE_PARAMETERS","nextPowOfTwo","number","Math","pow","ceil","log2","resizeImage","ctx","imageData","width","height","canvas","clearRect","drawImage","getIconId","icon","id","url","resizeTexture","gl","texture","oldWidth","oldHeight","newTexture","targetY","delete","buildRowMapping","mapping","columns","yOffset","i","length","xOffset","x","y","buildMapping","icons","buffer","rowHeight","canvasWidth","push","max","canvasHeight","getDiffIcons","data","getIcon","cachedIcons","iterable","objectInfo","object","index","Error","source","sourceIndex","IconManager","constructor","onUpdate","onError","_loadOptions","_getIcon","_texture","_externalTexture","_mapping","_pendingCount","_autoPacking","_xOffset","_yOffset","_rowHeight","_buffer","_canvasWidth","_canvasHeight","_canvas","finalize","getTexture","getIconMapping","setProps","loadOptions","autoPacking","iconAtlas","iconMapping","undefined","_updateIconAtlas","document","createElement","_updateAutoPacking","Object","values","parameters","_loadIcons","getContext","then","setSubImageData","generateMipmap","catch","error","finally"],"sources":["../../../src/icon-layer/icon-manager.js"],"sourcesContent":["/* global document */\nimport GL from '@luma.gl/constants';\nimport {Texture2D, copyToTexture, cloneTextureFrom} from '@luma.gl/core';\nimport {ImageLoader} from '@loaders.gl/images';\nimport {load} from '@loaders.gl/core';\nimport {createIterable} from '@deck.gl/core';\n\nconst DEFAULT_CANVAS_WIDTH = 1024;\nconst DEFAULT_BUFFER = 4;\n\nconst noop = () => {};\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n  // GL.LINEAR is the default value but explicitly set it here\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  // for texture boundary artifact\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\nfunction nextPowOfTwo(number) {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\n// update comment to create a new texture and copy original data.\nfunction resizeImage(ctx, imageData, width, height) {\n  if (width === imageData.width && height === imageData.height) {\n    return imageData;\n  }\n\n  ctx.canvas.height = height;\n  ctx.canvas.width = width;\n\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  // image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight\n  ctx.drawImage(imageData, 0, 0, imageData.width, imageData.height, 0, 0, width, height);\n\n  return ctx.canvas;\n}\n\nfunction getIconId(icon) {\n  return icon && (icon.id || icon.url);\n}\n\n// resize texture without losing original data\nfunction resizeTexture(gl, texture, width, height) {\n  const oldWidth = texture.width;\n  const oldHeight = texture.height;\n\n  const newTexture = cloneTextureFrom(texture, {width, height});\n  copyToTexture(texture, newTexture, {\n    targetY: 0,\n    width: oldWidth,\n    height: oldHeight\n  });\n\n  texture.delete();\n  return newTexture;\n}\n\n// traverse icons in a row of icon atlas\n// extend each icon with left-top coordinates\nfunction buildRowMapping(mapping, columns, yOffset) {\n  for (let i = 0; i < columns.length; i++) {\n    const {icon, xOffset} = columns[i];\n    const id = getIconId(icon);\n    mapping[id] = {\n      ...icon,\n      x: xOffset,\n      y: yOffset\n    };\n  }\n}\n\n/**\n * Generate coordinate mapping to retrieve icon left-top position from an icon atlas\n * @param icons {Array<Object>} list of icons, each icon requires url, width, height\n * @param buffer {Number} add buffer to the right and bottom side of the image\n * @param xOffset {Number} right position of last icon in old mapping\n * @param yOffset {Number} top position in last icon in old mapping\n * @param rowHeight {Number} rowHeight of the last icon's row\n * @param canvasWidth {Number} max width of canvas\n * @param mapping {object} old mapping\n * @returns {{mapping: {'/icon/1': {url, width, height, ...}},, canvasHeight: {Number}}}\n */\nexport function buildMapping({\n  icons,\n  buffer,\n  mapping = {},\n  xOffset = 0,\n  yOffset = 0,\n  rowHeight = 0,\n  canvasWidth\n}) {\n  let columns = [];\n  // Strategy to layout all the icons into a texture:\n  // traverse the icons sequentially, layout the icons from left to right, top to bottom\n  // when the sum of the icons width is equal or larger than canvasWidth,\n  // move to next row starting from total height so far plus max height of the icons in previous row\n  // row width is equal to canvasWidth\n  // row height is decided by the max height of the icons in that row\n  // mapping coordinates of each icon is its left-top position in the texture\n  for (let i = 0; i < icons.length; i++) {\n    const icon = icons[i];\n    const id = getIconId(icon);\n\n    if (!mapping[id]) {\n      const {height, width} = icon;\n\n      // fill one row\n      if (xOffset + width + buffer > canvasWidth) {\n        buildRowMapping(mapping, columns, yOffset);\n\n        xOffset = 0;\n        yOffset = rowHeight + yOffset + buffer;\n        rowHeight = 0;\n        columns = [];\n      }\n\n      columns.push({\n        icon,\n        xOffset\n      });\n\n      xOffset = xOffset + width + buffer;\n      rowHeight = Math.max(rowHeight, height);\n    }\n  }\n\n  if (columns.length > 0) {\n    buildRowMapping(mapping, columns, yOffset);\n  }\n\n  return {\n    mapping,\n    rowHeight,\n    xOffset,\n    yOffset,\n    canvasWidth,\n    canvasHeight: nextPowOfTwo(rowHeight + yOffset + buffer)\n  };\n}\n\n// extract icons from data\n// return icons should be unique, and not cached or cached but url changed\nexport function getDiffIcons(data, getIcon, cachedIcons) {\n  if (!data || !getIcon) {\n    return null;\n  }\n\n  cachedIcons = cachedIcons || {};\n  const icons = {};\n  const {iterable, objectInfo} = createIterable(data);\n  for (const object of iterable) {\n    objectInfo.index++;\n    const icon = getIcon(object, objectInfo);\n    const id = getIconId(icon);\n\n    if (!icon) {\n      throw new Error('Icon is missing.');\n    }\n\n    if (!icon.url) {\n      throw new Error('Icon url is missing.');\n    }\n\n    if (!icons[id] && (!cachedIcons[id] || icon.url !== cachedIcons[id].url)) {\n      icons[id] = {...icon, source: object, sourceIndex: objectInfo.index};\n    }\n  }\n  return icons;\n}\n\nexport default class IconManager {\n  constructor(\n    gl,\n    {\n      onUpdate = noop, // notify IconLayer when icon texture update\n      onError = noop\n    }\n  ) {\n    this.gl = gl;\n    this.onUpdate = onUpdate;\n    this.onError = onError;\n\n    // load options used for loading images\n    this._loadOptions = null;\n    this._getIcon = null;\n\n    this._texture = null;\n    this._externalTexture = null;\n    this._mapping = {};\n    // count of pending requests to fetch icons\n    this._pendingCount = 0;\n\n    this._autoPacking = false;\n\n    // internal props used when autoPacking applied\n    // right position of last icon\n    this._xOffset = 0;\n    // top position of last icon\n    this._yOffset = 0;\n    this._rowHeight = 0;\n    this._buffer = DEFAULT_BUFFER;\n    this._canvasWidth = DEFAULT_CANVAS_WIDTH;\n    this._canvasHeight = 0;\n    this._canvas = null;\n  }\n\n  finalize() {\n    this._texture?.delete();\n  }\n\n  getTexture() {\n    return this._texture || this._externalTexture;\n  }\n\n  getIconMapping(icon) {\n    const id = this._autoPacking ? getIconId(icon) : icon;\n    return this._mapping[id] || {};\n  }\n\n  setProps({loadOptions, autoPacking, iconAtlas, iconMapping, data, getIcon}) {\n    if (loadOptions) {\n      this._loadOptions = loadOptions;\n    }\n\n    if (autoPacking !== undefined) {\n      this._autoPacking = autoPacking;\n    }\n\n    if (getIcon) {\n      this._getIcon = getIcon;\n    }\n\n    if (iconMapping) {\n      this._mapping = iconMapping;\n    }\n\n    if (iconAtlas) {\n      this._updateIconAtlas(iconAtlas);\n    }\n\n    if (this._autoPacking && (data || getIcon) && typeof document !== 'undefined') {\n      this._canvas = this._canvas || document.createElement('canvas');\n\n      this._updateAutoPacking(data);\n    }\n  }\n\n  get isLoaded() {\n    return this._pendingCount === 0;\n  }\n\n  _updateIconAtlas(iconAtlas) {\n    this._texture?.delete();\n    this._texture = null;\n    this._externalTexture = iconAtlas;\n    this.onUpdate();\n  }\n\n  _updateAutoPacking(data) {\n    const icons = Object.values(getDiffIcons(data, this._getIcon, this._mapping) || {});\n\n    if (icons.length > 0) {\n      // generate icon mapping\n      const {mapping, xOffset, yOffset, rowHeight, canvasHeight} = buildMapping({\n        icons,\n        buffer: this._buffer,\n        canvasWidth: this._canvasWidth,\n        mapping: this._mapping,\n        rowHeight: this._rowHeight,\n        xOffset: this._xOffset,\n        yOffset: this._yOffset\n      });\n\n      this._rowHeight = rowHeight;\n      this._mapping = mapping;\n      this._xOffset = xOffset;\n      this._yOffset = yOffset;\n      this._canvasHeight = canvasHeight;\n\n      // create new texture\n      if (!this._texture) {\n        this._texture = new Texture2D(this.gl, {\n          width: this._canvasWidth,\n          height: this._canvasHeight,\n          parameters: DEFAULT_TEXTURE_PARAMETERS\n        });\n      }\n\n      if (this._texture.height !== this._canvasHeight) {\n        this._texture = resizeTexture(\n          this.gl,\n          this._texture,\n          this._canvasWidth,\n          this._canvasHeight\n        );\n      }\n\n      this.onUpdate();\n\n      // load images\n      this._loadIcons(icons);\n    }\n  }\n\n  _loadIcons(icons) {\n    const ctx = this._canvas.getContext('2d');\n\n    for (const icon of icons) {\n      this._pendingCount++;\n      load(icon.url, ImageLoader, this._loadOptions)\n        .then(imageData => {\n          const id = getIconId(icon);\n          const {x, y, width, height} = this._mapping[id];\n\n          const data = resizeImage(ctx, imageData, width, height);\n\n          this._texture.setSubImageData({\n            data,\n            x,\n            y,\n            width,\n            height\n          });\n\n          // Call to regenerate mipmaps after modifying texture(s)\n          this._texture.generateMipmap();\n\n          this.onUpdate();\n        })\n        .catch(error => {\n          this.onError({\n            url: icon.url,\n            source: icon.source,\n            sourceIndex: icon.sourceIndex,\n            loadOptions: this._loadOptions,\n            error\n          });\n        })\n        .finally(() => {\n          this._pendingCount--;\n        });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}