{"ast":null,"code":"export function extractGeometryInfo(features) {\n  let pointPositionsCount = 0;\n  let pointFeaturesCount = 0;\n  let linePositionsCount = 0;\n  let linePathsCount = 0;\n  let lineFeaturesCount = 0;\n  let polygonPositionsCount = 0;\n  let polygonObjectsCount = 0;\n  let polygonRingsCount = 0;\n  let polygonFeaturesCount = 0;\n  const coordLengths = new Set();\n\n  for (const feature of features) {\n    const geometry = feature.geometry;\n\n    switch (geometry.type) {\n      case 'Point':\n        pointFeaturesCount++;\n        pointPositionsCount++;\n        coordLengths.add(geometry.coordinates.length);\n        break;\n\n      case 'MultiPoint':\n        pointFeaturesCount++;\n        pointPositionsCount += geometry.coordinates.length;\n\n        for (const point of geometry.coordinates) {\n          coordLengths.add(point.length);\n        }\n\n        break;\n\n      case 'LineString':\n        lineFeaturesCount++;\n        linePositionsCount += geometry.coordinates.length;\n        linePathsCount++;\n\n        for (const coord of geometry.coordinates) {\n          coordLengths.add(coord.length);\n        }\n\n        break;\n\n      case 'MultiLineString':\n        lineFeaturesCount++;\n\n        for (const line of geometry.coordinates) {\n          linePositionsCount += line.length;\n          linePathsCount++;\n\n          for (const coord of line) {\n            coordLengths.add(coord.length);\n          }\n        }\n\n        break;\n\n      case 'Polygon':\n        polygonFeaturesCount++;\n        polygonObjectsCount++;\n        polygonRingsCount += geometry.coordinates.length;\n        const flattened = geometry.coordinates.flat();\n        polygonPositionsCount += flattened.length;\n\n        for (const coord of flattened) {\n          coordLengths.add(coord.length);\n        }\n\n        break;\n\n      case 'MultiPolygon':\n        polygonFeaturesCount++;\n\n        for (const polygon of geometry.coordinates) {\n          polygonObjectsCount++;\n          polygonRingsCount += polygon.length;\n          const flattened = polygon.flat();\n          polygonPositionsCount += flattened.length;\n\n          for (const coord of flattened) {\n            coordLengths.add(coord.length);\n          }\n        }\n\n        break;\n\n      default:\n        throw new Error(\"Unsupported geometry type: \".concat(geometry.type));\n    }\n  }\n\n  return {\n    coordLength: coordLengths.size > 0 ? Math.max(...coordLengths) : 2,\n    pointPositionsCount,\n    pointFeaturesCount,\n    linePositionsCount,\n    linePathsCount,\n    lineFeaturesCount,\n    polygonPositionsCount,\n    polygonObjectsCount,\n    polygonRingsCount,\n    polygonFeaturesCount\n  };\n}","map":{"version":3,"mappings":"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","names":["extractGeometryInfo","features","pointPositionsCount","pointFeaturesCount","linePositionsCount","linePathsCount","lineFeaturesCount","polygonPositionsCount","polygonObjectsCount","polygonRingsCount","polygonFeaturesCount","coordLengths","Set","feature","geometry","type","add","coordinates","length","point","coord","line","flattened","flat","polygon","Error","coordLength","size","Math","max"],"sources":["../../../src/lib/extract-geometry-info.ts"],"sourcesContent":["import {Feature, GeojsonGeometryInfo} from '@loaders.gl/schema';\n\n/**\n *  Initial scan over GeoJSON features\n *  Counts number of coordinates of each geometry type and\n *  keeps track of the max coordinate dimensions\n */\n// eslint-disable-next-line complexity, max-statements\nexport function extractGeometryInfo(features: Feature[]): GeojsonGeometryInfo {\n  // Counts the number of _positions_, so [x, y, z] counts as one\n  let pointPositionsCount = 0;\n  let pointFeaturesCount = 0;\n  let linePositionsCount = 0;\n  let linePathsCount = 0;\n  let lineFeaturesCount = 0;\n  let polygonPositionsCount = 0;\n  let polygonObjectsCount = 0;\n  let polygonRingsCount = 0;\n  let polygonFeaturesCount = 0;\n  const coordLengths = new Set<number>();\n\n  for (const feature of features) {\n    const geometry = feature.geometry;\n    switch (geometry.type) {\n      case 'Point':\n        pointFeaturesCount++;\n        pointPositionsCount++;\n        coordLengths.add(geometry.coordinates.length);\n        break;\n      case 'MultiPoint':\n        pointFeaturesCount++;\n        pointPositionsCount += geometry.coordinates.length;\n        for (const point of geometry.coordinates) {\n          coordLengths.add(point.length);\n        }\n        break;\n      case 'LineString':\n        lineFeaturesCount++;\n        linePositionsCount += geometry.coordinates.length;\n        linePathsCount++;\n\n        for (const coord of geometry.coordinates) {\n          coordLengths.add(coord.length);\n        }\n        break;\n      case 'MultiLineString':\n        lineFeaturesCount++;\n        for (const line of geometry.coordinates) {\n          linePositionsCount += line.length;\n          linePathsCount++;\n\n          // eslint-disable-next-line max-depth\n          for (const coord of line) {\n            coordLengths.add(coord.length);\n          }\n        }\n        break;\n      case 'Polygon':\n        polygonFeaturesCount++;\n        polygonObjectsCount++;\n        polygonRingsCount += geometry.coordinates.length;\n        const flattened = geometry.coordinates.flat();\n        polygonPositionsCount += flattened.length;\n\n        for (const coord of flattened) {\n          coordLengths.add(coord.length);\n        }\n        break;\n      case 'MultiPolygon':\n        polygonFeaturesCount++;\n        for (const polygon of geometry.coordinates) {\n          polygonObjectsCount++;\n          polygonRingsCount += polygon.length;\n          const flattened = polygon.flat();\n          polygonPositionsCount += flattened.length;\n\n          // eslint-disable-next-line max-depth\n          for (const coord of flattened) {\n            coordLengths.add(coord.length);\n          }\n        }\n        break;\n      default:\n        throw new Error(`Unsupported geometry type: ${geometry.type}`);\n    }\n  }\n\n  return {\n    coordLength: coordLengths.size > 0 ? Math.max(...coordLengths) : 2,\n\n    pointPositionsCount,\n    pointFeaturesCount,\n    linePositionsCount,\n    linePathsCount,\n    lineFeaturesCount,\n    polygonPositionsCount,\n    polygonObjectsCount,\n    polygonRingsCount,\n    polygonFeaturesCount\n  };\n}\n"]},"metadata":{},"sourceType":"module"}