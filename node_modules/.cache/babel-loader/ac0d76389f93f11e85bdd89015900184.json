{"ast":null,"code":"import { padArray } from '../../utils/array-utils';\nconst DEFAULT_TRANSITION_SETTINGS = {\n  interpolation: {\n    duration: 0,\n    easing: t => t\n  },\n  spring: {\n    stiffness: 0.05,\n    damping: 0.5\n  }\n};\nexport function normalizeTransitionSettings(userSettings, layerSettings) {\n  if (!userSettings) {\n    return null;\n  }\n\n  if (Number.isFinite(userSettings)) {\n    userSettings = {\n      duration: userSettings\n    };\n  }\n\n  userSettings.type = userSettings.type || 'interpolation';\n  return { ...DEFAULT_TRANSITION_SETTINGS[userSettings.type],\n    ...layerSettings,\n    ...userSettings\n  };\n}\nexport function getSourceBufferAttribute(gl, attribute) {\n  const buffer = attribute.getBuffer();\n\n  if (buffer) {\n    return [attribute.getBuffer(), {\n      divisor: 0,\n      size: attribute.size,\n      normalized: attribute.settings.normalized\n    }];\n  }\n\n  return attribute.value;\n}\nexport function getAttributeTypeFromSize(size) {\n  switch (size) {\n    case 1:\n      return 'float';\n\n    case 2:\n      return 'vec2';\n\n    case 3:\n      return 'vec3';\n\n    case 4:\n      return 'vec4';\n\n    default:\n      throw new Error(\"No defined attribute type for size \\\"\".concat(size, \"\\\"\"));\n  }\n}\nexport function cycleBuffers(buffers) {\n  buffers.push(buffers.shift());\n}\nexport function getAttributeBufferLength(attribute, numInstances) {\n  const {\n    doublePrecision,\n    settings,\n    value,\n    size\n  } = attribute;\n  const multiplier = doublePrecision && value instanceof Float64Array ? 2 : 1;\n  return (settings.noAlloc ? value.length : numInstances * size) * multiplier;\n}\nexport function padBuffer(_ref) {\n  let {\n    buffer,\n    numInstances,\n    attribute,\n    fromLength,\n    fromStartIndices,\n    getData = x => x\n  } = _ref;\n  const precisionMultiplier = attribute.doublePrecision && attribute.value instanceof Float64Array ? 2 : 1;\n  const size = attribute.size * precisionMultiplier;\n  const byteOffset = attribute.byteOffset;\n  const toStartIndices = attribute.startIndices;\n  const hasStartIndices = fromStartIndices && toStartIndices;\n  const toLength = getAttributeBufferLength(attribute, numInstances);\n  const isConstant = attribute.state.constant;\n\n  if (!hasStartIndices && fromLength >= toLength) {\n    return;\n  }\n\n  const toData = isConstant ? attribute.value : attribute.getBuffer().getData({\n    srcByteOffset: byteOffset\n  });\n\n  if (attribute.settings.normalized && !isConstant) {\n    const getter = getData;\n\n    getData = (value, chunk) => attribute._normalizeConstant(getter(value, chunk));\n  }\n\n  const getMissingData = isConstant ? (i, chunk) => getData(toData, chunk) : (i, chunk) => getData(toData.subarray(i, i + size), chunk);\n  const source = buffer.getData({\n    length: fromLength\n  });\n  const data = new Float32Array(toLength);\n  padArray({\n    source,\n    target: data,\n    sourceStartIndices: fromStartIndices,\n    targetStartIndices: toStartIndices,\n    size,\n    getData: getMissingData\n  });\n\n  if (buffer.byteLength < data.byteLength + byteOffset) {\n    buffer.reallocate(data.byteLength + byteOffset);\n  }\n\n  buffer.subData({\n    data,\n    offset: byteOffset\n  });\n}","map":{"version":3,"mappings":"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","names":["padArray","DEFAULT_TRANSITION_SETTINGS","interpolation","duration","easing","t","spring","stiffness","damping","normalizeTransitionSettings","userSettings","layerSettings","Number","isFinite","type","getSourceBufferAttribute","gl","attribute","buffer","getBuffer","divisor","size","normalized","settings","value","getAttributeTypeFromSize","Error","cycleBuffers","buffers","push","shift","getAttributeBufferLength","numInstances","doublePrecision","multiplier","Float64Array","noAlloc","length","padBuffer","fromLength","fromStartIndices","getData","x","precisionMultiplier","byteOffset","toStartIndices","startIndices","hasStartIndices","toLength","isConstant","state","constant","toData","srcByteOffset","getter","chunk","_normalizeConstant","getMissingData","i","subarray","source","data","Float32Array","target","sourceStartIndices","targetStartIndices","byteLength","reallocate","subData","offset"],"sources":["../../../../src/lib/attribute/attribute-transition-utils.js"],"sourcesContent":["import {padArray} from '../../utils/array-utils';\n\nconst DEFAULT_TRANSITION_SETTINGS = {\n  interpolation: {\n    duration: 0,\n    easing: t => t\n  },\n  spring: {\n    stiffness: 0.05,\n    damping: 0.5\n  }\n};\n\nexport function normalizeTransitionSettings(userSettings, layerSettings) {\n  if (!userSettings) {\n    return null;\n  }\n  if (Number.isFinite(userSettings)) {\n    userSettings = {duration: userSettings};\n  }\n  userSettings.type = userSettings.type || 'interpolation';\n  return {\n    ...DEFAULT_TRANSITION_SETTINGS[userSettings.type],\n    ...layerSettings,\n    ...userSettings\n  };\n}\n\n// NOTE: NOT COPYING OVER OFFSET OR STRIDE HERE BECAUSE:\n// (1) WE DON'T SUPPORT INTERLEAVED BUFFERS FOR TRANSITIONS\n// (2) BUFFERS WITH OFFSETS ALWAYS CONTAIN VALUES OF THE SAME SIZE\n// (3) THE OPERATIONS IN THE SHADER ARE PER-COMPONENT (addition and scaling)\nexport function getSourceBufferAttribute(gl, attribute) {\n  // The Attribute we pass to Transform as a sourceBuffer must have {divisor: 0}\n  // so we create a copy of the attribute (with divisor=0) to use when running\n  // transform feedback\n  const buffer = attribute.getBuffer();\n  if (buffer) {\n    return [\n      attribute.getBuffer(),\n      {\n        divisor: 0,\n        size: attribute.size,\n        normalized: attribute.settings.normalized\n      }\n    ];\n  }\n  // constant\n  // don't pass normalized here because the `value` from a normalized attribute is\n  // already normalized\n  return attribute.value;\n}\n\nexport function getAttributeTypeFromSize(size) {\n  switch (size) {\n    case 1:\n      return 'float';\n    case 2:\n      return 'vec2';\n    case 3:\n      return 'vec3';\n    case 4:\n      return 'vec4';\n    default:\n      throw new Error(`No defined attribute type for size \"${size}\"`);\n  }\n}\n\nexport function cycleBuffers(buffers) {\n  buffers.push(buffers.shift());\n}\n\nexport function getAttributeBufferLength(attribute, numInstances) {\n  const {doublePrecision, settings, value, size} = attribute;\n  const multiplier = doublePrecision && value instanceof Float64Array ? 2 : 1;\n  return (settings.noAlloc ? value.length : numInstances * size) * multiplier;\n}\n\n// This helper is used when transitioning attributes from a set of values in one buffer layout\n// to a set of values in a different buffer layout. (Buffer layouts are used when attribute values\n// within a buffer should be grouped for drawElements, like the Polygon layer.) For example, a\n// buffer layout of [3, 4] might have data [A1, A2, A3, B1, B2, B3, B4]. If it needs to transition\n// to a buffer layout of [4, 2], it should produce a buffer, using the transition setting's `enter`\n// function, that looks like this: [A1, A2, A3, A4 (user `enter` fn), B1, B2, 0]. Note: the final\n// 0 in this buffer is because we never shrink buffers, only grow them, for performance reasons.\nexport function padBuffer({\n  buffer,\n  numInstances,\n  attribute,\n  fromLength,\n  fromStartIndices,\n  getData = x => x\n}) {\n  // TODO: move the precisionMultiplier logic to the attribute when retrieving\n  // its `size` and `elementOffset`?\n  const precisionMultiplier =\n    attribute.doublePrecision && attribute.value instanceof Float64Array ? 2 : 1;\n  const size = attribute.size * precisionMultiplier;\n  const byteOffset = attribute.byteOffset;\n  const toStartIndices = attribute.startIndices;\n  const hasStartIndices = fromStartIndices && toStartIndices;\n  const toLength = getAttributeBufferLength(attribute, numInstances);\n  const isConstant = attribute.state.constant;\n\n  // check if buffer needs to be padded\n  if (!hasStartIndices && fromLength >= toLength) {\n    return;\n  }\n\n  const toData = isConstant\n    ? attribute.value\n    : attribute.getBuffer().getData({srcByteOffset: byteOffset});\n  if (attribute.settings.normalized && !isConstant) {\n    const getter = getData;\n    getData = (value, chunk) => attribute._normalizeConstant(getter(value, chunk));\n  }\n\n  const getMissingData = isConstant\n    ? (i, chunk) => getData(toData, chunk)\n    : (i, chunk) => getData(toData.subarray(i, i + size), chunk);\n\n  const source = buffer.getData({length: fromLength});\n  const data = new Float32Array(toLength);\n  padArray({\n    source,\n    target: data,\n    sourceStartIndices: fromStartIndices,\n    targetStartIndices: toStartIndices,\n    size,\n    getData: getMissingData\n  });\n\n  // TODO: support offset in buffer.setData?\n  if (buffer.byteLength < data.byteLength + byteOffset) {\n    buffer.reallocate(data.byteLength + byteOffset);\n  }\n  buffer.subData({data, offset: byteOffset});\n}\n"]},"metadata":{},"sourceType":"module"}