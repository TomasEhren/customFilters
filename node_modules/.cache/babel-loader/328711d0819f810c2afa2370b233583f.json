{"ast":null,"code":"import _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { log, assertWebGLContext } from '@luma.gl/gltools';\nimport Texture from './texture';\nvar FACES = [34069, 34070, 34071, 34072, 34073, 34074];\n\nvar TextureCube = /*#__PURE__*/function (_Texture) {\n  _inherits(TextureCube, _Texture);\n\n  var _super = _createSuper(TextureCube);\n\n  function TextureCube(gl) {\n    var _this;\n\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, TextureCube);\n\n    assertWebGLContext(gl);\n    _this = _super.call(this, gl, Object.assign({}, props, {\n      target: 34067\n    }));\n\n    _this.initialize(props);\n\n    Object.seal(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(TextureCube, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var _this2 = this;\n\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _props$mipmaps = props.mipmaps,\n          mipmaps = _props$mipmaps === void 0 ? true : _props$mipmaps,\n          _props$parameters = props.parameters,\n          parameters = _props$parameters === void 0 ? {} : _props$parameters;\n      this.opts = props;\n      this.setCubeMapImageData(props).then(function () {\n        _this2.loaded = true;\n\n        if (mipmaps) {\n          _this2.generateMipmap(props);\n        }\n\n        _this2.setParameters(parameters);\n      });\n      return this;\n    }\n  }, {\n    key: \"subImage\",\n    value: function subImage(_ref) {\n      var face = _ref.face,\n          data = _ref.data,\n          _ref$x = _ref.x,\n          x = _ref$x === void 0 ? 0 : _ref$x,\n          _ref$y = _ref.y,\n          y = _ref$y === void 0 ? 0 : _ref$y,\n          _ref$mipmapLevel = _ref.mipmapLevel,\n          mipmapLevel = _ref$mipmapLevel === void 0 ? 0 : _ref$mipmapLevel;\n      return this._subImage({\n        target: face,\n        data: data,\n        x: x,\n        y: y,\n        mipmapLevel: mipmapLevel\n      });\n    }\n  }, {\n    key: \"setCubeMapImageData\",\n    value: function () {\n      var _setCubeMapImageData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n        var _this3 = this;\n\n        var width, height, pixels, data, _ref2$border, border, _ref2$format, format, _ref2$type, type, gl, imageDataMap, resolvedFaces;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                width = _ref2.width, height = _ref2.height, pixels = _ref2.pixels, data = _ref2.data, _ref2$border = _ref2.border, border = _ref2$border === void 0 ? 0 : _ref2$border, _ref2$format = _ref2.format, format = _ref2$format === void 0 ? 6408 : _ref2$format, _ref2$type = _ref2.type, type = _ref2$type === void 0 ? 5121 : _ref2$type;\n                gl = this.gl;\n                imageDataMap = pixels || data;\n                _context.next = 5;\n                return Promise.all(FACES.map(function (face) {\n                  var facePixels = imageDataMap[face];\n                  return Promise.all(Array.isArray(facePixels) ? facePixels : [facePixels]);\n                }));\n\n              case 5:\n                resolvedFaces = _context.sent;\n                this.bind();\n                FACES.forEach(function (face, index) {\n                  if (resolvedFaces[index].length > 1 && _this3.opts.mipmaps !== false) {\n                    log.warn(\"\".concat(_this3.id, \" has mipmap and multiple LODs.\"))();\n                  }\n\n                  resolvedFaces[index].forEach(function (image, lodLevel) {\n                    if (width && height) {\n                      gl.texImage2D(face, lodLevel, format, width, height, border, format, type, image);\n                    } else {\n                      gl.texImage2D(face, lodLevel, format, format, type, image);\n                    }\n                  });\n                });\n                this.unbind();\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setCubeMapImageData(_x) {\n        return _setCubeMapImageData.apply(this, arguments);\n      }\n\n      return setCubeMapImageData;\n    }()\n  }, {\n    key: \"setImageDataForFace\",\n    value: function setImageDataForFace(options) {\n      var _this4 = this;\n\n      var face = options.face,\n          width = options.width,\n          height = options.height,\n          pixels = options.pixels,\n          data = options.data,\n          _options$border = options.border,\n          border = _options$border === void 0 ? 0 : _options$border,\n          _options$format = options.format,\n          format = _options$format === void 0 ? 6408 : _options$format,\n          _options$type = options.type,\n          type = _options$type === void 0 ? 5121 : _options$type;\n      var gl = this.gl;\n      var imageData = pixels || data;\n      this.bind();\n\n      if (imageData instanceof Promise) {\n        imageData.then(function (resolvedImageData) {\n          return _this4.setImageDataForFace(Object.assign({}, options, {\n            face: face,\n            data: resolvedImageData,\n            pixels: resolvedImageData\n          }));\n        });\n      } else if (this.width || this.height) {\n        gl.texImage2D(face, 0, format, width, height, border, format, type, imageData);\n      } else {\n        gl.texImage2D(face, 0, format, format, type, imageData);\n      }\n\n      return this;\n    }\n  }]);\n\n  return TextureCube;\n}(Texture);\n\nexport { TextureCube as default };\nTextureCube.FACES = FACES;","map":{"version":3,"mappings":"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","names":["log","assertWebGLContext","Texture","FACES","TextureCube","constructor","gl","props","Object","assign","target","initialize","seal","mipmaps","parameters","opts","setCubeMapImageData","then","loaded","generateMipmap","setParameters","subImage","face","data","x","y","mipmapLevel","_subImage","width","height","pixels","border","format","type","imageDataMap","Promise","all","map","facePixels","Array","isArray","resolvedFaces","bind","forEach","index","length","warn","id","image","lodLevel","texImage2D","unbind","setImageDataForFace","options","imageData","resolvedImageData"],"sources":["../../../src/classes/texture-cube.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {log, assertWebGLContext} from '@luma.gl/gltools';\nimport Texture from './texture';\n\nconst FACES = [\n  GL.TEXTURE_CUBE_MAP_POSITIVE_X,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_X,\n  GL.TEXTURE_CUBE_MAP_POSITIVE_Y,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n  GL.TEXTURE_CUBE_MAP_POSITIVE_Z,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_Z\n];\n\nexport default class TextureCube extends Texture {\n  constructor(gl, props = {}) {\n    assertWebGLContext(gl);\n\n    super(gl, Object.assign({}, props, {target: GL.TEXTURE_CUBE_MAP}));\n\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n\n  initialize(props = {}) {\n    const {mipmaps = true, parameters = {}} = props;\n\n    // Store props for accessors\n    this.opts = props;\n\n    // @ts-ignore\n    this.setCubeMapImageData(props).then(() => {\n      this.loaded = true;\n\n      // TODO - should genMipmap() be called on the cubemap or on the faces?\n      // TODO - without generateMipmap() cube textures do not work at all!!! Why?\n      if (mipmaps) {\n        this.generateMipmap(props);\n      }\n\n      this.setParameters(parameters);\n    });\n    return this;\n  }\n\n  subImage({face, data, x = 0, y = 0, mipmapLevel = 0}) {\n    // @ts-ignore TODO - is this a bug?\n    return this._subImage({target: face, data, x, y, mipmapLevel});\n  }\n\n  /* eslint-disable max-statements, max-len */\n  async setCubeMapImageData({\n    width,\n    height,\n    pixels,\n    data,\n    border = 0,\n    format = GL.RGBA,\n    type = GL.UNSIGNED_BYTE\n  }) {\n    const {gl} = this;\n    const imageDataMap = pixels || data;\n\n    // pixel data (imageDataMap) is an Object from Face to Image or Promise.\n    // For example:\n    // {\n    // GL.TEXTURE_CUBE_MAP_POSITIVE_X : Image-or-Promise,\n    // GL.TEXTURE_CUBE_MAP_NEGATIVE_X : Image-or-Promise,\n    // ... }\n    // To provide multiple level-of-details (LODs) this can be Face to Array\n    // of Image or Promise, like this\n    // {\n    // GL.TEXTURE_CUBE_MAP_POSITIVE_X : [Image-or-Promise-LOD-0, Image-or-Promise-LOD-1],\n    // GL.TEXTURE_CUBE_MAP_NEGATIVE_X : [Image-or-Promise-LOD-0, Image-or-Promise-LOD-1],\n    // ... }\n\n    const resolvedFaces = await Promise.all(\n      FACES.map(face => {\n        const facePixels = imageDataMap[face];\n        return Promise.all(Array.isArray(facePixels) ? facePixels : [facePixels]);\n      })\n    );\n\n    this.bind();\n\n    FACES.forEach((face, index) => {\n      if (resolvedFaces[index].length > 1 && this.opts.mipmaps !== false) {\n        // If the user provides multiple LODs, then automatic mipmap\n        // generation generateMipmap() should be disabled to avoid overwritting them.\n        log.warn(`${this.id} has mipmap and multiple LODs.`)();\n      }\n      resolvedFaces[index].forEach((image, lodLevel) => {\n        // TODO: adjust width & height for LOD!\n        if (width && height) {\n          gl.texImage2D(face, lodLevel, format, width, height, border, format, type, image);\n        } else {\n          gl.texImage2D(face, lodLevel, format, format, type, image);\n        }\n      });\n    });\n\n    this.unbind();\n  }\n\n  // TODO: update this method to accept LODs\n  setImageDataForFace(options) {\n    const {\n      face,\n      width,\n      height,\n      pixels,\n      data,\n      border = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE\n      // generateMipmap = false // TODO\n    } = options;\n\n    const {gl} = this;\n\n    const imageData = pixels || data;\n\n    this.bind();\n    if (imageData instanceof Promise) {\n      imageData.then(resolvedImageData =>\n        this.setImageDataForFace(\n          Object.assign({}, options, {\n            face,\n            data: resolvedImageData,\n            pixels: resolvedImageData\n          })\n        )\n      );\n    } else if (this.width || this.height) {\n      gl.texImage2D(face, 0, format, width, height, border, format, type, imageData);\n    } else {\n      gl.texImage2D(face, 0, format, format, type, imageData);\n    }\n\n    return this;\n  }\n}\n\nTextureCube.FACES = FACES;\n"]},"metadata":{},"sourceType":"module"}