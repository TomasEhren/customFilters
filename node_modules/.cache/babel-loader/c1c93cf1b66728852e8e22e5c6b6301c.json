{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { assert } from '@math.gl/core';\nimport PerspectiveOffCenterFrustum from './perspective-off-center-frustum';\n\nvar defined = function defined(val) {\n  return val !== null && typeof val !== 'undefined';\n};\n\nvar PerspectiveFrustum = /*#__PURE__*/function () {\n  function PerspectiveFrustum() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, PerspectiveFrustum);\n\n    options = _objectSpread({\n      near: 1.0,\n      far: 500000000.0,\n      xOffset: 0.0,\n      yOffset: 0.0\n    }, options);\n    this._offCenterFrustum = new PerspectiveOffCenterFrustum();\n    this.fov = options.fov;\n    this._fov = undefined;\n    this._fovy = undefined;\n    this._sseDenominator = undefined;\n    this.aspectRatio = options.aspectRatio;\n    this._aspectRatio = undefined;\n    this.near = options.near;\n    this._near = this.near;\n    this.far = options.far;\n    this._far = this.far;\n    this.xOffset = options.xOffset;\n    this._xOffset = this.xOffset;\n    this.yOffset = options.yOffset;\n    this._yOffset = this.yOffset;\n  }\n\n  _createClass(PerspectiveFrustum, [{\n    key: \"clone\",\n    value: function clone() {\n      return new PerspectiveFrustum({\n        aspectRatio: this.aspectRatio,\n        fov: this.fov,\n        near: this.near,\n        far: this.far\n      });\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      if (!defined(other) || !(other instanceof PerspectiveFrustum)) {\n        return false;\n      }\n\n      update(this);\n      update(other);\n      return this.fov === other.fov && this.aspectRatio === other.aspectRatio && this.near === other.near && this.far === other.far && this._offCenterFrustum.equals(other._offCenterFrustum);\n    }\n  }, {\n    key: \"projectionMatrix\",\n    get: function get() {\n      update(this);\n      return this._offCenterFrustum.projectionMatrix;\n    }\n  }, {\n    key: \"infiniteProjectionMatrix\",\n    get: function get() {\n      update(this);\n      return this._offCenterFrustum.infiniteProjectionMatrix;\n    }\n  }, {\n    key: \"fovy\",\n    get: function get() {\n      update(this);\n      return this._fovy;\n    }\n  }, {\n    key: \"sseDenominator\",\n    get: function get() {\n      update(this);\n      return this._sseDenominator;\n    }\n  }, {\n    key: \"computeCullingVolume\",\n    value: function computeCullingVolume(position, direction, up) {\n      update(this);\n      return this._offCenterFrustum.computeCullingVolume(position, direction, up);\n    }\n  }, {\n    key: \"getPixelDimensions\",\n    value: function getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, result) {\n      update(this);\n      return this._offCenterFrustum.getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, result);\n    }\n  }]);\n\n  return PerspectiveFrustum;\n}();\n\nexport { PerspectiveFrustum as default };\n\nfunction update(frustum) {\n  assert(Number.isFinite(frustum.fov) && Number.isFinite(frustum.aspectRatio) && Number.isFinite(frustum.near) && Number.isFinite(frustum.far));\n  var f = frustum._offCenterFrustum;\n\n  if (frustum.fov !== frustum._fov || frustum.aspectRatio !== frustum._aspectRatio || frustum.near !== frustum._near || frustum.far !== frustum._far || frustum.xOffset !== frustum._xOffset || frustum.yOffset !== frustum._yOffset) {\n    assert(frustum.fov >= 0 && frustum.fov < Math.PI);\n    assert(frustum.aspectRatio > 0);\n    assert(frustum.near >= 0 && frustum.near < frustum.far);\n    frustum._aspectRatio = frustum.aspectRatio;\n    frustum._fov = frustum.fov;\n    frustum._fovy = frustum.aspectRatio <= 1 ? frustum.fov : Math.atan(Math.tan(frustum.fov * 0.5) / frustum.aspectRatio) * 2.0;\n    frustum._near = frustum.near;\n    frustum._far = frustum.far;\n    frustum._sseDenominator = 2.0 * Math.tan(0.5 * frustum._fovy);\n    frustum._xOffset = frustum.xOffset;\n    frustum._yOffset = frustum.yOffset;\n    f.top = frustum.near * Math.tan(0.5 * frustum._fovy);\n    f.bottom = -f.top;\n    f.right = frustum.aspectRatio * f.top;\n    f.left = -f.right;\n    f.near = frustum.near;\n    f.far = frustum.far;\n    f.right += frustum.xOffset;\n    f.left += frustum.xOffset;\n    f.top += frustum.yOffset;\n    f.bottom += frustum.yOffset;\n  }\n}","map":{"version":3,"mappings":"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","names":["assert","PerspectiveOffCenterFrustum","defined","val","PerspectiveFrustum","constructor","options","near","far","xOffset","yOffset","_offCenterFrustum","fov","_fov","undefined","_fovy","_sseDenominator","aspectRatio","_aspectRatio","_near","_far","_xOffset","_yOffset","clone","equals","other","update","projectionMatrix","infiniteProjectionMatrix","computeCullingVolume","position","direction","up","getPixelDimensions","drawingBufferWidth","drawingBufferHeight","distance","result","frustum","Number","isFinite","f","Math","PI","atan","tan","top","bottom","right","left"],"sources":["../../../src/lib/perspective-frustum.js"],"sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n// Note: This class is still an experimental export, mainly used by other test cases\n// - It has not been fully adapted to math.gl conventions\n// - Documentation has not been ported\n\n// @ts-nocheck\n\nimport {assert} from '@math.gl/core';\nimport PerspectiveOffCenterFrustum from './perspective-off-center-frustum';\n\nconst defined = (val) => val !== null && typeof val !== 'undefined';\n\n/**\n * The viewing frustum is defined by 6 planes.\n * Each plane is represented by a {@link Vector4} object, where the x, y, and z components\n * define the unit vector normal to the plane, and the w component is the distance of the\n * plane from the origin/camera position.\n *\n * @alias PerspectiveFrustum\n * @constructor\n *\n * @param {Object} [options] An object with the following properties:\n * @param {Number} [options.fov] The angle of the field of view (FOV), in radians.\n * @param {Number} [options.aspectRatio] The aspect ratio of the frustum's width to it's height.\n * @param {Number} [options.near=1.0] The distance of the near plane.\n * @param {Number} [options.far=500000000.0] The distance of the far plane.\n * @param {Number} [options.xOffset=0.0] The offset in the x direction.\n * @param {Number} [options.yOffset=0.0] The offset in the y direction.\n *\n * @example\n * var frustum = new PerspectiveFrustum({\n *     fov : Math.PI_OVER_THREE,\n *     aspectRatio : canvas.clientWidth / canvas.clientHeight\n *     near : 1.0,\n *     far : 1000.0\n * });\n *\n * @see PerspectiveOffCenterFrustum\n */\nexport default class PerspectiveFrustum {\n  constructor(options = {}) {\n    options = {\n      near: 1.0,\n      far: 500000000.0,\n      xOffset: 0.0,\n      yOffset: 0.0,\n      ...options\n    };\n\n    this._offCenterFrustum = new PerspectiveOffCenterFrustum();\n\n    /**\n     * The angle of the field of view (FOV), in radians.  This angle will be used\n     * as the horizontal FOV if the width is greater than the height, otherwise\n     * it will be the vertical FOV.\n     * @type {Number}\n     * @default undefined\n     */\n    this.fov = options.fov;\n    this._fov = undefined;\n    this._fovy = undefined;\n\n    this._sseDenominator = undefined;\n\n    /**\n     * The aspect ratio of the frustum's width to it's height.\n     * @type {Number}\n     * @default undefined\n     */\n    this.aspectRatio = options.aspectRatio;\n    this._aspectRatio = undefined;\n\n    /**\n     * The distance of the near plane.\n     * @type {Number}\n     * @default 1.0\n     */\n    this.near = options.near;\n    this._near = this.near;\n\n    /**\n     * The distance of the far plane.\n     * @type {Number}\n     * @default 500000000.0\n     */\n    this.far = options.far;\n    this._far = this.far;\n\n    /**\n     * Offsets the frustum in the x direction.\n     * @type {Number}\n     * @default 0.0\n     */\n    this.xOffset = options.xOffset;\n    this._xOffset = this.xOffset;\n\n    /**\n     * Offsets the frustum in the y direction.\n     * @type {Number}\n     * @default 0.0\n     */\n    this.yOffset = options.yOffset;\n    this._yOffset = this.yOffset;\n  }\n\n  /**\n   * Returns a duplicate of a PerspectiveFrustum instance.\n   *\n   * @param {PerspectiveFrustum} [result] The object onto which to store the result.\n   * @returns {PerspectiveFrustum} The modified result parameter or a new PerspectiveFrustum instance if one was not provided.\n   */\n  clone() {\n    return new PerspectiveFrustum({\n      aspectRatio: this.aspectRatio,\n      fov: this.fov,\n      near: this.near,\n      far: this.far\n    });\n  }\n\n  /**\n   * Compares the provided PerspectiveFrustum componentwise and returns\n   * <code>true</code> if they are equal, <code>false</code> otherwise.\n   *\n   * @param {PerspectiveFrustum} [other] The right hand side PerspectiveFrustum.\n   * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n   */\n  equals(other) {\n    if (!defined(other) || !(other instanceof PerspectiveFrustum)) {\n      return false;\n    }\n\n    update(this);\n    update(other);\n\n    return (\n      this.fov === other.fov &&\n      this.aspectRatio === other.aspectRatio &&\n      this.near === other.near &&\n      this.far === other.far &&\n      this._offCenterFrustum.equals(other._offCenterFrustum)\n    );\n  }\n\n  /**\n   * Gets the perspective projection matrix computed from the view frustum.\n   * @memberof PerspectiveFrustum.prototype\n   * @type {Matrix4}\n   * @readonly\n   */\n  get projectionMatrix() {\n    update(this);\n    return this._offCenterFrustum.projectionMatrix;\n  }\n\n  /**\n   * The perspective projection matrix computed from the view frustum with an infinite far plane.\n   * @memberof PerspectiveFrustum.prototype\n   * @type {Matrix4}\n   * @readonly\n   *\n   * @see PerspectiveFrustum#projectionMatrix\n   */\n  get infiniteProjectionMatrix() {\n    update(this);\n    return this._offCenterFrustum.infiniteProjectionMatrix;\n  }\n\n  /**\n   * Gets the angle of the vertical field of view, in radians.\n   * @memberof PerspectiveFrustum.prototype\n   * @type {Number}\n   * @readonly\n   * @default undefined\n   */\n  get fovy() {\n    update(this);\n    return this._fovy;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get sseDenominator() {\n    update(this);\n    return this._sseDenominator;\n  }\n\n  /**\n   * Creates a culling volume for this frustum.\n   *\n   * @param {Vector3} position The eye position.\n   * @param {Vector3} direction The view direction.\n   * @param {Vector3} up The up direction.\n   * @returns {CullingVolume} A culling volume at the given position and orientation.\n   *\n   * @example\n   * // Check if a bounding volume intersects the frustum.\n   * var cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\n   * var intersect = cullingVolume.computeVisibility(boundingVolume);\n   */\n  computeCullingVolume(position, direction, up) {\n    update(this);\n    return this._offCenterFrustum.computeCullingVolume(position, direction, up);\n  }\n\n  /**\n   * Returns the pixel's width and height in meters.\n   *\n   * @param {Number} drawingBufferWidth The width of the drawing buffer.\n   * @param {Number} drawingBufferHeight The height of the drawing buffer.\n   * @param {Number} distance The distance to the near plane in meters.\n   * @param {Vector2} result The object onto which to store the result.\n   * @returns {Vector2} The modified result parameter or a new instance of {@link Vector2} with the pixel's width and height in the x and y properties, respectively.\n   *\n   * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\n   * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\n   *\n   * @example\n   * // Example 1\n   * // Get the width and height of a pixel.\n   * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 1.0, new Vector2());\n   *\n   * @example\n   * // Example 2\n   * // Get the width and height of a pixel if the near plane was set to 'distance'.\n   * // For example, get the size of a pixel of an image on a billboard.\n   * var position = camera.position;\n   * var direction = camera.direction;\n   * var toCenter = Vector3.subtract(primitive.boundingVolume.center, position, new Vector3());      // vector from camera to a primitive\n   * var toCenterProj = Vector3.multiplyByScalar(direction, Vector3.dot(direction, toCenter), new Vector3()); // project vector onto camera direction vector\n   * var distance = Vector3.magnitude(toCenterProj);\n   * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, distance, new Vector2());\n   */\n  getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, result) {\n    update(this);\n    return this._offCenterFrustum.getPixelDimensions(\n      drawingBufferWidth,\n      drawingBufferHeight,\n      distance,\n      result\n    );\n  }\n}\n\n// eslint-disable-next-line complexity, max-statements\nfunction update(frustum) {\n  assert(\n    Number.isFinite(frustum.fov) &&\n      Number.isFinite(frustum.aspectRatio) &&\n      Number.isFinite(frustum.near) &&\n      Number.isFinite(frustum.far)\n  );\n  // 'fov, aspectRatio, near, or far parameters are not set.'\n\n  const f = frustum._offCenterFrustum;\n\n  if (\n    frustum.fov !== frustum._fov ||\n    frustum.aspectRatio !== frustum._aspectRatio ||\n    frustum.near !== frustum._near ||\n    frustum.far !== frustum._far ||\n    frustum.xOffset !== frustum._xOffset ||\n    frustum.yOffset !== frustum._yOffset\n  ) {\n    assert(frustum.fov >= 0 && frustum.fov < Math.PI);\n    // throw new DeveloperError('fov must be in the range [0, PI).');\n\n    assert(frustum.aspectRatio > 0);\n    // throw new DeveloperError('aspectRatio must be positive.');\n\n    assert(frustum.near >= 0 && frustum.near < frustum.far);\n    // throw new DeveloperError('near must be greater than zero and less than far.');\n\n    frustum._aspectRatio = frustum.aspectRatio;\n    frustum._fov = frustum.fov;\n    frustum._fovy =\n      frustum.aspectRatio <= 1\n        ? frustum.fov\n        : Math.atan(Math.tan(frustum.fov * 0.5) / frustum.aspectRatio) * 2.0;\n    frustum._near = frustum.near;\n    frustum._far = frustum.far;\n    frustum._sseDenominator = 2.0 * Math.tan(0.5 * frustum._fovy);\n    frustum._xOffset = frustum.xOffset;\n    frustum._yOffset = frustum.yOffset;\n\n    f.top = frustum.near * Math.tan(0.5 * frustum._fovy);\n    f.bottom = -f.top;\n    f.right = frustum.aspectRatio * f.top;\n    f.left = -f.right;\n    f.near = frustum.near;\n    f.far = frustum.far;\n\n    f.right += frustum.xOffset;\n    f.left += frustum.xOffset;\n    f.top += frustum.yOffset;\n    f.bottom += frustum.yOffset;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}