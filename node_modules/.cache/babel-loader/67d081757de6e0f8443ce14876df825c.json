{"ast":null,"code":"import { CompositeLayer, _flatten as flatten } from '@deck.gl/core';\nimport { GeoJsonLayer } from '@deck.gl/layers';\nimport Tileset2D, { STRATEGY_DEFAULT } from './tileset-2d';\nimport { urlType, getURLFromTemplate } from './utils';\nconst defaultProps = {\n  data: [],\n  dataComparator: urlType.equals,\n  renderSubLayers: {\n    type: 'function',\n    value: props => new GeoJsonLayer(props),\n    compare: false\n  },\n  getTileData: {\n    type: 'function',\n    optional: true,\n    value: null,\n    compare: false\n  },\n  onViewportLoad: {\n    type: 'function',\n    optional: true,\n    value: null,\n    compare: false\n  },\n  onTileLoad: {\n    type: 'function',\n    value: tile => {},\n    compare: false\n  },\n  onTileUnload: {\n    type: 'function',\n    value: tile => {},\n    compare: false\n  },\n  onTileError: {\n    type: 'function',\n    value: err => console.error(err),\n    compare: false\n  },\n  extent: {\n    type: 'array',\n    optional: true,\n    value: null,\n    compare: true\n  },\n  tileSize: 512,\n  maxZoom: null,\n  minZoom: 0,\n  maxCacheSize: null,\n  maxCacheByteSize: null,\n  refinementStrategy: STRATEGY_DEFAULT,\n  zRange: null,\n  maxRequests: 6,\n  zoomOffset: 0\n};\nexport default class TileLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      tileset: null,\n      isLoaded: false\n    };\n  }\n\n  finalizeState() {\n    var _this$state$tileset;\n\n    (_this$state$tileset = this.state.tileset) === null || _this$state$tileset === void 0 ? void 0 : _this$state$tileset.finalize();\n  }\n\n  get isLoaded() {\n    const {\n      tileset\n    } = this.state;\n    return tileset.selectedTiles.every(tile => tile.isLoaded && tile.layers && tile.layers.every(layer => layer.isLoaded));\n  }\n\n  shouldUpdateState(_ref) {\n    let {\n      changeFlags\n    } = _ref;\n    return changeFlags.somethingChanged;\n  }\n\n  updateState(_ref2) {\n    let {\n      props,\n      changeFlags\n    } = _ref2;\n    let {\n      tileset\n    } = this.state;\n    const propsChanged = changeFlags.propsOrDataChanged || changeFlags.updateTriggersChanged;\n    const dataChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData);\n\n    if (!tileset) {\n      tileset = new Tileset2D(this._getTilesetOptions(props));\n      this.setState({\n        tileset\n      });\n    } else if (propsChanged) {\n      tileset.setOptions(this._getTilesetOptions(props));\n\n      if (dataChanged) {\n        tileset.reloadAll();\n      } else {\n        this.state.tileset.tiles.forEach(tile => {\n          tile.layers = null;\n        });\n      }\n    }\n\n    this._updateTileset();\n  }\n\n  _getTilesetOptions(props) {\n    const {\n      tileSize,\n      maxCacheSize,\n      maxCacheByteSize,\n      refinementStrategy,\n      extent,\n      maxZoom,\n      minZoom,\n      maxRequests,\n      zoomOffset\n    } = props;\n    return {\n      maxCacheSize,\n      maxCacheByteSize,\n      maxZoom,\n      minZoom,\n      tileSize,\n      refinementStrategy,\n      extent,\n      maxRequests,\n      zoomOffset,\n      getTileData: this.getTileData.bind(this),\n      onTileLoad: this._onTileLoad.bind(this),\n      onTileError: this._onTileError.bind(this),\n      onTileUnload: this._onTileUnload.bind(this)\n    };\n  }\n\n  _updateTileset() {\n    const {\n      tileset\n    } = this.state;\n    const {\n      zRange,\n      modelMatrix\n    } = this.props;\n    const frameNumber = tileset.update(this.context.viewport, {\n      zRange,\n      modelMatrix\n    });\n    const {\n      isLoaded\n    } = tileset;\n    const loadingStateChanged = this.state.isLoaded !== isLoaded;\n    const tilesetChanged = this.state.frameNumber !== frameNumber;\n\n    if (isLoaded && (loadingStateChanged || tilesetChanged)) {\n      this._onViewportLoad();\n    }\n\n    if (tilesetChanged) {\n      this.setState({\n        frameNumber\n      });\n    }\n\n    this.state.isLoaded = isLoaded;\n  }\n\n  _onViewportLoad() {\n    const {\n      tileset\n    } = this.state;\n    const {\n      onViewportLoad\n    } = this.props;\n\n    if (onViewportLoad) {\n      onViewportLoad(tileset.selectedTiles);\n    }\n  }\n\n  _onTileLoad(tile) {\n    this.props.onTileLoad(tile);\n    tile.layers = null;\n    this.setNeedsUpdate();\n  }\n\n  _onTileError(error, tile) {\n    this.props.onTileError(error);\n    tile.layers = null;\n    this.setNeedsUpdate();\n  }\n\n  _onTileUnload(tile) {\n    this.props.onTileUnload(tile);\n  }\n\n  getTileData(tile) {\n    const {\n      data,\n      getTileData,\n      fetch\n    } = this.props;\n    const {\n      signal\n    } = tile;\n    tile.url = getURLFromTemplate(data, tile);\n\n    if (getTileData) {\n      return getTileData(tile);\n    }\n\n    if (tile.url) {\n      return fetch(tile.url, {\n        propName: 'data',\n        layer: this,\n        signal\n      });\n    }\n\n    return null;\n  }\n\n  renderSubLayers(props) {\n    return this.props.renderSubLayers(props);\n  }\n\n  getSubLayerPropsByTile(tile) {\n    return null;\n  }\n\n  getPickingInfo(_ref3) {\n    let {\n      info,\n      sourceLayer\n    } = _ref3;\n    info.tile = sourceLayer.props.tile;\n    return info;\n  }\n\n  _updateAutoHighlight(info) {\n    if (info.sourceLayer) {\n      info.sourceLayer.updateAutoHighlight(info);\n    }\n  }\n\n  renderLayers() {\n    return this.state.tileset.tiles.map(tile => {\n      const subLayerProps = this.getSubLayerPropsByTile(tile);\n\n      if (!tile.isLoaded && !tile.content) {} else if (!tile.layers) {\n        const layers = this.renderSubLayers({ ...this.props,\n          id: \"\".concat(this.id, \"-\").concat(tile.x, \"-\").concat(tile.y, \"-\").concat(tile.z),\n          data: tile.content,\n          _offset: 0,\n          tile\n        });\n        tile.layers = flatten(layers, Boolean).map(layer => layer.clone({\n          tile,\n          ...subLayerProps\n        }));\n      } else if (subLayerProps && tile.layers[0] && Object.keys(subLayerProps).some(propName => tile.layers[0].props[propName] !== subLayerProps[propName])) {\n        tile.layers = tile.layers.map(layer => layer.clone(subLayerProps));\n      }\n\n      return tile.layers;\n    });\n  }\n\n  filterSubLayer(_ref4) {\n    let {\n      layer\n    } = _ref4;\n    return layer.props.tile.isVisible;\n  }\n\n}\nTileLayer.layerName = 'TileLayer';\nTileLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["CompositeLayer","_flatten","flatten","GeoJsonLayer","Tileset2D","STRATEGY_DEFAULT","urlType","getURLFromTemplate","defaultProps","data","dataComparator","equals","renderSubLayers","type","value","props","compare","getTileData","optional","onViewportLoad","onTileLoad","tile","onTileUnload","onTileError","err","console","error","extent","tileSize","maxZoom","minZoom","maxCacheSize","maxCacheByteSize","refinementStrategy","zRange","maxRequests","zoomOffset","TileLayer","initializeState","state","tileset","isLoaded","finalizeState","finalize","selectedTiles","every","layers","layer","shouldUpdateState","changeFlags","somethingChanged","updateState","propsChanged","propsOrDataChanged","updateTriggersChanged","dataChanged","all","_getTilesetOptions","setState","setOptions","reloadAll","tiles","forEach","_updateTileset","bind","_onTileLoad","_onTileError","_onTileUnload","modelMatrix","frameNumber","update","context","viewport","loadingStateChanged","tilesetChanged","_onViewportLoad","setNeedsUpdate","fetch","signal","url","propName","getSubLayerPropsByTile","getPickingInfo","info","sourceLayer","_updateAutoHighlight","updateAutoHighlight","renderLayers","map","subLayerProps","content","id","x","y","z","_offset","Boolean","clone","Object","keys","some","filterSubLayer","isVisible","layerName"],"sources":["../../../src/tile-layer/tile-layer.js"],"sourcesContent":["import {CompositeLayer, _flatten as flatten} from '@deck.gl/core';\nimport {GeoJsonLayer} from '@deck.gl/layers';\n\nimport Tileset2D, {STRATEGY_DEFAULT} from './tileset-2d';\nimport {urlType, getURLFromTemplate} from './utils';\n\nconst defaultProps = {\n  data: [],\n  dataComparator: urlType.equals,\n  renderSubLayers: {type: 'function', value: props => new GeoJsonLayer(props), compare: false},\n  getTileData: {type: 'function', optional: true, value: null, compare: false},\n  // TODO - change to onViewportLoad to align with Tile3DLayer\n  onViewportLoad: {type: 'function', optional: true, value: null, compare: false},\n  onTileLoad: {type: 'function', value: tile => {}, compare: false},\n  onTileUnload: {type: 'function', value: tile => {}, compare: false},\n  // eslint-disable-next-line\n  onTileError: {type: 'function', value: err => console.error(err), compare: false},\n  extent: {type: 'array', optional: true, value: null, compare: true},\n  tileSize: 512,\n  maxZoom: null,\n  minZoom: 0,\n  maxCacheSize: null,\n  maxCacheByteSize: null,\n  refinementStrategy: STRATEGY_DEFAULT,\n  zRange: null,\n  maxRequests: 6,\n  zoomOffset: 0\n};\n\nexport default class TileLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      tileset: null,\n      isLoaded: false\n    };\n  }\n\n  finalizeState() {\n    this.state.tileset?.finalize();\n  }\n\n  get isLoaded() {\n    const {tileset} = this.state;\n    return tileset.selectedTiles.every(\n      tile => tile.isLoaded && tile.layers && tile.layers.every(layer => layer.isLoaded)\n    );\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({props, changeFlags}) {\n    let {tileset} = this.state;\n    const propsChanged = changeFlags.propsOrDataChanged || changeFlags.updateTriggersChanged;\n    const dataChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData));\n\n    if (!tileset) {\n      tileset = new Tileset2D(this._getTilesetOptions(props));\n      this.setState({tileset});\n    } else if (propsChanged) {\n      tileset.setOptions(this._getTilesetOptions(props));\n\n      if (dataChanged) {\n        // reload all tiles\n        // use cached layers until new content is loaded\n        tileset.reloadAll();\n      } else {\n        // some render options changed, regenerate sub layers now\n        this.state.tileset.tiles.forEach(tile => {\n          tile.layers = null;\n        });\n      }\n    }\n\n    this._updateTileset();\n  }\n\n  _getTilesetOptions(props) {\n    const {\n      tileSize,\n      maxCacheSize,\n      maxCacheByteSize,\n      refinementStrategy,\n      extent,\n      maxZoom,\n      minZoom,\n      maxRequests,\n      zoomOffset\n    } = props;\n\n    return {\n      maxCacheSize,\n      maxCacheByteSize,\n      maxZoom,\n      minZoom,\n      tileSize,\n      refinementStrategy,\n      extent,\n      maxRequests,\n      zoomOffset,\n\n      getTileData: this.getTileData.bind(this),\n      onTileLoad: this._onTileLoad.bind(this),\n      onTileError: this._onTileError.bind(this),\n      onTileUnload: this._onTileUnload.bind(this)\n    };\n  }\n\n  _updateTileset() {\n    const {tileset} = this.state;\n    const {zRange, modelMatrix} = this.props;\n    const frameNumber = tileset.update(this.context.viewport, {zRange, modelMatrix});\n    const {isLoaded} = tileset;\n\n    const loadingStateChanged = this.state.isLoaded !== isLoaded;\n    const tilesetChanged = this.state.frameNumber !== frameNumber;\n\n    if (isLoaded && (loadingStateChanged || tilesetChanged)) {\n      this._onViewportLoad();\n    }\n\n    if (tilesetChanged) {\n      // Save the tileset frame number - trigger a rerender\n      this.setState({frameNumber});\n    }\n    // Save the loaded state - should not trigger a rerender\n    this.state.isLoaded = isLoaded;\n  }\n\n  _onViewportLoad() {\n    const {tileset} = this.state;\n    const {onViewportLoad} = this.props;\n\n    if (onViewportLoad) {\n      onViewportLoad(tileset.selectedTiles);\n    }\n  }\n\n  _onTileLoad(tile) {\n    this.props.onTileLoad(tile);\n    tile.layers = null;\n\n    this.setNeedsUpdate();\n  }\n\n  _onTileError(error, tile) {\n    this.props.onTileError(error);\n    tile.layers = null;\n\n    this.setNeedsUpdate();\n  }\n\n  _onTileUnload(tile) {\n    this.props.onTileUnload(tile);\n  }\n\n  // Methods for subclass to override\n\n  getTileData(tile) {\n    const {data, getTileData, fetch} = this.props;\n    const {signal} = tile;\n\n    tile.url = getURLFromTemplate(data, tile);\n\n    if (getTileData) {\n      return getTileData(tile);\n    }\n    if (tile.url) {\n      return fetch(tile.url, {propName: 'data', layer: this, signal});\n    }\n    return null;\n  }\n\n  renderSubLayers(props) {\n    return this.props.renderSubLayers(props);\n  }\n\n  getSubLayerPropsByTile(tile) {\n    return null;\n  }\n\n  getPickingInfo({info, sourceLayer}) {\n    info.tile = sourceLayer.props.tile;\n    return info;\n  }\n\n  _updateAutoHighlight(info) {\n    if (info.sourceLayer) {\n      info.sourceLayer.updateAutoHighlight(info);\n    }\n  }\n\n  renderLayers() {\n    return this.state.tileset.tiles.map(tile => {\n      const subLayerProps = this.getSubLayerPropsByTile(tile);\n      // cache the rendered layer in the tile\n      if (!tile.isLoaded && !tile.content) {\n        // nothing to show\n      } else if (!tile.layers) {\n        const layers = this.renderSubLayers({\n          ...this.props,\n          id: `${this.id}-${tile.x}-${tile.y}-${tile.z}`,\n          data: tile.content,\n          _offset: 0,\n          tile\n        });\n        tile.layers = flatten(layers, Boolean).map(layer =>\n          layer.clone({\n            tile,\n            ...subLayerProps\n          })\n        );\n      } else if (\n        subLayerProps &&\n        tile.layers[0] &&\n        Object.keys(subLayerProps).some(\n          propName => tile.layers[0].props[propName] !== subLayerProps[propName]\n        )\n      ) {\n        tile.layers = tile.layers.map(layer => layer.clone(subLayerProps));\n      }\n      return tile.layers;\n    });\n  }\n\n  filterSubLayer({layer}) {\n    return layer.props.tile.isVisible;\n  }\n}\n\nTileLayer.layerName = 'TileLayer';\nTileLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}