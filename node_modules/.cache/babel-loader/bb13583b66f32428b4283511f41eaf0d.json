{"ast":null,"code":"import { h3ToGeoBoundary, h3GetResolution, h3ToGeo, geoToH3, h3IsPentagon, h3Distance, edgeLength, UNITS } from 'h3-js';\nimport { lerp } from '@math.gl/core';\nimport { CompositeLayer, createIterable } from '@deck.gl/core';\nimport { ColumnLayer, PolygonLayer } from '@deck.gl/layers';\nconst UPDATE_THRESHOLD_KM = 10;\nexport function normalizeLongitudes(vertices, refLng) {\n  refLng = refLng === undefined ? vertices[0][0] : refLng;\n\n  for (const pt of vertices) {\n    const deltaLng = pt[0] - refLng;\n\n    if (deltaLng > 180) {\n      pt[0] -= 360;\n    } else if (deltaLng < -180) {\n      pt[0] += 360;\n    }\n  }\n}\nexport function scalePolygon(hexId, vertices, factor) {\n  const [lat, lng] = h3ToGeo(hexId);\n  const actualCount = vertices.length;\n  normalizeLongitudes(vertices, lng);\n  const vertexCount = vertices[0] === vertices[actualCount - 1] ? actualCount - 1 : actualCount;\n\n  for (let i = 0; i < vertexCount; i++) {\n    vertices[i][0] = lerp(lng, vertices[i][0], factor);\n    vertices[i][1] = lerp(lat, vertices[i][1], factor);\n  }\n}\n\nfunction getHexagonCentroid(getHexagon, object, objectInfo) {\n  const hexagonId = getHexagon(object, objectInfo);\n  const [lat, lng] = h3ToGeo(hexagonId);\n  return [lng, lat];\n}\n\nfunction h3ToPolygon(hexId) {\n  let coverage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  let flatten = arguments.length > 2 ? arguments[2] : undefined;\n  const vertices = h3ToGeoBoundary(hexId, true);\n\n  if (coverage !== 1) {\n    scalePolygon(hexId, vertices, coverage);\n  } else {\n    normalizeLongitudes(vertices);\n  }\n\n  if (flatten) {\n    const positions = new Float64Array(vertices.length * 2);\n    let i = 0;\n\n    for (const pt of vertices) {\n      positions[i++] = pt[0];\n      positions[i++] = pt[1];\n    }\n\n    return positions;\n  }\n\n  return vertices;\n}\n\nfunction mergeTriggers(getHexagon, coverage) {\n  let trigger;\n\n  if (getHexagon === undefined || getHexagon === null) {\n    trigger = coverage;\n  } else if (typeof getHexagon === 'object') {\n    trigger = { ...getHexagon,\n      coverage\n    };\n  } else {\n    trigger = {\n      getHexagon,\n      coverage\n    };\n  }\n\n  return trigger;\n}\n\nconst defaultProps = { ...PolygonLayer.defaultProps,\n  highPrecision: 'auto',\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  centerHexagon: null,\n  getHexagon: {\n    type: 'accessor',\n    value: x => x.hexagon\n  },\n  extruded: true\n};\ndelete defaultProps.getLineDashArray;\nexport default class H3HexagonLayer extends CompositeLayer {\n  shouldUpdateState(_ref) {\n    let {\n      changeFlags\n    } = _ref;\n    return this._shouldUseHighPrecision() ? changeFlags.propsOrDataChanged : changeFlags.somethingChanged;\n  }\n\n  updateState(_ref2) {\n    let {\n      props,\n      oldProps,\n      changeFlags\n    } = _ref2;\n\n    if (props.highPrecision !== true && (changeFlags.dataChanged || changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagon)) {\n      const dataProps = this._calculateH3DataProps(props);\n\n      this.setState(dataProps);\n    }\n\n    this._updateVertices(this.context.viewport);\n  }\n\n  _calculateH3DataProps(props) {\n    let resolution = -1;\n    let hasPentagon = false;\n    let hasMultipleRes = false;\n    const {\n      iterable,\n      objectInfo\n    } = createIterable(props.data);\n\n    for (const object of iterable) {\n      objectInfo.index++;\n      const hexId = props.getHexagon(object, objectInfo);\n      const hexResolution = h3GetResolution(hexId);\n\n      if (resolution < 0) {\n        resolution = hexResolution;\n        if (!props.highPrecision) break;\n      } else if (resolution !== hexResolution) {\n        hasMultipleRes = true;\n        break;\n      }\n\n      if (h3IsPentagon(hexId)) {\n        hasPentagon = true;\n        break;\n      }\n    }\n\n    return {\n      resolution,\n      edgeLengthKM: resolution >= 0 ? edgeLength(resolution, UNITS.km) : 0,\n      hasMultipleRes,\n      hasPentagon\n    };\n  }\n\n  _shouldUseHighPrecision() {\n    if (this.props.highPrecision === 'auto') {\n      const {\n        resolution,\n        hasPentagon,\n        hasMultipleRes\n      } = this.state;\n      const {\n        viewport\n      } = this.context;\n      return viewport.resolution || hasMultipleRes || hasPentagon || resolution >= 0 && resolution <= 5;\n    }\n\n    return this.props.highPrecision;\n  }\n\n  _updateVertices(viewport) {\n    if (this._shouldUseHighPrecision()) {\n      return;\n    }\n\n    const {\n      resolution,\n      edgeLengthKM,\n      centerHex\n    } = this.state;\n\n    if (resolution < 0) {\n      return;\n    }\n\n    const hex = this.props.centerHexagon || geoToH3(viewport.latitude, viewport.longitude, resolution);\n\n    if (centerHex === hex) {\n      return;\n    }\n\n    if (centerHex) {\n      const distance = h3Distance(centerHex, hex);\n\n      if (distance >= 0 && distance * edgeLengthKM < UPDATE_THRESHOLD_KM) {\n        return;\n      }\n    }\n\n    const {\n      unitsPerMeter\n    } = viewport.distanceScales;\n    let vertices = h3ToPolygon(hex);\n    const [centerLat, centerLng] = h3ToGeo(hex);\n    const [centerX, centerY] = viewport.projectFlat([centerLng, centerLat]);\n    vertices = vertices.map(p => {\n      const worldPosition = viewport.projectFlat(p);\n      return [(worldPosition[0] - centerX) / unitsPerMeter[0], (worldPosition[1] - centerY) / unitsPerMeter[1]];\n    });\n    this.setState({\n      centerHex: hex,\n      vertices\n    });\n  }\n\n  renderLayers() {\n    return this._shouldUseHighPrecision() ? this._renderPolygonLayer() : this._renderColumnLayer();\n  }\n\n  _getForwardProps() {\n    const {\n      elevationScale,\n      material,\n      coverage,\n      extruded,\n      wireframe,\n      stroked,\n      filled,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      getFillColor,\n      getElevation,\n      getLineColor,\n      getLineWidth,\n      transitions,\n      updateTriggers\n    } = this.props;\n    return {\n      elevationScale,\n      extruded,\n      coverage,\n      wireframe,\n      stroked,\n      filled,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      material,\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      transitions,\n      updateTriggers: {\n        getFillColor: updateTriggers.getFillColor,\n        getElevation: updateTriggers.getElevation,\n        getLineColor: updateTriggers.getLineColor,\n        getLineWidth: updateTriggers.getLineWidth\n      }\n    };\n  }\n\n  _renderPolygonLayer() {\n    const {\n      data,\n      getHexagon,\n      updateTriggers,\n      coverage\n    } = this.props;\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell-hifi', PolygonLayer);\n\n    const forwardProps = this._getForwardProps();\n\n    forwardProps.updateTriggers.getPolygon = mergeTriggers(updateTriggers.getHexagon, coverage);\n    return new SubLayerClass(forwardProps, this.getSubLayerProps({\n      id: 'hexagon-cell-hifi',\n      updateTriggers: forwardProps.updateTriggers\n    }), {\n      data,\n      _normalize: false,\n      _windingOrder: 'CCW',\n      positionFormat: 'XY',\n      getPolygon: (object, objectInfo) => {\n        const hexagonId = getHexagon(object, objectInfo);\n        return h3ToPolygon(hexagonId, coverage, true);\n      }\n    });\n  }\n\n  _renderColumnLayer() {\n    const {\n      data,\n      getHexagon,\n      updateTriggers\n    } = this.props;\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n\n    const forwardProps = this._getForwardProps();\n\n    forwardProps.updateTriggers.getPosition = updateTriggers.getHexagon;\n    return new SubLayerClass(forwardProps, this.getSubLayerProps({\n      id: 'hexagon-cell',\n      flatShading: true,\n      updateTriggers: forwardProps.updateTriggers\n    }), {\n      data,\n      diskResolution: 6,\n      radius: 1,\n      vertices: this.state.vertices,\n      getPosition: getHexagonCentroid.bind(null, getHexagon)\n    });\n  }\n\n}\nH3HexagonLayer.defaultProps = defaultProps;\nH3HexagonLayer.layerName = 'H3HexagonLayer';","map":{"version":3,"mappings":"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","names":["h3ToGeoBoundary","h3GetResolution","h3ToGeo","geoToH3","h3IsPentagon","h3Distance","edgeLength","UNITS","lerp","CompositeLayer","createIterable","ColumnLayer","PolygonLayer","UPDATE_THRESHOLD_KM","normalizeLongitudes","vertices","refLng","undefined","pt","deltaLng","scalePolygon","hexId","factor","lat","lng","actualCount","length","vertexCount","i","getHexagonCentroid","getHexagon","object","objectInfo","hexagonId","h3ToPolygon","coverage","flatten","positions","Float64Array","mergeTriggers","trigger","defaultProps","highPrecision","type","min","max","value","centerHexagon","x","hexagon","extruded","getLineDashArray","H3HexagonLayer","shouldUpdateState","changeFlags","_shouldUseHighPrecision","propsOrDataChanged","somethingChanged","updateState","props","oldProps","dataChanged","updateTriggers","dataProps","_calculateH3DataProps","setState","_updateVertices","context","viewport","resolution","hasPentagon","hasMultipleRes","iterable","data","index","hexResolution","edgeLengthKM","km","state","centerHex","hex","latitude","longitude","distance","unitsPerMeter","distanceScales","centerLat","centerLng","centerX","centerY","projectFlat","map","p","worldPosition","renderLayers","_renderPolygonLayer","_renderColumnLayer","_getForwardProps","elevationScale","material","wireframe","stroked","filled","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","getFillColor","getElevation","getLineColor","getLineWidth","transitions","SubLayerClass","getSubLayerClass","forwardProps","getPolygon","getSubLayerProps","id","_normalize","_windingOrder","positionFormat","getPosition","flatShading","diskResolution","radius","bind","layerName"],"sources":["../../../src/h3-layers/h3-hexagon-layer.js"],"sourcesContent":["import {\n  h3ToGeoBoundary,\n  h3GetResolution,\n  h3ToGeo,\n  geoToH3,\n  h3IsPentagon,\n  h3Distance,\n  edgeLength,\n  UNITS\n} from 'h3-js';\nimport {lerp} from '@math.gl/core';\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport {ColumnLayer, PolygonLayer} from '@deck.gl/layers';\n\n// There is a cost to updating the instanced geometries when using highPrecision: false\n// This constant defines the distance between two hexagons that leads to \"significant\n// distortion.\" Smaller value makes the column layer more sensitive to viewport change.\nconst UPDATE_THRESHOLD_KM = 10;\n\n// normalize longitudes w.r.t center (refLng), when not provided first vertex\nexport function normalizeLongitudes(vertices, refLng) {\n  refLng = refLng === undefined ? vertices[0][0] : refLng;\n  for (const pt of vertices) {\n    const deltaLng = pt[0] - refLng;\n    if (deltaLng > 180) {\n      pt[0] -= 360;\n    } else if (deltaLng < -180) {\n      pt[0] += 360;\n    }\n  }\n}\n\n// scale polygon vertices w.r.t center (hexId)\nexport function scalePolygon(hexId, vertices, factor) {\n  const [lat, lng] = h3ToGeo(hexId);\n  const actualCount = vertices.length;\n\n  // normalize with respect to center\n  normalizeLongitudes(vertices, lng);\n\n  // `h3ToGeoBoundary` returns same array object for first and last vertex (closed polygon),\n  // if so skip scaling the last vertex\n  const vertexCount = vertices[0] === vertices[actualCount - 1] ? actualCount - 1 : actualCount;\n  for (let i = 0; i < vertexCount; i++) {\n    vertices[i][0] = lerp(lng, vertices[i][0], factor);\n    vertices[i][1] = lerp(lat, vertices[i][1], factor);\n  }\n}\n\nfunction getHexagonCentroid(getHexagon, object, objectInfo) {\n  const hexagonId = getHexagon(object, objectInfo);\n  const [lat, lng] = h3ToGeo(hexagonId);\n  return [lng, lat];\n}\n\nfunction h3ToPolygon(hexId, coverage = 1, flatten) {\n  const vertices = h3ToGeoBoundary(hexId, true);\n\n  if (coverage !== 1) {\n    // scale and normalize vertices w.r.t to center\n    scalePolygon(hexId, vertices, coverage);\n  } else {\n    // normalize w.r.t to start vertex\n    normalizeLongitudes(vertices);\n  }\n\n  if (flatten) {\n    const positions = new Float64Array(vertices.length * 2);\n    let i = 0;\n    for (const pt of vertices) {\n      positions[i++] = pt[0];\n      positions[i++] = pt[1];\n    }\n    return positions;\n  }\n\n  return vertices;\n}\n\nfunction mergeTriggers(getHexagon, coverage) {\n  let trigger;\n  if (getHexagon === undefined || getHexagon === null) {\n    trigger = coverage;\n  } else if (typeof getHexagon === 'object') {\n    trigger = {...getHexagon, coverage};\n  } else {\n    trigger = {getHexagon, coverage};\n  }\n  return trigger;\n}\n\nconst defaultProps = {\n  ...PolygonLayer.defaultProps,\n  highPrecision: 'auto',\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  centerHexagon: null,\n  getHexagon: {type: 'accessor', value: x => x.hexagon},\n  extruded: true\n};\n\n// not supported\ndelete defaultProps.getLineDashArray;\n\n/**\n * A subclass of HexagonLayer that uses H3 hexagonIds in data objects\n * rather than centroid lat/longs. The shape of each hexagon is determined\n * based on a single \"center\" hexagon, which can be selected by passing in\n * a center lat/lon pair. If not provided, the map center will be used.\n *\n * Also sets the `hexagonId` field in the onHover/onClick callback's info\n * objects. Since this is calculated using math, hexagonId will be present\n * even when no corresponding hexagon is in the data set. You can check\n * index !== -1 to see if picking matches an actual object.\n */\nexport default class H3HexagonLayer extends CompositeLayer {\n  shouldUpdateState({changeFlags}) {\n    return this._shouldUseHighPrecision()\n      ? changeFlags.propsOrDataChanged\n      : changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    if (\n      props.highPrecision !== true &&\n      (changeFlags.dataChanged ||\n        (changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagon))\n    ) {\n      const dataProps = this._calculateH3DataProps(props);\n      this.setState(dataProps);\n    }\n\n    this._updateVertices(this.context.viewport);\n  }\n\n  _calculateH3DataProps(props) {\n    let resolution = -1;\n    let hasPentagon = false;\n    let hasMultipleRes = false;\n\n    const {iterable, objectInfo} = createIterable(props.data);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const hexId = props.getHexagon(object, objectInfo);\n      // Take the resolution of the first hex\n      const hexResolution = h3GetResolution(hexId);\n      if (resolution < 0) {\n        resolution = hexResolution;\n        if (!props.highPrecision) break;\n      } else if (resolution !== hexResolution) {\n        hasMultipleRes = true;\n        break;\n      }\n      if (h3IsPentagon(hexId)) {\n        hasPentagon = true;\n        break;\n      }\n    }\n\n    return {\n      resolution,\n      edgeLengthKM: resolution >= 0 ? edgeLength(resolution, UNITS.km) : 0,\n      hasMultipleRes,\n      hasPentagon\n    };\n  }\n\n  _shouldUseHighPrecision() {\n    if (this.props.highPrecision === 'auto') {\n      const {resolution, hasPentagon, hasMultipleRes} = this.state;\n      const {viewport} = this.context;\n      return (\n        viewport.resolution || hasMultipleRes || hasPentagon || (resolution >= 0 && resolution <= 5)\n      );\n    }\n\n    return this.props.highPrecision;\n  }\n\n  _updateVertices(viewport) {\n    if (this._shouldUseHighPrecision()) {\n      return;\n    }\n    const {resolution, edgeLengthKM, centerHex} = this.state;\n    if (resolution < 0) {\n      return;\n    }\n    const hex =\n      this.props.centerHexagon || geoToH3(viewport.latitude, viewport.longitude, resolution);\n    if (centerHex === hex) {\n      return;\n    }\n    if (centerHex) {\n      const distance = h3Distance(centerHex, hex);\n      // h3Distance returns a negative number if the distance could not be computed\n      // due to the two indexes very far apart or on opposite sides of a pentagon.\n      if (distance >= 0 && distance * edgeLengthKM < UPDATE_THRESHOLD_KM) {\n        return;\n      }\n    }\n\n    const {unitsPerMeter} = viewport.distanceScales;\n\n    let vertices = h3ToPolygon(hex);\n    const [centerLat, centerLng] = h3ToGeo(hex);\n\n    const [centerX, centerY] = viewport.projectFlat([centerLng, centerLat]);\n    vertices = vertices.map(p => {\n      const worldPosition = viewport.projectFlat(p);\n      return [\n        (worldPosition[0] - centerX) / unitsPerMeter[0],\n        (worldPosition[1] - centerY) / unitsPerMeter[1]\n      ];\n    });\n\n    this.setState({centerHex: hex, vertices});\n  }\n\n  renderLayers() {\n    return this._shouldUseHighPrecision() ? this._renderPolygonLayer() : this._renderColumnLayer();\n  }\n\n  _getForwardProps() {\n    const {\n      elevationScale,\n      material,\n      coverage,\n      extruded,\n      wireframe,\n      stroked,\n      filled,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      getFillColor,\n      getElevation,\n      getLineColor,\n      getLineWidth,\n      transitions,\n      updateTriggers\n    } = this.props;\n\n    return {\n      elevationScale,\n      extruded,\n      coverage,\n      wireframe,\n      stroked,\n      filled,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      material,\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      transitions,\n      updateTriggers: {\n        getFillColor: updateTriggers.getFillColor,\n        getElevation: updateTriggers.getElevation,\n        getLineColor: updateTriggers.getLineColor,\n        getLineWidth: updateTriggers.getLineWidth\n      }\n    };\n  }\n\n  _renderPolygonLayer() {\n    const {data, getHexagon, updateTriggers, coverage} = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell-hifi', PolygonLayer);\n    const forwardProps = this._getForwardProps();\n\n    forwardProps.updateTriggers.getPolygon = mergeTriggers(updateTriggers.getHexagon, coverage);\n\n    return new SubLayerClass(\n      forwardProps,\n      this.getSubLayerProps({\n        id: 'hexagon-cell-hifi',\n        updateTriggers: forwardProps.updateTriggers\n      }),\n      {\n        data,\n        _normalize: false,\n        _windingOrder: 'CCW',\n        positionFormat: 'XY',\n        getPolygon: (object, objectInfo) => {\n          const hexagonId = getHexagon(object, objectInfo);\n          return h3ToPolygon(hexagonId, coverage, true);\n        }\n      }\n    );\n  }\n\n  _renderColumnLayer() {\n    const {data, getHexagon, updateTriggers} = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n    const forwardProps = this._getForwardProps();\n    forwardProps.updateTriggers.getPosition = updateTriggers.getHexagon;\n\n    return new SubLayerClass(\n      forwardProps,\n      this.getSubLayerProps({\n        id: 'hexagon-cell',\n        flatShading: true,\n        updateTriggers: forwardProps.updateTriggers\n      }),\n      {\n        data,\n        diskResolution: 6, // generate an extruded hexagon as the base geometry\n        radius: 1,\n        vertices: this.state.vertices,\n        getPosition: getHexagonCentroid.bind(null, getHexagon)\n      }\n    );\n  }\n}\n\nH3HexagonLayer.defaultProps = defaultProps;\nH3HexagonLayer.layerName = 'H3HexagonLayer';\n"]},"metadata":{},"sourceType":"module"}