{"ast":null,"code":"import { Vector3, Matrix3, Quaternion } from '@math.gl/core';\nimport BoundingSphere from './bounding-sphere';\nimport { INTERSECTION } from '../../constants';\nconst scratchVector3 = new Vector3();\nconst scratchOffset = new Vector3();\nconst scratchVectorU = new Vector3();\nconst scratchVectorV = new Vector3();\nconst scratchVectorW = new Vector3();\nconst scratchCorner = new Vector3();\nconst scratchToCenter = new Vector3();\nconst MATRIX3 = {\n  COLUMN0ROW0: 0,\n  COLUMN0ROW1: 1,\n  COLUMN0ROW2: 2,\n  COLUMN1ROW0: 3,\n  COLUMN1ROW1: 4,\n  COLUMN1ROW2: 5,\n  COLUMN2ROW0: 6,\n  COLUMN2ROW1: 7,\n  COLUMN2ROW2: 8\n};\nexport default class OrientedBoundingBox {\n  constructor() {\n    let center = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0, 0, 0];\n    let halfAxes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    this.center = new Vector3().from(center);\n    this.halfAxes = new Matrix3(halfAxes);\n  }\n\n  get halfSize() {\n    const xAxis = this.halfAxes.getColumn(0);\n    const yAxis = this.halfAxes.getColumn(1);\n    const zAxis = this.halfAxes.getColumn(2);\n    return [new Vector3(xAxis).len(), new Vector3(yAxis).len(), new Vector3(zAxis).len()];\n  }\n\n  get quaternion() {\n    const xAxis = this.halfAxes.getColumn(0);\n    const yAxis = this.halfAxes.getColumn(1);\n    const zAxis = this.halfAxes.getColumn(2);\n    const normXAxis = new Vector3(xAxis).normalize();\n    const normYAxis = new Vector3(yAxis).normalize();\n    const normZAxis = new Vector3(zAxis).normalize();\n    return new Quaternion().fromMatrix3(new Matrix3([...normXAxis, ...normYAxis, ...normZAxis]));\n  }\n\n  fromCenterHalfSizeQuaternion(center, halfSize, quaternion) {\n    const quaternionObject = new Quaternion(quaternion);\n    const directionsMatrix = new Matrix3().fromQuaternion(quaternionObject);\n    directionsMatrix[0] = directionsMatrix[0] * halfSize[0];\n    directionsMatrix[1] = directionsMatrix[1] * halfSize[0];\n    directionsMatrix[2] = directionsMatrix[2] * halfSize[0];\n    directionsMatrix[3] = directionsMatrix[3] * halfSize[1];\n    directionsMatrix[4] = directionsMatrix[4] * halfSize[1];\n    directionsMatrix[5] = directionsMatrix[5] * halfSize[1];\n    directionsMatrix[6] = directionsMatrix[6] * halfSize[2];\n    directionsMatrix[7] = directionsMatrix[7] * halfSize[2];\n    directionsMatrix[8] = directionsMatrix[8] * halfSize[2];\n    this.center = new Vector3().from(center);\n    this.halfAxes = directionsMatrix;\n    return this;\n  }\n\n  clone() {\n    return new OrientedBoundingBox(this.center, this.halfAxes);\n  }\n\n  equals(right) {\n    return this === right || Boolean(right) && this.center.equals(right.center) && this.halfAxes.equals(right.halfAxes);\n  }\n\n  getBoundingSphere() {\n    let result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new BoundingSphere();\n    const halfAxes = this.halfAxes;\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n    const cornerVector = scratchVector3.copy(u).add(v).add(w);\n    result.center.copy(this.center);\n    result.radius = cornerVector.magnitude();\n    return result;\n  }\n\n  intersectPlane(plane) {\n    const center = this.center;\n    const normal = plane.normal;\n    const halfAxes = this.halfAxes;\n    const normalX = normal.x;\n    const normalY = normal.y;\n    const normalZ = normal.z;\n    const radEffective = Math.abs(normalX * halfAxes[MATRIX3.COLUMN0ROW0] + normalY * halfAxes[MATRIX3.COLUMN0ROW1] + normalZ * halfAxes[MATRIX3.COLUMN0ROW2]) + Math.abs(normalX * halfAxes[MATRIX3.COLUMN1ROW0] + normalY * halfAxes[MATRIX3.COLUMN1ROW1] + normalZ * halfAxes[MATRIX3.COLUMN1ROW2]) + Math.abs(normalX * halfAxes[MATRIX3.COLUMN2ROW0] + normalY * halfAxes[MATRIX3.COLUMN2ROW1] + normalZ * halfAxes[MATRIX3.COLUMN2ROW2]);\n    const distanceToPlane = normal.dot(center) + plane.distance;\n\n    if (distanceToPlane <= -radEffective) {\n      return INTERSECTION.OUTSIDE;\n    } else if (distanceToPlane >= radEffective) {\n      return INTERSECTION.INSIDE;\n    }\n\n    return INTERSECTION.INTERSECTING;\n  }\n\n  distanceTo(point) {\n    return Math.sqrt(this.distanceSquaredTo(point));\n  }\n\n  distanceSquaredTo(point) {\n    const offset = scratchOffset.from(point).subtract(this.center);\n    const halfAxes = this.halfAxes;\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n    const uHalf = u.magnitude();\n    const vHalf = v.magnitude();\n    const wHalf = w.magnitude();\n    u.normalize();\n    v.normalize();\n    w.normalize();\n    let distanceSquared = 0.0;\n    let d;\n    d = Math.abs(offset.dot(u)) - uHalf;\n\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.dot(v)) - vHalf;\n\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.dot(w)) - wHalf;\n\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    return distanceSquared;\n  }\n\n  computePlaneDistances(position, direction) {\n    let result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [-0, -0];\n    let minDist = Number.POSITIVE_INFINITY;\n    let maxDist = Number.NEGATIVE_INFINITY;\n    const center = this.center;\n    const halfAxes = this.halfAxes;\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n    const corner = scratchCorner.copy(u).add(v).add(w).add(center);\n    const toCenter = scratchToCenter.copy(corner).subtract(position);\n    let mag = direction.dot(toCenter);\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n    corner.copy(center).add(u).add(v).subtract(w);\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n    corner.copy(center).add(u).subtract(v).add(w);\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n    corner.copy(center).add(u).subtract(v).subtract(w);\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n    center.copy(corner).subtract(u).add(v).add(w);\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n    center.copy(corner).subtract(u).add(v).subtract(w);\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n    center.copy(corner).subtract(u).subtract(v).add(w);\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n    center.copy(corner).subtract(u).subtract(v).subtract(w);\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n    result[0] = minDist;\n    result[1] = maxDist;\n    return result;\n  }\n\n  transform(transformation) {\n    this.center.transformAsPoint(transformation);\n    const xAxis = this.halfAxes.getColumn(0, scratchVectorU);\n    xAxis.transformAsPoint(transformation);\n    const yAxis = this.halfAxes.getColumn(1, scratchVectorV);\n    yAxis.transformAsPoint(transformation);\n    const zAxis = this.halfAxes.getColumn(2, scratchVectorW);\n    zAxis.transformAsPoint(transformation);\n    this.halfAxes = new Matrix3([...xAxis, ...yAxis, ...zAxis]);\n    return this;\n  }\n\n  getTransform() {\n    throw new Error('not implemented');\n  }\n\n}","map":{"version":3,"mappings":"AAGA,SAAQA,OAAR,EAAiBC,OAAjB,EAA0BC,UAA1B,QAA2C,eAA3C;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,SAAQC,YAAR,QAA2B,iBAA3B;AAEA,MAAMC,cAAc,GAAG,IAAIL,OAAJ,EAAvB;AACA,MAAMM,aAAa,GAAG,IAAIN,OAAJ,EAAtB;AACA,MAAMO,cAAc,GAAG,IAAIP,OAAJ,EAAvB;AACA,MAAMQ,cAAc,GAAG,IAAIR,OAAJ,EAAvB;AACA,MAAMS,cAAc,GAAG,IAAIT,OAAJ,EAAvB;AACA,MAAMU,aAAa,GAAG,IAAIV,OAAJ,EAAtB;AACA,MAAMW,eAAe,GAAG,IAAIX,OAAJ,EAAxB;AAEA,MAAMY,OAAO,GAAG;EACdC,WAAW,EAAE,CADC;EAEdC,WAAW,EAAE,CAFC;EAGdC,WAAW,EAAE,CAHC;EAIdC,WAAW,EAAE,CAJC;EAKdC,WAAW,EAAE,CALC;EAMdC,WAAW,EAAE,CANC;EAOdC,WAAW,EAAE,CAPC;EAQdC,WAAW,EAAE,CARC;EASdC,WAAW,EAAE;AATC,CAAhB;AAYA,eAAe,MAAMC,mBAAN,CAA0B;EACvCC,WAAW,GAA6D;IAAA,IAA5DC,MAA4D,uEAAnD,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAmD;IAAA,IAAxCC,QAAwC,uEAA7B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAA6B;IACtE,KAAKD,MAAL,GAAc,IAAIxB,OAAJ,GAAc0B,IAAd,CAAmBF,MAAnB,CAAd;IACA,KAAKC,QAAL,GAAgB,IAAIxB,OAAJ,CAAYwB,QAAZ,CAAhB;EACD;;EAEW,IAARE,QAAQ,GAAG;IACb,MAAMC,KAAK,GAAG,KAAKH,QAAL,CAAcI,SAAd,CAAwB,CAAxB,CAAd;IACA,MAAMC,KAAK,GAAG,KAAKL,QAAL,CAAcI,SAAd,CAAwB,CAAxB,CAAd;IACA,MAAME,KAAK,GAAG,KAAKN,QAAL,CAAcI,SAAd,CAAwB,CAAxB,CAAd;IACA,OAAO,CAAC,IAAI7B,OAAJ,CAAY4B,KAAZ,EAAmBI,GAAnB,EAAD,EAA2B,IAAIhC,OAAJ,CAAY8B,KAAZ,EAAmBE,GAAnB,EAA3B,EAAqD,IAAIhC,OAAJ,CAAY+B,KAAZ,EAAmBC,GAAnB,EAArD,CAAP;EACD;;EAEa,IAAVC,UAAU,GAAG;IACf,MAAML,KAAK,GAAG,KAAKH,QAAL,CAAcI,SAAd,CAAwB,CAAxB,CAAd;IACA,MAAMC,KAAK,GAAG,KAAKL,QAAL,CAAcI,SAAd,CAAwB,CAAxB,CAAd;IACA,MAAME,KAAK,GAAG,KAAKN,QAAL,CAAcI,SAAd,CAAwB,CAAxB,CAAd;IACA,MAAMK,SAAS,GAAG,IAAIlC,OAAJ,CAAY4B,KAAZ,EAAmBO,SAAnB,EAAlB;IACA,MAAMC,SAAS,GAAG,IAAIpC,OAAJ,CAAY8B,KAAZ,EAAmBK,SAAnB,EAAlB;IACA,MAAME,SAAS,GAAG,IAAIrC,OAAJ,CAAY+B,KAAZ,EAAmBI,SAAnB,EAAlB;IACA,OAAO,IAAIjC,UAAJ,GAAiBoC,WAAjB,CAA6B,IAAIrC,OAAJ,CAAY,CAAC,GAAGiC,SAAJ,EAAe,GAAGE,SAAlB,EAA6B,GAAGC,SAAhC,CAAZ,CAA7B,CAAP;EACD;;EAEDE,4BAA4B,CAACf,MAAD,EAASG,QAAT,EAAmBM,UAAnB,EAA+B;IACzD,MAAMO,gBAAgB,GAAG,IAAItC,UAAJ,CAAe+B,UAAf,CAAzB;IACA,MAAMQ,gBAAgB,GAAG,IAAIxC,OAAJ,GAAcyC,cAAd,CAA6BF,gBAA7B,CAAzB;IACAC,gBAAgB,CAAC,CAAD,CAAhBA,GAAsBA,gBAAgB,CAAC,CAAD,CAAhBA,GAAsBd,QAAQ,CAAC,CAAD,CAApDc;IACAA,gBAAgB,CAAC,CAAD,CAAhBA,GAAsBA,gBAAgB,CAAC,CAAD,CAAhBA,GAAsBd,QAAQ,CAAC,CAAD,CAApDc;IACAA,gBAAgB,CAAC,CAAD,CAAhBA,GAAsBA,gBAAgB,CAAC,CAAD,CAAhBA,GAAsBd,QAAQ,CAAC,CAAD,CAApDc;IACAA,gBAAgB,CAAC,CAAD,CAAhBA,GAAsBA,gBAAgB,CAAC,CAAD,CAAhBA,GAAsBd,QAAQ,CAAC,CAAD,CAApDc;IACAA,gBAAgB,CAAC,CAAD,CAAhBA,GAAsBA,gBAAgB,CAAC,CAAD,CAAhBA,GAAsBd,QAAQ,CAAC,CAAD,CAApDc;IACAA,gBAAgB,CAAC,CAAD,CAAhBA,GAAsBA,gBAAgB,CAAC,CAAD,CAAhBA,GAAsBd,QAAQ,CAAC,CAAD,CAApDc;IACAA,gBAAgB,CAAC,CAAD,CAAhBA,GAAsBA,gBAAgB,CAAC,CAAD,CAAhBA,GAAsBd,QAAQ,CAAC,CAAD,CAApDc;IACAA,gBAAgB,CAAC,CAAD,CAAhBA,GAAsBA,gBAAgB,CAAC,CAAD,CAAhBA,GAAsBd,QAAQ,CAAC,CAAD,CAApDc;IACAA,gBAAgB,CAAC,CAAD,CAAhBA,GAAsBA,gBAAgB,CAAC,CAAD,CAAhBA,GAAsBd,QAAQ,CAAC,CAAD,CAApDc;IACA,KAAKjB,MAAL,GAAc,IAAIxB,OAAJ,GAAc0B,IAAd,CAAmBF,MAAnB,CAAd;IACA,KAAKC,QAAL,GAAgBgB,gBAAhB;IACA,OAAO,IAAP;EACD;;EAEDE,KAAK,GAAG;IACN,OAAO,IAAIrB,mBAAJ,CAAwB,KAAKE,MAA7B,EAAqC,KAAKC,QAA1C,CAAP;EACD;;EAEDmB,MAAM,CAACC,KAAD,EAAQ;IACZ,OACE,SAASA,KAAT,IACCC,OAAO,CAACD,KAAD,CAAPC,IAAkB,KAAKtB,MAAL,CAAYoB,MAAZ,CAAmBC,KAAK,CAACrB,MAAzB,CAAlBsB,IAAsD,KAAKrB,QAAL,CAAcmB,MAAd,CAAqBC,KAAK,CAACpB,QAA3B,CAFzD;EAID;;EAEDsB,iBAAiB,GAAgC;IAAA,IAA/BC,MAA+B,uEAAtB,IAAI7C,cAAJ,EAAsB;IAC/C,MAAMsB,QAAQ,GAAG,KAAKA,QAAtB;IACA,MAAMwB,CAAC,GAAGxB,QAAQ,CAACI,SAATJ,CAAmB,CAAnBA,EAAsBlB,cAAtBkB,CAAV;IACA,MAAMyB,CAAC,GAAGzB,QAAQ,CAACI,SAATJ,CAAmB,CAAnBA,EAAsBjB,cAAtBiB,CAAV;IACA,MAAM0B,CAAC,GAAG1B,QAAQ,CAACI,SAATJ,CAAmB,CAAnBA,EAAsBhB,cAAtBgB,CAAV;IAGA,MAAM2B,YAAY,GAAG/C,cAAc,CAACgD,IAAfhD,CAAoB4C,CAApB5C,EAAuBiD,GAAvBjD,CAA2B6C,CAA3B7C,EAA8BiD,GAA9BjD,CAAkC8C,CAAlC9C,CAArB;IAEA2C,MAAM,CAACxB,MAAPwB,CAAcK,IAAdL,CAAmB,KAAKxB,MAAxBwB;IACAA,MAAM,CAACO,MAAPP,GAAgBI,YAAY,CAACI,SAAbJ,EAAhBJ;IAEA,OAAOA,MAAP;EACD;;EAEDS,cAAc,CAACC,KAAD,EAAQ;IACpB,MAAMlC,MAAM,GAAG,KAAKA,MAApB;IACA,MAAMmC,MAAM,GAAGD,KAAK,CAACC,MAArB;IACA,MAAMlC,QAAQ,GAAG,KAAKA,QAAtB;IAEA,MAAMmC,OAAO,GAAGD,MAAM,CAACE,CAAvB;IACA,MAAMC,OAAO,GAAGH,MAAM,CAACI,CAAvB;IACA,MAAMC,OAAO,GAAGL,MAAM,CAACM,CAAvB;IAGA,MAAMC,YAAY,GAChBC,IAAI,CAACC,GAALD,CACEP,OAAO,GAAGnC,QAAQ,CAACb,OAAO,CAACC,WAAT,CAAlB+C,GACEE,OAAO,GAAGrC,QAAQ,CAACb,OAAO,CAACE,WAAT,CADpB8C,GAEEI,OAAO,GAAGvC,QAAQ,CAACb,OAAO,CAACG,WAAT,CAHtBoD,IAKAA,IAAI,CAACC,GAALD,CACEP,OAAO,GAAGnC,QAAQ,CAACb,OAAO,CAACI,WAAT,CAAlB4C,GACEE,OAAO,GAAGrC,QAAQ,CAACb,OAAO,CAACK,WAAT,CADpB2C,GAEEI,OAAO,GAAGvC,QAAQ,CAACb,OAAO,CAACM,WAAT,CAHtBiD,CALAA,GAUAA,IAAI,CAACC,GAALD,CACEP,OAAO,GAAGnC,QAAQ,CAACb,OAAO,CAACO,WAAT,CAAlByC,GACEE,OAAO,GAAGrC,QAAQ,CAACb,OAAO,CAACQ,WAAT,CADpBwC,GAEEI,OAAO,GAAGvC,QAAQ,CAACb,OAAO,CAACS,WAAT,CAHtB8C,CAXF;IAgBA,MAAME,eAAe,GAAGV,MAAM,CAACW,GAAPX,CAAWnC,MAAXmC,IAAqBD,KAAK,CAACa,QAAnD;;IAEA,IAAIF,eAAe,IAAI,CAACH,YAAxB,EAAsC;MAEpC,OAAO9D,YAAY,CAACoE,OAApB;IAFF,OAGO,IAAIH,eAAe,IAAIH,YAAvB,EAAqC;MAE1C,OAAO9D,YAAY,CAACqE,MAApB;IACD;;IACD,OAAOrE,YAAY,CAACsE,YAApB;EACD;;EAEDC,UAAU,CAACC,KAAD,EAAQ;IAChB,OAAOT,IAAI,CAACU,IAALV,CAAU,KAAKW,iBAAL,CAAuBF,KAAvB,CAAVT,CAAP;EACD;;EAEDW,iBAAiB,CAACF,KAAD,EAAQ;IAIvB,MAAMG,MAAM,GAAGzE,aAAa,CAACoB,IAAdpB,CAAmBsE,KAAnBtE,EAA0B0E,QAA1B1E,CAAmC,KAAKkB,MAAxClB,CAAf;IAEA,MAAMmB,QAAQ,GAAG,KAAKA,QAAtB;IACA,MAAMwB,CAAC,GAAGxB,QAAQ,CAACI,SAATJ,CAAmB,CAAnBA,EAAsBlB,cAAtBkB,CAAV;IACA,MAAMyB,CAAC,GAAGzB,QAAQ,CAACI,SAATJ,CAAmB,CAAnBA,EAAsBjB,cAAtBiB,CAAV;IACA,MAAM0B,CAAC,GAAG1B,QAAQ,CAACI,SAATJ,CAAmB,CAAnBA,EAAsBhB,cAAtBgB,CAAV;IAEA,MAAMwD,KAAK,GAAGhC,CAAC,CAACO,SAAFP,EAAd;IACA,MAAMiC,KAAK,GAAGhC,CAAC,CAACM,SAAFN,EAAd;IACA,MAAMiC,KAAK,GAAGhC,CAAC,CAACK,SAAFL,EAAd;IAEAF,CAAC,CAACd,SAAFc;IACAC,CAAC,CAACf,SAAFe;IACAC,CAAC,CAAChB,SAAFgB;IAEA,IAAIiC,eAAe,GAAG,GAAtB;IACA,IAAIC,CAAJ;IAEAA,CAAC,GAAGlB,IAAI,CAACC,GAALD,CAASY,MAAM,CAACT,GAAPS,CAAW9B,CAAX8B,CAATZ,IAA0Bc,KAA9BI;;IACA,IAAIA,CAAC,GAAG,CAAR,EAAW;MACTD,eAAe,IAAIC,CAAC,GAAGA,CAAvBD;IACD;;IAEDC,CAAC,GAAGlB,IAAI,CAACC,GAALD,CAASY,MAAM,CAACT,GAAPS,CAAW7B,CAAX6B,CAATZ,IAA0Be,KAA9BG;;IACA,IAAIA,CAAC,GAAG,CAAR,EAAW;MACTD,eAAe,IAAIC,CAAC,GAAGA,CAAvBD;IACD;;IAEDC,CAAC,GAAGlB,IAAI,CAACC,GAALD,CAASY,MAAM,CAACT,GAAPS,CAAW5B,CAAX4B,CAATZ,IAA0BgB,KAA9BE;;IACA,IAAIA,CAAC,GAAG,CAAR,EAAW;MACTD,eAAe,IAAIC,CAAC,GAAGA,CAAvBD;IACD;;IAED,OAAOA,eAAP;EACD;;EAGDE,qBAAqB,CAACC,QAAD,EAAWC,SAAX,EAAyC;IAAA,IAAnBxC,MAAmB,uEAAV,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CAAU;IAC5D,IAAIyC,OAAO,GAAGC,MAAM,CAACC,iBAArB;IACA,IAAIC,OAAO,GAAGF,MAAM,CAACG,iBAArB;IAEA,MAAMrE,MAAM,GAAG,KAAKA,MAApB;IACA,MAAMC,QAAQ,GAAG,KAAKA,QAAtB;IAEA,MAAMwB,CAAC,GAAGxB,QAAQ,CAACI,SAATJ,CAAmB,CAAnBA,EAAsBlB,cAAtBkB,CAAV;IACA,MAAMyB,CAAC,GAAGzB,QAAQ,CAACI,SAATJ,CAAmB,CAAnBA,EAAsBjB,cAAtBiB,CAAV;IACA,MAAM0B,CAAC,GAAG1B,QAAQ,CAACI,SAATJ,CAAmB,CAAnBA,EAAsBhB,cAAtBgB,CAAV;IAGA,MAAMqE,MAAM,GAAGpF,aAAa,CAAC2C,IAAd3C,CAAmBuC,CAAnBvC,EAAsB4C,GAAtB5C,CAA0BwC,CAA1BxC,EAA6B4C,GAA7B5C,CAAiCyC,CAAjCzC,EAAoC4C,GAApC5C,CAAwCc,MAAxCd,CAAf;IAEA,MAAMqF,QAAQ,GAAGpF,eAAe,CAAC0C,IAAhB1C,CAAqBmF,MAArBnF,EAA6BqE,QAA7BrE,CAAsC4E,QAAtC5E,CAAjB;IACA,IAAIqF,GAAG,GAAGR,SAAS,CAAClB,GAAVkB,CAAcO,QAAdP,CAAV;IAEAC,OAAO,GAAGtB,IAAI,CAAC8B,GAAL9B,CAAS6B,GAAT7B,EAAcsB,OAAdtB,CAAVsB;IACAG,OAAO,GAAGzB,IAAI,CAAC+B,GAAL/B,CAAS6B,GAAT7B,EAAcyB,OAAdzB,CAAVyB;IAGAE,MAAM,CAACzC,IAAPyC,CAAYtE,MAAZsE,EAAoBxC,GAApBwC,CAAwB7C,CAAxB6C,EAA2BxC,GAA3BwC,CAA+B5C,CAA/B4C,EAAkCd,QAAlCc,CAA2C3C,CAA3C2C;IAEAC,QAAQ,CAAC1C,IAAT0C,CAAcD,MAAdC,EAAsBf,QAAtBe,CAA+BR,QAA/BQ;IACAC,GAAG,GAAGR,SAAS,CAAClB,GAAVkB,CAAcO,QAAdP,CAANQ;IAEAP,OAAO,GAAGtB,IAAI,CAAC8B,GAAL9B,CAAS6B,GAAT7B,EAAcsB,OAAdtB,CAAVsB;IACAG,OAAO,GAAGzB,IAAI,CAAC+B,GAAL/B,CAAS6B,GAAT7B,EAAcyB,OAAdzB,CAAVyB;IAGAE,MAAM,CAACzC,IAAPyC,CAAYtE,MAAZsE,EAAoBxC,GAApBwC,CAAwB7C,CAAxB6C,EAA2Bd,QAA3Bc,CAAoC5C,CAApC4C,EAAuCxC,GAAvCwC,CAA2C3C,CAA3C2C;IAEAC,QAAQ,CAAC1C,IAAT0C,CAAcD,MAAdC,EAAsBf,QAAtBe,CAA+BR,QAA/BQ;IACAC,GAAG,GAAGR,SAAS,CAAClB,GAAVkB,CAAcO,QAAdP,CAANQ;IAEAP,OAAO,GAAGtB,IAAI,CAAC8B,GAAL9B,CAAS6B,GAAT7B,EAAcsB,OAAdtB,CAAVsB;IACAG,OAAO,GAAGzB,IAAI,CAAC+B,GAAL/B,CAAS6B,GAAT7B,EAAcyB,OAAdzB,CAAVyB;IAGAE,MAAM,CAACzC,IAAPyC,CAAYtE,MAAZsE,EAAoBxC,GAApBwC,CAAwB7C,CAAxB6C,EAA2Bd,QAA3Bc,CAAoC5C,CAApC4C,EAAuCd,QAAvCc,CAAgD3C,CAAhD2C;IAEAC,QAAQ,CAAC1C,IAAT0C,CAAcD,MAAdC,EAAsBf,QAAtBe,CAA+BR,QAA/BQ;IACAC,GAAG,GAAGR,SAAS,CAAClB,GAAVkB,CAAcO,QAAdP,CAANQ;IAEAP,OAAO,GAAGtB,IAAI,CAAC8B,GAAL9B,CAAS6B,GAAT7B,EAAcsB,OAAdtB,CAAVsB;IACAG,OAAO,GAAGzB,IAAI,CAAC+B,GAAL/B,CAAS6B,GAAT7B,EAAcyB,OAAdzB,CAAVyB;IAGApE,MAAM,CAAC6B,IAAP7B,CAAYsE,MAAZtE,EAAoBwD,QAApBxD,CAA6ByB,CAA7BzB,EAAgC8B,GAAhC9B,CAAoC0B,CAApC1B,EAAuC8B,GAAvC9B,CAA2C2B,CAA3C3B;IAEAuE,QAAQ,CAAC1C,IAAT0C,CAAcD,MAAdC,EAAsBf,QAAtBe,CAA+BR,QAA/BQ;IACAC,GAAG,GAAGR,SAAS,CAAClB,GAAVkB,CAAcO,QAAdP,CAANQ;IAEAP,OAAO,GAAGtB,IAAI,CAAC8B,GAAL9B,CAAS6B,GAAT7B,EAAcsB,OAAdtB,CAAVsB;IACAG,OAAO,GAAGzB,IAAI,CAAC+B,GAAL/B,CAAS6B,GAAT7B,EAAcyB,OAAdzB,CAAVyB;IAGApE,MAAM,CAAC6B,IAAP7B,CAAYsE,MAAZtE,EAAoBwD,QAApBxD,CAA6ByB,CAA7BzB,EAAgC8B,GAAhC9B,CAAoC0B,CAApC1B,EAAuCwD,QAAvCxD,CAAgD2B,CAAhD3B;IAEAuE,QAAQ,CAAC1C,IAAT0C,CAAcD,MAAdC,EAAsBf,QAAtBe,CAA+BR,QAA/BQ;IACAC,GAAG,GAAGR,SAAS,CAAClB,GAAVkB,CAAcO,QAAdP,CAANQ;IAEAP,OAAO,GAAGtB,IAAI,CAAC8B,GAAL9B,CAAS6B,GAAT7B,EAAcsB,OAAdtB,CAAVsB;IACAG,OAAO,GAAGzB,IAAI,CAAC+B,GAAL/B,CAAS6B,GAAT7B,EAAcyB,OAAdzB,CAAVyB;IAGApE,MAAM,CAAC6B,IAAP7B,CAAYsE,MAAZtE,EAAoBwD,QAApBxD,CAA6ByB,CAA7BzB,EAAgCwD,QAAhCxD,CAAyC0B,CAAzC1B,EAA4C8B,GAA5C9B,CAAgD2B,CAAhD3B;IAEAuE,QAAQ,CAAC1C,IAAT0C,CAAcD,MAAdC,EAAsBf,QAAtBe,CAA+BR,QAA/BQ;IACAC,GAAG,GAAGR,SAAS,CAAClB,GAAVkB,CAAcO,QAAdP,CAANQ;IAEAP,OAAO,GAAGtB,IAAI,CAAC8B,GAAL9B,CAAS6B,GAAT7B,EAAcsB,OAAdtB,CAAVsB;IACAG,OAAO,GAAGzB,IAAI,CAAC+B,GAAL/B,CAAS6B,GAAT7B,EAAcyB,OAAdzB,CAAVyB;IAGApE,MAAM,CAAC6B,IAAP7B,CAAYsE,MAAZtE,EAAoBwD,QAApBxD,CAA6ByB,CAA7BzB,EAAgCwD,QAAhCxD,CAAyC0B,CAAzC1B,EAA4CwD,QAA5CxD,CAAqD2B,CAArD3B;IAEAuE,QAAQ,CAAC1C,IAAT0C,CAAcD,MAAdC,EAAsBf,QAAtBe,CAA+BR,QAA/BQ;IACAC,GAAG,GAAGR,SAAS,CAAClB,GAAVkB,CAAcO,QAAdP,CAANQ;IAEAP,OAAO,GAAGtB,IAAI,CAAC8B,GAAL9B,CAAS6B,GAAT7B,EAAcsB,OAAdtB,CAAVsB;IACAG,OAAO,GAAGzB,IAAI,CAAC+B,GAAL/B,CAAS6B,GAAT7B,EAAcyB,OAAdzB,CAAVyB;IAEA5C,MAAM,CAAC,CAAD,CAANA,GAAYyC,OAAZzC;IACAA,MAAM,CAAC,CAAD,CAANA,GAAY4C,OAAZ5C;IACA,OAAOA,MAAP;EACD;;EAEDmD,SAAS,CAACC,cAAD,EAAiB;IACxB,KAAK5E,MAAL,CAAY6E,gBAAZ,CAA6BD,cAA7B;IAEA,MAAMxE,KAAK,GAAG,KAAKH,QAAL,CAAcI,SAAd,CAAwB,CAAxB,EAA2BtB,cAA3B,CAAd;IACAqB,KAAK,CAACyE,gBAANzE,CAAuBwE,cAAvBxE;IAEA,MAAME,KAAK,GAAG,KAAKL,QAAL,CAAcI,SAAd,CAAwB,CAAxB,EAA2BrB,cAA3B,CAAd;IACAsB,KAAK,CAACuE,gBAANvE,CAAuBsE,cAAvBtE;IAEA,MAAMC,KAAK,GAAG,KAAKN,QAAL,CAAcI,SAAd,CAAwB,CAAxB,EAA2BpB,cAA3B,CAAd;IACAsB,KAAK,CAACsE,gBAANtE,CAAuBqE,cAAvBrE;IAEA,KAAKN,QAAL,GAAgB,IAAIxB,OAAJ,CAAY,CAAC,GAAG2B,KAAJ,EAAW,GAAGE,KAAd,EAAqB,GAAGC,KAAxB,CAAZ,CAAhB;IACA,OAAO,IAAP;EACD;;EAEDuE,YAAY,GAAG;IAGb,MAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;EACD;;AAjQsC","names":["Vector3","Matrix3","Quaternion","BoundingSphere","INTERSECTION","scratchVector3","scratchOffset","scratchVectorU","scratchVectorV","scratchVectorW","scratchCorner","scratchToCenter","MATRIX3","COLUMN0ROW0","COLUMN0ROW1","COLUMN0ROW2","COLUMN1ROW0","COLUMN1ROW1","COLUMN1ROW2","COLUMN2ROW0","COLUMN2ROW1","COLUMN2ROW2","OrientedBoundingBox","constructor","center","halfAxes","from","halfSize","xAxis","getColumn","yAxis","zAxis","len","quaternion","normXAxis","normalize","normYAxis","normZAxis","fromMatrix3","fromCenterHalfSizeQuaternion","quaternionObject","directionsMatrix","fromQuaternion","clone","equals","right","Boolean","getBoundingSphere","result","u","v","w","cornerVector","copy","add","radius","magnitude","intersectPlane","plane","normal","normalX","x","normalY","y","normalZ","z","radEffective","Math","abs","distanceToPlane","dot","distance","OUTSIDE","INSIDE","INTERSECTING","distanceTo","point","sqrt","distanceSquaredTo","offset","subtract","uHalf","vHalf","wHalf","distanceSquared","d","computePlaneDistances","position","direction","minDist","Number","POSITIVE_INFINITY","maxDist","NEGATIVE_INFINITY","corner","toCenter","mag","min","max","transform","transformation","transformAsPoint","getTransform","Error"],"sources":["../../../../src/lib/bounding-volumes/oriented-bounding-box.js"],"sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Vector3, Matrix3, Quaternion} from '@math.gl/core';\nimport BoundingSphere from './bounding-sphere';\nimport {INTERSECTION} from '../../constants';\n\nconst scratchVector3 = new Vector3();\nconst scratchOffset = new Vector3();\nconst scratchVectorU = new Vector3();\nconst scratchVectorV = new Vector3();\nconst scratchVectorW = new Vector3();\nconst scratchCorner = new Vector3();\nconst scratchToCenter = new Vector3();\n\nconst MATRIX3 = {\n  COLUMN0ROW0: 0,\n  COLUMN0ROW1: 1,\n  COLUMN0ROW2: 2,\n  COLUMN1ROW0: 3,\n  COLUMN1ROW1: 4,\n  COLUMN1ROW2: 5,\n  COLUMN2ROW0: 6,\n  COLUMN2ROW1: 7,\n  COLUMN2ROW2: 8\n};\n\nexport default class OrientedBoundingBox {\n  constructor(center = [0, 0, 0], halfAxes = [0, 0, 0, 0, 0, 0, 0, 0, 0]) {\n    this.center = new Vector3().from(center);\n    this.halfAxes = new Matrix3(halfAxes);\n  }\n\n  get halfSize() {\n    const xAxis = this.halfAxes.getColumn(0);\n    const yAxis = this.halfAxes.getColumn(1);\n    const zAxis = this.halfAxes.getColumn(2);\n    return [new Vector3(xAxis).len(), new Vector3(yAxis).len(), new Vector3(zAxis).len()];\n  }\n\n  get quaternion() {\n    const xAxis = this.halfAxes.getColumn(0);\n    const yAxis = this.halfAxes.getColumn(1);\n    const zAxis = this.halfAxes.getColumn(2);\n    const normXAxis = new Vector3(xAxis).normalize();\n    const normYAxis = new Vector3(yAxis).normalize();\n    const normZAxis = new Vector3(zAxis).normalize();\n    return new Quaternion().fromMatrix3(new Matrix3([...normXAxis, ...normYAxis, ...normZAxis]));\n  }\n\n  fromCenterHalfSizeQuaternion(center, halfSize, quaternion) {\n    const quaternionObject = new Quaternion(quaternion);\n    const directionsMatrix = new Matrix3().fromQuaternion(quaternionObject);\n    directionsMatrix[0] = directionsMatrix[0] * halfSize[0];\n    directionsMatrix[1] = directionsMatrix[1] * halfSize[0];\n    directionsMatrix[2] = directionsMatrix[2] * halfSize[0];\n    directionsMatrix[3] = directionsMatrix[3] * halfSize[1];\n    directionsMatrix[4] = directionsMatrix[4] * halfSize[1];\n    directionsMatrix[5] = directionsMatrix[5] * halfSize[1];\n    directionsMatrix[6] = directionsMatrix[6] * halfSize[2];\n    directionsMatrix[7] = directionsMatrix[7] * halfSize[2];\n    directionsMatrix[8] = directionsMatrix[8] * halfSize[2];\n    this.center = new Vector3().from(center);\n    this.halfAxes = directionsMatrix;\n    return this;\n  }\n\n  clone() {\n    return new OrientedBoundingBox(this.center, this.halfAxes);\n  }\n\n  equals(right) {\n    return (\n      this === right ||\n      (Boolean(right) && this.center.equals(right.center) && this.halfAxes.equals(right.halfAxes))\n    );\n  }\n\n  getBoundingSphere(result = new BoundingSphere()) {\n    const halfAxes = this.halfAxes;\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n\n    // Calculate \"corner\" vector\n    const cornerVector = scratchVector3.copy(u).add(v).add(w);\n\n    result.center.copy(this.center);\n    result.radius = cornerVector.magnitude();\n\n    return result;\n  }\n\n  intersectPlane(plane) {\n    const center = this.center;\n    const normal = plane.normal;\n    const halfAxes = this.halfAxes;\n\n    const normalX = normal.x;\n    const normalY = normal.y;\n    const normalZ = normal.z;\n\n    // Plane is used as if it is its normal; the first three components are assumed to be normalized\n    const radEffective =\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN0ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN0ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN0ROW2]\n      ) +\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN1ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN1ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN1ROW2]\n      ) +\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN2ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN2ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN2ROW2]\n      );\n    const distanceToPlane = normal.dot(center) + plane.distance;\n\n    if (distanceToPlane <= -radEffective) {\n      // The entire box is on the negative side of the plane normal\n      return INTERSECTION.OUTSIDE;\n    } else if (distanceToPlane >= radEffective) {\n      // The entire box is on the positive side of the plane normal\n      return INTERSECTION.INSIDE;\n    }\n    return INTERSECTION.INTERSECTING;\n  }\n\n  distanceTo(point) {\n    return Math.sqrt(this.distanceSquaredTo(point));\n  }\n\n  distanceSquaredTo(point) {\n    // Computes the estimated distance squared from the\n    // closest point on a bounding box to a point.\n    // See Geometric Tools for Computer Graphics 10.4.2\n    const offset = scratchOffset.from(point).subtract(this.center);\n\n    const halfAxes = this.halfAxes;\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n\n    const uHalf = u.magnitude();\n    const vHalf = v.magnitude();\n    const wHalf = w.magnitude();\n\n    u.normalize();\n    v.normalize();\n    w.normalize();\n\n    let distanceSquared = 0.0;\n    let d;\n\n    d = Math.abs(offset.dot(u)) - uHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.dot(v)) - vHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.dot(w)) - wHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    return distanceSquared;\n  }\n\n  // eslint-disable-next-line max-statements\n  computePlaneDistances(position, direction, result = [-0, -0]) {\n    let minDist = Number.POSITIVE_INFINITY;\n    let maxDist = Number.NEGATIVE_INFINITY;\n\n    const center = this.center;\n    const halfAxes = this.halfAxes;\n\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n\n    // project first corner\n    const corner = scratchCorner.copy(u).add(v).add(w).add(center);\n\n    const toCenter = scratchToCenter.copy(corner).subtract(position);\n    let mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project second corner\n    corner.copy(center).add(u).add(v).subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project third corner\n    corner.copy(center).add(u).subtract(v).add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project fourth corner\n    corner.copy(center).add(u).subtract(v).subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project fifth corner\n    center.copy(corner).subtract(u).add(v).add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project sixth corner\n    center.copy(corner).subtract(u).add(v).subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project seventh corner\n    center.copy(corner).subtract(u).subtract(v).add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project eighth corner\n    center.copy(corner).subtract(u).subtract(v).subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    result[0] = minDist;\n    result[1] = maxDist;\n    return result;\n  }\n\n  transform(transformation) {\n    this.center.transformAsPoint(transformation);\n\n    const xAxis = this.halfAxes.getColumn(0, scratchVectorU);\n    xAxis.transformAsPoint(transformation);\n\n    const yAxis = this.halfAxes.getColumn(1, scratchVectorV);\n    yAxis.transformAsPoint(transformation);\n\n    const zAxis = this.halfAxes.getColumn(2, scratchVectorW);\n    zAxis.transformAsPoint(transformation);\n\n    this.halfAxes = new Matrix3([...xAxis, ...yAxis, ...zAxis]);\n    return this;\n  }\n\n  getTransform() {\n    // const modelMatrix = Matrix4.fromRotationTranslation(this.boundingVolume.halfAxes, this.boundingVolume.center);\n    // return modelMatrix;\n    throw new Error('not implemented');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}