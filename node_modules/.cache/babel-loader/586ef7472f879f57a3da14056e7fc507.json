{"ast":null,"code":"import _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { loadBasisEncoderModule, loadBasisTrascoderModule } from './basis-module-loader';\nimport { GL_EXTENSIONS_CONSTANTS } from '../gl-extensions';\nimport { getSupportedGPUTextureFormats } from '../utils/texture-formats';\nimport { isKTX } from './parse-ktx';\nvar OutputFormat = {\n  etc1: {\n    basisFormat: 0,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_ETC1_WEBGL\n  },\n  etc2: {\n    basisFormat: 1,\n    compressed: true\n  },\n  bc1: {\n    basisFormat: 2,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_S3TC_DXT1_EXT\n  },\n  bc3: {\n    basisFormat: 3,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_S3TC_DXT5_EXT\n  },\n  bc4: {\n    basisFormat: 4,\n    compressed: true\n  },\n  bc5: {\n    basisFormat: 5,\n    compressed: true\n  },\n  'bc7-m6-opaque-only': {\n    basisFormat: 6,\n    compressed: true\n  },\n  'bc7-m5': {\n    basisFormat: 7,\n    compressed: true\n  },\n  'pvrtc1-4-rgb': {\n    basisFormat: 8,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_PVRTC_4BPPV1_IMG\n  },\n  'pvrtc1-4-rgba': {\n    basisFormat: 9,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\n  },\n  'astc-4x4': {\n    basisFormat: 10,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_4X4_KHR\n  },\n  'atc-rgb': {\n    basisFormat: 11,\n    compressed: true\n  },\n  'atc-rgba-interpolated-alpha': {\n    basisFormat: 12,\n    compressed: true\n  },\n  rgba32: {\n    basisFormat: 13,\n    compressed: false\n  },\n  rgb565: {\n    basisFormat: 14,\n    compressed: false\n  },\n  bgr565: {\n    basisFormat: 15,\n    compressed: false\n  },\n  rgba4444: {\n    basisFormat: 16,\n    compressed: false\n  }\n};\nexport default function parseBasis(_x, _x2) {\n  return _parseBasis.apply(this, arguments);\n}\n\nfunction _parseBasis() {\n  _parseBasis = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, options) {\n    var fileConstructors, _yield$loadBasisTrasc, BasisFile, _fileConstructors, _yield$loadBasisTrasc2, _BasisFile;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(options.basis.containerFormat === 'auto')) {\n              _context.next = 11;\n              break;\n            }\n\n            if (!isKTX(data)) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 4;\n            return loadBasisEncoderModule(options);\n\n          case 4:\n            fileConstructors = _context.sent;\n            return _context.abrupt(\"return\", parseKTX2File(fileConstructors.KTX2File, data, options));\n\n          case 6:\n            _context.next = 8;\n            return loadBasisTrascoderModule(options);\n\n          case 8:\n            _yield$loadBasisTrasc = _context.sent;\n            BasisFile = _yield$loadBasisTrasc.BasisFile;\n            return _context.abrupt(\"return\", parseBasisFile(BasisFile, data, options));\n\n          case 11:\n            _context.t0 = options.basis.module;\n            _context.next = _context.t0 === 'encoder' ? 14 : _context.t0 === 'transcoder' ? 22 : 22;\n            break;\n\n          case 14:\n            _context.next = 16;\n            return loadBasisEncoderModule(options);\n\n          case 16:\n            _fileConstructors = _context.sent;\n            _context.t1 = options.basis.containerFormat;\n            _context.next = _context.t1 === 'ktx2' ? 20 : _context.t1 === 'basis' ? 21 : 21;\n            break;\n\n          case 20:\n            return _context.abrupt(\"return\", parseKTX2File(_fileConstructors.KTX2File, data, options));\n\n          case 21:\n            return _context.abrupt(\"return\", parseBasisFile(_fileConstructors.BasisFile, data, options));\n\n          case 22:\n            _context.next = 24;\n            return loadBasisTrascoderModule(options);\n\n          case 24:\n            _yield$loadBasisTrasc2 = _context.sent;\n            _BasisFile = _yield$loadBasisTrasc2.BasisFile;\n            return _context.abrupt(\"return\", parseBasisFile(_BasisFile, data, options));\n\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseBasis.apply(this, arguments);\n}\n\nfunction parseBasisFile(BasisFile, data, options) {\n  var basisFile = new BasisFile(new Uint8Array(data));\n\n  try {\n    if (!basisFile.startTranscoding()) {\n      return null;\n    }\n\n    var imageCount = basisFile.getNumImages();\n    var images = [];\n\n    for (var imageIndex = 0; imageIndex < imageCount; imageIndex++) {\n      var levelsCount = basisFile.getNumLevels(imageIndex);\n      var levels = [];\n\n      for (var levelIndex = 0; levelIndex < levelsCount; levelIndex++) {\n        levels.push(transcodeImage(basisFile, imageIndex, levelIndex, options));\n      }\n\n      images.push(levels);\n    }\n\n    return images;\n  } finally {\n    basisFile.close();\n    basisFile.delete();\n  }\n}\n\nfunction transcodeImage(basisFile, imageIndex, levelIndex, options) {\n  var width = basisFile.getImageWidth(imageIndex, levelIndex);\n  var height = basisFile.getImageHeight(imageIndex, levelIndex);\n  var hasAlpha = basisFile.getHasAlpha();\n\n  var _getBasisOptions = getBasisOptions(options, hasAlpha),\n      compressed = _getBasisOptions.compressed,\n      format = _getBasisOptions.format,\n      basisFormat = _getBasisOptions.basisFormat;\n\n  var decodedSize = basisFile.getImageTranscodedSizeInBytes(imageIndex, levelIndex, basisFormat);\n  var decodedData = new Uint8Array(decodedSize);\n\n  if (!basisFile.transcodeImage(decodedData, imageIndex, levelIndex, basisFormat, 0, 0)) {\n    return null;\n  }\n\n  return {\n    width: width,\n    height: height,\n    data: decodedData,\n    compressed: compressed,\n    hasAlpha: hasAlpha,\n    format: format\n  };\n}\n\nfunction parseKTX2File(KTX2File, data, options) {\n  var ktx2File = new KTX2File(new Uint8Array(data));\n\n  try {\n    if (!ktx2File.startTranscoding()) {\n      return null;\n    }\n\n    var levelsCount = ktx2File.getLevels();\n    var levels = [];\n\n    for (var levelIndex = 0; levelIndex < levelsCount; levelIndex++) {\n      levels.push(transcodeKTX2Image(ktx2File, levelIndex, options));\n      break;\n    }\n\n    return levels;\n  } finally {\n    ktx2File.close();\n    ktx2File.delete();\n  }\n}\n\nfunction transcodeKTX2Image(ktx2File, levelIndex, options) {\n  var _ktx2File$getImageLev = ktx2File.getImageLevelInfo(levelIndex, 0, 0),\n      alphaFlag = _ktx2File$getImageLev.alphaFlag,\n      height = _ktx2File$getImageLev.height,\n      width = _ktx2File$getImageLev.width;\n\n  var _getBasisOptions2 = getBasisOptions(options, alphaFlag),\n      compressed = _getBasisOptions2.compressed,\n      format = _getBasisOptions2.format,\n      basisFormat = _getBasisOptions2.basisFormat;\n\n  var decodedSize = ktx2File.getImageTranscodedSizeInBytes(levelIndex, 0, 0, basisFormat);\n  var decodedData = new Uint8Array(decodedSize);\n\n  if (!ktx2File.transcodeImage(decodedData, levelIndex, 0, 0, basisFormat, 0, -1, -1)) {\n    return null;\n  }\n\n  return {\n    width: width,\n    height: height,\n    data: decodedData,\n    compressed: compressed,\n    alphaFlag: alphaFlag,\n    format: format\n  };\n}\n\nfunction getBasisOptions(options, hasAlpha) {\n  var format = options && options.basis && options.basis.format;\n\n  if (format === 'auto') {\n    format = selectSupportedBasisFormat();\n  }\n\n  if (typeof format === 'object') {\n    format = hasAlpha ? format.alpha : format.noAlpha;\n  }\n\n  format = format.toLowerCase();\n  return OutputFormat[format];\n}\n\nexport function selectSupportedBasisFormat() {\n  var supportedFormats = getSupportedGPUTextureFormats();\n\n  if (supportedFormats.has('astc')) {\n    return 'astc-4x4';\n  } else if (supportedFormats.has('dxt')) {\n    return {\n      alpha: 'bc3',\n      noAlpha: 'bc1'\n    };\n  } else if (supportedFormats.has('pvrtc')) {\n    return {\n      alpha: 'pvrtc1-4-rgba',\n      noAlpha: 'pvrtc1-4-rgb'\n    };\n  } else if (supportedFormats.has('etc1')) {\n    return 'etc1';\n  } else if (supportedFormats.has('etc2')) {\n    return 'etc2';\n  }\n\n  return 'rgb565';\n}","map":{"version":3,"mappings":"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","names":["loadBasisEncoderModule","loadBasisTrascoderModule","GL_EXTENSIONS_CONSTANTS","getSupportedGPUTextureFormats","isKTX","OutputFormat","etc1","basisFormat","compressed","format","COMPRESSED_RGB_ETC1_WEBGL","etc2","bc1","COMPRESSED_RGB_S3TC_DXT1_EXT","bc3","COMPRESSED_RGBA_S3TC_DXT5_EXT","bc4","bc5","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_ASTC_4X4_KHR","rgba32","rgb565","bgr565","rgba4444","parseBasis","data","options","basis","containerFormat","fileConstructors","parseKTX2File","KTX2File","BasisFile","parseBasisFile","module","basisFile","Uint8Array","startTranscoding","imageCount","getNumImages","images","imageIndex","levelsCount","getNumLevels","levels","levelIndex","push","transcodeImage","close","delete","width","getImageWidth","height","getImageHeight","hasAlpha","getHasAlpha","getBasisOptions","decodedSize","getImageTranscodedSizeInBytes","decodedData","ktx2File","getLevels","transcodeKTX2Image","getImageLevelInfo","alphaFlag","selectSupportedBasisFormat","alpha","noAlpha","toLowerCase","supportedFormats","has"],"sources":["../../../../src/lib/parsers/parse-basis.ts"],"sourcesContent":["import {loadBasisEncoderModule, loadBasisTrascoderModule} from './basis-module-loader';\nimport {GL_EXTENSIONS_CONSTANTS} from '../gl-extensions';\nimport {getSupportedGPUTextureFormats} from '../utils/texture-formats';\nimport {isKTX} from './parse-ktx';\n\nconst OutputFormat = {\n  etc1: {\n    basisFormat: 0,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_ETC1_WEBGL\n  },\n  etc2: {basisFormat: 1, compressed: true},\n  bc1: {\n    basisFormat: 2,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_S3TC_DXT1_EXT\n  },\n  bc3: {\n    basisFormat: 3,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_S3TC_DXT5_EXT\n  },\n  bc4: {basisFormat: 4, compressed: true},\n  bc5: {basisFormat: 5, compressed: true},\n  'bc7-m6-opaque-only': {basisFormat: 6, compressed: true},\n  'bc7-m5': {basisFormat: 7, compressed: true},\n  'pvrtc1-4-rgb': {\n    basisFormat: 8,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_PVRTC_4BPPV1_IMG\n  },\n  'pvrtc1-4-rgba': {\n    basisFormat: 9,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\n  },\n  'astc-4x4': {\n    basisFormat: 10,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_4X4_KHR\n  },\n  'atc-rgb': {basisFormat: 11, compressed: true},\n  'atc-rgba-interpolated-alpha': {basisFormat: 12, compressed: true},\n  rgba32: {basisFormat: 13, compressed: false},\n  rgb565: {basisFormat: 14, compressed: false},\n  bgr565: {basisFormat: 15, compressed: false},\n  rgba4444: {basisFormat: 16, compressed: false}\n};\n\n/**\n * parse data with a Binomial Basis_Universal module\n * @param {ArrayBuffer} data\n * @param {*} options\n * @returns compressed texture data\n */\nexport default async function parseBasis(data, options) {\n  if (options.basis.containerFormat === 'auto') {\n    if (isKTX(data)) {\n      const fileConstructors = await loadBasisEncoderModule(options);\n      return parseKTX2File(fileConstructors.KTX2File, data, options);\n    }\n    const {BasisFile} = await loadBasisTrascoderModule(options);\n    return parseBasisFile(BasisFile, data, options);\n  }\n  switch (options.basis.module) {\n    case 'encoder':\n      const fileConstructors = await loadBasisEncoderModule(options);\n      switch (options.basis.containerFormat) {\n        case 'ktx2':\n          return parseKTX2File(fileConstructors.KTX2File, data, options);\n        case 'basis':\n        default:\n          return parseBasisFile(fileConstructors.BasisFile, data, options);\n      }\n    case 'transcoder':\n    default:\n      const {BasisFile} = await loadBasisTrascoderModule(options);\n      return parseBasisFile(BasisFile, data, options);\n  }\n}\n\n/**\n * Parse *.basis file data\n * @param {*} BasisFile - initialized transcoder module\n * @param {*} data\n * @param {*} options\n * @returns compressed texture data\n */\nfunction parseBasisFile(BasisFile, data, options) {\n  const basisFile = new BasisFile(new Uint8Array(data));\n\n  try {\n    if (!basisFile.startTranscoding()) {\n      return null;\n    }\n\n    const imageCount = basisFile.getNumImages();\n    const images: any[] = [];\n\n    for (let imageIndex = 0; imageIndex < imageCount; imageIndex++) {\n      const levelsCount = basisFile.getNumLevels(imageIndex);\n      const levels: any[] = [];\n\n      for (let levelIndex = 0; levelIndex < levelsCount; levelIndex++) {\n        levels.push(transcodeImage(basisFile, imageIndex, levelIndex, options));\n      }\n\n      images.push(levels);\n    }\n\n    return images;\n  } finally {\n    basisFile.close();\n    basisFile.delete();\n  }\n}\n\n/**\n * Parse the particular level image of a basis file\n * @param {*} basisFile\n * @param {*} imageIndex\n * @param {*} levelIndex\n * @param {*} options\n * @returns compressed texture data\n */\nfunction transcodeImage(basisFile, imageIndex, levelIndex, options) {\n  const width = basisFile.getImageWidth(imageIndex, levelIndex);\n  const height = basisFile.getImageHeight(imageIndex, levelIndex);\n\n  // See https://github.com/BinomialLLC/basis_universal/pull/83\n  const hasAlpha = basisFile.getHasAlpha(/* imageIndex, levelIndex */);\n\n  // Check options for output format etc\n  const {compressed, format, basisFormat} = getBasisOptions(options, hasAlpha);\n\n  const decodedSize = basisFile.getImageTranscodedSizeInBytes(imageIndex, levelIndex, basisFormat);\n  const decodedData = new Uint8Array(decodedSize);\n\n  if (!basisFile.transcodeImage(decodedData, imageIndex, levelIndex, basisFormat, 0, 0)) {\n    return null;\n  }\n\n  return {\n    // standard loaders.gl image category payload\n    width,\n    height,\n    data: decodedData,\n    compressed,\n\n    // Additional fields\n    // Add levelSize field.\n    hasAlpha,\n    format\n  };\n}\n\n/**\n * Parse *.ktx2 file data\n * @param {*} KTX2File\n * @param {*} data\n * @param {*} options\n * @returns compressed texture data\n */\nfunction parseKTX2File(KTX2File, data, options) {\n  const ktx2File = new KTX2File(new Uint8Array(data));\n\n  try {\n    if (!ktx2File.startTranscoding()) {\n      return null;\n    }\n    const levelsCount = ktx2File.getLevels();\n    const levels: any[] = [];\n\n    for (let levelIndex = 0; levelIndex < levelsCount; levelIndex++) {\n      levels.push(transcodeKTX2Image(ktx2File, levelIndex, options));\n      break; // texture app can only show one level for some reason\n    }\n\n    return levels;\n  } finally {\n    ktx2File.close();\n    ktx2File.delete();\n  }\n}\n\n/**\n * Parse the particular level image of a ktx2 file\n * @param {*} ktx2File\n * @param {*} levelIndex\n * @param {*} options\n * @returns\n */\nfunction transcodeKTX2Image(ktx2File, levelIndex, options) {\n  const {alphaFlag, height, width} = ktx2File.getImageLevelInfo(levelIndex, 0, 0);\n\n  // Check options for output format etc\n  const {compressed, format, basisFormat} = getBasisOptions(options, alphaFlag);\n\n  const decodedSize = ktx2File.getImageTranscodedSizeInBytes(\n    levelIndex,\n    0 /* layerIndex */,\n    0 /* faceIndex */,\n    basisFormat\n  );\n  const decodedData = new Uint8Array(decodedSize);\n\n  if (\n    !ktx2File.transcodeImage(\n      decodedData,\n      levelIndex,\n      0 /* layerIndex */,\n      0 /* faceIndex */,\n      basisFormat,\n      0,\n      -1 /* channel0 */,\n      -1 /* channel1 */\n    )\n  ) {\n    return null;\n  }\n\n  return {\n    // standard loaders.gl image category payload\n    width,\n    height,\n    data: decodedData,\n    compressed,\n\n    // Additional fields\n    // Add levelSize field.\n    alphaFlag,\n    format\n  };\n}\n\n/**\n * Get BasisFormat by loader format option\n * @param {*} options\n * @param {*} hasAlpha\n * @returns BasisFormat data\n */\nfunction getBasisOptions(options, hasAlpha) {\n  let format = options && options.basis && options.basis.format;\n  if (format === 'auto') {\n    format = selectSupportedBasisFormat();\n  }\n  if (typeof format === 'object') {\n    format = hasAlpha ? format.alpha : format.noAlpha;\n  }\n  format = format.toLowerCase();\n  return OutputFormat[format];\n}\n\n/**\n * Select transcode format from the list of supported formats\n * @returns key for OutputFormat map\n */\nexport function selectSupportedBasisFormat() {\n  const supportedFormats = getSupportedGPUTextureFormats();\n  if (supportedFormats.has('astc')) {\n    return 'astc-4x4';\n  } else if (supportedFormats.has('dxt')) {\n    return {\n      alpha: 'bc3',\n      noAlpha: 'bc1'\n    };\n  } else if (supportedFormats.has('pvrtc')) {\n    return {\n      alpha: 'pvrtc1-4-rgba',\n      noAlpha: 'pvrtc1-4-rgb'\n    };\n  } else if (supportedFormats.has('etc1')) {\n    return 'etc1';\n  } else if (supportedFormats.has('etc2')) {\n    return 'etc2';\n  }\n  return 'rgb565';\n}\n"]},"metadata":{},"sourceType":"module"}