{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport ShaderModule from './shader-module';\nimport { assert } from '../utils';\nexport function resolveModules(modules) {\n  return getShaderDependencies(instantiateModules(modules));\n}\n\nfunction getShaderDependencies(modules) {\n  var moduleMap = {};\n  var moduleDepth = {};\n  getDependencyGraph({\n    modules: modules,\n    level: 0,\n    moduleMap: moduleMap,\n    moduleDepth: moduleDepth\n  });\n  return Object.keys(moduleDepth).sort(function (a, b) {\n    return moduleDepth[b] - moduleDepth[a];\n  }).map(function (name) {\n    return moduleMap[name];\n  });\n}\n\nfunction getDependencyGraph(_ref) {\n  var modules = _ref.modules,\n      level = _ref.level,\n      moduleMap = _ref.moduleMap,\n      moduleDepth = _ref.moduleDepth;\n\n  if (level >= 5) {\n    throw new Error('Possible loop in shader dependency graph');\n  }\n\n  var _iterator = _createForOfIteratorHelper(modules),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var module = _step.value;\n      moduleMap[module.name] = module;\n\n      if (moduleDepth[module.name] === undefined || moduleDepth[module.name] < level) {\n        moduleDepth[module.name] = level;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(modules),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _module = _step2.value;\n\n      if (_module.dependencies) {\n        getDependencyGraph({\n          modules: _module.dependencies,\n          level: level + 1,\n          moduleMap: moduleMap,\n          moduleDepth: moduleDepth\n        });\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n}\n\nfunction instantiateModules(modules, seen) {\n  return modules.map(function (module) {\n    if (module instanceof ShaderModule) {\n      return module;\n    }\n\n    assert(typeof module !== 'string', \"Shader module use by name is deprecated. Import shader module '\".concat(module, \"' and use it directly.\"));\n    assert(module.name, 'shader module has no name');\n    module = new ShaderModule(module);\n    module.dependencies = instantiateModules(module.dependencies);\n    return module;\n  });\n}\n\nexport var TEST_EXPORTS = {\n  getShaderDependencies: getShaderDependencies,\n  getDependencyGraph: getDependencyGraph\n};","map":{"version":3,"mappings":";AAAA,OAAOA,YAAP,MAAyB,iBAAzB;AACA,SAAQC,MAAR,QAAqB,UAArB;AAGA,OAAO,SAASC,cAAT,CAAwBC,OAAxB,EAAiC;EACtC,OAAOC,qBAAqB,CAACC,kBAAkB,CAACF,OAAD,CAAnB,CAA5B;AACD;;AAcD,SAASC,qBAAT,CAA+BD,OAA/B,EAAwC;EACtC,IAAMG,SAAS,GAAG,EAAlB;EACA,IAAMC,WAAW,GAAG,EAApB;EACAC,kBAAkB,CAAC;IAACL,OAAD,EAACA,OAAD;IAAUM,KAAK,EAAE,CAAjB;IAAoBH,SAApB,EAAoBA,SAApB;IAA+BC;EAA/B,CAAD,CAAlBC;EAGA,OAAOE,MAAM,CAACC,IAAPD,CAAYH,WAAZG,EACJE,IADIF,CACC,UAACG,CAAD,EAAIC,CAAJ;IAAA,OAAUP,WAAW,CAACO,CAAD,CAAXP,GAAiBA,WAAW,CAACM,CAAD,CAAtC;EAAA,CADDH,EAEJK,GAFIL,CAEAM,cAAI;IAAA,OAAIV,SAAS,CAACU,IAAD,CAAb;EAAA,CAFJN,CAAP;AAGD;;AAcD,SAASF,kBAAT,OAAsE;EAAA,IAAzCL,OAAyC,QAAzCA,OAAyC;EAAA,IAAhCM,KAAgC,QAAhCA,KAAgC;EAAA,IAAzBH,SAAyB,QAAzBA,SAAyB;EAAA,IAAdC,WAAc,QAAdA,WAAc;;EACpE,IAAIE,KAAK,IAAI,CAAb,EAAgB;IACd,MAAM,IAAIQ,KAAJ,CAAU,0CAAV,CAAN;EACD;;EAHmE,2CAM/Cd,OAN+C;EAAA;;EAAA;IAMpE,oDAA8B;MAAA,IAAnBe,MAAmB;MAC5BZ,SAAS,CAACY,MAAM,CAACF,IAAR,CAATV,GAAyBY,MAAzBZ;;MACA,IAAIC,WAAW,CAACW,MAAM,CAACF,IAAR,CAAXT,KAA6BY,SAA7BZ,IAA0CA,WAAW,CAACW,MAAM,CAACF,IAAR,CAAXT,GAA2BE,KAAzE,EAAgF;QAC9EF,WAAW,CAACW,MAAM,CAACF,IAAR,CAAXT,GAA2BE,KAA3BF;MACD;IACF;EAXmE;IAAA;EAAA;IAAA;EAAA;;EAAA,4CAc/CJ,OAd+C;EAAA;;EAAA;IAcpE,uDAA8B;MAAA,IAAnBe,OAAmB;;MAC5B,IAAIA,OAAM,CAACE,YAAX,EAAyB;QACvBZ,kBAAkB,CAAC;UAACL,OAAO,EAAEe,OAAM,CAACE,YAAjB;UAA+BX,KAAK,EAAEA,KAAK,GAAG,CAA9C;UAAiDH,SAAjD,EAAiDA,SAAjD;UAA4DC;QAA5D,CAAD,CAAlBC;MACD;IACF;EAlBmE;IAAA;EAAA;IAAA;EAAA;AAmBrE;;AAED,SAASH,kBAAT,CAA4BF,OAA5B,EAAqCkB,IAArC,EAA2C;EACzC,OAAOlB,OAAO,CAACY,GAARZ,CAAYe,gBAAM,EAAI;IAC3B,IAAIA,MAAM,YAAYlB,YAAtB,EAAoC;MAClC,OAAOkB,MAAP;IACD;;IAEDjB,MAAM,CACJ,OAAOiB,MAAP,KAAkB,QADd,2EAE8DA,MAF9D,4BAANjB;IAIAA,MAAM,CAACiB,MAAM,CAACF,IAAR,EAAc,2BAAd,CAANf;IAEAiB,MAAM,GAAG,IAAIlB,YAAJ,CAAiBkB,MAAjB,CAATA;IACAA,MAAM,CAACE,YAAPF,GAAsBb,kBAAkB,CAACa,MAAM,CAACE,YAAR,CAAxCF;IAEA,OAAOA,MAAP;EAdK,EAAP;AAgBD;;AAED,OAAO,IAAMI,YAAY,GAAG;EAC1BlB,qBAD0B,EAC1BA,qBAD0B;EAE1BI;AAF0B,CAArB","names":["ShaderModule","assert","resolveModules","modules","getShaderDependencies","instantiateModules","moduleMap","moduleDepth","getDependencyGraph","level","Object","keys","sort","a","b","map","name","Error","module","undefined","dependencies","seen","TEST_EXPORTS"],"sources":["../../../src/lib/resolve-modules.js"],"sourcesContent":["import ShaderModule from './shader-module';\nimport {assert} from '../utils';\n\n// Instantiate shader modules and any dependencies resolve dependencies\nexport function resolveModules(modules) {\n  return getShaderDependencies(instantiateModules(modules));\n}\n\n/**\n * Takes a list of shader module names and returns a new list of\n * shader module names that includes all dependencies, sorted so\n * that modules that are dependencies of other modules come first.\n *\n * If the shader glsl code from the returned modules is concatenated\n * in the reverse order, it is guaranteed that all functions be resolved and\n * that all function and variable definitions come before use.\n *\n * @param {String[]} modules - Array of modules (inline modules or module names)\n * @return {String[]} - Array of modules\n */\nfunction getShaderDependencies(modules) {\n  const moduleMap = {};\n  const moduleDepth = {};\n  getDependencyGraph({modules, level: 0, moduleMap, moduleDepth});\n\n  // Return a reverse sort so that dependencies come before the modules that use them\n  return Object.keys(moduleDepth)\n    .sort((a, b) => moduleDepth[b] - moduleDepth[a])\n    .map(name => moduleMap[name]);\n}\n\n/**\n * Recursively checks module dpendencies to calculate dependency\n * level of each module.\n *\n * @param {object} options\n * @param {object[]} options.modules - Array of modules\n * @param {number} options.level - Current level\n * @param {object} options.moduleMap -\n * @param {object} options.moduleDepth - Current level\n * @return {object} - Map of module name to its level\n */\n// Adds another level of dependencies to the result map\nfunction getDependencyGraph({modules, level, moduleMap, moduleDepth}) {\n  if (level >= 5) {\n    throw new Error('Possible loop in shader dependency graph');\n  }\n\n  // Update level on all current modules\n  for (const module of modules) {\n    moduleMap[module.name] = module;\n    if (moduleDepth[module.name] === undefined || moduleDepth[module.name] < level) {\n      moduleDepth[module.name] = level;\n    }\n  }\n\n  // Recurse\n  for (const module of modules) {\n    if (module.dependencies) {\n      getDependencyGraph({modules: module.dependencies, level: level + 1, moduleMap, moduleDepth});\n    }\n  }\n}\n\nfunction instantiateModules(modules, seen) {\n  return modules.map(module => {\n    if (module instanceof ShaderModule) {\n      return module;\n    }\n\n    assert(\n      typeof module !== 'string',\n      `Shader module use by name is deprecated. Import shader module '${module}' and use it directly.`\n    );\n    assert(module.name, 'shader module has no name');\n\n    module = new ShaderModule(module);\n    module.dependencies = instantiateModules(module.dependencies);\n\n    return module;\n  });\n}\n\nexport const TEST_EXPORTS = {\n  getShaderDependencies,\n  getDependencyGraph\n};\n"]},"metadata":{},"sourceType":"module"}