{"ast":null,"code":"var arrayBuffer = null;\nexport function getScratchArrayBuffer(byteLength) {\n  if (!arrayBuffer || arrayBuffer.byteLength < byteLength) {\n    arrayBuffer = new ArrayBuffer(byteLength);\n  }\n\n  return arrayBuffer;\n}\nexport function getScratchArray(Type, length) {\n  var scratchArrayBuffer = getScratchArrayBuffer(Type.BYTES_PER_ELEMENT * length);\n  return new Type(scratchArrayBuffer, 0, length);\n}\nexport function fillArray(_ref) {\n  var target = _ref.target,\n      source = _ref.source,\n      _ref$start = _ref.start,\n      start = _ref$start === void 0 ? 0 : _ref$start,\n      _ref$count = _ref.count,\n      count = _ref$count === void 0 ? 1 : _ref$count;\n  var length = source.length;\n  var total = count * length;\n  var copied = 0;\n\n  for (var i = start; copied < length; copied++) {\n    target[i++] = source[copied];\n  }\n\n  while (copied < total) {\n    if (copied < total - copied) {\n      target.copyWithin(start + copied, start, start + copied);\n      copied *= 2;\n    } else {\n      target.copyWithin(start + copied, start, start + total - copied);\n      copied = total;\n    }\n  }\n\n  return target;\n}","map":{"version":3,"mappings":"AAAA,IAAIA,WAAW,GAAG,IAAlB;AAEA,OAAO,SAASC,qBAAT,CAA+BC,UAA/B,EAA2C;EAChD,IAAI,CAACF,WAAD,IAAgBA,WAAW,CAACE,UAAZF,GAAyBE,UAA7C,EAAyD;IACvDF,WAAW,GAAG,IAAIG,WAAJ,CAAgBD,UAAhB,CAAdF;EACD;;EACD,OAAOA,WAAP;AACD;AAED,OAAO,SAASI,eAAT,CAAyBC,IAAzB,EAA+BC,MAA/B,EAAuC;EAC5C,IAAMC,kBAAkB,GAAGN,qBAAqB,CAACI,IAAI,CAACG,iBAALH,GAAyBC,MAA1B,CAAhD;EACA,OAAO,IAAID,IAAJ,CAASE,kBAAT,EAA6B,CAA7B,EAAgCD,MAAhC,CAAP;AACD;AAGD,OAAO,SAASG,SAAT,OAA2D;EAAA,IAAvCC,MAAuC,QAAvCA,MAAuC;EAAA,IAA/BC,MAA+B,QAA/BA,MAA+B;EAAA,sBAAvBC,KAAuB;EAAA,IAAvBA,KAAuB,2BAAf,CAAe;EAAA,sBAAZC,KAAY;EAAA,IAAZA,KAAY,2BAAJ,CAAI;EAChE,IAAMP,MAAM,GAAGK,MAAM,CAACL,MAAtB;EACA,IAAMQ,KAAK,GAAGD,KAAK,GAAGP,MAAtB;EACA,IAAIS,MAAM,GAAG,CAAb;;EACA,KAAK,IAAIC,CAAC,GAAGJ,KAAb,EAAoBG,MAAM,GAAGT,MAA7B,EAAqCS,MAAM,EAA3C,EAA+C;IAC7CL,MAAM,CAACM,CAAC,EAAF,CAANN,GAAcC,MAAM,CAACI,MAAD,CAApBL;EACD;;EAED,OAAOK,MAAM,GAAGD,KAAhB,EAAuB;IAGrB,IAAIC,MAAM,GAAGD,KAAK,GAAGC,MAArB,EAA6B;MAC3BL,MAAM,CAACO,UAAPP,CAAkBE,KAAK,GAAGG,MAA1BL,EAAkCE,KAAlCF,EAAyCE,KAAK,GAAGG,MAAjDL;MACAK,MAAM,IAAI,CAAVA;IAFF,OAGO;MACLL,MAAM,CAACO,UAAPP,CAAkBE,KAAK,GAAGG,MAA1BL,EAAkCE,KAAlCF,EAAyCE,KAAK,GAAGE,KAARF,GAAgBG,MAAzDL;MACAK,MAAM,GAAGD,KAATC;IACD;EACF;;EAED,OAAOL,MAAP;AACD","names":["arrayBuffer","getScratchArrayBuffer","byteLength","ArrayBuffer","getScratchArray","Type","length","scratchArrayBuffer","BYTES_PER_ELEMENT","fillArray","target","source","start","count","total","copied","i","copyWithin"],"sources":["../../../src/utils/array-utils-flat.js"],"sourcesContent":["let arrayBuffer = null;\n\nexport function getScratchArrayBuffer(byteLength) {\n  if (!arrayBuffer || arrayBuffer.byteLength < byteLength) {\n    arrayBuffer = new ArrayBuffer(byteLength);\n  }\n  return arrayBuffer;\n}\n\nexport function getScratchArray(Type, length) {\n  const scratchArrayBuffer = getScratchArrayBuffer(Type.BYTES_PER_ELEMENT * length);\n  return new Type(scratchArrayBuffer, 0, length); // arrayBuffer, byteOffset, length (in elements)\n}\n\n// Uses copyWithin to significantly speed up typed array value filling\nexport function fillArray({target, source, start = 0, count = 1}) {\n  const length = source.length;\n  const total = count * length;\n  let copied = 0;\n  for (let i = start; copied < length; copied++) {\n    target[i++] = source[copied];\n  }\n\n  while (copied < total) {\n    // If we have copied less than half, copy everything we got\n    // else copy remaining in one operation\n    if (copied < total - copied) {\n      target.copyWithin(start + copied, start, start + copied);\n      copied *= 2;\n    } else {\n      target.copyWithin(start + copied, start, start + total - copied);\n      copied = total;\n    }\n  }\n\n  return target;\n}\n\n/*\n\n// Creates a new Uint8Array based on two different ArrayBuffers\n// @private\n// @param {ArrayBuffers} buffer1 The first buffer.\n// @param {ArrayBuffers} buffer2 The second buffer.\n// @return {ArrayBuffers} The new ArrayBuffer created out of the two.\n//\nexport function copyArrayBuffer(\n  targetBuffer, sourceBuffer, byteOffset, byteLength = sourceBuffer.byteLength\n) {\n  const targetArray = new Uint8Array(targetBuffer, byteOffset, byteLength);\n  const sourceArray = new Uint8Array(sourceBuffer);\n  targetArray.set(sourceArray);\n  return targetBuffer;\n}\n\n*/\n"]},"metadata":{},"sourceType":"module"}