{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getClosestPointOnLine = getClosestPointOnLine;\nexports.getClosestPointOnPolyline = getClosestPointOnPolyline;\n\nvar _math = require(\"math.gl\"); // Return the closest point on a line segment\n\n\nfunction getClosestPointOnLine(_ref) {\n  var p = _ref.p,\n      p1 = _ref.p1,\n      p2 = _ref.p2,\n      _ref$clampToLine = _ref.clampToLine,\n      clampToLine = _ref$clampToLine === void 0 ? true : _ref$clampToLine;\n  var lineVector = new _math.Vector3(p2).subtract(p1);\n  var pointVector = new _math.Vector3(p).subtract(p1);\n  var dotProduct = lineVector.dot(pointVector);\n\n  if (clampToLine) {\n    dotProduct = (0, _math.clamp)(dotProduct, 0, 1);\n  } // @ts-ignore\n\n\n  return lineVector.lerp(dotProduct);\n} // Return the closest point on a line segment\n\n\nfunction getClosestPointOnPolyline(_ref2) {\n  var p = _ref2.p,\n      points = _ref2.points;\n  p = new _math.Vector3(p);\n  var pClosest = null;\n  var distanceSquared = Infinity;\n  var index = -1;\n\n  for (var i = 0; i < points.length - 1; ++i) {\n    var p1 = points[i];\n    var p2 = points[i + 1];\n    var pClosestOnLine = getClosestPointOnLine({\n      p: p,\n      p1: p1,\n      p2: p2\n    });\n    var distanceToLineSquared = p.distanceSquared(pClosestOnLine);\n\n    if (distanceToLineSquared < distanceSquared) {\n      distanceSquared = distanceToLineSquared;\n      pClosest = pClosestOnLine;\n      index = i;\n    }\n  }\n\n  return {\n    point: pClosest,\n    index: index,\n    p1: points[index],\n    p2: points[index + 1],\n    distanceSquared: distanceSquared,\n    distance: Math.sqrt(distanceSquared)\n  };\n}","map":{"version":3,"mappings":";;;;;;;;AAAA,+B,CAEA;;;AACO,SAASA,qBAAT,OAAkE;EAAA,IAAjCC,CAAiC,QAAjCA,CAAiC;EAAA,IAA9BC,EAA8B,QAA9BA,EAA8B;EAAA,IAA1BC,EAA0B,QAA1BA,EAA0B;EAAA,4BAAtBC,WAAsB;EAAA,IAAtBA,WAAsB,iCAAR,IAAQ;EACvE,IAAMC,UAAU,GAAG,IAAIC,aAAJ,CAAYH,EAAZ,EAAgBI,QAAhB,CAAyBL,EAAzB,CAAnB;EACA,IAAMM,WAAW,GAAG,IAAIF,aAAJ,CAAYL,CAAZ,EAAeM,QAAf,CAAwBL,EAAxB,CAApB;EACA,IAAIO,UAAU,GAAGJ,UAAU,CAACK,GAAXL,CAAeG,WAAfH,CAAjB;;EACA,IAAID,WAAJ,EAAiB;IACfK,UAAU,GAAG,iBAAMA,UAAN,EAAkB,CAAlB,EAAqB,CAArB,CAAbA;EALqE,EAOvE;;;EACA,OAAOJ,UAAU,CAACM,IAAXN,CAAgBI,UAAhBJ,CAAP;EAGF;;;AACO,SAASO,yBAAT,QAAkD;EAAA,IAAbX,CAAa,SAAbA,CAAa;EAAA,IAAVY,MAAU,SAAVA,MAAU;EACvDZ,CAAC,GAAG,IAAIK,aAAJ,CAAYL,CAAZ,CAAJA;EACA,IAAIa,QAAQ,GAAG,IAAf;EACA,IAAIC,eAAe,GAAGC,QAAtB;EACA,IAAIC,KAAK,GAAG,CAAC,CAAb;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,CAACM,MAAPN,GAAgB,CAApC,EAAuC,EAAEK,CAAzC,EAA4C;IAC1C,IAAMhB,EAAE,GAAGW,MAAM,CAACK,CAAD,CAAjB;IACA,IAAMf,EAAE,GAAGU,MAAM,CAACK,CAAC,GAAG,CAAL,CAAjB;IACA,IAAME,cAAc,GAAGpB,qBAAqB,CAAC;MAAEC,CAAC,EAADA,CAAF;MAAKC,EAAE,EAAFA,EAAL;MAASC,EAAE,EAAFA;IAAT,CAAD,CAA5C;IACA,IAAMkB,qBAAqB,GAAGpB,CAAC,CAACc,eAAFd,CAAkBmB,cAAlBnB,CAA9B;;IACA,IAAIoB,qBAAqB,GAAGN,eAA5B,EAA6C;MAC3CA,eAAe,GAAGM,qBAAlBN;MACAD,QAAQ,GAAGM,cAAXN;MACAG,KAAK,GAAGC,CAARD;IACD;EACF;;EACD,OAAO;IACLK,KAAK,EAAER,QADF;IAELG,KAAK,EAALA,KAFK;IAGLf,EAAE,EAAEW,MAAM,CAACI,KAAD,CAHL;IAILd,EAAE,EAAEU,MAAM,CAACI,KAAK,GAAG,CAAT,CAJL;IAKLF,eAAe,EAAfA,eALK;IAMLQ,QAAQ,EAAEC,IAAI,CAACC,IAALD,CAAUT,eAAVS;EANL,CAAP;AAQD","names":["getClosestPointOnLine","p","p1","p2","clampToLine","lineVector","Vector3","subtract","pointVector","dotProduct","dot","lerp","getClosestPointOnPolyline","points","pClosest","distanceSquared","Infinity","index","i","length","pClosestOnLine","distanceToLineSquared","point","distance","Math","sqrt"],"sources":["../../../src/layers/path-marker-layer/polyline.ts"],"sourcesContent":["import { Vector3, clamp } from 'math.gl';\n\n// Return the closest point on a line segment\nexport function getClosestPointOnLine({ p, p1, p2, clampToLine = true }) {\n  const lineVector = new Vector3(p2).subtract(p1);\n  const pointVector = new Vector3(p).subtract(p1);\n  let dotProduct = lineVector.dot(pointVector);\n  if (clampToLine) {\n    dotProduct = clamp(dotProduct, 0, 1);\n  }\n  // @ts-ignore\n  return lineVector.lerp(dotProduct);\n}\n\n// Return the closest point on a line segment\nexport function getClosestPointOnPolyline({ p, points }) {\n  p = new Vector3(p);\n  let pClosest = null;\n  let distanceSquared = Infinity;\n  let index = -1;\n  for (let i = 0; i < points.length - 1; ++i) {\n    const p1 = points[i];\n    const p2 = points[i + 1];\n    const pClosestOnLine = getClosestPointOnLine({ p, p1, p2 });\n    const distanceToLineSquared = p.distanceSquared(pClosestOnLine);\n    if (distanceToLineSquared < distanceSquared) {\n      distanceSquared = distanceToLineSquared;\n      pClosest = pClosestOnLine;\n      index = i;\n    }\n  }\n  return {\n    point: pClosest,\n    index,\n    p1: points[index],\n    p2: points[index + 1],\n    distanceSquared,\n    distance: Math.sqrt(distanceSquared),\n  };\n}\n"]},"metadata":{},"sourceType":"script"}