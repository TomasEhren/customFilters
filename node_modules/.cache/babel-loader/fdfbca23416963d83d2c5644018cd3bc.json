{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nlet _Symbol$asyncIterator;\n\n_Symbol$asyncIterator = Symbol.asyncIterator;\nexport default class AsyncQueue {\n  constructor() {\n    _defineProperty(this, \"_values\", void 0);\n\n    _defineProperty(this, \"_settlers\", void 0);\n\n    _defineProperty(this, \"_closed\", void 0);\n\n    this._values = [];\n    this._settlers = [];\n    this._closed = false;\n  }\n\n  [_Symbol$asyncIterator]() {\n    return this;\n  }\n\n  push(value) {\n    return this.enqueue(value);\n  }\n\n  enqueue(value) {\n    if (this._closed) {\n      throw new Error('Closed');\n    }\n\n    if (this._settlers.length > 0) {\n      if (this._values.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n\n      const settler = this._settlers.shift();\n\n      if (value instanceof Error) {\n        settler.reject(value);\n      } else {\n        settler.resolve({\n          value\n        });\n      }\n    } else {\n      this._values.push(value);\n    }\n  }\n\n  close() {\n    while (this._settlers.length > 0) {\n      const settler = this._settlers.shift();\n\n      settler.resolve({\n        done: true\n      });\n    }\n\n    this._closed = true;\n  }\n\n  next() {\n    if (this._values.length > 0) {\n      const value = this._values.shift();\n\n      if (value instanceof Error) {\n        return Promise.reject(value);\n      }\n\n      return Promise.resolve({\n        done: false,\n        value\n      });\n    }\n\n    if (this._closed) {\n      if (this._settlers.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n\n      return Promise.resolve({\n        done: true,\n        value: undefined\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._settlers.push({\n        resolve,\n        reject\n      });\n    });\n  }\n\n}","map":{"version":3,"mappings":";;;;wBA2BGA,MAAM,CAACC;AAZV,eAAe,MAAMC,UAAN,CAAoB;EAKjCC,WAAW,GAAG;IAAAC;;IAAAA;;IAAAA;;IACZ,KAAKC,OAAL,GAAe,EAAf;IACA,KAAKC,SAAL,GAAiB,EAAjB;IACA,KAAKC,OAAL,GAAe,KAAf;EACD;;EAGD,0BAA2C;IACzC,OAAO,IAAP;EACD;;EAGDC,IAAI,CAACC,KAAD,EAAiB;IACnB,OAAO,KAAKC,OAAL,CAAaD,KAAb,CAAP;EACD;;EAMDC,OAAO,CAACD,KAAD,EAAyB;IAC9B,IAAI,KAAKF,OAAT,EAAkB;MAChB,MAAM,IAAII,KAAJ,CAAU,QAAV,CAAN;IACD;;IAED,IAAI,KAAKL,SAAL,CAAeM,MAAf,GAAwB,CAA5B,EAA+B;MAC7B,IAAI,KAAKP,OAAL,CAAaO,MAAb,GAAsB,CAA1B,EAA6B;QAC3B,MAAM,IAAID,KAAJ,CAAU,wBAAV,CAAN;MACD;;MACD,MAAME,OAAO,GAAG,KAAKP,SAAL,CAAeQ,KAAf,EAAhB;;MACA,IAAIL,KAAK,YAAYE,KAArB,EAA4B;QAC1BE,OAAO,CAACE,MAARF,CAAeJ,KAAfI;MADF,OAEO;QACLA,OAAO,CAACG,OAARH,CAAgB;UAACJ;QAAD,CAAhBI;MACD;IATH,OAUO;MACL,KAAKR,OAAL,CAAaG,IAAb,CAAkBC,KAAlB;IACD;EACF;;EAGDQ,KAAK,GAAS;IACZ,OAAO,KAAKX,SAAL,CAAeM,MAAf,GAAwB,CAA/B,EAAkC;MAChC,MAAMC,OAAO,GAAG,KAAKP,SAAL,CAAeQ,KAAf,EAAhB;;MACAD,OAAO,CAACG,OAARH,CAAgB;QAACK,IAAI,EAAE;MAAP,CAAhBL;IACD;;IACD,KAAKN,OAAL,GAAe,IAAf;EACD;;EAKDY,IAAI,GAAoC;IAEtC,IAAI,KAAKd,OAAL,CAAaO,MAAb,GAAsB,CAA1B,EAA6B;MAC3B,MAAMH,KAAK,GAAG,KAAKJ,OAAL,CAAaS,KAAb,EAAd;;MACA,IAAIL,KAAK,YAAYE,KAArB,EAA4B;QAC1B,OAAOS,OAAO,CAACL,MAARK,CAAeX,KAAfW,CAAP;MACD;;MACD,OAAOA,OAAO,CAACJ,OAARI,CAAgB;QAACF,IAAI,EAAE,KAAP;QAAcT;MAAd,CAAhBW,CAAP;IACD;;IAGD,IAAI,KAAKb,OAAT,EAAkB;MAChB,IAAI,KAAKD,SAAL,CAAeM,MAAf,GAAwB,CAA5B,EAA+B;QAC7B,MAAM,IAAID,KAAJ,CAAU,wBAAV,CAAN;MACD;;MACD,OAAOS,OAAO,CAACJ,OAARI,CAAgB;QAACF,IAAI,EAAE,IAAP;QAAaT,KAAK,EAAEY;MAApB,CAAhBD,CAAP;IACD;;IAGD,OAAO,IAAIA,OAAJ,CAAY,CAACJ,OAAD,EAAUD,MAAV,KAAqB;MACtC,KAAKT,SAAL,CAAeE,IAAf,CAAoB;QAACQ,OAAD;QAAUD;MAAV,CAApB;IADK,EAAP;EAGD;;AA/EgC","names":["Symbol","asyncIterator","AsyncQueue","constructor","_defineProperty","_values","_settlers","_closed","push","value","enqueue","Error","length","settler","shift","reject","resolve","close","done","next","Promise","undefined"],"sources":["../../../../src/lib/async-queue/async-queue.ts"],"sourcesContent":["// From https://github.com/rauschma/async-iter-demo/tree/master/src under MIT license\n// http://2ality.com/2016/10/asynchronous-iteration.html\n\n/**\n * Async Queue\n * - AsyncIterable: An async iterator can be\n * - Values can be pushed onto the queue\n * @example\n *   const asyncQueue = new AsyncQueue();\n *   setTimeout(() => asyncQueue.enqueue('tick'), 1000);\n *   setTimeout(() => asyncQueue.enqueue(new Error('done')), 10000);\n *   for await (const value of asyncQueue) {\n *     console.log(value); // tick\n *   }\n */\nexport default class AsyncQueue<T> {\n  private _values: any[];\n  private _settlers: any[];\n  private _closed: boolean;\n\n  constructor() {\n    this._values = []; // enqueues > dequeues\n    this._settlers = []; // dequeues > enqueues\n    this._closed = false;\n  }\n\n  /** Return an async iterator for this queue */\n  [Symbol.asyncIterator](): AsyncIterator<T> {\n    return this;\n  }\n\n  /** Push a new value - the async iterator will yield a promise resolved to this value */\n  push(value: T): void {\n    return this.enqueue(value);\n  }\n\n  /**\n   * Push a new value - the async iterator will yield a promise resolved to this value\n   * Add an error - the async iterator will yield a promise rejected with this value\n   */\n  enqueue(value: T | Error): void {\n    if (this._closed) {\n      throw new Error('Closed');\n    }\n\n    if (this._settlers.length > 0) {\n      if (this._values.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      const settler = this._settlers.shift();\n      if (value instanceof Error) {\n        settler.reject(value);\n      } else {\n        settler.resolve({value});\n      }\n    } else {\n      this._values.push(value);\n    }\n  }\n\n  /** Indicate that we not waiting for more values - The async iterator will be done */\n  close(): void {\n    while (this._settlers.length > 0) {\n      const settler = this._settlers.shift();\n      settler.resolve({done: true});\n    }\n    this._closed = true;\n  }\n\n  // ITERATOR IMPLEMENTATION\n\n  /** @returns a Promise for an IteratorResult */\n  next(): Promise<IteratorResult<T, any>> {\n    // If values in queue, yield the first value\n    if (this._values.length > 0) {\n      const value = this._values.shift();\n      if (value instanceof Error) {\n        return Promise.reject(value);\n      }\n      return Promise.resolve({done: false, value});\n    }\n\n    // If queue is closed, the iterator is done\n    if (this._closed) {\n      if (this._settlers.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      return Promise.resolve({done: true, value: undefined});\n    }\n\n    // Yield a promise that waits for new values to be enqueued\n    return new Promise((resolve, reject) => {\n      this._settlers.push({resolve, reject});\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}