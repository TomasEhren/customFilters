{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport AggregationLayer from './aggregation-layer';\nimport GPUGridAggregator from './utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport { Buffer } from '@luma.gl/core';\nimport { log } from '@deck.gl/core';\nimport BinSorter from './utils/bin-sorter';\nimport { pointToDensityGridDataCPU } from './cpu-grid-layer/grid-aggregator';\n\nvar GridAggregationLayer = /*#__PURE__*/function (_AggregationLayer) {\n  _inherits(GridAggregationLayer, _AggregationLayer);\n\n  var _super = _createSuper(GridAggregationLayer);\n\n  function GridAggregationLayer() {\n    _classCallCheck(this, GridAggregationLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(GridAggregationLayer, [{\n    key: \"initializeState\",\n    value: function initializeState(_ref) {\n      var dimensions = _ref.dimensions;\n      var gl = this.context.gl;\n\n      _get(_getPrototypeOf(GridAggregationLayer.prototype), \"initializeState\", this).call(this, dimensions);\n\n      this.setState({\n        layerData: {},\n        gpuGridAggregator: new GPUGridAggregator(gl, {\n          id: \"\".concat(this.id, \"-gpu-aggregator\")\n        }),\n        cpuGridAggregator: pointToDensityGridDataCPU\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      _get(_getPrototypeOf(GridAggregationLayer.prototype), \"updateState\", this).call(this, opts);\n\n      this.updateAggregationState(opts);\n      var _this$state = this.state,\n          aggregationDataDirty = _this$state.aggregationDataDirty,\n          aggregationWeightsDirty = _this$state.aggregationWeightsDirty,\n          gpuAggregation = _this$state.gpuAggregation;\n\n      if (this.getNumInstances() <= 0) {\n        return;\n      }\n\n      var aggregationDirty = false;\n\n      if (aggregationDataDirty || gpuAggregation && aggregationWeightsDirty) {\n        this._updateAggregation(opts);\n\n        aggregationDirty = true;\n      }\n\n      if (!gpuAggregation && (aggregationDataDirty || aggregationWeightsDirty)) {\n        this._updateWeightBins();\n\n        this._uploadAggregationResults();\n\n        aggregationDirty = true;\n      }\n\n      this.setState({\n        aggregationDirty: aggregationDirty\n      });\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      var _this$state$gpuGridAg;\n\n      var count = this.state.weights.count;\n\n      if (count && count.aggregationBuffer) {\n        count.aggregationBuffer.delete();\n      }\n\n      (_this$state$gpuGridAg = this.state.gpuGridAggregator) === null || _this$state$gpuGridAg === void 0 ? void 0 : _this$state$gpuGridAg.delete();\n\n      _get(_getPrototypeOf(GridAggregationLayer.prototype), \"finalizeState\", this).call(this);\n    }\n  }, {\n    key: \"updateShaders\",\n    value: function updateShaders(shaders) {\n      if (this.state.gpuAggregation) {\n        this.state.gpuGridAggregator.updateShaders(shaders);\n      }\n    }\n  }, {\n    key: \"updateAggregationState\",\n    value: function updateAggregationState(opts) {\n      log.assert(false);\n    }\n  }, {\n    key: \"allocateResources\",\n    value: function allocateResources(numRow, numCol) {\n      if (this.state.numRow !== numRow || this.state.numCol !== numCol) {\n        var dataBytes = numCol * numRow * 4 * 4;\n        var gl = this.context.gl;\n        var weights = this.state.weights;\n\n        for (var name in weights) {\n          var weight = weights[name];\n\n          if (weight.aggregationBuffer) {\n            weight.aggregationBuffer.delete();\n          }\n\n          weight.aggregationBuffer = new Buffer(gl, {\n            byteLength: dataBytes,\n            accessor: {\n              size: 4,\n              type: 5126,\n              divisor: 1\n            }\n          });\n        }\n      }\n    }\n  }, {\n    key: \"updateResults\",\n    value: function updateResults(_ref2) {\n      var aggregationData = _ref2.aggregationData,\n          maxMinData = _ref2.maxMinData,\n          maxData = _ref2.maxData,\n          minData = _ref2.minData;\n      var count = this.state.weights.count;\n\n      if (count) {\n        count.aggregationData = aggregationData;\n        count.maxMinData = maxMinData;\n        count.maxData = maxData;\n        count.minData = minData;\n      }\n    }\n  }, {\n    key: \"_updateAggregation\",\n    value: function _updateAggregation(opts) {\n      var _this$state2 = this.state,\n          cpuGridAggregator = _this$state2.cpuGridAggregator,\n          gpuGridAggregator = _this$state2.gpuGridAggregator,\n          gridOffset = _this$state2.gridOffset,\n          posOffset = _this$state2.posOffset,\n          _this$state2$translat = _this$state2.translation,\n          translation = _this$state2$translat === void 0 ? [0, 0] : _this$state2$translat,\n          _this$state2$scaling = _this$state2.scaling,\n          scaling = _this$state2$scaling === void 0 ? [0, 0, 0] : _this$state2$scaling,\n          boundingBox = _this$state2.boundingBox,\n          projectPoints = _this$state2.projectPoints,\n          gpuAggregation = _this$state2.gpuAggregation,\n          numCol = _this$state2.numCol,\n          numRow = _this$state2.numRow;\n      var props = opts.props;\n      var viewport = this.context.viewport;\n      var attributes = this.getAttributes();\n      var vertexCount = this.getNumInstances();\n\n      if (!gpuAggregation) {\n        var result = cpuGridAggregator(props, {\n          gridOffset: gridOffset,\n          projectPoints: projectPoints,\n          attributes: attributes,\n          viewport: viewport,\n          posOffset: posOffset,\n          boundingBox: boundingBox\n        });\n        this.setState({\n          layerData: result\n        });\n      } else {\n        var weights = this.state.weights;\n        gpuGridAggregator.run({\n          weights: weights,\n          cellSize: [gridOffset.xOffset, gridOffset.yOffset],\n          numCol: numCol,\n          numRow: numRow,\n          translation: translation,\n          scaling: scaling,\n          vertexCount: vertexCount,\n          projectPoints: projectPoints,\n          attributes: attributes,\n          moduleSettings: this.getModuleSettings()\n        });\n      }\n    }\n  }, {\n    key: \"_updateWeightBins\",\n    value: function _updateWeightBins() {\n      var getValue = this.state.getValue;\n      var sortedBins = new BinSorter(this.state.layerData.data || [], {\n        getValue: getValue\n      });\n      this.setState({\n        sortedBins: sortedBins\n      });\n    }\n  }, {\n    key: \"_uploadAggregationResults\",\n    value: function _uploadAggregationResults() {\n      var _this$state3 = this.state,\n          numCol = _this$state3.numCol,\n          numRow = _this$state3.numRow;\n      var data = this.state.layerData.data;\n      var _this$state$sortedBin = this.state.sortedBins,\n          aggregatedBins = _this$state$sortedBin.aggregatedBins,\n          minValue = _this$state$sortedBin.minValue,\n          maxValue = _this$state$sortedBin.maxValue,\n          totalCount = _this$state$sortedBin.totalCount;\n      var ELEMENTCOUNT = 4;\n      var aggregationSize = numCol * numRow * ELEMENTCOUNT;\n      var aggregationData = new Float32Array(aggregationSize).fill(0);\n\n      var _iterator = _createForOfIteratorHelper(aggregatedBins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var bin = _step.value;\n          var _data$bin$i = data[bin.i],\n              lonIdx = _data$bin$i.lonIdx,\n              latIdx = _data$bin$i.latIdx;\n          var value = bin.value,\n              counts = bin.counts;\n          var cellIndex = (lonIdx + latIdx * numCol) * ELEMENTCOUNT;\n          aggregationData[cellIndex] = value;\n          aggregationData[cellIndex + ELEMENTCOUNT - 1] = counts;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var maxMinData = new Float32Array([maxValue, 0, 0, minValue]);\n      var maxData = new Float32Array([maxValue, 0, 0, totalCount]);\n      var minData = new Float32Array([minValue, 0, 0, totalCount]);\n      this.updateResults({\n        aggregationData: aggregationData,\n        maxMinData: maxMinData,\n        maxData: maxData,\n        minData: minData\n      });\n    }\n  }]);\n\n  return GridAggregationLayer;\n}(AggregationLayer);\n\nexport { GridAggregationLayer as default };\nGridAggregationLayer.layerName = 'GridAggregationLayer';","map":{"version":3,"mappings":"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","names":["AggregationLayer","GPUGridAggregator","Buffer","log","BinSorter","pointToDensityGridDataCPU","GridAggregationLayer","initializeState","dimensions","gl","context","setState","layerData","gpuGridAggregator","id","cpuGridAggregator","updateState","opts","updateAggregationState","state","aggregationDataDirty","aggregationWeightsDirty","gpuAggregation","getNumInstances","aggregationDirty","_updateAggregation","_updateWeightBins","_uploadAggregationResults","finalizeState","count","weights","aggregationBuffer","delete","updateShaders","shaders","assert","allocateResources","numRow","numCol","dataBytes","name","weight","byteLength","accessor","size","type","divisor","updateResults","aggregationData","maxMinData","maxData","minData","gridOffset","posOffset","translation","scaling","boundingBox","projectPoints","props","viewport","attributes","getAttributes","vertexCount","result","run","cellSize","xOffset","yOffset","moduleSettings","getModuleSettings","getValue","sortedBins","data","aggregatedBins","minValue","maxValue","totalCount","ELEMENTCOUNT","aggregationSize","Float32Array","fill","bin","i","lonIdx","latIdx","value","counts","cellIndex","layerName"],"sources":["../../src/grid-aggregation-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport AggregationLayer from './aggregation-layer';\nimport GPUGridAggregator from './utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {Buffer} from '@luma.gl/core';\nimport {log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport BinSorter from './utils/bin-sorter';\nimport {pointToDensityGridDataCPU} from './cpu-grid-layer/grid-aggregator';\n\nexport default class GridAggregationLayer extends AggregationLayer {\n  initializeState({dimensions}) {\n    const {gl} = this.context;\n    super.initializeState(dimensions);\n    this.setState({\n      // CPU aggregation results\n      layerData: {},\n      gpuGridAggregator: new GPUGridAggregator(gl, {id: `${this.id}-gpu-aggregator`}),\n      cpuGridAggregator: pointToDensityGridDataCPU\n    });\n  }\n\n  updateState(opts) {\n    // get current attributes\n    super.updateState(opts);\n\n    this.updateAggregationState(opts);\n\n    const {aggregationDataDirty, aggregationWeightsDirty, gpuAggregation} = this.state;\n    if (this.getNumInstances() <= 0) {\n      return;\n    }\n    let aggregationDirty = false;\n    // CPU aggregation is two steps\n    // 1. Create bins (based on cellSize and position) 2. Aggregate weights for each bin\n    // For GPU aggregation both above steps are combined into one step\n\n    // step-1\n    if (aggregationDataDirty || (gpuAggregation && aggregationWeightsDirty)) {\n      this._updateAggregation(opts);\n      aggregationDirty = true;\n    }\n    // step-2 (Applicalbe for CPU aggregation only)\n    if (!gpuAggregation && (aggregationDataDirty || aggregationWeightsDirty)) {\n      this._updateWeightBins();\n      this._uploadAggregationResults();\n      aggregationDirty = true;\n    }\n\n    this.setState({aggregationDirty});\n  }\n\n  finalizeState() {\n    const {count} = this.state.weights;\n    if (count && count.aggregationBuffer) {\n      count.aggregationBuffer.delete();\n    }\n    this.state.gpuGridAggregator?.delete();\n    super.finalizeState();\n  }\n\n  updateShaders(shaders) {\n    if (this.state.gpuAggregation) {\n      this.state.gpuGridAggregator.updateShaders(shaders);\n    }\n  }\n\n  // Methods that can be overriden by subclasses for customizations\n\n  updateAggregationState(opts) {\n    // Sublayers should implement this method.\n    log.assert(false);\n  }\n\n  allocateResources(numRow, numCol) {\n    if (this.state.numRow !== numRow || this.state.numCol !== numCol) {\n      const dataBytes = numCol * numRow * 4 * 4;\n      const gl = this.context.gl;\n      const {weights} = this.state;\n      for (const name in weights) {\n        const weight = weights[name];\n        if (weight.aggregationBuffer) {\n          weight.aggregationBuffer.delete();\n        }\n        weight.aggregationBuffer = new Buffer(gl, {\n          byteLength: dataBytes,\n          accessor: {\n            size: 4,\n            type: GL.FLOAT,\n            divisor: 1\n          }\n        });\n      }\n    }\n  }\n\n  updateResults({aggregationData, maxMinData, maxData, minData}) {\n    const {count} = this.state.weights;\n    if (count) {\n      count.aggregationData = aggregationData;\n      count.maxMinData = maxMinData;\n      count.maxData = maxData;\n      count.minData = minData;\n    }\n  }\n\n  // Private\n\n  _updateAggregation(opts) {\n    const {\n      cpuGridAggregator,\n      gpuGridAggregator,\n      gridOffset,\n      posOffset,\n      translation = [0, 0],\n      scaling = [0, 0, 0],\n      boundingBox,\n      projectPoints,\n      gpuAggregation,\n      numCol,\n      numRow\n    } = this.state;\n    const {props} = opts;\n    const {viewport} = this.context;\n    const attributes = this.getAttributes();\n    const vertexCount = this.getNumInstances();\n\n    if (!gpuAggregation) {\n      const result = cpuGridAggregator(props, {\n        gridOffset,\n        projectPoints,\n        attributes,\n        viewport,\n        posOffset,\n        boundingBox\n      });\n      this.setState({\n        layerData: result\n      });\n    } else {\n      const {weights} = this.state;\n      gpuGridAggregator.run({\n        weights,\n        cellSize: [gridOffset.xOffset, gridOffset.yOffset],\n        numCol,\n        numRow,\n        translation,\n        scaling,\n        vertexCount,\n        projectPoints,\n        attributes,\n        moduleSettings: this.getModuleSettings()\n      });\n    }\n  }\n\n  _updateWeightBins() {\n    const {getValue} = this.state;\n\n    const sortedBins = new BinSorter(this.state.layerData.data || [], {getValue});\n    this.setState({sortedBins});\n  }\n\n  _uploadAggregationResults() {\n    const {numCol, numRow} = this.state;\n    const {data} = this.state.layerData;\n    const {aggregatedBins, minValue, maxValue, totalCount} = this.state.sortedBins;\n\n    const ELEMENTCOUNT = 4;\n    const aggregationSize = numCol * numRow * ELEMENTCOUNT;\n    const aggregationData = new Float32Array(aggregationSize).fill(0);\n    for (const bin of aggregatedBins) {\n      const {lonIdx, latIdx} = data[bin.i];\n      const {value, counts} = bin;\n      const cellIndex = (lonIdx + latIdx * numCol) * ELEMENTCOUNT;\n      aggregationData[cellIndex] = value;\n      aggregationData[cellIndex + ELEMENTCOUNT - 1] = counts;\n    }\n    const maxMinData = new Float32Array([maxValue, 0, 0, minValue]);\n    const maxData = new Float32Array([maxValue, 0, 0, totalCount]);\n    const minData = new Float32Array([minValue, 0, 0, totalCount]);\n    this.updateResults({aggregationData, maxMinData, maxData, minData});\n  }\n}\n\nGridAggregationLayer.layerName = 'GridAggregationLayer';\n"]},"metadata":{},"sourceType":"module"}