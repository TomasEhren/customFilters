{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Resource from './resource';\nimport { FEATURES, hasFeatures } from '../features';\nimport { isWebGL2 } from '@luma.gl/gltools';\nimport { assert } from '../utils/assert';\nvar GL_QUERY_RESULT = 0x8866;\nvar GL_QUERY_RESULT_AVAILABLE = 0x8867;\nvar GL_TIME_ELAPSED_EXT = 0x88bf;\nvar GL_GPU_DISJOINT_EXT = 0x8fbb;\nvar GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8c88;\nvar GL_ANY_SAMPLES_PASSED = 0x8c2f;\nvar GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8d6a;\n\nvar Query = /*#__PURE__*/function (_Resource) {\n  _inherits(Query, _Resource);\n\n  var _super = _createSuper(Query);\n\n  function Query(gl) {\n    var _this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Query);\n\n    _this = _super.call(this, gl, opts);\n    _this.target = null;\n    _this._queryPending = false;\n    _this._pollingPromise = null;\n    Object.seal(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Query, [{\n    key: \"beginTimeElapsedQuery\",\n    value: function beginTimeElapsedQuery() {\n      return this.begin(GL_TIME_ELAPSED_EXT);\n    }\n  }, {\n    key: \"beginOcclusionQuery\",\n    value: function beginOcclusionQuery() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$conservative = _ref.conservative,\n          conservative = _ref$conservative === void 0 ? false : _ref$conservative;\n\n      return this.begin(conservative ? GL_ANY_SAMPLES_PASSED_CONSERVATIVE : GL_ANY_SAMPLES_PASSED);\n    }\n  }, {\n    key: \"beginTransformFeedbackQuery\",\n    value: function beginTransformFeedbackQuery() {\n      return this.begin(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);\n    }\n  }, {\n    key: \"begin\",\n    value: function begin(target) {\n      if (this._queryPending) {\n        return this;\n      }\n\n      this.target = target;\n      this.gl2.beginQuery(this.target, this.handle);\n      return this;\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      if (this._queryPending) {\n        return this;\n      }\n\n      if (this.target) {\n        this.gl2.endQuery(this.target);\n        this.target = null;\n        this._queryPending = true;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"isResultAvailable\",\n    value: function isResultAvailable() {\n      if (!this._queryPending) {\n        return false;\n      }\n\n      var resultAvailable = this.gl2.getQueryParameter(this.handle, GL_QUERY_RESULT_AVAILABLE);\n\n      if (resultAvailable) {\n        this._queryPending = false;\n      }\n\n      return resultAvailable;\n    }\n  }, {\n    key: \"isTimerDisjoint\",\n    value: function isTimerDisjoint() {\n      return this.gl2.getParameter(GL_GPU_DISJOINT_EXT);\n    }\n  }, {\n    key: \"getResult\",\n    value: function getResult() {\n      return this.gl2.getQueryParameter(this.handle, GL_QUERY_RESULT);\n    }\n  }, {\n    key: \"getTimerMilliseconds\",\n    value: function getTimerMilliseconds() {\n      return this.getResult() / 1e6;\n    }\n  }, {\n    key: \"createPoll\",\n    value: function createPoll() {\n      var _this2 = this;\n\n      var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Number.POSITIVE_INFINITY;\n\n      if (this._pollingPromise) {\n        return this._pollingPromise;\n      }\n\n      var counter = 0;\n      this._pollingPromise = new Promise(function (resolve, reject) {\n        var poll = function poll() {\n          if (_this2.isResultAvailable()) {\n            resolve(_this2.getResult());\n            _this2._pollingPromise = null;\n          } else if (counter++ > limit) {\n            reject('Timed out');\n            _this2._pollingPromise = null;\n          } else {\n            requestAnimationFrame(poll);\n          }\n        };\n\n        requestAnimationFrame(poll);\n      });\n      return this._pollingPromise;\n    }\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return Query.isSupported(this.gl) ? this.gl2.createQuery() : null;\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      this.gl2.deleteQuery(this.handle);\n    }\n  }], [{\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var webgl2 = isWebGL2(gl);\n      var hasTimerQuery = hasFeatures(gl, FEATURES.TIMER_QUERY);\n      var supported = webgl2 || hasTimerQuery;\n\n      var _iterator = _createForOfIteratorHelper(opts),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var key = _step.value;\n\n          switch (key) {\n            case 'queries':\n              supported = supported && webgl2;\n              break;\n\n            case 'timers':\n              supported = supported && hasTimerQuery;\n              break;\n\n            default:\n              assert(false);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return supported;\n    }\n  }]);\n\n  return Query;\n}(Resource);\n\nexport { Query as default };","map":{"version":3,"mappings":"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","names":["Resource","FEATURES","hasFeatures","isWebGL2","assert","GL_QUERY_RESULT","GL_QUERY_RESULT_AVAILABLE","GL_TIME_ELAPSED_EXT","GL_GPU_DISJOINT_EXT","GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN","GL_ANY_SAMPLES_PASSED","GL_ANY_SAMPLES_PASSED_CONSERVATIVE","Query","constructor","gl","opts","target","_queryPending","_pollingPromise","Object","seal","beginTimeElapsedQuery","begin","beginOcclusionQuery","conservative","beginTransformFeedbackQuery","gl2","beginQuery","handle","end","endQuery","isResultAvailable","resultAvailable","getQueryParameter","isTimerDisjoint","getParameter","getResult","getTimerMilliseconds","createPoll","limit","Number","POSITIVE_INFINITY","counter","Promise","resolve","reject","poll","requestAnimationFrame","_createHandle","isSupported","createQuery","_deleteHandle","deleteQuery","webgl2","hasTimerQuery","TIMER_QUERY","supported","key"],"sources":["../../../src/classes/query.js"],"sourcesContent":["// WebGL2 Query (also handles disjoint timer extensions)\nimport Resource from './resource';\nimport {FEATURES, hasFeatures} from '../features';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {assert} from '../utils/assert';\n\nconst GL_QUERY_RESULT = 0x8866; // Returns a GLuint containing the query result.\nconst GL_QUERY_RESULT_AVAILABLE = 0x8867; // whether query result is available.\n\nconst GL_TIME_ELAPSED_EXT = 0x88bf; // Elapsed time (in nanoseconds).\nconst GL_GPU_DISJOINT_EXT = 0x8fbb; // Whether GPU performed any disjoint operation.\n\nconst GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8c88; // #primitives written to feedback buffers\nconst GL_ANY_SAMPLES_PASSED = 0x8c2f; // Occlusion query (if drawing passed depth test)\nconst GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8d6a; // Occlusion query less accurate/faster version\n\nexport default class Query extends Resource {\n  // Returns true if Query is supported by the WebGL implementation\n  // Can also check whether timestamp queries are available.\n  static isSupported(gl, opts = []) {\n    const webgl2 = isWebGL2(gl);\n\n    // Initial value\n    const hasTimerQuery = hasFeatures(gl, FEATURES.TIMER_QUERY);\n    let supported = webgl2 || hasTimerQuery;\n\n    for (const key of opts) {\n      switch (key) {\n        case 'queries':\n          supported = supported && webgl2;\n          break;\n        case 'timers':\n          supported = supported && hasTimerQuery;\n          break;\n        default:\n          assert(false);\n      }\n    }\n\n    return supported;\n  }\n\n  // Create a query class\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    this.target = null;\n    this._queryPending = false;\n    this._pollingPromise = null;\n\n    Object.seal(this);\n  }\n\n  // Shortcut for timer query (dependent on extension in both WebGL1 and 2)\n  // Measures GPU time delta between this call and a matching `end` call in the\n  // GPU instruction stream.\n  beginTimeElapsedQuery() {\n    return this.begin(GL_TIME_ELAPSED_EXT);\n  }\n\n  // Shortcut for occlusion queries\n  beginOcclusionQuery({conservative = false} = {}) {\n    return this.begin(conservative ? GL_ANY_SAMPLES_PASSED_CONSERVATIVE : GL_ANY_SAMPLES_PASSED);\n  }\n\n  // Shortcut for transformFeedbackQuery\n  beginTransformFeedbackQuery() {\n    return this.begin(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);\n  }\n\n  // Due to OpenGL API limitations, after calling `begin()` on one Query\n  // instance, `end()` must be called on that same instance before\n  // calling `begin()` on another query. While there can be multiple\n  // outstanding queries representing disjoint `begin()`/`end()` intervals.\n  // It is not possible to interleave or overlap `begin` and `end` calls.\n  begin(target) {\n    // Don't start a new query if one is already active.\n    if (this._queryPending) {\n      return this;\n    }\n\n    this.target = target;\n    this.gl2.beginQuery(this.target, this.handle);\n\n    return this;\n  }\n\n  // ends the current query\n  end() {\n    // Can't end a new query if the last one hasn't been resolved.\n    if (this._queryPending) {\n      return this;\n    }\n\n    if (this.target) {\n      this.gl2.endQuery(this.target);\n      this.target = null;\n      this._queryPending = true;\n    }\n    return this;\n  }\n\n  // Returns true if the query result is available\n  isResultAvailable() {\n    if (!this._queryPending) {\n      return false;\n    }\n\n    const resultAvailable = this.gl2.getQueryParameter(this.handle, GL_QUERY_RESULT_AVAILABLE);\n    if (resultAvailable) {\n      this._queryPending = false;\n    }\n    return resultAvailable;\n  }\n\n  // Timing query is disjoint, i.e. results are invalid\n  isTimerDisjoint() {\n    return this.gl2.getParameter(GL_GPU_DISJOINT_EXT);\n  }\n\n  // Returns query result.\n  getResult() {\n    return this.gl2.getQueryParameter(this.handle, GL_QUERY_RESULT);\n  }\n\n  // Returns the query result, converted to milliseconds to match JavaScript conventions.\n  getTimerMilliseconds() {\n    return this.getResult() / 1e6;\n  }\n\n  // Polls the query\n  createPoll(limit = Number.POSITIVE_INFINITY) {\n    if (this._pollingPromise) {\n      return this._pollingPromise;\n    }\n\n    let counter = 0;\n\n    this._pollingPromise = new Promise((resolve, reject) => {\n      const poll = () => {\n        if (this.isResultAvailable()) {\n          resolve(this.getResult());\n          this._pollingPromise = null;\n        } else if (counter++ > limit) {\n          reject('Timed out');\n          this._pollingPromise = null;\n        } else {\n          requestAnimationFrame(poll);\n        }\n      };\n\n      requestAnimationFrame(poll);\n    });\n\n    return this._pollingPromise;\n  }\n\n  _createHandle() {\n    return Query.isSupported(this.gl) ? this.gl2.createQuery() : null;\n  }\n\n  _deleteHandle() {\n    this.gl2.deleteQuery(this.handle);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}