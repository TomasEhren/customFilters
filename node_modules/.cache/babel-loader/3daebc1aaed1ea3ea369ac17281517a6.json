{"ast":null,"code":"import Resource from './resource';\nimport RENDERBUFFER_FORMATS from './renderbuffer-formats';\nimport { isWebGL2 } from '@luma.gl/gltools';\nimport { assert } from '../utils/assert';\n\nfunction isFormatSupported(gl, format, formats) {\n  const info = formats[format];\n\n  if (!info) {\n    return false;\n  }\n\n  const value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n\n  if (typeof value === 'string') {\n    return gl.getExtension(value);\n  }\n\n  return value;\n}\n\nexport default class Renderbuffer extends Resource {\n  static isSupported(gl) {\n    let {\n      format\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      format: null\n    };\n    return !format || isFormatSupported(gl, format, RENDERBUFFER_FORMATS);\n  }\n\n  static getSamplesForFormat(gl, _ref) {\n    let {\n      format\n    } = _ref;\n    return gl.getInternalformatParameter(36161, format, 32937);\n  }\n\n  constructor(gl) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(gl, opts);\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  initialize(_ref2) {\n    let {\n      format,\n      width = 1,\n      height = 1,\n      samples = 0\n    } = _ref2;\n    assert(format, 'Needs format');\n\n    this._trackDeallocatedMemory();\n\n    this.gl.bindRenderbuffer(36161, this.handle);\n\n    if (samples !== 0 && isWebGL2(this.gl)) {\n      this.gl.renderbufferStorageMultisample(36161, samples, format, width, height);\n    } else {\n      this.gl.renderbufferStorage(36161, format, width, height);\n    }\n\n    this.format = format;\n    this.width = width;\n    this.height = height;\n    this.samples = samples;\n\n    this._trackAllocatedMemory(this.width * this.height * (this.samples || 1) * RENDERBUFFER_FORMATS[this.format].bpp);\n\n    return this;\n  }\n\n  resize(_ref3) {\n    let {\n      width,\n      height\n    } = _ref3;\n\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({\n        width,\n        height,\n        format: this.format,\n        samples: this.samples\n      });\n    }\n\n    return this;\n  }\n\n  _createHandle() {\n    return this.gl.createRenderbuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteRenderbuffer(this.handle);\n\n    this._trackDeallocatedMemory();\n  }\n\n  _bindHandle(handle) {\n    this.gl.bindRenderbuffer(36161, handle);\n  }\n\n  _syncHandle(handle) {\n    this.format = this.getParameter(36164);\n    this.width = this.getParameter(36162);\n    this.height = this.getParameter(36163);\n    this.samples = this.getParameter(36011);\n  }\n\n  _getParameter(pname) {\n    this.gl.bindRenderbuffer(36161, this.handle);\n    const value = this.gl.getRenderbufferParameter(36161, pname);\n    return value;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Resource","RENDERBUFFER_FORMATS","isWebGL2","assert","isFormatSupported","gl","format","formats","info","value","gl2","gl1","getExtension","Renderbuffer","isSupported","getSamplesForFormat","getInternalformatParameter","constructor","opts","initialize","Object","seal","width","height","samples","_trackDeallocatedMemory","bindRenderbuffer","handle","renderbufferStorageMultisample","renderbufferStorage","_trackAllocatedMemory","bpp","resize","_createHandle","createRenderbuffer","_deleteHandle","deleteRenderbuffer","_bindHandle","_syncHandle","getParameter","_getParameter","pname","getRenderbufferParameter"],"sources":["../../../src/classes/renderbuffer.js"],"sourcesContent":["/* eslint-disable no-inline-comments */\nimport GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport RENDERBUFFER_FORMATS from './renderbuffer-formats';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {assert} from '../utils/assert';\n\nfunction isFormatSupported(gl, format, formats) {\n  const info = formats[format];\n  if (!info) {\n    return false;\n  }\n  const value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n  if (typeof value === 'string') {\n    return gl.getExtension(value);\n  }\n  return value;\n}\n\nexport default class Renderbuffer extends Resource {\n  static isSupported(gl, {format} = {format: null}) {\n    return !format || isFormatSupported(gl, format, RENDERBUFFER_FORMATS);\n  }\n\n  static getSamplesForFormat(gl, {format}) {\n    // Polyfilled to return [0] under WebGL1\n    return gl.getInternalformatParameter(GL.RENDERBUFFER, format, GL.SAMPLES);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // @ts-ignore\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  // Creates and initializes a renderbuffer object's data store\n  initialize({format, width = 1, height = 1, samples = 0}) {\n    assert(format, 'Needs format');\n\n    this._trackDeallocatedMemory();\n\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, this.handle);\n\n    if (samples !== 0 && isWebGL2(this.gl)) {\n      // @ts-ignore\n      this.gl.renderbufferStorageMultisample(GL.RENDERBUFFER, samples, format, width, height);\n    } else {\n      this.gl.renderbufferStorage(GL.RENDERBUFFER, format, width, height);\n    }\n\n    // this.gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n\n    this.format = format;\n    this.width = width;\n    this.height = height;\n    this.samples = samples;\n\n    this._trackAllocatedMemory(\n      this.width * this.height * (this.samples || 1) * RENDERBUFFER_FORMATS[this.format].bpp\n    );\n\n    return this;\n  }\n\n  resize({width, height}) {\n    // Don't resize if width/height haven't changed\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({width, height, format: this.format, samples: this.samples});\n    }\n    return this;\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createRenderbuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteRenderbuffer(this.handle);\n    this._trackDeallocatedMemory();\n  }\n\n  _bindHandle(handle) {\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, handle);\n  }\n\n  _syncHandle(handle) {\n    this.format = this.getParameter(GL.RENDERBUFFER_INTERNAL_FORMAT);\n    this.width = this.getParameter(GL.RENDERBUFFER_WIDTH);\n    this.height = this.getParameter(GL.RENDERBUFFER_HEIGHT);\n    this.samples = this.getParameter(GL.RENDERBUFFER_SAMPLES);\n  }\n\n  // @param {Boolean} opt.autobind=true - method call will bind/unbind object\n  // @returns {GLenum|GLint} - depends on pname\n  _getParameter(pname) {\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, this.handle);\n    const value = this.gl.getRenderbufferParameter(GL.RENDERBUFFER, pname);\n    // this.gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n    return value;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}