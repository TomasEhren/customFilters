{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport ComponentState from '../lifecycle/component-state';\nexport default class LayerState extends ComponentState {\n  constructor(_ref) {\n    let {\n      attributeManager,\n      layer\n    } = _ref;\n    super(layer);\n\n    _defineProperty(this, \"attributeManager\", void 0);\n\n    _defineProperty(this, \"needsRedraw\", void 0);\n\n    _defineProperty(this, \"subLayers\", void 0);\n\n    _defineProperty(this, \"usesPickingColorCache\", void 0);\n\n    this.attributeManager = attributeManager;\n    this.needsRedraw = true;\n    this.subLayers = null;\n    this.usesPickingColorCache = false;\n  }\n\n  get layer() {\n    return this.component;\n  }\n\n  set layer(layer) {\n    this.component = layer;\n  }\n\n  _fetch(propName, url) {\n    const fetch = this.component.props.fetch;\n\n    if (fetch) {\n      return fetch(url, {\n        propName,\n        layer: this.layer\n      });\n    }\n\n    return super._fetch(propName, url);\n  }\n\n  _onResolve(propName, value) {\n    const onDataLoad = this.component.props.onDataLoad;\n\n    if (propName === 'data' && onDataLoad) {\n      onDataLoad(value, {\n        propName,\n        layer: this.layer\n      });\n    }\n  }\n\n  _onError(propName, error) {\n    this.layer.raiseError(error, \"loading \".concat(propName, \" of \").concat(this.layer));\n  }\n\n}","map":{"version":3,"mappings":";AAAA,OAAOA,cAAP,MAA2B,8BAA3B;AAMA,eAAe,MAAMC,UAAN,SAA+CD,cAA/C,CAAiE;EAY9EE,WAAW,OAAgF;IAAA,IAA/E;MAACC,gBAAD;MAAmBC;IAAnB,CAA+E;IACzF,MAAMA,KAAN;;IADyFC;;IAAAA;;IAAAA;;IAAAA;;IAEzF,KAAKF,gBAAL,GAAwBA,gBAAxB;IACA,KAAKG,WAAL,GAAmB,IAAnB;IACA,KAAKC,SAAL,GAAiB,IAAjB;IACA,KAAKC,qBAAL,GAA6B,KAA7B;EACD;;EAEQ,IAALJ,KAAK,GAAU;IACjB,OAAO,KAAKK,SAAZ;EACD;;EAEQ,IAALL,KAAK,CAACA,KAAD,EAAe;IACtB,KAAKK,SAAL,GAAiBL,KAAjB;EACD;;EAISM,MAAM,CAACC,QAAD,EAAWC,GAAX,EAAwB;IACtC,MAAMC,KAAK,GAAG,KAAKJ,SAAL,CAAeK,KAAf,CAAqBD,KAAnC;;IACA,IAAIA,KAAJ,EAAW;MACT,OAAOA,KAAK,CAACD,GAAD,EAAM;QAACD,QAAD;QAAWP,KAAK,EAAE,KAAKA;MAAvB,CAAN,CAAZ;IACD;;IACD,OAAO,MAAMM,MAAN,CAAaC,QAAb,EAAuBC,GAAvB,CAAP;EACD;;EAESG,UAAU,CAACJ,QAAD,EAAoBK,KAApB,EAAgC;IAClD,MAAMC,UAAU,GAAG,KAAKR,SAAL,CAAeK,KAAf,CAAqBG,UAAxC;;IACA,IAAIN,QAAQ,KAAK,MAAbA,IAAuBM,UAA3B,EAAuC;MACrCA,UAAU,CAACD,KAAD,EAAQ;QAACL,QAAD;QAAWP,KAAK,EAAE,KAAKA;MAAvB,CAAR,CAAVa;IACD;EACF;;EAESC,QAAQ,CAACP,QAAD,EAAoBQ,KAApB,EAAkC;IAClD,KAAKf,KAAL,CAAWgB,UAAX,CAAsBD,KAAtB,oBAAwCR,QAAxC,iBAAuD,KAAKP,KAA5D;EACD;;AA/C6E","names":["ComponentState","LayerState","constructor","attributeManager","layer","_defineProperty","needsRedraw","subLayers","usesPickingColorCache","component","_fetch","propName","url","fetch","props","_onResolve","value","onDataLoad","_onError","error","raiseError"],"sources":["../../../src/lib/layer-state.ts"],"sourcesContent":["import ComponentState from '../lifecycle/component-state';\n\nimport type Layer from './layer';\nimport type AttributeManager from './attribute/attribute-manager';\nimport {LayerProps} from './layer-props';\n\nexport default class LayerState<T extends LayerProps> extends ComponentState<T> {\n  attributeManager: AttributeManager;\n  needsRedraw: boolean;\n  /**\n   * Sublayers rendered in a previous cycle\n   */\n  subLayers: any;\n  /**\n   * If the layer is using the shared instancedPickingColors buffer\n   */\n  usesPickingColorCache: boolean;\n\n  constructor({attributeManager, layer}: {attributeManager: AttributeManager; layer: Layer}) {\n    super(layer);\n    this.attributeManager = attributeManager;\n    this.needsRedraw = true;\n    this.subLayers = null;\n    this.usesPickingColorCache = false;\n  }\n\n  get layer(): Layer {\n    return this.component as Layer;\n  }\n\n  set layer(layer: Layer) {\n    this.component = layer;\n  }\n\n  /* Override base Component methods with Layer-specific handling */\n\n  protected _fetch(propName, url: string) {\n    const fetch = this.component.props.fetch;\n    if (fetch) {\n      return fetch(url, {propName, layer: this.layer});\n    }\n    return super._fetch(propName, url);\n  }\n\n  protected _onResolve(propName: keyof T, value: any) {\n    const onDataLoad = this.component.props.onDataLoad;\n    if (propName === 'data' && onDataLoad) {\n      onDataLoad(value, {propName, layer: this.layer});\n    }\n  }\n\n  protected _onError(propName: keyof T, error: Error) {\n    this.layer.raiseError(error, `loading ${propName} of ${this.layer}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}