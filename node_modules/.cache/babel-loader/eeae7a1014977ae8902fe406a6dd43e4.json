{"ast":null,"code":"import _defineProperty from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { hasFeature, FEATURES, Buffer } from '@luma.gl/core';\nimport ShaderAttribute from './shader-attribute';\nimport { glArrayFromType } from './gl-utils';\nimport typedArrayManager from '../../utils/typed-array-manager';\nimport { toDoublePrecisionArray } from '../../utils/math-utils';\nimport log from '../../utils/log';\n\nfunction getStride(accessor) {\n  return accessor.stride || accessor.size * accessor.bytesPerElement;\n}\n\nfunction resolveShaderAttribute(baseAccessor, shaderAttributeOptions) {\n  if (shaderAttributeOptions.offset) {\n    log.removed('shaderAttribute.offset', 'vertexOffset, elementOffset')();\n  }\n\n  var stride = getStride(baseAccessor);\n  var vertexOffset = 'vertexOffset' in shaderAttributeOptions ? shaderAttributeOptions.vertexOffset : baseAccessor.vertexOffset || 0;\n  var elementOffset = shaderAttributeOptions.elementOffset || 0;\n  var offset = vertexOffset * stride + elementOffset * baseAccessor.bytesPerElement + (baseAccessor.offset || 0);\n  return _objectSpread(_objectSpread({}, shaderAttributeOptions), {}, {\n    offset: offset,\n    stride: stride\n  });\n}\n\nfunction resolveDoublePrecisionShaderAttributes(baseAccessor, shaderAttributeOptions) {\n  var resolvedOptions = resolveShaderAttribute(baseAccessor, shaderAttributeOptions);\n  return {\n    high: resolvedOptions,\n    low: _objectSpread(_objectSpread({}, resolvedOptions), {}, {\n      offset: resolvedOptions.offset + baseAccessor.size * 4\n    })\n  };\n}\n\nvar DataColumn = /*#__PURE__*/function () {\n  function DataColumn(gl, opts) {\n    _classCallCheck(this, DataColumn);\n\n    this.gl = gl;\n    this.id = opts.id;\n    this.size = opts.size;\n    var logicalType = opts.logicalType || opts.type;\n    var doublePrecision = logicalType === 5130;\n    var defaultValue = opts.defaultValue;\n    defaultValue = Number.isFinite(defaultValue) ? [defaultValue] : defaultValue || new Array(this.size).fill(0);\n    opts.defaultValue = defaultValue;\n    var bufferType = logicalType;\n\n    if (doublePrecision) {\n      bufferType = 5126;\n    } else if (!bufferType && opts.isIndexed) {\n      bufferType = gl && hasFeature(gl, FEATURES.ELEMENT_INDEX_UINT32) ? 5125 : 5123;\n    } else if (!bufferType) {\n      bufferType = 5126;\n    }\n\n    opts.logicalType = logicalType;\n    opts.type = bufferType;\n    var defaultType = glArrayFromType(logicalType || bufferType || 5126);\n    this.shaderAttributes = {};\n    this.doublePrecision = doublePrecision;\n\n    if (doublePrecision && opts.fp64 === false) {\n      defaultType = Float32Array;\n    }\n\n    opts.bytesPerElement = defaultType.BYTES_PER_ELEMENT;\n    this.defaultType = defaultType;\n    this.value = null;\n    this.settings = opts;\n    this.state = {\n      externalBuffer: null,\n      bufferAccessor: opts,\n      allocatedValue: null,\n      numInstances: 0,\n      bounds: null,\n      constant: false\n    };\n    this._buffer = null;\n    this.setData(opts);\n  }\n\n  _createClass(DataColumn, [{\n    key: \"buffer\",\n    get: function get() {\n      if (!this._buffer) {\n        var _this$settings = this.settings,\n            isIndexed = _this$settings.isIndexed,\n            type = _this$settings.type;\n        this._buffer = new Buffer(this.gl, {\n          id: this.id,\n          target: isIndexed ? 34963 : 34962,\n          accessor: {\n            type: type\n          }\n        });\n      }\n\n      return this._buffer;\n    }\n  }, {\n    key: \"byteOffset\",\n    get: function get() {\n      var accessor = this.getAccessor();\n\n      if (accessor.vertexOffset) {\n        return accessor.vertexOffset * getStride(accessor);\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"numInstances\",\n    get: function get() {\n      return this.state.numInstances;\n    },\n    set: function set(n) {\n      this.state.numInstances = n;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      if (this._buffer) {\n        this._buffer.delete();\n\n        this._buffer = null;\n      }\n\n      typedArrayManager.release(this.state.allocatedValue);\n    }\n  }, {\n    key: \"getShaderAttributes\",\n    value: function getShaderAttributes(id, options) {\n      if (this.doublePrecision) {\n        var shaderAttributes = {};\n        var isBuffer64Bit = this.value instanceof Float64Array;\n        var doubleShaderAttributeDefs = resolveDoublePrecisionShaderAttributes(this.getAccessor(), options || {});\n        shaderAttributes[id] = new ShaderAttribute(this, doubleShaderAttributeDefs.high);\n        shaderAttributes[\"\".concat(id, \"64Low\")] = isBuffer64Bit ? new ShaderAttribute(this, doubleShaderAttributeDefs.low) : new Float32Array(this.size);\n        return shaderAttributes;\n      }\n\n      if (options) {\n        var shaderAttributeDef = resolveShaderAttribute(this.getAccessor(), options);\n        return _defineProperty({}, id, new ShaderAttribute(this, shaderAttributeDef));\n      }\n\n      return _defineProperty({}, id, this);\n    }\n  }, {\n    key: \"getBuffer\",\n    value: function getBuffer() {\n      if (this.state.constant) {\n        return null;\n      }\n\n      return this.state.externalBuffer || this._buffer;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      if (this.state.constant) {\n        return this.value;\n      }\n\n      return [this.getBuffer(), this.getAccessor()];\n    }\n  }, {\n    key: \"getAccessor\",\n    value: function getAccessor() {\n      return this.state.bufferAccessor;\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      if (this.state.bounds) {\n        return this.state.bounds;\n      }\n\n      var result = null;\n\n      if (this.state.constant) {\n        var min = this.value.slice();\n        result = [min, min];\n      } else {\n        var value = this.value,\n            numInstances = this.numInstances,\n            size = this.size;\n        var len = numInstances * size;\n\n        if (value && len && value.length >= len) {\n          var _min = new Array(size).fill(Infinity);\n\n          var max = new Array(size).fill(-Infinity);\n\n          for (var i = 0; i < len;) {\n            for (var j = 0; j < size; j++) {\n              var v = value[i++];\n              if (v < _min[j]) _min[j] = v;\n              if (v > max[j]) max[j] = v;\n            }\n          }\n\n          result = [_min, max];\n        }\n      }\n\n      this.state.bounds = result;\n      return result;\n    }\n  }, {\n    key: \"setData\",\n    value: function setData(opts) {\n      var state = this.state;\n\n      if (ArrayBuffer.isView(opts)) {\n        opts = {\n          value: opts\n        };\n      } else if (opts instanceof Buffer) {\n        opts = {\n          buffer: opts\n        };\n      }\n\n      var accessor = _objectSpread(_objectSpread({}, this.settings), opts);\n\n      state.bufferAccessor = accessor;\n      state.bounds = null;\n\n      if (opts.constant) {\n        var value = opts.value;\n        value = this._normalizeValue(value, [], 0);\n\n        if (this.settings.normalized) {\n          value = this._normalizeConstant(value);\n        }\n\n        var hasChanged = !state.constant || !this._areValuesEqual(value, this.value);\n\n        if (!hasChanged) {\n          return false;\n        }\n\n        state.externalBuffer = null;\n        state.constant = true;\n        this.value = value;\n      } else if (opts.buffer) {\n        var buffer = opts.buffer;\n        state.externalBuffer = buffer;\n        state.constant = false;\n        this.value = opts.value;\n        var isBuffer64Bit = opts.value instanceof Float64Array;\n        accessor.type = opts.type || buffer.accessor.type;\n        accessor.bytesPerElement = buffer.accessor.BYTES_PER_ELEMENT * (isBuffer64Bit ? 2 : 1);\n        accessor.stride = getStride(accessor);\n      } else if (opts.value) {\n        this._checkExternalBuffer(opts);\n\n        var _value = opts.value;\n        state.externalBuffer = null;\n        state.constant = false;\n        this.value = _value;\n        accessor.bytesPerElement = _value.BYTES_PER_ELEMENT;\n        accessor.stride = getStride(accessor);\n        var _buffer = this.buffer,\n            byteOffset = this.byteOffset;\n\n        if (this.doublePrecision && _value instanceof Float64Array) {\n          _value = toDoublePrecisionArray(_value, accessor);\n        }\n\n        var requiredBufferSize = _value.byteLength + byteOffset + accessor.stride * 2;\n\n        if (_buffer.byteLength < requiredBufferSize) {\n          _buffer.reallocate(requiredBufferSize);\n        }\n\n        _buffer.setAccessor(null);\n\n        _buffer.subData({\n          data: _value,\n          offset: byteOffset\n        });\n\n        accessor.type = opts.type || _buffer.accessor.type;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"updateSubBuffer\",\n    value: function updateSubBuffer() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.state.bounds = null;\n      var value = this.value;\n      var _opts$startOffset = opts.startOffset,\n          startOffset = _opts$startOffset === void 0 ? 0 : _opts$startOffset,\n          endOffset = opts.endOffset;\n      this.buffer.subData({\n        data: this.doublePrecision && value instanceof Float64Array ? toDoublePrecisionArray(value, {\n          size: this.size,\n          startIndex: startOffset,\n          endIndex: endOffset\n        }) : value.subarray(startOffset, endOffset),\n        offset: startOffset * value.BYTES_PER_ELEMENT + this.byteOffset\n      });\n    }\n  }, {\n    key: \"allocate\",\n    value: function allocate(_ref3) {\n      var numInstances = _ref3.numInstances,\n          _ref3$copy = _ref3.copy,\n          copy = _ref3$copy === void 0 ? false : _ref3$copy;\n      var state = this.state;\n      var oldValue = state.allocatedValue;\n      var value = typedArrayManager.allocate(oldValue, numInstances + 1, {\n        size: this.size,\n        type: this.defaultType,\n        copy: copy\n      });\n      this.value = value;\n      var buffer = this.buffer,\n          byteOffset = this.byteOffset;\n\n      if (buffer.byteLength < value.byteLength + byteOffset) {\n        buffer.reallocate(value.byteLength + byteOffset);\n\n        if (copy && oldValue) {\n          buffer.subData({\n            data: oldValue instanceof Float64Array ? toDoublePrecisionArray(oldValue, this) : oldValue,\n            offset: byteOffset\n          });\n        }\n      }\n\n      state.allocatedValue = value;\n      state.constant = false;\n      state.externalBuffer = null;\n      state.bufferAccessor = this.settings;\n      return true;\n    }\n  }, {\n    key: \"_checkExternalBuffer\",\n    value: function _checkExternalBuffer(opts) {\n      var value = opts.value;\n\n      if (!opts.constant && value) {\n        var ArrayType = this.defaultType;\n        var illegalArrayType = false;\n\n        if (this.doublePrecision) {\n          illegalArrayType = value.BYTES_PER_ELEMENT < 4;\n        }\n\n        if (illegalArrayType) {\n          throw new Error(\"Attribute \".concat(this.id, \" does not support \").concat(value.constructor.name));\n        }\n\n        if (!(value instanceof ArrayType) && this.settings.normalized && !('normalized' in opts)) {\n          log.warn(\"Attribute \".concat(this.id, \" is normalized\"))();\n        }\n      }\n    }\n  }, {\n    key: \"_normalizeConstant\",\n    value: function _normalizeConstant(value) {\n      switch (this.settings.type) {\n        case 5120:\n          return new Float32Array(value).map(function (x) {\n            return (x + 128) / 255 * 2 - 1;\n          });\n\n        case 5122:\n          return new Float32Array(value).map(function (x) {\n            return (x + 32768) / 65535 * 2 - 1;\n          });\n\n        case 5121:\n          return new Float32Array(value).map(function (x) {\n            return x / 255;\n          });\n\n        case 5123:\n          return new Float32Array(value).map(function (x) {\n            return x / 65535;\n          });\n\n        default:\n          return value;\n      }\n    }\n  }, {\n    key: \"_normalizeValue\",\n    value: function _normalizeValue(value, out, start) {\n      var _this$settings2 = this.settings,\n          defaultValue = _this$settings2.defaultValue,\n          size = _this$settings2.size;\n\n      if (Number.isFinite(value)) {\n        out[start] = value;\n        return out;\n      }\n\n      if (!value) {\n        out[start] = defaultValue[0];\n        return out;\n      }\n\n      switch (size) {\n        case 4:\n          out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];\n\n        case 3:\n          out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];\n\n        case 2:\n          out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];\n\n        case 1:\n          out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];\n          break;\n\n        default:\n          var i = size;\n\n          while (--i >= 0) {\n            out[start + i] = Number.isFinite(value[i]) ? value[i] : defaultValue[i];\n          }\n\n      }\n\n      return out;\n    }\n  }, {\n    key: \"_areValuesEqual\",\n    value: function _areValuesEqual(value1, value2) {\n      if (!value1 || !value2) {\n        return false;\n      }\n\n      var size = this.size;\n\n      for (var i = 0; i < size; i++) {\n        if (value1[i] !== value2[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }]);\n\n  return DataColumn;\n}();\n\nexport { DataColumn as default };","map":{"version":3,"mappings":"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","names":["hasFeature","FEATURES","Buffer","ShaderAttribute","glArrayFromType","typedArrayManager","toDoublePrecisionArray","log","getStride","accessor","stride","size","bytesPerElement","resolveShaderAttribute","baseAccessor","shaderAttributeOptions","offset","removed","vertexOffset","elementOffset","resolveDoublePrecisionShaderAttributes","resolvedOptions","high","low","DataColumn","constructor","gl","opts","id","logicalType","type","doublePrecision","defaultValue","Number","isFinite","Array","fill","bufferType","isIndexed","ELEMENT_INDEX_UINT32","defaultType","shaderAttributes","fp64","Float32Array","BYTES_PER_ELEMENT","value","settings","state","externalBuffer","bufferAccessor","allocatedValue","numInstances","bounds","constant","_buffer","setData","target","getAccessor","n","delete","release","getShaderAttributes","options","isBuffer64Bit","Float64Array","doubleShaderAttributeDefs","shaderAttributeDef","getBuffer","getValue","getBounds","result","min","slice","len","length","Infinity","max","i","j","v","ArrayBuffer","isView","buffer","_normalizeValue","normalized","_normalizeConstant","hasChanged","_areValuesEqual","_checkExternalBuffer","byteOffset","requiredBufferSize","byteLength","reallocate","setAccessor","subData","data","updateSubBuffer","startOffset","endOffset","startIndex","endIndex","subarray","allocate","copy","oldValue","ArrayType","illegalArrayType","Error","name","warn","map","x","out","start","value1","value2"],"sources":["../../../../src/lib/attribute/data-column.js"],"sourcesContent":["/* eslint-disable complexity */\nimport GL from '@luma.gl/constants';\nimport {hasFeature, FEATURES, Buffer} from '@luma.gl/core';\nimport ShaderAttribute from './shader-attribute';\nimport {glArrayFromType} from './gl-utils';\nimport typedArrayManager from '../../utils/typed-array-manager';\nimport {toDoublePrecisionArray} from '../../utils/math-utils';\nimport log from '../../utils/log';\n\nfunction getStride(accessor) {\n  return accessor.stride || accessor.size * accessor.bytesPerElement;\n}\n\nfunction resolveShaderAttribute(baseAccessor, shaderAttributeOptions) {\n  if (shaderAttributeOptions.offset) {\n    log.removed('shaderAttribute.offset', 'vertexOffset, elementOffset')();\n  }\n\n  // All shader attributes share the parent's stride\n  const stride = getStride(baseAccessor);\n  // `vertexOffset` is used to access the neighboring vertex's value\n  // e.g. `nextPositions` in polygon\n  const vertexOffset =\n    'vertexOffset' in shaderAttributeOptions\n      ? shaderAttributeOptions.vertexOffset\n      : baseAccessor.vertexOffset || 0;\n  // `elementOffset` is defined when shader attribute's size is smaller than the parent's\n  // e.g. `translations` in transform matrix\n  const elementOffset = shaderAttributeOptions.elementOffset || 0;\n  const offset =\n    // offsets defined by the attribute\n    vertexOffset * stride +\n    elementOffset * baseAccessor.bytesPerElement +\n    // offsets defined by external buffers if any\n    (baseAccessor.offset || 0);\n\n  return {\n    ...shaderAttributeOptions,\n    offset,\n    stride\n  };\n}\n\nfunction resolveDoublePrecisionShaderAttributes(baseAccessor, shaderAttributeOptions) {\n  const resolvedOptions = resolveShaderAttribute(baseAccessor, shaderAttributeOptions);\n\n  return {\n    high: resolvedOptions,\n    low: {\n      ...resolvedOptions,\n      offset: resolvedOptions.offset + baseAccessor.size * 4\n    }\n  };\n}\n\nexport default class DataColumn {\n  /* eslint-disable max-statements */\n  constructor(gl, opts) {\n    this.gl = gl;\n    this.id = opts.id;\n    this.size = opts.size;\n\n    const logicalType = opts.logicalType || opts.type;\n    const doublePrecision = logicalType === GL.DOUBLE;\n\n    let {defaultValue} = opts;\n    defaultValue = Number.isFinite(defaultValue)\n      ? [defaultValue]\n      : defaultValue || new Array(this.size).fill(0);\n    opts.defaultValue = defaultValue;\n\n    let bufferType = logicalType;\n    if (doublePrecision) {\n      bufferType = GL.FLOAT;\n    } else if (!bufferType && opts.isIndexed) {\n      bufferType =\n        gl && hasFeature(gl, FEATURES.ELEMENT_INDEX_UINT32) ? GL.UNSIGNED_INT : GL.UNSIGNED_SHORT;\n    } else if (!bufferType) {\n      bufferType = GL.FLOAT;\n    }\n    opts.logicalType = logicalType;\n    opts.type = bufferType;\n\n    // This is the attribute type defined by the layer\n    // If an external buffer is provided, this.type may be overwritten\n    // But we always want to use defaultType for allocation\n    let defaultType = glArrayFromType(logicalType || bufferType || GL.FLOAT);\n    this.shaderAttributes = {};\n    this.doublePrecision = doublePrecision;\n\n    // `fp64: false` tells a double-precision attribute to allocate Float32Arrays\n    // by default when using auto-packing. This is more efficient in use cases where\n    // high precision is unnecessary, but the `64Low` attribute is still required\n    // by the shader.\n    if (doublePrecision && opts.fp64 === false) {\n      defaultType = Float32Array;\n    }\n    opts.bytesPerElement = defaultType.BYTES_PER_ELEMENT;\n\n    this.defaultType = defaultType;\n    this.value = null;\n    this.settings = opts;\n    this.state = {\n      externalBuffer: null,\n      bufferAccessor: opts,\n      allocatedValue: null,\n      numInstances: 0,\n      bounds: null,\n      constant: false\n    };\n    this._buffer = null;\n\n    this.setData(opts);\n  }\n  /* eslint-enable max-statements */\n\n  get buffer() {\n    if (!this._buffer) {\n      const {isIndexed, type} = this.settings;\n      this._buffer = new Buffer(this.gl, {\n        id: this.id,\n        target: isIndexed ? GL.ELEMENT_ARRAY_BUFFER : GL.ARRAY_BUFFER,\n        accessor: {type}\n      });\n    }\n    return this._buffer;\n  }\n\n  get byteOffset() {\n    const accessor = this.getAccessor();\n    if (accessor.vertexOffset) {\n      return accessor.vertexOffset * getStride(accessor);\n    }\n    return 0;\n  }\n\n  get numInstances() {\n    return this.state.numInstances;\n  }\n\n  set numInstances(n) {\n    this.state.numInstances = n;\n  }\n\n  delete() {\n    if (this._buffer) {\n      this._buffer.delete();\n      this._buffer = null;\n    }\n    typedArrayManager.release(this.state.allocatedValue);\n  }\n\n  getShaderAttributes(id, options) {\n    if (this.doublePrecision) {\n      const shaderAttributes = {};\n      const isBuffer64Bit = this.value instanceof Float64Array;\n\n      const doubleShaderAttributeDefs = resolveDoublePrecisionShaderAttributes(\n        this.getAccessor(),\n        options || {}\n      );\n\n      shaderAttributes[id] = new ShaderAttribute(this, doubleShaderAttributeDefs.high);\n      shaderAttributes[`${id}64Low`] = isBuffer64Bit\n        ? new ShaderAttribute(this, doubleShaderAttributeDefs.low)\n        : new Float32Array(this.size); // use constant for low part if buffer is 32-bit\n      return shaderAttributes;\n    }\n    if (options) {\n      const shaderAttributeDef = resolveShaderAttribute(this.getAccessor(), options);\n      return {[id]: new ShaderAttribute(this, shaderAttributeDef)};\n    }\n    return {[id]: this};\n  }\n\n  getBuffer() {\n    if (this.state.constant) {\n      return null;\n    }\n    return this.state.externalBuffer || this._buffer;\n  }\n\n  getValue() {\n    if (this.state.constant) {\n      return this.value;\n    }\n    return [this.getBuffer(), this.getAccessor()];\n  }\n\n  getAccessor() {\n    return this.state.bufferAccessor;\n  }\n\n  // Returns [min: Array(size), max: Array(size)]\n  /* eslint-disable max-depth */\n  getBounds() {\n    if (this.state.bounds) {\n      return this.state.bounds;\n    }\n    let result = null;\n    if (this.state.constant) {\n      const min = this.value.slice();\n      result = [min, min];\n    } else {\n      const {value, numInstances, size} = this;\n      const len = numInstances * size;\n      if (value && len && value.length >= len) {\n        const min = new Array(size).fill(Infinity);\n        const max = new Array(size).fill(-Infinity);\n        for (let i = 0; i < len; ) {\n          for (let j = 0; j < size; j++) {\n            const v = value[i++];\n            if (v < min[j]) min[j] = v;\n            if (v > max[j]) max[j] = v;\n          }\n        }\n        result = [min, max];\n      }\n    }\n    this.state.bounds = result;\n    return result;\n  }\n\n  // returns true if success\n  // eslint-disable-next-line max-statements\n  setData(opts) {\n    const {state} = this;\n    if (ArrayBuffer.isView(opts)) {\n      opts = {value: opts};\n    } else if (opts instanceof Buffer) {\n      opts = {buffer: opts};\n    }\n\n    const accessor = {...this.settings, ...opts};\n    state.bufferAccessor = accessor;\n    state.bounds = null; // clear cached bounds\n\n    if (opts.constant) {\n      // set constant\n      let value = opts.value;\n      value = this._normalizeValue(value, [], 0);\n      if (this.settings.normalized) {\n        value = this._normalizeConstant(value);\n      }\n      const hasChanged = !state.constant || !this._areValuesEqual(value, this.value);\n\n      if (!hasChanged) {\n        return false;\n      }\n      state.externalBuffer = null;\n      state.constant = true;\n      this.value = value;\n    } else if (opts.buffer) {\n      const buffer = opts.buffer;\n      state.externalBuffer = buffer;\n      state.constant = false;\n      this.value = opts.value;\n      const isBuffer64Bit = opts.value instanceof Float64Array;\n\n      // Copy the type of the buffer into the accessor\n      accessor.type = opts.type || buffer.accessor.type;\n      accessor.bytesPerElement = buffer.accessor.BYTES_PER_ELEMENT * (isBuffer64Bit ? 2 : 1);\n      accessor.stride = getStride(accessor);\n    } else if (opts.value) {\n      this._checkExternalBuffer(opts);\n\n      let value = opts.value;\n      state.externalBuffer = null;\n      state.constant = false;\n      this.value = value;\n\n      accessor.bytesPerElement = value.BYTES_PER_ELEMENT;\n      accessor.stride = getStride(accessor);\n\n      const {buffer, byteOffset} = this;\n\n      if (this.doublePrecision && value instanceof Float64Array) {\n        value = toDoublePrecisionArray(value, accessor);\n      }\n\n      // A small over allocation is used as safety margin\n      // Shader attributes may try to access this buffer with bigger offsets\n      const requiredBufferSize = value.byteLength + byteOffset + accessor.stride * 2;\n      if (buffer.byteLength < requiredBufferSize) {\n        buffer.reallocate(requiredBufferSize);\n      }\n      // Hack: force Buffer to infer data type\n      buffer.setAccessor(null);\n      buffer.subData({data: value, offset: byteOffset});\n      accessor.type = opts.type || buffer.accessor.type;\n    }\n\n    return true;\n  }\n\n  updateSubBuffer(opts = {}) {\n    this.state.bounds = null; // clear cached bounds\n\n    const {value} = this;\n    const {startOffset = 0, endOffset} = opts;\n    this.buffer.subData({\n      data:\n        this.doublePrecision && value instanceof Float64Array\n          ? toDoublePrecisionArray(value, {\n              size: this.size,\n              startIndex: startOffset,\n              endIndex: endOffset\n            })\n          : value.subarray(startOffset, endOffset),\n      offset: startOffset * value.BYTES_PER_ELEMENT + this.byteOffset\n    });\n  }\n\n  allocate({numInstances, copy = false}) {\n    const {state} = this;\n    const oldValue = state.allocatedValue;\n\n    // Allocate at least one element to ensure a valid buffer\n    const value = typedArrayManager.allocate(oldValue, numInstances + 1, {\n      size: this.size,\n      type: this.defaultType,\n      copy\n    });\n\n    this.value = value;\n\n    const {buffer, byteOffset} = this;\n\n    if (buffer.byteLength < value.byteLength + byteOffset) {\n      buffer.reallocate(value.byteLength + byteOffset);\n\n      if (copy && oldValue) {\n        // Upload the full existing attribute value to the GPU, so that updateBuffer\n        // can choose to only update a partial range.\n        // TODO - copy old buffer to new buffer on the GPU\n        buffer.subData({\n          data:\n            oldValue instanceof Float64Array ? toDoublePrecisionArray(oldValue, this) : oldValue,\n          offset: byteOffset\n        });\n      }\n    }\n\n    state.allocatedValue = value;\n    state.constant = false;\n    state.externalBuffer = null;\n    state.bufferAccessor = this.settings;\n    return true;\n  }\n\n  // PRIVATE HELPER METHODS\n  _checkExternalBuffer(opts) {\n    const {value} = opts;\n    if (!opts.constant && value) {\n      const ArrayType = this.defaultType;\n\n      let illegalArrayType = false;\n      if (this.doublePrecision) {\n        // not 32bit or 64bit\n        illegalArrayType = value.BYTES_PER_ELEMENT < 4;\n      }\n      if (illegalArrayType) {\n        throw new Error(`Attribute ${this.id} does not support ${value.constructor.name}`);\n      }\n      if (!(value instanceof ArrayType) && this.settings.normalized && !('normalized' in opts)) {\n        log.warn(`Attribute ${this.id} is normalized`)();\n      }\n    }\n  }\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer\n  _normalizeConstant(value) {\n    switch (this.settings.type) {\n      case GL.BYTE:\n        // normalize [-128, 127] to [-1, 1]\n        return new Float32Array(value).map(x => ((x + 128) / 255) * 2 - 1);\n\n      case GL.SHORT:\n        // normalize [-32768, 32767] to [-1, 1]\n        return new Float32Array(value).map(x => ((x + 32768) / 65535) * 2 - 1);\n\n      case GL.UNSIGNED_BYTE:\n        // normalize [0, 255] to [0, 1]\n        return new Float32Array(value).map(x => x / 255);\n\n      case GL.UNSIGNED_SHORT:\n        // normalize [0, 65535] to [0, 1]\n        return new Float32Array(value).map(x => x / 65535);\n\n      default:\n        // No normalization for gl.FLOAT and gl.HALF_FLOAT\n        return value;\n    }\n  }\n\n  /* check user supplied values and apply fallback */\n  _normalizeValue(value, out, start) {\n    const {defaultValue, size} = this.settings;\n\n    if (Number.isFinite(value)) {\n      out[start] = value;\n      return out;\n    }\n    if (!value) {\n      out[start] = defaultValue[0];\n      return out;\n    }\n\n    // Important - switch cases are 5x more performant than a for loop!\n    /* eslint-disable no-fallthrough, default-case */\n    switch (size) {\n      case 4:\n        out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];\n      case 3:\n        out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];\n      case 2:\n        out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];\n      case 1:\n        out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];\n        break;\n\n      default:\n        // In the rare case where the attribute size > 4, do it the slow way\n        // This is used for e.g. transform matrices\n        let i = size;\n        while (--i >= 0) {\n          out[start + i] = Number.isFinite(value[i]) ? value[i] : defaultValue[i];\n        }\n    }\n\n    return out;\n  }\n\n  _areValuesEqual(value1, value2) {\n    if (!value1 || !value2) {\n      return false;\n    }\n    const {size} = this;\n    for (let i = 0; i < size; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}