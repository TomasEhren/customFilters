{"ast":null,"code":"import _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { CompositeLayer, createIterable } from '@deck.gl/core';\nimport MultiIconLayer from './multi-icon-layer/multi-icon-layer';\nimport FontAtlasManager, { DEFAULT_CHAR_SET, DEFAULT_FONT_FAMILY, DEFAULT_FONT_WEIGHT, DEFAULT_FONT_SIZE, DEFAULT_BUFFER, DEFAULT_RADIUS, DEFAULT_CUTOFF, setFontAtlasCacheLimit } from './font-atlas-manager';\nimport { transformParagraph, getTextFromBuffer } from './utils';\nimport TextBackgroundLayer from './text-background-layer/text-background-layer';\nvar DEFAULT_FONT_SETTINGS = {\n  fontSize: DEFAULT_FONT_SIZE,\n  buffer: DEFAULT_BUFFER,\n  sdf: false,\n  radius: DEFAULT_RADIUS,\n  cutoff: DEFAULT_CUTOFF,\n  smoothing: 0.1\n};\nvar TEXT_ANCHOR = {\n  start: 1,\n  middle: 0,\n  end: -1\n};\nvar ALIGNMENT_BASELINE = {\n  top: 1,\n  center: 0,\n  bottom: -1\n};\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar DEFAULT_LINE_HEIGHT = 1.0;\nvar FONT_SETTINGS_PROPS = ['fontSize', 'buffer', 'sdf', 'radius', 'cutoff'];\nvar defaultProps = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n  background: false,\n  getBackgroundColor: {\n    type: 'accessor',\n    value: [255, 255, 255, 255]\n  },\n  getBorderColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getBorderWidth: {\n    type: 'accessor',\n    value: 0\n  },\n  backgroundPadding: {\n    type: 'array',\n    value: [0, 0, 0, 0]\n  },\n  characterSet: {\n    type: 'object',\n    value: DEFAULT_CHAR_SET\n  },\n  fontFamily: DEFAULT_FONT_FAMILY,\n  fontWeight: DEFAULT_FONT_WEIGHT,\n  lineHeight: DEFAULT_LINE_HEIGHT,\n  outlineWidth: {\n    type: 'number',\n    value: 0,\n    min: 0\n  },\n  outlineColor: {\n    type: 'color',\n    value: DEFAULT_COLOR\n  },\n  fontSettings: {},\n  wordBreak: 'break-word',\n  maxWidth: {\n    type: 'number',\n    value: -1\n  },\n  getText: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.text;\n    }\n  },\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getSize: {\n    type: 'accessor',\n    value: 32\n  },\n  getAngle: {\n    type: 'accessor',\n    value: 0\n  },\n  getTextAnchor: {\n    type: 'accessor',\n    value: 'middle'\n  },\n  getAlignmentBaseline: {\n    type: 'accessor',\n    value: 'center'\n  },\n  getPixelOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  backgroundColor: {\n    deprecatedFor: ['background', 'getBackgroundColor']\n  }\n};\n\nvar TextLayer = /*#__PURE__*/function (_CompositeLayer) {\n  _inherits(TextLayer, _CompositeLayer);\n\n  var _super = _createSuper(TextLayer);\n\n  function TextLayer() {\n    _classCallCheck(this, TextLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TextLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        styleVersion: 0,\n        fontAtlasManager: new FontAtlasManager()\n      };\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n      var textChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText);\n      var oldCharacterSet = this.state.characterSet;\n\n      if (textChanged) {\n        this._updateText();\n      }\n\n      var fontChanged = oldCharacterSet !== this.state.characterSet || this._fontChanged(oldProps, props);\n\n      if (fontChanged) {\n        this._updateFontAtlas(oldProps, props);\n      }\n\n      var styleChanged = fontChanged || props.lineHeight !== oldProps.lineHeight || props.wordBreak !== oldProps.wordBreak || props.maxWidth !== oldProps.maxWidth;\n\n      if (styleChanged) {\n        this.setState({\n          styleVersion: this.state.styleVersion + 1\n        });\n      }\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref2) {\n      var info = _ref2.info;\n      info.object = info.index >= 0 ? this.props.data[info.index] : null;\n      return info;\n    }\n  }, {\n    key: \"_updateFontAtlas\",\n    value: function _updateFontAtlas(oldProps, props) {\n      var fontSettings = props.fontSettings,\n          fontFamily = props.fontFamily,\n          fontWeight = props.fontWeight;\n      var _this$state = this.state,\n          fontAtlasManager = _this$state.fontAtlasManager,\n          characterSet = _this$state.characterSet;\n      fontAtlasManager.setProps(_objectSpread(_objectSpread(_objectSpread({}, DEFAULT_FONT_SETTINGS), fontSettings), {}, {\n        characterSet: characterSet,\n        fontFamily: fontFamily,\n        fontWeight: fontWeight\n      }));\n    }\n  }, {\n    key: \"_fontChanged\",\n    value: function _fontChanged(oldProps, props) {\n      if (oldProps.fontFamily !== props.fontFamily || oldProps.fontWeight !== props.fontWeight) {\n        return true;\n      }\n\n      if (oldProps.fontSettings === props.fontSettings) {\n        return false;\n      }\n\n      var oldFontSettings = oldProps.fontSettings || {};\n      var fontSettings = props.fontSettings || {};\n      return FONT_SETTINGS_PROPS.some(function (prop) {\n        return oldFontSettings[prop] !== fontSettings[prop];\n      });\n    }\n  }, {\n    key: \"_updateText\",\n    value: function _updateText() {\n      var _this$props = this.props,\n          data = _this$props.data,\n          characterSet = _this$props.characterSet;\n      var textBuffer = data.attributes && data.attributes.getText;\n      var getText = this.props.getText;\n      var startIndices = data.startIndices;\n      var numInstances;\n      var autoCharacterSet = characterSet === 'auto' && new Set();\n\n      if (textBuffer && startIndices) {\n        var _getTextFromBuffer = getTextFromBuffer(_objectSpread(_objectSpread({}, ArrayBuffer.isView(textBuffer) ? {\n          value: textBuffer\n        } : textBuffer), {}, {\n          length: data.length,\n          startIndices: startIndices,\n          characterSet: autoCharacterSet\n        })),\n            texts = _getTextFromBuffer.texts,\n            characterCount = _getTextFromBuffer.characterCount;\n\n        numInstances = characterCount;\n\n        getText = function getText(_, _ref3) {\n          var index = _ref3.index;\n          return texts[index];\n        };\n      } else {\n        var _createIterable = createIterable(data),\n            iterable = _createIterable.iterable,\n            objectInfo = _createIterable.objectInfo;\n\n        startIndices = [0];\n        numInstances = 0;\n\n        var _iterator = _createForOfIteratorHelper(iterable),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var object = _step.value;\n            objectInfo.index++;\n            var text = Array.from(getText(object, objectInfo) || '');\n\n            if (autoCharacterSet) {\n              text.forEach(autoCharacterSet.add, autoCharacterSet);\n            }\n\n            numInstances += text.length;\n            startIndices.push(numInstances);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      this.setState({\n        getText: getText,\n        startIndices: startIndices,\n        numInstances: numInstances,\n        characterSet: autoCharacterSet || characterSet\n      });\n    }\n  }, {\n    key: \"getBoundingRect\",\n    value: function getBoundingRect(object, objectInfo) {\n      var iconMapping = this.state.fontAtlasManager.mapping;\n      var getText = this.state.getText;\n      var _this$props2 = this.props,\n          wordBreak = _this$props2.wordBreak,\n          maxWidth = _this$props2.maxWidth,\n          lineHeight = _this$props2.lineHeight,\n          getTextAnchor = _this$props2.getTextAnchor,\n          getAlignmentBaseline = _this$props2.getAlignmentBaseline;\n      var paragraph = getText(object, objectInfo) || '';\n\n      var _transformParagraph = transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping),\n          _transformParagraph$s = _slicedToArray(_transformParagraph.size, 2),\n          width = _transformParagraph$s[0],\n          height = _transformParagraph$s[1];\n\n      var anchorX = TEXT_ANCHOR[typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor];\n      var anchorY = ALIGNMENT_BASELINE[typeof getAlignmentBaseline === 'function' ? getAlignmentBaseline(object, objectInfo) : getAlignmentBaseline];\n      return [(anchorX - 1) * width / 2, (anchorY - 1) * height / 2, width, height];\n    }\n  }, {\n    key: \"getIconOffsets\",\n    value: function getIconOffsets(object, objectInfo) {\n      var iconMapping = this.state.fontAtlasManager.mapping;\n      var getText = this.state.getText;\n      var _this$props3 = this.props,\n          wordBreak = _this$props3.wordBreak,\n          maxWidth = _this$props3.maxWidth,\n          lineHeight = _this$props3.lineHeight,\n          getTextAnchor = _this$props3.getTextAnchor,\n          getAlignmentBaseline = _this$props3.getAlignmentBaseline;\n      var paragraph = getText(object, objectInfo) || '';\n\n      var _transformParagraph2 = transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping),\n          x = _transformParagraph2.x,\n          y = _transformParagraph2.y,\n          rowWidth = _transformParagraph2.rowWidth,\n          _transformParagraph2$ = _slicedToArray(_transformParagraph2.size, 2),\n          width = _transformParagraph2$[0],\n          height = _transformParagraph2$[1];\n\n      var anchorX = TEXT_ANCHOR[typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor];\n      var anchorY = ALIGNMENT_BASELINE[typeof getAlignmentBaseline === 'function' ? getAlignmentBaseline(object, objectInfo) : getAlignmentBaseline];\n      var numCharacters = x.length;\n      var offsets = new Array(numCharacters * 2);\n      var index = 0;\n\n      for (var i = 0; i < numCharacters; i++) {\n        var rowOffset = (1 - anchorX) * (width - rowWidth[i]) / 2;\n        offsets[index++] = (anchorX - 1) * width / 2 + rowOffset + x[i];\n        offsets[index++] = (anchorY - 1) * height / 2 + y[i];\n      }\n\n      return offsets;\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$state2 = this.state,\n          startIndices = _this$state2.startIndices,\n          numInstances = _this$state2.numInstances,\n          getText = _this$state2.getText,\n          _this$state2$fontAtla = _this$state2.fontAtlasManager,\n          scale = _this$state2$fontAtla.scale,\n          texture = _this$state2$fontAtla.texture,\n          mapping = _this$state2$fontAtla.mapping,\n          styleVersion = _this$state2.styleVersion;\n      var _this$props4 = this.props,\n          data = _this$props4.data,\n          _dataDiff = _this$props4._dataDiff,\n          getPosition = _this$props4.getPosition,\n          getColor = _this$props4.getColor,\n          getSize = _this$props4.getSize,\n          getAngle = _this$props4.getAngle,\n          getPixelOffset = _this$props4.getPixelOffset,\n          getBackgroundColor = _this$props4.getBackgroundColor,\n          getBorderColor = _this$props4.getBorderColor,\n          getBorderWidth = _this$props4.getBorderWidth,\n          backgroundPadding = _this$props4.backgroundPadding,\n          background = _this$props4.background,\n          billboard = _this$props4.billboard,\n          fontSettings = _this$props4.fontSettings,\n          outlineWidth = _this$props4.outlineWidth,\n          outlineColor = _this$props4.outlineColor,\n          sizeScale = _this$props4.sizeScale,\n          sizeUnits = _this$props4.sizeUnits,\n          sizeMinPixels = _this$props4.sizeMinPixels,\n          sizeMaxPixels = _this$props4.sizeMaxPixels,\n          transitions = _this$props4.transitions,\n          updateTriggers = _this$props4.updateTriggers;\n      var CharactersLayerClass = this.getSubLayerClass('characters', MultiIconLayer);\n      var BackgroundLayerClass = this.getSubLayerClass('background', TextBackgroundLayer);\n      return [background && new BackgroundLayerClass({\n        getFillColor: getBackgroundColor,\n        getLineColor: getBorderColor,\n        getLineWidth: getBorderWidth,\n        padding: backgroundPadding,\n        getPosition: getPosition,\n        getSize: getSize,\n        getAngle: getAngle,\n        getPixelOffset: getPixelOffset,\n        billboard: billboard,\n        sizeScale: sizeScale / this.state.fontAtlasManager.props.fontSize,\n        sizeUnits: sizeUnits,\n        sizeMinPixels: sizeMinPixels,\n        sizeMaxPixels: sizeMaxPixels,\n        transitions: transitions && {\n          getPosition: transitions.getPosition,\n          getAngle: transitions.getAngle,\n          getSize: transitions.getSize,\n          getFillColor: transitions.getBackgroundColor,\n          getLineColor: transitions.getBorderColor,\n          getLineWidth: transitions.getBorderWidth,\n          getPixelOffset: transitions.getPixelOffset\n        }\n      }, this.getSubLayerProps({\n        id: 'background',\n        updateTriggers: {\n          getPosition: updateTriggers.getPosition,\n          getAngle: updateTriggers.getAngle,\n          getSize: updateTriggers.getSize,\n          getFillColor: updateTriggers.getBackgroundColor,\n          getLineColor: updateTriggers.getBorderColor,\n          getLineWidth: updateTriggers.getBorderWidth,\n          getPixelOffset: updateTriggers.getPixelOffset,\n          getBoundingRect: {\n            getText: updateTriggers.getText,\n            getTextAnchor: updateTriggers.getTextAnchor,\n            getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n            styleVersion: styleVersion\n          }\n        }\n      }), {\n        data: data.attributes && data.attributes.background ? {\n          length: data.length,\n          attributes: data.attributes.background\n        } : data,\n        _dataDiff: _dataDiff,\n        autoHighlight: false,\n        getBoundingRect: this.getBoundingRect.bind(this)\n      }), new CharactersLayerClass({\n        sdf: fontSettings.sdf,\n        smoothing: Number.isFinite(fontSettings.smoothing) ? fontSettings.smoothing : DEFAULT_FONT_SETTINGS.smoothing,\n        outlineWidth: outlineWidth,\n        outlineColor: outlineColor,\n        iconAtlas: texture,\n        iconMapping: mapping,\n        getPosition: getPosition,\n        getColor: getColor,\n        getSize: getSize,\n        getAngle: getAngle,\n        getPixelOffset: getPixelOffset,\n        billboard: billboard,\n        sizeScale: sizeScale * scale,\n        sizeUnits: sizeUnits,\n        sizeMinPixels: sizeMinPixels * scale,\n        sizeMaxPixels: sizeMaxPixels * scale,\n        transitions: transitions && {\n          getPosition: transitions.getPosition,\n          getAngle: transitions.getAngle,\n          getColor: transitions.getColor,\n          getSize: transitions.getSize,\n          getPixelOffset: transitions.getPixelOffset\n        }\n      }, this.getSubLayerProps({\n        id: 'characters',\n        updateTriggers: {\n          getIcon: updateTriggers.getText,\n          getPosition: updateTriggers.getPosition,\n          getAngle: updateTriggers.getAngle,\n          getColor: updateTriggers.getColor,\n          getSize: updateTriggers.getSize,\n          getPixelOffset: updateTriggers.getPixelOffset,\n          getIconOffsets: {\n            getText: updateTriggers.getText,\n            getTextAnchor: updateTriggers.getTextAnchor,\n            getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n            styleVersion: styleVersion\n          }\n        }\n      }), {\n        data: data,\n        _dataDiff: _dataDiff,\n        startIndices: startIndices,\n        numInstances: numInstances,\n        getIconOffsets: this.getIconOffsets.bind(this),\n        getIcon: getText\n      })];\n    }\n  }], [{\n    key: \"fontAtlasCacheLimit\",\n    set: function set(limit) {\n      setFontAtlasCacheLimit(limit);\n    }\n  }]);\n\n  return TextLayer;\n}(CompositeLayer);\n\nexport { TextLayer as default };\nTextLayer.layerName = 'TextLayer';\nTextLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["CompositeLayer","createIterable","MultiIconLayer","FontAtlasManager","DEFAULT_CHAR_SET","DEFAULT_FONT_FAMILY","DEFAULT_FONT_WEIGHT","DEFAULT_FONT_SIZE","DEFAULT_BUFFER","DEFAULT_RADIUS","DEFAULT_CUTOFF","setFontAtlasCacheLimit","transformParagraph","getTextFromBuffer","TextBackgroundLayer","DEFAULT_FONT_SETTINGS","fontSize","buffer","sdf","radius","cutoff","smoothing","TEXT_ANCHOR","start","middle","end","ALIGNMENT_BASELINE","top","center","bottom","DEFAULT_COLOR","DEFAULT_LINE_HEIGHT","FONT_SETTINGS_PROPS","defaultProps","billboard","sizeScale","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","background","getBackgroundColor","type","value","getBorderColor","getBorderWidth","backgroundPadding","characterSet","fontFamily","fontWeight","lineHeight","outlineWidth","min","outlineColor","fontSettings","wordBreak","maxWidth","getText","x","text","getPosition","position","getColor","getSize","getAngle","getTextAnchor","getAlignmentBaseline","getPixelOffset","backgroundColor","deprecatedFor","TextLayer","initializeState","state","styleVersion","fontAtlasManager","updateState","props","oldProps","changeFlags","textChanged","dataChanged","updateTriggersChanged","all","oldCharacterSet","_updateText","fontChanged","_fontChanged","_updateFontAtlas","styleChanged","setState","getPickingInfo","info","object","index","data","setProps","oldFontSettings","some","prop","textBuffer","attributes","startIndices","numInstances","autoCharacterSet","Set","ArrayBuffer","isView","length","texts","characterCount","_","iterable","objectInfo","Array","from","forEach","add","push","getBoundingRect","iconMapping","mapping","paragraph","size","width","height","anchorX","anchorY","getIconOffsets","y","rowWidth","numCharacters","offsets","i","rowOffset","renderLayers","scale","texture","_dataDiff","transitions","updateTriggers","CharactersLayerClass","getSubLayerClass","BackgroundLayerClass","getFillColor","getLineColor","getLineWidth","padding","getSubLayerProps","id","autoHighlight","bind","isFinite","iconAtlas","getIcon","limit","layerName"],"sources":["../../../src/text-layer/text-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport MultiIconLayer from './multi-icon-layer/multi-icon-layer';\nimport FontAtlasManager, {\n  DEFAULT_CHAR_SET,\n  DEFAULT_FONT_FAMILY,\n  DEFAULT_FONT_WEIGHT,\n  DEFAULT_FONT_SIZE,\n  DEFAULT_BUFFER,\n  DEFAULT_RADIUS,\n  DEFAULT_CUTOFF,\n  setFontAtlasCacheLimit\n} from './font-atlas-manager';\nimport {transformParagraph, getTextFromBuffer} from './utils';\n\nimport TextBackgroundLayer from './text-background-layer/text-background-layer';\n\nconst DEFAULT_FONT_SETTINGS = {\n  fontSize: DEFAULT_FONT_SIZE,\n  buffer: DEFAULT_BUFFER,\n  sdf: false,\n  radius: DEFAULT_RADIUS,\n  cutoff: DEFAULT_CUTOFF,\n  smoothing: 0.1\n};\n\nconst TEXT_ANCHOR = {\n  start: 1,\n  middle: 0,\n  end: -1\n};\n\nconst ALIGNMENT_BASELINE = {\n  top: 1,\n  center: 0,\n  bottom: -1\n};\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst DEFAULT_LINE_HEIGHT = 1.0;\n\nconst FONT_SETTINGS_PROPS = ['fontSize', 'buffer', 'sdf', 'radius', 'cutoff'];\n\nconst defaultProps = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  background: false,\n  getBackgroundColor: {type: 'accessor', value: [255, 255, 255, 255]},\n  getBorderColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getBorderWidth: {type: 'accessor', value: 0},\n  backgroundPadding: {type: 'array', value: [0, 0, 0, 0]},\n\n  characterSet: {type: 'object', value: DEFAULT_CHAR_SET},\n  fontFamily: DEFAULT_FONT_FAMILY,\n  fontWeight: DEFAULT_FONT_WEIGHT,\n  lineHeight: DEFAULT_LINE_HEIGHT,\n  outlineWidth: {type: 'number', value: 0, min: 0},\n  outlineColor: {type: 'color', value: DEFAULT_COLOR},\n  fontSettings: {},\n\n  // auto wrapping options\n  wordBreak: 'break-word',\n  maxWidth: {type: 'number', value: -1},\n\n  getText: {type: 'accessor', value: x => x.text},\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 32},\n  getAngle: {type: 'accessor', value: 0},\n  getTextAnchor: {type: 'accessor', value: 'middle'},\n  getAlignmentBaseline: {type: 'accessor', value: 'center'},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n\n  // deprecated\n  backgroundColor: {deprecatedFor: ['background', 'getBackgroundColor']}\n};\n\nexport default class TextLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      styleVersion: 0,\n      fontAtlasManager: new FontAtlasManager()\n    };\n  }\n\n  // eslint-disable-next-line complexity\n  updateState({props, oldProps, changeFlags}) {\n    const textChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText));\n    const oldCharacterSet = this.state.characterSet;\n\n    if (textChanged) {\n      this._updateText();\n    }\n\n    const fontChanged =\n      oldCharacterSet !== this.state.characterSet || this._fontChanged(oldProps, props);\n\n    if (fontChanged) {\n      this._updateFontAtlas(oldProps, props);\n    }\n\n    const styleChanged =\n      fontChanged ||\n      props.lineHeight !== oldProps.lineHeight ||\n      props.wordBreak !== oldProps.wordBreak ||\n      props.maxWidth !== oldProps.maxWidth;\n\n    if (styleChanged) {\n      this.setState({\n        styleVersion: this.state.styleVersion + 1\n      });\n    }\n  }\n\n  getPickingInfo({info}) {\n    // because `TextLayer` assign the same pickingInfoIndex for one text label,\n    // here info.index refers the index of text label in props.data\n    info.object = info.index >= 0 ? this.props.data[info.index] : null;\n    return info;\n  }\n\n  _updateFontAtlas(oldProps, props) {\n    const {fontSettings, fontFamily, fontWeight} = props;\n\n    // generate test characterSet\n    const {fontAtlasManager, characterSet} = this.state;\n    fontAtlasManager.setProps({\n      ...DEFAULT_FONT_SETTINGS,\n      ...fontSettings,\n      characterSet,\n      fontFamily,\n      fontWeight\n    });\n  }\n\n  _fontChanged(oldProps, props) {\n    if (oldProps.fontFamily !== props.fontFamily || oldProps.fontWeight !== props.fontWeight) {\n      return true;\n    }\n\n    if (oldProps.fontSettings === props.fontSettings) {\n      return false;\n    }\n\n    const oldFontSettings = oldProps.fontSettings || {};\n    const fontSettings = props.fontSettings || {};\n\n    return FONT_SETTINGS_PROPS.some(prop => oldFontSettings[prop] !== fontSettings[prop]);\n  }\n\n  // Text strings are variable width objects\n  // Count characters and start offsets\n  _updateText() {\n    const {data, characterSet} = this.props;\n    const textBuffer = data.attributes && data.attributes.getText;\n    let {getText} = this.props;\n    let {startIndices} = data;\n    let numInstances;\n\n    const autoCharacterSet = characterSet === 'auto' && new Set();\n\n    if (textBuffer && startIndices) {\n      const {texts, characterCount} = getTextFromBuffer({\n        ...(ArrayBuffer.isView(textBuffer) ? {value: textBuffer} : textBuffer),\n        length: data.length,\n        startIndices,\n        characterSet: autoCharacterSet\n      });\n      numInstances = characterCount;\n      getText = (_, {index}) => texts[index];\n    } else {\n      const {iterable, objectInfo} = createIterable(data);\n      startIndices = [0];\n      numInstances = 0;\n\n      for (const object of iterable) {\n        objectInfo.index++;\n        // Break into an array of characters\n        // When dealing with double-length unicode characters, `str.length` or `str[i]` do not work\n        const text = Array.from(getText(object, objectInfo) || '');\n        if (autoCharacterSet) {\n          text.forEach(autoCharacterSet.add, autoCharacterSet);\n        }\n        numInstances += text.length;\n        startIndices.push(numInstances);\n      }\n    }\n\n    this.setState({\n      getText,\n      startIndices,\n      numInstances,\n      characterSet: autoCharacterSet || characterSet\n    });\n  }\n\n  // Returns the x, y offsets of each character in a text string\n  getBoundingRect(object, objectInfo) {\n    const iconMapping = this.state.fontAtlasManager.mapping;\n    const {getText} = this.state;\n    const {wordBreak, maxWidth, lineHeight, getTextAnchor, getAlignmentBaseline} = this.props;\n\n    const paragraph = getText(object, objectInfo) || '';\n    const {\n      size: [width, height]\n    } = transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping);\n    const anchorX =\n      TEXT_ANCHOR[\n        typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor\n      ];\n    const anchorY =\n      ALIGNMENT_BASELINE[\n        typeof getAlignmentBaseline === 'function'\n          ? getAlignmentBaseline(object, objectInfo)\n          : getAlignmentBaseline\n      ];\n\n    return [((anchorX - 1) * width) / 2, ((anchorY - 1) * height) / 2, width, height];\n  }\n\n  // Returns the x, y, w, h of each text object\n  getIconOffsets(object, objectInfo) {\n    const iconMapping = this.state.fontAtlasManager.mapping;\n    const {getText} = this.state;\n    const {wordBreak, maxWidth, lineHeight, getTextAnchor, getAlignmentBaseline} = this.props;\n\n    const paragraph = getText(object, objectInfo) || '';\n    const {\n      x,\n      y,\n      rowWidth,\n      size: [width, height]\n    } = transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping);\n    const anchorX =\n      TEXT_ANCHOR[\n        typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor\n      ];\n    const anchorY =\n      ALIGNMENT_BASELINE[\n        typeof getAlignmentBaseline === 'function'\n          ? getAlignmentBaseline(object, objectInfo)\n          : getAlignmentBaseline\n      ];\n\n    const numCharacters = x.length;\n    const offsets = new Array(numCharacters * 2);\n    let index = 0;\n\n    for (let i = 0; i < numCharacters; i++) {\n      // For a multi-line object, offset in x-direction needs consider\n      // the row offset in the paragraph and the object offset in the row\n      const rowOffset = ((1 - anchorX) * (width - rowWidth[i])) / 2;\n      offsets[index++] = ((anchorX - 1) * width) / 2 + rowOffset + x[i];\n      offsets[index++] = ((anchorY - 1) * height) / 2 + y[i];\n    }\n    return offsets;\n  }\n\n  renderLayers() {\n    const {\n      startIndices,\n      numInstances,\n      getText,\n      fontAtlasManager: {scale, texture, mapping},\n      styleVersion\n    } = this.state;\n\n    const {\n      data,\n      _dataDiff,\n      getPosition,\n      getColor,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      getBackgroundColor,\n      getBorderColor,\n      getBorderWidth,\n      backgroundPadding,\n      background,\n      billboard,\n      fontSettings,\n      outlineWidth,\n      outlineColor,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      transitions,\n      updateTriggers\n    } = this.props;\n\n    const CharactersLayerClass = this.getSubLayerClass('characters', MultiIconLayer);\n    const BackgroundLayerClass = this.getSubLayerClass('background', TextBackgroundLayer);\n\n    return [\n      background &&\n        new BackgroundLayerClass(\n          {\n            // background props\n            getFillColor: getBackgroundColor,\n            getLineColor: getBorderColor,\n            getLineWidth: getBorderWidth,\n            padding: backgroundPadding,\n\n            // props shared with characters layer\n            getPosition,\n            getSize,\n            getAngle,\n            getPixelOffset,\n            billboard,\n            sizeScale: sizeScale / this.state.fontAtlasManager.props.fontSize,\n            sizeUnits,\n            sizeMinPixels,\n            sizeMaxPixels,\n\n            transitions: transitions && {\n              getPosition: transitions.getPosition,\n              getAngle: transitions.getAngle,\n              getSize: transitions.getSize,\n              getFillColor: transitions.getBackgroundColor,\n              getLineColor: transitions.getBorderColor,\n              getLineWidth: transitions.getBorderWidth,\n              getPixelOffset: transitions.getPixelOffset\n            }\n          },\n          this.getSubLayerProps({\n            id: 'background',\n            updateTriggers: {\n              getPosition: updateTriggers.getPosition,\n              getAngle: updateTriggers.getAngle,\n              getSize: updateTriggers.getSize,\n              getFillColor: updateTriggers.getBackgroundColor,\n              getLineColor: updateTriggers.getBorderColor,\n              getLineWidth: updateTriggers.getBorderWidth,\n              getPixelOffset: updateTriggers.getPixelOffset,\n              getBoundingRect: {\n                getText: updateTriggers.getText,\n                getTextAnchor: updateTriggers.getTextAnchor,\n                getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n                styleVersion\n              }\n            }\n          }),\n          {\n            data:\n              data.attributes && data.attributes.background\n                ? {length: data.length, attributes: data.attributes.background}\n                : data,\n            _dataDiff,\n            // Maintain the same background behavior as <=8.3. Remove in v9?\n            autoHighlight: false,\n            getBoundingRect: this.getBoundingRect.bind(this)\n          }\n        ),\n      new CharactersLayerClass(\n        {\n          sdf: fontSettings.sdf,\n          smoothing: Number.isFinite(fontSettings.smoothing)\n            ? fontSettings.smoothing\n            : DEFAULT_FONT_SETTINGS.smoothing,\n          outlineWidth,\n          outlineColor,\n          iconAtlas: texture,\n          iconMapping: mapping,\n\n          getPosition,\n          getColor,\n          getSize,\n          getAngle,\n          getPixelOffset,\n\n          billboard,\n          sizeScale: sizeScale * scale,\n          sizeUnits,\n          sizeMinPixels: sizeMinPixels * scale,\n          sizeMaxPixels: sizeMaxPixels * scale,\n\n          transitions: transitions && {\n            getPosition: transitions.getPosition,\n            getAngle: transitions.getAngle,\n            getColor: transitions.getColor,\n            getSize: transitions.getSize,\n            getPixelOffset: transitions.getPixelOffset\n          }\n        },\n        this.getSubLayerProps({\n          id: 'characters',\n          updateTriggers: {\n            getIcon: updateTriggers.getText,\n            getPosition: updateTriggers.getPosition,\n            getAngle: updateTriggers.getAngle,\n            getColor: updateTriggers.getColor,\n            getSize: updateTriggers.getSize,\n            getPixelOffset: updateTriggers.getPixelOffset,\n            getIconOffsets: {\n              getText: updateTriggers.getText,\n              getTextAnchor: updateTriggers.getTextAnchor,\n              getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n              styleVersion\n            }\n          }\n        }),\n        {\n          data,\n          _dataDiff,\n          startIndices,\n          numInstances,\n          getIconOffsets: this.getIconOffsets.bind(this),\n          getIcon: getText\n        }\n      )\n    ];\n  }\n\n  static set fontAtlasCacheLimit(limit) {\n    setFontAtlasCacheLimit(limit);\n  }\n}\n\nTextLayer.layerName = 'TextLayer';\nTextLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}