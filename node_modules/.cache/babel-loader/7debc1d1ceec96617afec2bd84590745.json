{"ast":null,"code":"import _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { assertWebGL2Context, withParameters } from '@luma.gl/gltools';\nimport { assert } from '../utils/assert';\nvar GL_DEPTH_BUFFER_BIT = 0x00000100;\nvar GL_STENCIL_BUFFER_BIT = 0x00000400;\nvar GL_COLOR_BUFFER_BIT = 0x00004000;\nvar GL_COLOR = 0x1800;\nvar GL_DEPTH = 0x1801;\nvar GL_STENCIL = 0x1802;\nvar GL_DEPTH_STENCIL = 0x84f9;\nvar ERR_ARGUMENTS = 'clear: bad arguments';\nexport function clear(gl) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$framebuffer = _ref.framebuffer,\n      framebuffer = _ref$framebuffer === void 0 ? null : _ref$framebuffer,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? null : _ref$color,\n      _ref$depth = _ref.depth,\n      depth = _ref$depth === void 0 ? null : _ref$depth,\n      _ref$stencil = _ref.stencil,\n      stencil = _ref$stencil === void 0 ? null : _ref$stencil;\n\n  var parameters = {};\n\n  if (framebuffer) {\n    parameters.framebuffer = framebuffer;\n  }\n\n  var clearFlags = 0;\n\n  if (color) {\n    clearFlags |= GL_COLOR_BUFFER_BIT;\n\n    if (color !== true) {\n      parameters.clearColor = color;\n    }\n  }\n\n  if (depth) {\n    clearFlags |= GL_DEPTH_BUFFER_BIT;\n\n    if (depth !== true) {\n      parameters.clearDepth = depth;\n    }\n  }\n\n  if (stencil) {\n    clearFlags |= GL_STENCIL_BUFFER_BIT;\n\n    if (depth !== true) {\n      parameters.clearStencil = depth;\n    }\n  }\n\n  assert(clearFlags !== 0, ERR_ARGUMENTS);\n  withParameters(gl, parameters, function () {\n    gl.clear(clearFlags);\n  });\n}\nexport function clearBuffer(gl) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$framebuffer = _ref2.framebuffer,\n      framebuffer = _ref2$framebuffer === void 0 ? null : _ref2$framebuffer,\n      _ref2$buffer = _ref2.buffer,\n      buffer = _ref2$buffer === void 0 ? GL_COLOR : _ref2$buffer,\n      _ref2$drawBuffer = _ref2.drawBuffer,\n      drawBuffer = _ref2$drawBuffer === void 0 ? 0 : _ref2$drawBuffer,\n      _ref2$value = _ref2.value,\n      value = _ref2$value === void 0 ? [0, 0, 0, 0] : _ref2$value;\n\n  assertWebGL2Context(gl);\n  withParameters(gl, {\n    framebuffer: framebuffer\n  }, function () {\n    switch (buffer) {\n      case GL_COLOR:\n        switch (value.constructor) {\n          case Int32Array:\n            gl.clearBufferiv(buffer, drawBuffer, value);\n            break;\n\n          case Uint32Array:\n            gl.clearBufferuiv(buffer, drawBuffer, value);\n            break;\n\n          case Float32Array:\n          default:\n            gl.clearBufferfv(buffer, drawBuffer, value);\n        }\n\n        break;\n\n      case GL_DEPTH:\n        gl.clearBufferfv(GL_DEPTH, 0, [value]);\n        break;\n\n      case GL_STENCIL:\n        gl.clearBufferiv(GL_STENCIL, 0, [value]);\n        break;\n\n      case GL_DEPTH_STENCIL:\n        var _value = _slicedToArray(value, 2),\n            depth = _value[0],\n            stencil = _value[1];\n\n        gl.clearBufferfi(GL_DEPTH_STENCIL, 0, depth, stencil);\n        break;\n\n      default:\n        assert(false, ERR_ARGUMENTS);\n    }\n  });\n}","map":{"version":3,"mappings":"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","names":["assertWebGL2Context","withParameters","assert","GL_DEPTH_BUFFER_BIT","GL_STENCIL_BUFFER_BIT","GL_COLOR_BUFFER_BIT","GL_COLOR","GL_DEPTH","GL_STENCIL","GL_DEPTH_STENCIL","ERR_ARGUMENTS","clear","gl","framebuffer","color","depth","stencil","parameters","clearFlags","clearColor","clearDepth","clearStencil","clearBuffer","buffer","drawBuffer","value","constructor","Int32Array","clearBufferiv","Uint32Array","clearBufferuiv","Float32Array","clearBufferfv","clearBufferfi"],"sources":["../../../src/classes/clear.js"],"sourcesContent":["import {assertWebGL2Context, withParameters} from '@luma.gl/gltools';\nimport {assert} from '../utils/assert';\n\n// Should collapse during minification\nconst GL_DEPTH_BUFFER_BIT = 0x00000100;\nconst GL_STENCIL_BUFFER_BIT = 0x00000400;\nconst GL_COLOR_BUFFER_BIT = 0x00004000;\n\nconst GL_COLOR = 0x1800;\nconst GL_DEPTH = 0x1801;\nconst GL_STENCIL = 0x1802;\nconst GL_DEPTH_STENCIL = 0x84f9;\n\n// Should disappear if asserts are removed\nconst ERR_ARGUMENTS = 'clear: bad arguments';\n\n// Optionally clears depth, color and stencil buffers\n/** @type {import('./clear').clear} */\nexport function clear(gl, {framebuffer = null, color = null, depth = null, stencil = null} = {}) {\n  const parameters = {};\n\n  if (framebuffer) {\n    parameters.framebuffer = framebuffer;\n  }\n\n  let clearFlags = 0;\n\n  if (color) {\n    clearFlags |= GL_COLOR_BUFFER_BIT;\n    if (color !== true) {\n      parameters.clearColor = color;\n    }\n  }\n\n  if (depth) {\n    clearFlags |= GL_DEPTH_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearDepth = depth;\n    }\n  }\n\n  if (stencil) {\n    clearFlags |= GL_STENCIL_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearStencil = depth;\n    }\n  }\n\n  assert(clearFlags !== 0, ERR_ARGUMENTS);\n\n  // Temporarily set any clear \"colors\" and call clear\n  withParameters(gl, parameters, () => {\n    gl.clear(clearFlags);\n  });\n}\n\n// WebGL2 - clear a specific drawing buffer\n/** @type {import('./clear').clearBuffer} */\nexport function clearBuffer(\n  gl,\n  {framebuffer = null, buffer = GL_COLOR, drawBuffer = 0, value = [0, 0, 0, 0]} = {}\n) {\n  assertWebGL2Context(gl);\n\n  withParameters(gl, {framebuffer}, () => {\n    // Method selection per OpenGL ES 3 docs\n    switch (buffer) {\n      case GL_COLOR:\n        switch (value.constructor) {\n          case Int32Array:\n            gl.clearBufferiv(buffer, drawBuffer, value);\n            break;\n          case Uint32Array:\n            gl.clearBufferuiv(buffer, drawBuffer, value);\n            break;\n          case Float32Array:\n          default:\n            gl.clearBufferfv(buffer, drawBuffer, value);\n        }\n        break;\n\n      case GL_DEPTH:\n        gl.clearBufferfv(GL_DEPTH, 0, [value]);\n        break;\n\n      case GL_STENCIL:\n        gl.clearBufferiv(GL_STENCIL, 0, [value]);\n        break;\n\n      case GL_DEPTH_STENCIL:\n        const [depth, stencil] = value;\n        gl.clearBufferfi(GL_DEPTH_STENCIL, 0, depth, stencil);\n        break;\n\n      default:\n        assert(false, ERR_ARGUMENTS);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}