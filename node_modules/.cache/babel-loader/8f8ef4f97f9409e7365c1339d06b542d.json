{"ast":null,"code":"import _defineProperty from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nvar _WEBGL2_CONTEXT_POLYF;\n\nimport { assert } from '../utils/assert';\nimport { isWebGL2 } from '../utils/webgl-checks';\nimport { getParameterPolyfill } from './get-parameter-polyfill';\nvar OES_vertex_array_object = 'OES_vertex_array_object';\nvar ANGLE_instanced_arrays = 'ANGLE_instanced_arrays';\nvar WEBGL_draw_buffers = 'WEBGL_draw_buffers';\nvar EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';\nvar EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';\nvar ERR_VAO_NOT_SUPPORTED = 'VertexArray requires WebGL2 or OES_vertex_array_object extension';\n\nfunction getExtensionData(gl, extension) {\n  return {\n    webgl2: isWebGL2(gl),\n    ext: gl.getExtension(extension)\n  };\n}\n\nexport var WEBGL2_CONTEXT_POLYFILLS = (_WEBGL2_CONTEXT_POLYF = {}, _defineProperty(_WEBGL2_CONTEXT_POLYF, OES_vertex_array_object, {\n  meta: {\n    suffix: 'OES'\n  },\n  createVertexArray: function createVertexArray() {\n    assert(false, ERR_VAO_NOT_SUPPORTED);\n  },\n  deleteVertexArray: function deleteVertexArray() {},\n  bindVertexArray: function bindVertexArray() {},\n  isVertexArray: function isVertexArray() {\n    return false;\n  }\n}), _defineProperty(_WEBGL2_CONTEXT_POLYF, ANGLE_instanced_arrays, {\n  meta: {\n    suffix: 'ANGLE'\n  },\n  vertexAttribDivisor: function vertexAttribDivisor(location, divisor) {\n    assert(divisor === 0, 'WebGL instanced rendering not supported');\n  },\n  drawElementsInstanced: function drawElementsInstanced() {},\n  drawArraysInstanced: function drawArraysInstanced() {}\n}), _defineProperty(_WEBGL2_CONTEXT_POLYF, WEBGL_draw_buffers, {\n  meta: {\n    suffix: 'WEBGL'\n  },\n  drawBuffers: function drawBuffers() {\n    assert(false);\n  }\n}), _defineProperty(_WEBGL2_CONTEXT_POLYF, EXT_disjoint_timer_query, {\n  meta: {\n    suffix: 'EXT'\n  },\n  createQuery: function createQuery() {\n    assert(false);\n  },\n  deleteQuery: function deleteQuery() {\n    assert(false);\n  },\n  beginQuery: function beginQuery() {\n    assert(false);\n  },\n  endQuery: function endQuery() {},\n  getQuery: function getQuery(handle, pname) {\n    return this.getQueryObject(handle, pname);\n  },\n  getQueryParameter: function getQueryParameter(handle, pname) {\n    return this.getQueryObject(handle, pname);\n  },\n  getQueryObject: function getQueryObject() {}\n}), _WEBGL2_CONTEXT_POLYF);\nexport var WEBGL2_CONTEXT_OVERRIDES = {\n  readBuffer: function readBuffer(gl, originalFunc, attachment) {\n    if (isWebGL2(gl)) {\n      originalFunc(attachment);\n    } else {}\n  },\n  getVertexAttrib: function getVertexAttrib(gl, originalFunc, location, pname) {\n    var _getExtensionData = getExtensionData(gl, ANGLE_instanced_arrays),\n        webgl2 = _getExtensionData.webgl2,\n        ext = _getExtensionData.ext;\n\n    var result;\n\n    switch (pname) {\n      case 35069:\n        result = !webgl2 ? false : undefined;\n        break;\n\n      case 35070:\n        result = !webgl2 && !ext ? 0 : undefined;\n        break;\n\n      default:\n    }\n\n    return result !== undefined ? result : originalFunc(location, pname);\n  },\n  getProgramParameter: function getProgramParameter(gl, originalFunc, program, pname) {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case 35967:\n          return 35981;\n\n        case 35971:\n          return 0;\n\n        case 35382:\n          return 0;\n\n        default:\n      }\n    }\n\n    return originalFunc(program, pname);\n  },\n  getInternalformatParameter: function getInternalformatParameter(gl, originalFunc, target, format, pname) {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case 32937:\n          return new Int32Array([0]);\n\n        default:\n      }\n    }\n\n    return gl.getInternalformatParameter(target, format, pname);\n  },\n  getTexParameter: function getTexParameter(gl, originalFunc, target, pname) {\n    switch (pname) {\n      case 34046:\n        var extensions = gl.luma.extensions;\n        var ext = extensions[EXT_texture_filter_anisotropic];\n        pname = ext && ext.TEXTURE_MAX_ANISOTROPY_EXT || 34046;\n        break;\n\n      default:\n    }\n\n    return originalFunc(target, pname);\n  },\n  getParameter: getParameterPolyfill,\n  hint: function hint(gl, originalFunc, pname, value) {\n    return originalFunc(pname, value);\n  }\n};","map":{"version":3,"mappings":"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","names":["assert","isWebGL2","getParameterPolyfill","OES_vertex_array_object","ANGLE_instanced_arrays","WEBGL_draw_buffers","EXT_disjoint_timer_query","EXT_texture_filter_anisotropic","ERR_VAO_NOT_SUPPORTED","getExtensionData","gl","extension","webgl2","ext","getExtension","WEBGL2_CONTEXT_POLYFILLS","meta","suffix","createVertexArray","deleteVertexArray","bindVertexArray","isVertexArray","vertexAttribDivisor","location","divisor","drawElementsInstanced","drawArraysInstanced","drawBuffers","createQuery","deleteQuery","beginQuery","endQuery","getQuery","handle","pname","getQueryObject","getQueryParameter","WEBGL2_CONTEXT_OVERRIDES","readBuffer","originalFunc","attachment","getVertexAttrib","result","undefined","getProgramParameter","program","getInternalformatParameter","target","format","Int32Array","getTexParameter","extensions","luma","TEXTURE_MAX_ANISOTROPY_EXT","getParameter","hint","value"],"sources":["../../../src/polyfill/polyfill-table.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {assert} from '../utils/assert';\nimport {isWebGL2} from '../utils/webgl-checks';\n\nimport {getParameterPolyfill} from './get-parameter-polyfill';\n\nconst OES_vertex_array_object = 'OES_vertex_array_object';\nconst ANGLE_instanced_arrays = 'ANGLE_instanced_arrays';\nconst WEBGL_draw_buffers = 'WEBGL_draw_buffers';\nconst EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';\nconst EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';\n\nconst ERR_VAO_NOT_SUPPORTED = 'VertexArray requires WebGL2 or OES_vertex_array_object extension';\n\n// Return object with webgl2 flag and an extension\nfunction getExtensionData(gl, extension) {\n  return {\n    webgl2: isWebGL2(gl),\n    ext: gl.getExtension(extension)\n  };\n}\n\n// function mapExtensionConstant(gl, constant) {\n//   switch (constant) {\n//   case ext.FRAGMENT_SHADER_DERIVATIVE_HINT_OES: return GL.FRAGMENT_SHADER_DERIVATIVE_HINT;\n//   }\n// }\n\nexport const WEBGL2_CONTEXT_POLYFILLS = {\n  // POLYFILL TABLE\n  [OES_vertex_array_object]: {\n    meta: {suffix: 'OES'},\n    // NEW METHODS\n    createVertexArray: () => {\n      assert(false, ERR_VAO_NOT_SUPPORTED);\n    },\n    deleteVertexArray: () => {},\n    bindVertexArray: () => {},\n    isVertexArray: () => false\n  },\n  [ANGLE_instanced_arrays]: {\n    meta: {\n      suffix: 'ANGLE'\n      // constants: {\n      //   VERTEX_ATTRIB_ARRAY_DIVISOR: 'VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE'\n      // }\n    },\n    vertexAttribDivisor(location, divisor) {\n      // Accept divisor 0 even if instancing is not supported (0 = no instancing)\n      assert(divisor === 0, 'WebGL instanced rendering not supported');\n    },\n    drawElementsInstanced: () => {},\n    drawArraysInstanced: () => {}\n  },\n  [WEBGL_draw_buffers]: {\n    meta: {\n      suffix: 'WEBGL'\n    },\n    drawBuffers: () => {\n      assert(false);\n    }\n  },\n  [EXT_disjoint_timer_query]: {\n    meta: {suffix: 'EXT'},\n    // WebGL1: Polyfills the WebGL2 Query API\n    createQuery: () => {\n      assert(false);\n    },\n    deleteQuery: () => {\n      assert(false);\n    },\n    beginQuery: () => {\n      assert(false);\n    },\n    endQuery: () => {},\n    getQuery(handle, pname) {\n      // @ts-ignore\n      return this.getQueryObject(handle, pname);\n    },\n    // The WebGL1 extension uses getQueryObject rather then getQueryParameter\n    getQueryParameter(handle, pname) {\n      // @ts-ignore\n      return this.getQueryObject(handle, pname);\n    },\n    getQueryObject: () => {}\n  }\n};\n\nexport const WEBGL2_CONTEXT_OVERRIDES = {\n  // Ensure readBuffer is a no-op\n  readBuffer: (gl, originalFunc, attachment) => {\n    if (isWebGL2(gl)) {\n      originalFunc(attachment);\n    } else {\n      // assert(attachment !== GL_COLOR_ATTACHMENT0 && attachment !== GL_FRONT);\n    }\n  },\n  // Override for getVertexAttrib that returns sane values for non-WebGL1 constants\n  getVertexAttrib: (gl, originalFunc, location, pname) => {\n    // const gl = this; // eslint-disable-line\n    const {webgl2, ext} = getExtensionData(gl, ANGLE_instanced_arrays);\n\n    let result;\n    switch (pname) {\n      // WebGL1 attributes will never be integer\n      case GL.VERTEX_ATTRIB_ARRAY_INTEGER:\n        result = !webgl2 ? false : undefined;\n        break;\n      // if instancing is not available, return 0 meaning divisor has not been set\n      case GL.VERTEX_ATTRIB_ARRAY_DIVISOR:\n        result = !webgl2 && !ext ? 0 : undefined;\n        break;\n      default:\n    }\n\n    return result !== undefined ? result : originalFunc(location, pname);\n  },\n  // Handle transform feedback and uniform block queries in WebGL1\n  getProgramParameter: (gl, originalFunc, program, pname) => {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case GL.TRANSFORM_FEEDBACK_BUFFER_MODE:\n          return GL.SEPARATE_ATTRIBS;\n        case GL.TRANSFORM_FEEDBACK_VARYINGS:\n          return 0;\n        case GL.ACTIVE_UNIFORM_BLOCKS:\n          return 0;\n        default:\n      }\n    }\n    return originalFunc(program, pname);\n  },\n  getInternalformatParameter: (gl, originalFunc, target, format, pname) => {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case GL.SAMPLES:\n          return new Int32Array([0]);\n        default:\n      }\n    }\n    return gl.getInternalformatParameter(target, format, pname);\n  },\n  getTexParameter(gl, originalFunc, target, pname) {\n    switch (pname) {\n      case GL.TEXTURE_MAX_ANISOTROPY_EXT:\n        const {extensions} = gl.luma;\n        const ext = extensions[EXT_texture_filter_anisotropic];\n        pname = (ext && ext.TEXTURE_MAX_ANISOTROPY_EXT) || GL.TEXTURE_MAX_ANISOTROPY_EXT;\n        break;\n      default:\n    }\n    return originalFunc(target, pname);\n  },\n  getParameter: getParameterPolyfill,\n  hint(gl, originalFunc, pname, value) {\n    // TODO - handle GL.FRAGMENT_SHADER_DERIVATIVE_HINT:\n    // switch (pname) {\n    // case GL.FRAGMENT_SHADER_DERIVATIVE_HINT:\n    // }\n    return originalFunc(pname, value);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}