{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(makeAttributeIterator);\n\nexport function makeAttributeIterator(values, size) {\n  var ArrayType, element, i, j;\n  return _regeneratorRuntime.wrap(function makeAttributeIterator$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          ArrayType = values.constructor;\n          element = new ArrayType(size);\n          i = 0;\n\n        case 3:\n          if (!(i < values.length)) {\n            _context.next = 10;\n            break;\n          }\n\n          for (j = 0; j < size; j++) {\n            element[j] = element[i + j];\n          }\n\n          _context.next = 7;\n          return element;\n\n        case 7:\n          i += size;\n          _context.next = 3;\n          break;\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"mappings":";;oDAKiBA,qB;;AAAjB,OAAO,SAAUA,qBAAV,CAAgCC,MAAhC,EAA6CC,IAA7C;EAAA;EAAA;IAAA;MAAA;QAAA;UACCC,SADD,GACaF,MAAM,CAACG,WADpB;UAECC,OAFD,GAEW,IAAIF,SAAJ,CAAcD,IAAd,CAFX;UAGII,CAHJ,GAGQ,CAHR;;QAAA;UAAA,MAGWA,CAAC,GAAGL,MAAM,CAACM,MAHtB;YAAA;YAAA;UAAA;;UAIH,KAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGN,IAApB,EAA0BM,CAAC,EAA3B,EAA+B;YAC7BH,OAAO,CAACG,CAAD,CAAPH,GAAaA,OAAO,CAACC,CAAC,GAAGE,CAAL,CAApBH;UACD;;UANE;UAOH,OAAMA,OAAN;;QAPG;UAG8BC,CAAC,IAAIJ,IAHnC;UAAA;UAAA;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA","names":["makeAttributeIterator","values","size","ArrayType","constructor","element","i","length","j"],"sources":["../../../../src/geometry/iterators/attribute-iterator.ts"],"sourcesContent":["/**\n * Iterates over a single attribute\n * NOTE: For performance, re-yields the same modified element\n * @param param0\n */\nexport function* makeAttributeIterator(values: any, size: number): Iterable<any> {\n  const ArrayType = values.constructor;\n  const element = new ArrayType(size);\n  for (let i = 0; i < values.length; i += size) {\n    for (let j = 0; j < size; j++) {\n      element[j] = element[i + j];\n    }\n    yield element;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}