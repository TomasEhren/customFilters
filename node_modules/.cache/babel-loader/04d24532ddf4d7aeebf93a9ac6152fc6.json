{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { assert } from '@loaders.gl/loader-utils';\nimport parseImage from '../parsers/parse-image';\nimport { getImageSize } from '../category-api/parsed-image-api';\nimport { generateUrl } from './generate-url';\nimport { deepLoad, shallowLoad } from './deep-load';\nexport function loadImage(_x) {\n  return _loadImage.apply(this, arguments);\n}\n\nfunction _loadImage() {\n  _loadImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(getUrl) {\n    var options,\n        imageUrls,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            _context.next = 3;\n            return getImageUrls(getUrl, options);\n\n          case 3:\n            imageUrls = _context.sent;\n            _context.next = 6;\n            return deepLoad(imageUrls, parseImage, options);\n\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadImage.apply(this, arguments);\n}\n\nexport function getImageUrls(_x2, _x3) {\n  return _getImageUrls.apply(this, arguments);\n}\n\nfunction _getImageUrls() {\n  _getImageUrls = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(getUrl, options) {\n    var urlOptions,\n        mipLevels,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            urlOptions = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n            mipLevels = options && options.image && options.image.mipLevels || 0;\n\n            if (!(mipLevels !== 0)) {\n              _context2.next = 8;\n              break;\n            }\n\n            _context2.next = 5;\n            return getMipmappedImageUrls(getUrl, mipLevels, options, urlOptions);\n\n          case 5:\n            _context2.t0 = _context2.sent;\n            _context2.next = 9;\n            break;\n\n          case 8:\n            _context2.t0 = generateUrl(getUrl, options, urlOptions);\n\n          case 9:\n            return _context2.abrupt(\"return\", _context2.t0);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getImageUrls.apply(this, arguments);\n}\n\nfunction getMipmappedImageUrls(_x4, _x5, _x6, _x7) {\n  return _getMipmappedImageUrls.apply(this, arguments);\n}\n\nfunction _getMipmappedImageUrls() {\n  _getMipmappedImageUrls = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(getUrl, mipLevels, options, urlOptions) {\n    var urls, url, image, _getImageSize, width, height, mipLevel, _url;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            urls = [];\n\n            if (!(mipLevels === 'auto')) {\n              _context3.next = 9;\n              break;\n            }\n\n            url = generateUrl(getUrl, options, _objectSpread(_objectSpread({}, urlOptions), {}, {\n              lod: 0\n            }));\n            _context3.next = 5;\n            return shallowLoad(url, parseImage, options);\n\n          case 5:\n            image = _context3.sent;\n            _getImageSize = getImageSize(image), width = _getImageSize.width, height = _getImageSize.height;\n            mipLevels = getMipLevels({\n              width: width,\n              height: height\n            });\n            urls.push(url);\n\n          case 9:\n            assert(mipLevels > 0);\n\n            for (mipLevel = urls.length; mipLevel < mipLevels; ++mipLevel) {\n              _url = generateUrl(getUrl, options, _objectSpread(_objectSpread({}, urlOptions), {}, {\n                lod: mipLevel\n              }));\n              urls.push(_url);\n            }\n\n            return _context3.abrupt(\"return\", urls);\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getMipmappedImageUrls.apply(this, arguments);\n}\n\nexport function getMipLevels(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n  return 1 + Math.floor(Math.log2(Math.max(width, height)));\n}","map":{"version":3,"mappings":";;;AAAA,SAAQA,MAAR,QAAqB,0BAArB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,SAAQC,YAAR,QAA2B,kCAA3B;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AACA,SAAQC,QAAR,EAAkBC,WAAlB,QAAoC,aAApC;AAEA,gBAAsBC,SAAtB;EAAA;AAAA;;;wEAAO,iBAAyBC,MAAzB;IAAA;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAAiCC,OAAjC,2DAA2C,EAA3C;YAAA;YAAA,OACmBC,YAAY,CAACF,MAAD,EAASC,OAAT,CAD/B;;UAAA;YACCE,SADD;YAAA;YAAA,OAEQN,QAAQ,CAACM,SAAD,EAAYT,UAAZ,EAAwBO,OAAxB,CAFhB;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAKP,gBAAsBC,YAAtB;EAAA;AAAA;;;2EAAO,kBAA4BF,MAA5B,EAAoCC,OAApC;IAAA;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAA6CG,UAA7C,8DAA0D,EAA1D;YACCC,SADD,GACcJ,OAAO,IAAIA,OAAO,CAACK,KAAnBL,IAA4BA,OAAO,CAACK,KAARL,CAAcI,SAA1CJ,IAAwD,CADtE;;YAAA,MAEEI,SAAS,KAAK,CAFhB;cAAA;cAAA;YAAA;;YAAA;YAAA,OAGKE,qBAAqB,CAACP,MAAD,EAASK,SAAT,EAAoBJ,OAApB,EAA6BG,UAA7B,CAH1B;;UAAA;YAAA;YAAA;YAAA;;UAAA;YAAA,eAIDR,WAAW,CAACI,MAAD,EAASC,OAAT,EAAkBG,UAAlB,CAJV;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;SAOQG,qB;;;;;oFAAf,kBAAqCP,MAArC,EAA6CK,SAA7C,EAAwDJ,OAAxD,EAAiEG,UAAjE;IAAA;;IAAA;MAAA;QAAA;UAAA;YACQI,IADR,GACyB,EADzB;;YAAA,MAIMH,SAAS,KAAK,MAJpB;cAAA;cAAA;YAAA;;YAKUI,GALV,GAKgBb,WAAW,CAACI,MAAD,EAASC,OAAT,kCAAsBG,UAAtB;cAAkCM,GAAG,EAAE;YAAvC,GAL3B;YAAA;YAAA,OAMwBZ,WAAW,CAACW,GAAD,EAAMf,UAAN,EAAkBO,OAAlB,CANnC;;UAAA;YAMUK,KANV;YAAA,gBAQ4BX,YAAY,CAACW,KAAD,CARxC,EAQWK,KARX,iBAQWA,KARX,EAQkBC,MARlB,iBAQkBA,MARlB;YASIP,SAAS,GAAGQ,YAAY,CAAC;cAACF,KAAD,EAACA,KAAD;cAAQC;YAAR,CAAD,CAAxBP;YAGAG,IAAI,CAACM,IAALN,CAAUC,GAAVD;;UAZJ;YAgBEf,MAAM,CAACY,SAAS,GAAG,CAAb,CAANZ;;YAEA,KAASsB,QAAT,GAAoBP,IAAI,CAACQ,MAAzB,EAAiCD,QAAQ,GAAGV,SAA5C,EAAuD,EAAEU,QAAzD,EAAmE;cAC3DN,IAD2D,GACrDb,WAAW,CAACI,MAAD,EAASC,OAAT,kCAAsBG,UAAtB;gBAAkCM,GAAG,EAAEK;cAAvC,GAD0C;cAEjEP,IAAI,CAACM,IAALN,CAAUC,IAAVD;YACD;;YArBH,kCAuBSA,IAvBT;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AA2BA,OAAO,SAASK,YAAT,OAAuC;EAAA,IAAhBF,KAAgB,QAAhBA,KAAgB;EAAA,IAATC,MAAS,QAATA,MAAS;EAC5C,OAAO,IAAIK,IAAI,CAACC,KAALD,CAAWA,IAAI,CAACE,IAALF,CAAUA,IAAI,CAACG,GAALH,CAASN,KAATM,EAAgBL,MAAhBK,CAAVA,CAAXA,CAAX;AACD","names":["assert","parseImage","getImageSize","generateUrl","deepLoad","shallowLoad","loadImage","getUrl","options","getImageUrls","imageUrls","urlOptions","mipLevels","image","getMipmappedImageUrls","urls","url","lod","width","height","getMipLevels","push","mipLevel","length","Math","floor","log2","max"],"sources":["../../../../src/lib/texture-api/load-image.ts"],"sourcesContent":["import {assert} from '@loaders.gl/loader-utils';\nimport parseImage from '../parsers/parse-image';\nimport {getImageSize} from '../category-api/parsed-image-api';\nimport {generateUrl} from './generate-url';\nimport {deepLoad, shallowLoad} from './deep-load';\n\nexport async function loadImage(getUrl, options = {}) {\n  const imageUrls = await getImageUrls(getUrl, options);\n  return await deepLoad(imageUrls, parseImage, options);\n}\n\nexport async function getImageUrls(getUrl, options, urlOptions = {}) {\n  const mipLevels = (options && options.image && options.image.mipLevels) || 0;\n  return mipLevels !== 0\n    ? await getMipmappedImageUrls(getUrl, mipLevels, options, urlOptions)\n    : generateUrl(getUrl, options, urlOptions);\n}\n\nasync function getMipmappedImageUrls(getUrl, mipLevels, options, urlOptions) {\n  const urls: string[] = [];\n\n  // If no mip levels supplied, we need to load the level 0 image and calculate based on size\n  if (mipLevels === 'auto') {\n    const url = generateUrl(getUrl, options, {...urlOptions, lod: 0});\n    const image = await shallowLoad(url, parseImage, options);\n\n    const {width, height} = getImageSize(image);\n    mipLevels = getMipLevels({width, height});\n\n    // TODO - push image and make `deepLoad` pass through non-url values, avoid loading twice?\n    urls.push(url);\n  }\n\n  // We now know how many mipLevels we need, remaining image urls can now be constructed\n  assert(mipLevels > 0);\n\n  for (let mipLevel = urls.length; mipLevel < mipLevels; ++mipLevel) {\n    const url = generateUrl(getUrl, options, {...urlOptions, lod: mipLevel});\n    urls.push(url);\n  }\n\n  return urls;\n}\n\n// Calculates number of mipmaps based on texture size (log2)\nexport function getMipLevels({width, height}) {\n  return 1 + Math.floor(Math.log2(Math.max(width, height)));\n}\n"]},"metadata":{},"sourceType":"module"}