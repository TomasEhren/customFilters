{"ast":null,"code":"import { getAccessorTypeFromSize, getComponentTypeFromArray } from './gltf-utils';\nexport function getGLTFAccessors(attributes) {\n  var accessors = {};\n\n  for (var name in attributes) {\n    var attribute = attributes[name];\n\n    if (name !== 'indices') {\n      var glTFAccessor = getGLTFAccessor(attribute);\n      accessors[name] = glTFAccessor;\n    }\n  }\n\n  return accessors;\n}\nexport function getGLTFAccessor(attribute) {\n  var _getAccessorData = getAccessorData(attribute),\n      buffer = _getAccessorData.buffer,\n      size = _getAccessorData.size,\n      count = _getAccessorData.count;\n\n  var glTFAccessor = {\n    value: buffer,\n    size: size,\n    byteOffset: 0,\n    count: count,\n    type: getAccessorTypeFromSize(size),\n    componentType: getComponentTypeFromArray(buffer)\n  };\n  return glTFAccessor;\n}\n\nfunction getAccessorData(attribute) {\n  var buffer = attribute;\n  var size = 1;\n  var count = 0;\n\n  if (attribute && attribute.value) {\n    buffer = attribute.value;\n    size = attribute.size || 1;\n  }\n\n  if (buffer) {\n    if (!ArrayBuffer.isView(buffer)) {\n      buffer = toTypedArray(buffer, Float32Array);\n    }\n\n    count = buffer.length / size;\n  }\n\n  return {\n    buffer: buffer,\n    size: size,\n    count: count\n  };\n}\n\nfunction toTypedArray(array, ArrayType) {\n  var convertTypedArrays = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (!array) {\n    return null;\n  }\n\n  if (Array.isArray(array)) {\n    return new ArrayType(array);\n  }\n\n  if (convertTypedArrays && !(array instanceof ArrayType)) {\n    return new ArrayType(array);\n  }\n\n  return array;\n}","map":{"version":3,"mappings":"AAGA,SAAQA,uBAAR,EAAiCC,yBAAjC,QAAiE,cAAjE;AAKA,OAAO,SAASC,gBAAT,CAA0BC,UAA1B,EAAqE;EAC1E,IAAMC,SAAS,GAAG,EAAlB;;EACA,KAAK,IAAMC,IAAX,IAAmBF,UAAnB,EAA+B;IAC7B,IAAMG,SAAS,GAAGH,UAAU,CAACE,IAAD,CAA5B;;IACA,IAAIA,IAAI,KAAK,SAAb,EAAwB;MACtB,IAAME,YAAY,GAAGC,eAAe,CAACF,SAAD,CAApC;MACAF,SAAS,CAACC,IAAD,CAATD,GAAkBG,YAAlBH;IACD;EACF;;EACD,OAAOA,SAAP;AACD;AAKD,OAAO,SAASI,eAAT,CAAyBF,SAAzB,EAAoC;EACzC,uBAA8BG,eAAe,CAACH,SAAD,CAA7C;EAAA,IAAOI,MAAP,oBAAOA,MAAP;EAAA,IAAeC,IAAf,oBAAeA,IAAf;EAAA,IAAqBC,KAArB,oBAAqBA,KAArB;;EAEA,IAAML,YAA0B,GAAG;IAMjCM,KAAK,EAAEH,MAN0B;IAOjCC,IAPiC,EAOjCA,IAPiC;IASjCG,UAAU,EAAE,CATqB;IAUjCF,KAViC,EAUjCA,KAViC;IAWjCG,IAAI,EAAEf,uBAAuB,CAACW,IAAD,CAXI;IAYjCK,aAAa,EAAEf,yBAAyB,CAACS,MAAD;EAZP,CAAnC;EAeA,OAAOH,YAAP;AACD;;AAMD,SAASE,eAAT,CAAyBH,SAAzB,EAAoC;EAClC,IAAII,MAAM,GAAGJ,SAAb;EACA,IAAIK,IAAI,GAAG,CAAX;EACA,IAAIC,KAAK,GAAG,CAAZ;;EAEA,IAAIN,SAAS,IAAIA,SAAS,CAACO,KAA3B,EAAkC;IAChCH,MAAM,GAAGJ,SAAS,CAACO,KAAnBH;IACAC,IAAI,GAAGL,SAAS,CAACK,IAAVL,IAAkB,CAAzBK;EACD;;EAED,IAAID,MAAJ,EAAY;IACV,IAAI,CAACO,WAAW,CAACC,MAAZD,CAAmBP,MAAnBO,CAAL,EAAiC;MAC/BP,MAAM,GAAGS,YAAY,CAACT,MAAD,EAASU,YAAT,CAArBV;IACD;;IACDE,KAAK,GAAGF,MAAM,CAACW,MAAPX,GAAgBC,IAAxBC;EACD;;EAED,OAAO;IAACF,MAAD,EAACA,MAAD;IAASC,IAAT,EAASA,IAAT;IAAeC;EAAf,CAAP;AACD;;AAGD,SAASO,YAAT,CAAsBG,KAAtB,EAA6BC,SAA7B,EAAoE;EAAA,IAA5BC,kBAA4B,uEAAP,KAAO;;EAClE,IAAI,CAACF,KAAL,EAAY;IACV,OAAO,IAAP;EACD;;EACD,IAAIG,KAAK,CAACC,OAAND,CAAcH,KAAdG,CAAJ,EAA0B;IACxB,OAAO,IAAIF,SAAJ,CAAcD,KAAd,CAAP;EACD;;EACD,IAAIE,kBAAkB,IAAI,EAAEF,KAAK,YAAYC,SAAnB,CAA1B,EAAyD;IACvD,OAAO,IAAIA,SAAJ,CAAcD,KAAd,CAAP;EACD;;EACD,OAAOA,KAAP;AACD","names":["getAccessorTypeFromSize","getComponentTypeFromArray","getGLTFAccessors","attributes","accessors","name","attribute","glTFAccessor","getGLTFAccessor","getAccessorData","buffer","size","count","value","byteOffset","type","componentType","ArrayBuffer","isView","toTypedArray","Float32Array","length","array","ArrayType","convertTypedArrays","Array","isArray"],"sources":["../../../../src/lib/gltf-utils/gltf-attribute-utils.ts"],"sourcesContent":["// import type {TypedArray} from '../types/loader-utils';\nimport type {GLTFAccessor} from '../types/gltf-types';\n// TODO - remove\nimport {getAccessorTypeFromSize, getComponentTypeFromArray} from './gltf-utils';\n\n// Returns a fresh attributes object with glTF-standardized attributes names\n// Attributes that cannot be identified will not be included\n// Removes `indices` if present, as it should be stored separately from the attributes\nexport function getGLTFAccessors(attributes): {[key: string]: GLTFAccessor} {\n  const accessors = {};\n  for (const name in attributes) {\n    const attribute = attributes[name];\n    if (name !== 'indices') {\n      const glTFAccessor = getGLTFAccessor(attribute);\n      accessors[name] = glTFAccessor;\n    }\n  }\n  return accessors;\n}\n\n// Fix up a single accessor.\n// Input: typed array or a partial accessor object\n// Return: accessor object\nexport function getGLTFAccessor(attribute) {\n  const {buffer, size, count} = getAccessorData(attribute);\n\n  const glTFAccessor: GLTFAccessor = {\n    // glTF Accessor values\n    // TODO: Instead of a bufferView index we could have an actual buffer (typed array)\n    // bufferView: null,\n    // TODO: Deprecate `value` in favor of bufferView?\n    // @ts-ignore\n    value: buffer,\n    size, // Decoded `type` (e.g. SCALAR)\n\n    byteOffset: 0,\n    count,\n    type: getAccessorTypeFromSize(size),\n    componentType: getComponentTypeFromArray(buffer)\n  };\n\n  return glTFAccessor;\n}\n\n// export function getGLTFAttribute(data, gltfAttributeName): GLTFAccessor {\n//   return data.attributes[data.glTFAttributeMap[gltfAttributeName]];\n// }\n\nfunction getAccessorData(attribute) {\n  let buffer = attribute;\n  let size = 1;\n  let count = 0;\n\n  if (attribute && attribute.value) {\n    buffer = attribute.value;\n    size = attribute.size || 1;\n  }\n\n  if (buffer) {\n    if (!ArrayBuffer.isView(buffer)) {\n      buffer = toTypedArray(buffer, Float32Array);\n    }\n    count = buffer.length / size;\n  }\n\n  return {buffer, size, count};\n}\n\n// Convert non-typed arrays to arrays of specified format\nfunction toTypedArray(array, ArrayType, convertTypedArrays = false) {\n  if (!array) {\n    return null;\n  }\n  if (Array.isArray(array)) {\n    return new ArrayType(array);\n  }\n  if (convertTypedArrays && !(array instanceof ArrayType)) {\n    return new ArrayType(array);\n  }\n  return array;\n}\n"]},"metadata":{},"sourceType":"module"}