{"ast":null,"code":"import _defineProperty from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { LineLayer, SolidPolygonLayer } from '@deck.gl/layers';\nimport { generateContours } from './contour-utils';\nimport { log } from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport { AGGREGATION_OPERATION, getValueFunc } from '../utils/aggregation-operation-utils';\nimport { getBoundingBox, getGridParams } from '../utils/grid-aggregation-utils';\nimport GridAggregationLayer from '../grid-aggregation-layer';\nvar DEFAULT_COLOR = [255, 255, 255, 255];\nvar DEFAULT_STROKE_WIDTH = 1;\nvar DEFAULT_THRESHOLD = 1;\nvar defaultProps = {\n  cellSize: {\n    type: 'number',\n    min: 1,\n    max: 1000,\n    value: 1000\n  },\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  gpuAggregation: true,\n  aggregation: 'SUM',\n  contours: [{\n    threshold: DEFAULT_THRESHOLD\n  }],\n  zOffset: 0.005\n};\nvar POSITION_ATTRIBUTE_NAME = 'positions';\nvar DIMENSIONS = {\n  data: {\n    props: ['cellSize']\n  },\n  weights: {\n    props: ['aggregation'],\n    accessors: ['getWeight']\n  }\n};\n\nvar ContourLayer = /*#__PURE__*/function (_GridAggregationLayer) {\n  _inherits(ContourLayer, _GridAggregationLayer);\n\n  var _super = _createSuper(ContourLayer);\n\n  function ContourLayer() {\n    _classCallCheck(this, ContourLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ContourLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var _attributeManager$add;\n\n      _get(_getPrototypeOf(ContourLayer.prototype), \"initializeState\", this).call(this, {\n        dimensions: DIMENSIONS\n      });\n\n      this.setState({\n        contourData: {},\n        projectPoints: false,\n        weights: {\n          count: {\n            size: 1,\n            operation: AGGREGATION_OPERATION.SUM\n          }\n        }\n      });\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add((_attributeManager$add = {}, _defineProperty(_attributeManager$add, POSITION_ATTRIBUTE_NAME, {\n        size: 3,\n        accessor: 'getPosition',\n        type: 5130,\n        fp64: this.use64bitPositions()\n      }), _defineProperty(_attributeManager$add, \"count\", {\n        size: 3,\n        accessor: 'getWeight'\n      }), _attributeManager$add));\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      _get(_getPrototypeOf(ContourLayer.prototype), \"updateState\", this).call(this, opts);\n\n      var contoursChanged = false;\n      var oldProps = opts.oldProps,\n          props = opts.props;\n      var aggregationDirty = this.state.aggregationDirty;\n\n      if (oldProps.contours !== props.contours || oldProps.zOffset !== props.zOffset) {\n        contoursChanged = true;\n\n        this._updateThresholdData(opts.props);\n      }\n\n      if (this.getNumInstances() > 0 && (aggregationDirty || contoursChanged)) {\n        this._generateContours();\n      }\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$state$contourDa = this.state.contourData,\n          contourSegments = _this$state$contourDa.contourSegments,\n          contourPolygons = _this$state$contourDa.contourPolygons;\n      var LinesSubLayerClass = this.getSubLayerClass('lines', LineLayer);\n      var BandsSubLayerClass = this.getSubLayerClass('bands', SolidPolygonLayer);\n      var lineLayer = contourSegments && contourSegments.length > 0 && new LinesSubLayerClass(this.getSubLayerProps({\n        id: 'lines'\n      }), {\n        data: this.state.contourData.contourSegments,\n        getSourcePosition: function getSourcePosition(d) {\n          return d.start;\n        },\n        getTargetPosition: function getTargetPosition(d) {\n          return d.end;\n        },\n        getColor: function getColor(d) {\n          return d.contour.color || DEFAULT_COLOR;\n        },\n        getWidth: function getWidth(d) {\n          return d.contour.strokeWidth || DEFAULT_STROKE_WIDTH;\n        }\n      });\n      var bandsLayer = contourPolygons && contourPolygons.length > 0 && new BandsSubLayerClass(this.getSubLayerProps({\n        id: 'bands'\n      }), {\n        data: this.state.contourData.contourPolygons,\n        getPolygon: function getPolygon(d) {\n          return d.vertices;\n        },\n        getFillColor: function getFillColor(d) {\n          return d.contour.color || DEFAULT_COLOR;\n        }\n      });\n      return [lineLayer, bandsLayer];\n    }\n  }, {\n    key: \"updateAggregationState\",\n    value: function updateAggregationState(opts) {\n      var props = opts.props,\n          oldProps = opts.oldProps;\n      var cellSize = props.cellSize,\n          coordinateSystem = props.coordinateSystem;\n      var viewport = this.context.viewport;\n      var cellSizeChanged = oldProps.cellSize !== cellSize;\n      var gpuAggregation = props.gpuAggregation;\n\n      if (this.state.gpuAggregation !== props.gpuAggregation) {\n        if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.gl)) {\n          log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n          gpuAggregation = false;\n        }\n      }\n\n      var gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n      this.setState({\n        gpuAggregation: gpuAggregation\n      });\n      var dimensions = this.state.dimensions;\n      var positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n      var data = dimensions.data,\n          weights = dimensions.weights;\n      var boundingBox = this.state.boundingBox;\n\n      if (positionsChanged) {\n        boundingBox = getBoundingBox(this.getAttributes(), this.getNumInstances());\n        this.setState({\n          boundingBox: boundingBox\n        });\n      }\n\n      if (positionsChanged || cellSizeChanged) {\n        var _getGridParams = getGridParams(boundingBox, cellSize, viewport, coordinateSystem),\n            gridOffset = _getGridParams.gridOffset,\n            translation = _getGridParams.translation,\n            width = _getGridParams.width,\n            height = _getGridParams.height,\n            numCol = _getGridParams.numCol,\n            numRow = _getGridParams.numRow;\n\n        this.allocateResources(numRow, numCol);\n        this.setState({\n          gridOffset: gridOffset,\n          boundingBox: boundingBox,\n          translation: translation,\n          posOffset: translation.slice(),\n          gridOrigin: [-1 * translation[0], -1 * translation[1]],\n          width: width,\n          height: height,\n          numCol: numCol,\n          numRow: numRow\n        });\n      }\n\n      var aggregationDataDirty = positionsChanged || gpuAggregationChanged || this.isAggregationDirty(opts, {\n        dimension: data,\n        compareAll: gpuAggregation\n      });\n      var aggregationWeightsDirty = this.isAggregationDirty(opts, {\n        dimension: weights\n      });\n\n      if (aggregationWeightsDirty) {\n        this._updateAccessors(opts);\n      }\n\n      if (aggregationDataDirty || aggregationWeightsDirty) {\n        this._resetResults();\n      }\n\n      this.setState({\n        aggregationDataDirty: aggregationDataDirty,\n        aggregationWeightsDirty: aggregationWeightsDirty\n      });\n    }\n  }, {\n    key: \"_updateAccessors\",\n    value: function _updateAccessors(opts) {\n      var _opts$props = opts.props,\n          getWeight = _opts$props.getWeight,\n          aggregation = _opts$props.aggregation,\n          data = _opts$props.data;\n      var count = this.state.weights.count;\n\n      if (count) {\n        count.getWeight = getWeight;\n        count.operation = AGGREGATION_OPERATION[aggregation];\n      }\n\n      this.setState({\n        getValue: getValueFunc(aggregation, getWeight, {\n          data: data\n        })\n      });\n    }\n  }, {\n    key: \"_resetResults\",\n    value: function _resetResults() {\n      var count = this.state.weights.count;\n\n      if (count) {\n        count.aggregationData = null;\n      }\n    }\n  }, {\n    key: \"_generateContours\",\n    value: function _generateContours() {\n      var _this$state = this.state,\n          numCol = _this$state.numCol,\n          numRow = _this$state.numRow,\n          gridOrigin = _this$state.gridOrigin,\n          gridOffset = _this$state.gridOffset,\n          thresholdData = _this$state.thresholdData;\n      var count = this.state.weights.count;\n      var aggregationData = count.aggregationData;\n\n      if (!aggregationData) {\n        aggregationData = count.aggregationBuffer.getData();\n        count.aggregationData = aggregationData;\n      }\n\n      var _GPUGridAggregator$ge = GPUGridAggregator.getCellData({\n        countsData: aggregationData\n      }),\n          cellWeights = _GPUGridAggregator$ge.cellWeights;\n\n      var contourData = generateContours({\n        thresholdData: thresholdData,\n        cellWeights: cellWeights,\n        gridSize: [numCol, numRow],\n        gridOrigin: gridOrigin,\n        cellSize: [gridOffset.xOffset, gridOffset.yOffset]\n      });\n      this.setState({\n        contourData: contourData\n      });\n    }\n  }, {\n    key: \"_updateThresholdData\",\n    value: function _updateThresholdData(props) {\n      var contours = props.contours,\n          zOffset = props.zOffset;\n      var count = contours.length;\n      var thresholdData = new Array(count);\n\n      for (var i = 0; i < count; i++) {\n        var contour = contours[i];\n        thresholdData[i] = {\n          contour: contour,\n          zIndex: contour.zIndex || i,\n          zOffset: zOffset\n        };\n      }\n\n      this.setState({\n        thresholdData: thresholdData\n      });\n    }\n  }]);\n\n  return ContourLayer;\n}(GridAggregationLayer);\n\nexport { ContourLayer as default };\nContourLayer.layerName = 'ContourLayer';\nContourLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["LineLayer","SolidPolygonLayer","generateContours","log","GPUGridAggregator","AGGREGATION_OPERATION","getValueFunc","getBoundingBox","getGridParams","GridAggregationLayer","DEFAULT_COLOR","DEFAULT_STROKE_WIDTH","DEFAULT_THRESHOLD","defaultProps","cellSize","type","min","max","value","getPosition","x","position","getWeight","gpuAggregation","aggregation","contours","threshold","zOffset","POSITION_ATTRIBUTE_NAME","DIMENSIONS","data","props","weights","accessors","ContourLayer","initializeState","dimensions","setState","contourData","projectPoints","count","size","operation","SUM","attributeManager","getAttributeManager","add","accessor","fp64","use64bitPositions","updateState","opts","contoursChanged","oldProps","aggregationDirty","state","_updateThresholdData","getNumInstances","_generateContours","renderLayers","contourSegments","contourPolygons","LinesSubLayerClass","getSubLayerClass","BandsSubLayerClass","lineLayer","length","getSubLayerProps","id","getSourcePosition","d","start","getTargetPosition","end","getColor","contour","color","getWidth","strokeWidth","bandsLayer","getPolygon","vertices","getFillColor","updateAggregationState","coordinateSystem","viewport","context","cellSizeChanged","isSupported","gl","warn","gpuAggregationChanged","positionsChanged","isAttributeChanged","boundingBox","getAttributes","gridOffset","translation","width","height","numCol","numRow","allocateResources","posOffset","slice","gridOrigin","aggregationDataDirty","isAggregationDirty","dimension","compareAll","aggregationWeightsDirty","_updateAccessors","_resetResults","getValue","aggregationData","thresholdData","aggregationBuffer","getData","getCellData","countsData","cellWeights","gridSize","xOffset","yOffset","Array","i","zIndex","layerName"],"sources":["../../../src/contour-layer/contour-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {LineLayer, SolidPolygonLayer} from '@deck.gl/layers';\nimport {generateContours} from './contour-utils';\nimport {log} from '@deck.gl/core';\n\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION, getValueFunc} from '../utils/aggregation-operation-utils';\nimport {getBoundingBox, getGridParams} from '../utils/grid-aggregation-utils';\nimport GridAggregationLayer from '../grid-aggregation-layer';\n\nconst DEFAULT_COLOR = [255, 255, 255, 255];\nconst DEFAULT_STROKE_WIDTH = 1;\nconst DEFAULT_THRESHOLD = 1;\n\nconst defaultProps = {\n  // grid aggregation\n  cellSize: {type: 'number', min: 1, max: 1000, value: 1000},\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: 1},\n  gpuAggregation: true,\n  aggregation: 'SUM',\n\n  // contour lines\n  contours: [{threshold: DEFAULT_THRESHOLD}],\n\n  zOffset: 0.005\n};\n\nconst POSITION_ATTRIBUTE_NAME = 'positions';\n\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSize']\n  },\n  weights: {\n    props: ['aggregation'],\n    accessors: ['getWeight']\n  }\n};\n\nexport default class ContourLayer extends GridAggregationLayer {\n  initializeState() {\n    super.initializeState({\n      dimensions: DIMENSIONS\n    });\n    this.setState({\n      contourData: {},\n      projectPoints: false,\n      weights: {\n        count: {\n          size: 1,\n          operation: AGGREGATION_OPERATION.SUM\n        }\n      }\n    });\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions()\n      },\n      // this attribute is used in gpu aggregation path only\n      count: {size: 3, accessor: 'getWeight'}\n    });\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n    let contoursChanged = false;\n    const {oldProps, props} = opts;\n    const {aggregationDirty} = this.state;\n\n    if (oldProps.contours !== props.contours || oldProps.zOffset !== props.zOffset) {\n      contoursChanged = true;\n      this._updateThresholdData(opts.props);\n    }\n\n    if (this.getNumInstances() > 0 && (aggregationDirty || contoursChanged)) {\n      this._generateContours();\n    }\n  }\n\n  renderLayers() {\n    const {contourSegments, contourPolygons} = this.state.contourData;\n\n    const LinesSubLayerClass = this.getSubLayerClass('lines', LineLayer);\n    const BandsSubLayerClass = this.getSubLayerClass('bands', SolidPolygonLayer);\n\n    // Contour lines layer\n    const lineLayer =\n      contourSegments &&\n      contourSegments.length > 0 &&\n      new LinesSubLayerClass(\n        this.getSubLayerProps({\n          id: 'lines'\n        }),\n        {\n          data: this.state.contourData.contourSegments,\n          getSourcePosition: d => d.start,\n          getTargetPosition: d => d.end,\n          getColor: d => d.contour.color || DEFAULT_COLOR,\n          getWidth: d => d.contour.strokeWidth || DEFAULT_STROKE_WIDTH\n        }\n      );\n\n    // Contour bands layer\n    const bandsLayer =\n      contourPolygons &&\n      contourPolygons.length > 0 &&\n      new BandsSubLayerClass(\n        this.getSubLayerProps({\n          id: 'bands'\n        }),\n        {\n          data: this.state.contourData.contourPolygons,\n          getPolygon: d => d.vertices,\n          getFillColor: d => d.contour.color || DEFAULT_COLOR\n        }\n      );\n\n    return [lineLayer, bandsLayer];\n  }\n\n  // Aggregation Overrides\n\n  /* eslint-disable max-statements, complexity */\n  updateAggregationState(opts) {\n    const {props, oldProps} = opts;\n    const {cellSize, coordinateSystem} = props;\n    const {viewport} = this.context;\n    const cellSizeChanged = oldProps.cellSize !== cellSize;\n    let gpuAggregation = props.gpuAggregation;\n    if (this.state.gpuAggregation !== props.gpuAggregation) {\n      if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.gl)) {\n        log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n        gpuAggregation = false;\n      }\n    }\n    const gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n    this.setState({\n      gpuAggregation\n    });\n\n    const {dimensions} = this.state;\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n    const {data, weights} = dimensions;\n\n    let {boundingBox} = this.state;\n    if (positionsChanged) {\n      boundingBox = getBoundingBox(this.getAttributes(), this.getNumInstances());\n      this.setState({boundingBox});\n    }\n    if (positionsChanged || cellSizeChanged) {\n      const {gridOffset, translation, width, height, numCol, numRow} = getGridParams(\n        boundingBox,\n        cellSize,\n        viewport,\n        coordinateSystem\n      );\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        gridOffset,\n        boundingBox,\n        translation,\n        posOffset: translation.slice(), // Used for CPU aggregation, to offset points\n        gridOrigin: [-1 * translation[0], -1 * translation[1]],\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n\n    const aggregationDataDirty =\n      positionsChanged ||\n      gpuAggregationChanged ||\n      this.isAggregationDirty(opts, {\n        dimension: data,\n        compareAll: gpuAggregation // check for all (including extentions props) when using gpu aggregation\n      });\n    const aggregationWeightsDirty = this.isAggregationDirty(opts, {\n      dimension: weights\n    });\n\n    if (aggregationWeightsDirty) {\n      this._updateAccessors(opts);\n    }\n    if (aggregationDataDirty || aggregationWeightsDirty) {\n      this._resetResults();\n    }\n    this.setState({\n      aggregationDataDirty,\n      aggregationWeightsDirty\n    });\n  }\n  /* eslint-enable max-statements, complexity */\n\n  // Private (Aggregation)\n\n  _updateAccessors(opts) {\n    const {getWeight, aggregation, data} = opts.props;\n    const {count} = this.state.weights;\n    if (count) {\n      count.getWeight = getWeight;\n      count.operation = AGGREGATION_OPERATION[aggregation];\n    }\n    this.setState({getValue: getValueFunc(aggregation, getWeight, {data})});\n  }\n\n  _resetResults() {\n    const {count} = this.state.weights;\n    if (count) {\n      count.aggregationData = null;\n    }\n  }\n\n  // Private (Contours)\n\n  _generateContours() {\n    const {numCol, numRow, gridOrigin, gridOffset, thresholdData} = this.state;\n    const {count} = this.state.weights;\n    let {aggregationData} = count;\n    if (!aggregationData) {\n      aggregationData = count.aggregationBuffer.getData();\n      count.aggregationData = aggregationData;\n    }\n\n    const {cellWeights} = GPUGridAggregator.getCellData({countsData: aggregationData});\n    const contourData = generateContours({\n      thresholdData,\n      cellWeights,\n      gridSize: [numCol, numRow],\n      gridOrigin,\n      cellSize: [gridOffset.xOffset, gridOffset.yOffset]\n    });\n\n    // contourData contains both iso-lines and iso-bands if requested.\n    this.setState({contourData});\n  }\n\n  _updateThresholdData(props) {\n    const {contours, zOffset} = props;\n    const count = contours.length;\n    const thresholdData = new Array(count);\n    for (let i = 0; i < count; i++) {\n      const contour = contours[i];\n      thresholdData[i] = {\n        contour,\n        zIndex: contour.zIndex || i,\n        zOffset\n      };\n    }\n    this.setState({thresholdData});\n  }\n}\n\nContourLayer.layerName = 'ContourLayer';\nContourLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}