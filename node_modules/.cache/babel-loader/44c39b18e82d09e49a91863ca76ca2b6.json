{"ast":null,"code":"const DEGREES_TO_RADIANS = Math.PI / 180;\nconst DAY_IN_MS = 1000 * 60 * 60 * 24;\nconst JD1970 = 2440588;\nconst JD2000 = 2451545;\nconst e = DEGREES_TO_RADIANS * 23.4397;\nconst M0 = 357.5291;\nconst M1 = 0.98560028;\nconst THETA0 = 280.147;\nconst THETA1 = 360.9856235;\nexport function getSolarPosition(timestamp, latitude, longitude) {\n  const longitudeWestInRadians = DEGREES_TO_RADIANS * -longitude;\n  const phi = DEGREES_TO_RADIANS * latitude;\n  const d = toDays(timestamp);\n  const c = getSunCoords(d);\n  const H = getSiderealTime(d, longitudeWestInRadians) - c.rightAscension;\n  return {\n    azimuth: getAzimuth(H, phi, c.declination),\n    altitude: getAltitude(H, phi, c.declination)\n  };\n}\nexport function getSunlightDirection(timestamp, latitude, longitude) {\n  const {\n    azimuth,\n    altitude\n  } = getSolarPosition(timestamp, latitude, longitude);\n  return [Math.sin(azimuth) * Math.cos(altitude), Math.cos(azimuth) * Math.cos(altitude), -Math.sin(altitude)];\n}\n\nfunction toJulianDay(timestamp) {\n  return timestamp / DAY_IN_MS - 0.5 + JD1970;\n}\n\nfunction toDays(timestamp) {\n  return toJulianDay(timestamp) - JD2000;\n}\n\nfunction getRightAscension(eclipticLongitude, b) {\n  const lambda = eclipticLongitude;\n  return Math.atan2(Math.sin(lambda) * Math.cos(e) - Math.tan(b) * Math.sin(e), Math.cos(lambda));\n}\n\nfunction getDeclination(eclipticLongitude, b) {\n  const lambda = eclipticLongitude;\n  return Math.asin(Math.sin(b) * Math.cos(e) + Math.cos(b) * Math.sin(e) * Math.sin(lambda));\n}\n\nfunction getAzimuth(hourAngle, latitudeInRadians, declination) {\n  const H = hourAngle;\n  const phi = latitudeInRadians;\n  const delta = declination;\n  return Math.atan2(Math.sin(H), Math.cos(H) * Math.sin(phi) - Math.tan(delta) * Math.cos(phi));\n}\n\nfunction getAltitude(hourAngle, latitudeInRadians, declination) {\n  const H = hourAngle;\n  const phi = latitudeInRadians;\n  const delta = declination;\n  return Math.asin(Math.sin(phi) * Math.sin(delta) + Math.cos(phi) * Math.cos(delta) * Math.cos(H));\n}\n\nfunction getSiderealTime(dates, longitudeWestInRadians) {\n  return DEGREES_TO_RADIANS * (THETA0 + THETA1 * dates) - longitudeWestInRadians;\n}\n\nfunction getSolarMeanAnomaly(days) {\n  return DEGREES_TO_RADIANS * (M0 + M1 * days);\n}\n\nfunction getEclipticLongitude(meanAnomaly) {\n  const M = meanAnomaly;\n  const C = DEGREES_TO_RADIANS * (1.9148 * Math.sin(M) + 0.02 * Math.sin(2 * M) + 0.0003 * Math.sin(3 * M));\n  const P = DEGREES_TO_RADIANS * 102.9372;\n  return M + C + P + Math.PI;\n}\n\nfunction getSunCoords(dates) {\n  const M = getSolarMeanAnomaly(dates);\n  const L = getEclipticLongitude(M);\n  return {\n    declination: getDeclination(L, 0),\n    rightAscension: getRightAscension(L, 0)\n  };\n}","map":{"version":3,"mappings":"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","names":["DEGREES_TO_RADIANS","Math","PI","DAY_IN_MS","JD1970","JD2000","e","M0","M1","THETA0","THETA1","getSolarPosition","timestamp","latitude","longitude","longitudeWestInRadians","phi","d","toDays","c","getSunCoords","H","getSiderealTime","rightAscension","azimuth","getAzimuth","declination","altitude","getAltitude","getSunlightDirection","sin","cos","toJulianDay","getRightAscension","eclipticLongitude","b","lambda","atan2","tan","getDeclination","asin","hourAngle","latitudeInRadians","delta","dates","getSolarMeanAnomaly","days","getEclipticLongitude","meanAnomaly","M","C","P","L"],"sources":["../../../../src/effects/lighting/suncalc.js"],"sourcesContent":["// sun position calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas\n// and inspired by https://github.com/mourner/suncalc/blob/master/suncalc.js\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nconst DAY_IN_MS = 1000 * 60 * 60 * 24;\nconst JD1970 = 2440588; // Julian Day year 1970\nconst JD2000 = 2451545; // Julian Day year 2000\n\n// This angle ε [epsilon] is called the obliquity of the ecliptic and its value at the beginning of 2000 was 23.4397°\nconst e = DEGREES_TO_RADIANS * 23.4397; // obliquity of the Earth\n\n// Refer https://www.aa.quae.nl/en/reken/zonpositie.html\n// \"The Mean Anomaly\" section for explanation\nconst M0 = 357.5291; // Earth mean anomaly on start day\nconst M1 = 0.98560028; // Earth angle traverses on average per day seen from the sun\n\nconst THETA0 = 280.147; // The sidereal time (in degrees) at longitude 0° at the instant defined by JD2000\nconst THETA1 = 360.9856235; // The rate of change of the sidereal time, in degrees per day.\n\nexport function getSolarPosition(timestamp, latitude, longitude) {\n  const longitudeWestInRadians = DEGREES_TO_RADIANS * -longitude;\n  const phi = DEGREES_TO_RADIANS * latitude;\n  const d = toDays(timestamp);\n\n  const c = getSunCoords(d);\n  // hour angle\n  const H = getSiderealTime(d, longitudeWestInRadians) - c.rightAscension;\n\n  // https://www.aa.quae.nl/en/reken/zonpositie.html\n  // The altitude is 0° at the horizon, +90° in the zenith (straight over your head), and −90° in the nadir (straight down).\n  // The azimuth is the direction along the horizon, which we measure from south to west.\n  // South has azimuth 0°, west +90°, north +180°, and east +270° (or −90°, that's the same thing).\n  return {\n    azimuth: getAzimuth(H, phi, c.declination),\n    altitude: getAltitude(H, phi, c.declination)\n  };\n}\n\nexport function getSunlightDirection(timestamp, latitude, longitude) {\n  const {azimuth, altitude} = getSolarPosition(timestamp, latitude, longitude);\n\n  // solar position to light direction\n  return [\n    Math.sin(azimuth) * Math.cos(altitude),\n    Math.cos(azimuth) * Math.cos(altitude),\n    -Math.sin(altitude)\n  ];\n}\n\nfunction toJulianDay(timestamp) {\n  return timestamp / DAY_IN_MS - 0.5 + JD1970;\n}\n\nfunction toDays(timestamp) {\n  return toJulianDay(timestamp) - JD2000;\n}\n\nfunction getRightAscension(eclipticLongitude, b) {\n  const lambda = eclipticLongitude;\n  return Math.atan2(Math.sin(lambda) * Math.cos(e) - Math.tan(b) * Math.sin(e), Math.cos(lambda));\n}\n\nfunction getDeclination(eclipticLongitude, b) {\n  const lambda = eclipticLongitude;\n  return Math.asin(Math.sin(b) * Math.cos(e) + Math.cos(b) * Math.sin(e) * Math.sin(lambda));\n}\n\nfunction getAzimuth(hourAngle, latitudeInRadians, declination) {\n  const H = hourAngle;\n  const phi = latitudeInRadians;\n  const delta = declination;\n  return Math.atan2(Math.sin(H), Math.cos(H) * Math.sin(phi) - Math.tan(delta) * Math.cos(phi));\n}\n\nfunction getAltitude(hourAngle, latitudeInRadians, declination) {\n  const H = hourAngle;\n  const phi = latitudeInRadians;\n  const delta = declination;\n  return Math.asin(Math.sin(phi) * Math.sin(delta) + Math.cos(phi) * Math.cos(delta) * Math.cos(H));\n}\n\n// https://www.aa.quae.nl/en/reken/zonpositie.html\n// \"The Observer section\"\nfunction getSiderealTime(dates, longitudeWestInRadians) {\n  return DEGREES_TO_RADIANS * (THETA0 + THETA1 * dates) - longitudeWestInRadians;\n}\n\nfunction getSolarMeanAnomaly(days) {\n  return DEGREES_TO_RADIANS * (M0 + M1 * days);\n}\n\nfunction getEclipticLongitude(meanAnomaly) {\n  const M = meanAnomaly;\n  // equation of center\n  const C =\n    DEGREES_TO_RADIANS * (1.9148 * Math.sin(M) + 0.02 * Math.sin(2 * M) + 0.0003 * Math.sin(3 * M));\n  // perihelion of the Earth\n  const P = DEGREES_TO_RADIANS * 102.9372;\n\n  return M + C + P + Math.PI;\n}\n\nfunction getSunCoords(dates) {\n  const M = getSolarMeanAnomaly(dates);\n  const L = getEclipticLongitude(M);\n\n  return {\n    declination: getDeclination(L, 0),\n    rightAscension: getRightAscension(L, 0)\n  };\n}\n"]},"metadata":{},"sourceType":"module"}