{"ast":null,"code":"import _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { getImageSize } from '../category-api/parsed-image-api';\nvar _encodeImageNode = globalThis._encodeImageNode;\nexport function encodeImage(_x, _x2) {\n  return _encodeImage.apply(this, arguments);\n}\n\nfunction _encodeImage() {\n  _encodeImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(image, options) {\n    return _regeneratorRuntime.wrap(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = options || {};\n            options.image = options.image || {};\n            return _context2.abrupt(\"return\", _encodeImageNode ? _encodeImageNode(image, {\n              type: options.image.mimeType\n            }) : encodeImageInBrowser(image, options));\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _encodeImage.apply(this, arguments);\n}\n\nvar qualityParamSupported = true;\n\nfunction encodeImageInBrowser(_x3, _x4) {\n  return _encodeImageInBrowser.apply(this, arguments);\n}\n\nfunction _encodeImageInBrowser() {\n  _encodeImageInBrowser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(image, options) {\n    var _options$image, mimeType, jpegQuality, _getImageSize, width, height, canvas, blob;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _options$image = options.image, mimeType = _options$image.mimeType, jpegQuality = _options$image.jpegQuality;\n            _getImageSize = getImageSize(image), width = _getImageSize.width, height = _getImageSize.height;\n            canvas = document.createElement('canvas');\n            canvas.width = width;\n            canvas.height = height;\n            drawImageToCanvas(image, canvas);\n            _context3.next = 8;\n            return new Promise(function (resolve) {\n              if (jpegQuality && qualityParamSupported) {\n                try {\n                  canvas.toBlob(resolve, mimeType, jpegQuality);\n                  return;\n                } catch (error) {\n                  qualityParamSupported = false;\n                }\n              }\n\n              canvas.toBlob(resolve, mimeType);\n            });\n\n          case 8:\n            blob = _context3.sent;\n\n            if (blob) {\n              _context3.next = 11;\n              break;\n            }\n\n            throw new Error('image encoding failed');\n\n          case 11:\n            _context3.next = 13;\n            return blob.arrayBuffer();\n\n          case 13:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 14:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _encodeImageInBrowser.apply(this, arguments);\n}\n\nfunction drawImageToCanvas(image, canvas) {\n  var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  if (x === 0 && y === 0 && typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    var _context = canvas.getContext('bitmaprenderer');\n\n    if (_context) {\n      _context.transferFromImageBitmap(image);\n\n      return canvas;\n    }\n  }\n\n  var context = canvas.getContext('2d');\n\n  if (image.data) {\n    var clampedArray = new Uint8ClampedArray(image.data);\n    var imageData = new ImageData(clampedArray, image.width, image.height);\n    context.putImageData(imageData, 0, 0);\n    return canvas;\n  }\n\n  context.drawImage(image, 0, 0);\n  return canvas;\n}","map":{"version":3,"mappings":"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","names":["getImageSize","_encodeImageNode","globalThis","encodeImage","image","options","type","mimeType","encodeImageInBrowser","qualityParamSupported","jpegQuality","width","height","canvas","document","createElement","drawImageToCanvas","Promise","resolve","toBlob","error","blob","Error","arrayBuffer","x","y","ImageBitmap","context","getContext","transferFromImageBitmap","data","clampedArray","Uint8ClampedArray","imageData","ImageData","putImageData","drawImage"],"sources":["../../../../src/lib/encoders/encode-image.ts"],"sourcesContent":["// Image loading/saving for browser and Node.js\nimport {getImageSize} from '../category-api/parsed-image-api';\n\n// @ts-ignore TS2339: Property does not exist on type\nconst {_encodeImageNode} = globalThis;\n\n/**\n * Returns data bytes representing a compressed image in PNG or JPG format,\n * This data can be saved using file system (f) methods or used in a request.\n * @param image - ImageBitmap Image or Canvas\n * @param options\n * param opt.type='png' - png, jpg or image/png, image/jpg are valid\n * param mimeType= - Whether to include a data URI header\n */\nexport async function encodeImage(\n  image: any,\n  options?: {[key: string]: any}\n): Promise<ArrayBuffer> {\n  options = options || {};\n  options.image = options.image || ({} as {[key: string]: any});\n\n  return _encodeImageNode\n    ? _encodeImageNode(image, {type: options.image.mimeType})\n    : encodeImageInBrowser(image, options);\n}\n\n// In case we get exceptions from canvas.toBlob(resolve, type, quality)\nlet qualityParamSupported = true;\n\n/**\n *\n * @param image\n * @param options\n * @note Based on canvas.toBlob\n * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob\n */\nasync function encodeImageInBrowser(image, options) {\n  const {mimeType, jpegQuality} = options.image;\n\n  const {width, height} = getImageSize(image);\n\n  // create a canvas and resize it to the size of our image\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n\n  drawImageToCanvas(image, canvas);\n\n  // The actual encoding is done asynchronously with `canvas.toBlob()`\n  const blob = await new Promise<Blob | null>((resolve) => {\n    // get it back as a Blob\n    if (jpegQuality && qualityParamSupported) {\n      try {\n        canvas.toBlob(resolve, mimeType, jpegQuality);\n        return;\n      } catch (error) {\n        qualityParamSupported = false;\n      }\n    }\n    canvas.toBlob(resolve, mimeType);\n  });\n\n  if (!blob) {\n    throw new Error('image encoding failed');\n  }\n\n  return await blob.arrayBuffer();\n}\n\nfunction drawImageToCanvas(image, canvas, x = 0, y = 0) {\n  // Try optimized path for ImageBitmaps via bitmaprenderer context\n  if (x === 0 && y === 0 && typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    const context = canvas.getContext('bitmaprenderer');\n    if (context) {\n      // transfer the ImageBitmap to it\n      context.transferFromImageBitmap(image);\n      return canvas;\n    }\n  }\n\n  // Available on most platforms, except IE11 and Andriod WebViews...\n  const context = canvas.getContext('2d');\n  if (image.data) {\n    // ImageData constructor expects clamped array even though getImageData does not return a clamped array...\n    const clampedArray = new Uint8ClampedArray(image.data);\n    const imageData = new ImageData(clampedArray, image.width, image.height);\n    context.putImageData(imageData, 0, 0);\n    return canvas;\n  }\n\n  // Fall back to generic image/image bitmap rendering path\n  context.drawImage(image, 0, 0);\n  return canvas;\n}\n"]},"metadata":{},"sourceType":"module"}