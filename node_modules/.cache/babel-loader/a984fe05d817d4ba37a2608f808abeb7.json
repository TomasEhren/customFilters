{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport WorkerPool from './worker-pool';\nimport WorkerThread from './worker-thread';\nconst DEFAULT_PROPS = {\n  maxConcurrency: 3,\n  maxMobileConcurrency: 1,\n  onDebug: () => {},\n  reuseWorkers: true\n};\nexport default class WorkerFarm {\n  static isSupported() {\n    return WorkerThread.isSupported();\n  }\n\n  static getWorkerFarm() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    WorkerFarm._workerFarm = WorkerFarm._workerFarm || new WorkerFarm({});\n\n    WorkerFarm._workerFarm.setProps(props);\n\n    return WorkerFarm._workerFarm;\n  }\n\n  constructor(props) {\n    _defineProperty(this, \"props\", void 0);\n\n    _defineProperty(this, \"workerPools\", new Map());\n\n    this.props = { ...DEFAULT_PROPS\n    };\n    this.setProps(props);\n    this.workerPools = new Map();\n  }\n\n  destroy() {\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.destroy();\n    }\n  }\n\n  setProps(props) {\n    this.props = { ...this.props,\n      ...props\n    };\n\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.setProps(this._getWorkerPoolProps());\n    }\n  }\n\n  getWorkerPool(options) {\n    const {\n      name,\n      source,\n      url\n    } = options;\n    let workerPool = this.workerPools.get(name);\n\n    if (!workerPool) {\n      workerPool = new WorkerPool({\n        name,\n        source,\n        url\n      });\n      workerPool.setProps(this._getWorkerPoolProps());\n      this.workerPools.set(name, workerPool);\n    }\n\n    return workerPool;\n  }\n\n  _getWorkerPoolProps() {\n    return {\n      maxConcurrency: this.props.maxConcurrency,\n      maxMobileConcurrency: this.props.maxMobileConcurrency,\n      reuseWorkers: this.props.reuseWorkers,\n      onDebug: this.props.onDebug\n    };\n  }\n\n}\n\n_defineProperty(WorkerFarm, \"_workerFarm\", void 0);","map":{"version":3,"mappings":";AAAA,OAAOA,UAAP,MAAuB,eAAvB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AAYA,MAAMC,aAA8B,GAAG;EACrCC,cAAc,EAAE,CADqB;EAErCC,oBAAoB,EAAE,CAFe;EAGrCC,OAAO,EAAE,MAAM,CAHsB;EAIrCC,YAAY,EAAE;AAJuB,CAAvC;AAUA,eAAe,MAAMC,UAAN,CAAiB;EAOZ,OAAXC,WAAW,GAAY;IAC5B,OAAOP,YAAY,CAACO,WAAbP,EAAP;EACD;;EAGmB,OAAbQ,aAAa,GAA0C;IAAA,IAAzCC,KAAyC,uEAAhB,EAAgB;IAC5DH,UAAU,CAACI,WAAXJ,GAAyBA,UAAU,CAACI,WAAXJ,IAA0B,IAAIA,UAAJ,CAAe,EAAf,CAAnDA;;IACAA,UAAU,CAACI,WAAXJ,CAAuBK,QAAvBL,CAAgCG,KAAhCH;;IACA,OAAOA,UAAU,CAACI,WAAlB;EACD;;EAGOE,WAAW,CAACH,KAAD,EAAyB;IAAAI;;IAAAA,qCAjBtB,IAAIC,GAAJ,EAiBsB;;IAC1C,KAAKL,KAAL,GAAa,EAAC,GAAGR;IAAJ,CAAb;IACA,KAAKU,QAAL,CAAcF,KAAd;IAEA,KAAKM,WAAL,GAAmB,IAAID,GAAJ,EAAnB;EACD;;EAMDE,OAAO,GAAS;IACd,KAAK,MAAMC,UAAX,IAAyB,KAAKF,WAAL,CAAiBG,MAAjB,EAAzB,EAAoD;MAClDD,UAAU,CAACD,OAAXC;IACD;EACF;;EAMDN,QAAQ,CAACF,KAAD,EAA+B;IACrC,KAAKA,KAAL,GAAa,EAAC,GAAG,KAAKA,KAAT;MAAgB,GAAGA;IAAnB,CAAb;;IAEA,KAAK,MAAMQ,UAAX,IAAyB,KAAKF,WAAL,CAAiBG,MAAjB,EAAzB,EAAoD;MAClDD,UAAU,CAACN,QAAXM,CAAoB,KAAKE,mBAAL,EAApBF;IACD;EACF;;EAWDG,aAAa,CAACC,OAAD,EAAqE;IAChF,MAAM;MAACC,IAAD;MAAOC,MAAP;MAAeC;IAAf,IAAsBH,OAA5B;IACA,IAAIJ,UAAU,GAAG,KAAKF,WAAL,CAAiBU,GAAjB,CAAqBH,IAArB,CAAjB;;IACA,IAAI,CAACL,UAAL,EAAiB;MACfA,UAAU,GAAG,IAAIlB,UAAJ,CAAe;QAC1BuB,IAD0B;QAE1BC,MAF0B;QAG1BC;MAH0B,CAAf,CAAbP;MAKAA,UAAU,CAACN,QAAXM,CAAoB,KAAKE,mBAAL,EAApBF;MACA,KAAKF,WAAL,CAAiBW,GAAjB,CAAqBJ,IAArB,EAA2BL,UAA3B;IACD;;IACD,OAAOA,UAAP;EACD;;EAEDE,mBAAmB,GAAG;IACpB,OAAO;MACLjB,cAAc,EAAE,KAAKO,KAAL,CAAWP,cADtB;MAELC,oBAAoB,EAAE,KAAKM,KAAL,CAAWN,oBAF5B;MAGLE,YAAY,EAAE,KAAKI,KAAL,CAAWJ,YAHpB;MAILD,OAAO,EAAE,KAAKK,KAAL,CAAWL;IAJf,CAAP;EAMD;;AA/E6B;;gBAAXE,Y","names":["WorkerPool","WorkerThread","DEFAULT_PROPS","maxConcurrency","maxMobileConcurrency","onDebug","reuseWorkers","WorkerFarm","isSupported","getWorkerFarm","props","_workerFarm","setProps","constructor","_defineProperty","Map","workerPools","destroy","workerPool","values","_getWorkerPoolProps","getWorkerPool","options","name","source","url","get","set"],"sources":["../../../../src/lib/worker-farm/worker-farm.ts"],"sourcesContent":["import WorkerPool from './worker-pool';\nimport WorkerThread from './worker-thread';\n\n/**\n * @param maxConcurrency {number} - max count of workers\n */\nexport type WorkerFarmProps = {\n  maxConcurrency?: number;\n  maxMobileConcurrency?: number;\n  reuseWorkers?: boolean;\n  onDebug?: () => void;\n};\n\nconst DEFAULT_PROPS: WorkerFarmProps = {\n  maxConcurrency: 3,\n  maxMobileConcurrency: 1,\n  onDebug: () => {},\n  reuseWorkers: true\n};\n\n/**\n * Process multiple jobs with a \"farm\" of different workers in worker pools.\n */\nexport default class WorkerFarm {\n  private props: WorkerFarmProps;\n  private workerPools = new Map<string, WorkerPool>();\n  // singleton\n  private static _workerFarm?: WorkerFarm;\n\n  /** Check if Workers are supported */\n  static isSupported(): boolean {\n    return WorkerThread.isSupported();\n  }\n\n  /** Get the singleton instance of the global worker farm */\n  static getWorkerFarm(props: WorkerFarmProps = {}): WorkerFarm {\n    WorkerFarm._workerFarm = WorkerFarm._workerFarm || new WorkerFarm({});\n    WorkerFarm._workerFarm.setProps(props);\n    return WorkerFarm._workerFarm;\n  }\n\n  /** get global instance with WorkerFarm.getWorkerFarm() */\n  private constructor(props: WorkerFarmProps) {\n    this.props = {...DEFAULT_PROPS};\n    this.setProps(props);\n    /** @type Map<string, WorkerPool>} */\n    this.workerPools = new Map();\n  }\n\n  /**\n   * Terminate all workers in the farm\n   * @note Can free up significant memory\n   */\n  destroy(): void {\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.destroy();\n    }\n  }\n\n  /**\n   * Set props used when initializing worker pools\n   * @param props\n   */\n  setProps(props: WorkerFarmProps): void {\n    this.props = {...this.props, ...props};\n    // Update worker pool props\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.setProps(this._getWorkerPoolProps());\n    }\n  }\n\n  /**\n   * Returns a worker pool for the specified worker\n   * @param options - only used first time for a specific worker name\n   * @param options.name - the name of the worker - used to identify worker pool\n   * @param options.url -\n   * @param options.source -\n   * @example\n   *   const job = WorkerFarm.getWorkerFarm().getWorkerPool({name, url}).startJob(...);\n   */\n  getWorkerPool(options: {name: string; source?: string; url?: string}): WorkerPool {\n    const {name, source, url} = options;\n    let workerPool = this.workerPools.get(name);\n    if (!workerPool) {\n      workerPool = new WorkerPool({\n        name,\n        source,\n        url\n      });\n      workerPool.setProps(this._getWorkerPoolProps());\n      this.workerPools.set(name, workerPool);\n    }\n    return workerPool;\n  }\n\n  _getWorkerPoolProps() {\n    return {\n      maxConcurrency: this.props.maxConcurrency,\n      maxMobileConcurrency: this.props.maxMobileConcurrency,\n      reuseWorkers: this.props.reuseWorkers,\n      onDebug: this.props.onDebug\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}