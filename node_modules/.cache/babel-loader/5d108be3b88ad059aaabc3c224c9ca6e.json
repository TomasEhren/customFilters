{"ast":null,"code":"import { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './scatterplot-layer-vertex.glsl';\nimport fs from './scatterplot-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  radiusUnits: 'meters',\n  radiusScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  radiusMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  lineWidthUnits: 'meters',\n  lineWidthScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  lineWidthMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  lineWidthMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  stroked: false,\n  filled: true,\n  billboard: false,\n  antialiasing: true,\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getRadius: {\n    type: 'accessor',\n    value: 1\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  strokeWidth: {\n    deprecatedFor: 'getLineWidth'\n  },\n  outline: {\n    deprecatedFor: 'stroked'\n  },\n  getColor: {\n    deprecatedFor: ['getFillColor', 'getLineColor']\n  }\n};\nexport default class ScatterplotLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, picking]\n    });\n  }\n\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceRadius: {\n        size: 1,\n        transition: true,\n        accessor: 'getRadius',\n        defaultValue: 1\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: 5121,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: 5121,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState(_ref) {\n    let {\n      props,\n      oldProps,\n      changeFlags\n    } = _ref;\n    super.updateState({\n      props,\n      oldProps,\n      changeFlags\n    });\n\n    if (changeFlags.extensionsChanged) {\n      var _this$state$model;\n\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw(_ref2) {\n    let {\n      uniforms\n    } = _ref2;\n    const {\n      radiusUnits,\n      radiusScale,\n      radiusMinPixels,\n      radiusMaxPixels,\n      stroked,\n      filled,\n      billboard,\n      antialiasing,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels\n    } = this.props;\n    this.state.model.setUniforms(uniforms).setUniforms({\n      stroked: stroked ? 1 : 0,\n      filled,\n      billboard,\n      antialiasing,\n      radiusUnits: UNIT[radiusUnits],\n      radiusScale,\n      radiusMinPixels,\n      radiusMaxPixels,\n      lineWidthUnits: UNIT[lineWidthUnits],\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels\n    }).draw();\n  }\n\n  _getModel(gl) {\n    const positions = [-1, -1, 0, 1, -1, 0, 1, 1, 0, -1, 1, 0];\n    return new Model(gl, { ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 6,\n        vertexCount: 4,\n        attributes: {\n          positions: {\n            size: 3,\n            value: new Float32Array(positions)\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n}\nScatterplotLayer.layerName = 'ScatterplotLayer';\nScatterplotLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["Layer","project32","picking","UNIT","Model","Geometry","vs","fs","DEFAULT_COLOR","defaultProps","radiusUnits","radiusScale","type","min","value","radiusMinPixels","radiusMaxPixels","Number","MAX_SAFE_INTEGER","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","stroked","filled","billboard","antialiasing","getPosition","x","position","getRadius","getFillColor","getLineColor","getLineWidth","strokeWidth","deprecatedFor","outline","getColor","ScatterplotLayer","getShaders","modules","initializeState","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceRadius","defaultValue","instanceFillColors","props","colorFormat","length","normalized","instanceLineColors","instanceLineWidths","updateState","oldProps","changeFlags","extensionsChanged","gl","context","state","model","delete","_getModel","invalidateAll","draw","uniforms","setUniforms","positions","id","geometry","drawMode","vertexCount","attributes","Float32Array","isInstanced","layerName"],"sources":["../../../src/scatterplot-layer/scatterplot-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './scatterplot-layer-vertex.glsl';\nimport fs from './scatterplot-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  radiusUnits: 'meters',\n  radiusScale: {type: 'number', min: 0, value: 1},\n  radiusMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  radiusMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: {type: 'number', min: 0, value: 1},\n  lineWidthMinPixels: {type: 'number', min: 0, value: 0},\n  lineWidthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n\n  stroked: false,\n  filled: true,\n  billboard: false,\n  antialiasing: true,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getRadius: {type: 'accessor', value: 1},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n\n  // deprecated\n  strokeWidth: {deprecatedFor: 'getLineWidth'},\n  outline: {deprecatedFor: 'stroked'},\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\nexport default class ScatterplotLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceRadius: {\n        size: 1,\n        transition: true,\n        accessor: 'getRadius',\n        defaultValue: 1\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      radiusUnits,\n      radiusScale,\n      radiusMinPixels,\n      radiusMaxPixels,\n      stroked,\n      filled,\n      billboard,\n      antialiasing,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels\n    } = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        stroked: stroked ? 1 : 0,\n        filled,\n        billboard,\n        antialiasing,\n        radiusUnits: UNIT[radiusUnits],\n        radiusScale,\n        radiusMinPixels,\n        radiusMaxPixels,\n        lineWidthUnits: UNIT[lineWidthUnits],\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels\n      })\n      .draw();\n  }\n\n  _getModel(gl) {\n    // a square that minimally cover the unit circle\n    const positions = [-1, -1, 0, 1, -1, 0, 1, 1, 0, -1, 1, 0];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount: 4,\n        attributes: {\n          positions: {size: 3, value: new Float32Array(positions)}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n\nScatterplotLayer.layerName = 'ScatterplotLayer';\nScatterplotLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}