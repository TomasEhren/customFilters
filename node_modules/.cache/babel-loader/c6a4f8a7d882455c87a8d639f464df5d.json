{"ast":null,"code":"import DRACOBuilder from './lib/draco-builder';\nimport { loadDracoEncoderModule } from './lib/draco-module-loader';\nimport { VERSION } from './lib/utils/version';\nconst DEFAULT_DRACO_OPTIONS = {\n  pointcloud: false,\n  attributeNameEntry: 'name'\n};\nexport const DracoWriter = {\n  name: 'DRACO',\n  id: 'draco',\n  module: 'draco',\n  version: VERSION,\n  extensions: ['drc'],\n  encode,\n  options: {\n    draco: DEFAULT_DRACO_OPTIONS\n  }\n};\n\nasync function encode(data) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    draco\n  } = await loadDracoEncoderModule(options);\n  const dracoBuilder = new DRACOBuilder(draco);\n\n  try {\n    return dracoBuilder.encodeSync(data, options.draco);\n  } finally {\n    dracoBuilder.destroy();\n  }\n}","map":{"version":3,"mappings":"AAGA,OAAOA,YAAP,MAAyB,qBAAzB;AACA,SAAQC,sBAAR,QAAqC,2BAArC;AACA,SAAQC,OAAR,QAAsB,qBAAtB;AAIA,MAAMC,qBAAqB,GAAG;EAC5BC,UAAU,EAAE,KADgB;EAE5BC,kBAAkB,EAAE;AAFQ,CAA9B;AAcA,OAAO,MAAMC,WAAmB,GAAG;EACjCC,IAAI,EAAE,OAD2B;EAEjCC,EAAE,EAAE,OAF6B;EAGjCC,MAAM,EAAE,OAHyB;EAIjCC,OAAO,EAAER,OAJwB;EAKjCS,UAAU,EAAE,CAAC,KAAD,CALqB;EAMjCC,MANiC;EAOjCC,OAAO,EAAE;IACPC,KAAK,EAAEX;EADA;AAPwB,CAA5B;;AAYP,eAAeS,MAAf,CACEG,IADF,EAGwB;EAAA,IADtBF,OACsB,uEADkB,EAClB;EAEtB,MAAM;IAACC;EAAD,IAAU,MAAMb,sBAAsB,CAACY,OAAD,CAA5C;EACA,MAAMG,YAAY,GAAG,IAAIhB,YAAJ,CAAiBc,KAAjB,CAArB;;EAEA,IAAI;IACF,OAAOE,YAAY,CAACC,UAAbD,CAAwBD,IAAxBC,EAA8BH,OAAO,CAACC,KAAtCE,CAAP;EADF,UAEU;IACRA,YAAY,CAACE,OAAbF;EACD;AACF","names":["DRACOBuilder","loadDracoEncoderModule","VERSION","DEFAULT_DRACO_OPTIONS","pointcloud","attributeNameEntry","DracoWriter","name","id","module","version","extensions","encode","options","draco","data","dracoBuilder","encodeSync","destroy"],"sources":["../../src/draco-writer.ts"],"sourcesContent":["import type {Writer} from '@loaders.gl/loader-utils';\nimport type {DracoMesh} from './lib/draco-types';\nimport type {DracoBuildOptions} from './lib/draco-builder';\nimport DRACOBuilder from './lib/draco-builder';\nimport {loadDracoEncoderModule} from './lib/draco-module-loader';\nimport {VERSION} from './lib/utils/version';\n\nexport type DracoWriterOptions = DracoBuildOptions & {};\n\nconst DEFAULT_DRACO_OPTIONS = {\n  pointcloud: false, // Set to true if pointcloud (mode: 0, no indices)\n  attributeNameEntry: 'name'\n  // Draco Compression Parameters\n  // method: 'MESH_EDGEBREAKER_ENCODING',\n  // speed: [5, 5],\n  // quantization: {\n  //   POSITION: 10\n  // }\n};\n\n/**\n * Exporter for Draco3D compressed geometries\n */\nexport const DracoWriter: Writer = {\n  name: 'DRACO',\n  id: 'draco',\n  module: 'draco',\n  version: VERSION,\n  extensions: ['drc'],\n  encode,\n  options: {\n    draco: DEFAULT_DRACO_OPTIONS\n  }\n};\n\nasync function encode(\n  data: DracoMesh,\n  options: {draco?: DracoWriterOptions} = {}\n): Promise<ArrayBuffer> {\n  // Dynamically load draco\n  const {draco} = await loadDracoEncoderModule(options);\n  const dracoBuilder = new DRACOBuilder(draco);\n\n  try {\n    return dracoBuilder.encodeSync(data, options.draco);\n  } finally {\n    dracoBuilder.destroy();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}