{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { hexbin } from 'd3-hexbin';\nimport { createIterable, log } from '@deck.gl/core';\nexport function pointToHexbin(props, aggregationParams) {\n  var data = props.data,\n      radius = props.radius;\n  var viewport = aggregationParams.viewport,\n      attributes = aggregationParams.attributes;\n  var centerLngLat = data.length ? getPointsCenter(data, aggregationParams) : null;\n  var radiusCommon = getRadiusInCommon(radius, viewport, centerLngLat);\n  var screenPoints = [];\n\n  var _createIterable = createIterable(data),\n      iterable = _createIterable.iterable,\n      objectInfo = _createIterable.objectInfo;\n\n  var positions = attributes.positions.value;\n\n  var _attributes$positions = attributes.positions.getAccessor(),\n      size = _attributes$positions.size;\n\n  var _iterator = _createForOfIteratorHelper(iterable),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var object = _step.value;\n      objectInfo.index++;\n      var posIndex = objectInfo.index * size;\n      var position = [positions[posIndex], positions[posIndex + 1]];\n      var arrayIsFinite = Number.isFinite(position[0]) && Number.isFinite(position[1]);\n\n      if (arrayIsFinite) {\n        screenPoints.push({\n          screenCoord: viewport.projectFlat(position),\n          source: object,\n          index: objectInfo.index\n        });\n      } else {\n        log.warn('HexagonLayer: invalid position')();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var newHexbin = hexbin().radius(radiusCommon).x(function (d) {\n    return d.screenCoord[0];\n  }).y(function (d) {\n    return d.screenCoord[1];\n  });\n  var hexagonBins = newHexbin(screenPoints);\n  return {\n    hexagons: hexagonBins.map(function (hex, index) {\n      return {\n        position: viewport.unprojectFlat([hex.x, hex.y]),\n        points: hex,\n        index: index\n      };\n    }),\n    radiusCommon: radiusCommon\n  };\n}\nexport function getPointsCenter(data, aggregationParams) {\n  var attributes = aggregationParams.attributes;\n  var positions = attributes.positions.value;\n\n  var _attributes$positions2 = attributes.positions.getAccessor(),\n      size = _attributes$positions2.size;\n\n  var minX = Infinity;\n  var minY = Infinity;\n  var maxX = -Infinity;\n  var maxY = -Infinity;\n  var i;\n\n  for (i = 0; i < size * data.length; i += size) {\n    var x = positions[i];\n    var y = positions[i + 1];\n    var arrayIsFinite = Number.isFinite(x) && Number.isFinite(y);\n\n    if (arrayIsFinite) {\n      minX = Math.min(x, minX);\n      maxX = Math.max(x, maxX);\n      minY = Math.min(y, minY);\n      maxY = Math.max(y, maxY);\n    }\n  }\n\n  return [minX, minY, maxX, maxY].every(Number.isFinite) ? [(minX + maxX) / 2, (minY + maxY) / 2] : null;\n}\nexport function getRadiusInCommon(radius, viewport, center) {\n  var _viewport$getDistance = viewport.getDistanceScales(center),\n      unitsPerMeter = _viewport$getDistance.unitsPerMeter;\n\n  return radius * unitsPerMeter[0];\n}","map":{"version":3,"mappings":"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","names":["hexbin","createIterable","log","pointToHexbin","props","aggregationParams","data","radius","viewport","attributes","centerLngLat","length","getPointsCenter","radiusCommon","getRadiusInCommon","screenPoints","iterable","objectInfo","positions","value","getAccessor","size","object","index","posIndex","position","arrayIsFinite","Number","isFinite","push","screenCoord","projectFlat","source","warn","newHexbin","x","d","y","hexagonBins","hexagons","map","hex","unprojectFlat","points","minX","Infinity","minY","maxX","maxY","i","Math","min","max","every","center","getDistanceScales","unitsPerMeter"],"sources":["../../../src/hexagon-layer/hexagon-aggregator.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {hexbin} from 'd3-hexbin';\nimport {createIterable, log} from '@deck.gl/core';\n\n/**\n * Use d3-hexbin to performs hexagonal binning from geo points to hexagons\n * @param {Iterable} data - array of points\n * @param {Number} radius - hexagon radius in meter\n * @param {function} getPosition - get points lon lat\n * @param {Object} viewport - current viewport object\n\n * @return {Object} - hexagons and countRange\n */\nexport function pointToHexbin(props, aggregationParams) {\n  const {data, radius} = props;\n  const {viewport, attributes} = aggregationParams;\n  // get hexagon radius in mercator world unit\n  const centerLngLat = data.length ? getPointsCenter(data, aggregationParams) : null;\n  const radiusCommon = getRadiusInCommon(radius, viewport, centerLngLat);\n\n  // add world space coordinates to points\n  const screenPoints = [];\n  const {iterable, objectInfo} = createIterable(data);\n  const positions = attributes.positions.value;\n  const {size} = attributes.positions.getAccessor();\n  for (const object of iterable) {\n    objectInfo.index++;\n    const posIndex = objectInfo.index * size;\n    const position = [positions[posIndex], positions[posIndex + 1]];\n    const arrayIsFinite = Number.isFinite(position[0]) && Number.isFinite(position[1]);\n    if (arrayIsFinite) {\n      screenPoints.push({\n        screenCoord: viewport.projectFlat(position),\n        source: object,\n        index: objectInfo.index\n      });\n    } else {\n      log.warn('HexagonLayer: invalid position')();\n    }\n  }\n\n  const newHexbin = hexbin()\n    .radius(radiusCommon)\n    .x(d => d.screenCoord[0])\n    .y(d => d.screenCoord[1]);\n\n  const hexagonBins = newHexbin(screenPoints);\n\n  return {\n    hexagons: hexagonBins.map((hex, index) => ({\n      position: viewport.unprojectFlat([hex.x, hex.y]),\n      points: hex,\n      index\n    })),\n    radiusCommon\n  };\n}\n\n/**\n * Get the bounding box of all data points\n */\nexport function getPointsCenter(data, aggregationParams) {\n  const {attributes} = aggregationParams;\n  const positions = attributes.positions.value;\n  const {size} = attributes.positions.getAccessor();\n\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  let i;\n\n  for (i = 0; i < size * data.length; i += size) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    const arrayIsFinite = Number.isFinite(x) && Number.isFinite(y);\n\n    if (arrayIsFinite) {\n      minX = Math.min(x, minX);\n      maxX = Math.max(x, maxX);\n      minY = Math.min(y, minY);\n      maxY = Math.max(y, maxY);\n    }\n  }\n\n  // return center\n  return [minX, minY, maxX, maxY].every(Number.isFinite)\n    ? [(minX + maxX) / 2, (minY + maxY) / 2]\n    : null;\n}\n\n/**\n * Get radius in mercator world space coordinates from meter\n * @param {Number} radius - in meter\n * @param {Object} viewport - current viewport object\n * @param {Array<Number>} center - data center\n\n * @return {Number} radius in mercator world spcae coordinates\n */\nexport function getRadiusInCommon(radius, viewport, center) {\n  const {unitsPerMeter} = viewport.getDistanceScales(center);\n  // x, y distance should be the same\n  return radius * unitsPerMeter[0];\n}\n"]},"metadata":{},"sourceType":"module"}