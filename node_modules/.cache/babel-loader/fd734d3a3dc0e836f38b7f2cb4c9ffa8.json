{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Vector3, Matrix4 } from '@math.gl/core';\nimport { CullingVolume } from '@math.gl/culling';\nimport { load } from '@loaders.gl/core';\nimport { TILE_REFINEMENT, TILE_CONTENT_STATE, TILESET_TYPE } from '../constants';\nimport { createBoundingVolume } from './helpers/bounding-volume';\nimport { getTiles3DScreenSpaceError } from './helpers/tiles-3d-lod';\nimport { getProjectedRadius } from './helpers/i3s-lod';\nimport { get3dTilesOptions } from './helpers/3d-tiles-options';\nimport TilesetTraverser from './traversers/tileset-traverser';\nconst scratchVector = new Vector3();\n\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\n\nexport default class TileHeader {\n  constructor(tileset, header, parentHeader) {\n    let extendedId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n\n    _defineProperty(this, \"tileset\", void 0);\n\n    _defineProperty(this, \"header\", void 0);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"url\", void 0);\n\n    _defineProperty(this, \"parent\", void 0);\n\n    _defineProperty(this, \"refine\", void 0);\n\n    _defineProperty(this, \"type\", void 0);\n\n    _defineProperty(this, \"contentUrl\", void 0);\n\n    _defineProperty(this, \"lodMetricType\", void 0);\n\n    _defineProperty(this, \"lodMetricValue\", void 0);\n\n    _defineProperty(this, \"boundingVolume\", void 0);\n\n    _defineProperty(this, \"content\", void 0);\n\n    _defineProperty(this, \"contentState\", void 0);\n\n    _defineProperty(this, \"gpuMemoryUsageInBytes\", void 0);\n\n    _defineProperty(this, \"children\", void 0);\n\n    _defineProperty(this, \"depth\", void 0);\n\n    _defineProperty(this, \"viewportIds\", void 0);\n\n    _defineProperty(this, \"transform\", void 0);\n\n    _defineProperty(this, \"extensions\", void 0);\n\n    _defineProperty(this, \"userData\", void 0);\n\n    _defineProperty(this, \"computedTransform\", void 0);\n\n    _defineProperty(this, \"hasEmptyContent\", void 0);\n\n    _defineProperty(this, \"hasTilesetContent\", void 0);\n\n    _defineProperty(this, \"traverser\", void 0);\n\n    _defineProperty(this, \"_cacheNode\", void 0);\n\n    _defineProperty(this, \"_frameNumber\", void 0);\n\n    _defineProperty(this, \"_lodJudge\", void 0);\n\n    _defineProperty(this, \"_expireDate\", void 0);\n\n    _defineProperty(this, \"_expiredContent\", void 0);\n\n    _defineProperty(this, \"_shouldRefine\", void 0);\n\n    _defineProperty(this, \"_distanceToCamera\", void 0);\n\n    _defineProperty(this, \"_centerZDepth\", void 0);\n\n    _defineProperty(this, \"_screenSpaceError\", void 0);\n\n    _defineProperty(this, \"_visibilityPlaneMask\", void 0);\n\n    _defineProperty(this, \"_visible\", void 0);\n\n    _defineProperty(this, \"_inRequestVolume\", void 0);\n\n    _defineProperty(this, \"_stackLength\", void 0);\n\n    _defineProperty(this, \"_selectionDepth\", void 0);\n\n    _defineProperty(this, \"_touchedFrame\", void 0);\n\n    _defineProperty(this, \"_visitedFrame\", void 0);\n\n    _defineProperty(this, \"_selectedFrame\", void 0);\n\n    _defineProperty(this, \"_requestedFrame\", void 0);\n\n    _defineProperty(this, \"_priority\", void 0);\n\n    _defineProperty(this, \"_contentBoundingVolume\", void 0);\n\n    _defineProperty(this, \"_viewerRequestVolume\", void 0);\n\n    _defineProperty(this, \"_initialTransform\", void 0);\n\n    this.header = header;\n    this.tileset = tileset;\n    this.id = extendedId || header.id;\n    this.url = header.url;\n    this.parent = parentHeader;\n    this.refine = this._getRefine(header.refine);\n    this.type = header.type;\n    this.contentUrl = header.contentUrl;\n    this.lodMetricType = 'geometricError';\n    this.lodMetricValue = 0;\n    this.boundingVolume = null;\n    this.content = null;\n    this.contentState = TILE_CONTENT_STATE.UNLOADED;\n    this.gpuMemoryUsageInBytes = 0;\n    this.children = [];\n    this.hasEmptyContent = false;\n    this.hasTilesetContent = false;\n    this.depth = 0;\n    this.viewportIds = [];\n    this.userData = {};\n    this.extensions = null;\n    this._priority = 0;\n    this._touchedFrame = 0;\n    this._visitedFrame = 0;\n    this._selectedFrame = 0;\n    this._requestedFrame = 0;\n    this._screenSpaceError = 0;\n    this._cacheNode = null;\n    this._frameNumber = null;\n    this._cacheNode = null;\n    this.traverser = new TilesetTraverser({});\n    this._shouldRefine = false;\n    this._distanceToCamera = 0;\n    this._centerZDepth = 0;\n    this._visible = undefined;\n    this._inRequestVolume = false;\n    this._stackLength = 0;\n    this._selectionDepth = 0;\n    this._initialTransform = new Matrix4();\n    this.transform = new Matrix4();\n\n    this._initializeLodMetric(header);\n\n    this._initializeTransforms(header);\n\n    this._initializeBoundingVolumes(header);\n\n    this._initializeContent(header);\n\n    this._initializeRenderingState(header);\n\n    this._lodJudge = null;\n    this._expireDate = null;\n    this._expiredContent = null;\n    Object.seal(this);\n  }\n\n  destroy() {\n    this.header = null;\n  }\n\n  isDestroyed() {\n    return this.header === null;\n  }\n\n  get selected() {\n    return this._selectedFrame === this.tileset._frameNumber;\n  }\n\n  get isVisible() {\n    return this._visible;\n  }\n\n  get isVisibleAndInRequestVolume() {\n    return this._visible && this._inRequestVolume;\n  }\n\n  get hasRenderContent() {\n    return !this.hasEmptyContent && !this.hasTilesetContent;\n  }\n\n  get hasChildren() {\n    return this.children.length > 0 || this.header.children && this.header.children.length > 0;\n  }\n\n  get contentReady() {\n    return this.contentState === TILE_CONTENT_STATE.READY || this.hasEmptyContent;\n  }\n\n  get contentAvailable() {\n    return Boolean(this.contentReady && this.hasRenderContent || this._expiredContent && !this.contentFailed);\n  }\n\n  get hasUnloadedContent() {\n    return this.hasRenderContent && this.contentUnloaded;\n  }\n\n  get contentUnloaded() {\n    return this.contentState === TILE_CONTENT_STATE.UNLOADED;\n  }\n\n  get contentExpired() {\n    return this.contentState === TILE_CONTENT_STATE.EXPIRED;\n  }\n\n  get contentFailed() {\n    return this.contentState === TILE_CONTENT_STATE.FAILED;\n  }\n\n  getScreenSpaceError(frameState, useParentLodMetric) {\n    switch (this.tileset.type) {\n      case TILESET_TYPE.I3S:\n        return getProjectedRadius(this, frameState);\n\n      case TILESET_TYPE.TILES3D:\n        return getTiles3DScreenSpaceError(this, frameState, useParentLodMetric);\n\n      default:\n        throw new Error('Unsupported tileset type');\n    }\n  }\n\n  _getPriority() {\n    const traverser = this.tileset._traverser;\n    const {\n      skipLevelOfDetail\n    } = traverser.options;\n    const maySkipTile = this.refine === TILE_REFINEMENT.ADD || skipLevelOfDetail;\n\n    if (maySkipTile && !this.isVisible && this._visible !== undefined) {\n      return -1;\n    }\n\n    if (this.tileset._frameNumber - this._touchedFrame >= 1) {\n      return -1;\n    }\n\n    if (this.contentState === TILE_CONTENT_STATE.UNLOADED) {\n      return -1;\n    }\n\n    const parent = this.parent;\n    const useParentScreenSpaceError = parent && (!maySkipTile || this._screenSpaceError === 0.0 || parent.hasTilesetContent);\n    const screenSpaceError = useParentScreenSpaceError ? parent._screenSpaceError : this._screenSpaceError;\n    const rootScreenSpaceError = traverser.root ? traverser.root._screenSpaceError : 0.0;\n    return Math.max(rootScreenSpaceError - screenSpaceError, 0);\n  }\n\n  async loadContent() {\n    if (this.hasEmptyContent) {\n      return false;\n    }\n\n    if (this.content) {\n      return true;\n    }\n\n    const expired = this.contentExpired;\n\n    if (expired) {\n      this._expireDate = null;\n    }\n\n    this.contentState = TILE_CONTENT_STATE.LOADING;\n    const requestToken = await this.tileset._requestScheduler.scheduleRequest(this.id, this._getPriority.bind(this));\n\n    if (!requestToken) {\n      this.contentState = TILE_CONTENT_STATE.UNLOADED;\n      return false;\n    }\n\n    try {\n      const contentUrl = this.tileset.getTileUrl(this.contentUrl);\n      const loader = this.tileset.loader;\n      const options = { ...this.tileset.loadOptions,\n        [loader.id]: { ...this.tileset.loadOptions[loader.id],\n          isTileset: this.type === 'json',\n          ...this._getLoaderSpecificOptions(loader.id)\n        }\n      };\n      this.content = await load(contentUrl, loader, options);\n\n      if (this.tileset.options.contentLoader) {\n        await this.tileset.options.contentLoader(this);\n      }\n\n      if (this._isTileset()) {\n        this.tileset._initializeTileHeaders(this.content, this);\n      }\n\n      this.contentState = TILE_CONTENT_STATE.READY;\n\n      this._onContentLoaded();\n\n      return true;\n    } catch (error) {\n      this.contentState = TILE_CONTENT_STATE.FAILED;\n      throw error;\n    } finally {\n      requestToken.done();\n    }\n  }\n\n  unloadContent() {\n    if (this.content && this.content.destroy) {\n      this.content.destroy();\n    }\n\n    this.content = null;\n\n    if (this.header.content && this.header.content.destroy) {\n      this.header.content.destroy();\n    }\n\n    this.header.content = null;\n    this.contentState = TILE_CONTENT_STATE.UNLOADED;\n    return true;\n  }\n\n  updateVisibility(frameState, viewportIds) {\n    if (this._frameNumber === frameState.frameNumber) {\n      return;\n    }\n\n    const parent = this.parent;\n    const parentVisibilityPlaneMask = parent ? parent._visibilityPlaneMask : CullingVolume.MASK_INDETERMINATE;\n\n    if (this.tileset._traverser.options.updateTransforms) {\n      const parentTransform = parent ? parent.computedTransform : this.tileset.modelMatrix;\n\n      this._updateTransform(parentTransform);\n    }\n\n    this._distanceToCamera = this.distanceToTile(frameState);\n    this._screenSpaceError = this.getScreenSpaceError(frameState, false);\n    this._visibilityPlaneMask = this.visibility(frameState, parentVisibilityPlaneMask);\n    this._visible = this._visibilityPlaneMask !== CullingVolume.MASK_OUTSIDE;\n    this._inRequestVolume = this.insideViewerRequestVolume(frameState);\n    this._frameNumber = frameState.frameNumber;\n    this.viewportIds = viewportIds;\n  }\n\n  visibility(frameState, parentVisibilityPlaneMask) {\n    const {\n      cullingVolume\n    } = frameState;\n    const {\n      boundingVolume\n    } = this;\n    return cullingVolume.computeVisibilityWithPlaneMask(boundingVolume, parentVisibilityPlaneMask);\n  }\n\n  contentVisibility() {\n    return true;\n  }\n\n  distanceToTile(frameState) {\n    const boundingVolume = this.boundingVolume;\n    return Math.sqrt(Math.max(boundingVolume.distanceSquaredTo(frameState.camera.position), 0));\n  }\n\n  cameraSpaceZDepth(_ref) {\n    let {\n      camera\n    } = _ref;\n    const boundingVolume = this.boundingVolume;\n    scratchVector.subVectors(boundingVolume.center, camera.position);\n    return camera.direction.dot(scratchVector);\n  }\n\n  insideViewerRequestVolume(frameState) {\n    const viewerRequestVolume = this._viewerRequestVolume;\n    return !viewerRequestVolume || viewerRequestVolume.distanceSquaredTo(frameState.camera.position) <= 0;\n  }\n\n  updateExpiration() {\n    if (defined(this._expireDate) && this.contentReady && !this.hasEmptyContent) {\n      const now = Date.now();\n\n      if (Date.lessThan(this._expireDate, now)) {\n        this.contentState = TILE_CONTENT_STATE.EXPIRED;\n        this._expiredContent = this.content;\n      }\n    }\n  }\n\n  get extras() {\n    return this.header.extras;\n  }\n\n  _initializeLodMetric(header) {\n    if ('lodMetricType' in header) {\n      this.lodMetricType = header.lodMetricType;\n    } else {\n      this.lodMetricType = this.parent && this.parent.lodMetricType || this.tileset.lodMetricType;\n      console.warn(\"3D Tile: Required prop lodMetricType is undefined. Using parent lodMetricType\");\n    }\n\n    if ('lodMetricValue' in header) {\n      this.lodMetricValue = header.lodMetricValue;\n    } else {\n      this.lodMetricValue = this.parent && this.parent.lodMetricValue || this.tileset.lodMetricValue;\n      console.warn('3D Tile: Required prop lodMetricValue is undefined. Using parent lodMetricValue');\n    }\n  }\n\n  _initializeTransforms(tileHeader) {\n    this.transform = tileHeader.transform ? new Matrix4(tileHeader.transform) : new Matrix4();\n    const parent = this.parent;\n    const tileset = this.tileset;\n    const parentTransform = parent && parent.computedTransform ? parent.computedTransform.clone() : tileset.modelMatrix.clone();\n    this.computedTransform = new Matrix4(parentTransform).multiplyRight(this.transform);\n    const parentInitialTransform = parent && parent._initialTransform ? parent._initialTransform.clone() : new Matrix4();\n    this._initialTransform = new Matrix4(parentInitialTransform).multiplyRight(this.transform);\n  }\n\n  _initializeBoundingVolumes(tileHeader) {\n    this._contentBoundingVolume = null;\n    this._viewerRequestVolume = null;\n\n    this._updateBoundingVolume(tileHeader);\n  }\n\n  _initializeContent(tileHeader) {\n    this.content = {\n      _tileset: this.tileset,\n      _tile: this\n    };\n    this.hasEmptyContent = true;\n    this.contentState = TILE_CONTENT_STATE.UNLOADED;\n    this.hasTilesetContent = false;\n\n    if (tileHeader.contentUrl) {\n      this.content = null;\n      this.hasEmptyContent = false;\n    }\n  }\n\n  _initializeRenderingState(header) {\n    this.depth = header.level || (this.parent ? this.parent.depth + 1 : 0);\n    this._shouldRefine = false;\n    this._distanceToCamera = 0;\n    this._centerZDepth = 0;\n    this._screenSpaceError = 0;\n    this._visibilityPlaneMask = CullingVolume.MASK_INDETERMINATE;\n    this._visible = undefined;\n    this._inRequestVolume = false;\n    this._stackLength = 0;\n    this._selectionDepth = 0;\n    this._frameNumber = 0;\n    this._touchedFrame = 0;\n    this._visitedFrame = 0;\n    this._selectedFrame = 0;\n    this._requestedFrame = 0;\n    this._priority = 0.0;\n  }\n\n  _getRefine(refine) {\n    return refine || this.parent && this.parent.refine || TILE_REFINEMENT.REPLACE;\n  }\n\n  _isTileset() {\n    return this.contentUrl.indexOf('.json') !== -1;\n  }\n\n  _onContentLoaded() {\n    switch (this.content && this.content.type) {\n      case 'vctr':\n      case 'geom':\n        this.tileset._traverser.disableSkipLevelOfDetail = true;\n        break;\n\n      default:\n    }\n\n    if (this._isTileset()) {\n      this.hasTilesetContent = true;\n    }\n  }\n\n  _updateBoundingVolume(header) {\n    this.boundingVolume = createBoundingVolume(header.boundingVolume, this.computedTransform, this.boundingVolume);\n    const content = header.content;\n\n    if (!content) {\n      return;\n    }\n\n    if (content.boundingVolume) {\n      this._contentBoundingVolume = createBoundingVolume(content.boundingVolume, this.computedTransform, this._contentBoundingVolume);\n    }\n\n    if (header.viewerRequestVolume) {\n      this._viewerRequestVolume = createBoundingVolume(header.viewerRequestVolume, this.computedTransform, this._viewerRequestVolume);\n    }\n  }\n\n  _updateTransform() {\n    let parentTransform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Matrix4();\n    const computedTransform = parentTransform.clone().multiplyRight(this.transform);\n    const didTransformChange = !computedTransform.equals(this.computedTransform);\n\n    if (!didTransformChange) {\n      return;\n    }\n\n    this.computedTransform = computedTransform;\n\n    this._updateBoundingVolume(this.header);\n  }\n\n  _getLoaderSpecificOptions(loaderId) {\n    switch (loaderId) {\n      case 'i3s':\n        return { ...this.tileset.options.i3s,\n          tile: this.header,\n          tileset: this.tileset.tileset,\n          isTileHeader: false\n        };\n\n      case '3d-tiles':\n      case 'cesium-ion':\n      default:\n        return get3dTilesOptions(this.tileset.tileset);\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Vector3","Matrix4","CullingVolume","load","TILE_REFINEMENT","TILE_CONTENT_STATE","TILESET_TYPE","createBoundingVolume","getTiles3DScreenSpaceError","getProjectedRadius","get3dTilesOptions","TilesetTraverser","scratchVector","defined","x","undefined","TileHeader","constructor","tileset","header","parentHeader","extendedId","_defineProperty","id","url","parent","refine","_getRefine","type","contentUrl","lodMetricType","lodMetricValue","boundingVolume","content","contentState","UNLOADED","gpuMemoryUsageInBytes","children","hasEmptyContent","hasTilesetContent","depth","viewportIds","userData","extensions","_priority","_touchedFrame","_visitedFrame","_selectedFrame","_requestedFrame","_screenSpaceError","_cacheNode","_frameNumber","traverser","_shouldRefine","_distanceToCamera","_centerZDepth","_visible","_inRequestVolume","_stackLength","_selectionDepth","_initialTransform","transform","_initializeLodMetric","_initializeTransforms","_initializeBoundingVolumes","_initializeContent","_initializeRenderingState","_lodJudge","_expireDate","_expiredContent","Object","seal","destroy","isDestroyed","selected","isVisible","isVisibleAndInRequestVolume","hasRenderContent","hasChildren","length","contentReady","READY","contentAvailable","Boolean","contentFailed","hasUnloadedContent","contentUnloaded","contentExpired","EXPIRED","FAILED","getScreenSpaceError","frameState","useParentLodMetric","I3S","TILES3D","Error","_getPriority","_traverser","skipLevelOfDetail","options","maySkipTile","ADD","useParentScreenSpaceError","screenSpaceError","rootScreenSpaceError","root","Math","max","loadContent","expired","LOADING","requestToken","_requestScheduler","scheduleRequest","bind","getTileUrl","loader","loadOptions","isTileset","_getLoaderSpecificOptions","contentLoader","_isTileset","_initializeTileHeaders","_onContentLoaded","error","done","unloadContent","updateVisibility","frameNumber","parentVisibilityPlaneMask","_visibilityPlaneMask","MASK_INDETERMINATE","updateTransforms","parentTransform","computedTransform","modelMatrix","_updateTransform","distanceToTile","visibility","MASK_OUTSIDE","insideViewerRequestVolume","cullingVolume","computeVisibilityWithPlaneMask","contentVisibility","sqrt","distanceSquaredTo","camera","position","cameraSpaceZDepth","subVectors","center","direction","dot","viewerRequestVolume","_viewerRequestVolume","updateExpiration","now","Date","lessThan","extras","console","warn","tileHeader","clone","multiplyRight","parentInitialTransform","_contentBoundingVolume","_updateBoundingVolume","_tileset","_tile","level","REPLACE","indexOf","disableSkipLevelOfDetail","didTransformChange","equals","loaderId","i3s","tile","isTileHeader"],"sources":["../../../src/tileset/tile-3d.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\nimport {Vector3, Matrix4} from '@math.gl/core';\nimport {CullingVolume} from '@math.gl/culling';\n\nimport {load} from '@loaders.gl/core';\nimport {TILE_REFINEMENT, TILE_CONTENT_STATE, TILESET_TYPE} from '../constants';\n\nimport {FrameState} from './helpers/frame-state';\nimport {createBoundingVolume} from './helpers/bounding-volume';\nimport {getTiles3DScreenSpaceError} from './helpers/tiles-3d-lod';\nimport {getProjectedRadius} from './helpers/i3s-lod';\nimport {get3dTilesOptions} from './helpers/3d-tiles-options';\nimport TilesetTraverser from './traversers/tileset-traverser';\n\n// Note: circular dependency\nimport type Tileset3D from './tileset-3d';\n\nconst scratchVector = new Vector3();\n\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\n\n/**\n * @param tileset - Tileset3D instance\n * @param header - tile header - JSON loaded from a dataset\n * @param parentHeader - parent TileHeader instance\n * @param extendedId - optional ID to separate copies of a tile for different viewports.\n *                              const extendedId = `${tile.id}-${frameState.viewport.id}`;\n */\nexport type TileHeaderProps = {\n  tileset: Tileset3D;\n  header: Object;\n  parentHeader: TileHeader;\n  extendedId: string;\n};\n\n/**\n * A Tile3DHeader represents a tile as Tileset3D. When a tile is first created, its content is not loaded;\n * the content is loaded on-demand when needed based on the view.\n * Do not construct this directly, instead access tiles through {@link Tileset3D#tileVisible}.\n */\nexport default class TileHeader {\n  tileset: Tileset3D;\n  header: any;\n  id: string;\n  url: string;\n  parent: TileHeader;\n  refine: number;\n  type: string;\n  contentUrl: string;\n  lodMetricType: string;\n  lodMetricValue: number;\n  boundingVolume: any;\n  content: any;\n  contentState: any;\n  gpuMemoryUsageInBytes: number;\n  children: TileHeader[];\n  depth: number;\n  viewportIds: any[];\n  transform: Matrix4;\n  extensions: any;\n\n  // Container to store application specific data\n  userData: {[key: string]: any};\n  computedTransform: any;\n  hasEmptyContent: boolean;\n  hasTilesetContent: boolean;\n\n  traverser: object;\n\n  // @ts-ignore\n  private _cacheNode: any;\n  private _frameNumber: any;\n  // TODO i3s specific, needs to remove\n  // @ts-ignore\n  private _lodJudge: any;\n  // TODO Cesium 3d tiles specific\n  private _expireDate: any;\n  private _expiredContent: any;\n  // @ts-ignore\n  private _shouldRefine: boolean;\n\n  // Members this are updated every frame for tree traversal and rendering optimizations:\n  // @ts-ignore\n  private _distanceToCamera: number;\n  // @ts-ignore\n  private _centerZDepth: number;\n  private _screenSpaceError: number;\n  private _visibilityPlaneMask: any;\n  private _visible?: boolean;\n  private _inRequestVolume: boolean;\n\n  // @ts-ignore\n  private _stackLength: number;\n  // @ts-ignore\n  private _selectionDepth: number;\n\n  // @ts-ignore\n  private _touchedFrame: number;\n  // @ts-ignore\n  private _visitedFrame: number;\n  private _selectedFrame: number;\n  // @ts-ignore\n  private _requestedFrame: number;\n\n  // @ts-ignore\n  private _priority: number;\n\n  private _contentBoundingVolume: any;\n  private _viewerRequestVolume: any;\n\n  _initialTransform: Matrix4;\n\n  /**\n   * @constructs\n   * Create a TileHeader instance\n   * @param tileset - Tileset3D instance\n   * @param header - tile header - JSON loaded from a dataset\n   * @param parentHeader - parent TileHeader instance\n   * @param extendedId - optional ID to separate copies of a tile for different viewports.\n   *    const extendedId = `${tile.id}-${frameState.viewport.id}`;\n   */\n  // eslint-disable-next-line max-statements\n  constructor(\n    tileset: Tileset3D,\n    header: {[key: string]: any},\n    parentHeader?: TileHeader,\n    extendedId = ''\n  ) {\n    // PUBLIC MEMBERS\n    // original tile data\n    this.header = header;\n\n    // The tileset containing this tile.\n    this.tileset = tileset;\n    this.id = extendedId || header.id;\n    this.url = header.url;\n\n    // This tile's parent or `undefined` if this tile is the root.\n    // @ts-ignore\n    this.parent = parentHeader;\n    this.refine = this._getRefine(header.refine);\n    this.type = header.type;\n    this.contentUrl = header.contentUrl;\n\n    // The error, in meters, introduced if this tile is rendered and its children are not.\n    this.lodMetricType = 'geometricError';\n    this.lodMetricValue = 0;\n\n    // Specifies the type of refine that is used when traversing this tile for rendering.\n    this.boundingVolume = null;\n\n    // The tile's content.  This represents the actual tile's payload,\n    // not the content's metadata in the tileset JSON file.\n    this.content = null;\n    this.contentState = TILE_CONTENT_STATE.UNLOADED;\n    this.gpuMemoryUsageInBytes = 0;\n\n    // The tile's children - an array of Tile3D objects.\n    this.children = [];\n\n    this.hasEmptyContent = false;\n    this.hasTilesetContent = false;\n\n    this.depth = 0;\n    this.viewportIds = [];\n\n    // Container to store application specific data\n    this.userData = {};\n    this.extensions = null;\n\n    // PRIVATE MEMBERS\n    this._priority = 0;\n    this._touchedFrame = 0;\n    this._visitedFrame = 0;\n    this._selectedFrame = 0;\n    this._requestedFrame = 0;\n    this._screenSpaceError = 0;\n\n    this._cacheNode = null;\n    this._frameNumber = null;\n    this._cacheNode = null;\n\n    this.traverser = new TilesetTraverser({});\n    this._shouldRefine = false;\n    this._distanceToCamera = 0;\n    this._centerZDepth = 0;\n    this._visible = undefined;\n    this._inRequestVolume = false;\n    this._stackLength = 0;\n    this._selectionDepth = 0;\n    this._initialTransform = new Matrix4();\n    this.transform = new Matrix4();\n\n    this._initializeLodMetric(header);\n    this._initializeTransforms(header);\n    this._initializeBoundingVolumes(header);\n    this._initializeContent(header);\n    this._initializeRenderingState(header);\n\n    // TODO i3s specific, needs to remove\n    this._lodJudge = null;\n\n    // TODO Cesium 3d tiles specific\n    this._expireDate = null;\n    this._expiredContent = null;\n\n    Object.seal(this);\n  }\n\n  destroy() {\n    this.header = null;\n  }\n\n  isDestroyed() {\n    return this.header === null;\n  }\n\n  get selected() {\n    return this._selectedFrame === this.tileset._frameNumber;\n  }\n\n  get isVisible() {\n    return this._visible;\n  }\n\n  get isVisibleAndInRequestVolume() {\n    return this._visible && this._inRequestVolume;\n  }\n\n  /** Returns true if tile is not an empty tile and not an external tileset */\n  get hasRenderContent() {\n    return !this.hasEmptyContent && !this.hasTilesetContent;\n  }\n\n  /** Returns true if tile has children */\n  get hasChildren() {\n    return this.children.length > 0 || (this.header.children && this.header.children.length > 0);\n  }\n\n  /**\n   * Determines if the tile's content is ready. This is automatically `true` for\n   * tiles with empty content.\n   */\n  get contentReady() {\n    return this.contentState === TILE_CONTENT_STATE.READY || this.hasEmptyContent;\n  }\n\n  /**\n   * Determines if the tile has available content to render.  `true` if the tile's\n   * content is ready or if it has expired content this renders while new content loads; otherwise,\n   */\n  get contentAvailable() {\n    return Boolean(\n      (this.contentReady && this.hasRenderContent) || (this._expiredContent && !this.contentFailed)\n    );\n  }\n\n  /** Returns true if tile has renderable content but it's unloaded */\n  get hasUnloadedContent() {\n    return this.hasRenderContent && this.contentUnloaded;\n  }\n\n  /**\n   * Determines if the tile's content has not be requested. `true` if tile's\n   * content has not be requested; otherwise, `false`.\n   */\n  get contentUnloaded() {\n    return this.contentState === TILE_CONTENT_STATE.UNLOADED;\n  }\n\n  /**\n   * Determines if the tile's content is expired. `true` if tile's\n   * content is expired; otherwise, `false`.\n   */\n  get contentExpired() {\n    return this.contentState === TILE_CONTENT_STATE.EXPIRED;\n  }\n\n  // Determines if the tile's content failed to load.  `true` if the tile's\n  // content failed to load; otherwise, `false`.\n  get contentFailed() {\n    return this.contentState === TILE_CONTENT_STATE.FAILED;\n  }\n\n  /** Get the tile's screen space error. */\n  getScreenSpaceError(frameState, useParentLodMetric) {\n    switch (this.tileset.type) {\n      case TILESET_TYPE.I3S:\n        return getProjectedRadius(this, frameState);\n      case TILESET_TYPE.TILES3D:\n        return getTiles3DScreenSpaceError(this, frameState, useParentLodMetric);\n      default:\n        // eslint-disable-next-line\n        throw new Error('Unsupported tileset type');\n    }\n  }\n\n  /*\n   * If skipLevelOfDetail is off try to load child tiles as soon as possible so that their parent can refine sooner.\n   * Tiles are prioritized by screen space error.\n   */\n  // eslint-disable-next-line complexity\n  _getPriority() {\n    const traverser = this.tileset._traverser;\n    const {skipLevelOfDetail} = traverser.options;\n\n    /*\n     * Tiles that are outside of the camera's frustum could be skipped if we are in 'ADD' mode\n     * or if we are using 'Skip Traversal' in 'REPLACE' mode.\n     * Otherewise, all 'touched' child tiles have to be loaded and displayed,\n     * this may include tiles that are outide of the camera frustum (so that we can hide the parent tile).\n     */\n    const maySkipTile = this.refine === TILE_REFINEMENT.ADD || skipLevelOfDetail;\n\n    // Check if any reason to abort\n    if (maySkipTile && !this.isVisible && this._visible !== undefined) {\n      return -1;\n    }\n    // Condition used in `cancelOutOfViewRequests` function in CesiumJS/Cesium3DTileset.js\n    if (this.tileset._frameNumber - this._touchedFrame >= 1) {\n      return -1;\n    }\n    if (this.contentState === TILE_CONTENT_STATE.UNLOADED) {\n      return -1;\n    }\n\n    // Based on the priority function `getPriorityReverseScreenSpaceError` in CesiumJS. Scheduling priority is based on the parent's screen space error when possible.\n    const parent = this.parent;\n    const useParentScreenSpaceError =\n      parent && (!maySkipTile || this._screenSpaceError === 0.0 || parent.hasTilesetContent);\n    const screenSpaceError = useParentScreenSpaceError\n      ? parent._screenSpaceError\n      : this._screenSpaceError;\n\n    const rootScreenSpaceError = traverser.root ? traverser.root._screenSpaceError : 0.0;\n\n    // Map higher SSE to lower values (e.g. root tile is highest priority)\n    return Math.max(rootScreenSpaceError - screenSpaceError, 0);\n  }\n\n  /**\n   *  Requests the tile's content.\n   * The request may not be made if the Request Scheduler can't prioritize it.\n   */\n  // eslint-disable-next-line max-statements, complexity\n  async loadContent(): Promise<boolean> {\n    if (this.hasEmptyContent) {\n      return false;\n    }\n\n    if (this.content) {\n      return true;\n    }\n\n    const expired = this.contentExpired;\n\n    if (expired) {\n      this._expireDate = null;\n    }\n\n    this.contentState = TILE_CONTENT_STATE.LOADING;\n\n    const requestToken = await this.tileset._requestScheduler.scheduleRequest(\n      this.id,\n      this._getPriority.bind(this)\n    );\n\n    if (!requestToken) {\n      // cancelled\n      this.contentState = TILE_CONTENT_STATE.UNLOADED;\n      return false;\n    }\n\n    try {\n      const contentUrl = this.tileset.getTileUrl(this.contentUrl);\n      // The content can be a binary tile ot a JSON tileset\n      const loader = this.tileset.loader;\n      const options = {\n        ...this.tileset.loadOptions,\n        [loader.id]: {\n          ...this.tileset.loadOptions[loader.id],\n          isTileset: this.type === 'json',\n          ...this._getLoaderSpecificOptions(loader.id)\n        }\n      };\n\n      this.content = await load(contentUrl, loader, options);\n\n      if (this.tileset.options.contentLoader) {\n        await this.tileset.options.contentLoader(this);\n      }\n\n      if (this._isTileset()) {\n        // Add tile headers for the nested tilset's subtree\n        // Async update of the tree should be fine since there would never be edits to the same node\n        // TODO - we need to capture the child tileset's URL\n        this.tileset._initializeTileHeaders(this.content, this);\n      }\n\n      this.contentState = TILE_CONTENT_STATE.READY;\n      this._onContentLoaded();\n      return true;\n    } catch (error) {\n      // Tile is unloaded before the content finishes loading\n      this.contentState = TILE_CONTENT_STATE.FAILED;\n      throw error;\n    } finally {\n      requestToken.done();\n    }\n  }\n\n  // Unloads the tile's content.\n  unloadContent() {\n    if (this.content && this.content.destroy) {\n      this.content.destroy();\n    }\n    this.content = null;\n    if (this.header.content && this.header.content.destroy) {\n      this.header.content.destroy();\n    }\n    this.header.content = null;\n    this.contentState = TILE_CONTENT_STATE.UNLOADED;\n    return true;\n  }\n\n  /**\n   * Update the tile's visibility\n   * @param {Object} frameState - frame state for tile culling\n   * @param {string[]} viewportIds - a list of viewport ids that show this tile\n   * @return {void}\n   */\n  updateVisibility(frameState, viewportIds) {\n    if (this._frameNumber === frameState.frameNumber) {\n      // Return early if visibility has already been checked during the traversal.\n      // The visibility may have already been checked if the cullWithChildrenBounds optimization is used.\n      return;\n    }\n\n    const parent = this.parent;\n    const parentVisibilityPlaneMask = parent\n      ? parent._visibilityPlaneMask\n      : CullingVolume.MASK_INDETERMINATE;\n\n    if (this.tileset._traverser.options.updateTransforms) {\n      const parentTransform = parent ? parent.computedTransform : this.tileset.modelMatrix;\n      this._updateTransform(parentTransform);\n    }\n\n    this._distanceToCamera = this.distanceToTile(frameState);\n    this._screenSpaceError = this.getScreenSpaceError(frameState, false);\n    this._visibilityPlaneMask = this.visibility(frameState, parentVisibilityPlaneMask); // Use parent's plane mask to speed up visibility test\n    this._visible = this._visibilityPlaneMask !== CullingVolume.MASK_OUTSIDE;\n    this._inRequestVolume = this.insideViewerRequestVolume(frameState);\n\n    this._frameNumber = frameState.frameNumber;\n    this.viewportIds = viewportIds;\n  }\n\n  // Determines whether the tile's bounding volume intersects the culling volume.\n  // @param {FrameState} frameState The frame state.\n  // @param {Number} parentVisibilityPlaneMask The parent's plane mask to speed up the visibility check.\n  // @returns {Number} A plane mask as described above in {@link CullingVolume#computeVisibilityWithPlaneMask}.\n  visibility(frameState, parentVisibilityPlaneMask) {\n    const {cullingVolume} = frameState;\n    const {boundingVolume} = this;\n\n    // TODO Cesium specific - restore clippingPlanes\n    // const {clippingPlanes, clippingPlanesOriginMatrix} = tileset;\n    // if (clippingPlanes && clippingPlanes.enabled) {\n    //   const intersection = clippingPlanes.computeIntersectionWithBoundingVolume(\n    //     boundingVolume,\n    //     clippingPlanesOriginMatrix\n    //   );\n    //   this._isClipped = intersection !== Intersect.INSIDE;\n    //   if (intersection === Intersect.OUTSIDE) {\n    //     return CullingVolume.MASK_OUTSIDE;\n    //   }\n    // }\n\n    // return cullingVolume.computeVisibilityWithPlaneMask(boundingVolume, parentVisibilityPlaneMask);\n    return cullingVolume.computeVisibilityWithPlaneMask(boundingVolume, parentVisibilityPlaneMask);\n  }\n\n  // Assuming the tile's bounding volume intersects the culling volume, determines\n  // whether the tile's content's bounding volume intersects the culling volume.\n  // @param {FrameState} frameState The frame state.\n  // @returns {Intersect} The result of the intersection: the tile's content is completely outside, completely inside, or intersecting the culling volume.\n  contentVisibility() {\n    return true;\n\n    // TODO restore\n    /*\n    // Assumes the tile's bounding volume intersects the culling volume already, so\n    // just return Intersect.INSIDE if there is no content bounding volume.\n    if (!defined(this.contentBoundingVolume)) {\n      return Intersect.INSIDE;\n    }\n\n    if (this._visibilityPlaneMask === CullingVolume.MASK_INSIDE) {\n      // The tile's bounding volume is completely inside the culling volume so\n      // the content bounding volume must also be inside.\n      return Intersect.INSIDE;\n    }\n\n    // PERFORMANCE_IDEA: is it possible to burn less CPU on this test since we know the\n    // tile's (not the content's) bounding volume intersects the culling volume?\n    const cullingVolume = frameState.cullingVolume;\n    const boundingVolume = tile.contentBoundingVolume;\n\n    const tileset = this.tileset;\n    const clippingPlanes = tileset.clippingPlanes;\n    if (defined(clippingPlanes) && clippingPlanes.enabled) {\n      const intersection = clippingPlanes.computeIntersectionWithBoundingVolume(\n        boundingVolume,\n        tileset.clippingPlanesOriginMatrix\n      );\n      this._isClipped = intersection !== Intersect.INSIDE;\n      if (intersection === Intersect.OUTSIDE) {\n        return Intersect.OUTSIDE;\n      }\n    }\n\n    return cullingVolume.computeVisibility(boundingVolume);\n    */\n  }\n\n  /**\n   * Computes the (potentially approximate) distance from the closest point of the tile's bounding volume to the camera.\n   * @param frameState The frame state.\n   * @returns {Number} The distance, in meters, or zero if the camera is inside the bounding volume.\n   */\n  distanceToTile(frameState: FrameState): number {\n    const boundingVolume = this.boundingVolume;\n    return Math.sqrt(Math.max(boundingVolume.distanceSquaredTo(frameState.camera.position), 0));\n  }\n\n  /**\n   * Computes the tile's camera-space z-depth.\n   * @param frameState The frame state.\n   * @returns The distance, in meters.\n   */\n  cameraSpaceZDepth({camera}): number {\n    const boundingVolume = this.boundingVolume; // Gets the underlying OrientedBoundingBox or BoundingSphere\n    scratchVector.subVectors(boundingVolume.center, camera.position);\n    return camera.direction.dot(scratchVector);\n  }\n\n  /**\n   * Checks if the camera is inside the viewer request volume.\n   * @param {FrameState} frameState The frame state.\n   * @returns {Boolean} Whether the camera is inside the volume.\n   */\n  insideViewerRequestVolume(frameState: FrameState) {\n    const viewerRequestVolume = this._viewerRequestVolume;\n    return (\n      !viewerRequestVolume || viewerRequestVolume.distanceSquaredTo(frameState.camera.position) <= 0\n    );\n  }\n\n  // TODO Cesium specific\n\n  // Update whether the tile has expired.\n  updateExpiration() {\n    if (defined(this._expireDate) && this.contentReady && !this.hasEmptyContent) {\n      const now = Date.now();\n      // @ts-ignore Date.lessThan - replace with ms compare?\n      if (Date.lessThan(this._expireDate, now)) {\n        this.contentState = TILE_CONTENT_STATE.EXPIRED;\n        this._expiredContent = this.content;\n      }\n    }\n  }\n\n  get extras() {\n    return this.header.extras;\n  }\n\n  // INTERNAL METHODS\n\n  _initializeLodMetric(header) {\n    if ('lodMetricType' in header) {\n      this.lodMetricType = header.lodMetricType;\n    } else {\n      this.lodMetricType = (this.parent && this.parent.lodMetricType) || this.tileset.lodMetricType;\n      // eslint-disable-next-line\n      console.warn(`3D Tile: Required prop lodMetricType is undefined. Using parent lodMetricType`);\n    }\n\n    // This is used to compute screen space error, i.e., the error measured in pixels.\n    if ('lodMetricValue' in header) {\n      this.lodMetricValue = header.lodMetricValue;\n    } else {\n      this.lodMetricValue =\n        (this.parent && this.parent.lodMetricValue) || this.tileset.lodMetricValue;\n      // eslint-disable-next-line\n      console.warn(\n        '3D Tile: Required prop lodMetricValue is undefined. Using parent lodMetricValue'\n      );\n    }\n  }\n\n  _initializeTransforms(tileHeader) {\n    // The local transform of this tile.\n    this.transform = tileHeader.transform ? new Matrix4(tileHeader.transform) : new Matrix4();\n\n    const parent = this.parent;\n    const tileset = this.tileset;\n\n    const parentTransform =\n      parent && parent.computedTransform\n        ? parent.computedTransform.clone()\n        : tileset.modelMatrix.clone();\n    this.computedTransform = new Matrix4(parentTransform).multiplyRight(this.transform);\n\n    const parentInitialTransform =\n      parent && parent._initialTransform ? parent._initialTransform.clone() : new Matrix4();\n    this._initialTransform = new Matrix4(parentInitialTransform).multiplyRight(this.transform);\n  }\n\n  _initializeBoundingVolumes(tileHeader) {\n    this._contentBoundingVolume = null;\n    this._viewerRequestVolume = null;\n\n    this._updateBoundingVolume(tileHeader);\n  }\n\n  _initializeContent(tileHeader) {\n    // Empty tile by default\n    this.content = {_tileset: this.tileset, _tile: this};\n    this.hasEmptyContent = true;\n    this.contentState = TILE_CONTENT_STATE.UNLOADED;\n\n    // When `true`, the tile's content points to an external tileset.\n    // This is `false` until the tile's content is loaded.\n    this.hasTilesetContent = false;\n\n    if (tileHeader.contentUrl) {\n      this.content = null;\n      this.hasEmptyContent = false;\n    }\n  }\n\n  // TODO - remove anything not related to basic visibility detection\n  _initializeRenderingState(header) {\n    this.depth = header.level || (this.parent ? this.parent.depth + 1 : 0);\n    this._shouldRefine = false;\n\n    // Members this are updated every frame for tree traversal and rendering optimizations:\n    this._distanceToCamera = 0;\n    this._centerZDepth = 0;\n    this._screenSpaceError = 0;\n    this._visibilityPlaneMask = CullingVolume.MASK_INDETERMINATE;\n    this._visible = undefined;\n    this._inRequestVolume = false;\n\n    this._stackLength = 0;\n    this._selectionDepth = 0;\n\n    this._frameNumber = 0;\n    this._touchedFrame = 0;\n    this._visitedFrame = 0;\n    this._selectedFrame = 0;\n    this._requestedFrame = 0;\n\n    this._priority = 0.0;\n  }\n\n  _getRefine(refine) {\n    // Inherit from parent tile if omitted.\n    return refine || (this.parent && this.parent.refine) || TILE_REFINEMENT.REPLACE;\n  }\n\n  _isTileset() {\n    return this.contentUrl.indexOf('.json') !== -1;\n  }\n\n  _onContentLoaded() {\n    // Vector and Geometry tile rendering do not support the skip LOD optimization.\n    switch (this.content && this.content.type) {\n      case 'vctr':\n      case 'geom':\n        // @ts-ignore\n        this.tileset._traverser.disableSkipLevelOfDetail = true;\n        break;\n      default:\n    }\n\n    // The content may be tileset json\n    if (this._isTileset()) {\n      this.hasTilesetContent = true;\n    }\n  }\n\n  _updateBoundingVolume(header) {\n    // Update the bounding volumes\n    this.boundingVolume = createBoundingVolume(\n      header.boundingVolume,\n      this.computedTransform,\n      this.boundingVolume\n    );\n\n    const content = header.content;\n    if (!content) {\n      return;\n    }\n\n    // TODO Cesium specific\n    // Non-leaf tiles may have a content bounding-volume, which is a tight-fit bounding volume\n    // around only the features in the tile. This box is useful for culling for rendering,\n    // but not for culling for traversing the tree since it does not guarantee spatial coherence, i.e.,\n    // since it only bounds features in the tile, not the entire tile, children may be\n    // outside of this box.\n    if (content.boundingVolume) {\n      this._contentBoundingVolume = createBoundingVolume(\n        content.boundingVolume,\n        this.computedTransform,\n        this._contentBoundingVolume\n      );\n    }\n    if (header.viewerRequestVolume) {\n      this._viewerRequestVolume = createBoundingVolume(\n        header.viewerRequestVolume,\n        this.computedTransform,\n        this._viewerRequestVolume\n      );\n    }\n  }\n\n  // Update the tile's transform. The transform is applied to the tile's bounding volumes.\n  _updateTransform(parentTransform = new Matrix4()) {\n    const computedTransform = parentTransform.clone().multiplyRight(this.transform);\n    const didTransformChange = !computedTransform.equals(this.computedTransform);\n\n    if (!didTransformChange) {\n      return;\n    }\n\n    this.computedTransform = computedTransform;\n\n    this._updateBoundingVolume(this.header);\n  }\n\n  // Get options which are applicable only for the particular loader\n  _getLoaderSpecificOptions(loaderId) {\n    switch (loaderId) {\n      case 'i3s':\n        return {\n          ...this.tileset.options.i3s,\n          tile: this.header,\n          tileset: this.tileset.tileset,\n          isTileHeader: false\n        };\n      case '3d-tiles':\n      case 'cesium-ion':\n      default:\n        return get3dTilesOptions(this.tileset.tileset);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}