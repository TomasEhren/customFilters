{"ast":null,"code":"import { log } from '@deck.gl/core';\nexport default class Tile2DHeader {\n  constructor(_ref) {\n    let {\n      x,\n      y,\n      z\n    } = _ref;\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.isVisible = false;\n    this.isSelected = false;\n    this.parent = null;\n    this.children = [];\n    this.content = null;\n    this._loaderId = 0;\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n  }\n\n  get data() {\n    return this.isLoading ? this._loader.then(() => this.data) : this.content;\n  }\n\n  get isLoaded() {\n    return this._isLoaded && !this._needsReload;\n  }\n\n  get isLoading() {\n    return Boolean(this._loader) && !this._isCancelled;\n  }\n\n  get needsReload() {\n    return this._needsReload || this._isCancelled;\n  }\n\n  get byteLength() {\n    const result = this.content ? this.content.byteLength : 0;\n\n    if (!Number.isFinite(result)) {\n      log.error('byteLength not defined in tile data')();\n    }\n\n    return result;\n  }\n\n  async _loadData(_ref2) {\n    let {\n      getData,\n      requestScheduler,\n      onLoad,\n      onError\n    } = _ref2;\n    const {\n      x,\n      y,\n      z,\n      bbox\n    } = this;\n    const loaderId = this._loaderId;\n    this._abortController = new AbortController();\n    const {\n      signal\n    } = this._abortController;\n    const requestToken = await requestScheduler.scheduleRequest(this, tile => {\n      return tile.isSelected ? 1 : -1;\n    });\n\n    if (!requestToken) {\n      this._isCancelled = true;\n      return;\n    }\n\n    if (this._isCancelled) {\n      requestToken.done();\n      return;\n    }\n\n    let tileData = null;\n    let error;\n\n    try {\n      tileData = await getData({\n        x,\n        y,\n        z,\n        bbox,\n        signal\n      });\n    } catch (err) {\n      error = err || true;\n    } finally {\n      requestToken.done();\n    }\n\n    if (loaderId !== this._loaderId) {\n      return;\n    }\n\n    this._loader = undefined;\n    this.content = tileData;\n\n    if (this._isCancelled && !tileData) {\n      this._isLoaded = false;\n      return;\n    }\n\n    this._isLoaded = true;\n    this._isCancelled = false;\n\n    if (error) {\n      onError(error, this);\n    } else {\n      onLoad(this);\n    }\n  }\n\n  loadData(opts) {\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n    this._loaderId++;\n    this._loader = this._loadData(opts);\n    return this._loader;\n  }\n\n  setNeedsReload() {\n    if (this.isLoading) {\n      this.abort();\n      this._loader = undefined;\n    }\n\n    this._needsReload = true;\n  }\n\n  abort() {\n    if (this.isLoaded) {\n      return;\n    }\n\n    this._isCancelled = true;\n\n    this._abortController.abort();\n  }\n\n}","map":{"version":3,"mappings":"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","names":["log","Tile2DHeader","constructor","x","y","z","isVisible","isSelected","parent","children","content","_loaderId","_isLoaded","_isCancelled","_needsReload","data","isLoading","_loader","then","isLoaded","Boolean","needsReload","byteLength","result","Number","isFinite","error","_loadData","getData","requestScheduler","onLoad","onError","bbox","loaderId","_abortController","AbortController","signal","requestToken","scheduleRequest","tile","done","tileData","err","undefined","loadData","opts","setNeedsReload","abort"],"sources":["../../../src/tile-layer/tile-2d-header.js"],"sourcesContent":["/* eslint-env browser */\nimport {log} from '@deck.gl/core';\n\nexport default class Tile2DHeader {\n  constructor({x, y, z}) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.isVisible = false;\n    this.isSelected = false;\n    this.parent = null;\n    this.children = [];\n\n    this.content = null;\n\n    this._loaderId = 0;\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n  }\n\n  get data() {\n    return this.isLoading ? this._loader.then(() => this.data) : this.content;\n  }\n\n  get isLoaded() {\n    return this._isLoaded && !this._needsReload;\n  }\n\n  get isLoading() {\n    return Boolean(this._loader) && !this._isCancelled;\n  }\n\n  get needsReload() {\n    return this._needsReload || this._isCancelled;\n  }\n\n  get byteLength() {\n    const result = this.content ? this.content.byteLength : 0;\n    if (!Number.isFinite(result)) {\n      log.error('byteLength not defined in tile data')();\n    }\n    return result;\n  }\n\n  /* eslint-disable max-statements */\n  async _loadData({getData, requestScheduler, onLoad, onError}) {\n    const {x, y, z, bbox} = this;\n    const loaderId = this._loaderId;\n\n    this._abortController = new AbortController(); // eslint-disable-line no-undef\n    const {signal} = this._abortController;\n\n    const requestToken = await requestScheduler.scheduleRequest(this, tile => {\n      return tile.isSelected ? 1 : -1;\n    });\n\n    if (!requestToken) {\n      this._isCancelled = true;\n      return;\n    }\n    // A tile can be cancelled while being scheduled\n    if (this._isCancelled) {\n      requestToken.done();\n      return;\n    }\n\n    let tileData = null;\n    let error;\n    try {\n      tileData = await getData({x, y, z, bbox, signal});\n    } catch (err) {\n      error = err || true;\n    } finally {\n      requestToken.done();\n    }\n\n    // If loadData has been called with a newer version, discard the result from this operation\n    if (loaderId !== this._loaderId) {\n      return;\n    }\n    // Clear the `isLoading` flag\n    this._loader = undefined;\n    // Rewrite tile content with the result of getTileData if successful, or `null` in case of\n    // error or cancellation\n    this.content = tileData;\n    // If cancelled, do not invoke the callbacks\n    // Consider it loaded if we tried to cancel but `getTileData` still returned data\n    if (this._isCancelled && !tileData) {\n      this._isLoaded = false;\n      return;\n    }\n    this._isLoaded = true;\n    this._isCancelled = false;\n\n    if (error) {\n      onError(error, this);\n    } else {\n      onLoad(this);\n    }\n  }\n  /* eslint-enable max-statements */\n\n  loadData(opts) {\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n    this._loaderId++;\n    this._loader = this._loadData(opts);\n    return this._loader;\n  }\n\n  setNeedsReload() {\n    if (this.isLoading) {\n      this.abort();\n      this._loader = undefined;\n    }\n    this._needsReload = true;\n  }\n\n  abort() {\n    if (this.isLoaded) {\n      return;\n    }\n\n    this._isCancelled = true;\n    this._abortController.abort();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}