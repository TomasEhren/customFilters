{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nconst DEFAULT_ROW_COUNT = 100;\nexport default class ColumnarTableBatchAggregator {\n  constructor(schema, options) {\n    _defineProperty(this, \"schema\", void 0);\n\n    _defineProperty(this, \"length\", 0);\n\n    _defineProperty(this, \"allocated\", 0);\n\n    _defineProperty(this, \"columns\", {});\n\n    this.schema = schema;\n\n    this._reallocateColumns();\n  }\n\n  rowCount() {\n    return this.length;\n  }\n\n  addArrayRow(row) {\n    this._reallocateColumns();\n\n    let i = 0;\n\n    for (const fieldName in this.columns) {\n      this.columns[fieldName][this.length] = row[i++];\n    }\n\n    this.length++;\n  }\n\n  addObjectRow(row) {\n    this._reallocateColumns();\n\n    for (const fieldName in row) {\n      this.columns[fieldName][this.length] = row[fieldName];\n    }\n\n    this.length++;\n  }\n\n  getBatch() {\n    this._pruneColumns();\n\n    const columns = Array.isArray(this.schema) ? this.columns : {};\n\n    if (!Array.isArray(this.schema)) {\n      for (const fieldName in this.schema) {\n        const field = this.schema[fieldName];\n        columns[field.name] = this.columns[field.index];\n      }\n    }\n\n    this.columns = {};\n    const batch = {\n      shape: 'columnar-table',\n      batchType: 'data',\n      data: columns,\n      schema: this.schema,\n      length: this.length\n    };\n    return batch;\n  }\n\n  _reallocateColumns() {\n    if (this.length < this.allocated) {\n      return;\n    }\n\n    this.allocated = this.allocated > 0 ? this.allocated *= 2 : DEFAULT_ROW_COUNT;\n    this.columns = {};\n\n    for (const fieldName in this.schema) {\n      const field = this.schema[fieldName];\n      const ArrayType = field.type || Float32Array;\n      const oldColumn = this.columns[field.index];\n\n      if (oldColumn && ArrayBuffer.isView(oldColumn)) {\n        const typedArray = new ArrayType(this.allocated);\n        typedArray.set(oldColumn);\n        this.columns[field.index] = typedArray;\n      } else if (oldColumn) {\n        oldColumn.length = this.allocated;\n        this.columns[field.index] = oldColumn;\n      } else {\n        this.columns[field.index] = new ArrayType(this.allocated);\n      }\n    }\n  }\n\n  _pruneColumns() {\n    for (const [columnName, column] of Object.entries(this.columns)) {\n      this.columns[columnName] = column.slice(0, this.length);\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["DEFAULT_ROW_COUNT","ColumnarTableBatchAggregator","constructor","schema","options","_defineProperty","_reallocateColumns","rowCount","length","addArrayRow","row","i","fieldName","columns","addObjectRow","getBatch","_pruneColumns","Array","isArray","field","name","index","batch","shape","batchType","data","allocated","ArrayType","type","Float32Array","oldColumn","ArrayBuffer","isView","typedArray","set","columnName","column","Object","entries","slice"],"sources":["../../../../src/lib/batches/columnar-table-batch-aggregator.ts"],"sourcesContent":["import type {Schema} from '../schema/schema';\nimport type {ColumnarTableBatch, ArrowTableBatch} from '../../category/table/table-types';\nimport {TableBatchAggregator} from './table-batch-aggregator';\n\ntype ColumnarTableBatchOptions = {};\n\nconst DEFAULT_ROW_COUNT = 100;\n\nexport default class ColumnarTableBatchAggregator implements TableBatchAggregator {\n  schema: Schema;\n  length: number = 0;\n  allocated: number = 0;\n  columns: {[columnName: string]: any[]} = {};\n\n  constructor(schema: Schema, options: ColumnarTableBatchOptions) {\n    this.schema = schema;\n    this._reallocateColumns();\n  }\n\n  rowCount(): number {\n    return this.length;\n  }\n\n  addArrayRow(row: any[]) {\n    // If user keeps pushing rows beyond batch size, reallocate\n    this._reallocateColumns();\n    let i = 0;\n    // TODO what if no csv header, columns not populated?\n    for (const fieldName in this.columns) {\n      this.columns[fieldName][this.length] = row[i++];\n    }\n    this.length++;\n  }\n\n  addObjectRow(row: {[columnName: string]: any}): void {\n    // If user keeps pushing rows beyond batch size, reallocate\n    this._reallocateColumns();\n    for (const fieldName in row) {\n      this.columns[fieldName][this.length] = row[fieldName];\n    }\n    this.length++;\n  }\n\n  getBatch(): ColumnarTableBatch | ArrowTableBatch | null {\n    this._pruneColumns();\n    const columns = Array.isArray(this.schema) ? this.columns : {};\n\n    // schema is an array if there're no headers\n    // object if there are headers\n    // columns should match schema format\n    if (!Array.isArray(this.schema)) {\n      for (const fieldName in this.schema) {\n        const field = this.schema[fieldName];\n        columns[field.name] = this.columns[field.index];\n      }\n    }\n\n    this.columns = {};\n\n    const batch: ColumnarTableBatch = {\n      shape: 'columnar-table',\n      batchType: 'data',\n      data: columns,\n      schema: this.schema,\n      length: this.length\n    };\n\n    return batch;\n  }\n\n  // HELPERS\n\n  _reallocateColumns() {\n    if (this.length < this.allocated) {\n      return;\n    }\n\n    // @ts-ignore TODO\n    this.allocated = this.allocated > 0 ? (this.allocated *= 2) : DEFAULT_ROW_COUNT;\n    this.columns = {};\n\n    for (const fieldName in this.schema) {\n      const field = this.schema[fieldName];\n      const ArrayType = field.type || Float32Array;\n      const oldColumn = this.columns[field.index];\n\n      if (oldColumn && ArrayBuffer.isView(oldColumn)) {\n        // Copy the old data to the new array\n        const typedArray = new ArrayType(this.allocated);\n        typedArray.set(oldColumn);\n        this.columns[field.index] = typedArray;\n      } else if (oldColumn) {\n        // Plain array\n        oldColumn.length = this.allocated;\n        this.columns[field.index] = oldColumn;\n      } else {\n        // Create new\n        this.columns[field.index] = new ArrayType(this.allocated);\n      }\n    }\n  }\n\n  _pruneColumns() {\n    for (const [columnName, column] of Object.entries(this.columns)) {\n      this.columns[columnName] = column.slice(0, this.length);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}