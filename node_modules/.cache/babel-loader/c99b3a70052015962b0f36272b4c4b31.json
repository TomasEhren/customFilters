{"ast":null,"code":"export default class Martini {\n  constructor() {\n    let gridSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 257;\n    this.gridSize = gridSize;\n    const tileSize = gridSize - 1;\n    if (tileSize & tileSize - 1) throw new Error(`Expected grid size to be 2^n+1, got ${gridSize}.`);\n    this.numTriangles = tileSize * tileSize * 2 - 2;\n    this.numParentTriangles = this.numTriangles - tileSize * tileSize;\n    this.indices = new Uint32Array(this.gridSize * this.gridSize); // coordinates for all possible triangles in an RTIN tile\n\n    this.coords = new Uint16Array(this.numTriangles * 4); // get triangle coordinates from its index in an implicit binary tree\n\n    for (let i = 0; i < this.numTriangles; i++) {\n      let id = i + 2;\n      let ax = 0,\n          ay = 0,\n          bx = 0,\n          by = 0,\n          cx = 0,\n          cy = 0;\n\n      if (id & 1) {\n        bx = by = cx = tileSize; // bottom-left triangle\n      } else {\n        ax = ay = cy = tileSize; // top-right triangle\n      }\n\n      while ((id >>= 1) > 1) {\n        const mx = ax + bx >> 1;\n        const my = ay + by >> 1;\n\n        if (id & 1) {\n          // left half\n          bx = ax;\n          by = ay;\n          ax = cx;\n          ay = cy;\n        } else {\n          // right half\n          ax = bx;\n          ay = by;\n          bx = cx;\n          by = cy;\n        }\n\n        cx = mx;\n        cy = my;\n      }\n\n      const k = i * 4;\n      this.coords[k + 0] = ax;\n      this.coords[k + 1] = ay;\n      this.coords[k + 2] = bx;\n      this.coords[k + 3] = by;\n    }\n  }\n\n  createTile(terrain) {\n    return new Tile(terrain, this);\n  }\n\n}\n\nclass Tile {\n  constructor(terrain, martini) {\n    const size = martini.gridSize;\n    if (terrain.length !== size * size) throw new Error(`Expected terrain data of length ${size * size} (${size} x ${size}), got ${terrain.length}.`);\n    this.terrain = terrain;\n    this.martini = martini;\n    this.errors = new Float32Array(terrain.length);\n    this.update();\n  }\n\n  update() {\n    const {\n      numTriangles,\n      numParentTriangles,\n      coords,\n      gridSize: size\n    } = this.martini;\n    const {\n      terrain,\n      errors\n    } = this; // iterate over all possible triangles, starting from the smallest level\n\n    for (let i = numTriangles - 1; i >= 0; i--) {\n      const k = i * 4;\n      const ax = coords[k + 0];\n      const ay = coords[k + 1];\n      const bx = coords[k + 2];\n      const by = coords[k + 3];\n      const mx = ax + bx >> 1;\n      const my = ay + by >> 1;\n      const cx = mx + my - ay;\n      const cy = my + ax - mx; // calculate error in the middle of the long edge of the triangle\n\n      const interpolatedHeight = (terrain[ay * size + ax] + terrain[by * size + bx]) / 2;\n      const middleIndex = my * size + mx;\n      const middleError = Math.abs(interpolatedHeight - terrain[middleIndex]);\n      errors[middleIndex] = Math.max(errors[middleIndex], middleError);\n\n      if (i < numParentTriangles) {\n        // bigger triangles; accumulate error with children\n        const leftChildIndex = (ay + cy >> 1) * size + (ax + cx >> 1);\n        const rightChildIndex = (by + cy >> 1) * size + (bx + cx >> 1);\n        errors[middleIndex] = Math.max(errors[middleIndex], errors[leftChildIndex], errors[rightChildIndex]);\n      }\n    }\n  }\n\n  getMesh() {\n    let maxError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const {\n      gridSize: size,\n      indices\n    } = this.martini;\n    const {\n      errors\n    } = this;\n    let numVertices = 0;\n    let numTriangles = 0;\n    const max = size - 1; // use an index grid to keep track of vertices that were already used to avoid duplication\n\n    indices.fill(0); // retrieve mesh in two stages that both traverse the error map:\n    // - countElements: find used vertices (and assign each an index), and count triangles (for minimum allocation)\n    // - processTriangle: fill the allocated vertices & triangles typed arrays\n\n    function countElements(ax, ay, bx, by, cx, cy) {\n      const mx = ax + bx >> 1;\n      const my = ay + by >> 1;\n\n      if (Math.abs(ax - cx) + Math.abs(ay - cy) > 1 && errors[my * size + mx] > maxError) {\n        countElements(cx, cy, ax, ay, mx, my);\n        countElements(bx, by, cx, cy, mx, my);\n      } else {\n        indices[ay * size + ax] = indices[ay * size + ax] || ++numVertices;\n        indices[by * size + bx] = indices[by * size + bx] || ++numVertices;\n        indices[cy * size + cx] = indices[cy * size + cx] || ++numVertices;\n        numTriangles++;\n      }\n    }\n\n    countElements(0, 0, max, max, max, 0);\n    countElements(max, max, 0, 0, 0, max);\n    const vertices = new Uint16Array(numVertices * 2);\n    const triangles = new Uint32Array(numTriangles * 3);\n    let triIndex = 0;\n\n    function processTriangle(ax, ay, bx, by, cx, cy) {\n      const mx = ax + bx >> 1;\n      const my = ay + by >> 1;\n\n      if (Math.abs(ax - cx) + Math.abs(ay - cy) > 1 && errors[my * size + mx] > maxError) {\n        // triangle doesn't approximate the surface well enough; drill down further\n        processTriangle(cx, cy, ax, ay, mx, my);\n        processTriangle(bx, by, cx, cy, mx, my);\n      } else {\n        // add a triangle\n        const a = indices[ay * size + ax] - 1;\n        const b = indices[by * size + bx] - 1;\n        const c = indices[cy * size + cx] - 1;\n        vertices[2 * a] = ax;\n        vertices[2 * a + 1] = ay;\n        vertices[2 * b] = bx;\n        vertices[2 * b + 1] = by;\n        vertices[2 * c] = cx;\n        vertices[2 * c + 1] = cy;\n        triangles[triIndex++] = a;\n        triangles[triIndex++] = b;\n        triangles[triIndex++] = c;\n      }\n    }\n\n    processTriangle(0, 0, max, max, max, 0);\n    processTriangle(max, max, 0, 0, 0, max);\n    return {\n      vertices,\n      triangles\n    };\n  }\n\n}","map":{"version":3,"names":["Martini","constructor","gridSize","tileSize","Error","numTriangles","numParentTriangles","indices","Uint32Array","coords","Uint16Array","i","id","ax","ay","bx","by","cx","cy","mx","my","k","createTile","terrain","Tile","martini","size","length","errors","Float32Array","update","interpolatedHeight","middleIndex","middleError","Math","abs","max","leftChildIndex","rightChildIndex","getMesh","maxError","numVertices","fill","countElements","vertices","triangles","triIndex","processTriangle","a","b","c"],"sources":["/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@mapbox/martini/index.js"],"sourcesContent":["\nexport default class Martini {\n    constructor(gridSize = 257) {\n        this.gridSize = gridSize;\n        const tileSize = gridSize - 1;\n        if (tileSize & (tileSize - 1)) throw new Error(\n            `Expected grid size to be 2^n+1, got ${gridSize}.`);\n\n        this.numTriangles = tileSize * tileSize * 2 - 2;\n        this.numParentTriangles = this.numTriangles - tileSize * tileSize;\n\n        this.indices = new Uint32Array(this.gridSize * this.gridSize);\n\n        // coordinates for all possible triangles in an RTIN tile\n        this.coords = new Uint16Array(this.numTriangles * 4);\n\n        // get triangle coordinates from its index in an implicit binary tree\n        for (let i = 0; i < this.numTriangles; i++) {\n            let id = i + 2;\n            let ax = 0, ay = 0, bx = 0, by = 0, cx = 0, cy = 0;\n            if (id & 1) {\n                bx = by = cx = tileSize; // bottom-left triangle\n            } else {\n                ax = ay = cy = tileSize; // top-right triangle\n            }\n            while ((id >>= 1) > 1) {\n                const mx = (ax + bx) >> 1;\n                const my = (ay + by) >> 1;\n\n                if (id & 1) { // left half\n                    bx = ax; by = ay;\n                    ax = cx; ay = cy;\n                } else { // right half\n                    ax = bx; ay = by;\n                    bx = cx; by = cy;\n                }\n                cx = mx; cy = my;\n            }\n            const k = i * 4;\n            this.coords[k + 0] = ax;\n            this.coords[k + 1] = ay;\n            this.coords[k + 2] = bx;\n            this.coords[k + 3] = by;\n        }\n    }\n\n    createTile(terrain) {\n        return new Tile(terrain, this);\n    }\n}\n\nclass Tile {\n    constructor(terrain, martini) {\n        const size = martini.gridSize;\n        if (terrain.length !== size * size) throw new Error(\n            `Expected terrain data of length ${size * size} (${size} x ${size}), got ${terrain.length}.`);\n\n        this.terrain = terrain;\n        this.martini = martini;\n        this.errors = new Float32Array(terrain.length);\n        this.update();\n    }\n\n    update() {\n        const {numTriangles, numParentTriangles, coords, gridSize: size} = this.martini;\n        const {terrain, errors} = this;\n\n        // iterate over all possible triangles, starting from the smallest level\n        for (let i = numTriangles - 1; i >= 0; i--) {\n            const k = i * 4;\n            const ax = coords[k + 0];\n            const ay = coords[k + 1];\n            const bx = coords[k + 2];\n            const by = coords[k + 3];\n            const mx = (ax + bx) >> 1;\n            const my = (ay + by) >> 1;\n            const cx = mx + my - ay;\n            const cy = my + ax - mx;\n\n            // calculate error in the middle of the long edge of the triangle\n            const interpolatedHeight = (terrain[ay * size + ax] + terrain[by * size + bx]) / 2;\n            const middleIndex = my * size + mx;\n            const middleError = Math.abs(interpolatedHeight - terrain[middleIndex]);\n\n            errors[middleIndex] = Math.max(errors[middleIndex], middleError);\n\n            if (i < numParentTriangles) { // bigger triangles; accumulate error with children\n                const leftChildIndex = ((ay + cy) >> 1) * size + ((ax + cx) >> 1);\n                const rightChildIndex = ((by + cy) >> 1) * size + ((bx + cx) >> 1);\n                errors[middleIndex] = Math.max(errors[middleIndex], errors[leftChildIndex], errors[rightChildIndex]);\n            }\n        }\n    }\n\n    getMesh(maxError = 0) {\n        const {gridSize: size, indices} = this.martini;\n        const {errors} = this;\n        let numVertices = 0;\n        let numTriangles = 0;\n        const max = size - 1;\n\n        // use an index grid to keep track of vertices that were already used to avoid duplication\n        indices.fill(0);\n\n        // retrieve mesh in two stages that both traverse the error map:\n        // - countElements: find used vertices (and assign each an index), and count triangles (for minimum allocation)\n        // - processTriangle: fill the allocated vertices & triangles typed arrays\n\n        function countElements(ax, ay, bx, by, cx, cy) {\n            const mx = (ax + bx) >> 1;\n            const my = (ay + by) >> 1;\n\n            if (Math.abs(ax - cx) + Math.abs(ay - cy) > 1 && errors[my * size + mx] > maxError) {\n                countElements(cx, cy, ax, ay, mx, my);\n                countElements(bx, by, cx, cy, mx, my);\n            } else {\n                indices[ay * size + ax] = indices[ay * size + ax] || ++numVertices;\n                indices[by * size + bx] = indices[by * size + bx] || ++numVertices;\n                indices[cy * size + cx] = indices[cy * size + cx] || ++numVertices;\n                numTriangles++;\n            }\n        }\n        countElements(0, 0, max, max, max, 0);\n        countElements(max, max, 0, 0, 0, max);\n\n        const vertices = new Uint16Array(numVertices * 2);\n        const triangles = new Uint32Array(numTriangles * 3);\n        let triIndex = 0;\n\n        function processTriangle(ax, ay, bx, by, cx, cy) {\n            const mx = (ax + bx) >> 1;\n            const my = (ay + by) >> 1;\n\n            if (Math.abs(ax - cx) + Math.abs(ay - cy) > 1 && errors[my * size + mx] > maxError) {\n                // triangle doesn't approximate the surface well enough; drill down further\n                processTriangle(cx, cy, ax, ay, mx, my);\n                processTriangle(bx, by, cx, cy, mx, my);\n\n            } else {\n                // add a triangle\n                const a = indices[ay * size + ax] - 1;\n                const b = indices[by * size + bx] - 1;\n                const c = indices[cy * size + cx] - 1;\n\n                vertices[2 * a] = ax;\n                vertices[2 * a + 1] = ay;\n\n                vertices[2 * b] = bx;\n                vertices[2 * b + 1] = by;\n\n                vertices[2 * c] = cx;\n                vertices[2 * c + 1] = cy;\n\n                triangles[triIndex++] = a;\n                triangles[triIndex++] = b;\n                triangles[triIndex++] = c;\n            }\n        }\n        processTriangle(0, 0, max, max, max, 0);\n        processTriangle(max, max, 0, 0, 0, max);\n\n        return {vertices, triangles};\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}