{"ast":null,"code":"import _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { loadBasisEncoderModule } from '../parsers/basis-module-loader';\nexport function encodeKTX2BasisTexture(_x) {\n  return _encodeKTX2BasisTexture.apply(this, arguments);\n}\n\nfunction _encodeKTX2BasisTexture() {\n  _encodeKTX2BasisTexture = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(image) {\n    var options,\n        _options$useSRGB,\n        useSRGB,\n        _options$qualityLevel,\n        qualityLevel,\n        _options$encodeUASTC,\n        encodeUASTC,\n        _options$mipmaps,\n        mipmaps,\n        _yield$loadBasisEncod,\n        BasisEncoder,\n        basisEncoder,\n        basisFileData,\n        numOutputBytes,\n        actualKTX2FileData,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            _options$useSRGB = options.useSRGB, useSRGB = _options$useSRGB === void 0 ? false : _options$useSRGB, _options$qualityLevel = options.qualityLevel, qualityLevel = _options$qualityLevel === void 0 ? 10 : _options$qualityLevel, _options$encodeUASTC = options.encodeUASTC, encodeUASTC = _options$encodeUASTC === void 0 ? false : _options$encodeUASTC, _options$mipmaps = options.mipmaps, mipmaps = _options$mipmaps === void 0 ? false : _options$mipmaps;\n            _context.next = 4;\n            return loadBasisEncoderModule(options);\n\n          case 4:\n            _yield$loadBasisEncod = _context.sent;\n            BasisEncoder = _yield$loadBasisEncod.BasisEncoder;\n            basisEncoder = new BasisEncoder();\n            _context.prev = 7;\n            basisFileData = new Uint8Array(image.width * image.height * 4);\n            basisEncoder.setCreateKTX2File(true);\n            basisEncoder.setKTX2UASTCSupercompression(true);\n            basisEncoder.setKTX2SRGBTransferFunc(true);\n            basisEncoder.setSliceSourceImage(0, image.data, image.width, image.height, false);\n            basisEncoder.setPerceptual(useSRGB);\n            basisEncoder.setMipSRGB(useSRGB);\n            basisEncoder.setQualityLevel(qualityLevel);\n            basisEncoder.setUASTC(encodeUASTC);\n            basisEncoder.setMipGen(mipmaps);\n            numOutputBytes = basisEncoder.encode(basisFileData);\n            actualKTX2FileData = basisFileData.subarray(0, numOutputBytes).buffer;\n            return _context.abrupt(\"return\", actualKTX2FileData);\n\n          case 23:\n            _context.prev = 23;\n            _context.t0 = _context[\"catch\"](7);\n            console.error('Basis Universal Supercompressed GPU Texture encoder Error: ', _context.t0);\n            throw _context.t0;\n\n          case 27:\n            _context.prev = 27;\n            basisEncoder.delete();\n            return _context.finish(27);\n\n          case 30:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[7, 23, 27, 30]]);\n  }));\n  return _encodeKTX2BasisTexture.apply(this, arguments);\n}","map":{"version":3,"mappings":";;AACA,SAAQA,sBAAR,QAAqC,gCAArC;AASA,gBAAsBC,sBAAtB;EAAA;AAAA;;;qFAAO,iBACLC,KADK;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;;IAAA;MAAA;QAAA;UAAA;YAELC,OAFK,2DAEU,EAFV;YAAA,mBAK8EA,OAL9E,CAKEC,OALF,EAKEA,OALF,iCAKY,KALZ,6CAK8ED,OAL9E,CAKmBE,YALnB,EAKmBA,YALnB,sCAKkC,EALlC,iDAK8EF,OAL9E,CAKsCG,WALtC,EAKsCA,WALtC,qCAKoD,KALpD,4CAK8EH,OAL9E,CAK2DI,OAL3D,EAK2DA,OAL3D,iCAKqE,KALrE;YAAA;YAAA,OAMwBP,sBAAsB,CAACG,OAAD,CAN9C;;UAAA;YAAA;YAMEK,YANF,yBAMEA,YANF;YAOCC,YAPD,GAOgB,IAAID,YAAJ,EAPhB;YAAA;YAUGE,aAVH,GAUmB,IAAIC,UAAJ,CAAeT,KAAK,CAACU,KAANV,GAAcA,KAAK,CAACW,MAApBX,GAA6B,CAA5C,CAVnB;YAWHO,YAAY,CAACK,iBAAbL,CAA+B,IAA/BA;YACAA,YAAY,CAACM,4BAAbN,CAA0C,IAA1CA;YACAA,YAAY,CAACO,uBAAbP,CAAqC,IAArCA;YAEAA,YAAY,CAACQ,mBAAbR,CAAiC,CAAjCA,EAAoCP,KAAK,CAACgB,IAA1CT,EAAgDP,KAAK,CAACU,KAAtDH,EAA6DP,KAAK,CAACW,MAAnEJ,EAA2E,KAA3EA;YACAA,YAAY,CAACU,aAAbV,CAA2BL,OAA3BK;YACAA,YAAY,CAACW,UAAbX,CAAwBL,OAAxBK;YACAA,YAAY,CAACY,eAAbZ,CAA6BJ,YAA7BI;YACAA,YAAY,CAACa,QAAbb,CAAsBH,WAAtBG;YACAA,YAAY,CAACc,SAAbd,CAAuBF,OAAvBE;YAEMe,cAtBH,GAsBoBf,YAAY,CAACgB,MAAbhB,CAAoBC,aAApBD,CAtBpB;YAwBGiB,kBAxBH,GAwBwBhB,aAAa,CAACiB,QAAdjB,CAAuB,CAAvBA,EAA0Bc,cAA1Bd,EAA0CkB,MAxBlE;YAAA,iCAyBIF,kBAzBJ;;UAAA;YAAA;YAAA;YA4BHG,OAAO,CAACC,KAARD,CAAc,6DAAdA;YA5BG;;UAAA;YAAA;YA+BHpB,YAAY,CAACsB,MAAbtB;YA/BG;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","names":["loadBasisEncoderModule","encodeKTX2BasisTexture","image","options","useSRGB","qualityLevel","encodeUASTC","mipmaps","BasisEncoder","basisEncoder","basisFileData","Uint8Array","width","height","setCreateKTX2File","setKTX2UASTCSupercompression","setKTX2SRGBTransferFunc","setSliceSourceImage","data","setPerceptual","setMipSRGB","setQualityLevel","setUASTC","setMipGen","numOutputBytes","encode","actualKTX2FileData","subarray","buffer","console","error","delete"],"sources":["../../../../src/lib/encoders/encode-ktx2-basis-texture.ts"],"sourcesContent":["import type {ImageDataType} from '@loaders.gl/images';\nimport {loadBasisEncoderModule} from '../parsers/basis-module-loader';\n\n/**\n * Encodes image to Basis Universal Supercompressed GPU Texture.\n * Code example is taken from here - https://github.com/BinomialLLC/basis_universal/blob/master/webgl/ktx2_encode_test/index.html#L279\n * BasisEncoder API - https://github.com/BinomialLLC/basis_universal/blob/master/webgl/transcoder/basis_wrappers.cpp#L1712\n * @param image\n * @param options\n */\nexport async function encodeKTX2BasisTexture(\n  image: ImageDataType,\n  options: any = {}\n): Promise<ArrayBuffer> {\n  // TODO remove default values after writer options will be normalized like it done in load module.\n  const {useSRGB = false, qualityLevel = 10, encodeUASTC = false, mipmaps = false} = options;\n  const {BasisEncoder} = await loadBasisEncoderModule(options);\n  const basisEncoder = new BasisEncoder();\n\n  try {\n    const basisFileData = new Uint8Array(image.width * image.height * 4);\n    basisEncoder.setCreateKTX2File(true);\n    basisEncoder.setKTX2UASTCSupercompression(true);\n    basisEncoder.setKTX2SRGBTransferFunc(true);\n\n    basisEncoder.setSliceSourceImage(0, image.data, image.width, image.height, false);\n    basisEncoder.setPerceptual(useSRGB);\n    basisEncoder.setMipSRGB(useSRGB);\n    basisEncoder.setQualityLevel(qualityLevel);\n    basisEncoder.setUASTC(encodeUASTC);\n    basisEncoder.setMipGen(mipmaps);\n\n    const numOutputBytes = basisEncoder.encode(basisFileData);\n\n    const actualKTX2FileData = basisFileData.subarray(0, numOutputBytes).buffer;\n    return actualKTX2FileData;\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error('Basis Universal Supercompressed GPU Texture encoder Error: ', error);\n    throw error;\n  } finally {\n    basisEncoder.delete();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}