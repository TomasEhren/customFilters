{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar defaultGetValue = function defaultGetValue(points) {\n  return points.length;\n};\n\nimport { clamp, getQuantileDomain, getOrdinalDomain } from './scale-utils';\nvar MAX_32_BIT_FLOAT = 3.402823466e38;\n\nvar defaultGetPoints = function defaultGetPoints(bin) {\n  return bin.points;\n};\n\nvar defaultGetIndex = function defaultGetIndex(bin) {\n  return bin.index;\n};\n\nvar ascending = function ascending(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n};\n\nvar defaultProps = {\n  getValue: defaultGetValue,\n  getPoints: defaultGetPoints,\n  getIndex: defaultGetIndex,\n  filterData: null\n};\n\nvar BinSorter = /*#__PURE__*/function () {\n  function BinSorter() {\n    var bins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultProps;\n\n    _classCallCheck(this, BinSorter);\n\n    this.aggregatedBins = this.getAggregatedBins(bins, props);\n\n    this._updateMinMaxValues();\n\n    this.binMap = this.getBinMap();\n  }\n\n  _createClass(BinSorter, [{\n    key: \"getAggregatedBins\",\n    value: function getAggregatedBins(bins, props) {\n      var _props$getValue = props.getValue,\n          getValue = _props$getValue === void 0 ? defaultGetValue : _props$getValue,\n          _props$getPoints = props.getPoints,\n          getPoints = _props$getPoints === void 0 ? defaultGetPoints : _props$getPoints,\n          _props$getIndex = props.getIndex,\n          getIndex = _props$getIndex === void 0 ? defaultGetIndex : _props$getIndex,\n          filterData = props.filterData;\n      var hasFilter = typeof filterData === 'function';\n      var binCount = bins.length;\n      var aggregatedBins = [];\n      var index = 0;\n\n      for (var binIndex = 0; binIndex < binCount; binIndex++) {\n        var bin = bins[binIndex];\n        var points = getPoints(bin);\n        var i = getIndex(bin);\n        var filteredPoints = hasFilter ? points.filter(filterData) : points;\n        bin.filteredPoints = hasFilter ? filteredPoints : null;\n        var value = filteredPoints.length ? getValue(filteredPoints) : null;\n\n        if (value !== null && value !== undefined) {\n          aggregatedBins[index] = {\n            i: Number.isFinite(i) ? i : binIndex,\n            value: value,\n            counts: filteredPoints.length\n          };\n          index++;\n        }\n      }\n\n      return aggregatedBins;\n    }\n  }, {\n    key: \"_percentileToIndex\",\n    value: function _percentileToIndex(percentileRange) {\n      var len = this.sortedBins.length;\n\n      if (len < 2) {\n        return [0, 0];\n      }\n\n      var _percentileRange$map = percentileRange.map(function (n) {\n        return clamp(n, 0, 100);\n      }),\n          _percentileRange$map2 = _slicedToArray(_percentileRange$map, 2),\n          lower = _percentileRange$map2[0],\n          upper = _percentileRange$map2[1];\n\n      var lowerIdx = Math.ceil(lower / 100 * (len - 1));\n      var upperIdx = Math.floor(upper / 100 * (len - 1));\n      return [lowerIdx, upperIdx];\n    }\n  }, {\n    key: \"getBinMap\",\n    value: function getBinMap() {\n      var binMap = {};\n\n      var _iterator = _createForOfIteratorHelper(this.aggregatedBins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var bin = _step.value;\n          binMap[bin.i] = bin;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return binMap;\n    }\n  }, {\n    key: \"_updateMinMaxValues\",\n    value: function _updateMinMaxValues() {\n      var maxCount = 0;\n      var maxValue = 0;\n      var minValue = MAX_32_BIT_FLOAT;\n      var totalCount = 0;\n\n      var _iterator2 = _createForOfIteratorHelper(this.aggregatedBins),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var x = _step2.value;\n          maxCount = maxCount > x.counts ? maxCount : x.counts;\n          maxValue = maxValue > x.value ? maxValue : x.value;\n          minValue = minValue < x.value ? minValue : x.value;\n          totalCount += x.counts;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      this.maxCount = maxCount;\n      this.maxValue = maxValue;\n      this.minValue = minValue;\n      this.totalCount = totalCount;\n    }\n  }, {\n    key: \"getValueRange\",\n    value: function getValueRange(percentileRange) {\n      if (!this.sortedBins) {\n        this.sortedBins = this.aggregatedBins.sort(function (a, b) {\n          return ascending(a.value, b.value);\n        });\n      }\n\n      if (!this.sortedBins.length) {\n        return [];\n      }\n\n      var lowerIdx = 0;\n      var upperIdx = this.sortedBins.length - 1;\n\n      if (Array.isArray(percentileRange)) {\n        var idxRange = this._percentileToIndex(percentileRange);\n\n        lowerIdx = idxRange[0];\n        upperIdx = idxRange[1];\n      }\n\n      return [this.sortedBins[lowerIdx].value, this.sortedBins[upperIdx].value];\n    }\n  }, {\n    key: \"getValueDomainByScale\",\n    value: function getValueDomainByScale(scale) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [],\n          _ref2 = _slicedToArray(_ref, 2),\n          _ref2$ = _ref2[0],\n          lower = _ref2$ === void 0 ? 0 : _ref2$,\n          _ref2$2 = _ref2[1],\n          upper = _ref2$2 === void 0 ? 100 : _ref2$2;\n\n      if (!this.sortedBins) {\n        this.sortedBins = this.aggregatedBins.sort(function (a, b) {\n          return ascending(a.value, b.value);\n        });\n      }\n\n      if (!this.sortedBins.length) {\n        return [];\n      }\n\n      var indexEdge = this._percentileToIndex([lower, upper]);\n\n      return this._getScaleDomain(scale, indexEdge);\n    }\n  }, {\n    key: \"_getScaleDomain\",\n    value: function _getScaleDomain(scaleType, _ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          lowerIdx = _ref4[0],\n          upperIdx = _ref4[1];\n\n      var bins = this.sortedBins;\n\n      switch (scaleType) {\n        case 'quantize':\n        case 'linear':\n          return [bins[lowerIdx].value, bins[upperIdx].value];\n\n        case 'quantile':\n          return getQuantileDomain(bins.slice(lowerIdx, upperIdx + 1), function (d) {\n            return d.value;\n          });\n\n        case 'ordinal':\n          return getOrdinalDomain(bins, function (d) {\n            return d.value;\n          });\n\n        default:\n          return [bins[lowerIdx].value, bins[upperIdx].value];\n      }\n    }\n  }]);\n\n  return BinSorter;\n}();\n\nexport { BinSorter as default };","map":{"version":3,"mappings":"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","names":["defaultGetValue","points","length","clamp","getQuantileDomain","getOrdinalDomain","MAX_32_BIT_FLOAT","defaultGetPoints","bin","defaultGetIndex","index","ascending","a","b","NaN","defaultProps","getValue","getPoints","getIndex","filterData","BinSorter","constructor","bins","props","aggregatedBins","getAggregatedBins","_updateMinMaxValues","binMap","getBinMap","hasFilter","binCount","binIndex","i","filteredPoints","filter","value","undefined","Number","isFinite","counts","_percentileToIndex","percentileRange","len","sortedBins","map","n","lower","upper","lowerIdx","Math","ceil","upperIdx","floor","maxCount","maxValue","minValue","totalCount","x","getValueRange","sort","Array","isArray","idxRange","getValueDomainByScale","scale","indexEdge","_getScaleDomain","scaleType","slice","d"],"sources":["../../../src/utils/bin-sorter.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// getValue takes an array of points returns a value to sort the bins on.\n// by default it returns the number of points\n// this is where to pass in a function to color the bins by\n// avg/mean/max of specific value of the point\nconst defaultGetValue = points => points.length;\n\nimport {clamp, getQuantileDomain, getOrdinalDomain} from './scale-utils';\n\nconst MAX_32_BIT_FLOAT = 3.402823466e38;\n\n// access array of points in each bin\nconst defaultGetPoints = bin => bin.points;\n// access index of each bin\nconst defaultGetIndex = bin => bin.index;\n\n// d3-scending\nconst ascending = (a, b) => (a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN);\n\nconst defaultProps = {\n  getValue: defaultGetValue,\n  getPoints: defaultGetPoints,\n  getIndex: defaultGetIndex,\n  filterData: null\n};\n\nexport default class BinSorter {\n  constructor(bins = [], props = defaultProps) {\n    this.aggregatedBins = this.getAggregatedBins(bins, props);\n    this._updateMinMaxValues();\n    this.binMap = this.getBinMap();\n  }\n\n  /**\n   * Get an array of object with aggregated values and index of bins\n   * Array object will be sorted by value optionally.\n   * @param {Array} bins\n   * @param {Function} getValue\n   * @return {Array} array of values and index lookup\n   */\n  getAggregatedBins(bins, props) {\n    const {\n      getValue = defaultGetValue,\n      getPoints = defaultGetPoints,\n      getIndex = defaultGetIndex,\n      filterData\n    } = props;\n\n    const hasFilter = typeof filterData === 'function';\n    const binCount = bins.length;\n    const aggregatedBins = [];\n    let index = 0;\n\n    for (let binIndex = 0; binIndex < binCount; binIndex++) {\n      const bin = bins[binIndex];\n      const points = getPoints(bin);\n      const i = getIndex(bin);\n\n      const filteredPoints = hasFilter ? points.filter(filterData) : points;\n\n      bin.filteredPoints = hasFilter ? filteredPoints : null;\n\n      const value = filteredPoints.length ? getValue(filteredPoints) : null;\n\n      if (value !== null && value !== undefined) {\n        // filter bins if value is null or undefined\n        aggregatedBins[index] = {\n          i: Number.isFinite(i) ? i : binIndex,\n          value,\n          counts: filteredPoints.length\n        };\n        index++;\n      }\n    }\n    return aggregatedBins;\n  }\n\n  _percentileToIndex(percentileRange) {\n    const len = this.sortedBins.length;\n    if (len < 2) {\n      return [0, 0];\n    }\n\n    const [lower, upper] = percentileRange.map(n => clamp(n, 0, 100));\n\n    const lowerIdx = Math.ceil((lower / 100) * (len - 1));\n    const upperIdx = Math.floor((upper / 100) * (len - 1));\n\n    return [lowerIdx, upperIdx];\n  }\n\n  /**\n   * Get a mapping from cell/hexagon index to sorted bin\n   * This is used to retrieve bin value for color calculation\n   * @return {Object} bin index to aggregatedBins\n   */\n  getBinMap() {\n    const binMap = {};\n    for (const bin of this.aggregatedBins) {\n      binMap[bin.i] = bin;\n    }\n    return binMap;\n  }\n\n  // Private\n\n  /**\n   * Get ths max count of all bins\n   * @return {Number | Boolean} max count\n   */\n  _updateMinMaxValues() {\n    let maxCount = 0;\n    let maxValue = 0;\n    let minValue = MAX_32_BIT_FLOAT;\n    let totalCount = 0;\n    for (const x of this.aggregatedBins) {\n      maxCount = maxCount > x.counts ? maxCount : x.counts;\n      maxValue = maxValue > x.value ? maxValue : x.value;\n      minValue = minValue < x.value ? minValue : x.value;\n      totalCount += x.counts;\n    }\n    this.maxCount = maxCount;\n    this.maxValue = maxValue;\n    this.minValue = minValue;\n    this.totalCount = totalCount;\n  }\n\n  /**\n   * Get range of values of all bins\n   * @param {Number[]} range\n   * @param {Number} range[0] - lower bound\n   * @param {Number} range[1] - upper bound\n   * @return {Array} array of new value range\n   */\n  getValueRange(percentileRange) {\n    if (!this.sortedBins) {\n      this.sortedBins = this.aggregatedBins.sort((a, b) => ascending(a.value, b.value));\n    }\n    if (!this.sortedBins.length) {\n      return [];\n    }\n    let lowerIdx = 0;\n    let upperIdx = this.sortedBins.length - 1;\n\n    if (Array.isArray(percentileRange)) {\n      const idxRange = this._percentileToIndex(percentileRange);\n      lowerIdx = idxRange[0];\n      upperIdx = idxRange[1];\n    }\n\n    return [this.sortedBins[lowerIdx].value, this.sortedBins[upperIdx].value];\n  }\n\n  getValueDomainByScale(scale, [lower = 0, upper = 100] = []) {\n    if (!this.sortedBins) {\n      this.sortedBins = this.aggregatedBins.sort((a, b) => ascending(a.value, b.value));\n    }\n    if (!this.sortedBins.length) {\n      return [];\n    }\n    const indexEdge = this._percentileToIndex([lower, upper]);\n\n    return this._getScaleDomain(scale, indexEdge);\n  }\n\n  _getScaleDomain(scaleType, [lowerIdx, upperIdx]) {\n    const bins = this.sortedBins;\n\n    switch (scaleType) {\n      case 'quantize':\n      case 'linear':\n        return [bins[lowerIdx].value, bins[upperIdx].value];\n\n      case 'quantile':\n        return getQuantileDomain(bins.slice(lowerIdx, upperIdx + 1), d => d.value);\n\n      case 'ordinal':\n        return getOrdinalDomain(bins, d => d.value);\n\n      default:\n        return [bins[lowerIdx].value, bins[upperIdx].value];\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}