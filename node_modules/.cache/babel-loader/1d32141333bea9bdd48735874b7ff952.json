{"ast":null,"code":"import { getFetchFunction } from './option-utils';\nexport function getLoaderContext(context, options) {\n  let previousContext = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  if (previousContext) {\n    return previousContext;\n  }\n\n  const resolvedContext = {\n    fetch: getFetchFunction(options, context),\n    ...context\n  };\n\n  if (!Array.isArray(resolvedContext.loaders)) {\n    resolvedContext.loaders = null;\n  }\n\n  return resolvedContext;\n}\nexport function getLoadersFromContext(loaders, context) {\n  if (!context && loaders && !Array.isArray(loaders)) {\n    return loaders;\n  }\n\n  let candidateLoaders;\n\n  if (loaders) {\n    candidateLoaders = Array.isArray(loaders) ? loaders : [loaders];\n  }\n\n  if (context && context.loaders) {\n    const contextLoaders = Array.isArray(context.loaders) ? context.loaders : [context.loaders];\n    candidateLoaders = candidateLoaders ? [...candidateLoaders, ...contextLoaders] : contextLoaders;\n  }\n\n  return candidateLoaders && candidateLoaders.length ? candidateLoaders : null;\n}","map":{"version":3,"mappings":"AACA,SAAQA,gBAAR,QAA+B,gBAA/B;AAWA,OAAO,SAASC,gBAAT,CACLC,OADK,EAELC,OAFK,EAIU;EAAA,IADfC,eACe,uEADyB,IACzB;;EAGf,IAAIA,eAAJ,EAAqB;IACnB,OAAOA,eAAP;EACD;;EAED,MAAMC,eAA8B,GAAG;IACrCC,KAAK,EAAEN,gBAAgB,CAACG,OAAD,EAAUD,OAAV,CADc;IAErC,GAAGA;EAFkC,CAAvC;;EAMA,IAAI,CAACK,KAAK,CAACC,OAAND,CAAcF,eAAe,CAACI,OAA9BF,CAAL,EAA6C;IAC3CF,eAAe,CAACI,OAAhBJ,GAA0B,IAA1BA;EACD;;EAED,OAAOA,eAAP;AACD;AAGD,OAAO,SAASK,qBAAT,CACLD,OADK,EAELP,OAFK,EAGL;EAEA,IAAI,CAACA,OAAD,IAAYO,OAAZ,IAAuB,CAACF,KAAK,CAACC,OAAND,CAAcE,OAAdF,CAA5B,EAAoD;IAClD,OAAOE,OAAP;EACD;;EAGD,IAAIE,gBAAJ;;EACA,IAAIF,OAAJ,EAAa;IACXE,gBAAgB,GAAGJ,KAAK,CAACC,OAAND,CAAcE,OAAdF,IAAyBE,OAAzBF,GAAmC,CAACE,OAAD,CAAtDE;EACD;;EACD,IAAIT,OAAO,IAAIA,OAAO,CAACO,OAAvB,EAAgC;IAC9B,MAAMG,cAAc,GAAGL,KAAK,CAACC,OAAND,CAAcL,OAAO,CAACO,OAAtBF,IAAiCL,OAAO,CAACO,OAAzCF,GAAmD,CAACL,OAAO,CAACO,OAAT,CAA1E;IACAE,gBAAgB,GAAGA,gBAAgB,GAAG,CAAC,GAAGA,gBAAJ,EAAsB,GAAGC,cAAzB,CAAH,GAA8CA,cAAjFD;EACD;;EAED,OAAOA,gBAAgB,IAAIA,gBAAgB,CAACE,MAArCF,GAA8CA,gBAA9CA,GAAiE,IAAxE;AACD","names":["getFetchFunction","getLoaderContext","context","options","previousContext","resolvedContext","fetch","Array","isArray","loaders","getLoadersFromContext","candidateLoaders","contextLoaders","length"],"sources":["../../../../src/lib/loader-utils/loader-context.ts"],"sourcesContent":["import type {Loader, LoaderOptions, LoaderContext} from '@loaders.gl/loader-utils';\nimport {getFetchFunction} from './option-utils';\n\n/**\n * \"sub\" loaders invoked by other loaders get a \"context\" injected on `this`\n * The context will inject core methods like `parse` and contain information\n * about loaders and options passed in to the top-level `parse` call.\n *\n * @param context\n * @param options\n * @param previousContext\n */\nexport function getLoaderContext(\n  context: Omit<LoaderContext, 'fetch'> & Partial<Pick<LoaderContext, 'fetch'>>,\n  options?: LoaderOptions,\n  previousContext: LoaderContext | null = null\n): LoaderContext {\n  // For recursive calls, we already have a context\n  // TODO - add any additional loaders to context?\n  if (previousContext) {\n    return previousContext;\n  }\n\n  const resolvedContext: LoaderContext = {\n    fetch: getFetchFunction(options, context),\n    ...context\n  };\n\n  // Recursive loading does not use single loader\n  if (!Array.isArray(resolvedContext.loaders)) {\n    resolvedContext.loaders = null;\n  }\n\n  return resolvedContext;\n}\n\n// eslint-disable-next-line complexity\nexport function getLoadersFromContext(\n  loaders: Loader[] | Loader | undefined,\n  context?: LoaderContext\n) {\n  // A single non-array loader is force selected, but only on top-level (context === null)\n  if (!context && loaders && !Array.isArray(loaders)) {\n    return loaders;\n  }\n\n  // Create a merged list\n  let candidateLoaders;\n  if (loaders) {\n    candidateLoaders = Array.isArray(loaders) ? loaders : [loaders];\n  }\n  if (context && context.loaders) {\n    const contextLoaders = Array.isArray(context.loaders) ? context.loaders : [context.loaders];\n    candidateLoaders = candidateLoaders ? [...candidateLoaders, ...contextLoaders] : contextLoaders;\n  }\n  // If no loaders, return null to look in globally registered loaders\n  return candidateLoaders && candidateLoaders.length ? candidateLoaders : null;\n}\n"]},"metadata":{},"sourceType":"module"}