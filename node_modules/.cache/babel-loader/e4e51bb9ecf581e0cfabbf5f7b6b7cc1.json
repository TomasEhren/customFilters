{"ast":null,"code":"import _get from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { clamp } from '@math.gl/core';\nimport Controller from './controller';\nimport { MapState } from './map-controller';\nimport { mod } from '../utils/math-utils';\n\nvar GlobeState = /*#__PURE__*/function (_MapState) {\n  _inherits(GlobeState, _MapState);\n\n  var _super = _createSuper(GlobeState);\n\n  function GlobeState() {\n    _classCallCheck(this, GlobeState);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(GlobeState, [{\n    key: \"_applyConstraints\",\n    value: function _applyConstraints(props) {\n      var maxZoom = props.maxZoom,\n          minZoom = props.minZoom,\n          zoom = props.zoom;\n      props.zoom = clamp(zoom, minZoom, maxZoom);\n      var longitude = props.longitude,\n          latitude = props.latitude;\n\n      if (longitude < -180 || longitude > 180) {\n        props.longitude = mod(longitude + 180, 360) - 180;\n      }\n\n      props.latitude = clamp(latitude, -89, 89);\n      return props;\n    }\n  }]);\n\n  return GlobeState;\n}(MapState);\n\nvar GlobeController = /*#__PURE__*/function (_Controller) {\n  _inherits(GlobeController, _Controller);\n\n  var _super2 = _createSuper(GlobeController);\n\n  function GlobeController(props) {\n    _classCallCheck(this, GlobeController);\n\n    props.dragMode = props.dragMode || 'pan';\n    return _super2.call(this, GlobeState, props);\n  }\n\n  _createClass(GlobeController, [{\n    key: \"setProps\",\n    value: function setProps(props) {\n      _get(_getPrototypeOf(GlobeController.prototype), \"setProps\", this).call(this, props);\n\n      this.dragRotate = false;\n      this.touchRotate = false;\n    }\n  }, {\n    key: \"linearTransitionProps\",\n    get: function get() {\n      return ['longitude', 'latitude', 'zoom'];\n    }\n  }]);\n\n  return GlobeController;\n}(Controller);\n\nexport { GlobeController as default };","map":{"version":3,"mappings":";;;;;;AAAA,SAAQA,KAAR,QAAoB,eAApB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,SAAQC,GAAR,QAAkB,qBAAlB;;IAEMC,U;;;;;;;;;;;;;WAEJC,2BAAkBC,KAAlBD,EAAyB;MAEvB,IAAOE,OAAP,GAAiCD,KAAjC,CAAOC,OAAP;MAAA,IAAgBC,OAAhB,GAAiCF,KAAjC,CAAgBE,OAAhB;MAAA,IAAyBC,IAAzB,GAAiCH,KAAjC,CAAyBG,IAAzB;MACAH,KAAK,CAACG,IAANH,GAAaN,KAAK,CAACS,IAAD,EAAOD,OAAP,EAAgBD,OAAhB,CAAlBD;MAEA,IAAOI,SAAP,GAA8BJ,KAA9B,CAAOI,SAAP;MAAA,IAAkBC,QAAlB,GAA8BL,KAA9B,CAAkBK,QAAlB;;MACA,IAAID,SAAS,GAAG,CAAC,GAAbA,IAAoBA,SAAS,GAAG,GAApC,EAAyC;QACvCJ,KAAK,CAACI,SAANJ,GAAkBH,GAAG,CAACO,SAAS,GAAG,GAAb,EAAkB,GAAlB,CAAHP,GAA4B,GAA9CG;MACD;;MACDA,KAAK,CAACK,QAANL,GAAiBN,KAAK,CAACW,QAAD,EAAW,CAAC,EAAZ,EAAgB,EAAhB,CAAtBL;MAEA,OAAOA,KAAP;IACD;;;;EAdsBJ,Q;;IAiBJU,e;;;;;EACnBC,yBAAYP,KAAZO,EAAmB;IAAA;;IACjBP,KAAK,CAACQ,QAANR,GAAiBA,KAAK,CAACQ,QAANR,IAAkB,KAAnCA;IADiB,0BAEXF,UAFW,EAECE,KAFD;EAGlB;;;;WAEDS,kBAAST,KAATS,EAAgB;MACd,8EAAeT,KAAf;;MAGA,KAAKU,UAAL,GAAkB,KAAlB;MACA,KAAKC,WAAL,GAAmB,KAAnB;IACD;;;SAEwB,eAAG;MAC1B,OAAO,CAAC,WAAD,EAAc,UAAd,EAA0B,MAA1B,CAAP;IACD;;;;EAhB0ChB,U;;SAAxBW,e","names":["clamp","Controller","MapState","mod","GlobeState","_applyConstraints","props","maxZoom","minZoom","zoom","longitude","latitude","GlobeController","constructor","dragMode","setProps","dragRotate","touchRotate"],"sources":["../../../src/controllers/globe-controller.ts"],"sourcesContent":["import {clamp} from '@math.gl/core';\nimport Controller from './controller';\n\nimport {MapState} from './map-controller';\nimport {mod} from '../utils/math-utils';\n\nclass GlobeState extends MapState {\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    const {longitude, latitude} = props;\n    if (longitude < -180 || longitude > 180) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n    props.latitude = clamp(latitude, -89, 89);\n\n    return props;\n  }\n}\n\nexport default class GlobeController extends Controller {\n  constructor(props) {\n    props.dragMode = props.dragMode || 'pan';\n    super(GlobeState, props);\n  }\n\n  setProps(props) {\n    super.setProps(props);\n\n    // TODO - support pitching?\n    this.dragRotate = false;\n    this.touchRotate = false;\n  }\n\n  get linearTransitionProps() {\n    return ['longitude', 'latitude', 'zoom'];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}