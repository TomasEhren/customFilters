{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { getBinaryImageMetadata } from '@loaders.gl/images';\nimport { padToNBytes, copyToArray } from '@loaders.gl/loader-utils';\nimport { assert } from '../utils/assert';\nimport { getAccessorArrayTypeAndLength, getAccessorTypeFromSize, getComponentTypeFromArray } from '../gltf-utils/gltf-utils';\nconst DEFAULT_GLTF_JSON = {\n  asset: {\n    version: '2.0',\n    generator: 'loaders.gl'\n  },\n  buffers: []\n};\nexport default class GLTFScenegraph {\n  constructor(gltf) {\n    _defineProperty(this, \"gltf\", void 0);\n\n    _defineProperty(this, \"sourceBuffers\", void 0);\n\n    _defineProperty(this, \"byteLength\", void 0);\n\n    this.gltf = gltf || {\n      json: { ...DEFAULT_GLTF_JSON\n      },\n      buffers: []\n    };\n    this.sourceBuffers = [];\n    this.byteLength = 0;\n\n    if (this.gltf.buffers && this.gltf.buffers[0]) {\n      this.byteLength = this.gltf.buffers[0].byteLength;\n      this.sourceBuffers = [this.gltf.buffers[0]];\n    }\n  }\n\n  get json() {\n    return this.gltf.json;\n  }\n\n  getApplicationData(key) {\n    const data = this.json[key];\n    return data;\n  }\n\n  getExtraData(key) {\n    const extras = this.json.extras || {};\n    return extras[key];\n  }\n\n  getExtension(extensionName) {\n    const isExtension = this.getUsedExtensions().find(name => name === extensionName);\n    const extensions = this.json.extensions || {};\n    return isExtension ? extensions[extensionName] || true : null;\n  }\n\n  getRequiredExtension(extensionName) {\n    const isRequired = this.getRequiredExtensions().find(name => name === extensionName);\n    return isRequired ? this.getExtension(extensionName) : null;\n  }\n\n  getRequiredExtensions() {\n    return this.json.extensionsRequired || [];\n  }\n\n  getUsedExtensions() {\n    return this.json.extensionsUsed || [];\n  }\n\n  getObjectExtension(object, extensionName) {\n    const extensions = object.extensions || {};\n    return extensions[extensionName];\n  }\n\n  getScene(index) {\n    return this.getObject('scenes', index);\n  }\n\n  getNode(index) {\n    return this.getObject('nodes', index);\n  }\n\n  getSkin(index) {\n    return this.getObject('skins', index);\n  }\n\n  getMesh(index) {\n    return this.getObject('meshes', index);\n  }\n\n  getMaterial(index) {\n    return this.getObject('materials', index);\n  }\n\n  getAccessor(index) {\n    return this.getObject('accessors', index);\n  }\n\n  getTexture(index) {\n    return this.getObject('textures', index);\n  }\n\n  getSampler(index) {\n    return this.getObject('samplers', index);\n  }\n\n  getImage(index) {\n    return this.getObject('images', index);\n  }\n\n  getBufferView(index) {\n    return this.getObject('bufferViews', index);\n  }\n\n  getBuffer(index) {\n    return this.getObject('buffers', index);\n  }\n\n  getObject(array, index) {\n    if (typeof index === 'object') {\n      return index;\n    }\n\n    const object = this.json[array] && this.json[array][index];\n\n    if (!object) {\n      throw new Error(\"glTF file error: Could not find \".concat(array, \"[\").concat(index, \"]\"));\n    }\n\n    return object;\n  }\n\n  getTypedArrayForBufferView(bufferView) {\n    bufferView = this.getBufferView(bufferView);\n    const bufferIndex = bufferView.buffer;\n    const binChunk = this.gltf.buffers[bufferIndex];\n    assert(binChunk);\n    const byteOffset = (bufferView.byteOffset || 0) + binChunk.byteOffset;\n    return new Uint8Array(binChunk.arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  getTypedArrayForAccessor(accessor) {\n    accessor = this.getAccessor(accessor);\n    const bufferView = this.getBufferView(accessor.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    const arrayBuffer = buffer.data;\n    const {\n      ArrayType,\n      length\n    } = getAccessorArrayTypeAndLength(accessor, bufferView);\n    const byteOffset = bufferView.byteOffset + accessor.byteOffset;\n    return new ArrayType(arrayBuffer, byteOffset, length);\n  }\n\n  getTypedArrayForImageData(image) {\n    image = this.getAccessor(image);\n    const bufferView = this.getBufferView(image.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    const arrayBuffer = buffer.data;\n    const byteOffset = bufferView.byteOffset || 0;\n    return new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  addApplicationData(key, data) {\n    this.json[key] = data;\n    return this;\n  }\n\n  addExtraData(key, data) {\n    this.json.extras = this.json.extras || {};\n    this.json.extras[key] = data;\n    return this;\n  }\n\n  addObjectExtension(object, extensionName, data) {\n    object.extensions = object.extensions || {};\n    object.extensions[extensionName] = data;\n    this.registerUsedExtension(extensionName);\n    return this;\n  }\n\n  setObjectExtension(object, extensionName, data) {\n    const extensions = object.extensions || {};\n    extensions[extensionName] = data;\n  }\n\n  removeObjectExtension(object, extensionName) {\n    const extensions = object.extensions || {};\n    const extension = extensions[extensionName];\n    delete extensions[extensionName];\n    return extension;\n  }\n\n  addExtension(extensionName) {\n    let extensionData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(extensionData);\n    this.json.extensions = this.json.extensions || {};\n    this.json.extensions[extensionName] = extensionData;\n    this.registerUsedExtension(extensionName);\n    return extensionData;\n  }\n\n  addRequiredExtension(extensionName) {\n    let extensionData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(extensionData);\n    this.addExtension(extensionName, extensionData);\n    this.registerRequiredExtension(extensionName);\n    return extensionData;\n  }\n\n  registerUsedExtension(extensionName) {\n    this.json.extensionsUsed = this.json.extensionsUsed || [];\n\n    if (!this.json.extensionsUsed.find(ext => ext === extensionName)) {\n      this.json.extensionsUsed.push(extensionName);\n    }\n  }\n\n  registerRequiredExtension(extensionName) {\n    this.registerUsedExtension(extensionName);\n    this.json.extensionsRequired = this.json.extensionsRequired || [];\n\n    if (!this.json.extensionsRequired.find(ext => ext === extensionName)) {\n      this.json.extensionsRequired.push(extensionName);\n    }\n  }\n\n  removeExtension(extensionName) {\n    if (this.json.extensionsRequired) {\n      this._removeStringFromArray(this.json.extensionsRequired, extensionName);\n    }\n\n    if (this.json.extensionsUsed) {\n      this._removeStringFromArray(this.json.extensionsUsed, extensionName);\n    }\n\n    if (this.json.extensions) {\n      delete this.json.extensions[extensionName];\n    }\n  }\n\n  setDefaultScene(sceneIndex) {\n    this.json.scene = sceneIndex;\n  }\n\n  addScene(scene) {\n    const {\n      nodeIndices\n    } = scene;\n    this.json.scenes = this.json.scenes || [];\n    this.json.scenes.push({\n      nodes: nodeIndices\n    });\n    return this.json.scenes.length - 1;\n  }\n\n  addNode(node) {\n    const {\n      meshIndex,\n      matrix\n    } = node;\n    this.json.nodes = this.json.nodes || [];\n    const nodeData = {\n      mesh: meshIndex\n    };\n\n    if (matrix) {\n      nodeData.matrix = matrix;\n    }\n\n    this.json.nodes.push(nodeData);\n    return this.json.nodes.length - 1;\n  }\n\n  addMesh(mesh) {\n    const {\n      attributes,\n      indices,\n      material,\n      mode = 4\n    } = mesh;\n\n    const accessors = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [{\n        attributes: accessors,\n        mode\n      }]\n    };\n\n    if (indices) {\n      const indicesAccessor = this._addIndices(indices);\n\n      glTFMesh.primitives[0].indices = indicesAccessor;\n    }\n\n    if (Number.isFinite(material)) {\n      glTFMesh.primitives[0].material = material;\n    }\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  addPointCloud(attributes) {\n    const accessorIndices = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [{\n        attributes: accessorIndices,\n        mode: 0\n      }]\n    };\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  addImage(imageData, mimeTypeOpt) {\n    const metadata = getBinaryImageMetadata(imageData);\n    const mimeType = mimeTypeOpt || (metadata === null || metadata === void 0 ? void 0 : metadata.mimeType);\n    const bufferViewIndex = this.addBufferView(imageData);\n    const glTFImage = {\n      bufferView: bufferViewIndex,\n      mimeType\n    };\n    this.json.images = this.json.images || [];\n    this.json.images.push(glTFImage);\n    return this.json.images.length - 1;\n  }\n\n  addBufferView(buffer) {\n    const byteLength = buffer.byteLength;\n    assert(Number.isFinite(byteLength));\n    this.sourceBuffers = this.sourceBuffers || [];\n    this.sourceBuffers.push(buffer);\n    const glTFBufferView = {\n      buffer: 0,\n      byteOffset: this.byteLength,\n      byteLength\n    };\n    this.byteLength += padToNBytes(byteLength, 4);\n    this.json.bufferViews = this.json.bufferViews || [];\n    this.json.bufferViews.push(glTFBufferView);\n    return this.json.bufferViews.length - 1;\n  }\n\n  addAccessor(bufferViewIndex, accessor) {\n    const glTFAccessor = {\n      bufferView: bufferViewIndex,\n      type: getAccessorTypeFromSize(accessor.size),\n      componentType: accessor.componentType,\n      count: accessor.count,\n      max: accessor.max,\n      min: accessor.min\n    };\n    this.json.accessors = this.json.accessors || [];\n    this.json.accessors.push(glTFAccessor);\n    return this.json.accessors.length - 1;\n  }\n\n  addBinaryBuffer(sourceBuffer) {\n    let accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      size: 3\n    };\n    const bufferViewIndex = this.addBufferView(sourceBuffer);\n    let minMax = {\n      min: accessor.min,\n      max: accessor.max\n    };\n\n    if (!minMax.min || !minMax.max) {\n      minMax = this._getAccessorMinMax(sourceBuffer, accessor.size);\n    }\n\n    const accessorDefaults = {\n      size: accessor.size,\n      componentType: getComponentTypeFromArray(sourceBuffer),\n      count: Math.round(sourceBuffer.length / accessor.size),\n      min: minMax.min,\n      max: minMax.max\n    };\n    return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));\n  }\n\n  addTexture(texture) {\n    const {\n      imageIndex\n    } = texture;\n    const glTFTexture = {\n      source: imageIndex\n    };\n    this.json.textures = this.json.textures || [];\n    this.json.textures.push(glTFTexture);\n    return this.json.textures.length - 1;\n  }\n\n  addMaterial(pbrMaterialInfo) {\n    this.json.materials = this.json.materials || [];\n    this.json.materials.push(pbrMaterialInfo);\n    return this.json.materials.length - 1;\n  }\n\n  createBinaryChunk() {\n    var _this$json, _this$json$buffers;\n\n    this.gltf.buffers = [];\n    const totalByteLength = this.byteLength;\n    const arrayBuffer = new ArrayBuffer(totalByteLength);\n    const targetArray = new Uint8Array(arrayBuffer);\n    let dstByteOffset = 0;\n\n    for (const sourceBuffer of this.sourceBuffers || []) {\n      dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);\n    }\n\n    if ((_this$json = this.json) !== null && _this$json !== void 0 && (_this$json$buffers = _this$json.buffers) !== null && _this$json$buffers !== void 0 && _this$json$buffers[0]) {\n      this.json.buffers[0].byteLength = totalByteLength;\n    } else {\n      this.json.buffers = [{\n        byteLength: totalByteLength\n      }];\n    }\n\n    this.gltf.binary = arrayBuffer;\n    this.sourceBuffers = [arrayBuffer];\n  }\n\n  _removeStringFromArray(array, string) {\n    let found = true;\n\n    while (found) {\n      const index = array.indexOf(string);\n\n      if (index > -1) {\n        array.splice(index, 1);\n      } else {\n        found = false;\n      }\n    }\n  }\n\n  _addAttributes() {\n    let attributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const result = {};\n\n    for (const attributeKey in attributes) {\n      const attributeData = attributes[attributeKey];\n\n      const attrName = this._getGltfAttributeName(attributeKey);\n\n      const accessor = this.addBinaryBuffer(attributeData.value, attributeData);\n      result[attrName] = accessor;\n    }\n\n    return result;\n  }\n\n  _addIndices(indices) {\n    return this.addBinaryBuffer(indices, {\n      size: 1\n    });\n  }\n\n  _getGltfAttributeName(attributeName) {\n    switch (attributeName.toLowerCase()) {\n      case 'position':\n      case 'positions':\n      case 'vertices':\n        return 'POSITION';\n\n      case 'normal':\n      case 'normals':\n        return 'NORMAL';\n\n      case 'color':\n      case 'colors':\n        return 'COLOR_0';\n\n      case 'texcoord':\n      case 'texcoords':\n        return 'TEXCOORD_0';\n\n      default:\n        return attributeName;\n    }\n  }\n\n  _getAccessorMinMax(buffer, size) {\n    const result = {\n      min: null,\n      max: null\n    };\n\n    if (buffer.length < size) {\n      return result;\n    }\n\n    result.min = [];\n    result.max = [];\n    const initValues = buffer.subarray(0, size);\n\n    for (const value of initValues) {\n      result.min.push(value);\n      result.max.push(value);\n    }\n\n    for (let index = size; index < buffer.length; index += size) {\n      for (let componentIndex = 0; componentIndex < size; componentIndex++) {\n        result.min[0 + componentIndex] = Math.min(result.min[0 + componentIndex], buffer[index + componentIndex]);\n        result.max[0 + componentIndex] = Math.max(result.max[0 + componentIndex], buffer[index + componentIndex]);\n      }\n    }\n\n    return result;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["getBinaryImageMetadata","padToNBytes","copyToArray","assert","getAccessorArrayTypeAndLength","getAccessorTypeFromSize","getComponentTypeFromArray","DEFAULT_GLTF_JSON","asset","version","generator","buffers","GLTFScenegraph","constructor","gltf","_defineProperty","json","sourceBuffers","byteLength","getApplicationData","key","data","getExtraData","extras","getExtension","extensionName","isExtension","getUsedExtensions","find","name","extensions","getRequiredExtension","isRequired","getRequiredExtensions","extensionsRequired","extensionsUsed","getObjectExtension","object","getScene","index","getObject","getNode","getSkin","getMesh","getMaterial","getAccessor","getTexture","getSampler","getImage","getBufferView","getBuffer","array","Error","getTypedArrayForBufferView","bufferView","bufferIndex","buffer","binChunk","byteOffset","Uint8Array","arrayBuffer","getTypedArrayForAccessor","accessor","ArrayType","length","getTypedArrayForImageData","image","addApplicationData","addExtraData","addObjectExtension","registerUsedExtension","setObjectExtension","removeObjectExtension","extension","addExtension","extensionData","addRequiredExtension","registerRequiredExtension","ext","push","removeExtension","_removeStringFromArray","setDefaultScene","sceneIndex","scene","addScene","nodeIndices","scenes","nodes","addNode","node","meshIndex","matrix","nodeData","mesh","addMesh","attributes","indices","material","mode","accessors","_addAttributes","glTFMesh","primitives","indicesAccessor","_addIndices","Number","isFinite","meshes","addPointCloud","accessorIndices","addImage","imageData","mimeTypeOpt","metadata","mimeType","bufferViewIndex","addBufferView","glTFImage","images","glTFBufferView","bufferViews","addAccessor","glTFAccessor","type","size","componentType","count","max","min","addBinaryBuffer","sourceBuffer","minMax","_getAccessorMinMax","accessorDefaults","Math","round","Object","assign","addTexture","texture","imageIndex","glTFTexture","source","textures","addMaterial","pbrMaterialInfo","materials","createBinaryChunk","totalByteLength","ArrayBuffer","targetArray","dstByteOffset","_this$json","_this$json$buffers","binary","string","found","indexOf","splice","result","attributeKey","attributeData","attrName","_getGltfAttributeName","value","attributeName","toLowerCase","initValues","subarray","componentIndex"],"sources":["../../../../src/lib/api/gltf-scenegraph.ts"],"sourcesContent":["import type {\n  GLTF,\n  GLTFScene,\n  GLTFNode,\n  GLTFMesh,\n  GLTFSkin,\n  GLTFMaterial,\n  GLTFAccessor,\n  GLTFSampler,\n  GLTFTexture,\n  GLTFImage,\n  GLTFBuffer,\n  GLTFBufferView\n} from '../types/gltf-types';\n\nimport {getBinaryImageMetadata} from '@loaders.gl/images';\nimport {padToNBytes, copyToArray} from '@loaders.gl/loader-utils';\nimport {assert} from '../utils/assert';\nimport {\n  getAccessorArrayTypeAndLength,\n  getAccessorTypeFromSize,\n  getComponentTypeFromArray\n} from '../gltf-utils/gltf-utils';\n\ntype GLTFWithBuffers = {\n  json: GLTF;\n  buffers: any[];\n  binary?: ArrayBuffer;\n};\n\nconst DEFAULT_GLTF_JSON: GLTF = {\n  asset: {\n    version: '2.0',\n    generator: 'loaders.gl'\n  },\n  buffers: []\n};\n\ntype Extension = {[key: string]: any};\n/**\n * Class for structured access to GLTF data\n */\nexport default class GLTFScenegraph {\n  // internal\n  gltf: GLTFWithBuffers;\n  sourceBuffers: any[];\n  byteLength: number;\n\n  constructor(gltf?: {json: GLTF; buffers?: any[]}) {\n    // @ts-ignore\n    this.gltf = gltf || {\n      json: {...DEFAULT_GLTF_JSON},\n      buffers: []\n    };\n    this.sourceBuffers = [];\n    this.byteLength = 0;\n\n    // Initialize buffers\n    if (this.gltf.buffers && this.gltf.buffers[0]) {\n      this.byteLength = this.gltf.buffers[0].byteLength;\n      this.sourceBuffers = [this.gltf.buffers[0]];\n    }\n  }\n\n  // Accessors\n\n  get json(): GLTF {\n    return this.gltf.json;\n  }\n\n  getApplicationData(key: string): {[key: string]: any} {\n    // TODO - Data is already unpacked by GLBParser\n    const data = this.json[key];\n    return data;\n  }\n\n  getExtraData(key: string): {[key: string]: any} {\n    // TODO - Data is already unpacked by GLBParser\n    const extras = this.json.extras || {};\n    return extras[key];\n  }\n\n  getExtension<T = Extension>(extensionName: string): T | null {\n    const isExtension = this.getUsedExtensions().find((name) => name === extensionName);\n    const extensions = this.json.extensions || {};\n    return isExtension ? extensions[extensionName] || true : null;\n  }\n\n  getRequiredExtension<T = Extension>(extensionName: string): T | null {\n    const isRequired = this.getRequiredExtensions().find((name) => name === extensionName);\n    return isRequired ? this.getExtension(extensionName) : null;\n  }\n\n  getRequiredExtensions(): string[] {\n    return this.json.extensionsRequired || [];\n  }\n\n  getUsedExtensions(): string[] {\n    return this.json.extensionsUsed || [];\n  }\n\n  getObjectExtension<T = Extension>(object: {[key: string]: any}, extensionName: string): T | null {\n    const extensions = object.extensions || {};\n    return extensions[extensionName];\n  }\n\n  getScene(index: number): GLTFScene {\n    return this.getObject('scenes', index) as GLTFScene;\n  }\n\n  getNode(index: number): GLTFNode {\n    return this.getObject('nodes', index) as GLTFNode;\n  }\n\n  getSkin(index: number): GLTFSkin {\n    return this.getObject('skins', index) as GLTFSkin;\n  }\n\n  getMesh(index: number): GLTFMesh {\n    return this.getObject('meshes', index) as GLTFMesh;\n  }\n\n  getMaterial(index: number): GLTFMaterial {\n    return this.getObject('materials', index) as GLTFMaterial;\n  }\n\n  getAccessor(index: number): GLTFAccessor {\n    return this.getObject('accessors', index) as GLTFAccessor;\n  }\n\n  // getCamera(index: number): object | null {\n  //   return null; // TODO: fix thi: object  as null;\n  // }\n\n  getTexture(index: number): GLTFTexture {\n    return this.getObject('textures', index) as GLTFTexture;\n  }\n\n  getSampler(index: number): GLTFSampler {\n    return this.getObject('samplers', index) as GLTFSampler;\n  }\n\n  getImage(index: number): GLTFImage {\n    return this.getObject('images', index) as GLTFImage;\n  }\n\n  getBufferView(index: number | object): GLTFBufferView {\n    return this.getObject('bufferViews', index) as GLTFBufferView;\n  }\n\n  getBuffer(index: number): GLTFBuffer {\n    return this.getObject('buffers', index) as GLTFBuffer;\n  }\n\n  getObject(array: string, index: number | object): object {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.json[array] && this.json[array][index];\n    if (!object) {\n      throw new Error(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  /**\n   * Accepts buffer view index or buffer view object\n   * @returns a `Uint8Array`\n   */\n  getTypedArrayForBufferView(bufferView: number | object): Uint8Array {\n    bufferView = this.getBufferView(bufferView);\n    // @ts-ignore\n    const bufferIndex = bufferView.buffer;\n\n    // Get hold of the arrayBuffer\n    // const buffer = this.getBuffer(bufferIndex);\n    const binChunk = this.gltf.buffers[bufferIndex];\n    assert(binChunk);\n\n    // @ts-ignore\n    const byteOffset = (bufferView.byteOffset || 0) + binChunk.byteOffset;\n    // @ts-ignore\n    return new Uint8Array(binChunk.arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  /** Accepts accessor index or accessor object\n   * @returns a typed array with type that matches the types\n   */\n  getTypedArrayForAccessor(accessor: number | object): any {\n    // @ts-ignore\n    accessor = this.getAccessor(accessor);\n    // @ts-ignore\n    const bufferView = this.getBufferView(accessor.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    // @ts-ignore\n    const arrayBuffer = buffer.data;\n\n    // Create a new typed array as a view into the combined buffer\n    const {ArrayType, length} = getAccessorArrayTypeAndLength(accessor, bufferView);\n    // @ts-ignore\n    const byteOffset = bufferView.byteOffset + accessor.byteOffset;\n    return new ArrayType(arrayBuffer, byteOffset, length);\n  }\n\n  /** accepts accessor index or accessor object\n   * returns a `Uint8Array`\n   */\n  getTypedArrayForImageData(image: number | object): Uint8Array {\n    // @ts-ignore\n    image = this.getAccessor(image);\n    // @ts-ignore\n    const bufferView = this.getBufferView(image.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    // @ts-ignore\n    const arrayBuffer = buffer.data;\n\n    const byteOffset = bufferView.byteOffset || 0;\n    return new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  // MODIFERS\n\n  /**\n   * Add an extra application-defined key to the top-level data structure\n   */\n  addApplicationData(key: string, data: object): GLTFScenegraph {\n    this.json[key] = data;\n    return this;\n  }\n\n  /**\n   * `extras` - Standard GLTF field for storing application specific data\n   */\n  addExtraData(key: string, data: object): GLTFScenegraph {\n    this.json.extras = this.json.extras || {};\n    this.json.extras[key] = data;\n    return this;\n  }\n\n  addObjectExtension(object: object, extensionName: string, data: object): GLTFScenegraph {\n    // @ts-ignore\n    object.extensions = object.extensions || {};\n    // TODO - clobber or merge?\n    // @ts-ignore\n    object.extensions[extensionName] = data;\n    this.registerUsedExtension(extensionName);\n    return this;\n  }\n\n  setObjectExtension(object: object, extensionName: string, data: object): void {\n    // @ts-ignore\n    const extensions = object.extensions || {};\n    extensions[extensionName] = data;\n    // TODO - add to usedExtensions...\n  }\n\n  removeObjectExtension(object: object, extensionName: string): object {\n    // @ts-ignore\n    const extensions = object.extensions || {};\n    const extension = extensions[extensionName];\n    delete extensions[extensionName];\n    return extension;\n  }\n\n  /**\n   * Add to standard GLTF top level extension object, mark as used\n   */\n  addExtension(extensionName: string, extensionData: object = {}): object {\n    assert(extensionData);\n    this.json.extensions = this.json.extensions || {};\n    this.json.extensions[extensionName] = extensionData;\n    this.registerUsedExtension(extensionName);\n    return extensionData;\n  }\n\n  /**\n   * Standard GLTF top level extension object, mark as used and required\n   */\n  addRequiredExtension(extensionName, extensionData: object = {}): object {\n    assert(extensionData);\n    this.addExtension(extensionName, extensionData);\n    this.registerRequiredExtension(extensionName);\n    return extensionData;\n  }\n\n  /**\n   * Add extensionName to list of used extensions\n   */\n  registerUsedExtension(extensionName: string): void {\n    this.json.extensionsUsed = this.json.extensionsUsed || [];\n    if (!this.json.extensionsUsed.find((ext) => ext === extensionName)) {\n      this.json.extensionsUsed.push(extensionName);\n    }\n  }\n\n  /**\n   * Add extensionName to list of required extensions\n   */\n  registerRequiredExtension(extensionName: string): void {\n    this.registerUsedExtension(extensionName);\n    this.json.extensionsRequired = this.json.extensionsRequired || [];\n    if (!this.json.extensionsRequired.find((ext) => ext === extensionName)) {\n      this.json.extensionsRequired.push(extensionName);\n    }\n  }\n\n  /**\n   * Removes an extension from the top-level list\n   */\n  removeExtension(extensionName: string): void {\n    if (this.json.extensionsRequired) {\n      this._removeStringFromArray(this.json.extensionsRequired, extensionName);\n    }\n    if (this.json.extensionsUsed) {\n      this._removeStringFromArray(this.json.extensionsUsed, extensionName);\n    }\n    if (this.json.extensions) {\n      delete this.json.extensions[extensionName];\n    }\n  }\n\n  /**\n   *  Set default scene which is to be displayed at load time\n   */\n  setDefaultScene(sceneIndex: number): void {\n    this.json.scene = sceneIndex;\n  }\n\n  /**\n   * @todo: add more properties for scene initialization:\n   *   name`, `extensions`, `extras`\n   *   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-scene\n   */\n  addScene(scene: {nodeIndices: number[]}): number {\n    const {nodeIndices} = scene;\n    this.json.scenes = this.json.scenes || [];\n    this.json.scenes.push({nodes: nodeIndices});\n    return this.json.scenes.length - 1;\n  }\n\n  /**\n   * @todo: add more properties for node initialization:\n   *   `name`, `extensions`, `extras`, `camera`, `children`, `skin`, `rotation`, `scale`, `translation`, `weights`\n   *   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#node\n   */\n  addNode(node: {meshIndex: number; matrix?: number[]}): number {\n    const {meshIndex, matrix} = node;\n    this.json.nodes = this.json.nodes || [];\n    const nodeData = {mesh: meshIndex};\n    if (matrix) {\n      // @ts-ignore\n      nodeData.matrix = matrix;\n    }\n    this.json.nodes.push(nodeData);\n    return this.json.nodes.length - 1;\n  }\n\n  /** Adds a mesh to the json part */\n  addMesh(mesh: {attributes: object; indices?: object; material?: number; mode?: number}): number {\n    const {attributes, indices, material, mode = 4} = mesh;\n    const accessors = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessors,\n          mode\n        }\n      ]\n    };\n\n    if (indices) {\n      const indicesAccessor = this._addIndices(indices);\n      // @ts-ignore\n      glTFMesh.primitives[0].indices = indicesAccessor;\n    }\n\n    if (Number.isFinite(material)) {\n      // @ts-ignore\n      glTFMesh.primitives[0].material = material;\n    }\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  addPointCloud(attributes: object): number {\n    // @ts-ignore\n    const accessorIndices = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessorIndices,\n          mode: 0 // GL.POINTS\n        }\n      ]\n    };\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  /**\n   * Adds a binary image. Builds glTF \"JSON metadata\" and saves buffer reference\n   * Buffer will be copied into BIN chunk during \"pack\"\n   * Currently encodes as glTF image\n   * @param imageData\n   * @param mimeType\n   */\n  addImage(imageData: any, mimeTypeOpt?: string): number {\n    // If image is referencing a bufferView instead of URI, mimeType must be defined:\n    //   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#images\n    //   \"a reference to a bufferView; in that case mimeType must be defined.\"\n    const metadata = getBinaryImageMetadata(imageData);\n    const mimeType = mimeTypeOpt || metadata?.mimeType;\n\n    const bufferViewIndex = this.addBufferView(imageData);\n\n    const glTFImage = {\n      bufferView: bufferViewIndex,\n      mimeType\n    };\n\n    this.json.images = this.json.images || [];\n    this.json.images.push(glTFImage);\n    return this.json.images.length - 1;\n  }\n\n  /**\n   * Add one untyped source buffer, create a matching glTF `bufferView`, and return its index\n   * @param buffer\n   */\n  addBufferView(buffer: any): number {\n    const byteLength = buffer.byteLength;\n    assert(Number.isFinite(byteLength));\n\n    // Add this buffer to the list of buffers to be written to the body.\n    this.sourceBuffers = this.sourceBuffers || [];\n    this.sourceBuffers.push(buffer);\n\n    const glTFBufferView = {\n      buffer: 0,\n      // Write offset from the start of the binary body\n      byteOffset: this.byteLength,\n      byteLength\n    };\n\n    // We've now added the contents to the body, so update the total length\n    // Every sub-chunk needs to be 4-byte align ed\n    this.byteLength += padToNBytes(byteLength, 4);\n\n    // Add a bufferView indicating start and length of this binary sub-chunk\n    this.json.bufferViews = this.json.bufferViews || [];\n    this.json.bufferViews.push(glTFBufferView);\n    return this.json.bufferViews.length - 1;\n  }\n\n  /**\n   * Adds an accessor to a bufferView\n   * @param bufferViewIndex\n   * @param accessor\n   */\n  addAccessor(bufferViewIndex: number, accessor: object): number {\n    const glTFAccessor = {\n      bufferView: bufferViewIndex,\n      // @ts-ignore\n      type: getAccessorTypeFromSize(accessor.size),\n      // @ts-ignore\n      componentType: accessor.componentType,\n      // @ts-ignore\n      count: accessor.count,\n      // @ts-ignore\n      max: accessor.max,\n      // @ts-ignore\n      min: accessor.min\n    };\n\n    this.json.accessors = this.json.accessors || [];\n    this.json.accessors.push(glTFAccessor);\n    return this.json.accessors.length - 1;\n  }\n\n  /**\n   * Add a binary buffer. Builds glTF \"JSON metadata\" and saves buffer reference\n   * Buffer will be copied into BIN chunk during \"pack\"\n   * Currently encodes buffers as glTF accessors, but this could be optimized\n   * @param sourceBuffer\n   * @param accessor\n   */\n  addBinaryBuffer(sourceBuffer: any, accessor: object = {size: 3}): number {\n    const bufferViewIndex = this.addBufferView(sourceBuffer);\n    // @ts-ignore\n    let minMax = {min: accessor.min, max: accessor.max};\n    if (!minMax.min || !minMax.max) {\n      // @ts-ignore\n      minMax = this._getAccessorMinMax(sourceBuffer, accessor.size);\n    }\n\n    const accessorDefaults = {\n      // @ts-ignore\n      size: accessor.size,\n      componentType: getComponentTypeFromArray(sourceBuffer),\n      // @ts-ignore\n      count: Math.round(sourceBuffer.length / accessor.size),\n      min: minMax.min,\n      max: minMax.max\n    };\n\n    return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));\n  }\n\n  /**\n   * Adds a texture to the json part\n   * @todo: add more properties for texture initialization\n   * `sampler`, `name`, `extensions`, `extras`\n   * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#texture\n   */\n  addTexture(texture: {imageIndex: number}): number {\n    const {imageIndex} = texture;\n    const glTFTexture = {\n      source: imageIndex\n    };\n\n    this.json.textures = this.json.textures || [];\n    this.json.textures.push(glTFTexture);\n    return this.json.textures.length - 1;\n  }\n\n  /** Adds a material to the json part */\n  addMaterial(pbrMaterialInfo: Object): number {\n    this.json.materials = this.json.materials || [];\n    this.json.materials.push(pbrMaterialInfo);\n    return this.json.materials.length - 1;\n  }\n\n  /** Pack the binary chunk */\n  createBinaryChunk(): void {\n    // Encoder expects this array undefined or empty\n    this.gltf.buffers = [];\n\n    // Allocate total array\n    const totalByteLength = this.byteLength;\n    const arrayBuffer = new ArrayBuffer(totalByteLength);\n    const targetArray = new Uint8Array(arrayBuffer);\n\n    // Copy each array into\n    let dstByteOffset = 0;\n    for (const sourceBuffer of this.sourceBuffers || []) {\n      dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);\n    }\n\n    // Update the glTF BIN CHUNK byte length\n    if (this.json?.buffers?.[0]) {\n      this.json.buffers[0].byteLength = totalByteLength;\n    } else {\n      this.json.buffers = [{byteLength: totalByteLength}];\n    }\n\n    // Save generated arrayBuffer\n    this.gltf.binary = arrayBuffer;\n\n    // Put arrayBuffer to sourceBuffers for possible additional writing data in the chunk\n    this.sourceBuffers = [arrayBuffer];\n  }\n\n  // PRIVATE\n\n  _removeStringFromArray(array, string) {\n    let found = true;\n    while (found) {\n      const index = array.indexOf(string);\n      if (index > -1) {\n        array.splice(index, 1);\n      } else {\n        found = false;\n      }\n    }\n  }\n\n  /**\n   * Add attributes to buffers and create `attributes` object which is part of `mesh`\n   */\n  _addAttributes(attributes = {}) {\n    const result = {};\n    for (const attributeKey in attributes) {\n      const attributeData = attributes[attributeKey];\n      const attrName = this._getGltfAttributeName(attributeKey);\n      const accessor = this.addBinaryBuffer(attributeData.value, attributeData);\n      result[attrName] = accessor;\n    }\n    return result;\n  }\n\n  /**\n   * Add indices to buffers\n   */\n  _addIndices(indices) {\n    return this.addBinaryBuffer(indices, {size: 1});\n  }\n\n  /**\n   * Deduce gltf specific attribue name from input attribute name\n   */\n  _getGltfAttributeName(attributeName) {\n    switch (attributeName.toLowerCase()) {\n      case 'position':\n      case 'positions':\n      case 'vertices':\n        return 'POSITION';\n      case 'normal':\n      case 'normals':\n        return 'NORMAL';\n      case 'color':\n      case 'colors':\n        return 'COLOR_0';\n      case 'texcoord':\n      case 'texcoords':\n        return 'TEXCOORD_0';\n      default:\n        return attributeName;\n    }\n  }\n\n  /**\n   * Calculate `min` and `max` arrays of accessor according to spec:\n   * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-accessor\n   */\n  _getAccessorMinMax(buffer, size) {\n    const result = {min: null, max: null};\n    if (buffer.length < size) {\n      return result;\n    }\n    // @ts-ignore\n    result.min = [];\n    // @ts-ignore\n    result.max = [];\n    const initValues = buffer.subarray(0, size);\n    for (const value of initValues) {\n      // @ts-ignore\n      result.min.push(value);\n      // @ts-ignore\n      result.max.push(value);\n    }\n\n    for (let index = size; index < buffer.length; index += size) {\n      for (let componentIndex = 0; componentIndex < size; componentIndex++) {\n        // @ts-ignore\n        result.min[0 + componentIndex] = Math.min(\n          // @ts-ignore\n          result.min[0 + componentIndex],\n          buffer[index + componentIndex]\n        );\n        // @ts-ignore\n        result.max[0 + componentIndex] = Math.max(\n          // @ts-ignore\n          result.max[0 + componentIndex],\n          buffer[index + componentIndex]\n        );\n      }\n    }\n    return result;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}