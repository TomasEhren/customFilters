{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Layer, project32, picking, log, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport PathTesselator from './path-tesselator';\nimport vs from './path-layer-vertex.glsl';\nimport fs from './path-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  widthUnits: 'meters',\n  widthScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  widthMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  widthMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  jointRounded: false,\n  capRounded: false,\n  miterLimit: {\n    type: 'number',\n    min: 0,\n    value: 4\n  },\n  billboard: false,\n  _pathType: null,\n  getPath: {\n    type: 'accessor',\n    value: function value(object) {\n      return object.path;\n    }\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  rounded: {\n    deprecatedFor: ['jointRounded', 'capRounded']\n  }\n};\nvar ATTRIBUTE_TRANSITION = {\n  enter: function enter(value, chunk) {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nvar PathLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(PathLayer, _Layer);\n\n  var _super = _createSuper(PathLayer);\n\n  function PathLayer() {\n    _classCallCheck(this, PathLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PathLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _get(_getPrototypeOf(PathLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, picking]\n      });\n    }\n  }, {\n    key: \"wrapLongitude\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var _this = this;\n\n      var noAlloc = true;\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        positions: {\n          size: 3,\n          vertexOffset: 1,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: ATTRIBUTE_TRANSITION,\n          accessor: 'getPath',\n          update: this.calculatePositions,\n          noAlloc: noAlloc,\n          shaderAttributes: {\n            instanceLeftPositions: {\n              vertexOffset: 0\n            },\n            instanceStartPositions: {\n              vertexOffset: 1\n            },\n            instanceEndPositions: {\n              vertexOffset: 2\n            },\n            instanceRightPositions: {\n              vertexOffset: 3\n            }\n          }\n        },\n        instanceTypes: {\n          size: 1,\n          type: 5121,\n          update: this.calculateSegmentTypes,\n          noAlloc: noAlloc\n        },\n        instanceStrokeWidths: {\n          size: 1,\n          accessor: 'getWidth',\n          transition: ATTRIBUTE_TRANSITION,\n          defaultValue: 1\n        },\n        instanceColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          accessor: 'getColor',\n          transition: ATTRIBUTE_TRANSITION,\n          defaultValue: DEFAULT_COLOR\n        },\n        instancePickingColors: {\n          size: 3,\n          type: 5121,\n          accessor: function accessor(object, _ref) {\n            var index = _ref.index,\n                value = _ref.target;\n            return _this.encodePickingColor(object && object.__source ? object.__source.index : index, value);\n          }\n        }\n      });\n      this.setState({\n        pathTesselator: new PathTesselator({\n          fp64: this.use64bitPositions()\n        })\n      });\n\n      if (this.props.getDashArray && !this.props.extensions.length) {\n        log.removed('getDashArray', 'PathStyleExtension')();\n      }\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref2) {\n      var oldProps = _ref2.oldProps,\n          props = _ref2.props,\n          changeFlags = _ref2.changeFlags;\n\n      _get(_getPrototypeOf(PathLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      var attributeManager = this.getAttributeManager();\n      var geometryChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath);\n\n      if (geometryChanged) {\n        var pathTesselator = this.state.pathTesselator;\n        var buffers = props.data.attributes || {};\n        pathTesselator.updateGeometry({\n          data: props.data,\n          geometryBuffer: buffers.getPath,\n          buffers: buffers,\n          normalize: !props._pathType,\n          loop: props._pathType === 'loop',\n          getGeometry: props.getPath,\n          positionFormat: props.positionFormat,\n          wrapLongitude: props.wrapLongitude,\n          resolution: this.context.viewport.resolution,\n          dataChanged: changeFlags.dataChanged\n        });\n        this.setState({\n          numInstances: pathTesselator.instanceCount,\n          startIndices: pathTesselator.vertexStarts\n        });\n\n        if (!changeFlags.dataChanged) {\n          attributeManager.invalidateAll();\n        }\n      }\n\n      if (changeFlags.extensionsChanged) {\n        var _this$state$model;\n\n        var gl = this.context.gl;\n        (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n        this.state.model = this._getModel(gl);\n        attributeManager.invalidateAll();\n      }\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(params) {\n      var info = _get(_getPrototypeOf(PathLayer.prototype), \"getPickingInfo\", this).call(this, params);\n\n      var index = info.index;\n      var data = this.props.data;\n\n      if (data[0] && data[0].__source) {\n        info.object = data.find(function (d) {\n          return d.__source.index === index;\n        });\n      }\n\n      return info;\n    }\n  }, {\n    key: \"disablePickingIndex\",\n    value: function disablePickingIndex(objectIndex) {\n      var data = this.props.data;\n\n      if (data[0] && data[0].__source) {\n        for (var i = 0; i < data.length; i++) {\n          if (data[i].__source.index === objectIndex) {\n            this._disablePickingIndex(i);\n          }\n        }\n      } else {\n        this._disablePickingIndex(objectIndex);\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref3) {\n      var uniforms = _ref3.uniforms;\n      var _this$props = this.props,\n          jointRounded = _this$props.jointRounded,\n          capRounded = _this$props.capRounded,\n          billboard = _this$props.billboard,\n          miterLimit = _this$props.miterLimit,\n          widthUnits = _this$props.widthUnits,\n          widthScale = _this$props.widthScale,\n          widthMinPixels = _this$props.widthMinPixels,\n          widthMaxPixels = _this$props.widthMaxPixels;\n      this.state.model.setUniforms(uniforms).setUniforms({\n        jointType: Number(jointRounded),\n        capType: Number(capRounded),\n        billboard: billboard,\n        widthUnits: UNIT[widthUnits],\n        widthScale: widthScale,\n        miterLimit: miterLimit,\n        widthMinPixels: widthMinPixels,\n        widthMaxPixels: widthMaxPixels\n      }).draw();\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var SEGMENT_INDICES = [0, 1, 2, 1, 4, 2, 1, 3, 4, 3, 5, 4];\n      var SEGMENT_POSITIONS = [0, 0, 0, -1, 0, 1, 1, -1, 1, 1, 1, 0];\n      return new Model(gl, _objectSpread(_objectSpread({}, this.getShaders()), {}, {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 4,\n          attributes: {\n            indices: new Uint16Array(SEGMENT_INDICES),\n            positions: {\n              value: new Float32Array(SEGMENT_POSITIONS),\n              size: 2\n            }\n          }\n        }),\n        isInstanced: true\n      }));\n    }\n  }, {\n    key: \"calculatePositions\",\n    value: function calculatePositions(attribute) {\n      var pathTesselator = this.state.pathTesselator;\n      attribute.startIndices = pathTesselator.vertexStarts;\n      attribute.value = pathTesselator.get('positions');\n    }\n  }, {\n    key: \"calculateSegmentTypes\",\n    value: function calculateSegmentTypes(attribute) {\n      var pathTesselator = this.state.pathTesselator;\n      attribute.startIndices = pathTesselator.vertexStarts;\n      attribute.value = pathTesselator.get('segmentTypes');\n    }\n  }]);\n\n  return PathLayer;\n}(Layer);\n\nexport { PathLayer as default };\nPathLayer.layerName = 'PathLayer';\nPathLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["Layer","project32","picking","log","UNIT","Model","Geometry","PathTesselator","vs","fs","DEFAULT_COLOR","defaultProps","widthUnits","widthScale","type","min","value","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","jointRounded","capRounded","miterLimit","billboard","_pathType","getPath","object","path","getColor","getWidth","rounded","deprecatedFor","ATTRIBUTE_TRANSITION","enter","chunk","length","subarray","PathLayer","getShaders","modules","initializeState","noAlloc","attributeManager","getAttributeManager","addInstanced","positions","size","vertexOffset","fp64","use64bitPositions","transition","accessor","update","calculatePositions","shaderAttributes","instanceLeftPositions","instanceStartPositions","instanceEndPositions","instanceRightPositions","instanceTypes","calculateSegmentTypes","instanceStrokeWidths","defaultValue","instanceColors","props","colorFormat","normalized","instancePickingColors","index","target","encodePickingColor","__source","setState","pathTesselator","getDashArray","extensions","removed","updateState","oldProps","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","state","buffers","data","attributes","updateGeometry","geometryBuffer","normalize","loop","getGeometry","positionFormat","wrapLongitude","resolution","context","viewport","numInstances","instanceCount","startIndices","vertexStarts","invalidateAll","extensionsChanged","gl","model","delete","_getModel","getPickingInfo","params","info","find","d","disablePickingIndex","objectIndex","i","_disablePickingIndex","draw","uniforms","setUniforms","jointType","capType","SEGMENT_INDICES","SEGMENT_POSITIONS","id","geometry","drawMode","indices","Uint16Array","Float32Array","isInstanced","attribute","get","layerName"],"sources":["../../../src/path-layer/path-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, log, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport PathTesselator from './path-tesselator';\n\nimport vs from './path-layer-vertex.glsl';\nimport fs from './path-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  widthUnits: 'meters',\n  widthScale: {type: 'number', min: 0, value: 1}, // stroke width in meters\n  widthMinPixels: {type: 'number', min: 0, value: 0}, //  min stroke width in pixels\n  widthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max stroke width in pixels\n  jointRounded: false,\n  capRounded: false,\n  miterLimit: {type: 'number', min: 0, value: 4},\n  billboard: false,\n  // `loop` or `open`\n  _pathType: null,\n\n  getPath: {type: 'accessor', value: object => object.path},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n\n  // deprecated props\n  rounded: {deprecatedFor: ['jointRounded', 'capRounded']}\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class PathLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]}); // 'project' module added by default.\n  }\n\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const noAlloc = true;\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      positions: {\n        size: 3,\n        // Start filling buffer from 1 vertex in\n        vertexOffset: 1,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPath',\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          instanceLeftPositions: {\n            vertexOffset: 0\n          },\n          instanceStartPositions: {\n            vertexOffset: 1\n          },\n          instanceEndPositions: {\n            vertexOffset: 2\n          },\n          instanceRightPositions: {\n            vertexOffset: 3\n          }\n        }\n      },\n      instanceTypes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculateSegmentTypes,\n        noAlloc\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getWidth',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: 1\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        accessor: 'getColor',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: DEFAULT_COLOR\n      },\n      instancePickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value)\n      }\n    });\n    /* eslint-enable max-len */\n\n    this.setState({\n      pathTesselator: new PathTesselator({\n        fp64: this.use64bitPositions()\n      })\n    });\n\n    if (this.props.getDashArray && !this.props.extensions.length) {\n      log.removed('getDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const attributeManager = this.getAttributeManager();\n\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath));\n\n    if (geometryChanged) {\n      const {pathTesselator} = this.state;\n      const buffers = props.data.attributes || {};\n\n      pathTesselator.updateGeometry({\n        data: props.data,\n        geometryBuffer: buffers.getPath,\n        buffers,\n        normalize: !props._pathType,\n        loop: props._pathType === 'loop',\n        getGeometry: props.getPath,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        dataChanged: changeFlags.dataChanged\n      });\n      this.setState({\n        numInstances: pathTesselator.instanceCount,\n        startIndices: pathTesselator.vertexStarts\n      });\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        attributeManager.invalidateAll();\n      }\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager.invalidateAll();\n    }\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      info.object = data.find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  disablePickingIndex(objectIndex) {\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      this._disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      jointRounded,\n      capRounded,\n      billboard,\n      miterLimit,\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels\n    } = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        jointType: Number(jointRounded),\n        capType: Number(capRounded),\n        billboard,\n        widthUnits: UNIT[widthUnits],\n        widthScale,\n        miterLimit,\n        widthMinPixels,\n        widthMaxPixels\n      })\n      .draw();\n  }\n\n  _getModel(gl) {\n    /*\n     *       _\n     *        \"-_ 1                   3                       5\n     *     _     \"o---------------------o-------------------_-o\n     *       -   / \"\"--..__              '.             _.-' /\n     *   _     \"@- - - - - \"\"--..__- - - - x - - - -_.@'    /\n     *    \"-_  /                   \"\"--..__ '.  _,-` :     /\n     *       \"o----------------------------\"\"-o'    :     /\n     *      0,2                            4 / '.  :     /\n     *                                      /   '.:     /\n     *                                     /     :'.   /\n     *                                    /     :  ', /\n     *                                   /     :     o\n     */\n\n    // prettier-ignore\n    const SEGMENT_INDICES = [\n      // start corner\n      0, 1, 2,\n      // body\n      1, 4, 2,\n      1, 3, 4,\n      // end corner\n      3, 5, 4\n    ];\n\n    // [0] position on segment - 0: start, 1: end\n    // [1] side of path - -1: left, 0: center (joint), 1: right\n    // prettier-ignore\n    const SEGMENT_POSITIONS = [\n      // bevel start corner\n      0, 0,\n      // start inner corner\n      0, -1,\n      // start outer corner\n      0, 1,\n      // end inner corner\n      1, -1,\n      // end outer corner\n      1, 1,\n      // bevel end corner\n      1, 0\n    ];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLES,\n        attributes: {\n          indices: new Uint16Array(SEGMENT_INDICES),\n          positions: {value: new Float32Array(SEGMENT_POSITIONS), size: 2}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  calculatePositions(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('positions');\n  }\n\n  calculateSegmentTypes(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('segmentTypes');\n  }\n}\n\nPathLayer.layerName = 'PathLayer';\nPathLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}