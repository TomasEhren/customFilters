{"ast":null,"code":"import { isBrowser } from '@loaders.gl/loader-utils';\nvar _parseImageNode = globalThis._parseImageNode;\nvar IMAGE_SUPPORTED = typeof Image !== 'undefined';\nvar IMAGE_BITMAP_SUPPORTED = typeof ImageBitmap !== 'undefined';\nvar NODE_IMAGE_SUPPORTED = Boolean(_parseImageNode);\nvar DATA_SUPPORTED = isBrowser ? true : NODE_IMAGE_SUPPORTED;\nexport function isImageTypeSupported(type) {\n  switch (type) {\n    case 'auto':\n      return IMAGE_BITMAP_SUPPORTED || IMAGE_SUPPORTED || DATA_SUPPORTED;\n\n    case 'imagebitmap':\n      return IMAGE_BITMAP_SUPPORTED;\n\n    case 'image':\n      return IMAGE_SUPPORTED;\n\n    case 'data':\n      return DATA_SUPPORTED;\n\n    default:\n      throw new Error(\"@loaders.gl/images: image \".concat(type, \" not supported in this environment\"));\n  }\n}\nexport function getDefaultImageType() {\n  if (IMAGE_BITMAP_SUPPORTED) {\n    return 'imagebitmap';\n  }\n\n  if (IMAGE_SUPPORTED) {\n    return 'image';\n  }\n\n  if (DATA_SUPPORTED) {\n    return 'data';\n  }\n\n  throw new Error('Install \\'@loaders.gl/polyfills\\' to parse images under Node.js');\n}","map":{"version":3,"mappings":"AAAA,SAAQA,SAAR,QAAwB,0BAAxB;AAIA,IAAOC,eAAP,GAA0BC,UAA1B,CAAOD,eAAP;AAEA,IAAME,eAAe,GAAG,OAAOC,KAAP,KAAiB,WAAzC;AACA,IAAMC,sBAAsB,GAAG,OAAOC,WAAP,KAAuB,WAAtD;AACA,IAAMC,oBAAoB,GAAGC,OAAO,CAACP,eAAD,CAApC;AACA,IAAMQ,cAAc,GAAGT,SAAS,GAAG,IAAH,GAAUO,oBAA1C;AAMA,OAAO,SAASG,oBAAT,CAA8BC,IAA9B,EAAqD;EAC1D,QAAQA,IAAR;IACE,KAAK,MAAL;MAEE,OAAON,sBAAsB,IAAIF,eAA1BE,IAA6CI,cAApD;;IAEF,KAAK,aAAL;MACE,OAAOJ,sBAAP;;IACF,KAAK,OAAL;MACE,OAAOF,eAAP;;IACF,KAAK,MAAL;MACE,OAAOM,cAAP;;IAEF;MACE,MAAM,IAAIG,KAAJ,qCAAuCD,IAAvC,wCAAN;EAbJ;AAeD;AAMD,OAAO,SAASE,mBAAT,GAA8C;EACnD,IAAIR,sBAAJ,EAA4B;IAC1B,OAAO,aAAP;EACD;;EACD,IAAIF,eAAJ,EAAqB;IACnB,OAAO,OAAP;EACD;;EACD,IAAIM,cAAJ,EAAoB;IAClB,OAAO,MAAP;EACD;;EAGD,MAAM,IAAIG,KAAJ,CAAU,iEAAV,CAAN;AACD","names":["isBrowser","_parseImageNode","globalThis","IMAGE_SUPPORTED","Image","IMAGE_BITMAP_SUPPORTED","ImageBitmap","NODE_IMAGE_SUPPORTED","Boolean","DATA_SUPPORTED","isImageTypeSupported","type","Error","getDefaultImageType"],"sources":["../../../../src/lib/category-api/image-type.ts"],"sourcesContent":["import {isBrowser} from '@loaders.gl/loader-utils';\nimport type {ImageTypeEnum} from '../../types';\n\n// @ts-ignore TS2339: Property does not exist on type\nconst {_parseImageNode} = globalThis;\n\nconst IMAGE_SUPPORTED = typeof Image !== 'undefined'; // NOTE: \"false\" positives if jsdom is installed\nconst IMAGE_BITMAP_SUPPORTED = typeof ImageBitmap !== 'undefined';\nconst NODE_IMAGE_SUPPORTED = Boolean(_parseImageNode);\nconst DATA_SUPPORTED = isBrowser ? true : NODE_IMAGE_SUPPORTED;\n\n/**\n * Checks if a loaders.gl image type is supported\n * @param type image type string\n */\nexport function isImageTypeSupported(type: string): boolean {\n  switch (type) {\n    case 'auto':\n      // Should only ever be false in Node.js, if polyfills have not been installed...\n      return IMAGE_BITMAP_SUPPORTED || IMAGE_SUPPORTED || DATA_SUPPORTED;\n\n    case 'imagebitmap':\n      return IMAGE_BITMAP_SUPPORTED;\n    case 'image':\n      return IMAGE_SUPPORTED;\n    case 'data':\n      return DATA_SUPPORTED;\n\n    default:\n      throw new Error(`@loaders.gl/images: image ${type} not supported in this environment`);\n  }\n}\n\n/**\n * Returns the \"most performant\" supported image type on this platform\n * @returns image type string\n */\nexport function getDefaultImageType(): ImageTypeEnum {\n  if (IMAGE_BITMAP_SUPPORTED) {\n    return 'imagebitmap';\n  }\n  if (IMAGE_SUPPORTED) {\n    return 'image';\n  }\n  if (DATA_SUPPORTED) {\n    return 'data';\n  }\n\n  // This should only happen in Node.js\n  throw new Error('Install \\'@loaders.gl/polyfills\\' to parse images under Node.js');\n}\n"]},"metadata":{},"sourceType":"module"}