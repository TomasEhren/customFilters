{"ast":null,"code":"import { fetchFile } from '@loaders.gl/core';\nconst SUBTREE_FILE_MAGIC = 0x74627573;\nconst SUBTREE_FILE_VERSION = 1;\nexport default async function parse3DTilesSubtree(data) {\n  const magic = new Uint32Array(data.slice(0, 4));\n\n  if (magic[0] !== SUBTREE_FILE_MAGIC) {\n    throw new Error('Wrong subtree file magic number');\n  }\n\n  const version = new Uint32Array(data.slice(4, 8));\n\n  if (version[0] !== SUBTREE_FILE_VERSION) {\n    throw new Error('Wrong subtree file verson, must be 1');\n  }\n\n  const jsonByteLength = parseUint64Value(data.slice(8, 16));\n  const stringAttribute = new Uint8Array(data, 24, jsonByteLength);\n  const textDecoder = new TextDecoder('utf8');\n  const string = textDecoder.decode(stringAttribute);\n  const subtree = JSON.parse(string);\n  const binaryByteLength = parseUint64Value(data.slice(16, 24));\n  let internalBinaryBuffer = new ArrayBuffer(0);\n\n  if (binaryByteLength) {\n    internalBinaryBuffer = data.slice(24 + jsonByteLength);\n  }\n\n  if ('bufferView' in subtree.tileAvailability) {\n    subtree.tileAvailability.explicitBitstream = await getExplicitBitstream(subtree, 'tileAvailability', internalBinaryBuffer);\n  }\n\n  if ('bufferView' in subtree.contentAvailability) {\n    subtree.contentAvailability.explicitBitstream = await getExplicitBitstream(subtree, 'contentAvailability', internalBinaryBuffer);\n  }\n\n  if ('bufferView' in subtree.childSubtreeAvailability) {\n    subtree.childSubtreeAvailability.explicitBitstream = await getExplicitBitstream(subtree, 'childSubtreeAvailability', internalBinaryBuffer);\n  }\n\n  return subtree;\n}\n\nasync function getExplicitBitstream(subtree, name, internalBinaryBuffer) {\n  const bufferViewIndex = subtree[name].bufferView;\n  const bufferView = subtree.bufferViews[bufferViewIndex];\n  const buffer = subtree.buffers[bufferView.buffer];\n\n  if (buffer.uri) {\n    const response = await fetchFile(buffer.uri);\n    const data = await response.arrayBuffer();\n    return new Uint8Array(data, bufferView.byteOffset, bufferView.byteLength);\n  }\n\n  return new Uint8Array(internalBinaryBuffer, bufferView.byteOffset, bufferView.byteLength);\n}\n\nfunction parseUint64Value(buffer) {\n  const dataView = new DataView(buffer);\n  const left = dataView.getUint32(0, true);\n  const right = dataView.getUint32(4, true);\n  return left + 2 ** 32 * right;\n}","map":{"version":3,"mappings":"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","names":["fetchFile","SUBTREE_FILE_MAGIC","SUBTREE_FILE_VERSION","parse3DTilesSubtree","data","magic","Uint32Array","slice","Error","version","jsonByteLength","parseUint64Value","stringAttribute","Uint8Array","textDecoder","TextDecoder","string","decode","subtree","JSON","parse","binaryByteLength","internalBinaryBuffer","ArrayBuffer","tileAvailability","explicitBitstream","getExplicitBitstream","contentAvailability","childSubtreeAvailability","name","bufferViewIndex","bufferView","bufferViews","buffer","buffers","uri","response","arrayBuffer","byteOffset","byteLength","dataView","DataView","left","getUint32","right"],"sources":["../../../../../src/lib/parsers/helpers/parse-3d-tile-subtree.ts"],"sourcesContent":["import type {Subtree, ExplicitBitstream} from '../../../types';\nimport {fetchFile} from '@loaders.gl/core';\n\nconst SUBTREE_FILE_MAGIC = 0x74627573;\nconst SUBTREE_FILE_VERSION = 1;\n\n/**\n * Parse subtree file\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_implicit_tiling#subtree-file-format\n * @param data\n * @returns\n */\n// eslint-disable-next-line max-statements\nexport default async function parse3DTilesSubtree(data: ArrayBuffer): Promise<Subtree> {\n  const magic = new Uint32Array(data.slice(0, 4));\n\n  if (magic[0] !== SUBTREE_FILE_MAGIC) {\n    throw new Error('Wrong subtree file magic number');\n  }\n\n  const version = new Uint32Array(data.slice(4, 8));\n\n  if (version[0] !== SUBTREE_FILE_VERSION) {\n    throw new Error('Wrong subtree file verson, must be 1');\n  }\n\n  const jsonByteLength = parseUint64Value(data.slice(8, 16));\n  const stringAttribute = new Uint8Array(data, 24, jsonByteLength);\n\n  const textDecoder = new TextDecoder('utf8');\n  const string = textDecoder.decode(stringAttribute);\n  const subtree = JSON.parse(string);\n\n  const binaryByteLength = parseUint64Value(data.slice(16, 24));\n  let internalBinaryBuffer = new ArrayBuffer(0);\n\n  if (binaryByteLength) {\n    internalBinaryBuffer = data.slice(24 + jsonByteLength);\n  }\n\n  if ('bufferView' in subtree.tileAvailability) {\n    subtree.tileAvailability.explicitBitstream = await getExplicitBitstream(\n      subtree,\n      'tileAvailability',\n      internalBinaryBuffer\n    );\n  }\n\n  if ('bufferView' in subtree.contentAvailability) {\n    subtree.contentAvailability.explicitBitstream = await getExplicitBitstream(\n      subtree,\n      'contentAvailability',\n      internalBinaryBuffer\n    );\n  }\n\n  if ('bufferView' in subtree.childSubtreeAvailability) {\n    subtree.childSubtreeAvailability.explicitBitstream = await getExplicitBitstream(\n      subtree,\n      'childSubtreeAvailability',\n      internalBinaryBuffer\n    );\n  }\n\n  return subtree;\n}\n\n/**\n * Get explicit bitstream for subtree availability data.\n * @param subtree\n * @param name\n * @param internalBinaryBuffer\n */\nasync function getExplicitBitstream(\n  subtree: Subtree,\n  name: string,\n  internalBinaryBuffer: ArrayBuffer\n): Promise<ExplicitBitstream> {\n  const bufferViewIndex = subtree[name].bufferView;\n  const bufferView = subtree.bufferViews[bufferViewIndex];\n  const buffer = subtree.buffers[bufferView.buffer];\n\n  // External bitstream loading\n  if (buffer.uri) {\n    const response = await fetchFile(buffer.uri);\n    const data = await response.arrayBuffer();\n    // Return view of bitstream.\n    return new Uint8Array(data, bufferView.byteOffset, bufferView.byteLength);\n  }\n  // Return view of bitstream.\n  return new Uint8Array(internalBinaryBuffer, bufferView.byteOffset, bufferView.byteLength);\n}\n\n/**\n * Parse buffer to return uint64 value\n * @param buffer\n * @returns 64-bit value until precision is lost after Number.MAX_SAFE_INTEGER\n */\nfunction parseUint64Value(buffer: ArrayBuffer): number {\n  const dataView = new DataView(buffer);\n  const left = dataView.getUint32(0, true);\n  const right = dataView.getUint32(4, true);\n  // combine the two 32-bit values\n  return left + 2 ** 32 * right;\n}\n"]},"metadata":{},"sourceType":"module"}