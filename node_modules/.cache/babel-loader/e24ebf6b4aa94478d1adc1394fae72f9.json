{"ast":null,"code":"import { Layer, project32, phongLighting, picking, log } from '@deck.gl/core';\nimport { Model, Geometry, Texture2D, isWebGL2 } from '@luma.gl/core';\nimport { hasFeature, FEATURES } from '@luma.gl/webgl';\nimport { MATRIX_ATTRIBUTES, shouldComposeModelMatrix } from '../utils/matrix';\nimport vs from './simple-mesh-layer-vertex.glsl';\nimport fs from './simple-mesh-layer-fragment.glsl';\n\nfunction validateGeometryAttributes(attributes, useMeshColors) {\n  const hasColorAttribute = attributes.COLOR_0 || attributes.colors;\n  const useColorAttribute = hasColorAttribute && useMeshColors;\n\n  if (!useColorAttribute) {\n    attributes.colors = {\n      constant: true,\n      value: new Float32Array([1, 1, 1])\n    };\n  }\n\n  log.assert(attributes.positions || attributes.POSITION, 'no \"postions\" or \"POSITION\" attribute in mesh');\n}\n\nfunction getGeometry(data, useMeshColors) {\n  if (data.attributes) {\n    validateGeometryAttributes(data.attributes, useMeshColors);\n\n    if (data instanceof Geometry) {\n      return data;\n    } else {\n      return new Geometry(data);\n    }\n  } else if (data.positions || data.POSITION) {\n    validateGeometryAttributes(data, useMeshColors);\n    return new Geometry({\n      attributes: data\n    });\n  }\n\n  throw Error('Invalid mesh');\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  mesh: {\n    value: null,\n    type: 'object',\n    async: true\n  },\n  texture: {\n    type: 'image',\n    value: null,\n    async: true\n  },\n  sizeScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  _useMeshColors: {\n    type: 'boolean',\n    value: false\n  },\n  _instanced: true,\n  wireframe: false,\n  material: true,\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getOrientation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getScale: {\n    type: 'accessor',\n    value: [1, 1, 1]\n  },\n  getTranslation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getTransformMatrix: {\n    type: 'accessor',\n    value: []\n  }\n};\nexport default class SimpleMeshLayer extends Layer {\n  getShaders() {\n    const transpileToGLSL100 = !isWebGL2(this.context.gl);\n    const defines = {};\n\n    if (hasFeature(this.context.gl, FEATURES.GLSL_DERIVATIVES)) {\n      defines.DERIVATIVES_AVAILABLE = 1;\n    }\n\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, phongLighting, picking],\n      transpileToGLSL100,\n      defines\n    });\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        transition: true,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        size: 3,\n        accessor: 'getPosition'\n      },\n      instanceColors: {\n        type: 5121,\n        transition: true,\n        size: this.props.colorFormat.length,\n        normalized: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n    this.setState({\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState(_ref) {\n    let {\n      props,\n      oldProps,\n      changeFlags\n    } = _ref;\n    super.updateState({\n      props,\n      oldProps,\n      changeFlags\n    });\n\n    if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n\n      if (props.mesh) {\n        this.state.model = this.getModel(props.mesh);\n        const attributes = props.mesh.attributes || props.mesh;\n        this.setState({\n          hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n        });\n      }\n\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props.texture !== oldProps.texture) {\n      this.setTexture(props.texture);\n    }\n\n    if (this.state.model) {\n      this.state.model.setDrawMode(this.props.wireframe ? 3 : 4);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    this.state.emptyTexture.delete();\n  }\n\n  draw(_ref2) {\n    let {\n      uniforms\n    } = _ref2;\n\n    if (!this.state.model) {\n      return;\n    }\n\n    const {\n      viewport\n    } = this.context;\n    const {\n      sizeScale,\n      coordinateSystem,\n      _instanced\n    } = this.props;\n    this.state.model.setUniforms(uniforms).setUniforms({\n      sizeScale,\n      composeModelMatrix: !_instanced || shouldComposeModelMatrix(viewport, coordinateSystem),\n      flatShading: !this.state.hasNormals\n    }).draw();\n  }\n\n  getModel(mesh) {\n    const model = new Model(this.context.gl, { ...this.getShaders(),\n      id: this.props.id,\n      geometry: getGeometry(mesh, this.props._useMeshColors),\n      isInstanced: true\n    });\n    const {\n      texture\n    } = this.props;\n    const {\n      emptyTexture\n    } = this.state;\n    model.setUniforms({\n      sampler: texture || emptyTexture,\n      hasTexture: Boolean(texture)\n    });\n    return model;\n  }\n\n  setTexture(texture) {\n    const {\n      emptyTexture,\n      model\n    } = this.state;\n\n    if (model) {\n      model.setUniforms({\n        sampler: texture || emptyTexture,\n        hasTexture: Boolean(texture)\n      });\n    }\n  }\n\n}\nSimpleMeshLayer.layerName = 'SimpleMeshLayer';\nSimpleMeshLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["Layer","project32","phongLighting","picking","log","Model","Geometry","Texture2D","isWebGL2","hasFeature","FEATURES","MATRIX_ATTRIBUTES","shouldComposeModelMatrix","vs","fs","validateGeometryAttributes","attributes","useMeshColors","hasColorAttribute","COLOR_0","colors","useColorAttribute","constant","value","Float32Array","assert","positions","POSITION","getGeometry","data","Error","DEFAULT_COLOR","defaultProps","mesh","type","async","texture","sizeScale","min","_useMeshColors","_instanced","wireframe","material","getPosition","x","position","getColor","getOrientation","getScale","getTranslation","getTransformMatrix","SimpleMeshLayer","getShaders","transpileToGLSL100","context","gl","defines","GLSL_DERIVATIVES","DERIVATIVES_AVAILABLE","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","transition","fp64","use64bitPositions","size","accessor","instanceColors","props","colorFormat","length","normalized","defaultValue","instanceModelMatrix","setState","emptyTexture","Uint8Array","width","height","updateState","oldProps","changeFlags","extensionsChanged","state","model","delete","getModel","hasNormals","Boolean","NORMAL","normals","invalidateAll","setTexture","setDrawMode","finalizeState","draw","uniforms","viewport","coordinateSystem","setUniforms","composeModelMatrix","flatShading","id","geometry","isInstanced","sampler","hasTexture","layerName"],"sources":["../../../src/simple-mesh-layer/simple-mesh-layer.ts"],"sourcesContent":["// Note: This file will either be moved back to deck.gl or reformatted to web-monorepo standards\n// Disabling lint temporarily to facilitate copying code in and out of this repo\n/* eslint-disable */\n\n// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, phongLighting, picking, COORDINATE_SYSTEM, log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Texture2D, isWebGL2} from '@luma.gl/core';\nimport {hasFeature, FEATURES} from '@luma.gl/webgl';\n\nimport {MATRIX_ATTRIBUTES, shouldComposeModelMatrix} from '../utils/matrix';\n\nimport vs from './simple-mesh-layer-vertex.glsl';\nimport fs from './simple-mesh-layer-fragment.glsl';\n\nfunction validateGeometryAttributes(attributes, useMeshColors) {\n  const hasColorAttribute = attributes.COLOR_0 || attributes.colors;\n  const useColorAttribute = hasColorAttribute && useMeshColors;\n  if (!useColorAttribute) {\n    attributes.colors = {constant: true, value: new Float32Array([1, 1, 1])};\n  }\n  log.assert(\n    attributes.positions || attributes.POSITION,\n    'no \"postions\" or \"POSITION\" attribute in mesh'\n  );\n}\n\n/*\n * Convert mesh data into geometry\n * @returns {Geometry} geometry\n */\nfunction getGeometry(data, useMeshColors) {\n  if (data.attributes) {\n    validateGeometryAttributes(data.attributes, useMeshColors);\n    if (data instanceof Geometry) {\n      return data;\n    } else {\n      return new Geometry(data);\n    }\n  } else if (data.positions || data.POSITION) {\n    validateGeometryAttributes(data, useMeshColors);\n    return new Geometry({\n      attributes: data\n    });\n  }\n  throw Error('Invalid mesh');\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  mesh: {value: null, type: 'object', async: true},\n  texture: {type: 'image', value: null, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  // Whether the color attribute in a mesh will be used\n  // This prop will be removed and set to true in next major release\n  _useMeshColors: {type: 'boolean', value: false},\n\n  // _instanced is a hack to use world position instead of meter offsets in mesh\n  // TODO - formalize API\n  _instanced: true,\n  // NOTE(Tarek): Quick and dirty wireframe. Just draws\n  // the same mesh with LINE_STRIPS. Won't follow edges\n  // of the original mesh.\n  wireframe: false,\n  // Optional material for 'lighting' shader module\n  material: true,\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {type: 'accessor', value: [0, 0, 0]},\n  getScale: {type: 'accessor', value: [1, 1, 1]},\n  getTranslation: {type: 'accessor', value: [0, 0, 0]},\n  // 4x4 matrix\n  getTransformMatrix: {type: 'accessor', value: []}\n};\n\nexport default class SimpleMeshLayer extends Layer {\n  getShaders() {\n    const transpileToGLSL100 = !isWebGL2(this.context.gl);\n\n    const defines = {};\n\n    if (hasFeature(this.context.gl, FEATURES.GLSL_DERIVATIVES)) {\n      defines.DERIVATIVES_AVAILABLE = 1;\n    }\n\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, phongLighting, picking],\n      transpileToGLSL100,\n      defines\n    });\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    attributeManager.addInstanced({\n      instancePositions: {\n        transition: true,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        size: 3,\n        accessor: 'getPosition'\n      },\n      instanceColors: {\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        size: this.props.colorFormat.length,\n        normalized: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n\n    this.setState({\n      // Avoid luma.gl's missing uniform warning\n      // TODO - add feature to luma.gl to specify ignored uniforms?\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      if (props.mesh) {\n        this.state.model = this.getModel(props.mesh);\n\n        const attributes = props.mesh.attributes || props.mesh;\n        this.setState({\n          hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n        });\n      }\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props.texture !== oldProps.texture) {\n      this.setTexture(props.texture);\n    }\n\n    if (this.state.model) {\n      this.state.model.setDrawMode(this.props.wireframe ? GL.LINE_STRIP : GL.TRIANGLES);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    this.state.emptyTexture.delete();\n  }\n\n  draw({uniforms}) {\n    if (!this.state.model) {\n      return;\n    }\n\n    const {viewport} = this.context;\n    const {sizeScale, coordinateSystem, _instanced} = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        sizeScale,\n        composeModelMatrix: !_instanced || shouldComposeModelMatrix(viewport, coordinateSystem),\n        flatShading: !this.state.hasNormals\n      })\n      .draw();\n  }\n\n  getModel(mesh) {\n    const model = new Model(this.context.gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: getGeometry(mesh, this.props._useMeshColors),\n      isInstanced: true\n    });\n\n    const {texture} = this.props;\n    const {emptyTexture} = this.state;\n    model.setUniforms({\n      sampler: texture || emptyTexture,\n      hasTexture: Boolean(texture)\n    });\n\n    return model;\n  }\n\n  setTexture(texture) {\n    const {emptyTexture, model} = this.state;\n\n    // props.mesh may not be ready at this time.\n    // The sampler will be set when `getModel` is called\n    if (model) {\n      model.setUniforms({\n        sampler: texture || emptyTexture,\n        hasTexture: Boolean(texture)\n      });\n    }\n  }\n}\n\nSimpleMeshLayer.layerName = 'SimpleMeshLayer';\nSimpleMeshLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}