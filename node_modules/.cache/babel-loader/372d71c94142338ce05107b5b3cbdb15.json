{"ast":null,"code":"import { ImageLoader } from '@loaders.gl/images';\nimport { getImageUrls } from './load-image';\nimport { deepLoad } from './deep-load';\nexport async function loadImageTextureArray(count, getUrl) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const imageUrls = await getImageArrayUrls(count, getUrl, options);\n  return await deepLoad(imageUrls, ImageLoader.parse, options);\n}\nexport async function getImageArrayUrls(count, getUrl) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const promises = [];\n\n  for (let index = 0; index < count; index++) {\n    const promise = getImageUrls(getUrl, options, {\n      index\n    });\n    promises.push(promise);\n  }\n\n  return await Promise.all(promises);\n}","map":{"version":3,"mappings":"AACA,SAAQA,WAAR,QAA0B,oBAA1B;AAEA,SAAQC,YAAR,QAA2B,cAA3B;AACA,SAAQC,QAAR,QAAuB,aAAvB;AAEA,OAAO,eAAeC,qBAAf,CACLC,KADK,EAELC,MAFK,EAIS;EAAA,IADdC,OACc,uEADJ,EACI;EACd,MAAMC,SAAS,GAAG,MAAMC,iBAAiB,CAACJ,KAAD,EAAQC,MAAR,EAAgBC,OAAhB,CAAzC;EACA,OAAO,MAAMJ,QAAQ,CAACK,SAAD,EAAYP,WAAW,CAACS,KAAxB,EAA+BH,OAA/B,CAArB;AACD;AAED,OAAO,eAAeE,iBAAf,CAAiCJ,KAAjC,EAAgDC,MAAhD,EAA4F;EAAA,IAA5BC,OAA4B,uEAAlB,EAAkB;EACjG,MAAMI,QAAwB,GAAG,EAAjC;;EACA,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGP,KAA5B,EAAmCO,KAAK,EAAxC,EAA4C;IAC1C,MAAMC,OAAO,GAAGX,YAAY,CAACI,MAAD,EAASC,OAAT,EAAkB;MAACK;IAAD,CAAlB,CAA5B;IACAD,QAAQ,CAACG,IAATH,CAAcE,OAAdF;EACD;;EACD,OAAO,MAAMI,OAAO,CAACC,GAARD,CAAYJ,QAAZI,CAAb;AACD","names":["ImageLoader","getImageUrls","deepLoad","loadImageTextureArray","count","getUrl","options","imageUrls","getImageArrayUrls","parse","promises","index","promise","push","Promise","all"],"sources":["../../../../src/lib/texture-api/load-image-array.ts"],"sourcesContent":["// loaders.gl, MIT license\nimport {ImageLoader} from '@loaders.gl/images';\nimport type {GetUrl} from './texture-api-types';\nimport {getImageUrls} from './load-image';\nimport {deepLoad} from './deep-load';\n\nexport async function loadImageTextureArray(\n  count: number,\n  getUrl: GetUrl,\n  options = {}\n): Promise<any> {\n  const imageUrls = await getImageArrayUrls(count, getUrl, options);\n  return await deepLoad(imageUrls, ImageLoader.parse, options);\n}\n\nexport async function getImageArrayUrls(count: number, getUrl: GetUrl, options = {}): Promise<any> {\n  const promises: Promise<any>[] = [];\n  for (let index = 0; index < count; index++) {\n    const promise = getImageUrls(getUrl, options, {index});\n    promises.push(promise);\n  }\n  return await Promise.all(promises);\n}\n"]},"metadata":{},"sourceType":"module"}