{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nvar _GL_TYPE_TO_ARRAY_TYP;\n\nimport { GL_TYPE as GL } from '../constants';\nvar GL_TYPE_TO_ARRAY_TYPE = (_GL_TYPE_TO_ARRAY_TYP = {}, _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.DOUBLE, Float64Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.FLOAT, Float32Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.UNSIGNED_SHORT, Uint16Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.UNSIGNED_INT, Uint32Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.UNSIGNED_BYTE, Uint8Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.BYTE, Int8Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.SHORT, Int16Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.INT, Int32Array), _GL_TYPE_TO_ARRAY_TYP);\nvar NAME_TO_GL_TYPE = {\n  DOUBLE: GL.DOUBLE,\n  FLOAT: GL.FLOAT,\n  UNSIGNED_SHORT: GL.UNSIGNED_SHORT,\n  UNSIGNED_INT: GL.UNSIGNED_INT,\n  UNSIGNED_BYTE: GL.UNSIGNED_BYTE,\n  BYTE: GL.BYTE,\n  SHORT: GL.SHORT,\n  INT: GL.INT\n};\nvar ERR_TYPE_CONVERSION = 'Failed to convert GL type';\n\nvar GLType = /*#__PURE__*/function () {\n  function GLType() {\n    _classCallCheck(this, GLType);\n  }\n\n  _createClass(GLType, null, [{\n    key: \"fromTypedArray\",\n    value: function fromTypedArray(arrayOrType) {\n      arrayOrType = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n\n      for (var glType in GL_TYPE_TO_ARRAY_TYPE) {\n        var ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n\n        if (ArrayType === arrayOrType) {\n          return glType;\n        }\n      }\n\n      throw new Error(ERR_TYPE_CONVERSION);\n    }\n  }, {\n    key: \"fromName\",\n    value: function fromName(name) {\n      var glType = NAME_TO_GL_TYPE[name];\n\n      if (!glType) {\n        throw new Error(ERR_TYPE_CONVERSION);\n      }\n\n      return glType;\n    }\n  }, {\n    key: \"getArrayType\",\n    value: function getArrayType(glType) {\n      switch (glType) {\n        case GL.UNSIGNED_SHORT_5_6_5:\n        case GL.UNSIGNED_SHORT_4_4_4_4:\n        case GL.UNSIGNED_SHORT_5_5_5_1:\n          return Uint16Array;\n\n        default:\n          var ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n\n          if (!ArrayType) {\n            throw new Error(ERR_TYPE_CONVERSION);\n          }\n\n          return ArrayType;\n      }\n    }\n  }, {\n    key: \"getByteSize\",\n    value: function getByteSize(glType) {\n      var ArrayType = GLType.getArrayType(glType);\n      return ArrayType.BYTES_PER_ELEMENT;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(glType) {\n      return Boolean(GLType.getArrayType(glType));\n    }\n  }, {\n    key: \"createTypedArray\",\n    value: function createTypedArray(glType, buffer) {\n      var byteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var length = arguments.length > 3 ? arguments[3] : undefined;\n\n      if (length === undefined) {\n        length = (buffer.byteLength - byteOffset) / GLType.getByteSize(glType);\n      }\n\n      var ArrayType = GLType.getArrayType(glType);\n      return new ArrayType(buffer, byteOffset, length);\n    }\n  }]);\n\n  return GLType;\n}();\n\nexport { GLType as default };","map":{"version":3,"mappings":"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","names":["GL_TYPE","GL","GL_TYPE_TO_ARRAY_TYPE","DOUBLE","Float64Array","FLOAT","Float32Array","UNSIGNED_SHORT","Uint16Array","UNSIGNED_INT","Uint32Array","UNSIGNED_BYTE","Uint8Array","BYTE","Int8Array","SHORT","Int16Array","INT","Int32Array","NAME_TO_GL_TYPE","ERR_TYPE_CONVERSION","GLType","arrayOrType","ArrayBuffer","isView","constructor","glType","ArrayType","Error","name","UNSIGNED_SHORT_5_6_5","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","getArrayType","BYTES_PER_ELEMENT","Boolean","buffer","byteOffset","length","undefined","byteLength","getByteSize"],"sources":["../../../../src/geometry/gl/gl-type.ts"],"sourcesContent":["import {TypedArray} from '../types';\nimport {GL_TYPE as GL} from '../constants';\n\nconst GL_TYPE_TO_ARRAY_TYPE = {\n  [GL.DOUBLE]: Float64Array,\n  [GL.FLOAT]: Float32Array,\n  [GL.UNSIGNED_SHORT]: Uint16Array,\n  [GL.UNSIGNED_INT]: Uint32Array,\n  [GL.UNSIGNED_BYTE]: Uint8Array,\n  [GL.BYTE]: Int8Array,\n  [GL.SHORT]: Int16Array,\n  [GL.INT]: Int32Array\n};\ntype GlTypeMap = {\n  [index: string]: number;\n};\nconst NAME_TO_GL_TYPE: GlTypeMap = {\n  DOUBLE: GL.DOUBLE,\n  FLOAT: GL.FLOAT,\n  UNSIGNED_SHORT: GL.UNSIGNED_SHORT,\n  UNSIGNED_INT: GL.UNSIGNED_INT,\n  UNSIGNED_BYTE: GL.UNSIGNED_BYTE,\n  BYTE: GL.BYTE,\n  SHORT: GL.SHORT,\n  INT: GL.INT\n};\nconst ERR_TYPE_CONVERSION = 'Failed to convert GL type';\n// Converts TYPED ARRAYS to corresponding GL constant\n// Used to auto deduce gl parameter types\nexport default class GLType {\n  // Signature: fromTypedArray(new Uint8Array())\n  // Signature: fromTypedArray(Uint8Array)\n  /**\n   * Returns the size, in bytes, of the corresponding datatype\n   * @param arrayOrType\n   * @returns glType a a string\n   */\n  static fromTypedArray(arrayOrType: TypedArray | Function): string {\n    // If typed array, look up constructor\n    arrayOrType = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n    for (const glType in GL_TYPE_TO_ARRAY_TYPE) {\n      const ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n      if (ArrayType === arrayOrType) {\n        return glType;\n      }\n    }\n    throw new Error(ERR_TYPE_CONVERSION);\n  }\n  /**\n   * Extracts name for glType from array NAME_TO_GL_TYPE\n   * @param name\n   * @returns glType as a number\n   */\n  static fromName(name: string): number {\n    const glType = NAME_TO_GL_TYPE[name];\n    if (!glType) {\n      throw new Error(ERR_TYPE_CONVERSION);\n    }\n    return glType;\n  }\n  // Converts GL constant to corresponding typed array type\n  // eslint-disable-next-line complexity\n  static getArrayType(glType: number) {\n    switch (glType) {\n      /*eslint-disable*/\n      // @ts-ignore\n      case GL.UNSIGNED_SHORT_5_6_5:\n      // @ts-ignore\n      case GL.UNSIGNED_SHORT_4_4_4_4:\n      // @ts-ignore\n      case GL.UNSIGNED_SHORT_5_5_5_1:\n        /* eslint-enable*/\n        return Uint16Array;\n      default:\n        const ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n        if (!ArrayType) {\n          throw new Error(ERR_TYPE_CONVERSION);\n        }\n        return ArrayType;\n    }\n  }\n  /**\n   * Returns the size in bytes of one element of the provided WebGL type\n   * @param glType\n   * @returns size of glType\n   */\n  static getByteSize(glType: number): number {\n    const ArrayType = GLType.getArrayType(glType);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n  /**\n   * Returns `true` if `glType` is a valid WebGL data type.\n   * @param glType\n   * @returns boolean\n   */\n  static validate(glType: number): boolean {\n    return Boolean(GLType.getArrayType(glType));\n  }\n  /**\n   * Creates a typed view of an array of bytes\n   * @param glType The type of typed array (ArrayBuffer view) to create\n   * @param buffer The buffer storage to use for the view.\n   * @param byteOffset The offset, in bytes, to the first element in the view\n   * @param length The number of elements in the view. Defaults to buffer length\n   * @returns A typed array view of the buffer\n   */\n  static createTypedArray(\n    glType: number,\n    buffer: TypedArray,\n    byteOffset: number = 0,\n    length?: number\n  ): TypedArray {\n    if (length === undefined) {\n      length = (buffer.byteLength - byteOffset) / GLType.getByteSize(glType);\n    }\n    const ArrayType = GLType.getArrayType(glType);\n    return new ArrayType(buffer, byteOffset, length);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}