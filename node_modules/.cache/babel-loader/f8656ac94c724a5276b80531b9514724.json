{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TwoClickPolygonMode = void 0;\n\nvar _geojsonEditMode = require(\"./geojson-edit-mode\");\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar TwoClickPolygonMode = /*#__PURE__*/function (_GeoJsonEditMode) {\n  _inherits(TwoClickPolygonMode, _GeoJsonEditMode);\n\n  var _super = _createSuper(TwoClickPolygonMode);\n\n  function TwoClickPolygonMode() {\n    _classCallCheck(this, TwoClickPolygonMode);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TwoClickPolygonMode, [{\n    key: \"handleClick\",\n    value: function handleClick(event, props) {\n      if (props.modeConfig && props.modeConfig.dragToDraw) {\n        // handled in drag handlers\n        return;\n      }\n\n      this.addClickSequence(event);\n      this.checkAndFinishPolygon(props);\n    }\n  }, {\n    key: \"handleStartDragging\",\n    value: function handleStartDragging(event, props) {\n      if (!props.modeConfig || !props.modeConfig.dragToDraw) {\n        // handled in click handlers\n        return;\n      }\n\n      this.addClickSequence(event);\n      event.cancelPan();\n    }\n  }, {\n    key: \"handleStopDragging\",\n    value: function handleStopDragging(event, props) {\n      if (!props.modeConfig || !props.modeConfig.dragToDraw) {\n        // handled in click handlers\n        return;\n      }\n\n      this.addClickSequence(event);\n      this.checkAndFinishPolygon(props);\n    }\n  }, {\n    key: \"checkAndFinishPolygon\",\n    value: function checkAndFinishPolygon(props) {\n      var clickSequence = this.getClickSequence();\n      var tentativeFeature = this.getTentativeGuide(props);\n\n      if (clickSequence.length > 1 && tentativeFeature && tentativeFeature.geometry.type === 'Polygon') {\n        var feature = {\n          type: 'Feature',\n          properties: {\n            shape: tentativeFeature.properties.shape\n          },\n          geometry: {\n            type: 'Polygon',\n            coordinates: tentativeFeature.geometry.coordinates\n          }\n        };\n        var editAction = this.getAddFeatureOrBooleanPolygonAction(feature, props);\n        this.resetClickSequence();\n\n        if (editAction) {\n          props.onEdit(editAction);\n        }\n      }\n    }\n  }, {\n    key: \"getGuides\",\n    value: function getGuides(props) {\n      var lastPointerMoveEvent = props.lastPointerMoveEvent,\n          modeConfig = props.modeConfig;\n      var clickSequence = this.getClickSequence();\n      var guides = {\n        type: 'FeatureCollection',\n        features: []\n      };\n\n      if (clickSequence.length === 0) {\n        // nothing to do yet\n        return guides;\n      }\n\n      var corner1 = clickSequence[0];\n      var corner2 = lastPointerMoveEvent.mapCoords;\n      var polygon = this.getTwoClickPolygon(corner1, corner2, modeConfig);\n\n      if (polygon) {\n        guides.features.push({\n          type: 'Feature',\n          properties: {\n            shape: polygon.properties && polygon.properties.shape,\n            guideType: 'tentative'\n          },\n          geometry: polygon.geometry\n        });\n      }\n\n      return guides;\n    }\n  }, {\n    key: \"getTwoClickPolygon\",\n    value: function getTwoClickPolygon(coord1, coord2, modeConfig) {\n      return null;\n    }\n  }, {\n    key: \"handlePointerMove\",\n    value: function handlePointerMove(event, props) {\n      props.onUpdateCursor('cell');\n\n      _get(_getPrototypeOf(TwoClickPolygonMode.prototype), \"handlePointerMove\", this).call(this, event, props);\n    }\n  }, {\n    key: \"createTentativeFeature\",\n    value: function createTentativeFeature(props) {\n      var lastPointerMoveEvent = props.lastPointerMoveEvent;\n      var clickSequence = this.getClickSequence();\n      var lastCoords = lastPointerMoveEvent ? [lastPointerMoveEvent.mapCoords] : [];\n      var tentativeFeature;\n\n      if (clickSequence.length === 1) {\n        tentativeFeature = this.getTwoClickPolygon(clickSequence[0], lastCoords[0], props.modeConfig);\n      }\n\n      return tentativeFeature;\n    }\n  }]);\n\n  return TwoClickPolygonMode;\n}(_geojsonEditMode.GeoJsonEditMode);\n\nexports.TwoClickPolygonMode = TwoClickPolygonMode;","map":{"version":3,"mappings":"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","names":["TwoClickPolygonMode","event","props","modeConfig","dragToDraw","addClickSequence","checkAndFinishPolygon","cancelPan","clickSequence","getClickSequence","tentativeFeature","getTentativeGuide","length","geometry","type","feature","properties","shape","coordinates","editAction","getAddFeatureOrBooleanPolygonAction","resetClickSequence","onEdit","lastPointerMoveEvent","guides","features","corner1","corner2","mapCoords","polygon","getTwoClickPolygon","push","guideType","coord1","coord2","onUpdateCursor","_get","lastCoords","GeoJsonEditMode"],"sources":["../../src/lib/two-click-polygon-mode.ts"],"sourcesContent":["import {\n  ClickEvent,\n  StartDraggingEvent,\n  StopDraggingEvent,\n  PointerMoveEvent,\n  ModeProps,\n  GuideFeatureCollection,\n  TentativeFeature,\n} from '../types';\nimport { Polygon, FeatureCollection, FeatureOf, Position } from '../geojson-types';\nimport { GeoJsonEditMode } from './geojson-edit-mode';\n\nexport class TwoClickPolygonMode extends GeoJsonEditMode {\n  handleClick(event: ClickEvent, props: ModeProps<FeatureCollection>) {\n    if (props.modeConfig && props.modeConfig.dragToDraw) {\n      // handled in drag handlers\n      return;\n    }\n\n    this.addClickSequence(event);\n\n    this.checkAndFinishPolygon(props);\n  }\n\n  handleStartDragging(event: StartDraggingEvent, props: ModeProps<FeatureCollection>): void {\n    if (!props.modeConfig || !props.modeConfig.dragToDraw) {\n      // handled in click handlers\n      return;\n    }\n\n    this.addClickSequence(event);\n    event.cancelPan();\n  }\n\n  handleStopDragging(event: StopDraggingEvent, props: ModeProps<FeatureCollection>): void {\n    if (!props.modeConfig || !props.modeConfig.dragToDraw) {\n      // handled in click handlers\n      return;\n    }\n    this.addClickSequence(event);\n\n    this.checkAndFinishPolygon(props);\n  }\n\n  checkAndFinishPolygon(props: ModeProps<FeatureCollection>) {\n    const clickSequence = this.getClickSequence();\n    const tentativeFeature = this.getTentativeGuide(props);\n\n    if (\n      clickSequence.length > 1 &&\n      tentativeFeature &&\n      tentativeFeature.geometry.type === 'Polygon'\n    ) {\n      const feature: FeatureOf<Polygon> = {\n        type: 'Feature',\n        properties: {\n          shape: tentativeFeature.properties.shape,\n        },\n        geometry: {\n          type: 'Polygon',\n          coordinates: tentativeFeature.geometry.coordinates,\n        },\n      };\n      const editAction = this.getAddFeatureOrBooleanPolygonAction(feature, props);\n\n      this.resetClickSequence();\n\n      if (editAction) {\n        props.onEdit(editAction);\n      }\n    }\n  }\n\n  getGuides(props: ModeProps<FeatureCollection>): GuideFeatureCollection {\n    const { lastPointerMoveEvent, modeConfig } = props;\n    const clickSequence = this.getClickSequence();\n\n    const guides: GuideFeatureCollection = {\n      type: 'FeatureCollection',\n      features: [],\n    };\n\n    if (clickSequence.length === 0) {\n      // nothing to do yet\n      return guides;\n    }\n\n    const corner1 = clickSequence[0];\n    const corner2 = lastPointerMoveEvent.mapCoords;\n\n    const polygon = this.getTwoClickPolygon(corner1, corner2, modeConfig);\n    if (polygon) {\n      guides.features.push({\n        type: 'Feature',\n        properties: {\n          shape: polygon.properties && polygon.properties.shape,\n          guideType: 'tentative',\n        },\n        geometry: polygon.geometry,\n      });\n    }\n\n    return guides;\n  }\n\n  getTwoClickPolygon(\n    coord1: Position,\n    coord2: Position,\n    modeConfig: any\n  ): FeatureOf<Polygon> | null | undefined {\n    return null;\n  }\n\n  handlePointerMove(event: PointerMoveEvent, props: ModeProps<FeatureCollection>) {\n    props.onUpdateCursor('cell');\n    super.handlePointerMove(event, props);\n  }\n\n  createTentativeFeature(props: ModeProps<FeatureCollection>): TentativeFeature {\n    const { lastPointerMoveEvent } = props;\n    const clickSequence = this.getClickSequence();\n\n    const lastCoords = lastPointerMoveEvent ? [lastPointerMoveEvent.mapCoords] : [];\n\n    let tentativeFeature;\n    if (clickSequence.length === 1) {\n      tentativeFeature = this.getTwoClickPolygon(clickSequence[0], lastCoords[0], props.modeConfig);\n    }\n\n    return tentativeFeature;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}