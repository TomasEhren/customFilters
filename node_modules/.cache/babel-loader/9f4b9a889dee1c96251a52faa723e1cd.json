{"ast":null,"code":"import _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { resolvePath } from '@loaders.gl/loader-utils';\nimport { makeResponse } from '../utils/response-utils';\nexport function fetchFile(_x, _x2) {\n  return _fetchFile.apply(this, arguments);\n}\n\nfunction _fetchFile() {\n  _fetchFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, options) {\n    var fetchOptions;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof url === 'string')) {\n              _context.next = 7;\n              break;\n            }\n\n            url = resolvePath(url);\n            fetchOptions = options;\n\n            if (options !== null && options !== void 0 && options.fetch && typeof (options === null || options === void 0 ? void 0 : options.fetch) !== 'function') {\n              fetchOptions = options.fetch;\n            }\n\n            _context.next = 6;\n            return fetch(url, fetchOptions);\n\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 7:\n            _context.next = 9;\n            return makeResponse(url);\n\n          case 9:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchFile.apply(this, arguments);\n}","map":{"version":3,"mappings":";;AAAA,SAAQA,WAAR,QAA0B,0BAA1B;AACA,SAAQC,YAAR,QAA2B,yBAA3B;AAYA,gBAAsBC,SAAtB;EAAA;AAAA;;;wEAAO,iBACLC,GADK,EAELC,OAFK;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,MAID,OAAOD,GAAP,KAAe,QAJd;cAAA;cAAA;YAAA;;YAKHA,GAAG,GAAGH,WAAW,CAACG,GAAD,CAAjBA;YAEIE,YAPD,GAO6BD,OAP7B;;YAQH,IAAIA,OAAO,SAAPA,WAAO,WAAPA,WAAO,CAAEE,KAATF,IAAkB,QAAOA,OAAP,SAAOA,WAAP,WAAOA,GAAP,MAAOA,UAAO,CAAEE,KAAhB,MAA0B,UAAhD,EAA4D;cAC1DD,YAAY,GAAGD,OAAO,CAACE,KAAvBD;YACD;;YAVE;YAAA,OAYUC,KAAK,CAACH,GAAD,EAAME,YAAN,CAZf;;UAAA;YAAA;;UAAA;YAAA;YAAA,OAeQJ,YAAY,CAACE,GAAD,CAfpB;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","names":["resolvePath","makeResponse","fetchFile","url","options","fetchOptions","fetch"],"sources":["../../../../src/lib/fetch/fetch-file.ts"],"sourcesContent":["import {resolvePath} from '@loaders.gl/loader-utils';\nimport {makeResponse} from '../utils/response-utils';\n// import {getErrorMessageFromResponse} from './fetch-error-message';\n\n/**\n * fetch compatible function\n * Reads file data from:\n * - http/http urls\n * - data urls\n * - File/Blob objects\n * Leverages `@loaders.gl/polyfills` for Node.js support\n * Respects pathPrefix and file aliases\n */\nexport async function fetchFile(\n  url: string | Blob,\n  options?: RequestInit & {fetch?: RequestInit | Function}\n): Promise<Response> {\n  if (typeof url === 'string') {\n    url = resolvePath(url);\n\n    let fetchOptions: RequestInit = options as RequestInit;\n    if (options?.fetch && typeof options?.fetch !== 'function') {\n      fetchOptions = options.fetch;\n    }\n\n    return await fetch(url, fetchOptions);\n  }\n\n  return await makeResponse(url);\n}\n"]},"metadata":{},"sourceType":"module"}