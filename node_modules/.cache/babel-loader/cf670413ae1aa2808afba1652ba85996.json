{"ast":null,"code":"import { combineReducers, configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport noop from 'utils/noop';\nimport appSlice from './appSlice';\nlet store = {};\n\nfunction createReducerManager(initialReducers) {\n  // Create an object which maps keys to reducers\n  const reducers = { ...initialReducers\n  }; // Create the initial combinedReducer\n\n  let combinedReducer = Object.keys(reducers).length ? combineReducers(reducers) : noop; // An array which is used to delete state keys when reducers are removed\n\n  let keysToRemove = [];\n  return {\n    getReducerMap: () => reducers,\n    // The root reducer function exposed by this object\n    // This will be passed to the store\n    reduce: (state, action) => {\n      // If any reducers have been removed, clean up their state first\n      if (keysToRemove.length > 0) {\n        state = { ...state\n        };\n\n        for (let key of keysToRemove) {\n          delete state[key];\n        }\n\n        keysToRemove = [];\n      } // Delegate to the combined reducer\n\n\n      return combinedReducer(state, action);\n    },\n    // Adds a new reducer with the specified key\n    add: (key, reducer) => {\n      if (!key || reducers[key]) {\n        return;\n      } // Add the reducer to the reducer mapping\n\n\n      reducers[key] = reducer; // Generate a new combined reducer\n\n      combinedReducer = combineReducers(reducers);\n      store.replaceReducer(combinedReducer);\n    },\n    // Removes a reducer with the specified key\n    remove: key => {\n      if (!key || !reducers[key]) {\n        return;\n      } // Remove it from the reducer mapping\n\n\n      delete reducers[key]; // Add the key to the list of keys to clean up\n\n      keysToRemove.push(key); // Generate a new combined reducer\n\n      combinedReducer = combineReducers(reducers);\n      store.replaceReducer(combinedReducer);\n    }\n  };\n}\n\nconst staticReducers = {\n  app: appSlice\n};\n\nfunction getCustomMiddleware() {\n  const devConfig = {\n    immutableCheck: {\n      ignoredPaths: ['carto.viewportFeatures']\n    },\n    serializableCheck: {\n      ignoredPaths: ['carto.viewportFeatures'],\n      ignoredActions: ['carto/setViewportFeatures']\n    }\n  };\n  const prodConfig = {\n    immutableCheck: false,\n    serializableCheck: false\n  };\n  const isProductionEnv = process.env.NODE_ENV === 'production';\n  return getDefaultMiddleware(isProductionEnv ? prodConfig : devConfig);\n} // Configure the store\n\n\nexport default function configureAppStore() {\n  const reducerManager = createReducerManager(staticReducers);\n  store = configureStore({\n    reducer: reducerManager.reduce,\n    middleware: getCustomMiddleware()\n  });\n  store.reducerManager = reducerManager;\n  return store;\n}","map":{"version":3,"names":["combineReducers","configureStore","getDefaultMiddleware","noop","appSlice","store","createReducerManager","initialReducers","reducers","combinedReducer","Object","keys","length","keysToRemove","getReducerMap","reduce","state","action","key","add","reducer","replaceReducer","remove","push","staticReducers","app","getCustomMiddleware","devConfig","immutableCheck","ignoredPaths","serializableCheck","ignoredActions","prodConfig","isProductionEnv","process","env","NODE_ENV","configureAppStore","reducerManager","middleware"],"sources":["/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/src/store/store.js"],"sourcesContent":["import { combineReducers, configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport noop from 'utils/noop';\nimport appSlice from './appSlice';\n\nlet store = {};\n\nfunction createReducerManager(initialReducers) {\n  // Create an object which maps keys to reducers\n  const reducers = { ...initialReducers };\n\n  // Create the initial combinedReducer\n  let combinedReducer = Object.keys(reducers).length ? combineReducers(reducers) : noop;\n\n  // An array which is used to delete state keys when reducers are removed\n  let keysToRemove = [];\n\n  return {\n    getReducerMap: () => reducers,\n\n    // The root reducer function exposed by this object\n    // This will be passed to the store\n    reduce: (state, action) => {\n      // If any reducers have been removed, clean up their state first\n      if (keysToRemove.length > 0) {\n        state = { ...state };\n        for (let key of keysToRemove) {\n          delete state[key];\n        }\n        keysToRemove = [];\n      }\n\n      // Delegate to the combined reducer\n      return combinedReducer(state, action);\n    },\n\n    // Adds a new reducer with the specified key\n    add: (key, reducer) => {\n      if (!key || reducers[key]) {\n        return;\n      }\n\n      // Add the reducer to the reducer mapping\n      reducers[key] = reducer;\n\n      // Generate a new combined reducer\n      combinedReducer = combineReducers(reducers);\n      store.replaceReducer(combinedReducer);\n    },\n\n    // Removes a reducer with the specified key\n    remove: (key) => {\n      if (!key || !reducers[key]) {\n        return;\n      }\n\n      // Remove it from the reducer mapping\n      delete reducers[key];\n\n      // Add the key to the list of keys to clean up\n      keysToRemove.push(key);\n\n      // Generate a new combined reducer\n      combinedReducer = combineReducers(reducers);\n      store.replaceReducer(combinedReducer);\n    },\n  };\n}\n\nconst staticReducers = {\n  app: appSlice,\n};\n\nfunction getCustomMiddleware() {\n  const devConfig = {\n    immutableCheck: {\n      ignoredPaths: ['carto.viewportFeatures'],\n    },\n    serializableCheck: {\n      ignoredPaths: ['carto.viewportFeatures'],\n      ignoredActions: ['carto/setViewportFeatures'],\n    },\n  };\n\n  const prodConfig = {\n    immutableCheck: false,\n    serializableCheck: false,\n  };\n\n  const isProductionEnv = process.env.NODE_ENV === 'production';\n\n  return getDefaultMiddleware(isProductionEnv ? prodConfig : devConfig);\n}\n\n// Configure the store\nexport default function configureAppStore() {\n  const reducerManager = createReducerManager(staticReducers);\n  store = configureStore({\n    reducer: reducerManager.reduce,\n    middleware: getCustomMiddleware(),\n  });\n\n  store.reducerManager = reducerManager;\n\n  return store;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}