{"ast":null,"code":"import { Model, Geometry } from '@luma.gl/core';\nimport { Layer, project32 } from '@deck.gl/core';\nimport vs from './triangle-layer-vertex.glsl';\nimport fs from './triangle-layer-fragment.glsl';\nexport default class TriangleLayer extends Layer {\n  getShaders() {\n    return {\n      vs,\n      fs,\n      modules: [project32]\n    };\n  }\n\n  initializeState() {\n    const {\n      gl\n    } = this.context;\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {\n        size: 3,\n        noAlloc: true\n      },\n      texCoords: {\n        size: 2,\n        noAlloc: true\n      }\n    });\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n\n  _getModel(gl) {\n    const {\n      vertexCount\n    } = this.props;\n    return new Model(gl, { ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 6,\n        vertexCount\n      })\n    });\n  }\n\n  draw(_ref) {\n    let {\n      uniforms\n    } = _ref;\n    const {\n      model\n    } = this.state;\n    const {\n      texture,\n      maxTexture,\n      colorTexture,\n      intensity,\n      threshold,\n      aggregationMode,\n      colorDomain\n    } = this.props;\n    model.setUniforms({ ...uniforms,\n      texture,\n      maxTexture,\n      colorTexture,\n      intensity,\n      threshold,\n      aggregationMode,\n      colorDomain\n    }).draw();\n  }\n\n}\nTriangleLayer.layerName = 'TriangleLayer';","map":{"version":3,"mappings":"AAqBA,SAAQA,KAAR,EAAeC,QAAf,QAA8B,eAA9B;AACA,SAAQC,KAAR,EAAeC,SAAf,QAA+B,eAA/B;AACA,OAAOC,EAAP,MAAe,8BAAf;AACA,OAAOC,EAAP,MAAe,gCAAf;AAEA,eAAe,MAAMC,aAAN,SAA4BJ,KAA5B,CAAkC;EAC/CK,UAAU,GAAG;IACX,OAAO;MAACH,EAAD;MAAKC,EAAL;MAASG,OAAO,EAAE,CAACL,SAAD;IAAlB,CAAP;EACD;;EAEDM,eAAe,GAAG;IAChB,MAAM;MAACC;IAAD,IAAO,KAAKC,OAAlB;IACA,MAAMC,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;IACAD,gBAAgB,CAACE,GAAjBF,CAAqB;MACnBG,SAAS,EAAE;QAACC,IAAI,EAAE,CAAP;QAAUC,OAAO,EAAE;MAAnB,CADQ;MAEnBC,SAAS,EAAE;QAACF,IAAI,EAAE,CAAP;QAAUC,OAAO,EAAE;MAAnB;IAFQ,CAArBL;IAIA,KAAKO,QAAL,CAAc;MACZC,KAAK,EAAE,KAAKC,SAAL,CAAeX,EAAf;IADK,CAAd;EAGD;;EAEDW,SAAS,CAACX,EAAD,EAAK;IACZ,MAAM;MAACY;IAAD,IAAgB,KAAKC,KAA3B;IAEA,OAAO,IAAIvB,KAAJ,CAAUU,EAAV,EAAc,EACnB,GAAG,KAAKH,UAAL,EADgB;MAEnBiB,EAAE,EAAE,KAAKD,KAAL,CAAWC,EAFI;MAGnBC,QAAQ,EAAE,IAAIxB,QAAJ,CAAa;QACrByB,QAAQ,GADa;QAErBJ;MAFqB,CAAb;IAHS,CAAd,CAAP;EAQD;;EAEDK,IAAI,OAAa;IAAA,IAAZ;MAACC;IAAD,CAAY;IACf,MAAM;MAACR;IAAD,IAAU,KAAKS,KAArB;IAEA,MAAM;MAACC,OAAD;MAAUC,UAAV;MAAsBC,YAAtB;MAAoCC,SAApC;MAA+CC,SAA/C;MAA0DC,eAA1D;MAA2EC;IAA3E,IACJ,KAAKb,KADP;IAGAH,KAAK,CACFiB,WADHjB,CACe,EACX,GAAGQ,QADQ;MAEXE,OAFW;MAGXC,UAHW;MAIXC,YAJW;MAKXC,SALW;MAMXC,SANW;MAOXC,eAPW;MAQXC;IARW,CADfhB,EAWGO,IAXHP;EAYD;;AAhD8C;AAmDjDd,aAAa,CAACgC,SAAdhC,GAA0B,eAA1BA","names":["Model","Geometry","Layer","project32","vs","fs","TriangleLayer","getShaders","modules","initializeState","gl","context","attributeManager","getAttributeManager","add","positions","size","noAlloc","texCoords","setState","model","_getModel","vertexCount","props","id","geometry","drawMode","draw","uniforms","state","texture","maxTexture","colorTexture","intensity","threshold","aggregationMode","colorDomain","setUniforms","layerName"],"sources":["../../../src/heatmap-layer/triangle-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\nimport {Layer, project32} from '@deck.gl/core';\nimport vs from './triangle-layer-vertex.glsl';\nimport fs from './triangle-layer-fragment.glsl';\n\nexport default class TriangleLayer extends Layer {\n  getShaders() {\n    return {vs, fs, modules: [project32]};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, noAlloc: true},\n      texCoords: {size: 2, noAlloc: true}\n    });\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n\n  _getModel(gl) {\n    const {vertexCount} = this.props;\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount\n      })\n    });\n  }\n\n  draw({uniforms}) {\n    const {model} = this.state;\n\n    const {texture, maxTexture, colorTexture, intensity, threshold, aggregationMode, colorDomain} =\n      this.props;\n\n    model\n      .setUniforms({\n        ...uniforms,\n        texture,\n        maxTexture,\n        colorTexture,\n        intensity,\n        threshold,\n        aggregationMode,\n        colorDomain\n      })\n      .draw();\n  }\n}\n\nTriangleLayer.layerName = 'TriangleLayer';\n"]},"metadata":{},"sourceType":"module"}