{"ast":null,"code":"import { Vector3, Vector4, assert } from '@math.gl/core';\nimport { INTERSECTION } from '../constants';\nimport Plane from './plane';\nconst faces = [new Vector3([1, 0, 0]), new Vector3([0, 1, 0]), new Vector3([0, 0, 1])];\nconst scratchPlaneCenter = new Vector3();\nconst scratchPlaneNormal = new Vector3();\nconst scratchPlane = new Plane(new Vector3(1.0, 0.0, 0.0), 0.0);\nexport default class CullingVolume {\n  static get MASK_OUTSIDE() {\n    return 0xffffffff;\n  }\n\n  static get MASK_INSIDE() {\n    return 0x00000000;\n  }\n\n  static get MASK_INDETERMINATE() {\n    return 0x7fffffff;\n  }\n\n  constructor() {\n    let planes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    this.planes = planes;\n    assert(this.planes.every(plane => plane instanceof Plane));\n  }\n\n  fromBoundingSphere(boundingSphere) {\n    this.planes.length = 2 * faces.length;\n    const center = boundingSphere.center;\n    const radius = boundingSphere.radius;\n    let planeIndex = 0;\n\n    for (const faceNormal of faces) {\n      let plane0 = this.planes[planeIndex];\n      let plane1 = this.planes[planeIndex + 1];\n\n      if (!plane0) {\n        plane0 = this.planes[planeIndex] = new Plane();\n      }\n\n      if (!plane1) {\n        plane1 = this.planes[planeIndex + 1] = new Plane();\n      }\n\n      const plane0Center = scratchPlaneCenter.copy(faceNormal).scale(-radius).add(center);\n      const plane0Distance = -faceNormal.dot(plane0Center);\n      plane0.fromPointNormal(plane0Center, faceNormal);\n      const plane1Center = scratchPlaneCenter.copy(faceNormal).scale(radius).add(center);\n      const negatedFaceNormal = scratchPlaneNormal.copy(faceNormal).negate();\n      const plane1Distance = -negatedFaceNormal.dot(plane1Center);\n      plane1.fromPointNormal(plane1Center, negatedFaceNormal);\n      planeIndex += 2;\n    }\n\n    return this;\n  }\n\n  computeVisibility(boundingVolume) {\n    assert(boundingVolume);\n    let intersect = INTERSECTION.INSIDE;\n\n    for (const plane of this.planes) {\n      const result = boundingVolume.intersectPlane(plane);\n\n      switch (result) {\n        case INTERSECTION.OUTSIDE:\n          return INTERSECTION.OUTSIDE;\n\n        case INTERSECTION.INTERSECTING:\n          intersect = INTERSECTION.INTERSECTING;\n          break;\n\n        default:\n      }\n    }\n\n    return intersect;\n  }\n\n  computeVisibilityWithPlaneMask(boundingVolume, parentPlaneMask) {\n    assert(boundingVolume, 'boundingVolume is required.');\n    assert(Number.isFinite(parentPlaneMask), 'parentPlaneMask is required.');\n\n    if (parentPlaneMask === CullingVolume.MASK_OUTSIDE || parentPlaneMask === CullingVolume.MASK_INSIDE) {\n      return parentPlaneMask;\n    }\n\n    let mask = CullingVolume.MASK_INSIDE;\n    const planes = this.planes;\n\n    for (let k = 0; k < this.planes.length; ++k) {\n      const flag = k < 31 ? 1 << k : 0;\n\n      if (k < 31 && (parentPlaneMask & flag) === 0) {\n        continue;\n      }\n\n      const plane = planes[k];\n      const result = boundingVolume.intersectPlane(plane);\n\n      if (result === INTERSECTION.OUTSIDE) {\n        return CullingVolume.MASK_OUTSIDE;\n      } else if (result === INTERSECTION.INTERSECTING) {\n        mask |= flag;\n      }\n    }\n\n    return mask;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Vector3","Vector4","assert","INTERSECTION","Plane","faces","scratchPlaneCenter","scratchPlaneNormal","scratchPlane","CullingVolume","MASK_OUTSIDE","MASK_INSIDE","MASK_INDETERMINATE","constructor","planes","every","plane","fromBoundingSphere","boundingSphere","length","center","radius","planeIndex","faceNormal","plane0","plane1","plane0Center","copy","scale","add","plane0Distance","dot","fromPointNormal","plane1Center","negatedFaceNormal","negate","plane1Distance","computeVisibility","boundingVolume","intersect","INSIDE","result","intersectPlane","OUTSIDE","INTERSECTING","computeVisibilityWithPlaneMask","parentPlaneMask","Number","isFinite","mask","k","flag"],"sources":["../../../src/lib/culling-volume.js"],"sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/* eslint-disable */\nimport {Vector3, Vector4, assert} from '@math.gl/core';\nimport {INTERSECTION} from '../constants';\nimport Plane from './plane';\n\n// X, Y, Z Unit vectors\nconst faces = [new Vector3([1, 0, 0]), new Vector3([0, 1, 0]), new Vector3([0, 0, 1])];\n\nconst scratchPlaneCenter = new Vector3();\nconst scratchPlaneNormal = new Vector3();\nconst scratchPlane = new Plane(new Vector3(1.0, 0.0, 0.0), 0.0);\n\n// A culling volume defined by planes.\nexport default class CullingVolume {\n  // For plane masks (as used in {@link CullingVolume#computeVisibilityWithPlaneMask}), this special value\n  // represents the case where the object bounding volume is entirely outside the culling volume.\n  static get MASK_OUTSIDE() {\n    return 0xffffffff;\n  }\n\n  // For plane masks (as used in {@link CullingVolume.prototype.computeVisibilityWithPlaneMask}), this value\n  // represents the case where the object bounding volume is entirely inside the culling volume.\n  static get MASK_INSIDE() {\n    return 0x00000000;\n  }\n\n  // For plane masks (as used in {@link CullingVolume.prototype.computeVisibilityWithPlaneMask}), this value\n  // represents the case where the object bounding volume (may) intersect all planes of the culling volume.\n  static get MASK_INDETERMINATE() {\n    return 0x7fffffff;\n  }\n\n  constructor(planes = []) {\n    // {Cartesian4[]} [planes] An array of clipping planes.\n    this.planes = planes;\n    assert(this.planes.every((plane) => plane instanceof Plane));\n  }\n\n  // Constructs a culling volume from a bounding sphere. Creates six planes that create a box containing the sphere.\n  // The planes are aligned to the x, y, and z axes in world coordinates.\n  fromBoundingSphere(boundingSphere) {\n    this.planes.length = 2 * faces.length;\n\n    const center = boundingSphere.center;\n    const radius = boundingSphere.radius;\n\n    let planeIndex = 0;\n\n    for (const faceNormal of faces) {\n      let plane0 = this.planes[planeIndex];\n      let plane1 = this.planes[planeIndex + 1];\n\n      if (!plane0) {\n        plane0 = this.planes[planeIndex] = new Plane();\n      }\n      if (!plane1) {\n        plane1 = this.planes[planeIndex + 1] = new Plane();\n      }\n\n      const plane0Center = scratchPlaneCenter.copy(faceNormal).scale(-radius).add(center);\n      const plane0Distance = -faceNormal.dot(plane0Center);\n\n      plane0.fromPointNormal(plane0Center, faceNormal);\n\n      const plane1Center = scratchPlaneCenter.copy(faceNormal).scale(radius).add(center);\n\n      const negatedFaceNormal = scratchPlaneNormal.copy(faceNormal).negate();\n\n      const plane1Distance = -negatedFaceNormal.dot(plane1Center);\n\n      plane1.fromPointNormal(plane1Center, negatedFaceNormal);\n\n      planeIndex += 2;\n    }\n\n    return this;\n  }\n\n  // Determines whether a bounding volume intersects the culling volume.\n  computeVisibility(boundingVolume) {\n    assert(boundingVolume);\n    // const planes = this.planes;\n    let intersect = INTERSECTION.INSIDE;\n    for (const plane of this.planes) {\n      const result = boundingVolume.intersectPlane(plane);\n      switch (result) {\n        case INTERSECTION.OUTSIDE:\n          // We are done\n          return INTERSECTION.OUTSIDE;\n\n        case INTERSECTION.INTERSECTING:\n          // If no other intersection is outside, return INTERSECTING\n          intersect = INTERSECTION.INTERSECTING;\n          break;\n\n        default:\n      }\n    }\n\n    return intersect;\n  }\n\n  // Determines whether a bounding volume intersects the culling volume.\n  /*\n   * @param {Number} parentPlaneMask A bit mask from the boundingVolume's parent's check against the same culling\n   *                                 volume, such that if (planeMask & (1 << planeIndex) === 0), for k < 31, then\n   *                                 the parent (and therefore this) volume is completely inside plane[planeIndex]\n   *                                 and that plane check can be skipped.\n   */\n  computeVisibilityWithPlaneMask(boundingVolume, parentPlaneMask) {\n    assert(boundingVolume, 'boundingVolume is required.');\n    assert(Number.isFinite(parentPlaneMask), 'parentPlaneMask is required.');\n\n    if (\n      parentPlaneMask === CullingVolume.MASK_OUTSIDE ||\n      parentPlaneMask === CullingVolume.MASK_INSIDE\n    ) {\n      // parent is completely outside or completely inside, so this child is as well.\n      return parentPlaneMask;\n    }\n\n    // Start with MASK_INSIDE (all zeros) so that after the loop, the return value can be compared with MASK_INSIDE.\n    // (Because if there are fewer than 31 planes, the upper bits wont be changed.)\n    let mask = CullingVolume.MASK_INSIDE;\n\n    const planes = this.planes;\n    for (let k = 0; k < this.planes.length; ++k) {\n      // For k greater than 31 (since 31 is the maximum number of INSIDE/INTERSECTING bits we can store), skip the optimization.\n      const flag = k < 31 ? 1 << k : 0;\n      if (k < 31 && (parentPlaneMask & flag) === 0) {\n        // boundingVolume is known to be INSIDE this plane.\n        continue;\n      }\n\n      const plane = planes[k];\n      const result = boundingVolume.intersectPlane(plane);\n      if (result === INTERSECTION.OUTSIDE) {\n        return CullingVolume.MASK_OUTSIDE;\n      } else if (result === INTERSECTION.INTERSECTING) {\n        mask |= flag;\n      }\n    }\n\n    return mask;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}