{"ast":null,"code":"import _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { assert } from '@loaders.gl/loader-utils';\nimport { isImageTypeSupported, getDefaultImageType } from '../category-api/image-type';\nimport { getImageData } from '../category-api/parsed-image-api';\nimport parseToImage from './parse-to-image';\nimport parseToImageBitmap from './parse-to-image-bitmap';\nimport parseToNodeImage from './parse-to-node-image';\nexport default function parseImage(_x, _x2, _x3) {\n  return _parseImage.apply(this, arguments);\n}\n\nfunction _parseImage() {\n  _parseImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(arrayBuffer, options, context) {\n    var imageOptions, imageType, _ref, url, loadType, image;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = options || {};\n            imageOptions = options.image || {};\n            imageType = imageOptions.type || 'auto';\n            _ref = context || {}, url = _ref.url;\n            loadType = getLoadableImageType(imageType);\n            _context.t0 = loadType;\n            _context.next = _context.t0 === 'imagebitmap' ? 8 : _context.t0 === 'image' ? 12 : _context.t0 === 'data' ? 16 : 20;\n            break;\n\n          case 8:\n            _context.next = 10;\n            return parseToImageBitmap(arrayBuffer, options, url);\n\n          case 10:\n            image = _context.sent;\n            return _context.abrupt(\"break\", 21);\n\n          case 12:\n            _context.next = 14;\n            return parseToImage(arrayBuffer, options, url);\n\n          case 14:\n            image = _context.sent;\n            return _context.abrupt(\"break\", 21);\n\n          case 16:\n            _context.next = 18;\n            return parseToNodeImage(arrayBuffer, options);\n\n          case 18:\n            image = _context.sent;\n            return _context.abrupt(\"break\", 21);\n\n          case 20:\n            assert(false);\n\n          case 21:\n            if (imageType === 'data') {\n              image = getImageData(image);\n            }\n\n            return _context.abrupt(\"return\", image);\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseImage.apply(this, arguments);\n}\n\nfunction getLoadableImageType(type) {\n  switch (type) {\n    case 'auto':\n    case 'data':\n      return getDefaultImageType();\n\n    default:\n      isImageTypeSupported(type);\n      return type;\n  }\n}","map":{"version":3,"mappings":";;AACA,SAAQA,MAAR,QAAqB,0BAArB;AAGA,SAAQC,oBAAR,EAA8BC,mBAA9B,QAAwD,4BAAxD;AACA,SAAQC,YAAR,QAA2B,kCAA3B;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;AAIA,wBAA8BC,UAA9B;EAAA;AAAA;;;yEAAe,iBACbC,WADa,EAEbC,OAFa,EAGbC,OAHa;IAAA;;IAAA;MAAA;QAAA;UAAA;YAKbD,OAAO,GAAGA,OAAO,IAAI,EAArBA;YACME,YANO,GAMQF,OAAO,CAACG,KAARH,IAAiB,EANzB;YASPI,SATO,GASKF,YAAY,CAACG,IAAbH,IAAqB,MAT1B;YAAA,OAWCD,OAAO,IAAI,EAXZ,EAWNK,GAXM,QAWNA,GAXM;YAcPC,QAdO,GAcIC,oBAAoB,CAACJ,SAAD,CAdxB;YAAA,cAiBLG,QAjBK;YAAA,gCAkBN,aAlBM,uBAqBN,OArBM,wBAwBN,MAxBM;YAAA;;UAAA;YAAA;YAAA,OAmBKX,kBAAkB,CAACG,WAAD,EAAcC,OAAd,EAAuBM,GAAvB,CAnBvB;;UAAA;YAmBTH,KAnBS;YAAA;;UAAA;YAAA;YAAA,OAsBKR,YAAY,CAACI,WAAD,EAAcC,OAAd,EAAuBM,GAAvB,CAtBjB;;UAAA;YAsBTH,KAtBS;YAAA;;UAAA;YAAA;YAAA,OA0BKN,gBAAgB,CAACE,WAAD,EAAcC,OAAd,CA1BrB;;UAAA;YA0BTG,KA1BS;YAAA;;UAAA;YA6BTZ,MAAM,CAAC,KAAD,CAANA;;UA7BS;YAiCb,IAAIa,SAAS,KAAK,MAAlB,EAA0B;cACxBD,KAAK,GAAGT,YAAY,CAACS,KAAD,CAApBA;YACD;;YAnCY,iCAqCNA,KArCM;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAyCf,SAASK,oBAAT,CAA8BH,IAA9B,EAAoC;EAClC,QAAQA,IAAR;IACE,KAAK,MAAL;IACA,KAAK,MAAL;MAGE,OAAOZ,mBAAmB,EAA1B;;IACF;MAEED,oBAAoB,CAACa,IAAD,CAApBb;MACA,OAAOa,IAAP;EATJ;AAWD","names":["assert","isImageTypeSupported","getDefaultImageType","getImageData","parseToImage","parseToImageBitmap","parseToNodeImage","parseImage","arrayBuffer","options","context","imageOptions","image","imageType","type","url","loadType","getLoadableImageType"],"sources":["../../../../src/lib/parsers/parse-image.ts"],"sourcesContent":["import type {LoaderContext} from '@loaders.gl/loader-utils';\nimport {assert} from '@loaders.gl/loader-utils';\nimport type {ImageType} from '../../types';\nimport type {ImageLoaderOptions} from '../../image-loader';\nimport {isImageTypeSupported, getDefaultImageType} from '../category-api/image-type';\nimport {getImageData} from '../category-api/parsed-image-api';\nimport parseToImage from './parse-to-image';\nimport parseToImageBitmap from './parse-to-image-bitmap';\nimport parseToNodeImage from './parse-to-node-image';\n\n// Parse to platform defined image type (data on node, ImageBitmap or HTMLImage on browser)\n// eslint-disable-next-line complexity\nexport default async function parseImage(\n  arrayBuffer: ArrayBuffer,\n  options?: ImageLoaderOptions,\n  context?: LoaderContext\n): Promise<ImageType> {\n  options = options || {};\n  const imageOptions = options.image || {};\n\n  // The user can request a specific output format via `options.image.type`\n  const imageType = imageOptions.type || 'auto';\n\n  const {url} = context || {};\n\n  // Note: For options.image.type === `data`, we may still need to load as `image` or `imagebitmap`\n  const loadType = getLoadableImageType(imageType);\n\n  let image;\n  switch (loadType) {\n    case 'imagebitmap':\n      image = await parseToImageBitmap(arrayBuffer, options, url);\n      break;\n    case 'image':\n      image = await parseToImage(arrayBuffer, options, url);\n      break;\n    case 'data':\n      // Node.js loads imagedata directly\n      image = await parseToNodeImage(arrayBuffer, options);\n      break;\n    default:\n      assert(false);\n  }\n\n  // Browser: if options.image.type === 'data', we can now extract data from the loaded image\n  if (imageType === 'data') {\n    image = getImageData(image);\n  }\n\n  return image;\n}\n\n// Get a loadable image type from image type\nfunction getLoadableImageType(type) {\n  switch (type) {\n    case 'auto':\n    case 'data':\n      // Browser: For image data we need still need to load using an image format\n      // Node: the default image type is `data`.\n      return getDefaultImageType();\n    default:\n      // Throw an error if not supported\n      isImageTypeSupported(type);\n      return type;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}