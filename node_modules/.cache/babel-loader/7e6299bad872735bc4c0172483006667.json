{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Resource from './resource';\nimport Texture from './texture';\nimport Framebuffer from './framebuffer';\nimport { parseUniformName, getUniformSetter } from './uniforms';\nimport { VertexShader, FragmentShader } from './shader';\nimport ProgramConfiguration from './program-configuration';\nimport { copyUniform, checkUniformValues } from './uniforms';\nimport { isWebGL2, assertWebGL2Context, withParameters, log } from '@luma.gl/gltools';\nimport { getKey } from '../webgl-utils/constants-to-keys';\nimport { getPrimitiveDrawMode } from '../webgl-utils/attribute-utils';\nimport { assert } from '../utils/assert';\nimport { uid } from '../utils/utils';\nvar LOG_PROGRAM_PERF_PRIORITY = 4;\nvar GL_SEPARATE_ATTRIBS = 0x8c8d;\nvar V6_DEPRECATED_METHODS = ['setVertexArray', 'setAttributes', 'setBuffers', 'unsetBuffers', 'use', 'getUniformCount', 'getUniformInfo', 'getUniformLocation', 'getUniformValue', 'getVarying', 'getFragDataLocation', 'getAttachedShaders', 'getAttributeCount', 'getAttributeLocation', 'getAttributeInfo'];\n\nvar Program = /*#__PURE__*/function (_Resource) {\n  _inherits(Program, _Resource);\n\n  var _super = _createSuper(Program);\n\n  function Program(gl) {\n    var _this;\n\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Program);\n\n    _this = _super.call(this, gl, props);\n\n    _this.stubRemovedMethods('Program', 'v6.0', V6_DEPRECATED_METHODS);\n\n    _this._isCached = false;\n\n    _this.initialize(props);\n\n    Object.seal(_assertThisInitialized(_this));\n\n    _this._setId(props.id);\n\n    return _this;\n  }\n\n  _createClass(Program, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var hash = props.hash,\n          vs = props.vs,\n          fs = props.fs,\n          varyings = props.varyings,\n          _props$bufferMode = props.bufferMode,\n          bufferMode = _props$bufferMode === void 0 ? GL_SEPARATE_ATTRIBS : _props$bufferMode;\n      this.hash = hash || '';\n      this.vs = typeof vs === 'string' ? new VertexShader(this.gl, {\n        id: \"\".concat(props.id, \"-vs\"),\n        source: vs\n      }) : vs;\n      this.fs = typeof fs === 'string' ? new FragmentShader(this.gl, {\n        id: \"\".concat(props.id, \"-fs\"),\n        source: fs\n      }) : fs;\n      assert(this.vs instanceof VertexShader);\n      assert(this.fs instanceof FragmentShader);\n      this.uniforms = {};\n      this._textureUniforms = {};\n\n      if (varyings && varyings.length > 0) {\n        assertWebGL2Context(this.gl);\n        this.varyings = varyings;\n        this.gl2.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n      }\n\n      this._compileAndLink();\n\n      this._readUniformLocationsFromLinkedProgram();\n\n      this.configuration = new ProgramConfiguration(this);\n      return this.setProps(props);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (this._isCached) {\n        return this;\n      }\n\n      return _get(_getPrototypeOf(Program.prototype), \"delete\", this).call(this, options);\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      if ('uniforms' in props) {\n        this.setUniforms(props.uniforms);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref) {\n      var _this2 = this;\n\n      var logPriority = _ref.logPriority,\n          _ref$drawMode = _ref.drawMode,\n          drawMode = _ref$drawMode === void 0 ? 4 : _ref$drawMode,\n          vertexCount = _ref.vertexCount,\n          _ref$offset = _ref.offset,\n          offset = _ref$offset === void 0 ? 0 : _ref$offset,\n          start = _ref.start,\n          end = _ref.end,\n          _ref$isIndexed = _ref.isIndexed,\n          isIndexed = _ref$isIndexed === void 0 ? false : _ref$isIndexed,\n          _ref$indexType = _ref.indexType,\n          indexType = _ref$indexType === void 0 ? 5123 : _ref$indexType,\n          _ref$instanceCount = _ref.instanceCount,\n          instanceCount = _ref$instanceCount === void 0 ? 0 : _ref$instanceCount,\n          _ref$isInstanced = _ref.isInstanced,\n          isInstanced = _ref$isInstanced === void 0 ? instanceCount > 0 : _ref$isInstanced,\n          _ref$vertexArray = _ref.vertexArray,\n          vertexArray = _ref$vertexArray === void 0 ? null : _ref$vertexArray,\n          transformFeedback = _ref.transformFeedback,\n          framebuffer = _ref.framebuffer,\n          _ref$parameters = _ref.parameters,\n          parameters = _ref$parameters === void 0 ? {} : _ref$parameters,\n          uniforms = _ref.uniforms,\n          samplers = _ref.samplers;\n\n      if (uniforms || samplers) {\n        log.deprecated('Program.draw({uniforms})', 'Program.setUniforms(uniforms)')();\n        this.setUniforms(uniforms || {});\n      }\n\n      if (log.priority >= logPriority) {\n        var fb = framebuffer ? framebuffer.id : 'default';\n        var message = \"mode=\".concat(getKey(this.gl, drawMode), \" verts=\").concat(vertexCount, \" \") + \"instances=\".concat(instanceCount, \" indexType=\").concat(getKey(this.gl, indexType), \" \") + \"isInstanced=\".concat(isInstanced, \" isIndexed=\").concat(isIndexed, \" \") + \"Framebuffer=\".concat(fb);\n        log.log(logPriority, message)();\n      }\n\n      assert(vertexArray);\n      this.gl.useProgram(this.handle);\n\n      if (!this._areTexturesRenderable() || vertexCount === 0 || isInstanced && instanceCount === 0) {\n        return false;\n      }\n\n      vertexArray.bindForDraw(vertexCount, instanceCount, function () {\n        if (framebuffer !== undefined) {\n          parameters = Object.assign({}, parameters, {\n            framebuffer: framebuffer\n          });\n        }\n\n        if (transformFeedback) {\n          var primitiveMode = getPrimitiveDrawMode(drawMode);\n          transformFeedback.begin(primitiveMode);\n        }\n\n        _this2._bindTextures();\n\n        withParameters(_this2.gl, parameters, function () {\n          if (isIndexed && isInstanced) {\n            _this2.gl2.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n          } else if (isIndexed && isWebGL2(_this2.gl) && !isNaN(start) && !isNaN(end)) {\n            _this2.gl2.drawRangeElements(drawMode, start, end, vertexCount, indexType, offset);\n          } else if (isIndexed) {\n            _this2.gl.drawElements(drawMode, vertexCount, indexType, offset);\n          } else if (isInstanced) {\n            _this2.gl2.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n          } else {\n            _this2.gl.drawArrays(drawMode, offset, vertexCount);\n          }\n        });\n\n        if (transformFeedback) {\n          transformFeedback.end();\n        }\n      });\n      return true;\n    }\n  }, {\n    key: \"setUniforms\",\n    value: function setUniforms() {\n      var uniforms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (log.priority >= 2) {\n        checkUniformValues(uniforms, this.id, this._uniformSetters);\n      }\n\n      this.gl.useProgram(this.handle);\n\n      for (var uniformName in uniforms) {\n        var uniform = uniforms[uniformName];\n        var uniformSetter = this._uniformSetters[uniformName];\n\n        if (uniformSetter) {\n          var value = uniform;\n          var textureUpdate = false;\n\n          if (value instanceof Framebuffer) {\n            value = value.texture;\n          }\n\n          if (value instanceof Texture) {\n            textureUpdate = this.uniforms[uniformName] !== uniform;\n\n            if (textureUpdate) {\n              if (uniformSetter.textureIndex === undefined) {\n                uniformSetter.textureIndex = this._textureIndexCounter++;\n              }\n\n              var texture = value;\n              var textureIndex = uniformSetter.textureIndex;\n              texture.bind(textureIndex);\n              value = textureIndex;\n              this._textureUniforms[uniformName] = texture;\n            } else {\n              value = uniformSetter.textureIndex;\n            }\n          } else if (this._textureUniforms[uniformName]) {\n            delete this._textureUniforms[uniformName];\n          }\n\n          if (uniformSetter(value) || textureUpdate) {\n            copyUniform(this.uniforms, uniformName, uniform);\n          }\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_areTexturesRenderable\",\n    value: function _areTexturesRenderable() {\n      var texturesRenderable = true;\n\n      for (var uniformName in this._textureUniforms) {\n        var texture = this._textureUniforms[uniformName];\n        texture.update();\n        texturesRenderable = texturesRenderable && texture.loaded;\n      }\n\n      return texturesRenderable;\n    }\n  }, {\n    key: \"_bindTextures\",\n    value: function _bindTextures() {\n      for (var uniformName in this._textureUniforms) {\n        var textureIndex = this._uniformSetters[uniformName].textureIndex;\n\n        this._textureUniforms[uniformName].bind(textureIndex);\n      }\n    }\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return this.gl.createProgram();\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      this.gl.deleteProgram(this.handle);\n    }\n  }, {\n    key: \"_getOptionsFromHandle\",\n    value: function _getOptionsFromHandle(handle) {\n      var shaderHandles = this.gl.getAttachedShaders(handle);\n      var opts = {};\n\n      var _iterator = _createForOfIteratorHelper(shaderHandles),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var shaderHandle = _step.value;\n          var type = this.gl.getShaderParameter(this.handle, 35663);\n\n          switch (type) {\n            case 35633:\n              opts.vs = new VertexShader({\n                handle: shaderHandle\n              });\n              break;\n\n            case 35632:\n              opts.fs = new FragmentShader({\n                handle: shaderHandle\n              });\n              break;\n\n            default:\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return opts;\n    }\n  }, {\n    key: \"_getParameter\",\n    value: function _getParameter(pname) {\n      return this.gl.getProgramParameter(this.handle, pname);\n    }\n  }, {\n    key: \"_setId\",\n    value: function _setId(id) {\n      if (!id) {\n        var programName = this._getName();\n\n        this.id = uid(programName);\n      }\n    }\n  }, {\n    key: \"_getName\",\n    value: function _getName() {\n      var programName = this.vs.getName() || this.fs.getName();\n      programName = programName.replace(/shader/i, '');\n      programName = programName ? \"\".concat(programName, \"-program\") : 'program';\n      return programName;\n    }\n  }, {\n    key: \"_compileAndLink\",\n    value: function _compileAndLink() {\n      var gl = this.gl;\n      gl.attachShader(this.handle, this.vs.handle);\n      gl.attachShader(this.handle, this.fs.handle);\n      log.time(LOG_PROGRAM_PERF_PRIORITY, \"linkProgram for \".concat(this._getName()))();\n      gl.linkProgram(this.handle);\n      log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, \"linkProgram for \".concat(this._getName()))();\n\n      if (gl.debug || log.level > 0) {\n        var linked = gl.getProgramParameter(this.handle, 35714);\n\n        if (!linked) {\n          throw new Error(\"Error linking: \".concat(gl.getProgramInfoLog(this.handle)));\n        }\n\n        gl.validateProgram(this.handle);\n        var validated = gl.getProgramParameter(this.handle, 35715);\n\n        if (!validated) {\n          throw new Error(\"Error validating: \".concat(gl.getProgramInfoLog(this.handle)));\n        }\n      }\n    }\n  }, {\n    key: \"_readUniformLocationsFromLinkedProgram\",\n    value: function _readUniformLocationsFromLinkedProgram() {\n      var gl = this.gl;\n      this._uniformSetters = {};\n      this._uniformCount = this._getParameter(35718);\n\n      for (var i = 0; i < this._uniformCount; i++) {\n        var info = this.gl.getActiveUniform(this.handle, i);\n\n        var _parseUniformName = parseUniformName(info.name),\n            name = _parseUniformName.name;\n\n        var location = gl.getUniformLocation(this.handle, name);\n        this._uniformSetters[name] = getUniformSetter(gl, location, info);\n\n        if (info.size > 1) {\n          for (var l = 0; l < info.size; l++) {\n            location = gl.getUniformLocation(this.handle, \"\".concat(name, \"[\").concat(l, \"]\"));\n            this._uniformSetters[\"\".concat(name, \"[\").concat(l, \"]\")] = getUniformSetter(gl, location, info);\n          }\n        }\n      }\n\n      this._textureIndexCounter = 0;\n    }\n  }, {\n    key: \"getActiveUniforms\",\n    value: function getActiveUniforms(uniformIndices, pname) {\n      return this.gl2.getActiveUniforms(this.handle, uniformIndices, pname);\n    }\n  }, {\n    key: \"getUniformBlockIndex\",\n    value: function getUniformBlockIndex(blockName) {\n      return this.gl2.getUniformBlockIndex(this.handle, blockName);\n    }\n  }, {\n    key: \"getActiveUniformBlockParameter\",\n    value: function getActiveUniformBlockParameter(blockIndex, pname) {\n      return this.gl2.getActiveUniformBlockParameter(this.handle, blockIndex, pname);\n    }\n  }, {\n    key: \"uniformBlockBinding\",\n    value: function uniformBlockBinding(blockIndex, blockBinding) {\n      this.gl2.uniformBlockBinding(this.handle, blockIndex, blockBinding);\n    }\n  }]);\n\n  return Program;\n}(Resource);\n\nexport { Program as default };","map":{"version":3,"mappings":"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","names":["Resource","Texture","Framebuffer","parseUniformName","getUniformSetter","VertexShader","FragmentShader","ProgramConfiguration","copyUniform","checkUniformValues","isWebGL2","assertWebGL2Context","withParameters","log","getKey","getPrimitiveDrawMode","assert","uid","LOG_PROGRAM_PERF_PRIORITY","GL_SEPARATE_ATTRIBS","V6_DEPRECATED_METHODS","Program","constructor","gl","props","stubRemovedMethods","_isCached","initialize","Object","seal","_setId","id","hash","vs","fs","varyings","bufferMode","source","uniforms","_textureUniforms","length","gl2","transformFeedbackVaryings","handle","_compileAndLink","_readUniformLocationsFromLinkedProgram","configuration","setProps","delete","options","setUniforms","draw","logPriority","drawMode","vertexCount","offset","start","end","isIndexed","indexType","instanceCount","isInstanced","vertexArray","transformFeedback","framebuffer","parameters","samplers","deprecated","priority","fb","message","useProgram","_areTexturesRenderable","bindForDraw","undefined","assign","primitiveMode","begin","_bindTextures","drawElementsInstanced","isNaN","drawRangeElements","drawElements","drawArraysInstanced","drawArrays","_uniformSetters","uniformName","uniform","uniformSetter","value","textureUpdate","texture","textureIndex","_textureIndexCounter","bind","texturesRenderable","update","loaded","_createHandle","createProgram","_deleteHandle","deleteProgram","_getOptionsFromHandle","shaderHandles","getAttachedShaders","opts","shaderHandle","type","getShaderParameter","_getParameter","pname","getProgramParameter","programName","_getName","getName","replace","attachShader","time","linkProgram","timeEnd","debug","level","linked","Error","getProgramInfoLog","validateProgram","validated","_uniformCount","i","info","getActiveUniform","name","location","getUniformLocation","size","l","getActiveUniforms","uniformIndices","getUniformBlockIndex","blockName","getActiveUniformBlockParameter","blockIndex","uniformBlockBinding","blockBinding"],"sources":["../../../src/classes/program.js"],"sourcesContent":["import GL from '@luma.gl/constants';\n\nimport Resource from './resource';\nimport Texture from './texture';\nimport Framebuffer from './framebuffer';\nimport {parseUniformName, getUniformSetter} from './uniforms';\nimport {VertexShader, FragmentShader} from './shader';\nimport ProgramConfiguration from './program-configuration';\nimport {copyUniform, checkUniformValues} from './uniforms';\n\nimport {isWebGL2, assertWebGL2Context, withParameters, log} from '@luma.gl/gltools';\nimport {getKey} from '../webgl-utils/constants-to-keys';\nimport {getPrimitiveDrawMode} from '../webgl-utils/attribute-utils';\nimport {assert} from '../utils/assert';\nimport {uid} from '../utils/utils';\n\nconst LOG_PROGRAM_PERF_PRIORITY = 4;\n\nconst GL_SEPARATE_ATTRIBS = 0x8c8d;\n\nconst V6_DEPRECATED_METHODS = [\n  'setVertexArray',\n  'setAttributes',\n  'setBuffers',\n  'unsetBuffers',\n\n  'use',\n  'getUniformCount',\n  'getUniformInfo',\n  'getUniformLocation',\n  'getUniformValue',\n\n  'getVarying',\n  'getFragDataLocation',\n  'getAttachedShaders',\n  'getAttributeCount',\n  'getAttributeLocation',\n  'getAttributeInfo'\n];\n\nexport default class Program extends Resource {\n  constructor(gl, props = {}) {\n    super(gl, props);\n\n    this.stubRemovedMethods('Program', 'v6.0', V6_DEPRECATED_METHODS);\n\n    // Experimental flag to avoid deleting Program object while it is cached\n    this._isCached = false;\n\n    this.initialize(props);\n\n    Object.seal(this);\n\n    this._setId(props.id);\n  }\n\n  initialize(props = {}) {\n    const {hash, vs, fs, varyings, bufferMode = GL_SEPARATE_ATTRIBS} = props;\n\n    this.hash = hash || ''; // Used by ProgramManager\n\n    // Create shaders if needed\n    this.vs =\n      typeof vs === 'string' ? new VertexShader(this.gl, {id: `${props.id}-vs`, source: vs}) : vs;\n    this.fs =\n      typeof fs === 'string' ? new FragmentShader(this.gl, {id: `${props.id}-fs`, source: fs}) : fs;\n    assert(this.vs instanceof VertexShader);\n    assert(this.fs instanceof FragmentShader);\n\n    // uniforms\n    this.uniforms = {};\n\n    this._textureUniforms = {};\n\n    // Setup varyings if supplied\n    if (varyings && varyings.length > 0) {\n      assertWebGL2Context(this.gl);\n      this.varyings = varyings;\n      this.gl2.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n    }\n\n    this._compileAndLink();\n    this._readUniformLocationsFromLinkedProgram();\n    this.configuration = new ProgramConfiguration(this);\n\n    return this.setProps(props);\n  }\n\n  delete(options = {}) {\n    if (this._isCached) {\n      // This object is cached, do not delete\n      return this;\n    }\n    return super.delete(options);\n  }\n\n  setProps(props) {\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms);\n    }\n    return this;\n  }\n\n  // A good thing about the WebGL API is that there are so many ways to draw things ;)\n  // This function unifies those ways into a single call using common parameters with sane defaults\n  draw({\n    logPriority, // Probe log priority, enables Model to do more integrated logging\n\n    drawMode = GL.TRIANGLES,\n    vertexCount,\n    offset = 0,\n    start,\n    end,\n    isIndexed = false,\n    indexType = GL.UNSIGNED_SHORT,\n    instanceCount = 0,\n    isInstanced = instanceCount > 0,\n\n    vertexArray = null,\n    transformFeedback,\n    framebuffer,\n    parameters = {},\n\n    // Deprecated\n    uniforms,\n    samplers\n  }) {\n    if (uniforms || samplers) {\n      // DEPRECATED: v7.0 (deprecated earlier but warning not properly implemented)\n      log.deprecated('Program.draw({uniforms})', 'Program.setUniforms(uniforms)')();\n      this.setUniforms(uniforms || {});\n    }\n\n    if (log.priority >= logPriority) {\n      const fb = framebuffer ? framebuffer.id : 'default';\n      const message =\n        `mode=${getKey(this.gl, drawMode)} verts=${vertexCount} ` +\n        `instances=${instanceCount} indexType=${getKey(this.gl, indexType)} ` +\n        `isInstanced=${isInstanced} isIndexed=${isIndexed} ` +\n        `Framebuffer=${fb}`;\n      log.log(logPriority, message)();\n    }\n\n    // TODO - move vertex array binding and transform feedback binding to withParameters?\n    assert(vertexArray);\n\n    this.gl.useProgram(this.handle);\n\n    if (\n      // Note: async textures set as uniforms might still be loading.\n      // Now that all uniforms have been updated, check if any texture\n      // in the uniforms is not yet initialized, then we don't draw\n      !this._areTexturesRenderable() ||\n      // Avoid WebGL draw call when not rendering any data\n      vertexCount === 0 ||\n      (isInstanced && instanceCount === 0)\n    ) {\n      return false;\n    }\n\n    vertexArray.bindForDraw(vertexCount, instanceCount, () => {\n      if (framebuffer !== undefined) {\n        parameters = Object.assign({}, parameters, {framebuffer});\n      }\n\n      if (transformFeedback) {\n        const primitiveMode = getPrimitiveDrawMode(drawMode);\n        transformFeedback.begin(primitiveMode);\n      }\n\n      this._bindTextures();\n\n      withParameters(this.gl, parameters, () => {\n        // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension\n        if (isIndexed && isInstanced) {\n          this.gl2.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n        } else if (isIndexed && isWebGL2(this.gl) && !isNaN(start) && !isNaN(end)) {\n          this.gl2.drawRangeElements(drawMode, start, end, vertexCount, indexType, offset);\n        } else if (isIndexed) {\n          this.gl.drawElements(drawMode, vertexCount, indexType, offset);\n        } else if (isInstanced) {\n          this.gl2.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n        } else {\n          this.gl.drawArrays(drawMode, offset, vertexCount);\n        }\n      });\n\n      if (transformFeedback) {\n        transformFeedback.end();\n      }\n    });\n\n    return true;\n  }\n\n  setUniforms(uniforms = {}) {\n    if (log.priority >= 2) {\n      checkUniformValues(uniforms, this.id, this._uniformSetters);\n    }\n\n    this.gl.useProgram(this.handle);\n\n    for (const uniformName in uniforms) {\n      const uniform = uniforms[uniformName];\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter) {\n        let value = uniform;\n        let textureUpdate = false;\n\n        if (value instanceof Framebuffer) {\n          value = value.texture;\n        }\n        if (value instanceof Texture) {\n          textureUpdate = this.uniforms[uniformName] !== uniform;\n\n          if (textureUpdate) {\n            // eslint-disable-next-line max-depth\n            if (uniformSetter.textureIndex === undefined) {\n              uniformSetter.textureIndex = this._textureIndexCounter++;\n            }\n\n            // Bind texture to index\n            const texture = value;\n            const {textureIndex} = uniformSetter;\n\n            texture.bind(textureIndex);\n            value = textureIndex;\n\n            this._textureUniforms[uniformName] = texture;\n          } else {\n            value = uniformSetter.textureIndex;\n          }\n        } else if (this._textureUniforms[uniformName]) {\n          delete this._textureUniforms[uniformName];\n        }\n\n        // NOTE(Tarek): uniformSetter returns whether\n        //   value had to be updated or not.\n        if (uniformSetter(value) || textureUpdate) {\n          copyUniform(this.uniforms, uniformName, uniform);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  // Checks if all texture-values uniforms are renderable (i.e. loaded)\n  // Update a texture if needed (e.g. from video)\n  // Note: This is currently done before every draw call\n  _areTexturesRenderable() {\n    let texturesRenderable = true;\n\n    for (const uniformName in this._textureUniforms) {\n      const texture = this._textureUniforms[uniformName];\n      texture.update();\n      texturesRenderable = texturesRenderable && texture.loaded;\n    }\n\n    return texturesRenderable;\n  }\n\n  // Binds textures\n  // Note: This is currently done before every draw call\n  _bindTextures() {\n    for (const uniformName in this._textureUniforms) {\n      const textureIndex = this._uniformSetters[uniformName].textureIndex;\n      this._textureUniforms[uniformName].bind(textureIndex);\n    }\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createProgram();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteProgram(this.handle);\n  }\n\n  // Extract opts needed to initialize a `Program` from an independently created WebGLProgram handle\n  _getOptionsFromHandle(handle) {\n    const shaderHandles = this.gl.getAttachedShaders(handle);\n    const opts = {};\n    for (const shaderHandle of shaderHandles) {\n      const type = this.gl.getShaderParameter(this.handle, GL.SHADER_TYPE);\n      switch (type) {\n        case GL.VERTEX_SHADER:\n          // @ts-ignore\n          opts.vs = new VertexShader({handle: shaderHandle});\n          break;\n        case GL.FRAGMENT_SHADER:\n          // @ts-ignore\n          opts.fs = new FragmentShader({handle: shaderHandle});\n          break;\n        default:\n      }\n    }\n    return opts;\n  }\n\n  _getParameter(pname) {\n    return this.gl.getProgramParameter(this.handle, pname);\n  }\n\n  // If program is not named, name it after shader names\n  // TODO - this.id will already have been initialized\n  _setId(id) {\n    if (!id) {\n      const programName = this._getName();\n      this.id = uid(programName);\n    }\n  }\n\n  // Generate a default name for the program based on names of the shaders\n  _getName() {\n    let programName = this.vs.getName() || this.fs.getName();\n    programName = programName.replace(/shader/i, '');\n    programName = programName ? `${programName}-program` : 'program';\n    return programName;\n  }\n\n  _compileAndLink() {\n    const {gl} = this;\n    gl.attachShader(this.handle, this.vs.handle);\n    gl.attachShader(this.handle, this.fs.handle);\n    log.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n    gl.linkProgram(this.handle);\n    log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n\n    // Avoid checking program linking error in production\n    // @ts-ignore\n    if (gl.debug || log.level > 0) {\n      const linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n      if (!linked) {\n        throw new Error(`Error linking: ${gl.getProgramInfoLog(this.handle)}`);\n      }\n\n      gl.validateProgram(this.handle);\n      const validated = gl.getProgramParameter(this.handle, gl.VALIDATE_STATUS);\n      if (!validated) {\n        throw new Error(`Error validating: ${gl.getProgramInfoLog(this.handle)}`);\n      }\n    }\n  }\n\n  // query uniform locations and build name to setter map.\n  // TODO - This overlaps with ProgramConfiguration?\n  _readUniformLocationsFromLinkedProgram() {\n    const {gl} = this;\n    this._uniformSetters = {};\n    this._uniformCount = this._getParameter(GL.ACTIVE_UNIFORMS);\n    for (let i = 0; i < this._uniformCount; i++) {\n      const info = this.gl.getActiveUniform(this.handle, i);\n      const {name} = parseUniformName(info.name);\n      let location = gl.getUniformLocation(this.handle, name);\n      this._uniformSetters[name] = getUniformSetter(gl, location, info);\n      if (info.size > 1) {\n        for (let l = 0; l < info.size; l++) {\n          location = gl.getUniformLocation(this.handle, `${name}[${l}]`);\n          this._uniformSetters[`${name}[${l}]`] = getUniformSetter(gl, location, info);\n        }\n      }\n    }\n    this._textureIndexCounter = 0;\n  }\n\n  // TO BE REMOVED in v7?\n\n  // Rretrieves information about active uniforms identifed by their indices (`uniformIndices`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniforms\n  getActiveUniforms(uniformIndices, pname) {\n    return this.gl2.getActiveUniforms(this.handle, uniformIndices, pname);\n  }\n\n  // Retrieves the index of a uniform block\n  getUniformBlockIndex(blockName) {\n    return this.gl2.getUniformBlockIndex(this.handle, blockName);\n  }\n\n  // Retrieves information about an active uniform block (`blockIndex`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter\n  getActiveUniformBlockParameter(blockIndex, pname) {\n    return this.gl2.getActiveUniformBlockParameter(this.handle, blockIndex, pname);\n  }\n\n  // Binds a uniform block (`blockIndex`) to a specific binding point (`blockBinding`)\n  uniformBlockBinding(blockIndex, blockBinding) {\n    this.gl2.uniformBlockBinding(this.handle, blockIndex, blockBinding);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}