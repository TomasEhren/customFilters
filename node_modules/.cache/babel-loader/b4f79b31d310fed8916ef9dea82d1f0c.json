{"ast":null,"code":"import _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { fetchFile } from '@loaders.gl/core';\nvar SUBTREE_FILE_MAGIC = 0x74627573;\nvar SUBTREE_FILE_VERSION = 1;\nexport default function parse3DTilesSubtree(_x) {\n  return _parse3DTilesSubtree.apply(this, arguments);\n}\n\nfunction _parse3DTilesSubtree() {\n  _parse3DTilesSubtree = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n    var magic, version, jsonByteLength, stringAttribute, textDecoder, string, subtree, binaryByteLength, internalBinaryBuffer;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            magic = new Uint32Array(data.slice(0, 4));\n\n            if (!(magic[0] !== SUBTREE_FILE_MAGIC)) {\n              _context.next = 3;\n              break;\n            }\n\n            throw new Error('Wrong subtree file magic number');\n\n          case 3:\n            version = new Uint32Array(data.slice(4, 8));\n\n            if (!(version[0] !== SUBTREE_FILE_VERSION)) {\n              _context.next = 6;\n              break;\n            }\n\n            throw new Error('Wrong subtree file verson, must be 1');\n\n          case 6:\n            jsonByteLength = parseUint64Value(data.slice(8, 16));\n            stringAttribute = new Uint8Array(data, 24, jsonByteLength);\n            textDecoder = new TextDecoder('utf8');\n            string = textDecoder.decode(stringAttribute);\n            subtree = JSON.parse(string);\n            binaryByteLength = parseUint64Value(data.slice(16, 24));\n            internalBinaryBuffer = new ArrayBuffer(0);\n\n            if (binaryByteLength) {\n              internalBinaryBuffer = data.slice(24 + jsonByteLength);\n            }\n\n            if (!('bufferView' in subtree.tileAvailability)) {\n              _context.next = 18;\n              break;\n            }\n\n            _context.next = 17;\n            return getExplicitBitstream(subtree, 'tileAvailability', internalBinaryBuffer);\n\n          case 17:\n            subtree.tileAvailability.explicitBitstream = _context.sent;\n\n          case 18:\n            if (!('bufferView' in subtree.contentAvailability)) {\n              _context.next = 22;\n              break;\n            }\n\n            _context.next = 21;\n            return getExplicitBitstream(subtree, 'contentAvailability', internalBinaryBuffer);\n\n          case 21:\n            subtree.contentAvailability.explicitBitstream = _context.sent;\n\n          case 22:\n            if (!('bufferView' in subtree.childSubtreeAvailability)) {\n              _context.next = 26;\n              break;\n            }\n\n            _context.next = 25;\n            return getExplicitBitstream(subtree, 'childSubtreeAvailability', internalBinaryBuffer);\n\n          case 25:\n            subtree.childSubtreeAvailability.explicitBitstream = _context.sent;\n\n          case 26:\n            return _context.abrupt(\"return\", subtree);\n\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parse3DTilesSubtree.apply(this, arguments);\n}\n\nfunction getExplicitBitstream(_x2, _x3, _x4) {\n  return _getExplicitBitstream.apply(this, arguments);\n}\n\nfunction _getExplicitBitstream() {\n  _getExplicitBitstream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(subtree, name, internalBinaryBuffer) {\n    var bufferViewIndex, bufferView, buffer, response, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            bufferViewIndex = subtree[name].bufferView;\n            bufferView = subtree.bufferViews[bufferViewIndex];\n            buffer = subtree.buffers[bufferView.buffer];\n\n            if (!buffer.uri) {\n              _context2.next = 11;\n              break;\n            }\n\n            _context2.next = 6;\n            return fetchFile(buffer.uri);\n\n          case 6:\n            response = _context2.sent;\n            _context2.next = 9;\n            return response.arrayBuffer();\n\n          case 9:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", new Uint8Array(data, bufferView.byteOffset, bufferView.byteLength));\n\n          case 11:\n            return _context2.abrupt(\"return\", new Uint8Array(internalBinaryBuffer, bufferView.byteOffset, bufferView.byteLength));\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getExplicitBitstream.apply(this, arguments);\n}\n\nfunction parseUint64Value(buffer) {\n  var dataView = new DataView(buffer);\n  var left = dataView.getUint32(0, true);\n  var right = dataView.getUint32(4, true);\n  return left + Math.pow(2, 32) * right;\n}","map":{"version":3,"mappings":";;AACA,SAAQA,SAAR,QAAwB,kBAAxB;AAEA,IAAMC,kBAAkB,GAAG,UAA3B;AACA,IAAMC,oBAAoB,GAAG,CAA7B;AASA,wBAA8BC,mBAA9B;EAAA;AAAA;;;kFAAe,iBAAmCC,IAAnC;IAAA;IAAA;MAAA;QAAA;UAAA;YACPC,KADO,GACC,IAAIC,WAAJ,CAAgBF,IAAI,CAACG,KAALH,CAAW,CAAXA,EAAc,CAAdA,CAAhB,CADD;;YAAA,MAGTC,KAAK,CAAC,CAAD,CAALA,KAAaJ,kBAHJ;cAAA;cAAA;YAAA;;YAAA,MAIL,IAAIO,KAAJ,CAAU,iCAAV,CAJK;;UAAA;YAOPC,OAPO,GAOG,IAAIH,WAAJ,CAAgBF,IAAI,CAACG,KAALH,CAAW,CAAXA,EAAc,CAAdA,CAAhB,CAPH;;YAAA,MASTK,OAAO,CAAC,CAAD,CAAPA,KAAeP,oBATN;cAAA;cAAA;YAAA;;YAAA,MAUL,IAAIM,KAAJ,CAAU,sCAAV,CAVK;;UAAA;YAaPE,cAbO,GAaUC,gBAAgB,CAACP,IAAI,CAACG,KAALH,CAAW,CAAXA,EAAc,EAAdA,CAAD,CAb1B;YAcPQ,eAdO,GAcW,IAAIC,UAAJ,CAAeT,IAAf,EAAqB,EAArB,EAAyBM,cAAzB,CAdX;YAgBPI,WAhBO,GAgBO,IAAIC,WAAJ,CAAgB,MAAhB,CAhBP;YAiBPC,MAjBO,GAiBEF,WAAW,CAACG,MAAZH,CAAmBF,eAAnBE,CAjBF;YAkBPI,OAlBO,GAkBGC,IAAI,CAACC,KAALD,CAAWH,MAAXG,CAlBH;YAoBPE,gBApBO,GAoBYV,gBAAgB,CAACP,IAAI,CAACG,KAALH,CAAW,EAAXA,EAAe,EAAfA,CAAD,CApB5B;YAqBTkB,oBArBS,GAqBc,IAAIC,WAAJ,CAAgB,CAAhB,CArBd;;YAuBb,IAAIF,gBAAJ,EAAsB;cACpBC,oBAAoB,GAAGlB,IAAI,CAACG,KAALH,CAAW,KAAKM,cAAhBN,CAAvBkB;YACD;;YAzBY,MA2BT,gBAAgBJ,OAAO,CAACM,gBA3Bf;cAAA;cAAA;YAAA;;YAAA;YAAA,OA4BwCC,oBAAoB,CACrEP,OADqE,EAErE,kBAFqE,EAGrEI,oBAHqE,CA5B5D;;UAAA;YA4BXJ,OAAO,CAACM,gBAARN,CAAyBQ,iBA5Bd;;UAAA;YAAA,MAmCT,gBAAgBR,OAAO,CAACS,mBAnCf;cAAA;cAAA;YAAA;;YAAA;YAAA,OAoC2CF,oBAAoB,CACxEP,OADwE,EAExE,qBAFwE,EAGxEI,oBAHwE,CApC/D;;UAAA;YAoCXJ,OAAO,CAACS,mBAART,CAA4BQ,iBApCjB;;UAAA;YAAA,MA2CT,gBAAgBR,OAAO,CAACU,wBA3Cf;cAAA;cAAA;YAAA;;YAAA;YAAA,OA4CgDH,oBAAoB,CAC7EP,OAD6E,EAE7E,0BAF6E,EAG7EI,oBAH6E,CA5CpE;;UAAA;YA4CXJ,OAAO,CAACU,wBAARV,CAAiCQ,iBA5CtB;;UAAA;YAAA,iCAmDNR,OAnDM;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;SA4DAO,oB;;;;;mFAAf,kBACEP,OADF,EAEEW,IAFF,EAGEP,oBAHF;IAAA;IAAA;MAAA;QAAA;UAAA;YAKQQ,eALR,GAK0BZ,OAAO,CAACW,IAAD,CAAPX,CAAca,UALxC;YAMQA,UANR,GAMqBb,OAAO,CAACc,WAARd,CAAoBY,eAApBZ,CANrB;YAOQe,MAPR,GAOiBf,OAAO,CAACgB,OAARhB,CAAgBa,UAAU,CAACE,MAA3Bf,CAPjB;;YAAA,KAUMe,MAAM,CAACE,GAVb;cAAA;cAAA;YAAA;;YAAA;YAAA,OAW2BnC,SAAS,CAACiC,MAAM,CAACE,GAAR,CAXpC;;UAAA;YAWUC,QAXV;YAAA;YAAA,OAYuBA,QAAQ,CAACC,WAATD,EAZvB;;UAAA;YAYUhC,IAZV;YAAA,kCAcW,IAAIS,UAAJ,CAAeT,IAAf,EAAqB2B,UAAU,CAACO,UAAhC,EAA4CP,UAAU,CAACQ,UAAvD,CAdX;;UAAA;YAAA,kCAiBS,IAAI1B,UAAJ,CAAeS,oBAAf,EAAqCS,UAAU,CAACO,UAAhD,EAA4DP,UAAU,CAACQ,UAAvE,CAjBT;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAyBA,SAAS5B,gBAAT,CAA0BsB,MAA1B,EAAuD;EACrD,IAAMO,QAAQ,GAAG,IAAIC,QAAJ,CAAaR,MAAb,CAAjB;EACA,IAAMS,IAAI,GAAGF,QAAQ,CAACG,SAATH,CAAmB,CAAnBA,EAAsB,IAAtBA,CAAb;EACA,IAAMI,KAAK,GAAGJ,QAAQ,CAACG,SAATH,CAAmB,CAAnBA,EAAsB,IAAtBA,CAAd;EAEA,OAAOE,IAAI,GAAG,YAAK,EAAL,IAAUE,KAAxB;AACD","names":["fetchFile","SUBTREE_FILE_MAGIC","SUBTREE_FILE_VERSION","parse3DTilesSubtree","data","magic","Uint32Array","slice","Error","version","jsonByteLength","parseUint64Value","stringAttribute","Uint8Array","textDecoder","TextDecoder","string","decode","subtree","JSON","parse","binaryByteLength","internalBinaryBuffer","ArrayBuffer","tileAvailability","getExplicitBitstream","explicitBitstream","contentAvailability","childSubtreeAvailability","name","bufferViewIndex","bufferView","bufferViews","buffer","buffers","uri","response","arrayBuffer","byteOffset","byteLength","dataView","DataView","left","getUint32","right"],"sources":["../../../../../src/lib/parsers/helpers/parse-3d-tile-subtree.ts"],"sourcesContent":["import type {Subtree, ExplicitBitstream} from '../../../types';\nimport {fetchFile} from '@loaders.gl/core';\n\nconst SUBTREE_FILE_MAGIC = 0x74627573;\nconst SUBTREE_FILE_VERSION = 1;\n\n/**\n * Parse subtree file\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_implicit_tiling#subtree-file-format\n * @param data\n * @returns\n */\n// eslint-disable-next-line max-statements\nexport default async function parse3DTilesSubtree(data: ArrayBuffer): Promise<Subtree> {\n  const magic = new Uint32Array(data.slice(0, 4));\n\n  if (magic[0] !== SUBTREE_FILE_MAGIC) {\n    throw new Error('Wrong subtree file magic number');\n  }\n\n  const version = new Uint32Array(data.slice(4, 8));\n\n  if (version[0] !== SUBTREE_FILE_VERSION) {\n    throw new Error('Wrong subtree file verson, must be 1');\n  }\n\n  const jsonByteLength = parseUint64Value(data.slice(8, 16));\n  const stringAttribute = new Uint8Array(data, 24, jsonByteLength);\n\n  const textDecoder = new TextDecoder('utf8');\n  const string = textDecoder.decode(stringAttribute);\n  const subtree = JSON.parse(string);\n\n  const binaryByteLength = parseUint64Value(data.slice(16, 24));\n  let internalBinaryBuffer = new ArrayBuffer(0);\n\n  if (binaryByteLength) {\n    internalBinaryBuffer = data.slice(24 + jsonByteLength);\n  }\n\n  if ('bufferView' in subtree.tileAvailability) {\n    subtree.tileAvailability.explicitBitstream = await getExplicitBitstream(\n      subtree,\n      'tileAvailability',\n      internalBinaryBuffer\n    );\n  }\n\n  if ('bufferView' in subtree.contentAvailability) {\n    subtree.contentAvailability.explicitBitstream = await getExplicitBitstream(\n      subtree,\n      'contentAvailability',\n      internalBinaryBuffer\n    );\n  }\n\n  if ('bufferView' in subtree.childSubtreeAvailability) {\n    subtree.childSubtreeAvailability.explicitBitstream = await getExplicitBitstream(\n      subtree,\n      'childSubtreeAvailability',\n      internalBinaryBuffer\n    );\n  }\n\n  return subtree;\n}\n\n/**\n * Get explicit bitstream for subtree availability data.\n * @param subtree\n * @param name\n * @param internalBinaryBuffer\n */\nasync function getExplicitBitstream(\n  subtree: Subtree,\n  name: string,\n  internalBinaryBuffer: ArrayBuffer\n): Promise<ExplicitBitstream> {\n  const bufferViewIndex = subtree[name].bufferView;\n  const bufferView = subtree.bufferViews[bufferViewIndex];\n  const buffer = subtree.buffers[bufferView.buffer];\n\n  // External bitstream loading\n  if (buffer.uri) {\n    const response = await fetchFile(buffer.uri);\n    const data = await response.arrayBuffer();\n    // Return view of bitstream.\n    return new Uint8Array(data, bufferView.byteOffset, bufferView.byteLength);\n  }\n  // Return view of bitstream.\n  return new Uint8Array(internalBinaryBuffer, bufferView.byteOffset, bufferView.byteLength);\n}\n\n/**\n * Parse buffer to return uint64 value\n * @param buffer\n * @returns 64-bit value until precision is lost after Number.MAX_SAFE_INTEGER\n */\nfunction parseUint64Value(buffer: ArrayBuffer): number {\n  const dataView = new DataView(buffer);\n  const left = dataView.getUint32(0, true);\n  const right = dataView.getUint32(4, true);\n  // combine the two 32-bit values\n  return left + 2 ** 32 * right;\n}\n"]},"metadata":{},"sourceType":"module"}