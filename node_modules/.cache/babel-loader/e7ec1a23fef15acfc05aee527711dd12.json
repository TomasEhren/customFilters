{"ast":null,"code":"import _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { isBlob } from '../../javascript-utils/is-type';\nimport { isLoaderObject } from '../loader-utils/normalize-loader';\nimport { getFetchFunction } from '../loader-utils/option-utils';\nimport { parse } from './parse';\nexport function load(_x, _x2, _x3, _x4) {\n  return _load.apply(this, arguments);\n}\n\nfunction _load() {\n  _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, loaders, options, context) {\n    var fetch, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n              context = undefined;\n              options = loaders;\n              loaders = undefined;\n            }\n\n            fetch = getFetchFunction(options);\n            data = url;\n\n            if (!(typeof url === 'string')) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 6;\n            return fetch(url);\n\n          case 6:\n            data = _context.sent;\n\n          case 7:\n            if (!isBlob(url)) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 10;\n            return fetch(url);\n\n          case 10:\n            data = _context.sent;\n\n          case 11:\n            _context.next = 13;\n            return parse(data, loaders, options);\n\n          case 13:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _load.apply(this, arguments);\n}","map":{"version":3,"mappings":";;AACA,SAAQA,MAAR,QAAqB,gCAArB;AACA,SAAQC,cAAR,QAA6B,kCAA7B;AACA,SAAQC,gBAAR,QAA+B,8BAA/B;AAEA,SAAQC,KAAR,QAAoB,SAApB;AAYA,gBAAsBC,IAAtB;EAAA;AAAA;;;mEAAO,iBACLC,GADK,EAELC,OAFK,EAGLC,OAHK,EAILC,OAJK;IAAA;IAAA;MAAA;QAAA;UAAA;YAOL,IAAI,CAACC,KAAK,CAACC,OAAND,CAAcH,OAAdG,CAAD,IAA2B,CAACR,cAAc,CAACK,OAAD,CAA9C,EAAyD;cACvDE,OAAO,GAAGG,SAAVH;cACAD,OAAO,GAAGD,OAAVC;cACAD,OAAO,GAAGK,SAAVL;YACD;;YAGKM,KAdD,GAcSV,gBAAgB,CAACK,OAAD,CAdzB;YAiBDM,IAjBC,GAiBMR,GAjBN;;YAAA,MAmBD,OAAOA,GAAP,KAAe,QAnBd;cAAA;cAAA;YAAA;;YAAA;YAAA,OAoBUO,KAAK,CAACP,GAAD,CApBf;;UAAA;YAoBHQ,IApBG;;UAAA;YAAA,KAwBDb,MAAM,CAACK,GAAD,CAxBL;cAAA;cAAA;YAAA;;YAAA;YAAA,OA0BUO,KAAK,CAACP,GAAD,CA1Bf;;UAAA;YA0BHQ,IA1BG;;UAAA;YAAA;YAAA,OA8BQV,KAAK,CAACU,IAAD,EAAOP,OAAP,EAAgBC,OAAhB,CA9Bb;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","names":["isBlob","isLoaderObject","getFetchFunction","parse","load","url","loaders","options","context","Array","isArray","undefined","fetch","data"],"sources":["../../../../src/lib/api/load.ts"],"sourcesContent":["import type {DataType, Loader, LoaderContext, LoaderOptions} from '@loaders.gl/loader-utils';\nimport {isBlob} from '../../javascript-utils/is-type';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {getFetchFunction} from '../loader-utils/option-utils';\n\nimport {parse} from './parse';\n\n/**\n * Parses `data` using a specified loader\n * Note: Load does duplicate a lot of parse.\n * it can also call fetchFile on string urls, which `parse` won't do.\n * @param data\n * @param loaders\n * @param options\n * @param context\n */\n// implementation signature\nexport async function load(\n  url: string | DataType,\n  loaders?: Loader | Loader[] | LoaderOptions,\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<any> {\n  // Signature: load(url, options)\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined; // context not supported in short signature\n    options = loaders as LoaderOptions;\n    loaders = undefined;\n  }\n\n  // Select fetch function\n  const fetch = getFetchFunction(options);\n\n  // at this point, `url` could be already loaded binary data\n  let data = url;\n  // url is a string, fetch the url\n  if (typeof url === 'string') {\n    data = await fetch(url);\n    // URL is Blob or File, fetchFile handles it (alt: we could generate ObjectURL here)\n  }\n\n  if (isBlob(url)) {\n    // The fetch response object will contain blob.name\n    data = await fetch(url);\n  }\n\n  // Data is loaded (at least we have a `Response` object) so time to hand over to `parse`\n  return await parse(data, loaders, options);\n}\n"]},"metadata":{},"sourceType":"module"}