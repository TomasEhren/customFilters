{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SplitPolygonMode = void 0;\n\nvar _booleanPointInPolygon = _interopRequireDefault(require(\"@turf/boolean-point-in-polygon\"));\n\nvar _difference = _interopRequireDefault(require(\"@turf/difference\"));\n\nvar _buffer = _interopRequireDefault(require(\"@turf/buffer\"));\n\nvar _lineIntersect = _interopRequireDefault(require(\"@turf/line-intersect\"));\n\nvar _helpers = require(\"@turf/helpers\");\n\nvar _bearing = _interopRequireDefault(require(\"@turf/bearing\"));\n\nvar _distance = _interopRequireDefault(require(\"@turf/distance\"));\n\nvar _destination = _interopRequireDefault(require(\"@turf/destination\"));\n\nvar _polygonToLine = _interopRequireDefault(require(\"@turf/polygon-to-line\"));\n\nvar _nearestPointOnLine = _interopRequireDefault(require(\"@turf/nearest-point-on-line\"));\n\nvar _utils = require(\"../utils\");\n\nvar _geojsonEditMode = require(\"./geojson-edit-mode\");\n\nvar _immutableFeatureCollection = require(\"./immutable-feature-collection\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar SplitPolygonMode = /*#__PURE__*/function (_GeoJsonEditMode) {\n  _inherits(SplitPolygonMode, _GeoJsonEditMode);\n\n  var _super = _createSuper(SplitPolygonMode);\n\n  function SplitPolygonMode() {\n    _classCallCheck(this, SplitPolygonMode);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SplitPolygonMode, [{\n    key: \"calculateMapCoords\",\n    value: function calculateMapCoords(clickSequence, mapCoords, props) {\n      var modeConfig = props.modeConfig;\n\n      if (!modeConfig || !modeConfig.lock90Degree || !clickSequence.length) {\n        return mapCoords;\n      }\n\n      if (clickSequence.length === 1) {\n        // if first point is clicked, then find closest polygon point and build ~90deg vector\n        var firstPoint = clickSequence[0];\n        var selectedGeometry = this.getSelectedGeometry(props); // @ts-ignore\n\n        var feature = (0, _polygonToLine[\"default\"])(selectedGeometry);\n        var lines = feature.type === 'FeatureCollection' ? feature.features : [feature];\n        var minDistance = Number.MAX_SAFE_INTEGER;\n        var closestPoint = null; // If Multipolygon, then we should find nearest polygon line and stick split to it.\n\n        lines.forEach(function (line) {\n          var snapPoint = (0, _nearestPointOnLine[\"default\"])(line, firstPoint);\n          var distanceFromOrigin = (0, _distance[\"default\"])(snapPoint, firstPoint);\n\n          if (minDistance > distanceFromOrigin) {\n            minDistance = distanceFromOrigin;\n            closestPoint = snapPoint;\n          }\n        });\n\n        if (closestPoint) {\n          // closest point is used as 90degree entry to the polygon\n          var lastBearing = (0, _bearing[\"default\"])(firstPoint, closestPoint);\n          var currentDistance = (0, _distance[\"default\"])(firstPoint, mapCoords, {\n            units: 'meters'\n          });\n          return (0, _destination[\"default\"])(firstPoint, currentDistance, lastBearing, {\n            units: 'meters'\n          }).geometry.coordinates;\n        }\n\n        return mapCoords;\n      } // Allow only 90 degree turns\n\n\n      var lastPoint = clickSequence[clickSequence.length - 1];\n\n      var _generatePointsParall = (0, _utils.generatePointsParallelToLinePoints)(clickSequence[clickSequence.length - 2], lastPoint, mapCoords),\n          _generatePointsParall2 = _slicedToArray(_generatePointsParall, 1),\n          approximatePoint = _generatePointsParall2[0]; // align point with current ground\n\n\n      var nearestPt = (0, _nearestPointOnLine[\"default\"])((0, _helpers.lineString)([lastPoint, approximatePoint]), mapCoords).geometry.coordinates;\n      return nearestPt;\n    }\n  }, {\n    key: \"getGuides\",\n    value: function getGuides(props) {\n      var clickSequence = this.getClickSequence();\n      var guides = {\n        type: 'FeatureCollection',\n        features: []\n      };\n\n      if (clickSequence.length === 0 || !props.lastPointerMoveEvent) {\n        // nothing to do yet\n        return guides;\n      }\n\n      var mapCoords = props.lastPointerMoveEvent.mapCoords;\n      guides.features.push({\n        type: 'Feature',\n        properties: {\n          guideType: 'tentative'\n        },\n        geometry: {\n          type: 'LineString',\n          coordinates: [].concat(_toConsumableArray(clickSequence), [this.calculateMapCoords(clickSequence, mapCoords, props)])\n        }\n      });\n      return guides;\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event, props) {\n      var tentativeFeature = this.getTentativeGuide(props);\n      var selectedGeometry = this.getSelectedGeometry(props);\n\n      if (!selectedGeometry) {\n        // eslint-disable-next-line no-console,no-undef\n        console.warn('A polygon must be selected for splitting');\n        return;\n      }\n\n      var clickSequence = this.getClickSequence();\n\n      if (tentativeFeature && tentativeFeature.geometry.type === 'LineString') {\n        clickSequence.push(tentativeFeature.geometry.coordinates[tentativeFeature.geometry.coordinates.length - 1]);\n      } else {\n        this.addClickSequence(event);\n      }\n\n      var pt = {\n        type: 'Point',\n        coordinates: clickSequence[clickSequence.length - 1]\n      }; // @ts-ignore\n\n      var isPointInPolygon = (0, _booleanPointInPolygon[\"default\"])(pt, selectedGeometry);\n\n      if (clickSequence.length > 1 && tentativeFeature && !isPointInPolygon) {\n        this.resetClickSequence(); // @ts-ignore\n\n        var isLineInterectingWithPolygon = (0, _lineIntersect[\"default\"])(tentativeFeature, selectedGeometry);\n\n        if (isLineInterectingWithPolygon.features.length === 0) {\n          return;\n        }\n\n        var editAction = this.splitPolygon(tentativeFeature, props);\n\n        if (editAction) {\n          props.onEdit(editAction);\n        }\n      }\n    }\n  }, {\n    key: \"handlePointerMove\",\n    value: function handlePointerMove(event, props) {\n      props.onUpdateCursor('cell');\n    }\n  }, {\n    key: \"splitPolygon\",\n    value: function splitPolygon(tentativeFeature, props) {\n      var selectedGeometry = this.getSelectedGeometry(props);\n      var featureIndex = props.selectedIndexes[0];\n      var modeConfig = props.modeConfig || {}; // Default gap in between the polygon\n\n      var _modeConfig$gap = modeConfig.gap,\n          gap = _modeConfig$gap === void 0 ? 0.1 : _modeConfig$gap,\n          _modeConfig$units = modeConfig.units,\n          units = _modeConfig$units === void 0 ? 'centimeters' : _modeConfig$units;\n\n      if (gap === 0) {\n        gap = 0.1;\n        units = 'centimeters';\n      }\n\n      var buffer = (0, _buffer[\"default\"])(tentativeFeature, gap, {\n        units: units\n      }); // @ts-ignore\n\n      var updatedGeometry = (0, _difference[\"default\"])(selectedGeometry, buffer);\n\n      if (!updatedGeometry) {\n        // eslint-disable-next-line no-console,no-undef\n        console.warn('Canceling edit. Split Polygon erased');\n        return null;\n      }\n\n      var _updatedGeometry$geom = updatedGeometry.geometry,\n          type = _updatedGeometry$geom.type,\n          coordinates = _updatedGeometry$geom.coordinates;\n      var updatedCoordinates = [];\n\n      if (type === 'Polygon') {\n        // Update the coordinates as per Multipolygon\n        // @ts-ignore\n        updatedCoordinates = coordinates.map(function (c) {\n          return [c];\n        });\n      } else {\n        // Handle Case when Multipolygon has holes\n        // @ts-ignore\n        updatedCoordinates = coordinates.reduce(function (agg, prev) {\n          prev.forEach(function (p) {\n            agg.push([p]);\n          });\n          return agg;\n        }, []);\n      } // Update the type to Mulitpolygon\n\n\n      var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).replaceGeometry(featureIndex, {\n        type: 'MultiPolygon',\n        coordinates: updatedCoordinates\n      });\n      var editAction = {\n        updatedData: updatedData.getObject(),\n        editType: 'split',\n        editContext: {\n          featureIndexes: [featureIndex]\n        }\n      };\n      return editAction;\n    }\n  }]);\n\n  return SplitPolygonMode;\n}(_geojsonEditMode.GeoJsonEditMode);\n\nexports.SplitPolygonMode = SplitPolygonMode;","map":{"version":3,"mappings":"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","names":["SplitPolygonMode","clickSequence","mapCoords","props","modeConfig","lock90Degree","length","firstPoint","selectedGeometry","getSelectedGeometry","feature","lines","type","features","minDistance","Number","MAX_SAFE_INTEGER","closestPoint","forEach","line","snapPoint","distanceFromOrigin","lastBearing","currentDistance","units","geometry","coordinates","lastPoint","approximatePoint","nearestPt","getClickSequence","guides","lastPointerMoveEvent","push","properties","guideType","calculateMapCoords","event","tentativeFeature","getTentativeGuide","console","warn","addClickSequence","pt","isPointInPolygon","resetClickSequence","isLineInterectingWithPolygon","editAction","splitPolygon","onEdit","onUpdateCursor","featureIndex","selectedIndexes","gap","buffer","updatedGeometry","updatedCoordinates","map","c","reduce","agg","prev","p","updatedData","ImmutableFeatureCollection","data","replaceGeometry","getObject","editType","editContext","featureIndexes","GeoJsonEditMode"],"sources":["../../src/lib/split-polygon-mode.ts"],"sourcesContent":["import booleanPointInPolygon from '@turf/boolean-point-in-polygon';\nimport turfDifference from '@turf/difference';\nimport turfBuffer from '@turf/buffer';\nimport lineIntersect from '@turf/line-intersect';\nimport { lineString } from '@turf/helpers';\nimport turfBearing from '@turf/bearing';\nimport turfDistance from '@turf/distance';\nimport turfDestination from '@turf/destination';\nimport turfPolygonToLine from '@turf/polygon-to-line';\nimport nearestPointOnLine from '@turf/nearest-point-on-line';\nimport { generatePointsParallelToLinePoints } from '../utils';\nimport { FeatureCollection } from '../geojson-types';\nimport {\n  ClickEvent,\n  PointerMoveEvent,\n  ModeProps,\n  GuideFeatureCollection,\n  TentativeFeature,\n} from '../types';\nimport { GeoJsonEditMode, GeoJsonEditAction } from './geojson-edit-mode';\nimport { ImmutableFeatureCollection } from './immutable-feature-collection';\n\nexport class SplitPolygonMode extends GeoJsonEditMode {\n  calculateMapCoords(clickSequence: any, mapCoords: any, props: ModeProps<FeatureCollection>) {\n    const modeConfig = props.modeConfig;\n    if (!modeConfig || !modeConfig.lock90Degree || !clickSequence.length) {\n      return mapCoords;\n    }\n    if (clickSequence.length === 1) {\n      // if first point is clicked, then find closest polygon point and build ~90deg vector\n      const firstPoint = clickSequence[0];\n      const selectedGeometry = this.getSelectedGeometry(props);\n      // @ts-ignore\n      const feature = turfPolygonToLine(selectedGeometry);\n\n      const lines = feature.type === 'FeatureCollection' ? feature.features : [feature];\n      let minDistance = Number.MAX_SAFE_INTEGER;\n      let closestPoint = null;\n      // If Multipolygon, then we should find nearest polygon line and stick split to it.\n      lines.forEach((line) => {\n        const snapPoint = nearestPointOnLine(line, firstPoint);\n        const distanceFromOrigin = turfDistance(snapPoint, firstPoint);\n        if (minDistance > distanceFromOrigin) {\n          minDistance = distanceFromOrigin;\n          closestPoint = snapPoint;\n        }\n      });\n\n      if (closestPoint) {\n        // closest point is used as 90degree entry to the polygon\n        const lastBearing = turfBearing(firstPoint, closestPoint);\n        const currentDistance = turfDistance(firstPoint, mapCoords, { units: 'meters' });\n        return turfDestination(firstPoint, currentDistance, lastBearing, {\n          units: 'meters',\n        }).geometry.coordinates;\n      }\n      return mapCoords;\n    }\n    // Allow only 90 degree turns\n    const lastPoint = clickSequence[clickSequence.length - 1];\n    const [approximatePoint] = generatePointsParallelToLinePoints(\n      clickSequence[clickSequence.length - 2],\n      lastPoint,\n      mapCoords\n    );\n    // align point with current ground\n    const nearestPt = nearestPointOnLine(lineString([lastPoint, approximatePoint]), mapCoords)\n      .geometry.coordinates;\n    return nearestPt;\n  }\n\n  getGuides(props: ModeProps<FeatureCollection>): GuideFeatureCollection {\n    const clickSequence = this.getClickSequence();\n\n    const guides: GuideFeatureCollection = {\n      type: 'FeatureCollection',\n      features: [],\n    };\n\n    if (clickSequence.length === 0 || !props.lastPointerMoveEvent) {\n      // nothing to do yet\n      return guides;\n    }\n\n    const { mapCoords } = props.lastPointerMoveEvent;\n\n    guides.features.push({\n      type: 'Feature',\n      properties: {\n        guideType: 'tentative',\n      },\n      geometry: {\n        type: 'LineString',\n        coordinates: [...clickSequence, this.calculateMapCoords(clickSequence, mapCoords, props)],\n      },\n    });\n\n    return guides;\n  }\n\n  handleClick(event: ClickEvent, props: ModeProps<FeatureCollection>) {\n    const tentativeFeature = this.getTentativeGuide(props);\n\n    const selectedGeometry = this.getSelectedGeometry(props);\n\n    if (!selectedGeometry) {\n      // eslint-disable-next-line no-console,no-undef\n      console.warn('A polygon must be selected for splitting');\n      return;\n    }\n\n    const clickSequence = this.getClickSequence();\n    if (tentativeFeature && tentativeFeature.geometry.type === 'LineString') {\n      clickSequence.push(\n        tentativeFeature.geometry.coordinates[tentativeFeature.geometry.coordinates.length - 1]\n      );\n    } else {\n      this.addClickSequence(event);\n    }\n\n    const pt = {\n      type: 'Point',\n      coordinates: clickSequence[clickSequence.length - 1],\n    };\n    // @ts-ignore\n    const isPointInPolygon = booleanPointInPolygon(pt, selectedGeometry);\n    if (clickSequence.length > 1 && tentativeFeature && !isPointInPolygon) {\n      this.resetClickSequence();\n      // @ts-ignore\n      const isLineInterectingWithPolygon = lineIntersect(tentativeFeature, selectedGeometry);\n      if (isLineInterectingWithPolygon.features.length === 0) {\n        return;\n      }\n\n      const editAction = this.splitPolygon(tentativeFeature, props);\n\n      if (editAction) {\n        props.onEdit(editAction);\n      }\n    }\n  }\n\n  handlePointerMove(event: PointerMoveEvent, props: ModeProps<FeatureCollection>) {\n    props.onUpdateCursor('cell');\n  }\n\n  splitPolygon(tentativeFeature: TentativeFeature, props: ModeProps<FeatureCollection>) {\n    const selectedGeometry = this.getSelectedGeometry(props);\n    const featureIndex = props.selectedIndexes[0];\n    const modeConfig = props.modeConfig || {};\n\n    // Default gap in between the polygon\n    let { gap = 0.1, units = 'centimeters' } = modeConfig;\n    if (gap === 0) {\n      gap = 0.1;\n      units = 'centimeters';\n    }\n\n    const buffer = turfBuffer(tentativeFeature, gap, { units });\n    // @ts-ignore\n    const updatedGeometry = turfDifference(selectedGeometry, buffer);\n    if (!updatedGeometry) {\n      // eslint-disable-next-line no-console,no-undef\n      console.warn('Canceling edit. Split Polygon erased');\n      return null;\n    }\n\n    const { type, coordinates } = updatedGeometry.geometry;\n    let updatedCoordinates = [];\n    if (type === 'Polygon') {\n      // Update the coordinates as per Multipolygon\n      // @ts-ignore\n      updatedCoordinates = coordinates.map((c) => [c]);\n    } else {\n      // Handle Case when Multipolygon has holes\n      // @ts-ignore\n      updatedCoordinates = coordinates.reduce((agg, prev) => {\n        prev.forEach((p) => {\n          agg.push([p]);\n        });\n        return agg;\n      }, []);\n    }\n\n    // Update the type to Mulitpolygon\n    const updatedData = new ImmutableFeatureCollection(props.data).replaceGeometry(featureIndex, {\n      type: 'MultiPolygon',\n      coordinates: updatedCoordinates,\n    });\n\n    const editAction: GeoJsonEditAction = {\n      updatedData: updatedData.getObject(),\n      editType: 'split',\n      editContext: {\n        featureIndexes: [featureIndex],\n      },\n    };\n\n    return editAction;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}