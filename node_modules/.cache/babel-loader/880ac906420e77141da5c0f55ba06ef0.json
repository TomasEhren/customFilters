{"ast":null,"code":"import { Type } from '../schema/schema';\nexport function getTypeInfo(arrowTypeLike) {\n  return {\n    typeId: arrowTypeLike.typeId,\n    ArrayType: arrowTypeLike.ArrayType,\n    typeName: arrowTypeLike.toString(),\n    typeEnumName: getTypeKey(arrowTypeLike.typeId),\n    precision: arrowTypeLike.precision\n  };\n}\nvar ReverseType = null;\n\nfunction getTypeKey(typeKey) {\n  if (!ReverseType) {\n    ReverseType = {};\n\n    for (var key in Type) {\n      ReverseType[Type[key]] = key;\n    }\n  }\n\n  return ReverseType[typeKey];\n}","map":{"version":3,"mappings":"AAAA,SAAQA,IAAR,QAAmB,kBAAnB;AAOA,OAAO,SAASC,WAAT,CAAqBC,aAArB,EAML;EACA,OAAO;IACLC,MAAM,EAAED,aAAa,CAACC,MADjB;IAELC,SAAS,EAAEF,aAAa,CAACE,SAFpB;IAGLC,QAAQ,EAAEH,aAAa,CAACI,QAAdJ,EAHL;IAILK,YAAY,EAAEC,UAAU,CAACN,aAAa,CAACC,MAAf,CAJnB;IAKLM,SAAS,EAAEP,aAAa,CAACO;EALpB,CAAP;AAOD;AAED,IAAIC,WAA2C,GAAG,IAAlD;;AAEA,SAASF,UAAT,CAAoBG,OAApB,EAA6B;EAC3B,IAAI,CAACD,WAAL,EAAkB;IAChBA,WAAW,GAAG,EAAdA;;IACA,KAAK,IAAME,GAAX,IAAkBZ,IAAlB,EAAwB;MACtBU,WAAW,CAACV,IAAI,CAACY,GAAD,CAAL,CAAXF,GAAyBE,GAAzBF;IACD;EACF;;EAED,OAAOA,WAAW,CAACC,OAAD,CAAlB;AACD","names":["Type","getTypeInfo","arrowTypeLike","typeId","ArrayType","typeName","toString","typeEnumName","getTypeKey","precision","ReverseType","typeKey","key"],"sources":["../../../../src/lib/arrow/get-type-info.ts"],"sourcesContent":["import {Type} from '../schema/schema';\nimport {AnyArray} from '../../types';\n\n/**\n * Gets type information from an Arrow type object or \"mock\" Arrow type object\n * @param arrowTypeLike Arrow Type or type object of similar shape\n */\nexport function getTypeInfo(arrowTypeLike: any): {\n  typeId: Type;\n  ArrayType: AnyArray;\n  typeName: string;\n  typeEnumName?: string;\n  precision?: number;\n} {\n  return {\n    typeId: arrowTypeLike.typeId,\n    ArrayType: arrowTypeLike.ArrayType,\n    typeName: arrowTypeLike.toString(),\n    typeEnumName: getTypeKey(arrowTypeLike.typeId),\n    precision: arrowTypeLike.precision\n  };\n}\n\nlet ReverseType: {[key: string]: string} | null = null;\n\nfunction getTypeKey(typeKey) {\n  if (!ReverseType) {\n    ReverseType = {};\n    for (const key in Type) {\n      ReverseType[Type[key]] = key;\n    }\n  }\n\n  return ReverseType[typeKey];\n}\n"]},"metadata":{},"sourceType":"module"}