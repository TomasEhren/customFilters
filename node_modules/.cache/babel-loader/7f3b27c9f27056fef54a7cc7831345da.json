{"ast":null,"code":"import { useSelector, useDispatch } from 'react-redux';\nimport { CartoLayer } from '@deck.gl/carto';\nimport { selectSourceById, updateLayer } from '@carto/react-redux';\nimport { useCartoLayerProps } from '@carto/react-api';\nimport htmlForFeature from 'utils/htmlForFeature';\nexport const COUNTIES_LAYER_ID = 'countiesLayer';\nexport default function CountiesLayer() {\n  const {\n    countiesLayer\n  } = useSelector(state => state.carto.layers);\n  const source = useSelector(state => selectSourceById(state, countiesLayer === null || countiesLayer === void 0 ? void 0 : countiesLayer.source));\n  const cartoLayerProps = useCartoLayerProps({\n    source\n  });\n\n  if (countiesLayer && source) {\n    return new CartoLayer({ ...cartoLayerProps,\n      id: COUNTIES_LAYER_ID,\n      getFillColor: [195, 199, 198, 0],\n      pointRadiusMinPixels: 1,\n      getLineColor: [195, 199, 198],\n      lineWidthMinPixels: 0.5,\n      pickable: true,\n      onHover: info => {\n        if (info !== null && info !== void 0 && info.object) {\n          info.object = {\n            html: htmlForFeature({\n              feature: info.object\n            }),\n            style: {}\n          };\n        }\n      }\n    });\n  }\n}","map":{"version":3,"names":["useSelector","useDispatch","CartoLayer","selectSourceById","updateLayer","useCartoLayerProps","htmlForFeature","COUNTIES_LAYER_ID","CountiesLayer","countiesLayer","state","carto","layers","source","cartoLayerProps","id","getFillColor","pointRadiusMinPixels","getLineColor","lineWidthMinPixels","pickable","onHover","info","object","html","feature","style"],"sources":["/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/src/components/layers/CountiesLayer.js"],"sourcesContent":["import { useSelector, useDispatch } from 'react-redux';\nimport { CartoLayer } from '@deck.gl/carto';\nimport { selectSourceById, updateLayer } from '@carto/react-redux';\nimport { useCartoLayerProps } from '@carto/react-api';\nimport htmlForFeature from 'utils/htmlForFeature';\n\nexport const COUNTIES_LAYER_ID = 'countiesLayer';\n\nexport default function CountiesLayer() {\n  const { countiesLayer } = useSelector((state) => state.carto.layers);\n  const source = useSelector((state) => selectSourceById(state, countiesLayer?.source));\n  const cartoLayerProps = useCartoLayerProps({ source });\n\n  if (countiesLayer && source) {\n    return new CartoLayer({\n      ...cartoLayerProps,\n      id: COUNTIES_LAYER_ID,\n      getFillColor: [195, 199, 198, 0],\n      pointRadiusMinPixels: 1,\n      getLineColor: [195, 199, 198],\n      lineWidthMinPixels: 0.5,\n      pickable: true,\n      onHover: (info) => {\n        if (info?.object) {\n          info.object = {\n            html: htmlForFeature({ feature: info.object }),\n            style: {},\n          };\n        }\n      },\n    });\n  }\n}\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,oBAA9C;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AAEA,OAAO,MAAMC,iBAAiB,GAAG,eAA1B;AAEP,eAAe,SAASC,aAAT,GAAyB;EACtC,MAAM;IAAEC;EAAF,IAAoBT,WAAW,CAAEU,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYC,MAAxB,CAArC;EACA,MAAMC,MAAM,GAAGb,WAAW,CAAEU,KAAD,IAAWP,gBAAgB,CAACO,KAAD,EAAQD,aAAR,aAAQA,aAAR,uBAAQA,aAAa,CAAEI,MAAvB,CAA5B,CAA1B;EACA,MAAMC,eAAe,GAAGT,kBAAkB,CAAC;IAAEQ;EAAF,CAAD,CAA1C;;EAEA,IAAIJ,aAAa,IAAII,MAArB,EAA6B;IAC3B,OAAO,IAAIX,UAAJ,CAAe,EACpB,GAAGY,eADiB;MAEpBC,EAAE,EAAER,iBAFgB;MAGpBS,YAAY,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,CAAhB,CAHM;MAIpBC,oBAAoB,EAAE,CAJF;MAKpBC,YAAY,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CALM;MAMpBC,kBAAkB,EAAE,GANA;MAOpBC,QAAQ,EAAE,IAPU;MAQpBC,OAAO,EAAGC,IAAD,IAAU;QACjB,IAAIA,IAAJ,aAAIA,IAAJ,eAAIA,IAAI,CAAEC,MAAV,EAAkB;UAChBD,IAAI,CAACC,MAAL,GAAc;YACZC,IAAI,EAAElB,cAAc,CAAC;cAAEmB,OAAO,EAAEH,IAAI,CAACC;YAAhB,CAAD,CADR;YAEZG,KAAK,EAAE;UAFK,CAAd;QAID;MACF;IAfmB,CAAf,CAAP;EAiBD;AACF"},"metadata":{},"sourceType":"module"}