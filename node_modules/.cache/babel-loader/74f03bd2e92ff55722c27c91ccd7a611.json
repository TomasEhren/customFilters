{"ast":null,"code":"import _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { clamp } from '@math.gl/core';\nimport Controller from './controller';\nimport { OrbitState } from './orbit-controller';\n\nvar OrthographicState = /*#__PURE__*/function (_OrbitState) {\n  _inherits(OrthographicState, _OrbitState);\n\n  var _super = _createSuper(OrthographicState);\n\n  function OrthographicState(props) {\n    var _this;\n\n    _classCallCheck(this, OrthographicState);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"zoomAxis\", void 0);\n\n    _this.zoomAxis = props.zoomAxis || 'all';\n    return _this;\n  }\n\n  _createClass(OrthographicState, [{\n    key: \"_applyConstraints\",\n    value: function _applyConstraints(props) {\n      var maxZoom = props.maxZoom,\n          minZoom = props.minZoom,\n          zoom = props.zoom;\n      props.zoom = Array.isArray(zoom) ? [clamp(zoom[0], minZoom, maxZoom), clamp(zoom[1], minZoom, maxZoom)] : clamp(zoom, minZoom, maxZoom);\n      return props;\n    }\n  }, {\n    key: \"_calculateNewZoom\",\n    value: function _calculateNewZoom(_ref) {\n      var scale = _ref.scale,\n          startZoom = _ref.startZoom;\n      var _this$_viewportProps = this._viewportProps,\n          maxZoom = _this$_viewportProps.maxZoom,\n          minZoom = _this$_viewportProps.minZoom;\n\n      if (!startZoom && startZoom !== 0) {\n        startZoom = this._viewportProps.zoom;\n      }\n\n      var deltaZoom = Math.log2(scale);\n\n      if (Array.isArray(startZoom)) {\n        var _startZoom = startZoom,\n            _startZoom2 = _slicedToArray(_startZoom, 2),\n            newZoomX = _startZoom2[0],\n            newZoomY = _startZoom2[1];\n\n        switch (this.zoomAxis) {\n          case 'X':\n            newZoomX = clamp(newZoomX + deltaZoom, minZoom, maxZoom);\n            break;\n\n          case 'Y':\n            newZoomY = clamp(newZoomY + deltaZoom, minZoom, maxZoom);\n            break;\n\n          default:\n            var z = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);\n\n            if (z < minZoom) {\n              deltaZoom += minZoom - z;\n            }\n\n            z = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);\n\n            if (z > maxZoom) {\n              deltaZoom += maxZoom - z;\n            }\n\n            newZoomX += deltaZoom;\n            newZoomY += deltaZoom;\n        }\n\n        return [newZoomX, newZoomY];\n      }\n\n      return clamp(startZoom + deltaZoom, minZoom, maxZoom);\n    }\n  }]);\n\n  return OrthographicState;\n}(OrbitState);\n\nvar OrthographicController = /*#__PURE__*/function (_Controller) {\n  _inherits(OrthographicController, _Controller);\n\n  var _super2 = _createSuper(OrthographicController);\n\n  function OrthographicController(props) {\n    _classCallCheck(this, OrthographicController);\n\n    props.dragMode = props.dragMode || 'pan';\n    return _super2.call(this, OrthographicState, props);\n  }\n\n  _createClass(OrthographicController, [{\n    key: \"_onPanRotate\",\n    value: function _onPanRotate(event) {\n      return false;\n    }\n  }, {\n    key: \"linearTransitionProps\",\n    get: function get() {\n      return ['target', 'zoom'];\n    }\n  }]);\n\n  return OrthographicController;\n}(Controller);\n\nexport { OrthographicController as default };","map":{"version":3,"mappings":"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","names":["clamp","Controller","OrbitState","OrthographicState","constructor","props","_defineProperty","zoomAxis","_applyConstraints","maxZoom","minZoom","zoom","Array","isArray","_calculateNewZoom","scale","startZoom","_viewportProps","deltaZoom","Math","log2","newZoomX","newZoomY","z","min","max","OrthographicController","dragMode","_onPanRotate","event"],"sources":["../../../src/controllers/orthographic-controller.ts"],"sourcesContent":["import {clamp} from '@math.gl/core';\nimport Controller from './controller';\nimport {OrbitState} from './orbit-controller';\n\nclass OrthographicState extends OrbitState {\n  zoomAxis: 'X' | 'Y' | 'all';\n\n  constructor(props) {\n    super(props);\n\n    this.zoomAxis = props.zoomAxis || 'all';\n  }\n\n  _applyConstraints(props) {\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = Array.isArray(zoom)\n      ? [clamp(zoom[0], minZoom, maxZoom), clamp(zoom[1], minZoom, maxZoom)]\n      : clamp(zoom, minZoom, maxZoom);\n    return props;\n  }\n\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    if (!startZoom && startZoom !== 0) {\n      startZoom = this._viewportProps.zoom;\n    }\n    let deltaZoom = Math.log2(scale);\n    if (Array.isArray(startZoom)) {\n      let [newZoomX, newZoomY] = startZoom;\n      switch (this.zoomAxis) {\n        case 'X':\n          // Scale x only\n          newZoomX = clamp(newZoomX + deltaZoom, minZoom, maxZoom);\n          break;\n        case 'Y':\n          // Scale y only\n          newZoomY = clamp(newZoomY + deltaZoom, minZoom, maxZoom);\n          break;\n        default:\n          // Lock aspect ratio\n          let z = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z < minZoom) {\n            deltaZoom += minZoom - z;\n          }\n          z = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z > maxZoom) {\n            deltaZoom += maxZoom - z;\n          }\n          newZoomX += deltaZoom;\n          newZoomY += deltaZoom;\n      }\n      return [newZoomX, newZoomY];\n    }\n    // Ignore `zoomAxis`\n    // `LinearTransitionInterpolator` does not support interpolation between a number and an array\n    // So if zoom is a number (legacy use case), new zoom still has to be a number\n    return clamp(startZoom + deltaZoom, minZoom, maxZoom);\n  }\n}\n\nexport default class OrthographicController extends Controller {\n  constructor(props) {\n    props.dragMode = props.dragMode || 'pan';\n    super(OrthographicState, props);\n  }\n\n  _onPanRotate(event) {\n    // No rotation in orthographic view\n    return false;\n  }\n\n  get linearTransitionProps(): string[] | null {\n    return ['target', 'zoom'];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}