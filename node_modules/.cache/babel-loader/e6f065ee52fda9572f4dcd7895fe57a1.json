{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nvar logState = {\n  attributeUpdateMessages: []\n};\nvar LOG_LEVEL_MAJOR_UPDATE = 1;\nvar LOG_LEVEL_MINOR_UPDATE = 2;\nvar LOG_LEVEL_UPDATE_DETAIL = 3;\nvar LOG_LEVEL_INFO = 4;\nvar LOG_LEVEL_DRAW = 2;\nexport var getLoggers = function getLoggers(log) {\n  return {\n    'layer.changeFlag': function layerChangeFlag(layer, key, flags) {\n      log.log(LOG_LEVEL_UPDATE_DETAIL, \"\".concat(layer.id, \" \").concat(key, \": \"), flags[key])();\n    },\n    'layer.initialize': function layerInitialize(layer) {\n      log.log(LOG_LEVEL_MAJOR_UPDATE, \"Initializing \".concat(layer))();\n    },\n    'layer.update': function layerUpdate(layer, needsUpdate) {\n      if (needsUpdate) {\n        var flags = layer.getChangeFlags();\n        log.log(LOG_LEVEL_MINOR_UPDATE, \"Updating \".concat(layer, \" because: \").concat(Object.keys(flags).filter(function (key) {\n          return flags[key];\n        }).join(', ')))();\n      } else {\n        log.log(LOG_LEVEL_INFO, \"\".concat(layer, \" does not need update\"))();\n      }\n    },\n    'layer.matched': function layerMatched(layer, changed) {\n      if (changed) {\n        log.log(LOG_LEVEL_INFO, \"Matched \".concat(layer, \", state transfered\"))();\n      }\n    },\n    'layer.finalize': function layerFinalize(layer) {\n      log.log(LOG_LEVEL_MAJOR_UPDATE, \"Finalizing \".concat(layer))();\n    },\n    'compositeLayer.renderLayers': function compositeLayerRenderLayers(layer, updated, subLayers) {\n      if (updated) {\n        log.log(LOG_LEVEL_MINOR_UPDATE, \"Composite layer rendered new subLayers \".concat(layer), subLayers)();\n      } else {\n        log.log(LOG_LEVEL_INFO, \"Composite layer reused subLayers \".concat(layer), subLayers)();\n      }\n    },\n    'layerManager.setLayers': function layerManagerSetLayers(layerManager, updated, layers) {\n      if (updated) {\n        log.log(LOG_LEVEL_MINOR_UPDATE, \"Updating \".concat(layers.length, \" deck layers\"))();\n      }\n    },\n    'layerManager.activateViewport': function layerManagerActivateViewport(layerManager, viewport) {\n      log.log(LOG_LEVEL_UPDATE_DETAIL, 'Viewport changed', viewport)();\n    },\n    'attributeManager.invalidate': function attributeManagerInvalidate(attributeManager, trigger, attributeNames) {\n      log.log(LOG_LEVEL_MAJOR_UPDATE, attributeNames ? \"invalidated attributes \".concat(attributeNames, \" (\").concat(trigger, \") for \").concat(attributeManager.id) : \"invalidated all attributes for \".concat(attributeManager.id))();\n    },\n    'attributeManager.updateStart': function attributeManagerUpdateStart(attributeManager) {\n      logState.attributeUpdateMessages.length = 0;\n      logState.attributeManagerUpdateStart = Date.now();\n    },\n    'attributeManager.updateEnd': function attributeManagerUpdateEnd(attributeManager, numInstances) {\n      var timeMs = Math.round(Date.now() - logState.attributeManagerUpdateStart);\n      log.groupCollapsed(LOG_LEVEL_MINOR_UPDATE, \"Updated attributes for \".concat(numInstances, \" instances in \").concat(attributeManager.id, \" in \").concat(timeMs, \"ms\"))();\n\n      var _iterator = _createForOfIteratorHelper(logState.attributeUpdateMessages),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var updateMessage = _step.value;\n          log.log(LOG_LEVEL_UPDATE_DETAIL, updateMessage)();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      log.groupEnd(LOG_LEVEL_MINOR_UPDATE)();\n    },\n    'attribute.updateStart': function attributeUpdateStart(attribute) {\n      logState.attributeUpdateStart = Date.now();\n    },\n    'attribute.allocate': function attributeAllocate(attribute, numInstances) {\n      var message = \"\".concat(attribute.id, \" allocated \").concat(numInstances);\n      logState.attributeUpdateMessages.push(message);\n    },\n    'attribute.updateEnd': function attributeUpdateEnd(attribute, numInstances) {\n      var timeMs = Math.round(Date.now() - logState.attributeUpdateStart);\n      var message = \"\".concat(attribute.id, \" updated \").concat(numInstances, \" in \").concat(timeMs, \"ms\");\n      logState.attributeUpdateMessages.push(message);\n    },\n    'deckRenderer.renderLayers': function deckRendererRenderLayers(deckRenderer, renderStats, opts) {\n      var pass = opts.pass,\n          redrawReason = opts.redrawReason,\n          stats = opts.stats;\n\n      var _iterator2 = _createForOfIteratorHelper(renderStats),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var status = _step2.value;\n          var totalCount = status.totalCount,\n              visibleCount = status.visibleCount,\n              compositeCount = status.compositeCount,\n              pickableCount = status.pickableCount;\n          var primitiveCount = totalCount - compositeCount;\n          var hiddenCount = primitiveCount - visibleCount;\n          log.log(LOG_LEVEL_DRAW, \"RENDER #\".concat(deckRenderer.renderCount, \"   \").concat(visibleCount, \" (of \").concat(totalCount, \" layers) to \").concat(pass, \" because \").concat(redrawReason, \"   (\").concat(hiddenCount, \" hidden, \").concat(compositeCount, \" composite \").concat(pickableCount, \" pickable)\"))();\n\n          if (stats) {\n            stats.get('Redraw Layers').add(visibleCount);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  };\n};","map":{"version":3,"mappings":";AAAA,IAAMA,QAAQ,GAAG;EACfC,uBAAuB,EAAE;AADV,CAAjB;AAIA,IAAMC,sBAAsB,GAAG,CAA/B;AACA,IAAMC,sBAAsB,GAAG,CAA/B;AACA,IAAMC,uBAAuB,GAAG,CAAhC;AACA,IAAMC,cAAc,GAAG,CAAvB;AACA,IAAMC,cAAc,GAAG,CAAvB;AAEA,OAAO,IAAMC,UAAU,GAAGC,SAAbD,UAAaC,IAAG;EAAA,OAAK;IAGhC,oBAAoB,yBAACC,KAAD,EAAQC,GAAR,EAAaC,KAAb,EAAuB;MACzCH,GAAG,CAACA,GAAJA,CAAQJ,uBAARI,YAAoCC,KAAK,CAACG,EAA1C,cAAgDF,GAAhD,SAAyDC,KAAK,CAACD,GAAD,CAA9DF;IAJ8B;IAOhC,oBAAoBC,8BAAK,EAAI;MAC3BD,GAAG,CAACA,GAAJA,CAAQN,sBAARM,yBAAgDC,KAAhD;IAR8B;IAUhC,gBAAgB,qBAACA,KAAD,EAAQI,WAAR,EAAwB;MACtC,IAAIA,WAAJ,EAAiB;QACf,IAAMF,KAAK,GAAGF,KAAK,CAACK,cAANL,EAAd;QACAD,GAAG,CAACA,GAAJA,CACEL,sBADFK,qBAEcC,KAFd,uBAEgCM,MAAM,CAACC,IAAPD,CAAYJ,KAAZI,EAC3BE,MAD2BF,CACpBL,aAAG;UAAA,OAAIC,KAAK,CAACD,GAAD,CAAT;QAAA,CADiBK,EAE3BG,IAF2BH,CAEtB,IAFsBA,CAFhC;MAFF,OAQO;QACLP,GAAG,CAACA,GAAJA,CAAQH,cAARG,YAA2BC,KAA3B;MACD;IArB6B;IAuBhC,iBAAiB,sBAACA,KAAD,EAAQU,OAAR,EAAoB;MACnC,IAAIA,OAAJ,EAAa;QACXX,GAAG,CAACA,GAAJA,CAAQH,cAARG,oBAAmCC,KAAnC;MACD;IA1B6B;IA4BhC,kBAAkBA,4BAAK,EAAI;MACzBD,GAAG,CAACA,GAAJA,CAAQN,sBAARM,uBAA8CC,KAA9C;IA7B8B;IAkChC,+BAA+B,oCAACA,KAAD,EAAQW,OAAR,EAAiBC,SAAjB,EAA+B;MAC5D,IAAID,OAAJ,EAAa;QACXZ,GAAG,CAACA,GAAJA,CACEL,sBADFK,mDAE4CC,KAF5C,GAGEY,SAHFb;MADF,OAMO;QACLA,GAAG,CAACA,GAAJA,CAAQH,cAARG,6CAA4DC,KAA5D,GAAqEY,SAArEb;MACD;IA3C6B;IAgDhC,0BAA0B,+BAACc,YAAD,EAAeF,OAAf,EAAwBG,MAAxB,EAAmC;MAC3D,IAAIH,OAAJ,EAAa;QACXZ,GAAG,CAACA,GAAJA,CAAQL,sBAARK,qBAA4Ce,MAAM,CAACC,MAAnD;MACD;IAnD6B;IAsDhC,iCAAiC,sCAACF,YAAD,EAAeG,QAAf,EAA4B;MAC3DjB,GAAG,CAACA,GAAJA,CAAQJ,uBAARI,EAAiC,kBAAjCA,EAAqDiB,QAArDjB;IAvD8B;IA4DhC,+BAA+B,oCAACkB,gBAAD,EAAmBC,OAAnB,EAA4BC,cAA5B,EAA+C;MAC5EpB,GAAG,CAACA,GAAJA,CACEN,sBADFM,EAEEoB,cAAc,oCACgBA,cADhB,eACmCD,OADnC,mBACmDD,gBAAgB,CAACd,EADpE,6CAEwBc,gBAAgB,CAACd,EAFzC,CAFhBJ;IA7D8B;IAqEhC,gCAAgCkB,qDAAgB,EAAI;MAClD1B,QAAQ,CAACC,uBAATD,CAAiCwB,MAAjCxB,GAA0C,CAA1CA;MACAA,QAAQ,CAAC6B,2BAAT7B,GAAuC8B,IAAI,CAACC,GAALD,EAAvC9B;IAvE8B;IAyEhC,8BAA8B,mCAAC0B,gBAAD,EAAmBM,YAAnB,EAAoC;MAChE,IAAMC,MAAM,GAAGC,IAAI,CAACC,KAALD,CAAWJ,IAAI,CAACC,GAALD,KAAa9B,QAAQ,CAAC6B,2BAAjCK,CAAf;MACA1B,GAAG,CAAC4B,cAAJ5B,CACEL,sBADFK,mCAE4BwB,YAF5B,2BAEyDN,gBAAgB,CAACd,EAF1E,iBAEmFqB,MAFnF;;MAFgE,2CAMpCjC,QAAQ,CAACC,uBAN2B;MAAA;;MAAA;QAMhE,oDAA8D;UAAA,IAAnDoC,aAAmD;UAC5D7B,GAAG,CAACA,GAAJA,CAAQJ,uBAARI,EAAiC6B,aAAjC7B;QACD;MAR+D;QAAA;MAAA;QAAA;MAAA;;MAShEA,GAAG,CAAC8B,QAAJ9B,CAAaL,sBAAbK;IAlF8B;IAuFhC,yBAAyB+B,uCAAS,EAAI;MACpCvC,QAAQ,CAACwC,oBAATxC,GAAgC8B,IAAI,CAACC,GAALD,EAAhC9B;IAxF8B;IA0FhC,sBAAsB,2BAACuC,SAAD,EAAYP,YAAZ,EAA6B;MACjD,IAAMS,OAAO,aAAMF,SAAS,CAAC3B,EAAhB,wBAAgCoB,YAAhC,CAAb;MACAhC,QAAQ,CAACC,uBAATD,CAAiC0C,IAAjC1C,CAAsCyC,OAAtCzC;IA5F8B;IA8FhC,uBAAuB,4BAACuC,SAAD,EAAYP,YAAZ,EAA6B;MAClD,IAAMC,MAAM,GAAGC,IAAI,CAACC,KAALD,CAAWJ,IAAI,CAACC,GAALD,KAAa9B,QAAQ,CAACwC,oBAAjCN,CAAf;MACA,IAAMO,OAAO,aAAMF,SAAS,CAAC3B,EAAhB,sBAA8BoB,YAA9B,iBAAiDC,MAAjD,OAAb;MACAjC,QAAQ,CAACC,uBAATD,CAAiC0C,IAAjC1C,CAAsCyC,OAAtCzC;IAjG8B;IAsGhC,6BAA6B,kCAAC2C,YAAD,EAAeC,WAAf,EAA4BC,IAA5B,EAAqC;MAChE,IAAOC,IAAP,GAAoCD,IAApC,CAAOC,IAAP;MAAA,IAAaC,YAAb,GAAoCF,IAApC,CAAaE,YAAb;MAAA,IAA2BC,KAA3B,GAAoCH,IAApC,CAA2BG,KAA3B;;MADgE,4CAE3CJ,WAF2C;MAAA;;MAAA;QAEhE,uDAAkC;UAAA,IAAvBK,MAAuB;UAChC,IAAOC,UAAP,GAAkED,MAAlE,CAAOC,UAAP;UAAA,IAAmBC,YAAnB,GAAkEF,MAAlE,CAAmBE,YAAnB;UAAA,IAAiCC,cAAjC,GAAkEH,MAAlE,CAAiCG,cAAjC;UAAA,IAAiDC,aAAjD,GAAkEJ,MAAlE,CAAiDI,aAAjD;UACA,IAAMC,cAAc,GAAGJ,UAAU,GAAGE,cAApC;UACA,IAAMG,WAAW,GAAGD,cAAc,GAAGH,YAArC;UAEA3C,GAAG,CAACA,GAAJA,CACEF,cADFE,oBAEamC,YAAY,CAACa,WAF1B,gBAGFL,YAHE,kBAGkBD,UAHlB,yBAG2CJ,IAH3C,sBAG2DC,YAH3D,iBAIDQ,WAJC,sBAIsBH,cAJtB,wBAIkDC,aAJlD;;UAOA,IAAIL,KAAJ,EAAW;YACTA,KAAK,CAACS,GAANT,CAAU,eAAVA,EAA2BU,GAA3BV,CAA+BG,YAA/BH;UACD;QACF;MAjB+D;QAAA;MAAA;QAAA;MAAA;IAkBjE;EAxH+B,CAAL;AAAA,CAAtB","names":["logState","attributeUpdateMessages","LOG_LEVEL_MAJOR_UPDATE","LOG_LEVEL_MINOR_UPDATE","LOG_LEVEL_UPDATE_DETAIL","LOG_LEVEL_INFO","LOG_LEVEL_DRAW","getLoggers","log","layer","key","flags","id","needsUpdate","getChangeFlags","Object","keys","filter","join","changed","updated","subLayers","layerManager","layers","length","viewport","attributeManager","trigger","attributeNames","attributeManagerUpdateStart","Date","now","numInstances","timeMs","Math","round","groupCollapsed","updateMessage","groupEnd","attribute","attributeUpdateStart","message","push","deckRenderer","renderStats","opts","pass","redrawReason","stats","status","totalCount","visibleCount","compositeCount","pickableCount","primitiveCount","hiddenCount","renderCount","get","add"],"sources":["../../../src/debug/loggers.js"],"sourcesContent":["const logState = {\n  attributeUpdateMessages: []\n};\n\nconst LOG_LEVEL_MAJOR_UPDATE = 1; // Events with direct perf impact\nconst LOG_LEVEL_MINOR_UPDATE = 2; // Events that may affect perf\nconst LOG_LEVEL_UPDATE_DETAIL = 3;\nconst LOG_LEVEL_INFO = 4;\nconst LOG_LEVEL_DRAW = 2;\n\nexport const getLoggers = log => ({\n  /* Layer events */\n\n  'layer.changeFlag': (layer, key, flags) => {\n    log.log(LOG_LEVEL_UPDATE_DETAIL, `${layer.id} ${key}: `, flags[key])();\n  },\n\n  'layer.initialize': layer => {\n    log.log(LOG_LEVEL_MAJOR_UPDATE, `Initializing ${layer}`)();\n  },\n  'layer.update': (layer, needsUpdate) => {\n    if (needsUpdate) {\n      const flags = layer.getChangeFlags();\n      log.log(\n        LOG_LEVEL_MINOR_UPDATE,\n        `Updating ${layer} because: ${Object.keys(flags)\n          .filter(key => flags[key])\n          .join(', ')}`\n      )();\n    } else {\n      log.log(LOG_LEVEL_INFO, `${layer} does not need update`)();\n    }\n  },\n  'layer.matched': (layer, changed) => {\n    if (changed) {\n      log.log(LOG_LEVEL_INFO, `Matched ${layer}, state transfered`)();\n    }\n  },\n  'layer.finalize': layer => {\n    log.log(LOG_LEVEL_MAJOR_UPDATE, `Finalizing ${layer}`)();\n  },\n\n  /* CompositeLayer events */\n\n  'compositeLayer.renderLayers': (layer, updated, subLayers) => {\n    if (updated) {\n      log.log(\n        LOG_LEVEL_MINOR_UPDATE,\n        `Composite layer rendered new subLayers ${layer}`,\n        subLayers\n      )();\n    } else {\n      log.log(LOG_LEVEL_INFO, `Composite layer reused subLayers ${layer}`, subLayers)();\n    }\n  },\n\n  /* LayerManager events */\n\n  'layerManager.setLayers': (layerManager, updated, layers) => {\n    if (updated) {\n      log.log(LOG_LEVEL_MINOR_UPDATE, `Updating ${layers.length} deck layers`)();\n    }\n  },\n\n  'layerManager.activateViewport': (layerManager, viewport) => {\n    log.log(LOG_LEVEL_UPDATE_DETAIL, 'Viewport changed', viewport)();\n  },\n\n  /* AttributeManager events */\n\n  'attributeManager.invalidate': (attributeManager, trigger, attributeNames) => {\n    log.log(\n      LOG_LEVEL_MAJOR_UPDATE,\n      attributeNames\n        ? `invalidated attributes ${attributeNames} (${trigger}) for ${attributeManager.id}`\n        : `invalidated all attributes for ${attributeManager.id}`\n    )();\n  },\n\n  'attributeManager.updateStart': attributeManager => {\n    logState.attributeUpdateMessages.length = 0;\n    logState.attributeManagerUpdateStart = Date.now();\n  },\n  'attributeManager.updateEnd': (attributeManager, numInstances) => {\n    const timeMs = Math.round(Date.now() - logState.attributeManagerUpdateStart);\n    log.groupCollapsed(\n      LOG_LEVEL_MINOR_UPDATE,\n      `Updated attributes for ${numInstances} instances in ${attributeManager.id} in ${timeMs}ms`\n    )();\n    for (const updateMessage of logState.attributeUpdateMessages) {\n      log.log(LOG_LEVEL_UPDATE_DETAIL, updateMessage)();\n    }\n    log.groupEnd(LOG_LEVEL_MINOR_UPDATE)();\n  },\n\n  /* Attribute events */\n\n  'attribute.updateStart': attribute => {\n    logState.attributeUpdateStart = Date.now();\n  },\n  'attribute.allocate': (attribute, numInstances) => {\n    const message = `${attribute.id} allocated ${numInstances}`;\n    logState.attributeUpdateMessages.push(message);\n  },\n  'attribute.updateEnd': (attribute, numInstances) => {\n    const timeMs = Math.round(Date.now() - logState.attributeUpdateStart);\n    const message = `${attribute.id} updated ${numInstances} in ${timeMs}ms`;\n    logState.attributeUpdateMessages.push(message);\n  },\n\n  /* Render events */\n\n  'deckRenderer.renderLayers': (deckRenderer, renderStats, opts) => {\n    const {pass, redrawReason, stats} = opts;\n    for (const status of renderStats) {\n      const {totalCount, visibleCount, compositeCount, pickableCount} = status;\n      const primitiveCount = totalCount - compositeCount;\n      const hiddenCount = primitiveCount - visibleCount;\n\n      log.log(\n        LOG_LEVEL_DRAW,\n        `RENDER #${deckRenderer.renderCount} \\\n  ${visibleCount} (of ${totalCount} layers) to ${pass} because ${redrawReason} \\\n  (${hiddenCount} hidden, ${compositeCount} composite ${pickableCount} pickable)`\n      )();\n\n      if (stats) {\n        stats.get('Redraw Layers').add(visibleCount);\n      }\n    }\n  }\n});\n"]},"metadata":{},"sourceType":"module"}