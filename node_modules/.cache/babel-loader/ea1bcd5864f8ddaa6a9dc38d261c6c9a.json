{"ast":null,"code":"import { defaultClassicCredentials, defaultCloudNativeCredentials, getDefaultCredentials } from '../config';\nimport { API_VERSIONS, DEFAULT_MAPS_URL_FORMAT, DEFAULT_REGION_COMPONENT_IN_URL, DEFAULT_USER_COMPONENT_IN_URL, encodeParameter, MAP_TYPES } from './maps-api-common';\nexport const CONNECTIONS = {\n  BIGQUERY: 'bigquery',\n  CARTO: 'carto'\n};\nconst BUFFER_SIZE = 16;\nconst TILE_EXTENT = 4096;\nexport async function getDataV2(_ref) {\n  let {\n    type,\n    source,\n    credentials\n  } = _ref;\n  const defaultCredentials = getDefaultCredentials();\n  const apiVersion = (credentials === null || credentials === void 0 ? void 0 : credentials.apiVersion) || defaultCredentials.apiVersion;\n  const localCreds = { ...(apiVersion === API_VERSIONS.V3 ? defaultCloudNativeCredentials : defaultClassicCredentials),\n    mapsUrl: DEFAULT_MAPS_URL_FORMAT[apiVersion],\n    ...(defaultCredentials.apiVersion === apiVersion && defaultCredentials),\n    ...credentials\n  };\n  let url;\n  const connection = type === MAP_TYPES.TILESET ? CONNECTIONS.BIGQUERY : CONNECTIONS.CARTO;\n\n  switch (apiVersion) {\n    case API_VERSIONS.V1:\n      const mapConfig = createMapConfig(source);\n      url = buildURLMapsAPIv1({\n        mapConfig,\n        credentials: localCreds\n      });\n      const layergroup = await request({\n        url,\n        credentials: localCreds\n      });\n      return layergroup.metadata.tilejson.vector;\n\n    case API_VERSIONS.V2:\n      url = buildURLMapsAPIv2({\n        connection,\n        type,\n        source,\n        credentials: localCreds\n      });\n      return await request({\n        url,\n        credentials: localCreds\n      });\n\n    default:\n      throw new Error(\"Invalid maps API version. It should be \".concat(API_VERSIONS.V1, \" or \").concat(API_VERSIONS.V2));\n  }\n}\n\nasync function request(_ref2) {\n  let {\n    url,\n    credentials\n  } = _ref2;\n  let response;\n\n  try {\n    response = await fetch(url, {\n      headers: {\n        Accept: 'application/json'\n      }\n    });\n  } catch (error) {\n    throw new Error(\"Failed to connect to Maps API: \".concat(error));\n  }\n\n  const json = await response.json();\n\n  if (!response.ok) {\n    dealWithError({\n      response,\n      json,\n      credentials\n    });\n  }\n\n  return json;\n}\n\nfunction dealWithError(_ref3) {\n  let {\n    response,\n    json,\n    credentials\n  } = _ref3;\n\n  switch (response.status) {\n    case 401:\n      throw new Error(\"Unauthorized access to Maps API: invalid combination of user ('\".concat(credentials.username, \"') and apiKey ('\").concat(credentials.apiKey, \"')\"));\n\n    case 403:\n      throw new Error(\"Unauthorized access to dataset: the provided apiKey('\".concat(credentials.apiKey, \"') doesn't provide access to the requested data\"));\n\n    default:\n      const e = credentials.apiVersion === API_VERSIONS.V1 ? JSON.stringify(json.errors) : json.error;\n      throw new Error(e);\n  }\n}\n\nfunction initURLParameters(credentials) {\n  const encodedApiKey = encodeParameter('api_key', credentials.apiKey);\n  const encodedClient = encodeParameter('client', 'deck-gl-carto');\n  return [encodedApiKey, encodedClient];\n}\n\nfunction buildURLMapsAPIv1(_ref4) {\n  let {\n    mapConfig,\n    credentials\n  } = _ref4;\n  const parameters = initURLParameters(credentials);\n  const cfg = JSON.stringify(mapConfig);\n  return \"\".concat(mapsUrl(credentials), \"?\").concat(parameters.join('&'), \"&\").concat(encodeParameter('config', cfg));\n}\n\nfunction buildURLMapsAPIv2(_ref5) {\n  let {\n    connection,\n    type,\n    source,\n    credentials\n  } = _ref5;\n  const parameters = initURLParameters(credentials);\n  const mapsApiType = type === MAP_TYPES.QUERY ? 'sql' : type;\n  let url = \"\".concat(mapsUrl(credentials), \"/\").concat(connection, \"/\").concat(mapsApiType, \"?\");\n  url += \"\".concat(encodeParameter('source', source), \"&format=tilejson&\").concat(parameters.join('&'));\n  return url;\n}\n\nfunction mapsUrl(credentials) {\n  return credentials.mapsUrl.replace(DEFAULT_USER_COMPONENT_IN_URL, credentials.username).replace(DEFAULT_REGION_COMPONENT_IN_URL, credentials.region);\n}\n\nfunction createMapConfig(sql) {\n  return {\n    version: '1.3.1',\n    buffersize: {\n      mvt: BUFFER_SIZE\n    },\n    layers: [{\n      type: 'mapnik',\n      options: {\n        sql,\n        vector_extent: TILE_EXTENT\n      }\n    }]\n  };\n}","map":{"version":3,"mappings":"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","names":["defaultClassicCredentials","defaultCloudNativeCredentials","getDefaultCredentials","API_VERSIONS","DEFAULT_MAPS_URL_FORMAT","DEFAULT_REGION_COMPONENT_IN_URL","DEFAULT_USER_COMPONENT_IN_URL","encodeParameter","MAP_TYPES","CONNECTIONS","BIGQUERY","CARTO","BUFFER_SIZE","TILE_EXTENT","getDataV2","type","source","credentials","defaultCredentials","apiVersion","localCreds","V3","mapsUrl","url","connection","TILESET","V1","mapConfig","createMapConfig","buildURLMapsAPIv1","layergroup","request","metadata","tilejson","vector","V2","buildURLMapsAPIv2","Error","response","fetch","headers","Accept","error","json","ok","dealWithError","status","username","apiKey","e","JSON","stringify","errors","initURLParameters","encodedApiKey","encodedClient","parameters","cfg","join","mapsApiType","QUERY","replace","region","sql","version","buffersize","mvt","layers","options","vector_extent"],"sources":["../../../src/api/maps-client.ts"],"sourcesContent":["/**\n * Maps API Client for Maps API v1 and Maps API v2\n */\nimport {\n  ClassicCredentials,\n  defaultClassicCredentials,\n  defaultCloudNativeCredentials,\n  getDefaultCredentials\n} from '../config';\nimport {\n  API_VERSIONS,\n  DEFAULT_MAPS_URL_FORMAT,\n  DEFAULT_REGION_COMPONENT_IN_URL,\n  DEFAULT_USER_COMPONENT_IN_URL,\n  encodeParameter,\n  MapType,\n  MAP_TYPES\n} from './maps-api-common';\n\nexport const CONNECTIONS = {\n  BIGQUERY: 'bigquery',\n  CARTO: 'carto'\n};\n\nconst BUFFER_SIZE = 16;\nconst TILE_EXTENT = 4096;\n\n/**\n * Obtain a TileJson from Maps API v1 and v2\n */\nexport async function getDataV2({\n  type,\n  source,\n  credentials\n}: {\n  type: MapType;\n  source: string;\n  credentials?: Partial<ClassicCredentials>;\n}) {\n  const defaultCredentials = getDefaultCredentials();\n  const apiVersion = credentials?.apiVersion || defaultCredentials.apiVersion;\n  // Only pick up default credentials if they have been defined for\n  // correct API version\n  const localCreds = {\n    ...(apiVersion === API_VERSIONS.V3 ? defaultCloudNativeCredentials : defaultClassicCredentials),\n    mapsUrl: DEFAULT_MAPS_URL_FORMAT[apiVersion],\n    ...(defaultCredentials.apiVersion === apiVersion && defaultCredentials),\n    ...credentials\n  } as unknown as Required<ClassicCredentials>;\n\n  let url: string;\n\n  const connection = type === MAP_TYPES.TILESET ? CONNECTIONS.BIGQUERY : CONNECTIONS.CARTO;\n\n  switch (apiVersion) {\n    case API_VERSIONS.V1:\n      // Maps API v1\n      const mapConfig = createMapConfig(source);\n      url = buildURLMapsAPIv1({mapConfig, credentials: localCreds});\n      const layergroup = await request({url, credentials: localCreds});\n      return layergroup.metadata.tilejson.vector;\n\n    case API_VERSIONS.V2:\n      // Maps API v2\n      url = buildURLMapsAPIv2({connection, type, source, credentials: localCreds});\n      return await request({url, credentials: localCreds});\n\n    default:\n      throw new Error(\n        `Invalid maps API version. It should be ${API_VERSIONS.V1} or ${API_VERSIONS.V2}`\n      );\n  }\n}\n\n/**\n * Request against Maps API\n */\nasync function request({url, credentials}: {url: string; credentials: ClassicCredentials}) {\n  let response;\n\n  try {\n    /* global fetch */\n    response = await fetch(url, {\n      headers: {\n        Accept: 'application/json'\n      }\n    });\n  } catch (error) {\n    throw new Error(`Failed to connect to Maps API: ${error}`);\n  }\n\n  const json = await response.json();\n\n  if (!response.ok) {\n    dealWithError({response, json, credentials});\n  }\n\n  return json;\n}\n\n/**\n * Display proper message from Maps API error\n */\nfunction dealWithError({\n  response,\n  json,\n  credentials\n}: {\n  response: Response;\n  json: any;\n  credentials: ClassicCredentials;\n}) {\n  switch (response.status) {\n    case 401:\n      throw new Error(\n        `Unauthorized access to Maps API: invalid combination of user ('${credentials.username}') and apiKey ('${credentials.apiKey}')`\n      );\n    case 403:\n      throw new Error(\n        `Unauthorized access to dataset: the provided apiKey('${credentials.apiKey}') doesn't provide access to the requested data`\n      );\n\n    default:\n      const e =\n        credentials.apiVersion === API_VERSIONS.V1 ? JSON.stringify(json.errors) : json.error;\n      throw new Error(e);\n  }\n}\n\nfunction initURLParameters(credentials: ClassicCredentials): string[] {\n  const encodedApiKey = encodeParameter('api_key', credentials.apiKey);\n  const encodedClient = encodeParameter('client', 'deck-gl-carto');\n  return [encodedApiKey, encodedClient];\n}\n\n/**\n * Build a URL with all required parameters\n */\nfunction buildURLMapsAPIv1({\n  mapConfig,\n  credentials\n}: {\n  mapConfig: unknown;\n  credentials: Required<ClassicCredentials>;\n}): string {\n  const parameters = initURLParameters(credentials);\n  const cfg = JSON.stringify(mapConfig);\n  return `${mapsUrl(credentials)}?${parameters.join('&')}&${encodeParameter('config', cfg)}`;\n}\n\nfunction buildURLMapsAPIv2({\n  connection,\n  type,\n  source,\n  credentials\n}: {\n  connection: string;\n  type: MapType;\n  source: string;\n  credentials: Required<ClassicCredentials>;\n}): string {\n  const parameters = initURLParameters(credentials);\n  // Query type is mapped to 'sql' at maps api v1\n  const mapsApiType = type === MAP_TYPES.QUERY ? 'sql' : type;\n  let url = `${mapsUrl(credentials)}/${connection}/${mapsApiType}?`;\n  url += `${encodeParameter('source', source)}&format=tilejson&${parameters.join('&')}`;\n  return url;\n}\n\n/**\n * Prepare a url valid for the specified user\n */\nfunction mapsUrl(credentials: Required<ClassicCredentials>) {\n  return credentials.mapsUrl\n    .replace(DEFAULT_USER_COMPONENT_IN_URL, credentials.username)\n    .replace(DEFAULT_REGION_COMPONENT_IN_URL, credentials.region);\n}\n\nfunction createMapConfig(sql: string) {\n  return {\n    version: '1.3.1',\n    buffersize: {\n      mvt: BUFFER_SIZE\n    },\n    layers: [\n      {\n        type: 'mapnik',\n        options: {\n          sql,\n          // eslint-disable-next-line camelcase\n          vector_extent: TILE_EXTENT\n        }\n      }\n    ]\n  };\n}\n"]},"metadata":{},"sourceType":"module"}