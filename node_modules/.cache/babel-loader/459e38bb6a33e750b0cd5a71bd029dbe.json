{"ast":null,"code":"const BROWSER_PREFIXES = ['', 'WEBKIT_', 'MOZ_'];\nconst WEBGL_EXTENSIONS = {\n  WEBGL_compressed_texture_s3tc: 'dxt',\n  WEBGL_compressed_texture_s3tc_srgb: 'dxt-srgb',\n  WEBGL_compressed_texture_etc1: 'etc1',\n  WEBGL_compressed_texture_etc: 'etc2',\n  WEBGL_compressed_texture_pvrtc: 'pvrtc',\n  WEBGL_compressed_texture_atc: 'atc',\n  WEBGL_compressed_texture_astc: 'astc',\n  EXT_texture_compression_rgtc: 'rgtc'\n};\nlet formats = null;\nexport function getSupportedGPUTextureFormats(gl) {\n  if (!formats) {\n    gl = gl || getWebGLContext() || undefined;\n    formats = new Set();\n\n    for (const prefix of BROWSER_PREFIXES) {\n      for (const extension in WEBGL_EXTENSIONS) {\n        if (gl && gl.getExtension(\"\".concat(prefix).concat(extension))) {\n          const gpuTextureFormat = WEBGL_EXTENSIONS[extension];\n          formats.add(gpuTextureFormat);\n        }\n      }\n    }\n  }\n\n  return formats;\n}\n\nfunction getWebGLContext() {\n  try {\n    const canvas = document.createElement('canvas');\n    return canvas.getContext('webgl');\n  } catch (error) {\n    return null;\n  }\n}","map":{"version":3,"mappings":"AAEA,MAAMA,gBAAgB,GAAG,CAAC,EAAD,EAAK,SAAL,EAAgB,MAAhB,CAAzB;AAEA,MAAMC,gBAAmD,GAAG;EAE1DC,6BAA6B,EAAE,KAF2B;EAG1DC,kCAAkC,EAAE,UAHsB;EAI1DC,6BAA6B,EAAE,MAJ2B;EAK1DC,4BAA4B,EAAE,MAL4B;EAM1DC,8BAA8B,EAAE,OAN0B;EAO1DC,4BAA4B,EAAE,KAP4B;EAQ1DC,6BAA6B,EAAE,MAR2B;EAS1DC,4BAA4B,EAAE;AAT4B,CAA5D;AAaA,IAAIC,OAAqC,GAAG,IAA5C;AAQA,OAAO,SAASC,6BAAT,CAAuCC,EAAvC,EAAgF;EACrF,IAAI,CAACF,OAAL,EAAc;IACZE,EAAE,GAAGA,EAAE,IAAIC,eAAe,EAArBD,IAA2BE,SAAhCF;IAEAF,OAAO,GAAG,IAAIK,GAAJ,EAAVL;;IAEA,KAAK,MAAMM,MAAX,IAAqBhB,gBAArB,EAAuC;MACrC,KAAK,MAAMiB,SAAX,IAAwBhB,gBAAxB,EAA0C;QACxC,IAAIW,EAAE,IAAIA,EAAE,CAACM,YAAHN,WAAmBI,MAAnB,SAA4BC,SAA5B,EAAV,EAAoD;UAClD,MAAME,gBAAgB,GAAGlB,gBAAgB,CAACgB,SAAD,CAAzC;UACAP,OAAO,CAACU,GAARV,CAAYS,gBAAZT;QACD;MACF;IACF;EACF;;EAED,OAAOA,OAAP;AACD;;AAKD,SAASG,eAAT,GAA2B;EACzB,IAAI;IACF,MAAMQ,MAAM,GAAGC,QAAQ,CAACC,aAATD,CAAuB,QAAvBA,CAAf;IACA,OAAOD,MAAM,CAACG,UAAPH,CAAkB,OAAlBA,CAAP;EAFF,EAGE,OAAOI,KAAP,EAAc;IACd,OAAO,IAAP;EACD;AACF","names":["BROWSER_PREFIXES","WEBGL_EXTENSIONS","WEBGL_compressed_texture_s3tc","WEBGL_compressed_texture_s3tc_srgb","WEBGL_compressed_texture_etc1","WEBGL_compressed_texture_etc","WEBGL_compressed_texture_pvrtc","WEBGL_compressed_texture_atc","WEBGL_compressed_texture_astc","EXT_texture_compression_rgtc","formats","getSupportedGPUTextureFormats","gl","getWebGLContext","undefined","Set","prefix","extension","getExtension","gpuTextureFormat","add","canvas","document","createElement","getContext","error"],"sources":["../../../../src/lib/utils/texture-formats.ts"],"sourcesContent":["import type {GPUTextureFormat} from '../../types';\n\nconst BROWSER_PREFIXES = ['', 'WEBKIT_', 'MOZ_'];\n\nconst WEBGL_EXTENSIONS: {[key: string]: GPUTextureFormat} = {\n  /* eslint-disable camelcase */\n  WEBGL_compressed_texture_s3tc: 'dxt',\n  WEBGL_compressed_texture_s3tc_srgb: 'dxt-srgb',\n  WEBGL_compressed_texture_etc1: 'etc1',\n  WEBGL_compressed_texture_etc: 'etc2',\n  WEBGL_compressed_texture_pvrtc: 'pvrtc',\n  WEBGL_compressed_texture_atc: 'atc',\n  WEBGL_compressed_texture_astc: 'astc',\n  EXT_texture_compression_rgtc: 'rgtc'\n  /* eslint-enable camelcase */\n};\n\nlet formats: Set<GPUTextureFormat> | null = null;\n\n/**\n * Returns a list of formats.\n * Creates a temporary WebGLRenderingContext if none is provided.\n *\n * @param gl - Optional context.\n */\nexport function getSupportedGPUTextureFormats(gl?: WebGLRenderingContext): Set<string> {\n  if (!formats) {\n    gl = gl || getWebGLContext() || undefined;\n\n    formats = new Set<GPUTextureFormat>();\n\n    for (const prefix of BROWSER_PREFIXES) {\n      for (const extension in WEBGL_EXTENSIONS) {\n        if (gl && gl.getExtension(`${prefix}${extension}`)) {\n          const gpuTextureFormat = WEBGL_EXTENSIONS[extension];\n          formats.add(gpuTextureFormat);\n        }\n      }\n    }\n  }\n\n  return formats;\n}\n\n/**\n * @returns {WebGLRenderingContext?}\n */\nfunction getWebGLContext() {\n  try {\n    const canvas = document.createElement('canvas');\n    return canvas.getContext('webgl');\n  } catch (error) {\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}