{"ast":null,"code":"import { clamp } from '@math.gl/core';\nimport Controller from './controller';\nimport { MapState } from './map-controller';\nimport { mod } from '../utils/math-utils';\n\nclass GlobeState extends MapState {\n  _applyConstraints(props) {\n    const {\n      maxZoom,\n      minZoom,\n      zoom\n    } = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n    const {\n      longitude,\n      latitude\n    } = props;\n\n    if (longitude < -180 || longitude > 180) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n\n    props.latitude = clamp(latitude, -89, 89);\n    return props;\n  }\n\n}\n\nexport default class GlobeController extends Controller {\n  constructor(props) {\n    props.dragMode = props.dragMode || 'pan';\n    super(GlobeState, props);\n  }\n\n  setProps(props) {\n    super.setProps(props);\n    this.dragRotate = false;\n    this.touchRotate = false;\n  }\n\n  get linearTransitionProps() {\n    return ['longitude', 'latitude', 'zoom'];\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAAQA,KAAR,QAAoB,eAApB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,SAAQC,GAAR,QAAkB,qBAAlB;;AAEA,MAAMC,UAAN,SAAyBF,QAAzB,CAAkC;EAEhCG,iBAAiB,CAACC,KAAD,EAAQ;IAEvB,MAAM;MAACC,OAAD;MAAUC,OAAV;MAAmBC;IAAnB,IAA2BH,KAAjC;IACAA,KAAK,CAACG,IAANH,GAAaN,KAAK,CAACS,IAAD,EAAOD,OAAP,EAAgBD,OAAhB,CAAlBD;IAEA,MAAM;MAACI,SAAD;MAAYC;IAAZ,IAAwBL,KAA9B;;IACA,IAAII,SAAS,GAAG,CAAC,GAAbA,IAAoBA,SAAS,GAAG,GAApC,EAAyC;MACvCJ,KAAK,CAACI,SAANJ,GAAkBH,GAAG,CAACO,SAAS,GAAG,GAAb,EAAkB,GAAlB,CAAHP,GAA4B,GAA9CG;IACD;;IACDA,KAAK,CAACK,QAANL,GAAiBN,KAAK,CAACW,QAAD,EAAW,CAAC,EAAZ,EAAgB,EAAhB,CAAtBL;IAEA,OAAOA,KAAP;EACD;;AAd+B;;AAiBlC,eAAe,MAAMM,eAAN,SAA8BX,UAA9B,CAAyC;EACtDY,WAAW,CAACP,KAAD,EAAQ;IACjBA,KAAK,CAACQ,QAANR,GAAiBA,KAAK,CAACQ,QAANR,IAAkB,KAAnCA;IACA,MAAMF,UAAN,EAAkBE,KAAlB;EACD;;EAEDS,QAAQ,CAACT,KAAD,EAAQ;IACd,MAAMS,QAAN,CAAeT,KAAf;IAGA,KAAKU,UAAL,GAAkB,KAAlB;IACA,KAAKC,WAAL,GAAmB,KAAnB;EACD;;EAEwB,IAArBC,qBAAqB,GAAG;IAC1B,OAAO,CAAC,WAAD,EAAc,UAAd,EAA0B,MAA1B,CAAP;EACD;;AAhBqD","names":["clamp","Controller","MapState","mod","GlobeState","_applyConstraints","props","maxZoom","minZoom","zoom","longitude","latitude","GlobeController","constructor","dragMode","setProps","dragRotate","touchRotate","linearTransitionProps"],"sources":["../../../src/controllers/globe-controller.ts"],"sourcesContent":["import {clamp} from '@math.gl/core';\nimport Controller from './controller';\n\nimport {MapState} from './map-controller';\nimport {mod} from '../utils/math-utils';\n\nclass GlobeState extends MapState {\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    const {longitude, latitude} = props;\n    if (longitude < -180 || longitude > 180) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n    props.latitude = clamp(latitude, -89, 89);\n\n    return props;\n  }\n}\n\nexport default class GlobeController extends Controller {\n  constructor(props) {\n    props.dragMode = props.dragMode || 'pan';\n    super(GlobeState, props);\n  }\n\n  setProps(props) {\n    super.setProps(props);\n\n    // TODO - support pitching?\n    this.dragRotate = false;\n    this.touchRotate = false;\n  }\n\n  get linearTransitionProps() {\n    return ['longitude', 'latitude', 'zoom'];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}