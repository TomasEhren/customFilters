{"ast":null,"code":"import _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar DEFAULT_ROW_COUNT = 100;\n\nvar ColumnarTableBatchAggregator = /*#__PURE__*/function () {\n  function ColumnarTableBatchAggregator(schema, options) {\n    _classCallCheck(this, ColumnarTableBatchAggregator);\n\n    _defineProperty(this, \"schema\", void 0);\n\n    _defineProperty(this, \"length\", 0);\n\n    _defineProperty(this, \"allocated\", 0);\n\n    _defineProperty(this, \"columns\", {});\n\n    this.schema = schema;\n\n    this._reallocateColumns();\n  }\n\n  _createClass(ColumnarTableBatchAggregator, [{\n    key: \"rowCount\",\n    value: function rowCount() {\n      return this.length;\n    }\n  }, {\n    key: \"addArrayRow\",\n    value: function addArrayRow(row) {\n      this._reallocateColumns();\n\n      var i = 0;\n\n      for (var fieldName in this.columns) {\n        this.columns[fieldName][this.length] = row[i++];\n      }\n\n      this.length++;\n    }\n  }, {\n    key: \"addObjectRow\",\n    value: function addObjectRow(row) {\n      this._reallocateColumns();\n\n      for (var fieldName in row) {\n        this.columns[fieldName][this.length] = row[fieldName];\n      }\n\n      this.length++;\n    }\n  }, {\n    key: \"getBatch\",\n    value: function getBatch() {\n      this._pruneColumns();\n\n      var columns = Array.isArray(this.schema) ? this.columns : {};\n\n      if (!Array.isArray(this.schema)) {\n        for (var fieldName in this.schema) {\n          var field = this.schema[fieldName];\n          columns[field.name] = this.columns[field.index];\n        }\n      }\n\n      this.columns = {};\n      var batch = {\n        shape: 'columnar-table',\n        batchType: 'data',\n        data: columns,\n        schema: this.schema,\n        length: this.length\n      };\n      return batch;\n    }\n  }, {\n    key: \"_reallocateColumns\",\n    value: function _reallocateColumns() {\n      if (this.length < this.allocated) {\n        return;\n      }\n\n      this.allocated = this.allocated > 0 ? this.allocated *= 2 : DEFAULT_ROW_COUNT;\n      this.columns = {};\n\n      for (var fieldName in this.schema) {\n        var field = this.schema[fieldName];\n        var ArrayType = field.type || Float32Array;\n        var oldColumn = this.columns[field.index];\n\n        if (oldColumn && ArrayBuffer.isView(oldColumn)) {\n          var typedArray = new ArrayType(this.allocated);\n          typedArray.set(oldColumn);\n          this.columns[field.index] = typedArray;\n        } else if (oldColumn) {\n          oldColumn.length = this.allocated;\n          this.columns[field.index] = oldColumn;\n        } else {\n          this.columns[field.index] = new ArrayType(this.allocated);\n        }\n      }\n    }\n  }, {\n    key: \"_pruneColumns\",\n    value: function _pruneColumns() {\n      for (var _i = 0, _Object$entries = Object.entries(this.columns); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            columnName = _Object$entries$_i[0],\n            column = _Object$entries$_i[1];\n\n        this.columns[columnName] = column.slice(0, this.length);\n      }\n    }\n  }]);\n\n  return ColumnarTableBatchAggregator;\n}();\n\nexport { ColumnarTableBatchAggregator as default };","map":{"version":3,"mappings":"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","names":["DEFAULT_ROW_COUNT","ColumnarTableBatchAggregator","constructor","schema","options","_defineProperty","_reallocateColumns","rowCount","length","addArrayRow","row","i","fieldName","columns","addObjectRow","getBatch","_pruneColumns","Array","isArray","field","name","index","batch","shape","batchType","data","allocated","ArrayType","type","Float32Array","oldColumn","ArrayBuffer","isView","typedArray","set","Object","entries","columnName","column","slice"],"sources":["../../../../src/lib/batches/columnar-table-batch-aggregator.ts"],"sourcesContent":["import type {Schema} from '../schema/schema';\nimport type {ColumnarTableBatch, ArrowTableBatch} from '../../category/table/table-types';\nimport {TableBatchAggregator} from './table-batch-aggregator';\n\ntype ColumnarTableBatchOptions = {};\n\nconst DEFAULT_ROW_COUNT = 100;\n\nexport default class ColumnarTableBatchAggregator implements TableBatchAggregator {\n  schema: Schema;\n  length: number = 0;\n  allocated: number = 0;\n  columns: {[columnName: string]: any[]} = {};\n\n  constructor(schema: Schema, options: ColumnarTableBatchOptions) {\n    this.schema = schema;\n    this._reallocateColumns();\n  }\n\n  rowCount(): number {\n    return this.length;\n  }\n\n  addArrayRow(row: any[]) {\n    // If user keeps pushing rows beyond batch size, reallocate\n    this._reallocateColumns();\n    let i = 0;\n    // TODO what if no csv header, columns not populated?\n    for (const fieldName in this.columns) {\n      this.columns[fieldName][this.length] = row[i++];\n    }\n    this.length++;\n  }\n\n  addObjectRow(row: {[columnName: string]: any}): void {\n    // If user keeps pushing rows beyond batch size, reallocate\n    this._reallocateColumns();\n    for (const fieldName in row) {\n      this.columns[fieldName][this.length] = row[fieldName];\n    }\n    this.length++;\n  }\n\n  getBatch(): ColumnarTableBatch | ArrowTableBatch | null {\n    this._pruneColumns();\n    const columns = Array.isArray(this.schema) ? this.columns : {};\n\n    // schema is an array if there're no headers\n    // object if there are headers\n    // columns should match schema format\n    if (!Array.isArray(this.schema)) {\n      for (const fieldName in this.schema) {\n        const field = this.schema[fieldName];\n        columns[field.name] = this.columns[field.index];\n      }\n    }\n\n    this.columns = {};\n\n    const batch: ColumnarTableBatch = {\n      shape: 'columnar-table',\n      batchType: 'data',\n      data: columns,\n      schema: this.schema,\n      length: this.length\n    };\n\n    return batch;\n  }\n\n  // HELPERS\n\n  _reallocateColumns() {\n    if (this.length < this.allocated) {\n      return;\n    }\n\n    // @ts-ignore TODO\n    this.allocated = this.allocated > 0 ? (this.allocated *= 2) : DEFAULT_ROW_COUNT;\n    this.columns = {};\n\n    for (const fieldName in this.schema) {\n      const field = this.schema[fieldName];\n      const ArrayType = field.type || Float32Array;\n      const oldColumn = this.columns[field.index];\n\n      if (oldColumn && ArrayBuffer.isView(oldColumn)) {\n        // Copy the old data to the new array\n        const typedArray = new ArrayType(this.allocated);\n        typedArray.set(oldColumn);\n        this.columns[field.index] = typedArray;\n      } else if (oldColumn) {\n        // Plain array\n        oldColumn.length = this.allocated;\n        this.columns[field.index] = oldColumn;\n      } else {\n        // Create new\n        this.columns[field.index] = new ArrayType(this.allocated);\n      }\n    }\n  }\n\n  _pruneColumns() {\n    for (const [columnName, column] of Object.entries(this.columns)) {\n      this.columns[columnName] = column.slice(0, this.length);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}