{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Geometry from '../geometry/geometry';\nimport { unpackIndexedGeometry } from '../geometry/geometry-utils';\nimport { uid } from '@luma.gl/webgl';\n\nvar PlaneGeometry = /*#__PURE__*/function (_Geometry) {\n  _inherits(PlaneGeometry, _Geometry);\n\n  var _super = _createSuper(PlaneGeometry);\n\n  function PlaneGeometry() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, PlaneGeometry);\n\n    var _props$id = props.id,\n        id = _props$id === void 0 ? uid('plane-geometry') : _props$id;\n\n    var _tesselatePlane = tesselatePlane(props),\n        indices = _tesselatePlane.indices,\n        attributes = _tesselatePlane.attributes;\n\n    return _super.call(this, _objectSpread(_objectSpread({}, props), {}, {\n      id: id,\n      indices: indices,\n      attributes: _objectSpread(_objectSpread({}, attributes), props.attributes)\n    }));\n  }\n\n  return _createClass(PlaneGeometry);\n}(Geometry);\n\nexport { PlaneGeometry as default };\n\nfunction tesselatePlane(props) {\n  var _props$type = props.type,\n      type = _props$type === void 0 ? 'x,y' : _props$type,\n      _props$offset = props.offset,\n      offset = _props$offset === void 0 ? 0 : _props$offset,\n      _props$flipCull = props.flipCull,\n      flipCull = _props$flipCull === void 0 ? false : _props$flipCull,\n      _props$unpack = props.unpack,\n      unpack = _props$unpack === void 0 ? false : _props$unpack;\n  var coords = type.split(',');\n  var c1len = props[\"\".concat(coords[0], \"len\")] || 1;\n  var c2len = props[\"\".concat(coords[1], \"len\")] || 1;\n  var subdivisions1 = props[\"n\".concat(coords[0])] || 1;\n  var subdivisions2 = props[\"n\".concat(coords[1])] || 1;\n  var numVertices = (subdivisions1 + 1) * (subdivisions2 + 1);\n  var positions = new Float32Array(numVertices * 3);\n  var normals = new Float32Array(numVertices * 3);\n  var texCoords = new Float32Array(numVertices * 2);\n\n  if (flipCull) {\n    c1len = -c1len;\n  }\n\n  var i2 = 0;\n  var i3 = 0;\n\n  for (var z = 0; z <= subdivisions2; z++) {\n    for (var x = 0; x <= subdivisions1; x++) {\n      var u = x / subdivisions1;\n      var v = z / subdivisions2;\n      texCoords[i2 + 0] = flipCull ? 1 - u : u;\n      texCoords[i2 + 1] = v;\n\n      switch (type) {\n        case 'x,y':\n          positions[i3 + 0] = c1len * u - c1len * 0.5;\n          positions[i3 + 1] = c2len * v - c2len * 0.5;\n          positions[i3 + 2] = offset;\n          normals[i3 + 0] = 0;\n          normals[i3 + 1] = 0;\n          normals[i3 + 2] = flipCull ? 1 : -1;\n          break;\n\n        case 'x,z':\n          positions[i3 + 0] = c1len * u - c1len * 0.5;\n          positions[i3 + 1] = offset;\n          positions[i3 + 2] = c2len * v - c2len * 0.5;\n          normals[i3 + 0] = 0;\n          normals[i3 + 1] = flipCull ? 1 : -1;\n          normals[i3 + 2] = 0;\n          break;\n\n        case 'y,z':\n          positions[i3 + 0] = offset;\n          positions[i3 + 1] = c1len * u - c1len * 0.5;\n          positions[i3 + 2] = c2len * v - c2len * 0.5;\n          normals[i3 + 0] = flipCull ? 1 : -1;\n          normals[i3 + 1] = 0;\n          normals[i3 + 2] = 0;\n          break;\n\n        default:\n          throw new Error('PlaneGeometry: unknown type');\n      }\n\n      i2 += 2;\n      i3 += 3;\n    }\n  }\n\n  var numVertsAcross = subdivisions1 + 1;\n  var indices = new Uint16Array(subdivisions1 * subdivisions2 * 6);\n\n  for (var _z = 0; _z < subdivisions2; _z++) {\n    for (var _x = 0; _x < subdivisions1; _x++) {\n      var index = (_z * subdivisions1 + _x) * 6;\n      indices[index + 0] = (_z + 0) * numVertsAcross + _x;\n      indices[index + 1] = (_z + 1) * numVertsAcross + _x;\n      indices[index + 2] = (_z + 0) * numVertsAcross + _x + 1;\n      indices[index + 3] = (_z + 1) * numVertsAcross + _x;\n      indices[index + 4] = (_z + 1) * numVertsAcross + _x + 1;\n      indices[index + 5] = (_z + 0) * numVertsAcross + _x + 1;\n    }\n  }\n\n  var geometry = {\n    indices: {\n      size: 1,\n      value: indices\n    },\n    attributes: {\n      POSITION: {\n        size: 3,\n        value: positions\n      },\n      NORMAL: {\n        size: 3,\n        value: normals\n      },\n      TEXCOORD_0: {\n        size: 2,\n        value: texCoords\n      }\n    }\n  };\n  return unpack ? unpackIndexedGeometry(geometry) : geometry;\n}","map":{"version":3,"mappings":"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","names":["Geometry","unpackIndexedGeometry","uid","PlaneGeometry","constructor","props","id","tesselatePlane","indices","attributes","type","offset","flipCull","unpack","coords","split","c1len","c2len","subdivisions1","subdivisions2","numVertices","positions","Float32Array","normals","texCoords","i2","i3","z","x","u","v","Error","numVertsAcross","Uint16Array","index","geometry","size","value","POSITION","NORMAL","TEXCOORD_0"],"sources":["../../../src/geometries/plane-geometry.js"],"sourcesContent":["import Geometry from '../geometry/geometry';\nimport {unpackIndexedGeometry} from '../geometry/geometry-utils';\nimport {uid} from '@luma.gl/webgl';\n\nexport default class PlaneGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('plane-geometry')} = props;\n\n    const {indices, attributes} = tesselatePlane(props);\n    super({\n      ...props,\n      id,\n      indices,\n      attributes: {...attributes, ...props.attributes}\n    });\n  }\n}\n\n// Primitives inspired by TDL http://code.google.com/p/webglsamples/,\n// copyright 2011 Google Inc. new BSD License\n// (http://www.opensource.org/licenses/bsd-license.php).\n/* eslint-disable max-statements, complexity */\n/* eslint-disable complexity, max-statements */\nfunction tesselatePlane(props) {\n  const {type = 'x,y', offset = 0, flipCull = false, unpack = false} = props;\n\n  const coords = type.split(',');\n  // width, height\n  let c1len = props[`${coords[0]}len`] || 1;\n  const c2len = props[`${coords[1]}len`] || 1;\n  // subdivisionsWidth, subdivisionsDepth\n  const subdivisions1 = props[`n${coords[0]}`] || 1;\n  const subdivisions2 = props[`n${coords[1]}`] || 1;\n  const numVertices = (subdivisions1 + 1) * (subdivisions2 + 1);\n\n  const positions = new Float32Array(numVertices * 3);\n  const normals = new Float32Array(numVertices * 3);\n  const texCoords = new Float32Array(numVertices * 2);\n\n  if (flipCull) {\n    c1len = -c1len;\n  }\n\n  let i2 = 0;\n  let i3 = 0;\n  for (let z = 0; z <= subdivisions2; z++) {\n    for (let x = 0; x <= subdivisions1; x++) {\n      const u = x / subdivisions1;\n      const v = z / subdivisions2;\n      texCoords[i2 + 0] = flipCull ? 1 - u : u;\n      texCoords[i2 + 1] = v;\n\n      switch (type) {\n        case 'x,y':\n          positions[i3 + 0] = c1len * u - c1len * 0.5;\n          positions[i3 + 1] = c2len * v - c2len * 0.5;\n          positions[i3 + 2] = offset;\n\n          normals[i3 + 0] = 0;\n          normals[i3 + 1] = 0;\n          normals[i3 + 2] = flipCull ? 1 : -1;\n          break;\n\n        case 'x,z':\n          positions[i3 + 0] = c1len * u - c1len * 0.5;\n          positions[i3 + 1] = offset;\n          positions[i3 + 2] = c2len * v - c2len * 0.5;\n\n          normals[i3 + 0] = 0;\n          normals[i3 + 1] = flipCull ? 1 : -1;\n          normals[i3 + 2] = 0;\n          break;\n\n        case 'y,z':\n          positions[i3 + 0] = offset;\n          positions[i3 + 1] = c1len * u - c1len * 0.5;\n          positions[i3 + 2] = c2len * v - c2len * 0.5;\n\n          normals[i3 + 0] = flipCull ? 1 : -1;\n          normals[i3 + 1] = 0;\n          normals[i3 + 2] = 0;\n          break;\n\n        default:\n          throw new Error('PlaneGeometry: unknown type');\n      }\n\n      i2 += 2;\n      i3 += 3;\n    }\n  }\n\n  const numVertsAcross = subdivisions1 + 1;\n  const indices = new Uint16Array(subdivisions1 * subdivisions2 * 6);\n\n  for (let z = 0; z < subdivisions2; z++) {\n    for (let x = 0; x < subdivisions1; x++) {\n      const index = (z * subdivisions1 + x) * 6;\n      // Make triangle 1 of quad.\n      indices[index + 0] = (z + 0) * numVertsAcross + x;\n      indices[index + 1] = (z + 1) * numVertsAcross + x;\n      indices[index + 2] = (z + 0) * numVertsAcross + x + 1;\n\n      // Make triangle 2 of quad.\n      indices[index + 3] = (z + 1) * numVertsAcross + x;\n      indices[index + 4] = (z + 1) * numVertsAcross + x + 1;\n      indices[index + 5] = (z + 0) * numVertsAcross + x + 1;\n    }\n  }\n\n  const geometry = {\n    indices: {size: 1, value: indices},\n    attributes: {\n      POSITION: {size: 3, value: positions},\n      NORMAL: {size: 3, value: normals},\n      TEXCOORD_0: {size: 2, value: texCoords}\n    }\n  };\n\n  // Optionally, unpack indexed geometry\n  return unpack ? unpackIndexedGeometry(geometry) : geometry;\n}\n"]},"metadata":{},"sourceType":"module"}