{"ast":null,"code":"import { VERSION } from './lib/utils/version';\nimport parseGLBSync from './lib/parsers/parse-glb';\nexport const GLBLoader = {\n  name: 'GLB',\n  id: 'glb',\n  module: 'gltf',\n  version: VERSION,\n  extensions: ['glb'],\n  mimeTypes: ['model/gltf-binary'],\n  binary: true,\n  parse,\n  parseSync,\n  options: {\n    glb: {\n      strict: false\n    }\n  }\n};\n\nasync function parse(arrayBuffer, options) {\n  return parseSync(arrayBuffer, options);\n}\n\nfunction parseSync(arrayBuffer, options) {\n  const {\n    byteOffset = 0\n  } = options || {};\n  const glb = {};\n  parseGLBSync(glb, arrayBuffer, byteOffset, options === null || options === void 0 ? void 0 : options.glb);\n  return glb;\n}\n\nexport const _TypecheckGLBLoader = GLBLoader;","map":{"version":3,"mappings":"AAGA,SAAQA,OAAR,QAAsB,qBAAtB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AAWA,OAAO,MAAMC,SAA2B,GAAG;EACzCC,IAAI,EAAE,KADmC;EAEzCC,EAAE,EAAE,KAFqC;EAGzCC,MAAM,EAAE,MAHiC;EAIzCC,OAAO,EAAEN,OAJgC;EAKzCO,UAAU,EAAE,CAAC,KAAD,CAL6B;EAMzCC,SAAS,EAAE,CAAC,mBAAD,CAN8B;EAOzCC,MAAM,EAAE,IAPiC;EAQzCC,KARyC;EASzCC,SATyC;EAUzCC,OAAO,EAAE;IACPC,GAAG,EAAE;MACHC,MAAM,EAAE;IADL;EADE;AAVgC,CAApC;;AAiBP,eAAeJ,KAAf,CAAqBK,WAArB,EAA+CH,OAA/C,EAAyF;EACvF,OAAOD,SAAS,CAACI,WAAD,EAAcH,OAAd,CAAhB;AACD;;AAED,SAASD,SAAT,CAAmBI,WAAnB,EAA6CH,OAA7C,EAA8E;EAC5E,MAAM;IAACI,UAAU,GAAG;EAAd,IAAmBJ,OAAO,IAAI,EAApC;EACA,MAAMC,GAAQ,GAAG,EAAjB;EACAZ,YAAY,CAACY,GAAD,EAAME,WAAN,EAAmBC,UAAnB,EAA+BJ,OAA/B,SAA+BA,WAA/B,WAA+BA,GAA/B,MAA+BA,UAAO,CAAEC,GAAxC,CAAZZ;EACA,OAAOY,GAAP;AACD;;AAGD,OAAO,MAAMI,mBAAqC,GAAGf,SAA9C","names":["VERSION","parseGLBSync","GLBLoader","name","id","module","version","extensions","mimeTypes","binary","parse","parseSync","options","glb","strict","arrayBuffer","byteOffset","_TypecheckGLBLoader"],"sources":["../../src/glb-loader.ts"],"sourcesContent":["import type {LoaderWithParser, LoaderOptions} from '@loaders.gl/loader-utils';\nimport type {GLB} from './lib/types/glb-types';\nimport type {GLBParseOptions} from './lib/parsers/parse-glb';\nimport {VERSION} from './lib/utils/version';\nimport parseGLBSync from './lib/parsers/parse-glb';\n\nexport type GLBLoaderOptions = LoaderOptions & {\n  glb?: GLBParseOptions;\n  byteOffset?: number;\n};\n\n/**\n * GLB Loader -\n * GLB is the binary container format for GLTF\n */\nexport const GLBLoader: LoaderWithParser = {\n  name: 'GLB',\n  id: 'glb',\n  module: 'gltf',\n  version: VERSION,\n  extensions: ['glb'],\n  mimeTypes: ['model/gltf-binary'],\n  binary: true,\n  parse,\n  parseSync,\n  options: {\n    glb: {\n      strict: false // Enables deprecated XVIZ support (illegal CHUNK formats)\n    }\n  }\n};\n\nasync function parse(arrayBuffer: ArrayBuffer, options?: GLBLoaderOptions): Promise<GLB> {\n  return parseSync(arrayBuffer, options);\n}\n\nfunction parseSync(arrayBuffer: ArrayBuffer, options?: GLBLoaderOptions): GLB {\n  const {byteOffset = 0} = options || {};\n  const glb: GLB = {} as GLB;\n  parseGLBSync(glb, arrayBuffer, byteOffset, options?.glb);\n  return glb;\n}\n\n// TYPE TESTS - TODO find a better way than exporting junk\nexport const _TypecheckGLBLoader: LoaderWithParser = GLBLoader;\n"]},"metadata":{},"sourceType":"module"}