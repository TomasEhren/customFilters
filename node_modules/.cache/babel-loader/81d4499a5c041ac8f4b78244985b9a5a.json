{"ast":null,"code":"import { LayerExtension } from '@deck.gl/core';\nconst defaultProps = {\n  clipBounds: [0, 0, 1, 1]\n};\nconst shaderFunction = \"\\nuniform vec4 clip_bounds;\\n\\nbool clip_isInBounds(vec2 position) {\\n  return position.x >= clip_bounds[0] && position.y >= clip_bounds[1] && position.x < clip_bounds[2] && position.y < clip_bounds[3];\\n}\\n\";\nconst shaderModuleVs = {\n  name: 'clip-vs',\n  vs: shaderFunction\n};\nconst injectionVs = {\n  'vs:#decl': \"\\nvarying float clip_isVisible;\\n\",\n  'vs:DECKGL_FILTER_GL_POSITION': \"\\n  clip_isVisible = float(clip_isInBounds(geometry.worldPosition.xy));\\n\",\n  'fs:#decl': \"\\nvarying float clip_isVisible;\\n\",\n  'fs:DECKGL_FILTER_COLOR': \"\\n  if (clip_isVisible < 0.5) discard;\\n\"\n};\nconst shaderModuleFs = {\n  name: 'clip-fs',\n  fs: shaderFunction\n};\nconst injectionFs = {\n  'vs:#decl': \"\\nvarying vec2 clip_commonPosition;\\n\",\n  'vs:DECKGL_FILTER_GL_POSITION': \"\\n  clip_commonPosition = geometry.position.xy;\\n\",\n  'fs:#decl': \"\\nvarying vec2 clip_commonPosition;\\n\",\n  'fs:DECKGL_FILTER_COLOR': \"\\n  if (!clip_isInBounds(clip_commonPosition)) discard;\\n\"\n};\nexport default class ClipExtension extends LayerExtension {\n  getShaders() {\n    let clipByInstance = ('instancePositions' in this.getAttributeManager().attributes);\n\n    if ('clipByInstance' in this.props) {\n      clipByInstance = this.props.clipByInstance;\n    }\n\n    this.state.clipByInstance = clipByInstance;\n    return clipByInstance ? {\n      modules: [shaderModuleVs],\n      inject: injectionVs\n    } : {\n      modules: [shaderModuleFs],\n      inject: injectionFs\n    };\n  }\n\n  draw(_ref) {\n    let {\n      uniforms\n    } = _ref;\n    const {\n      clipBounds = defaultProps.clipBounds\n    } = this.props;\n\n    if (this.state.clipByInstance) {\n      uniforms.clip_bounds = clipBounds;\n    } else {\n      const corner0 = this.projectPosition([clipBounds[0], clipBounds[1], 0]);\n      const corner1 = this.projectPosition([clipBounds[2], clipBounds[3], 0]);\n      uniforms.clip_bounds = [Math.min(corner0[0], corner1[0]), Math.min(corner0[1], corner1[1]), Math.max(corner0[0], corner1[0]), Math.max(corner0[1], corner1[1])];\n    }\n  }\n\n}\nClipExtension.extensionName = 'ClipExtension';\nClipExtension.defaultProps = defaultProps;","map":{"version":3,"mappings":"AAoBA,SAAQA,cAAR,QAA6B,eAA7B;AAEA,MAAMC,YAAY,GAAG;EACnBC,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AADO,CAArB;AAIA,MAAMC,cAAc,oNAApB;AAYA,MAAMC,cAAc,GAAG;EACrBC,IAAI,EAAE,SADe;EAErBC,EAAE,EAAEH;AAFiB,CAAvB;AAKA,MAAMI,WAAW,GAAG;EAClB,+CADkB;EAIlB,2GAJkB;EAOlB,+CAPkB;EAUlB;AAVkB,CAApB;AAmBA,MAAMC,cAAc,GAAG;EACrBH,IAAI,EAAE,SADe;EAErBI,EAAE,EAAEN;AAFiB,CAAvB;AAKA,MAAMO,WAAW,GAAG;EAClB,mDADkB;EAIlB,mFAJkB;EAOlB,mDAPkB;EAUlB;AAVkB,CAApB;AAeA,eAAe,MAAMC,aAAN,SAA4BX,cAA5B,CAA2C;EACxDY,UAAU,GAAG;IAKX,IAAIC,cAAc,IAAG,uBAAuB,KAAKC,mBAAL,GAA2BC,UAArD,CAAlB;;IAEA,IAAI,oBAAoB,KAAKC,KAA7B,EAAoC;MAClCH,cAAc,GAAG,KAAKG,KAAL,CAAWH,cAA5BA;IACD;;IACD,KAAKI,KAAL,CAAWJ,cAAX,GAA4BA,cAA5B;IAEA,OAAOA,cAAc,GACjB;MACEK,OAAO,EAAE,CAACd,cAAD,CADX;MAEEe,MAAM,EAAEZ;IAFV,CADiB,GAKjB;MACEW,OAAO,EAAE,CAACV,cAAD,CADX;MAEEW,MAAM,EAAET;IAFV,CALJ;EASD;;EAEDU,IAAI,OAAa;IAAA,IAAZ;MAACC;IAAD,CAAY;IACf,MAAM;MAACnB,UAAU,GAAGD,YAAY,CAACC;IAA3B,IAAyC,KAAKc,KAApD;;IACA,IAAI,KAAKC,KAAL,CAAWJ,cAAf,EAA+B;MAC7BQ,QAAQ,CAACC,WAATD,GAAuBnB,UAAvBmB;IADF,OAEO;MACL,MAAME,OAAO,GAAG,KAAKC,eAAL,CAAqB,CAACtB,UAAU,CAAC,CAAD,CAAX,EAAgBA,UAAU,CAAC,CAAD,CAA1B,EAA+B,CAA/B,CAArB,CAAhB;MACA,MAAMuB,OAAO,GAAG,KAAKD,eAAL,CAAqB,CAACtB,UAAU,CAAC,CAAD,CAAX,EAAgBA,UAAU,CAAC,CAAD,CAA1B,EAA+B,CAA/B,CAArB,CAAhB;MAEAmB,QAAQ,CAACC,WAATD,GAAuB,CACrBK,IAAI,CAACC,GAALD,CAASH,OAAO,CAAC,CAAD,CAAhBG,EAAqBD,OAAO,CAAC,CAAD,CAA5BC,CADqB,EAErBA,IAAI,CAACC,GAALD,CAASH,OAAO,CAAC,CAAD,CAAhBG,EAAqBD,OAAO,CAAC,CAAD,CAA5BC,CAFqB,EAGrBA,IAAI,CAACE,GAALF,CAASH,OAAO,CAAC,CAAD,CAAhBG,EAAqBD,OAAO,CAAC,CAAD,CAA5BC,CAHqB,EAIrBA,IAAI,CAACE,GAALF,CAASH,OAAO,CAAC,CAAD,CAAhBG,EAAqBD,OAAO,CAAC,CAAD,CAA5BC,CAJqB,CAAvBL;IAMD;EACF;;AAvCuD;AA0C1DV,aAAa,CAACkB,aAAdlB,GAA8B,eAA9BA;AACAA,aAAa,CAACV,YAAdU,GAA6BV,YAA7BU","names":["LayerExtension","defaultProps","clipBounds","shaderFunction","shaderModuleVs","name","vs","injectionVs","shaderModuleFs","fs","injectionFs","ClipExtension","getShaders","clipByInstance","getAttributeManager","attributes","props","state","modules","inject","draw","uniforms","clip_bounds","corner0","projectPosition","corner1","Math","min","max","extensionName"],"sources":["../../../src/clip/clip.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerExtension} from '@deck.gl/core';\n\nconst defaultProps = {\n  clipBounds: [0, 0, 1, 1]\n};\n\nconst shaderFunction = `\nuniform vec4 clip_bounds;\n\nbool clip_isInBounds(vec2 position) {\n  return position.x >= clip_bounds[0] && position.y >= clip_bounds[1] && position.x < clip_bounds[2] && position.y < clip_bounds[3];\n}\n`;\n\n/*\n * The vertex-shader version clips geometries by their anchor position\n * e.g. ScatterplotLayer - show if the center of a circle is within bounds\n */\nconst shaderModuleVs = {\n  name: 'clip-vs',\n  vs: shaderFunction\n};\n\nconst injectionVs = {\n  'vs:#decl': `\nvarying float clip_isVisible;\n`,\n  'vs:DECKGL_FILTER_GL_POSITION': `\n  clip_isVisible = float(clip_isInBounds(geometry.worldPosition.xy));\n`,\n  'fs:#decl': `\nvarying float clip_isVisible;\n`,\n  'fs:DECKGL_FILTER_COLOR': `\n  if (clip_isVisible < 0.5) discard;\n`\n};\n\n/*\n * The fragment-shader version clips pixels at the bounds\n * e.g. PolygonLayer - show the part of the polygon that intersect with the bounds\n */\nconst shaderModuleFs = {\n  name: 'clip-fs',\n  fs: shaderFunction\n};\n\nconst injectionFs = {\n  'vs:#decl': `\nvarying vec2 clip_commonPosition;\n`,\n  'vs:DECKGL_FILTER_GL_POSITION': `\n  clip_commonPosition = geometry.position.xy;\n`,\n  'fs:#decl': `\nvarying vec2 clip_commonPosition;\n`,\n  'fs:DECKGL_FILTER_COLOR': `\n  if (!clip_isInBounds(clip_commonPosition)) discard;\n`\n};\n\nexport default class ClipExtension extends LayerExtension {\n  getShaders() {\n    // If `clipByInstance: true`, the entire object is shown/hidden based on its anchor position (done by vertex shader)\n    // Otherwise, the object is trimmed by the clip bounds (done by fragment shader)\n\n    // Default behavior: consider a layer instanced if it has attribute `instancePositions`\n    let clipByInstance = 'instancePositions' in this.getAttributeManager().attributes;\n    // Users can override by setting the `clipByInstance` prop\n    if ('clipByInstance' in this.props) {\n      clipByInstance = this.props.clipByInstance;\n    }\n    this.state.clipByInstance = clipByInstance;\n\n    return clipByInstance\n      ? {\n          modules: [shaderModuleVs],\n          inject: injectionVs\n        }\n      : {\n          modules: [shaderModuleFs],\n          inject: injectionFs\n        };\n  }\n\n  draw({uniforms}) {\n    const {clipBounds = defaultProps.clipBounds} = this.props;\n    if (this.state.clipByInstance) {\n      uniforms.clip_bounds = clipBounds;\n    } else {\n      const corner0 = this.projectPosition([clipBounds[0], clipBounds[1], 0]);\n      const corner1 = this.projectPosition([clipBounds[2], clipBounds[3], 0]);\n\n      uniforms.clip_bounds = [\n        Math.min(corner0[0], corner1[0]),\n        Math.min(corner0[1], corner1[1]),\n        Math.max(corner0[0], corner1[0]),\n        Math.max(corner0[1], corner1[1])\n      ];\n    }\n  }\n}\n\nClipExtension.extensionName = 'ClipExtension';\nClipExtension.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}