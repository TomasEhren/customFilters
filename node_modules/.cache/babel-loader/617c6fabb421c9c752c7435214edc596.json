{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { CompositeLayer, _flatten as flatten } from '@deck.gl/core';\nimport { GeoJsonLayer } from '@deck.gl/layers';\nimport Tileset2D, { STRATEGY_DEFAULT } from './tileset-2d';\nimport { urlType, getURLFromTemplate } from './utils';\nvar defaultProps = {\n  data: [],\n  dataComparator: urlType.equals,\n  renderSubLayers: {\n    type: 'function',\n    value: function value(props) {\n      return new GeoJsonLayer(props);\n    },\n    compare: false\n  },\n  getTileData: {\n    type: 'function',\n    optional: true,\n    value: null,\n    compare: false\n  },\n  onViewportLoad: {\n    type: 'function',\n    optional: true,\n    value: null,\n    compare: false\n  },\n  onTileLoad: {\n    type: 'function',\n    value: function value(tile) {},\n    compare: false\n  },\n  onTileUnload: {\n    type: 'function',\n    value: function value(tile) {},\n    compare: false\n  },\n  onTileError: {\n    type: 'function',\n    value: function value(err) {\n      return console.error(err);\n    },\n    compare: false\n  },\n  extent: {\n    type: 'array',\n    optional: true,\n    value: null,\n    compare: true\n  },\n  tileSize: 512,\n  maxZoom: null,\n  minZoom: 0,\n  maxCacheSize: null,\n  maxCacheByteSize: null,\n  refinementStrategy: STRATEGY_DEFAULT,\n  zRange: null,\n  maxRequests: 6,\n  zoomOffset: 0\n};\n\nvar TileLayer = /*#__PURE__*/function (_CompositeLayer) {\n  _inherits(TileLayer, _CompositeLayer);\n\n  var _super = _createSuper(TileLayer);\n\n  function TileLayer() {\n    _classCallCheck(this, TileLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TileLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        tileset: null,\n        isLoaded: false\n      };\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      var _this$state$tileset;\n\n      (_this$state$tileset = this.state.tileset) === null || _this$state$tileset === void 0 ? void 0 : _this$state$tileset.finalize();\n    }\n  }, {\n    key: \"isLoaded\",\n    get: function get() {\n      var tileset = this.state.tileset;\n      return tileset.selectedTiles.every(function (tile) {\n        return tile.isLoaded && tile.layers && tile.layers.every(function (layer) {\n          return layer.isLoaded;\n        });\n      });\n    }\n  }, {\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref) {\n      var changeFlags = _ref.changeFlags;\n      return changeFlags.somethingChanged;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref2) {\n      var props = _ref2.props,\n          changeFlags = _ref2.changeFlags;\n      var tileset = this.state.tileset;\n      var propsChanged = changeFlags.propsOrDataChanged || changeFlags.updateTriggersChanged;\n      var dataChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData);\n\n      if (!tileset) {\n        tileset = new Tileset2D(this._getTilesetOptions(props));\n        this.setState({\n          tileset: tileset\n        });\n      } else if (propsChanged) {\n        tileset.setOptions(this._getTilesetOptions(props));\n\n        if (dataChanged) {\n          tileset.reloadAll();\n        } else {\n          this.state.tileset.tiles.forEach(function (tile) {\n            tile.layers = null;\n          });\n        }\n      }\n\n      this._updateTileset();\n    }\n  }, {\n    key: \"_getTilesetOptions\",\n    value: function _getTilesetOptions(props) {\n      var tileSize = props.tileSize,\n          maxCacheSize = props.maxCacheSize,\n          maxCacheByteSize = props.maxCacheByteSize,\n          refinementStrategy = props.refinementStrategy,\n          extent = props.extent,\n          maxZoom = props.maxZoom,\n          minZoom = props.minZoom,\n          maxRequests = props.maxRequests,\n          zoomOffset = props.zoomOffset;\n      return {\n        maxCacheSize: maxCacheSize,\n        maxCacheByteSize: maxCacheByteSize,\n        maxZoom: maxZoom,\n        minZoom: minZoom,\n        tileSize: tileSize,\n        refinementStrategy: refinementStrategy,\n        extent: extent,\n        maxRequests: maxRequests,\n        zoomOffset: zoomOffset,\n        getTileData: this.getTileData.bind(this),\n        onTileLoad: this._onTileLoad.bind(this),\n        onTileError: this._onTileError.bind(this),\n        onTileUnload: this._onTileUnload.bind(this)\n      };\n    }\n  }, {\n    key: \"_updateTileset\",\n    value: function _updateTileset() {\n      var tileset = this.state.tileset;\n      var _this$props = this.props,\n          zRange = _this$props.zRange,\n          modelMatrix = _this$props.modelMatrix;\n      var frameNumber = tileset.update(this.context.viewport, {\n        zRange: zRange,\n        modelMatrix: modelMatrix\n      });\n      var isLoaded = tileset.isLoaded;\n      var loadingStateChanged = this.state.isLoaded !== isLoaded;\n      var tilesetChanged = this.state.frameNumber !== frameNumber;\n\n      if (isLoaded && (loadingStateChanged || tilesetChanged)) {\n        this._onViewportLoad();\n      }\n\n      if (tilesetChanged) {\n        this.setState({\n          frameNumber: frameNumber\n        });\n      }\n\n      this.state.isLoaded = isLoaded;\n    }\n  }, {\n    key: \"_onViewportLoad\",\n    value: function _onViewportLoad() {\n      var tileset = this.state.tileset;\n      var onViewportLoad = this.props.onViewportLoad;\n\n      if (onViewportLoad) {\n        onViewportLoad(tileset.selectedTiles);\n      }\n    }\n  }, {\n    key: \"_onTileLoad\",\n    value: function _onTileLoad(tile) {\n      this.props.onTileLoad(tile);\n      tile.layers = null;\n      this.setNeedsUpdate();\n    }\n  }, {\n    key: \"_onTileError\",\n    value: function _onTileError(error, tile) {\n      this.props.onTileError(error);\n      tile.layers = null;\n      this.setNeedsUpdate();\n    }\n  }, {\n    key: \"_onTileUnload\",\n    value: function _onTileUnload(tile) {\n      this.props.onTileUnload(tile);\n    }\n  }, {\n    key: \"getTileData\",\n    value: function getTileData(tile) {\n      var _this$props2 = this.props,\n          data = _this$props2.data,\n          getTileData = _this$props2.getTileData,\n          fetch = _this$props2.fetch;\n      var signal = tile.signal;\n      tile.url = getURLFromTemplate(data, tile);\n\n      if (getTileData) {\n        return getTileData(tile);\n      }\n\n      if (tile.url) {\n        return fetch(tile.url, {\n          propName: 'data',\n          layer: this,\n          signal: signal\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderSubLayers\",\n    value: function renderSubLayers(props) {\n      return this.props.renderSubLayers(props);\n    }\n  }, {\n    key: \"getSubLayerPropsByTile\",\n    value: function getSubLayerPropsByTile(tile) {\n      return null;\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref3) {\n      var info = _ref3.info,\n          sourceLayer = _ref3.sourceLayer;\n      info.tile = sourceLayer.props.tile;\n      return info;\n    }\n  }, {\n    key: \"_updateAutoHighlight\",\n    value: function _updateAutoHighlight(info) {\n      if (info.sourceLayer) {\n        info.sourceLayer.updateAutoHighlight(info);\n      }\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this = this;\n\n      return this.state.tileset.tiles.map(function (tile) {\n        var subLayerProps = _this.getSubLayerPropsByTile(tile);\n\n        if (!tile.isLoaded && !tile.content) {} else if (!tile.layers) {\n          var layers = _this.renderSubLayers(_objectSpread(_objectSpread({}, _this.props), {}, {\n            id: \"\".concat(_this.id, \"-\").concat(tile.x, \"-\").concat(tile.y, \"-\").concat(tile.z),\n            data: tile.content,\n            _offset: 0,\n            tile: tile\n          }));\n\n          tile.layers = flatten(layers, Boolean).map(function (layer) {\n            return layer.clone(_objectSpread({\n              tile: tile\n            }, subLayerProps));\n          });\n        } else if (subLayerProps && tile.layers[0] && Object.keys(subLayerProps).some(function (propName) {\n          return tile.layers[0].props[propName] !== subLayerProps[propName];\n        })) {\n          tile.layers = tile.layers.map(function (layer) {\n            return layer.clone(subLayerProps);\n          });\n        }\n\n        return tile.layers;\n      });\n    }\n  }, {\n    key: \"filterSubLayer\",\n    value: function filterSubLayer(_ref4) {\n      var layer = _ref4.layer;\n      return layer.props.tile.isVisible;\n    }\n  }]);\n\n  return TileLayer;\n}(CompositeLayer);\n\nexport { TileLayer as default };\nTileLayer.layerName = 'TileLayer';\nTileLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":";;;;;AAAA,SAAQA,cAAR,EAAwBC,QAAQ,IAAIC,OAApC,QAAkD,eAAlD;AACA,SAAQC,YAAR,QAA2B,iBAA3B;AAEA,OAAOC,SAAP,IAAmBC,gBAAnB,QAA0C,cAA1C;AACA,SAAQC,OAAR,EAAiBC,kBAAjB,QAA0C,SAA1C;AAEA,IAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,EADa;EAEnBC,cAAc,EAAEJ,OAAO,CAACK,MAFL;EAGnBC,eAAe,EAAE;IAACC,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAEC,oBAAK;MAAA,OAAI,IAAIZ,YAAJ,CAAiBY,KAAjB,CAAJ;IAAA,CAA/B;IAA4DC,OAAO,EAAE;EAArE,CAHE;EAInBC,WAAW,EAAE;IAACJ,IAAI,EAAE,UAAP;IAAmBK,QAAQ,EAAE,IAA7B;IAAmCJ,KAAK,EAAE,IAA1C;IAAgDE,OAAO,EAAE;EAAzD,CAJM;EAMnBG,cAAc,EAAE;IAACN,IAAI,EAAE,UAAP;IAAmBK,QAAQ,EAAE,IAA7B;IAAmCJ,KAAK,EAAE,IAA1C;IAAgDE,OAAO,EAAE;EAAzD,CANG;EAOnBI,UAAU,EAAE;IAACP,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAEO,mBAAI,EAAI,CAAlC;IAAsCL,OAAO,EAAE;EAA/C,CAPO;EAQnBM,YAAY,EAAE;IAACT,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAEO,mBAAI,EAAI,CAAlC;IAAsCL,OAAO,EAAE;EAA/C,CARK;EAUnBO,WAAW,EAAE;IAACV,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAEU,kBAAG;MAAA,OAAIC,OAAO,CAACC,KAARD,CAAcD,GAAdC,CAAJ;IAAA,CAA7B;IAAqDT,OAAO,EAAE;EAA9D,CAVM;EAWnBW,MAAM,EAAE;IAACd,IAAI,EAAE,OAAP;IAAgBK,QAAQ,EAAE,IAA1B;IAAgCJ,KAAK,EAAE,IAAvC;IAA6CE,OAAO,EAAE;EAAtD,CAXW;EAYnBY,QAAQ,EAAE,GAZS;EAanBC,OAAO,EAAE,IAbU;EAcnBC,OAAO,EAAE,CAdU;EAenBC,YAAY,EAAE,IAfK;EAgBnBC,gBAAgB,EAAE,IAhBC;EAiBnBC,kBAAkB,EAAE5B,gBAjBD;EAkBnB6B,MAAM,EAAE,IAlBW;EAmBnBC,WAAW,EAAE,CAnBM;EAoBnBC,UAAU,EAAE;AApBO,CAArB;;IAuBqBC,S;;;;;;;;;;;;;WACnBC,2BAAkB;MAChB,KAAKC,KAAL,GAAa;QACXC,OAAO,EAAE,IADE;QAEXC,QAAQ,EAAE;MAFC,CAAb;IAID;;;WAEDC,yBAAgB;MAAA;;MACd,4BAAKH,KAAL,CAAWC,OAAX,4EAAoBG,QAApB;IACD;;;SAEW,eAAG;MACb,IAAOH,OAAP,GAAkB,KAAKD,KAAvB,CAAOC,OAAP;MACA,OAAOA,OAAO,CAACI,aAARJ,CAAsBK,KAAtBL,CACLnB,cAAI;QAAA,OAAIA,IAAI,CAACoB,QAALpB,IAAiBA,IAAI,CAACyB,MAAtBzB,IAAgCA,IAAI,CAACyB,MAALzB,CAAYwB,KAAZxB,CAAkB0B,eAAK;UAAA,OAAIA,KAAK,CAACN,QAAV;QAAA,CAAvBpB,CAApC;MAAA,CADCmB,CAAP;IAGD;;;WAEDQ,iCAAiC;MAAA,IAAdC,WAAc,QAAdA,WAAc;MAC/B,OAAOA,WAAW,CAACC,gBAAnB;IACD;;;WAEDC,4BAAkC;MAAA,IAArBpC,KAAqB,SAArBA,KAAqB;MAAA,IAAdkC,WAAc,SAAdA,WAAc;MAChC,IAAKT,OAAL,GAAgB,KAAKD,KAArB,CAAKC,OAAL;MACA,IAAMY,YAAY,GAAGH,WAAW,CAACI,kBAAZJ,IAAkCA,WAAW,CAACK,qBAAnE;MACA,IAAMC,WAAW,GACfN,WAAW,CAACM,WAAZN,IACCA,WAAW,CAACK,qBAAZL,KACEA,WAAW,CAACK,qBAAZL,CAAkCO,GAAlCP,IAAyCA,WAAW,CAACK,qBAAZL,CAAkChC,WAD7EgC,CAFH;;MAKA,IAAI,CAACT,OAAL,EAAc;QACZA,OAAO,GAAG,IAAIpC,SAAJ,CAAc,KAAKqD,kBAAL,CAAwB1C,KAAxB,CAAd,CAAVyB;QACA,KAAKkB,QAAL,CAAc;UAAClB;QAAD,CAAd;MAFF,OAGO,IAAIY,YAAJ,EAAkB;QACvBZ,OAAO,CAACmB,UAARnB,CAAmB,KAAKiB,kBAAL,CAAwB1C,KAAxB,CAAnByB;;QAEA,IAAIe,WAAJ,EAAiB;UAGff,OAAO,CAACoB,SAARpB;QAHF,OAIO;UAEL,KAAKD,KAAL,CAAWC,OAAX,CAAmBqB,KAAnB,CAAyBC,OAAzB,CAAiCzC,cAAI,EAAI;YACvCA,IAAI,CAACyB,MAALzB,GAAc,IAAdA;UADF;QAGD;MACF;;MAED,KAAK0C,cAAL;IACD;;;WAEDN,4BAAmB1C,KAAnB0C,EAA0B;MACxB,IACE7B,QADF,GAUIb,KAVJ,CACEa,QADF;MAAA,IAEEG,YAFF,GAUIhB,KAVJ,CAEEgB,YAFF;MAAA,IAGEC,gBAHF,GAUIjB,KAVJ,CAGEiB,gBAHF;MAAA,IAIEC,kBAJF,GAUIlB,KAVJ,CAIEkB,kBAJF;MAAA,IAKEN,MALF,GAUIZ,KAVJ,CAKEY,MALF;MAAA,IAMEE,OANF,GAUId,KAVJ,CAMEc,OANF;MAAA,IAOEC,OAPF,GAUIf,KAVJ,CAOEe,OAPF;MAAA,IAQEK,WARF,GAUIpB,KAVJ,CAQEoB,WARF;MAAA,IASEC,UATF,GAUIrB,KAVJ,CASEqB,UATF;MAYA,OAAO;QACLL,YADK,EACLA,YADK;QAELC,gBAFK,EAELA,gBAFK;QAGLH,OAHK,EAGLA,OAHK;QAILC,OAJK,EAILA,OAJK;QAKLF,QALK,EAKLA,QALK;QAMLK,kBANK,EAMLA,kBANK;QAOLN,MAPK,EAOLA,MAPK;QAQLQ,WARK,EAQLA,WARK;QASLC,UATK,EASLA,UATK;QAWLnB,WAAW,EAAE,KAAKA,WAAL,CAAiB+C,IAAjB,CAAsB,IAAtB,CAXR;QAYL5C,UAAU,EAAE,KAAK6C,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAZP;QAaLzC,WAAW,EAAE,KAAK2C,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAbR;QAcL1C,YAAY,EAAE,KAAK6C,aAAL,CAAmBH,IAAnB,CAAwB,IAAxB;MAdT,CAAP;IAgBD;;;WAEDD,0BAAiB;MACf,IAAOvB,OAAP,GAAkB,KAAKD,KAAvB,CAAOC,OAAP;MACA,kBAA8B,KAAKzB,KAAnC;MAAA,IAAOmB,MAAP,eAAOA,MAAP;MAAA,IAAekC,WAAf,eAAeA,WAAf;MACA,IAAMC,WAAW,GAAG7B,OAAO,CAAC8B,MAAR9B,CAAe,KAAK+B,OAAL,CAAaC,QAA5BhC,EAAsC;QAACN,MAAD,EAACA,MAAD;QAASkC;MAAT,CAAtC5B,CAApB;MACA,IAAOC,QAAP,GAAmBD,OAAnB,CAAOC,QAAP;MAEA,IAAMgC,mBAAmB,GAAG,KAAKlC,KAAL,CAAWE,QAAX,KAAwBA,QAApD;MACA,IAAMiC,cAAc,GAAG,KAAKnC,KAAL,CAAW8B,WAAX,KAA2BA,WAAlD;;MAEA,IAAI5B,QAAQ,KAAKgC,mBAAmB,IAAIC,cAA5B,CAAZ,EAAyD;QACvD,KAAKC,eAAL;MACD;;MAED,IAAID,cAAJ,EAAoB;QAElB,KAAKhB,QAAL,CAAc;UAACW;QAAD,CAAd;MACD;;MAED,KAAK9B,KAAL,CAAWE,QAAX,GAAsBA,QAAtB;IACD;;;WAEDkC,2BAAkB;MAChB,IAAOnC,OAAP,GAAkB,KAAKD,KAAvB,CAAOC,OAAP;MACA,IAAOrB,cAAP,GAAyB,KAAKJ,KAA9B,CAAOI,cAAP;;MAEA,IAAIA,cAAJ,EAAoB;QAClBA,cAAc,CAACqB,OAAO,CAACI,aAAT,CAAdzB;MACD;IACF;;;WAED8C,qBAAY5C,IAAZ4C,EAAkB;MAChB,KAAKlD,KAAL,CAAWK,UAAX,CAAsBC,IAAtB;MACAA,IAAI,CAACyB,MAALzB,GAAc,IAAdA;MAEA,KAAKuD,cAAL;IACD;;;WAEDV,sBAAaxC,KAAbwC,EAAoB7C,IAApB6C,EAA0B;MACxB,KAAKnD,KAAL,CAAWQ,WAAX,CAAuBG,KAAvB;MACAL,IAAI,CAACyB,MAALzB,GAAc,IAAdA;MAEA,KAAKuD,cAAL;IACD;;;WAEDT,uBAAc9C,IAAd8C,EAAoB;MAClB,KAAKpD,KAAL,CAAWO,YAAX,CAAwBD,IAAxB;IACD;;;WAIDJ,qBAAYI,IAAZJ,EAAkB;MAChB,mBAAmC,KAAKF,KAAxC;MAAA,IAAON,IAAP,gBAAOA,IAAP;MAAA,IAAaQ,WAAb,gBAAaA,WAAb;MAAA,IAA0B4D,KAA1B,gBAA0BA,KAA1B;MACA,IAAOC,MAAP,GAAiBzD,IAAjB,CAAOyD,MAAP;MAEAzD,IAAI,CAAC0D,GAAL1D,GAAWd,kBAAkB,CAACE,IAAD,EAAOY,IAAP,CAA7BA;;MAEA,IAAIJ,WAAJ,EAAiB;QACf,OAAOA,WAAW,CAACI,IAAD,CAAlB;MACD;;MACD,IAAIA,IAAI,CAAC0D,GAAT,EAAc;QACZ,OAAOF,KAAK,CAACxD,IAAI,CAAC0D,GAAN,EAAW;UAACC,QAAQ,EAAE,MAAX;UAAmBjC,KAAK,EAAE,IAA1B;UAAgC+B;QAAhC,CAAX,CAAZ;MACD;;MACD,OAAO,IAAP;IACD;;;WAEDlE,yBAAgBG,KAAhBH,EAAuB;MACrB,OAAO,KAAKG,KAAL,CAAWH,eAAX,CAA2BG,KAA3B,CAAP;IACD;;;WAEDkE,gCAAuB5D,IAAvB4D,EAA6B;MAC3B,OAAO,IAAP;IACD;;;WAEDC,+BAAoC;MAAA,IAApBC,IAAoB,SAApBA,IAAoB;MAAA,IAAdC,WAAc,SAAdA,WAAc;MAClCD,IAAI,CAAC9D,IAAL8D,GAAYC,WAAW,CAACrE,KAAZqE,CAAkB/D,IAA9B8D;MACA,OAAOA,IAAP;IACD;;;WAEDE,8BAAqBF,IAArBE,EAA2B;MACzB,IAAIF,IAAI,CAACC,WAAT,EAAsB;QACpBD,IAAI,CAACC,WAALD,CAAiBG,mBAAjBH,CAAqCA,IAArCA;MACD;IACF;;;WAEDI,wBAAe;MAAA;;MACb,OAAO,KAAKhD,KAAL,CAAWC,OAAX,CAAmBqB,KAAnB,CAAyB2B,GAAzB,CAA6BnE,cAAI,EAAI;QAC1C,IAAMoE,aAAa,GAAG,MAAKR,sBAAL,CAA4B5D,IAA5B,CAAtB;;QAEA,IAAI,CAACA,IAAI,CAACoB,QAAN,IAAkB,CAACpB,IAAI,CAACqE,OAA5B,EAAqC,CAArC,OAEO,IAAI,CAACrE,IAAI,CAACyB,MAAV,EAAkB;UACvB,IAAMA,MAAM,GAAG,MAAKlC,eAAL,iCACV,MAAKG,KADK;YAEb4E,EAAE,YAAK,MAAKA,EAAV,cAAgBtE,IAAI,CAACuE,CAArB,cAA0BvE,IAAI,CAACwE,CAA/B,cAAoCxE,IAAI,CAACyE,CAAzC,CAFW;YAGbrF,IAAI,EAAEY,IAAI,CAACqE,OAHE;YAIbK,OAAO,EAAE,CAJI;YAKb1E;UALa,GAAf;;UAOAA,IAAI,CAACyB,MAALzB,GAAcnB,OAAO,CAAC4C,MAAD,EAASkD,OAAT,CAAP9F,CAAyBsF,GAAzBtF,CAA6B6C,eAAK;YAAA,OAC9CA,KAAK,CAACkD,KAANlD;cACE1B,IADU,EACVA;YADF0B,GAEK0C,aAFL1C,EAD8C;UAAA,CAAlC7C,CAAdmB;QARK,OAcA,IACLoE,aAAa,IACbpE,IAAI,CAACyB,MAALzB,CAAY,CAAZA,CADAoE,IAEAS,MAAM,CAACC,IAAPD,CAAYT,aAAZS,EAA2BE,IAA3BF,CACElB,kBAAQ;UAAA,OAAI3D,IAAI,CAACyB,MAALzB,CAAY,CAAZA,EAAeN,KAAfM,CAAqB2D,QAArB3D,MAAmCoE,aAAa,CAACT,QAAD,CAApD;QAAA,CADVkB,CAHK,EAML;UACA7E,IAAI,CAACyB,MAALzB,GAAcA,IAAI,CAACyB,MAALzB,CAAYmE,GAAZnE,CAAgB0B,eAAK;YAAA,OAAIA,KAAK,CAACkD,KAANlD,CAAY0C,aAAZ1C,CAAJ;UAAA,CAArB1B,CAAdA;QACD;;QACD,OAAOA,IAAI,CAACyB,MAAZ;MA5BK,EAAP;IA8BD;;;WAEDuD,+BAAwB;MAAA,IAARtD,KAAQ,SAARA,KAAQ;MACtB,OAAOA,KAAK,CAAChC,KAANgC,CAAY1B,IAAZ0B,CAAiBuD,SAAxB;IACD;;;;EA1MoCtG,c;;SAAlBqC,S;AA6MrBA,SAAS,CAACkE,SAAVlE,GAAsB,WAAtBA;AACAA,SAAS,CAAC7B,YAAV6B,GAAyB7B,YAAzB6B","names":["CompositeLayer","_flatten","flatten","GeoJsonLayer","Tileset2D","STRATEGY_DEFAULT","urlType","getURLFromTemplate","defaultProps","data","dataComparator","equals","renderSubLayers","type","value","props","compare","getTileData","optional","onViewportLoad","onTileLoad","tile","onTileUnload","onTileError","err","console","error","extent","tileSize","maxZoom","minZoom","maxCacheSize","maxCacheByteSize","refinementStrategy","zRange","maxRequests","zoomOffset","TileLayer","initializeState","state","tileset","isLoaded","finalizeState","finalize","selectedTiles","every","layers","layer","shouldUpdateState","changeFlags","somethingChanged","updateState","propsChanged","propsOrDataChanged","updateTriggersChanged","dataChanged","all","_getTilesetOptions","setState","setOptions","reloadAll","tiles","forEach","_updateTileset","bind","_onTileLoad","_onTileError","_onTileUnload","modelMatrix","frameNumber","update","context","viewport","loadingStateChanged","tilesetChanged","_onViewportLoad","setNeedsUpdate","fetch","signal","url","propName","getSubLayerPropsByTile","getPickingInfo","info","sourceLayer","_updateAutoHighlight","updateAutoHighlight","renderLayers","map","subLayerProps","content","id","x","y","z","_offset","Boolean","clone","Object","keys","some","filterSubLayer","isVisible","layerName"],"sources":["../../../src/tile-layer/tile-layer.js"],"sourcesContent":["import {CompositeLayer, _flatten as flatten} from '@deck.gl/core';\nimport {GeoJsonLayer} from '@deck.gl/layers';\n\nimport Tileset2D, {STRATEGY_DEFAULT} from './tileset-2d';\nimport {urlType, getURLFromTemplate} from './utils';\n\nconst defaultProps = {\n  data: [],\n  dataComparator: urlType.equals,\n  renderSubLayers: {type: 'function', value: props => new GeoJsonLayer(props), compare: false},\n  getTileData: {type: 'function', optional: true, value: null, compare: false},\n  // TODO - change to onViewportLoad to align with Tile3DLayer\n  onViewportLoad: {type: 'function', optional: true, value: null, compare: false},\n  onTileLoad: {type: 'function', value: tile => {}, compare: false},\n  onTileUnload: {type: 'function', value: tile => {}, compare: false},\n  // eslint-disable-next-line\n  onTileError: {type: 'function', value: err => console.error(err), compare: false},\n  extent: {type: 'array', optional: true, value: null, compare: true},\n  tileSize: 512,\n  maxZoom: null,\n  minZoom: 0,\n  maxCacheSize: null,\n  maxCacheByteSize: null,\n  refinementStrategy: STRATEGY_DEFAULT,\n  zRange: null,\n  maxRequests: 6,\n  zoomOffset: 0\n};\n\nexport default class TileLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      tileset: null,\n      isLoaded: false\n    };\n  }\n\n  finalizeState() {\n    this.state.tileset?.finalize();\n  }\n\n  get isLoaded() {\n    const {tileset} = this.state;\n    return tileset.selectedTiles.every(\n      tile => tile.isLoaded && tile.layers && tile.layers.every(layer => layer.isLoaded)\n    );\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({props, changeFlags}) {\n    let {tileset} = this.state;\n    const propsChanged = changeFlags.propsOrDataChanged || changeFlags.updateTriggersChanged;\n    const dataChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData));\n\n    if (!tileset) {\n      tileset = new Tileset2D(this._getTilesetOptions(props));\n      this.setState({tileset});\n    } else if (propsChanged) {\n      tileset.setOptions(this._getTilesetOptions(props));\n\n      if (dataChanged) {\n        // reload all tiles\n        // use cached layers until new content is loaded\n        tileset.reloadAll();\n      } else {\n        // some render options changed, regenerate sub layers now\n        this.state.tileset.tiles.forEach(tile => {\n          tile.layers = null;\n        });\n      }\n    }\n\n    this._updateTileset();\n  }\n\n  _getTilesetOptions(props) {\n    const {\n      tileSize,\n      maxCacheSize,\n      maxCacheByteSize,\n      refinementStrategy,\n      extent,\n      maxZoom,\n      minZoom,\n      maxRequests,\n      zoomOffset\n    } = props;\n\n    return {\n      maxCacheSize,\n      maxCacheByteSize,\n      maxZoom,\n      minZoom,\n      tileSize,\n      refinementStrategy,\n      extent,\n      maxRequests,\n      zoomOffset,\n\n      getTileData: this.getTileData.bind(this),\n      onTileLoad: this._onTileLoad.bind(this),\n      onTileError: this._onTileError.bind(this),\n      onTileUnload: this._onTileUnload.bind(this)\n    };\n  }\n\n  _updateTileset() {\n    const {tileset} = this.state;\n    const {zRange, modelMatrix} = this.props;\n    const frameNumber = tileset.update(this.context.viewport, {zRange, modelMatrix});\n    const {isLoaded} = tileset;\n\n    const loadingStateChanged = this.state.isLoaded !== isLoaded;\n    const tilesetChanged = this.state.frameNumber !== frameNumber;\n\n    if (isLoaded && (loadingStateChanged || tilesetChanged)) {\n      this._onViewportLoad();\n    }\n\n    if (tilesetChanged) {\n      // Save the tileset frame number - trigger a rerender\n      this.setState({frameNumber});\n    }\n    // Save the loaded state - should not trigger a rerender\n    this.state.isLoaded = isLoaded;\n  }\n\n  _onViewportLoad() {\n    const {tileset} = this.state;\n    const {onViewportLoad} = this.props;\n\n    if (onViewportLoad) {\n      onViewportLoad(tileset.selectedTiles);\n    }\n  }\n\n  _onTileLoad(tile) {\n    this.props.onTileLoad(tile);\n    tile.layers = null;\n\n    this.setNeedsUpdate();\n  }\n\n  _onTileError(error, tile) {\n    this.props.onTileError(error);\n    tile.layers = null;\n\n    this.setNeedsUpdate();\n  }\n\n  _onTileUnload(tile) {\n    this.props.onTileUnload(tile);\n  }\n\n  // Methods for subclass to override\n\n  getTileData(tile) {\n    const {data, getTileData, fetch} = this.props;\n    const {signal} = tile;\n\n    tile.url = getURLFromTemplate(data, tile);\n\n    if (getTileData) {\n      return getTileData(tile);\n    }\n    if (tile.url) {\n      return fetch(tile.url, {propName: 'data', layer: this, signal});\n    }\n    return null;\n  }\n\n  renderSubLayers(props) {\n    return this.props.renderSubLayers(props);\n  }\n\n  getSubLayerPropsByTile(tile) {\n    return null;\n  }\n\n  getPickingInfo({info, sourceLayer}) {\n    info.tile = sourceLayer.props.tile;\n    return info;\n  }\n\n  _updateAutoHighlight(info) {\n    if (info.sourceLayer) {\n      info.sourceLayer.updateAutoHighlight(info);\n    }\n  }\n\n  renderLayers() {\n    return this.state.tileset.tiles.map(tile => {\n      const subLayerProps = this.getSubLayerPropsByTile(tile);\n      // cache the rendered layer in the tile\n      if (!tile.isLoaded && !tile.content) {\n        // nothing to show\n      } else if (!tile.layers) {\n        const layers = this.renderSubLayers({\n          ...this.props,\n          id: `${this.id}-${tile.x}-${tile.y}-${tile.z}`,\n          data: tile.content,\n          _offset: 0,\n          tile\n        });\n        tile.layers = flatten(layers, Boolean).map(layer =>\n          layer.clone({\n            tile,\n            ...subLayerProps\n          })\n        );\n      } else if (\n        subLayerProps &&\n        tile.layers[0] &&\n        Object.keys(subLayerProps).some(\n          propName => tile.layers[0].props[propName] !== subLayerProps[propName]\n        )\n      ) {\n        tile.layers = tile.layers.map(layer => layer.clone(subLayerProps));\n      }\n      return tile.layers;\n    });\n  }\n\n  filterSubLayer({layer}) {\n    return layer.props.tile.isVisible;\n  }\n}\n\nTileLayer.layerName = 'TileLayer';\nTileLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}