{"ast":null,"code":"import _toConsumableArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nexport function extractGeometryInfo(features) {\n  var pointPositionsCount = 0;\n  var pointFeaturesCount = 0;\n  var linePositionsCount = 0;\n  var linePathsCount = 0;\n  var lineFeaturesCount = 0;\n  var polygonPositionsCount = 0;\n  var polygonObjectsCount = 0;\n  var polygonRingsCount = 0;\n  var polygonFeaturesCount = 0;\n  var coordLengths = new Set();\n\n  var _iterator = _createForOfIteratorHelper(features),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var feature = _step.value;\n      var geometry = feature.geometry;\n\n      switch (geometry.type) {\n        case 'Point':\n          pointFeaturesCount++;\n          pointPositionsCount++;\n          coordLengths.add(geometry.coordinates.length);\n          break;\n\n        case 'MultiPoint':\n          pointFeaturesCount++;\n          pointPositionsCount += geometry.coordinates.length;\n\n          var _iterator2 = _createForOfIteratorHelper(geometry.coordinates),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var point = _step2.value;\n              coordLengths.add(point.length);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          break;\n\n        case 'LineString':\n          lineFeaturesCount++;\n          linePositionsCount += geometry.coordinates.length;\n          linePathsCount++;\n\n          var _iterator3 = _createForOfIteratorHelper(geometry.coordinates),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var coord = _step3.value;\n              coordLengths.add(coord.length);\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n\n          break;\n\n        case 'MultiLineString':\n          lineFeaturesCount++;\n\n          var _iterator4 = _createForOfIteratorHelper(geometry.coordinates),\n              _step4;\n\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var line = _step4.value;\n              linePositionsCount += line.length;\n              linePathsCount++;\n\n              var _iterator5 = _createForOfIteratorHelper(line),\n                  _step5;\n\n              try {\n                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                  var _coord = _step5.value;\n                  coordLengths.add(_coord.length);\n                }\n              } catch (err) {\n                _iterator5.e(err);\n              } finally {\n                _iterator5.f();\n              }\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n\n          break;\n\n        case 'Polygon':\n          polygonFeaturesCount++;\n          polygonObjectsCount++;\n          polygonRingsCount += geometry.coordinates.length;\n          var flattened = geometry.coordinates.flat();\n          polygonPositionsCount += flattened.length;\n\n          var _iterator6 = _createForOfIteratorHelper(flattened),\n              _step6;\n\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var _coord2 = _step6.value;\n              coordLengths.add(_coord2.length);\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n\n          break;\n\n        case 'MultiPolygon':\n          polygonFeaturesCount++;\n\n          var _iterator7 = _createForOfIteratorHelper(geometry.coordinates),\n              _step7;\n\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var polygon = _step7.value;\n              polygonObjectsCount++;\n              polygonRingsCount += polygon.length;\n\n              var _flattened = polygon.flat();\n\n              polygonPositionsCount += _flattened.length;\n\n              var _iterator8 = _createForOfIteratorHelper(_flattened),\n                  _step8;\n\n              try {\n                for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                  var _coord3 = _step8.value;\n                  coordLengths.add(_coord3.length);\n                }\n              } catch (err) {\n                _iterator8.e(err);\n              } finally {\n                _iterator8.f();\n              }\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n\n          break;\n\n        default:\n          throw new Error(\"Unsupported geometry type: \".concat(geometry.type));\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    coordLength: coordLengths.size > 0 ? Math.max.apply(Math, _toConsumableArray(coordLengths)) : 2,\n    pointPositionsCount: pointPositionsCount,\n    pointFeaturesCount: pointFeaturesCount,\n    linePositionsCount: linePositionsCount,\n    linePathsCount: linePathsCount,\n    lineFeaturesCount: lineFeaturesCount,\n    polygonPositionsCount: polygonPositionsCount,\n    polygonObjectsCount: polygonObjectsCount,\n    polygonRingsCount: polygonRingsCount,\n    polygonFeaturesCount: polygonFeaturesCount\n  };\n}","map":{"version":3,"mappings":"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","names":["extractGeometryInfo","features","pointPositionsCount","pointFeaturesCount","linePositionsCount","linePathsCount","lineFeaturesCount","polygonPositionsCount","polygonObjectsCount","polygonRingsCount","polygonFeaturesCount","coordLengths","Set","feature","geometry","type","add","coordinates","length","point","coord","line","flattened","flat","polygon","Error","coordLength","size","Math","max"],"sources":["../../../src/lib/extract-geometry-info.ts"],"sourcesContent":["import {Feature, GeojsonGeometryInfo} from '@loaders.gl/schema';\n\n/**\n *  Initial scan over GeoJSON features\n *  Counts number of coordinates of each geometry type and\n *  keeps track of the max coordinate dimensions\n */\n// eslint-disable-next-line complexity, max-statements\nexport function extractGeometryInfo(features: Feature[]): GeojsonGeometryInfo {\n  // Counts the number of _positions_, so [x, y, z] counts as one\n  let pointPositionsCount = 0;\n  let pointFeaturesCount = 0;\n  let linePositionsCount = 0;\n  let linePathsCount = 0;\n  let lineFeaturesCount = 0;\n  let polygonPositionsCount = 0;\n  let polygonObjectsCount = 0;\n  let polygonRingsCount = 0;\n  let polygonFeaturesCount = 0;\n  const coordLengths = new Set<number>();\n\n  for (const feature of features) {\n    const geometry = feature.geometry;\n    switch (geometry.type) {\n      case 'Point':\n        pointFeaturesCount++;\n        pointPositionsCount++;\n        coordLengths.add(geometry.coordinates.length);\n        break;\n      case 'MultiPoint':\n        pointFeaturesCount++;\n        pointPositionsCount += geometry.coordinates.length;\n        for (const point of geometry.coordinates) {\n          coordLengths.add(point.length);\n        }\n        break;\n      case 'LineString':\n        lineFeaturesCount++;\n        linePositionsCount += geometry.coordinates.length;\n        linePathsCount++;\n\n        for (const coord of geometry.coordinates) {\n          coordLengths.add(coord.length);\n        }\n        break;\n      case 'MultiLineString':\n        lineFeaturesCount++;\n        for (const line of geometry.coordinates) {\n          linePositionsCount += line.length;\n          linePathsCount++;\n\n          // eslint-disable-next-line max-depth\n          for (const coord of line) {\n            coordLengths.add(coord.length);\n          }\n        }\n        break;\n      case 'Polygon':\n        polygonFeaturesCount++;\n        polygonObjectsCount++;\n        polygonRingsCount += geometry.coordinates.length;\n        const flattened = geometry.coordinates.flat();\n        polygonPositionsCount += flattened.length;\n\n        for (const coord of flattened) {\n          coordLengths.add(coord.length);\n        }\n        break;\n      case 'MultiPolygon':\n        polygonFeaturesCount++;\n        for (const polygon of geometry.coordinates) {\n          polygonObjectsCount++;\n          polygonRingsCount += polygon.length;\n          const flattened = polygon.flat();\n          polygonPositionsCount += flattened.length;\n\n          // eslint-disable-next-line max-depth\n          for (const coord of flattened) {\n            coordLengths.add(coord.length);\n          }\n        }\n        break;\n      default:\n        throw new Error(`Unsupported geometry type: ${geometry.type}`);\n    }\n  }\n\n  return {\n    coordLength: coordLengths.size > 0 ? Math.max(...coordLengths) : 2,\n\n    pointPositionsCount,\n    pointFeaturesCount,\n    linePositionsCount,\n    linePathsCount,\n    lineFeaturesCount,\n    polygonPositionsCount,\n    polygonObjectsCount,\n    polygonRingsCount,\n    polygonFeaturesCount\n  };\n}\n"]},"metadata":{},"sourceType":"module"}