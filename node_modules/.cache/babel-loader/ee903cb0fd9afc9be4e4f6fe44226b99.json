{"ast":null,"code":"import _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport View from './view';\nimport Viewport from '../viewports/viewport';\nimport { Matrix4 } from '@math.gl/core';\nimport { pixelsToWorld } from '@math.gl/web-mercator';\nimport * as vec2 from 'gl-matrix/vec2';\nimport OrthographicController from '../controllers/orthographic-controller';\nvar viewMatrix = new Matrix4().lookAt({\n  eye: [0, 0, 1]\n});\n\nfunction getProjectionMatrix(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      near = _ref.near,\n      far = _ref.far;\n  width = width || 1;\n  height = height || 1;\n  return new Matrix4().ortho({\n    left: -width / 2,\n    right: width / 2,\n    bottom: -height / 2,\n    top: height / 2,\n    near: near,\n    far: far\n  });\n}\n\nvar OrthographicViewport = /*#__PURE__*/function (_Viewport) {\n  _inherits(OrthographicViewport, _Viewport);\n\n  var _super = _createSuper(OrthographicViewport);\n\n  function OrthographicViewport(props) {\n    _classCallCheck(this, OrthographicViewport);\n\n    var width = props.width,\n        height = props.height,\n        _props$near = props.near,\n        near = _props$near === void 0 ? 0.1 : _props$near,\n        _props$far = props.far,\n        far = _props$far === void 0 ? 1000 : _props$far,\n        _props$zoom = props.zoom,\n        zoom = _props$zoom === void 0 ? 0 : _props$zoom,\n        _props$target = props.target,\n        target = _props$target === void 0 ? [0, 0, 0] : _props$target,\n        _props$flipY = props.flipY,\n        flipY = _props$flipY === void 0 ? true : _props$flipY;\n    var zoomX = Array.isArray(zoom) ? zoom[0] : zoom;\n    var zoomY = Array.isArray(zoom) ? zoom[1] : zoom;\n    var zoom_ = Math.min(zoomX, zoomY);\n    var scale = Math.pow(2, zoom_);\n    var distanceScales;\n\n    if (zoomX !== zoomY) {\n      var scaleX = Math.pow(2, zoomX);\n      var scaleY = Math.pow(2, zoomY);\n      distanceScales = {\n        unitsPerMeter: [scaleX / scale, scaleY / scale, 1],\n        metersPerUnit: [scale / scaleX, scale / scaleY, 1]\n      };\n    }\n\n    return _super.call(this, _objectSpread(_objectSpread({}, props), {}, {\n      longitude: null,\n      position: target,\n      viewMatrix: viewMatrix.clone().scale([scale, scale * (flipY ? -1 : 1), scale]),\n      projectionMatrix: getProjectionMatrix({\n        width: width,\n        height: height,\n        near: near,\n        far: far\n      }),\n      zoom: zoom_,\n      distanceScales: distanceScales\n    }));\n  }\n\n  _createClass(OrthographicViewport, [{\n    key: \"projectFlat\",\n    value: function projectFlat(_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          X = _ref3[0],\n          Y = _ref3[1];\n\n      var unitsPerMeter = this.distanceScales.unitsPerMeter;\n      return [X * unitsPerMeter[0], Y * unitsPerMeter[1]];\n    }\n  }, {\n    key: \"unprojectFlat\",\n    value: function unprojectFlat(_ref4) {\n      var _ref5 = _slicedToArray(_ref4, 2),\n          x = _ref5[0],\n          y = _ref5[1];\n\n      var metersPerUnit = this.distanceScales.metersPerUnit;\n      return [x * metersPerUnit[0], y * metersPerUnit[1]];\n    }\n  }, {\n    key: \"panByPosition\",\n    value: function panByPosition(coords, pixel) {\n      var fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n      var toLocation = this.projectFlat(coords);\n      var translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n      var newCenter = vec2.add([], this.center, translate);\n      return {\n        target: this.unprojectFlat(newCenter)\n      };\n    }\n  }]);\n\n  return OrthographicViewport;\n}(Viewport);\n\nvar OrthographicView = /*#__PURE__*/function (_View) {\n  _inherits(OrthographicView, _View);\n\n  var _super2 = _createSuper(OrthographicView);\n\n  function OrthographicView(props) {\n    _classCallCheck(this, OrthographicView);\n\n    return _super2.call(this, _objectSpread(_objectSpread({}, props), {}, {\n      type: OrthographicViewport\n    }));\n  }\n\n  _createClass(OrthographicView, [{\n    key: \"controller\",\n    get: function get() {\n      return this._getControllerProps({\n        type: OrthographicController\n      });\n    }\n  }]);\n\n  return OrthographicView;\n}(View);\n\nexport { OrthographicView as default };\nOrthographicView.displayName = 'OrthographicView';","map":{"version":3,"mappings":"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","names":["View","Viewport","Matrix4","pixelsToWorld","vec2","OrthographicController","viewMatrix","lookAt","eye","getProjectionMatrix","width","height","near","far","ortho","left","right","bottom","top","OrthographicViewport","constructor","props","zoom","target","flipY","zoomX","Array","isArray","zoomY","zoom_","Math","min","scale","pow","distanceScales","scaleX","scaleY","unitsPerMeter","metersPerUnit","longitude","position","clone","projectionMatrix","projectFlat","X","Y","unprojectFlat","x","y","panByPosition","coords","pixel","fromLocation","pixelUnprojectionMatrix","toLocation","translate","add","negate","newCenter","center","OrthographicView","type","_getControllerProps","displayName"],"sources":["../../../src/views/orthographic-view.js"],"sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\n\nimport {Matrix4} from '@math.gl/core';\nimport {pixelsToWorld} from '@math.gl/web-mercator';\nimport * as vec2 from 'gl-matrix/vec2';\nimport OrthographicController from '../controllers/orthographic-controller';\n\nconst viewMatrix = new Matrix4().lookAt({eye: [0, 0, 1]});\n\nfunction getProjectionMatrix({width, height, near, far}) {\n  // Make sure Matrix4.ortho doesn't crash on 0 width/height\n  width = width || 1;\n  height = height || 1;\n\n  return new Matrix4().ortho({\n    left: -width / 2,\n    right: width / 2,\n    bottom: -height / 2,\n    top: height / 2,\n    near,\n    far\n  });\n}\n\nclass OrthographicViewport extends Viewport {\n  constructor(props) {\n    const {\n      width,\n      height,\n      near = 0.1,\n      far = 1000,\n      zoom = 0,\n      target = [0, 0, 0],\n      flipY = true\n    } = props;\n    const zoomX = Array.isArray(zoom) ? zoom[0] : zoom;\n    const zoomY = Array.isArray(zoom) ? zoom[1] : zoom;\n    const zoom_ = Math.min(zoomX, zoomY);\n    const scale = Math.pow(2, zoom_);\n\n    let distanceScales;\n    if (zoomX !== zoomY) {\n      const scaleX = Math.pow(2, zoomX);\n      const scaleY = Math.pow(2, zoomY);\n\n      distanceScales = {\n        unitsPerMeter: [scaleX / scale, scaleY / scale, 1],\n        metersPerUnit: [scale / scaleX, scale / scaleY, 1]\n      };\n    }\n\n    super({\n      ...props,\n      // in case viewState contains longitude/latitude values,\n      // make sure that the base Viewport class does not treat this as a geospatial viewport\n      longitude: null,\n      position: target,\n      viewMatrix: viewMatrix.clone().scale([scale, scale * (flipY ? -1 : 1), scale]),\n      projectionMatrix: getProjectionMatrix({width, height, near, far}),\n      zoom: zoom_,\n      distanceScales\n    });\n  }\n\n  projectFlat([X, Y]) {\n    const {unitsPerMeter} = this.distanceScales;\n    return [X * unitsPerMeter[0], Y * unitsPerMeter[1]];\n  }\n\n  unprojectFlat([x, y]) {\n    const {metersPerUnit} = this.distanceScales;\n    return [x * metersPerUnit[0], y * metersPerUnit[1]];\n  }\n\n  /* Needed by LinearInterpolator */\n  panByPosition(coords, pixel) {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(coords);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return {target: this.unprojectFlat(newCenter)};\n  }\n}\n\nexport default class OrthographicView extends View {\n  constructor(props) {\n    super({\n      ...props,\n      type: OrthographicViewport\n    });\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: OrthographicController\n    });\n  }\n}\n\nOrthographicView.displayName = 'OrthographicView';\n"]},"metadata":{},"sourceType":"module"}