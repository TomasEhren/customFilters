{"ast":null,"code":"import _objectSpread from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Buffer } from '@luma.gl/core';\nimport { log } from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport { AGGREGATION_OPERATION } from '../utils/aggregation-operation-utils';\nimport { defaultColorRange, colorRangeToFlatArray } from '../utils/color-utils';\nimport GPUGridCellLayer from './gpu-grid-cell-layer';\nimport { pointToDensityGridDataCPU } from './../cpu-grid-layer/grid-aggregator';\nimport GridAggregationLayer from '../grid-aggregation-layer';\nimport { getBoundingBox, getGridParams } from '../utils/grid-aggregation-utils';\nvar defaultProps = {\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  colorAggregation: 'SUM',\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  elevationAggregation: 'SUM',\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  cellSize: {\n    type: 'number',\n    min: 1,\n    max: 1000,\n    value: 1000\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  extruded: false,\n  material: true\n};\nvar DIMENSIONS = {\n  data: {\n    props: ['cellSize', 'colorAggregation', 'elevationAggregation']\n  }\n};\nvar POSITION_ATTRIBUTE_NAME = 'positions';\n\nvar GPUGridLayer = /*#__PURE__*/function (_GridAggregationLayer) {\n  _inherits(GPUGridLayer, _GridAggregationLayer);\n\n  var _super = _createSuper(GPUGridLayer);\n\n  function GPUGridLayer() {\n    _classCallCheck(this, GPUGridLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(GPUGridLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var _attributeManager$add;\n\n      var gl = this.context.gl;\n      var isSupported = GPUGridAggregator.isSupported(gl);\n\n      if (!isSupported) {\n        log.error('GPUGridLayer is not supported on this browser, use GridLayer instead')();\n      }\n\n      _get(_getPrototypeOf(GPUGridLayer.prototype), \"initializeState\", this).call(this, {\n        dimensions: DIMENSIONS\n      });\n\n      this.setState({\n        gpuAggregation: true,\n        projectPoints: false,\n        isSupported: isSupported,\n        weights: {\n          color: {\n            needMin: true,\n            needMax: true,\n            combineMaxMin: true,\n            maxMinBuffer: new Buffer(gl, {\n              byteLength: 4 * 4,\n              accessor: {\n                size: 4,\n                type: 5126,\n                divisor: 1\n              }\n            })\n          },\n          elevation: {\n            needMin: true,\n            needMax: true,\n            combineMaxMin: true,\n            maxMinBuffer: new Buffer(gl, {\n              byteLength: 4 * 4,\n              accessor: {\n                size: 4,\n                type: 5126,\n                divisor: 1\n              }\n            })\n          }\n        },\n        positionAttributeName: 'positions'\n      });\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add((_attributeManager$add = {}, _defineProperty(_attributeManager$add, POSITION_ATTRIBUTE_NAME, {\n        size: 3,\n        accessor: 'getPosition',\n        type: 5130,\n        fp64: this.use64bitPositions()\n      }), _defineProperty(_attributeManager$add, \"color\", {\n        size: 3,\n        accessor: 'getColorWeight'\n      }), _defineProperty(_attributeManager$add, \"elevation\", {\n        size: 3,\n        accessor: 'getElevationWeight'\n      }), _attributeManager$add));\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      if (this.state.isSupported === false) {\n        return;\n      }\n\n      _get(_getPrototypeOf(GPUGridLayer.prototype), \"updateState\", this).call(this, opts);\n\n      var aggregationDirty = this.state.aggregationDirty;\n\n      if (aggregationDirty) {\n        this.setState({\n          gridHash: null\n        });\n      }\n    }\n  }, {\n    key: \"getHashKeyForIndex\",\n    value: function getHashKeyForIndex(index) {\n      var _this$state = this.state,\n          numRow = _this$state.numRow,\n          numCol = _this$state.numCol,\n          boundingBox = _this$state.boundingBox,\n          gridOffset = _this$state.gridOffset;\n      var gridSize = [numCol, numRow];\n      var gridOrigin = [boundingBox.xMin, boundingBox.yMin];\n      var cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n      var yIndex = Math.floor(index / gridSize[0]);\n      var xIndex = index - yIndex * gridSize[0];\n      var latIdx = Math.floor((yIndex * cellSize[1] + gridOrigin[1] + 90 + cellSize[1] / 2) / cellSize[1]);\n      var lonIdx = Math.floor((xIndex * cellSize[0] + gridOrigin[0] + 180 + cellSize[0] / 2) / cellSize[0]);\n      return \"\".concat(latIdx, \"-\").concat(lonIdx);\n    }\n  }, {\n    key: \"getPositionForIndex\",\n    value: function getPositionForIndex(index) {\n      var _this$state2 = this.state,\n          numRow = _this$state2.numRow,\n          numCol = _this$state2.numCol,\n          boundingBox = _this$state2.boundingBox,\n          gridOffset = _this$state2.gridOffset;\n      var gridSize = [numCol, numRow];\n      var gridOrigin = [boundingBox.xMin, boundingBox.yMin];\n      var cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n      var yIndex = Math.floor(index / gridSize[0]);\n      var xIndex = index - yIndex * gridSize[0];\n      var yPos = yIndex * cellSize[1] + gridOrigin[1];\n      var xPos = xIndex * cellSize[0] + gridOrigin[0];\n      return [xPos, yPos];\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref) {\n      var info = _ref.info,\n          mode = _ref.mode;\n      var index = info.index;\n      var object = null;\n\n      if (index >= 0) {\n        var gpuGridAggregator = this.state.gpuGridAggregator;\n        var position = this.getPositionForIndex(index);\n        var colorInfo = GPUGridAggregator.getAggregationData(_objectSpread({\n          pixelIndex: index\n        }, gpuGridAggregator.getData('color')));\n        var elevationInfo = GPUGridAggregator.getAggregationData(_objectSpread({\n          pixelIndex: index\n        }, gpuGridAggregator.getData('elevation')));\n        object = {\n          colorValue: colorInfo.cellWeight,\n          elevationValue: elevationInfo.cellWeight,\n          count: colorInfo.cellCount || elevationInfo.cellCount,\n          position: position,\n          totalCount: colorInfo.totalCount || elevationInfo.totalCount\n        };\n\n        if (mode !== 'hover') {\n          var props = this.props;\n          var gridHash = this.state.gridHash;\n\n          if (!gridHash) {\n            var _this$state3 = this.state,\n                gridOffset = _this$state3.gridOffset,\n                translation = _this$state3.translation,\n                boundingBox = _this$state3.boundingBox;\n            var viewport = this.context.viewport;\n            var attributes = this.getAttributes();\n            var cpuAggregation = pointToDensityGridDataCPU(props, {\n              gridOffset: gridOffset,\n              attributes: attributes,\n              viewport: viewport,\n              translation: translation,\n              boundingBox: boundingBox\n            });\n            gridHash = cpuAggregation.gridHash;\n            this.setState({\n              gridHash: gridHash\n            });\n          }\n\n          var key = this.getHashKeyForIndex(index);\n          var cpuAggregationData = gridHash[key];\n          Object.assign(object, cpuAggregationData);\n        }\n      }\n\n      info.picked = Boolean(object);\n      info.object = object;\n      return info;\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      if (!this.state.isSupported) {\n        return null;\n      }\n\n      var _this$props = this.props,\n          elevationScale = _this$props.elevationScale,\n          extruded = _this$props.extruded,\n          cellSizeMeters = _this$props.cellSize,\n          coverage = _this$props.coverage,\n          material = _this$props.material,\n          elevationRange = _this$props.elevationRange,\n          colorDomain = _this$props.colorDomain,\n          elevationDomain = _this$props.elevationDomain;\n      var _this$state4 = this.state,\n          weights = _this$state4.weights,\n          numRow = _this$state4.numRow,\n          numCol = _this$state4.numCol,\n          gridOrigin = _this$state4.gridOrigin,\n          gridOffset = _this$state4.gridOffset;\n      var color = weights.color,\n          elevation = weights.elevation;\n      var colorRange = colorRangeToFlatArray(this.props.colorRange);\n      var SubLayerClass = this.getSubLayerClass('gpu-grid-cell', GPUGridCellLayer);\n      return new SubLayerClass({\n        gridSize: [numCol, numRow],\n        gridOrigin: gridOrigin,\n        gridOffset: [gridOffset.xOffset, gridOffset.yOffset],\n        colorRange: colorRange,\n        elevationRange: elevationRange,\n        colorDomain: colorDomain,\n        elevationDomain: elevationDomain,\n        cellSize: cellSizeMeters,\n        coverage: coverage,\n        material: material,\n        elevationScale: elevationScale,\n        extruded: extruded\n      }, this.getSubLayerProps({\n        id: 'gpu-grid-cell'\n      }), {\n        data: {\n          attributes: {\n            colors: color.aggregationBuffer,\n            elevations: elevation.aggregationBuffer\n          }\n        },\n        colorMaxMinBuffer: color.maxMinBuffer,\n        elevationMaxMinBuffer: elevation.maxMinBuffer,\n        numInstances: numCol * numRow\n      });\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      var _this$state$weights = this.state.weights,\n          color = _this$state$weights.color,\n          elevation = _this$state$weights.elevation;\n      [color, elevation].forEach(function (weight) {\n        var aggregationBuffer = weight.aggregationBuffer,\n            maxMinBuffer = weight.maxMinBuffer;\n        maxMinBuffer.delete();\n        aggregationBuffer === null || aggregationBuffer === void 0 ? void 0 : aggregationBuffer.delete();\n      });\n\n      _get(_getPrototypeOf(GPUGridLayer.prototype), \"finalizeState\", this).call(this);\n    }\n  }, {\n    key: \"updateAggregationState\",\n    value: function updateAggregationState(opts) {\n      var props = opts.props,\n          oldProps = opts.oldProps;\n      var cellSize = props.cellSize,\n          coordinateSystem = props.coordinateSystem;\n      var viewport = this.context.viewport;\n      var cellSizeChanged = oldProps.cellSize !== cellSize;\n      var dimensions = this.state.dimensions;\n      var positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n      var attributesChanged = positionsChanged || this.isAttributeChanged();\n      var boundingBox = this.state.boundingBox;\n\n      if (positionsChanged) {\n        boundingBox = getBoundingBox(this.getAttributes(), this.getNumInstances());\n        this.setState({\n          boundingBox: boundingBox\n        });\n      }\n\n      if (positionsChanged || cellSizeChanged) {\n        var _getGridParams = getGridParams(boundingBox, cellSize, viewport, coordinateSystem),\n            gridOffset = _getGridParams.gridOffset,\n            translation = _getGridParams.translation,\n            width = _getGridParams.width,\n            height = _getGridParams.height,\n            numCol = _getGridParams.numCol,\n            numRow = _getGridParams.numRow;\n\n        this.allocateResources(numRow, numCol);\n        this.setState({\n          gridOffset: gridOffset,\n          translation: translation,\n          gridOrigin: [-1 * translation[0], -1 * translation[1]],\n          width: width,\n          height: height,\n          numCol: numCol,\n          numRow: numRow\n        });\n      }\n\n      var aggregationDataDirty = attributesChanged || this.isAggregationDirty(opts, {\n        dimension: dimensions.data,\n        compareAll: true\n      });\n\n      if (aggregationDataDirty) {\n        this._updateAccessors(opts);\n      }\n\n      this.setState({\n        aggregationDataDirty: aggregationDataDirty\n      });\n    }\n  }, {\n    key: \"_updateAccessors\",\n    value: function _updateAccessors(opts) {\n      var _opts$props = opts.props,\n          colorAggregation = _opts$props.colorAggregation,\n          elevationAggregation = _opts$props.elevationAggregation;\n      var _this$state$weights2 = this.state.weights,\n          color = _this$state$weights2.color,\n          elevation = _this$state$weights2.elevation;\n      color.operation = AGGREGATION_OPERATION[colorAggregation];\n      elevation.operation = AGGREGATION_OPERATION[elevationAggregation];\n    }\n  }]);\n\n  return GPUGridLayer;\n}(GridAggregationLayer);\n\nexport { GPUGridLayer as default };\nGPUGridLayer.layerName = 'GPUGridLayer';\nGPUGridLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["Buffer","log","GPUGridAggregator","AGGREGATION_OPERATION","defaultColorRange","colorRangeToFlatArray","GPUGridCellLayer","pointToDensityGridDataCPU","GridAggregationLayer","getBoundingBox","getGridParams","defaultProps","colorDomain","colorRange","getColorWeight","type","value","colorAggregation","elevationDomain","elevationRange","getElevationWeight","elevationAggregation","elevationScale","min","cellSize","max","coverage","getPosition","x","position","extruded","material","DIMENSIONS","data","props","POSITION_ATTRIBUTE_NAME","GPUGridLayer","initializeState","gl","context","isSupported","error","dimensions","setState","gpuAggregation","projectPoints","weights","color","needMin","needMax","combineMaxMin","maxMinBuffer","byteLength","accessor","size","divisor","elevation","positionAttributeName","attributeManager","getAttributeManager","add","fp64","use64bitPositions","updateState","opts","state","aggregationDirty","gridHash","getHashKeyForIndex","index","numRow","numCol","boundingBox","gridOffset","gridSize","gridOrigin","xMin","yMin","xOffset","yOffset","yIndex","Math","floor","xIndex","latIdx","lonIdx","getPositionForIndex","yPos","xPos","getPickingInfo","info","mode","object","gpuGridAggregator","colorInfo","getAggregationData","pixelIndex","getData","elevationInfo","colorValue","cellWeight","elevationValue","count","cellCount","totalCount","translation","viewport","attributes","getAttributes","cpuAggregation","key","cpuAggregationData","Object","assign","picked","Boolean","renderLayers","cellSizeMeters","SubLayerClass","getSubLayerClass","getSubLayerProps","id","colors","aggregationBuffer","elevations","colorMaxMinBuffer","elevationMaxMinBuffer","numInstances","finalizeState","forEach","weight","delete","updateAggregationState","oldProps","coordinateSystem","cellSizeChanged","positionsChanged","isAttributeChanged","attributesChanged","getNumInstances","width","height","allocateResources","aggregationDataDirty","isAggregationDirty","dimension","compareAll","_updateAccessors","operation","layerName"],"sources":["../../../src/gpu-grid-layer/gpu-grid-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Buffer} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport {log} from '@deck.gl/core';\n\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION} from '../utils/aggregation-operation-utils';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport GPUGridCellLayer from './gpu-grid-cell-layer';\nimport {pointToDensityGridDataCPU} from './../cpu-grid-layer/grid-aggregator';\nimport GridAggregationLayer from '../grid-aggregation-layer';\nimport {getBoundingBox, getGridParams} from '../utils/grid-aggregation-utils';\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorWeight: {type: 'accessor', value: 1},\n  colorAggregation: 'SUM',\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationWeight: {type: 'accessor', value: 1},\n  elevationAggregation: 'SUM',\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // grid\n  cellSize: {type: 'number', min: 1, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getPosition: {type: 'accessor', value: x => x.position},\n  extruded: false,\n\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\n// This layer only perform GPU aggregation, no need to seperate data and weight props\n// aggregation will be dirty when any of the props are changed.\n\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSize', 'colorAggregation', 'elevationAggregation']\n  }\n  // rest of the changes are detected by `state.attributesChanged`\n};\nconst POSITION_ATTRIBUTE_NAME = 'positions';\n\nexport default class GPUGridLayer extends GridAggregationLayer {\n  initializeState() {\n    const {gl} = this.context;\n    const isSupported = GPUGridAggregator.isSupported(gl);\n    if (!isSupported) {\n      log.error('GPUGridLayer is not supported on this browser, use GridLayer instead')();\n    }\n    super.initializeState({\n      dimensions: DIMENSIONS\n    });\n    this.setState({\n      gpuAggregation: true,\n      projectPoints: false, // aggregation in world space\n      isSupported,\n      weights: {\n        color: {\n          needMin: true,\n          needMax: true,\n          combineMaxMin: true,\n          maxMinBuffer: new Buffer(gl, {\n            byteLength: 4 * 4,\n            accessor: {size: 4, type: GL.FLOAT, divisor: 1}\n          })\n        },\n        elevation: {\n          needMin: true,\n          needMax: true,\n          combineMaxMin: true,\n          maxMinBuffer: new Buffer(gl, {\n            byteLength: 4 * 4,\n            accessor: {size: 4, type: GL.FLOAT, divisor: 1}\n          })\n        }\n      },\n      positionAttributeName: 'positions'\n    });\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions()\n      },\n      color: {size: 3, accessor: 'getColorWeight'},\n      elevation: {size: 3, accessor: 'getElevationWeight'}\n    });\n  }\n\n  updateState(opts) {\n    if (this.state.isSupported === false) {\n      // Skip update, layer not supported\n      return;\n    }\n    super.updateState(opts);\n    const {aggregationDirty} = this.state;\n    if (aggregationDirty) {\n      // reset cached CPU Aggregation results (used for picking)\n      this.setState({\n        gridHash: null\n      });\n    }\n  }\n\n  getHashKeyForIndex(index) {\n    const {numRow, numCol, boundingBox, gridOffset} = this.state;\n    const gridSize = [numCol, numRow];\n    const gridOrigin = [boundingBox.xMin, boundingBox.yMin];\n    const cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n\n    const yIndex = Math.floor(index / gridSize[0]);\n    const xIndex = index - yIndex * gridSize[0];\n    // This will match the index to the hash-key to access aggregation data from CPU aggregation results.\n    const latIdx = Math.floor(\n      (yIndex * cellSize[1] + gridOrigin[1] + 90 + cellSize[1] / 2) / cellSize[1]\n    );\n    const lonIdx = Math.floor(\n      (xIndex * cellSize[0] + gridOrigin[0] + 180 + cellSize[0] / 2) / cellSize[0]\n    );\n    return `${latIdx}-${lonIdx}`;\n  }\n\n  getPositionForIndex(index) {\n    const {numRow, numCol, boundingBox, gridOffset} = this.state;\n    const gridSize = [numCol, numRow];\n    const gridOrigin = [boundingBox.xMin, boundingBox.yMin];\n    const cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n\n    const yIndex = Math.floor(index / gridSize[0]);\n    const xIndex = index - yIndex * gridSize[0];\n    const yPos = yIndex * cellSize[1] + gridOrigin[1];\n    const xPos = xIndex * cellSize[0] + gridOrigin[0];\n    return [xPos, yPos];\n  }\n\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n    let object = null;\n    if (index >= 0) {\n      const {gpuGridAggregator} = this.state;\n      const position = this.getPositionForIndex(index);\n      const colorInfo = GPUGridAggregator.getAggregationData({\n        pixelIndex: index,\n        ...gpuGridAggregator.getData('color')\n      });\n      const elevationInfo = GPUGridAggregator.getAggregationData({\n        pixelIndex: index,\n        ...gpuGridAggregator.getData('elevation')\n      });\n\n      object = {\n        colorValue: colorInfo.cellWeight,\n        elevationValue: elevationInfo.cellWeight,\n        count: colorInfo.cellCount || elevationInfo.cellCount,\n        position,\n        totalCount: colorInfo.totalCount || elevationInfo.totalCount\n      };\n      if (mode !== 'hover') {\n        // perform CPU aggregation for full list of points for each cell\n        const {props} = this;\n        let {gridHash} = this.state;\n        if (!gridHash) {\n          const {gridOffset, translation, boundingBox} = this.state;\n          const {viewport} = this.context;\n          const attributes = this.getAttributes();\n          const cpuAggregation = pointToDensityGridDataCPU(props, {\n            gridOffset,\n            attributes,\n            viewport,\n            translation,\n            boundingBox\n          });\n          gridHash = cpuAggregation.gridHash;\n          this.setState({gridHash});\n        }\n        const key = this.getHashKeyForIndex(index);\n        const cpuAggregationData = gridHash[key];\n        Object.assign(object, cpuAggregationData);\n      }\n    }\n\n    // override object with picked cell\n    info.picked = Boolean(object);\n    info.object = object;\n\n    return info;\n  }\n\n  renderLayers() {\n    if (!this.state.isSupported) {\n      return null;\n    }\n    const {\n      elevationScale,\n      extruded,\n      cellSize: cellSizeMeters,\n      coverage,\n      material,\n      elevationRange,\n      colorDomain,\n      elevationDomain\n    } = this.props;\n\n    const {weights, numRow, numCol, gridOrigin, gridOffset} = this.state;\n    const {color, elevation} = weights;\n    const colorRange = colorRangeToFlatArray(this.props.colorRange);\n\n    const SubLayerClass = this.getSubLayerClass('gpu-grid-cell', GPUGridCellLayer);\n\n    return new SubLayerClass(\n      {\n        gridSize: [numCol, numRow],\n        gridOrigin,\n        gridOffset: [gridOffset.xOffset, gridOffset.yOffset],\n        colorRange,\n        elevationRange,\n        colorDomain,\n        elevationDomain,\n\n        cellSize: cellSizeMeters,\n        coverage,\n        material,\n        elevationScale,\n        extruded\n      },\n      this.getSubLayerProps({\n        id: 'gpu-grid-cell'\n      }),\n      {\n        data: {\n          attributes: {\n            colors: color.aggregationBuffer,\n            elevations: elevation.aggregationBuffer\n          }\n        },\n        colorMaxMinBuffer: color.maxMinBuffer,\n        elevationMaxMinBuffer: elevation.maxMinBuffer,\n        numInstances: numCol * numRow\n      }\n    );\n  }\n\n  finalizeState() {\n    const {color, elevation} = this.state.weights;\n    [color, elevation].forEach(weight => {\n      const {aggregationBuffer, maxMinBuffer} = weight;\n      maxMinBuffer.delete();\n      aggregationBuffer?.delete();\n    });\n    super.finalizeState();\n  }\n\n  // Aggregation Overrides\n\n  updateAggregationState(opts) {\n    const {props, oldProps} = opts;\n    const {cellSize, coordinateSystem} = props;\n    const {viewport} = this.context;\n    const cellSizeChanged = oldProps.cellSize !== cellSize;\n    const {dimensions} = this.state;\n\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n    // any attribute changed\n    const attributesChanged = positionsChanged || this.isAttributeChanged();\n\n    let {boundingBox} = this.state;\n    if (positionsChanged) {\n      boundingBox = getBoundingBox(this.getAttributes(), this.getNumInstances());\n      this.setState({boundingBox});\n    }\n    if (positionsChanged || cellSizeChanged) {\n      const {gridOffset, translation, width, height, numCol, numRow} = getGridParams(\n        boundingBox,\n        cellSize,\n        viewport,\n        coordinateSystem\n      );\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        gridOffset,\n        translation,\n        gridOrigin: [-1 * translation[0], -1 * translation[1]],\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n\n    const aggregationDataDirty =\n      attributesChanged ||\n      this.isAggregationDirty(opts, {\n        dimension: dimensions.data,\n        compareAll: true\n      });\n\n    if (aggregationDataDirty) {\n      this._updateAccessors(opts);\n    }\n    this.setState({\n      aggregationDataDirty\n    });\n  }\n\n  // Private\n\n  _updateAccessors(opts) {\n    const {colorAggregation, elevationAggregation} = opts.props;\n    const {color, elevation} = this.state.weights;\n    color.operation = AGGREGATION_OPERATION[colorAggregation];\n    elevation.operation = AGGREGATION_OPERATION[elevationAggregation];\n  }\n}\n\nGPUGridLayer.layerName = 'GPUGridLayer';\nGPUGridLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}