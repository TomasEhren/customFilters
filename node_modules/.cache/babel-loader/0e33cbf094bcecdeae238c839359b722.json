{"ast":null,"code":"import { GL_EXTENSIONS_CONSTANTS } from '../gl-extensions';\nimport { extractMipmapImages } from '../utils/extract-mipmap-images';\nvar PVR_CONSTANTS = {\n  MAGIC_NUMBER: 0x03525650,\n  MAGIC_NUMBER_EXTRA: 0x50565203,\n  HEADER_LENGTH: 13,\n  HEADER_SIZE: 52,\n  MAGIC_NUMBER_INDEX: 0,\n  PIXEL_FORMAT_INDEX: 2,\n  COLOUR_SPACE_INDEX: 4,\n  HEIGHT_INDEX: 6,\n  WIDTH_INDEX: 7,\n  MIPMAPCOUNT_INDEX: 11,\n  METADATA_SIZE_INDEX: 12\n};\nvar PVR_PIXEL_FORMATS = {\n  0: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_PVRTC_2BPPV1_IMG],\n  1: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG],\n  2: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_PVRTC_4BPPV1_IMG],\n  3: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG],\n  6: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_ETC1_WEBGL],\n  7: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_S3TC_DXT1_EXT],\n  9: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_S3TC_DXT3_EXT],\n  11: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_S3TC_DXT5_EXT],\n  22: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB8_ETC2],\n  23: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA8_ETC2_EAC],\n  24: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2],\n  25: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_R11_EAC],\n  26: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RG11_EAC],\n  27: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_4X4_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_4X4_KHR],\n  28: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_5X4_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_5X4_KHR],\n  29: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_5X5_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_5X5_KHR],\n  30: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_6X5_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_6X5_KHR],\n  31: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_6X6_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_6X6_KHR],\n  32: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_8X5_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_8X5_KHR],\n  33: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_8X6_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_8X6_KHR],\n  34: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_8X8_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_8X8_KHR],\n  35: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_10X5_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_10X5_KHR],\n  36: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_10X6_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_10X6_KHR],\n  37: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_10X8_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_10X8_KHR],\n  38: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_10X10_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_10X10_KHR],\n  39: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_12X10_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_12X10_KHR],\n  40: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_12X12_KHR, GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_12X12_KHR]\n};\nvar PVR_SIZE_FUNCTIONS = {\n  0: pvrtc2bppSize,\n  1: pvrtc2bppSize,\n  2: pvrtc4bppSize,\n  3: pvrtc4bppSize,\n  6: dxtEtcSmallSize,\n  7: dxtEtcSmallSize,\n  9: dxtEtcAstcBigSize,\n  11: dxtEtcAstcBigSize,\n  22: dxtEtcSmallSize,\n  23: dxtEtcAstcBigSize,\n  24: dxtEtcSmallSize,\n  25: dxtEtcSmallSize,\n  26: dxtEtcAstcBigSize,\n  27: dxtEtcAstcBigSize,\n  28: atc5x4Size,\n  29: atc5x5Size,\n  30: atc6x5Size,\n  31: atc6x6Size,\n  32: atc8x5Size,\n  33: atc8x6Size,\n  34: atc8x8Size,\n  35: atc10x5Size,\n  36: atc10x6Size,\n  37: atc10x8Size,\n  38: atc10x10Size,\n  39: atc12x10Size,\n  40: atc12x12Size\n};\nexport function isPVR(data) {\n  var header = new Uint32Array(data, 0, PVR_CONSTANTS.HEADER_LENGTH);\n  var version = header[PVR_CONSTANTS.MAGIC_NUMBER_INDEX];\n  return version === PVR_CONSTANTS.MAGIC_NUMBER || version === PVR_CONSTANTS.MAGIC_NUMBER_EXTRA;\n}\nexport function parsePVR(data) {\n  var header = new Uint32Array(data, 0, PVR_CONSTANTS.HEADER_LENGTH);\n  var pvrFormat = header[PVR_CONSTANTS.PIXEL_FORMAT_INDEX];\n  var colourSpace = header[PVR_CONSTANTS.COLOUR_SPACE_INDEX];\n  var pixelFormats = PVR_PIXEL_FORMATS[pvrFormat] || [];\n  var internalFormat = pixelFormats.length > 1 && colourSpace ? pixelFormats[1] : pixelFormats[0];\n  var sizeFunction = PVR_SIZE_FUNCTIONS[pvrFormat];\n  var mipMapLevels = header[PVR_CONSTANTS.MIPMAPCOUNT_INDEX];\n  var width = header[PVR_CONSTANTS.WIDTH_INDEX];\n  var height = header[PVR_CONSTANTS.HEIGHT_INDEX];\n  var dataOffset = PVR_CONSTANTS.HEADER_SIZE + header[PVR_CONSTANTS.METADATA_SIZE_INDEX];\n  var image = new Uint8Array(data, dataOffset);\n  return extractMipmapImages(image, {\n    mipMapLevels: mipMapLevels,\n    width: width,\n    height: height,\n    sizeFunction: sizeFunction,\n    internalFormat: internalFormat\n  });\n}\n\nfunction pvrtc2bppSize(width, height) {\n  width = Math.max(width, 16);\n  height = Math.max(height, 8);\n  return width * height / 4;\n}\n\nfunction pvrtc4bppSize(width, height) {\n  width = Math.max(width, 8);\n  height = Math.max(height, 8);\n  return width * height / 2;\n}\n\nfunction dxtEtcSmallSize(width, height) {\n  return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;\n}\n\nfunction dxtEtcAstcBigSize(width, height) {\n  return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;\n}\n\nfunction atc5x4Size(width, height) {\n  return Math.floor((width + 4) / 5) * Math.floor((height + 3) / 4) * 16;\n}\n\nfunction atc5x5Size(width, height) {\n  return Math.floor((width + 4) / 5) * Math.floor((height + 4) / 5) * 16;\n}\n\nfunction atc6x5Size(width, height) {\n  return Math.floor((width + 5) / 6) * Math.floor((height + 4) / 5) * 16;\n}\n\nfunction atc6x6Size(width, height) {\n  return Math.floor((width + 5) / 6) * Math.floor((height + 5) / 6) * 16;\n}\n\nfunction atc8x5Size(width, height) {\n  return Math.floor((width + 7) / 8) * Math.floor((height + 4) / 5) * 16;\n}\n\nfunction atc8x6Size(width, height) {\n  return Math.floor((width + 7) / 8) * Math.floor((height + 5) / 6) * 16;\n}\n\nfunction atc8x8Size(width, height) {\n  return Math.floor((width + 7) / 8) * Math.floor((height + 7) / 8) * 16;\n}\n\nfunction atc10x5Size(width, height) {\n  return Math.floor((width + 9) / 10) * Math.floor((height + 4) / 5) * 16;\n}\n\nfunction atc10x6Size(width, height) {\n  return Math.floor((width + 9) / 10) * Math.floor((height + 5) / 6) * 16;\n}\n\nfunction atc10x8Size(width, height) {\n  return Math.floor((width + 9) / 10) * Math.floor((height + 7) / 8) * 16;\n}\n\nfunction atc10x10Size(width, height) {\n  return Math.floor((width + 9) / 10) * Math.floor((height + 9) / 10) * 16;\n}\n\nfunction atc12x10Size(width, height) {\n  return Math.floor((width + 11) / 12) * Math.floor((height + 9) / 10) * 16;\n}\n\nfunction atc12x12Size(width, height) {\n  return Math.floor((width + 11) / 12) * Math.floor((height + 11) / 12) * 16;\n}","map":{"version":3,"mappings":"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","names":["GL_EXTENSIONS_CONSTANTS","extractMipmapImages","PVR_CONSTANTS","MAGIC_NUMBER","MAGIC_NUMBER_EXTRA","HEADER_LENGTH","HEADER_SIZE","MAGIC_NUMBER_INDEX","PIXEL_FORMAT_INDEX","COLOUR_SPACE_INDEX","HEIGHT_INDEX","WIDTH_INDEX","MIPMAPCOUNT_INDEX","METADATA_SIZE_INDEX","PVR_PIXEL_FORMATS","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_R11_EAC","COMPRESSED_RG11_EAC","COMPRESSED_RGBA_ASTC_4X4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_4X4_KHR","COMPRESSED_RGBA_ASTC_5X4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5X4_KHR","COMPRESSED_RGBA_ASTC_5X5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5X5_KHR","COMPRESSED_RGBA_ASTC_6X5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6X5_KHR","COMPRESSED_RGBA_ASTC_6X6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6X6_KHR","COMPRESSED_RGBA_ASTC_8X5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8X5_KHR","COMPRESSED_RGBA_ASTC_8X6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8X6_KHR","COMPRESSED_RGBA_ASTC_8X8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8X8_KHR","COMPRESSED_RGBA_ASTC_10X5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10X5_KHR","COMPRESSED_RGBA_ASTC_10X6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10X6_KHR","COMPRESSED_RGBA_ASTC_10X8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10X8_KHR","COMPRESSED_RGBA_ASTC_10X10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10X10_KHR","COMPRESSED_RGBA_ASTC_12X10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12X10_KHR","COMPRESSED_RGBA_ASTC_12X12_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12X12_KHR","PVR_SIZE_FUNCTIONS","pvrtc2bppSize","pvrtc4bppSize","dxtEtcSmallSize","dxtEtcAstcBigSize","atc5x4Size","atc5x5Size","atc6x5Size","atc6x6Size","atc8x5Size","atc8x6Size","atc8x8Size","atc10x5Size","atc10x6Size","atc10x8Size","atc10x10Size","atc12x10Size","atc12x12Size","isPVR","data","header","Uint32Array","version","parsePVR","pvrFormat","colourSpace","pixelFormats","internalFormat","length","sizeFunction","mipMapLevels","width","height","dataOffset","image","Uint8Array","Math","max","floor"],"sources":["../../../../src/lib/parsers/parse-pvr.ts"],"sourcesContent":["import {TextureLevel} from '../../types';\n/* eslint-disable camelcase */\n// Forked from PicoGL: https://github.com/tsherif/picogl.js/blob/master/examples/utils/utils.js\n// Copyright (c) 2017 Tarek Sherif, The MIT License (MIT)\nimport {GL_EXTENSIONS_CONSTANTS} from '../gl-extensions';\nimport {extractMipmapImages} from '../utils/extract-mipmap-images';\n\nconst PVR_CONSTANTS: Record<string, number> = {\n  MAGIC_NUMBER: 0x03525650,\n  MAGIC_NUMBER_EXTRA: 0x50565203,\n  HEADER_LENGTH: 13,\n  HEADER_SIZE: 52,\n  MAGIC_NUMBER_INDEX: 0,\n  PIXEL_FORMAT_INDEX: 2,\n  COLOUR_SPACE_INDEX: 4,\n  HEIGHT_INDEX: 6,\n  WIDTH_INDEX: 7,\n  MIPMAPCOUNT_INDEX: 11,\n  METADATA_SIZE_INDEX: 12\n};\n\nconst PVR_PIXEL_FORMATS: Record<number, number[]> = {\n  0: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_PVRTC_2BPPV1_IMG],\n  1: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG],\n  2: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_PVRTC_4BPPV1_IMG],\n  3: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG],\n  6: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_ETC1_WEBGL],\n  7: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_S3TC_DXT1_EXT],\n  9: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_S3TC_DXT3_EXT],\n  11: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_S3TC_DXT5_EXT],\n  22: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB8_ETC2],\n  23: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA8_ETC2_EAC],\n  24: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2],\n  25: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_R11_EAC],\n  26: [GL_EXTENSIONS_CONSTANTS.COMPRESSED_RG11_EAC],\n  27: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_4X4_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_4X4_KHR\n  ],\n  28: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_5X4_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_5X4_KHR\n  ],\n  29: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_5X5_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_5X5_KHR\n  ],\n  30: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_6X5_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_6X5_KHR\n  ],\n  31: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_6X6_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_6X6_KHR\n  ],\n  32: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_8X5_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_8X5_KHR\n  ],\n  33: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_8X6_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_8X6_KHR\n  ],\n  34: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_8X8_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_8X8_KHR\n  ],\n  35: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_10X5_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_10X5_KHR\n  ],\n  36: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_10X6_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_10X6_KHR\n  ],\n  37: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_10X8_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_10X8_KHR\n  ],\n  38: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_10X10_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_10X10_KHR\n  ],\n  39: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_12X10_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_12X10_KHR\n  ],\n  40: [\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_12X12_KHR,\n    GL_EXTENSIONS_CONSTANTS.COMPRESSED_SRGB8_ALPHA8_ASTC_12X12_KHR\n  ]\n};\n\nconst PVR_SIZE_FUNCTIONS: Record<number, (width: number, height: number) => number> = {\n  0: pvrtc2bppSize,\n  1: pvrtc2bppSize,\n  2: pvrtc4bppSize,\n  3: pvrtc4bppSize,\n  6: dxtEtcSmallSize,\n  7: dxtEtcSmallSize,\n  9: dxtEtcAstcBigSize,\n  11: dxtEtcAstcBigSize,\n  22: dxtEtcSmallSize,\n  23: dxtEtcAstcBigSize,\n  24: dxtEtcSmallSize,\n  25: dxtEtcSmallSize,\n  26: dxtEtcAstcBigSize,\n  27: dxtEtcAstcBigSize,\n  28: atc5x4Size,\n  29: atc5x5Size,\n  30: atc6x5Size,\n  31: atc6x6Size,\n  32: atc8x5Size,\n  33: atc8x6Size,\n  34: atc8x8Size,\n  35: atc10x5Size,\n  36: atc10x6Size,\n  37: atc10x8Size,\n  38: atc10x10Size,\n  39: atc12x10Size,\n  40: atc12x12Size\n};\n\n/**\n * Check if data is in \"PVR\" format by its magic number\n * @param data - binary data of compressed texture\n * @returns true - data in \"PVR\" format, else - false\n */\nexport function isPVR(data: ArrayBuffer): boolean {\n  const header = new Uint32Array(data, 0, PVR_CONSTANTS.HEADER_LENGTH);\n  const version = header[PVR_CONSTANTS.MAGIC_NUMBER_INDEX];\n\n  return version === PVR_CONSTANTS.MAGIC_NUMBER || version === PVR_CONSTANTS.MAGIC_NUMBER_EXTRA;\n}\n\n/**\n * Parse texture data as \"PVR\" format\n * @param data - binary data of compressed texture\n * @returns Array of the texture levels\n * @see http://cdn.imgtec.com/sdk-documentation/PVR+File+Format.Specification.pdf\n */\nexport function parsePVR(data: ArrayBuffer): TextureLevel[] {\n  const header = new Uint32Array(data, 0, PVR_CONSTANTS.HEADER_LENGTH);\n\n  const pvrFormat = header[PVR_CONSTANTS.PIXEL_FORMAT_INDEX];\n  const colourSpace = header[PVR_CONSTANTS.COLOUR_SPACE_INDEX];\n  const pixelFormats = PVR_PIXEL_FORMATS[pvrFormat] || [];\n  const internalFormat = pixelFormats.length > 1 && colourSpace ? pixelFormats[1] : pixelFormats[0];\n\n  const sizeFunction = PVR_SIZE_FUNCTIONS[pvrFormat];\n\n  const mipMapLevels = header[PVR_CONSTANTS.MIPMAPCOUNT_INDEX];\n\n  const width = header[PVR_CONSTANTS.WIDTH_INDEX];\n  const height = header[PVR_CONSTANTS.HEIGHT_INDEX];\n\n  const dataOffset = PVR_CONSTANTS.HEADER_SIZE + header[PVR_CONSTANTS.METADATA_SIZE_INDEX];\n\n  const image = new Uint8Array(data, dataOffset);\n\n  return extractMipmapImages(image, {\n    mipMapLevels,\n    width,\n    height,\n    sizeFunction,\n    internalFormat\n  });\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_pvrtc/\nfunction pvrtc2bppSize(width: number, height: number): number {\n  width = Math.max(width, 16);\n  height = Math.max(height, 8);\n\n  return (width * height) / 4;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_pvrtc/\nfunction pvrtc4bppSize(width: number, height: number): number {\n  width = Math.max(width, 8);\n  height = Math.max(height, 8);\n\n  return (width * height) / 2;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_etc/\n// Size for:\n// COMPRESSED_RGB_S3TC_DXT1_EXT\n// COMPRESSED_R11_EAC\n// COMPRESSED_SIGNED_R11_EAC\n// COMPRESSED_RGB8_ETC2\n// COMPRESSED_SRGB8_ETC2\n// COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2\n// COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2\nfunction dxtEtcSmallSize(width: number, height: number): number {\n  return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_etc/\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\n// Size for:\n// COMPRESSED_RGBA_S3TC_DXT3_EXT\n// COMPRESSED_RGBA_S3TC_DXT5_EXT\n// COMPRESSED_RG11_EAC\n// COMPRESSED_SIGNED_RG11_EAC\n// COMPRESSED_RGBA8_ETC2_EAC\n// COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\n// COMPRESSED_RGBA_ASTC_4x4_KHR\nfunction dxtEtcAstcBigSize(width: number, height: number): number {\n  return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc5x4Size(width: number, height: number): number {\n  return Math.floor((width + 4) / 5) * Math.floor((height + 3) / 4) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc5x5Size(width: number, height: number): number {\n  return Math.floor((width + 4) / 5) * Math.floor((height + 4) / 5) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc6x5Size(width: number, height: number): number {\n  return Math.floor((width + 5) / 6) * Math.floor((height + 4) / 5) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc6x6Size(width: number, height: number): number {\n  return Math.floor((width + 5) / 6) * Math.floor((height + 5) / 6) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc8x5Size(width: number, height: number): number {\n  return Math.floor((width + 7) / 8) * Math.floor((height + 4) / 5) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc8x6Size(width: number, height: number): number {\n  return Math.floor((width + 7) / 8) * Math.floor((height + 5) / 6) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc8x8Size(width: number, height: number): number {\n  return Math.floor((width + 7) / 8) * Math.floor((height + 7) / 8) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc10x5Size(width: number, height: number): number {\n  return Math.floor((width + 9) / 10) * Math.floor((height + 4) / 5) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc10x6Size(width: number, height: number): number {\n  return Math.floor((width + 9) / 10) * Math.floor((height + 5) / 6) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc10x8Size(width: number, height: number): number {\n  return Math.floor((width + 9) / 10) * Math.floor((height + 7) / 8) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc10x10Size(width: number, height: number): number {\n  return Math.floor((width + 9) / 10) * Math.floor((height + 9) / 10) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc12x10Size(width: number, height: number): number {\n  return Math.floor((width + 11) / 12) * Math.floor((height + 9) / 10) * 16;\n}\n\n// https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/\nfunction atc12x12Size(width: number, height: number): number {\n  return Math.floor((width + 11) / 12) * Math.floor((height + 11) / 12) * 16;\n}\n"]},"metadata":{},"sourceType":"module"}