{"ast":null,"code":"import { Vector3, Matrix4, toRadians, toDegrees, assert, equals, _MathUtils } from '@math.gl/core';\nimport * as vec3 from 'gl-matrix/vec3';\nimport { WGS84_RADIUS_X, WGS84_RADIUS_Y, WGS84_RADIUS_Z } from '../constants';\nimport { fromCartographicToRadians, toCartographicFromRadians } from '../type-utils';\nimport scaleToGeodeticSurface from './helpers/scale-to-geodetic-surface';\nimport localFrameToFixedFrame from './helpers/ellipsoid-transform';\nconst scratchVector = new Vector3();\nconst scratchNormal = new Vector3();\nconst scratchK = new Vector3();\nconst scratchPosition = new Vector3();\nconst scratchHeight = new Vector3();\nconst scratchCartesian = new Vector3();\nlet wgs84;\nexport default class Ellipsoid {\n  static get WGS84() {\n    wgs84 = wgs84 || new Ellipsoid(WGS84_RADIUS_X, WGS84_RADIUS_Y, WGS84_RADIUS_Z);\n    return wgs84;\n  }\n\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.0;\n    let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.0;\n    assert(x >= 0.0);\n    assert(y >= 0.0);\n    assert(z >= 0.0);\n    this.radii = new Vector3(x, y, z);\n    this.radiiSquared = new Vector3(x * x, y * y, z * z);\n    this.radiiToTheFourth = new Vector3(x * x * x * x, y * y * y * y, z * z * z * z);\n    this.oneOverRadii = new Vector3(x === 0.0 ? 0.0 : 1.0 / x, y === 0.0 ? 0.0 : 1.0 / y, z === 0.0 ? 0.0 : 1.0 / z);\n    this.oneOverRadiiSquared = new Vector3(x === 0.0 ? 0.0 : 1.0 / (x * x), y === 0.0 ? 0.0 : 1.0 / (y * y), z === 0.0 ? 0.0 : 1.0 / (z * z));\n    this.minimumRadius = Math.min(x, y, z);\n    this.maximumRadius = Math.max(x, y, z);\n    this.centerToleranceSquared = _MathUtils.EPSILON1;\n\n    if (this.radiiSquared.z !== 0) {\n      this.squaredXOverSquaredZ = this.radiiSquared.x / this.radiiSquared.z;\n    }\n\n    Object.freeze(this);\n  }\n\n  equals(right) {\n    return this === right || Boolean(right && this.radii.equals(right.radii));\n  }\n\n  toString() {\n    return this.radii.toString();\n  }\n\n  cartographicToCartesian(cartographic) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n    const normal = scratchNormal;\n    const k = scratchK;\n    const [,, height] = cartographic;\n    this.geodeticSurfaceNormalCartographic(cartographic, normal);\n    k.copy(this.radiiSquared).scale(normal);\n    const gamma = Math.sqrt(normal.dot(k));\n    k.scale(1 / gamma);\n    normal.scale(height);\n    k.add(normal);\n    return k.to(result);\n  }\n\n  cartesianToCartographic(cartesian) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n    scratchCartesian.from(cartesian);\n    const point = this.scaleToGeodeticSurface(scratchCartesian, scratchPosition);\n\n    if (!point) {\n      return undefined;\n    }\n\n    const normal = this.geodeticSurfaceNormal(point, scratchNormal);\n    const h = scratchHeight;\n    h.copy(scratchCartesian).subtract(point);\n    const longitude = Math.atan2(normal.y, normal.x);\n    const latitude = Math.asin(normal.z);\n    const height = Math.sign(vec3.dot(h, scratchCartesian)) * vec3.length(h);\n    return toCartographicFromRadians([longitude, latitude, height], result);\n  }\n\n  eastNorthUpToFixedFrame(origin) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Matrix4();\n    return localFrameToFixedFrame(this, 'east', 'north', 'up', origin, result);\n  }\n\n  localFrameToFixedFrame(firstAxis, secondAxis, thirdAxis, origin) {\n    let result = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new Matrix4();\n    return localFrameToFixedFrame(this, firstAxis, secondAxis, thirdAxis, origin, result);\n  }\n\n  geocentricSurfaceNormal(cartesian) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n    return scratchVector.from(cartesian).normalize().to(result);\n  }\n\n  geodeticSurfaceNormalCartographic(cartographic) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n    const cartographicVectorRadians = fromCartographicToRadians(cartographic);\n    const longitude = cartographicVectorRadians[0];\n    const latitude = cartographicVectorRadians[1];\n    const cosLatitude = Math.cos(latitude);\n    scratchVector.set(cosLatitude * Math.cos(longitude), cosLatitude * Math.sin(longitude), Math.sin(latitude)).normalize();\n    return scratchVector.to(result);\n  }\n\n  geodeticSurfaceNormal(cartesian) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n    return scratchVector.from(cartesian).scale(this.oneOverRadiiSquared).normalize().to(result);\n  }\n\n  scaleToGeodeticSurface(cartesian, result) {\n    return scaleToGeodeticSurface(cartesian, this, result);\n  }\n\n  scaleToGeocentricSurface(cartesian) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n    scratchPosition.from(cartesian);\n    const positionX = scratchPosition.x;\n    const positionY = scratchPosition.y;\n    const positionZ = scratchPosition.z;\n    const oneOverRadiiSquared = this.oneOverRadiiSquared;\n    const beta = 1.0 / Math.sqrt(positionX * positionX * oneOverRadiiSquared.x + positionY * positionY * oneOverRadiiSquared.y + positionZ * positionZ * oneOverRadiiSquared.z);\n    return scratchPosition.multiplyScalar(beta).to(result);\n  }\n\n  transformPositionToScaledSpace(position) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n    return scratchPosition.from(position).scale(this.oneOverRadii).to(result);\n  }\n\n  transformPositionFromScaledSpace(position) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n    return scratchPosition.from(position).scale(this.radii).to(result);\n  }\n\n  getSurfaceNormalIntersectionWithZAxis(position) {\n    let buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.0;\n    let result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0, 0, 0];\n    assert(equals(this.radii.x, this.radii.y, _MathUtils.EPSILON15));\n    assert(this.radii.z > 0);\n    scratchPosition.from(position);\n    const z = scratchPosition.z * (1 - this.squaredXOverSquaredZ);\n\n    if (Math.abs(z) >= this.radii.z - buffer) {\n      return undefined;\n    }\n\n    return scratchPosition.set(0.0, 0.0, z).to(result);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Vector3","Matrix4","toRadians","toDegrees","assert","equals","_MathUtils","vec3","WGS84_RADIUS_X","WGS84_RADIUS_Y","WGS84_RADIUS_Z","fromCartographicToRadians","toCartographicFromRadians","scaleToGeodeticSurface","localFrameToFixedFrame","scratchVector","scratchNormal","scratchK","scratchPosition","scratchHeight","scratchCartesian","wgs84","Ellipsoid","WGS84","constructor","x","y","z","radii","radiiSquared","radiiToTheFourth","oneOverRadii","oneOverRadiiSquared","minimumRadius","Math","min","maximumRadius","max","centerToleranceSquared","EPSILON1","squaredXOverSquaredZ","Object","freeze","right","Boolean","toString","cartographicToCartesian","cartographic","result","normal","k","height","geodeticSurfaceNormalCartographic","copy","scale","gamma","sqrt","dot","add","to","cartesianToCartographic","cartesian","from","point","undefined","geodeticSurfaceNormal","h","subtract","longitude","atan2","latitude","asin","sign","length","eastNorthUpToFixedFrame","origin","firstAxis","secondAxis","thirdAxis","geocentricSurfaceNormal","normalize","cartographicVectorRadians","cosLatitude","cos","set","sin","scaleToGeocentricSurface","positionX","positionY","positionZ","beta","multiplyScalar","transformPositionToScaledSpace","position","transformPositionFromScaledSpace","getSurfaceNormalIntersectionWithZAxis","buffer","EPSILON15","abs"],"sources":["../../../src/ellipsoid/ellipsoid.js"],"sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/* eslint-disable */\nimport {Vector3, Matrix4, toRadians, toDegrees, assert, equals, _MathUtils} from '@math.gl/core';\nimport * as vec3 from 'gl-matrix/vec3';\n\nimport {WGS84_RADIUS_X, WGS84_RADIUS_Y, WGS84_RADIUS_Z} from '../constants';\nimport {fromCartographicToRadians, toCartographicFromRadians} from '../type-utils';\n\nimport scaleToGeodeticSurface from './helpers/scale-to-geodetic-surface';\nimport localFrameToFixedFrame from './helpers/ellipsoid-transform';\n\nconst scratchVector = new Vector3();\nconst scratchNormal = new Vector3();\nconst scratchK = new Vector3();\nconst scratchPosition = new Vector3();\nconst scratchHeight = new Vector3();\nconst scratchCartesian = new Vector3();\n\nlet wgs84;\n\n// A quadratic surface defined in Cartesian coordinates by the equation\n// <code>(x / a)^2 + (y / b)^2 + (z / c)^2 = 1</code>.  Primarily used\n// to represent the shape of planetary bodies.\nexport default class Ellipsoid {\n  // An Ellipsoid instance initialized to the WGS84 standard.\n  static get WGS84() {\n    wgs84 = wgs84 || new Ellipsoid(WGS84_RADIUS_X, WGS84_RADIUS_Y, WGS84_RADIUS_Z);\n    return wgs84;\n  }\n\n  // Creates an Ellipsoid from a Cartesian specifying the radii in x, y, and z directions.\n  constructor(x = 0.0, y = 0.0, z = 0.0) {\n    assert(x >= 0.0);\n    assert(y >= 0.0);\n    assert(z >= 0.0);\n\n    this.radii = new Vector3(x, y, z);\n\n    this.radiiSquared = new Vector3(x * x, y * y, z * z);\n\n    this.radiiToTheFourth = new Vector3(x * x * x * x, y * y * y * y, z * z * z * z);\n\n    this.oneOverRadii = new Vector3(\n      x === 0.0 ? 0.0 : 1.0 / x,\n      y === 0.0 ? 0.0 : 1.0 / y,\n      z === 0.0 ? 0.0 : 1.0 / z\n    );\n\n    this.oneOverRadiiSquared = new Vector3(\n      x === 0.0 ? 0.0 : 1.0 / (x * x),\n      y === 0.0 ? 0.0 : 1.0 / (y * y),\n      z === 0.0 ? 0.0 : 1.0 / (z * z)\n    );\n\n    this.minimumRadius = Math.min(x, y, z);\n\n    this.maximumRadius = Math.max(x, y, z);\n\n    this.centerToleranceSquared = _MathUtils.EPSILON1;\n\n    if (this.radiiSquared.z !== 0) {\n      this.squaredXOverSquaredZ = this.radiiSquared.x / this.radiiSquared.z;\n    }\n\n    Object.freeze(this);\n  }\n\n  // Compares this Ellipsoid against the provided Ellipsoid componentwise and returns\n  equals(right) {\n    return this === right || Boolean(right && this.radii.equals(right.radii));\n  }\n\n  // Creates a string representing this Ellipsoid in the format '(radii.x, radii.y, radii.z)'.\n  toString() {\n    return this.radii.toString();\n  }\n\n  // Converts the provided cartographic to Cartesian representation.\n  cartographicToCartesian(cartographic, result = [0, 0, 0]) {\n    const normal = scratchNormal;\n    const k = scratchK;\n\n    const [, , height] = cartographic;\n    this.geodeticSurfaceNormalCartographic(cartographic, normal);\n    k.copy(this.radiiSquared).scale(normal);\n\n    const gamma = Math.sqrt(normal.dot(k));\n    k.scale(1 / gamma);\n\n    normal.scale(height);\n\n    k.add(normal);\n\n    return k.to(result);\n  }\n\n  // Converts the provided cartesian to cartographic (lng/lat/z) representation.\n  // The cartesian is undefined at the center of the ellipsoid.\n  cartesianToCartographic(cartesian, result = [0, 0, 0]) {\n    scratchCartesian.from(cartesian);\n    const point = this.scaleToGeodeticSurface(scratchCartesian, scratchPosition);\n\n    if (!point) {\n      return undefined;\n    }\n\n    const normal = this.geodeticSurfaceNormal(point, scratchNormal);\n\n    const h = scratchHeight;\n    h.copy(scratchCartesian).subtract(point);\n\n    const longitude = Math.atan2(normal.y, normal.x);\n    const latitude = Math.asin(normal.z);\n    const height = Math.sign(vec3.dot(h, scratchCartesian)) * vec3.length(h);\n\n    return toCartographicFromRadians([longitude, latitude, height], result);\n  }\n\n  // Computes a 4x4 transformation matrix from a reference frame with an east-north-up axes\n  // centered at the provided origin to the provided ellipsoid's fixed reference frame.\n  eastNorthUpToFixedFrame(origin, result = new Matrix4()) {\n    return localFrameToFixedFrame(this, 'east', 'north', 'up', origin, result);\n  }\n\n  // Computes a 4x4 transformation matrix from a reference frame centered at\n  // the provided origin to the ellipsoid's fixed reference frame.\n  localFrameToFixedFrame(firstAxis, secondAxis, thirdAxis, origin, result = new Matrix4()) {\n    return localFrameToFixedFrame(this, firstAxis, secondAxis, thirdAxis, origin, result);\n  }\n\n  // Computes the unit vector directed from the center of this ellipsoid toward\n  // the provided Cartesian position.\n  geocentricSurfaceNormal(cartesian, result = [0, 0, 0]) {\n    return scratchVector.from(cartesian).normalize().to(result);\n  }\n\n  // Computes the normal of the plane tangent to the surface of the ellipsoid at provided position.\n  geodeticSurfaceNormalCartographic(cartographic, result = [0, 0, 0]) {\n    const cartographicVectorRadians = fromCartographicToRadians(cartographic);\n\n    const longitude = cartographicVectorRadians[0];\n    const latitude = cartographicVectorRadians[1];\n\n    const cosLatitude = Math.cos(latitude);\n\n    scratchVector\n      .set(cosLatitude * Math.cos(longitude), cosLatitude * Math.sin(longitude), Math.sin(latitude))\n      .normalize();\n\n    return scratchVector.to(result);\n  }\n\n  // Computes the normal of the plane tangent to the surface of the ellipsoid at the provided position.\n  geodeticSurfaceNormal(cartesian, result = [0, 0, 0]) {\n    return scratchVector.from(cartesian).scale(this.oneOverRadiiSquared).normalize().to(result);\n  }\n\n  // Scales the provided Cartesian position along the geodetic surface normal\n  // so that it is on the surface of this ellipsoid.  If the position is\n  // at the center of the ellipsoid, this function returns undefined.\n  scaleToGeodeticSurface(cartesian, result) {\n    return scaleToGeodeticSurface(cartesian, this, result);\n  }\n\n  // Scales the provided Cartesian position along the geocentric surface normal\n  // so that it is on the surface of this ellipsoid.\n  scaleToGeocentricSurface(cartesian, result = [0, 0, 0]) {\n    scratchPosition.from(cartesian);\n\n    const positionX = scratchPosition.x;\n    const positionY = scratchPosition.y;\n    const positionZ = scratchPosition.z;\n    const oneOverRadiiSquared = this.oneOverRadiiSquared;\n\n    const beta =\n      1.0 /\n      Math.sqrt(\n        positionX * positionX * oneOverRadiiSquared.x +\n          positionY * positionY * oneOverRadiiSquared.y +\n          positionZ * positionZ * oneOverRadiiSquared.z\n      );\n\n    return scratchPosition.multiplyScalar(beta).to(result);\n  }\n\n  // Transforms a Cartesian X, Y, Z position to the ellipsoid-scaled space by multiplying\n  // its components by the result of `Ellipsoid#oneOverRadii`\n  transformPositionToScaledSpace(position, result = [0, 0, 0]) {\n    return scratchPosition.from(position).scale(this.oneOverRadii).to(result);\n  }\n\n  // Transforms a Cartesian X, Y, Z position from the ellipsoid-scaled space by multiplying\n  // its components by the result of `Ellipsoid#radii`.\n  transformPositionFromScaledSpace(position, result = [0, 0, 0]) {\n    return scratchPosition.from(position).scale(this.radii).to(result);\n  }\n\n  // Computes a point which is the intersection of the surface normal with the z-axis.\n  getSurfaceNormalIntersectionWithZAxis(position, buffer = 0.0, result = [0, 0, 0]) {\n    // Ellipsoid must be an ellipsoid of revolution (radii.x == radii.y)\n    assert(equals(this.radii.x, this.radii.y, _MathUtils.EPSILON15));\n    assert(this.radii.z > 0);\n\n    scratchPosition.from(position);\n    const z = scratchPosition.z * (1 - this.squaredXOverSquaredZ);\n\n    if (Math.abs(z) >= this.radii.z - buffer) {\n      return undefined;\n    }\n\n    return scratchPosition.set(0.0, 0.0, z).to(result);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}