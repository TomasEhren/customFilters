{"ast":null,"code":"import { assert } from '@loaders.gl/loader-utils';\nimport { selectLoaderSync } from './select-loader';\nimport { isLoaderObject } from '../loader-utils/normalize-loader';\nimport { normalizeOptions } from '../loader-utils/option-utils';\nimport { getArrayBufferOrStringFromDataSync } from '../loader-utils/get-data';\nimport { getLoaderContext, getLoadersFromContext } from '../loader-utils/loader-context';\nimport { getResourceUrlAndType } from '../utils/resource-utils';\nexport function parseSync(data, loaders, options, context) {\n  assert(!context || typeof context === 'object');\n\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined;\n    options = loaders;\n    loaders = undefined;\n  }\n\n  options = options || {};\n  var typedLoaders = loaders;\n  var candidateLoaders = getLoadersFromContext(typedLoaders, context);\n  var loader = selectLoaderSync(data, candidateLoaders, options);\n\n  if (!loader) {\n    return null;\n  }\n\n  options = normalizeOptions(options, loader, candidateLoaders);\n\n  var _getResourceUrlAndTyp = getResourceUrlAndType(data),\n      url = _getResourceUrlAndTyp.url;\n\n  var parse = function parse() {\n    throw new Error('parseSync called parse');\n  };\n\n  context = getLoaderContext({\n    url: url,\n    parseSync: parseSync,\n    parse: parse,\n    loaders: loaders\n  }, options);\n  return parseWithLoaderSync(loader, data, options, context);\n}\n\nfunction parseWithLoaderSync(loader, data, options, context) {\n  data = getArrayBufferOrStringFromDataSync(data, loader, options);\n\n  if (loader.parseTextSync && typeof data === 'string') {\n    return loader.parseTextSync(data, options);\n  }\n\n  if (loader.parseSync && data instanceof ArrayBuffer) {\n    return loader.parseSync(data, options, context);\n  }\n\n  throw new Error(\"\".concat(loader.name, \" loader: 'parseSync' not supported by this loader, use 'parse' instead. \").concat(context.url || ''));\n}","map":{"version":3,"mappings":"AAOA,SAAQA,MAAR,QAAqB,0BAArB;AACA,SAAQC,gBAAR,QAA+B,iBAA/B;AACA,SAAQC,cAAR,QAA6B,kCAA7B;AACA,SAAQC,gBAAR,QAA+B,8BAA/B;AACA,SAAQC,kCAAR,QAAiD,0BAAjD;AACA,SAAQC,gBAAR,EAA0BC,qBAA1B,QAAsD,gCAAtD;AACA,SAAQC,qBAAR,QAAoC,yBAApC;AASA,OAAO,SAASC,SAAT,CACLC,IADK,EAELC,OAFK,EAGLC,OAHK,EAILC,OAJK,EAKA;EACLZ,MAAM,CAAC,CAACY,OAAD,IAAY,OAAOA,OAAP,KAAmB,QAAhC,CAANZ;;EAIA,IAAI,CAACa,KAAK,CAACC,OAAND,CAAcH,OAAdG,CAAD,IAA2B,CAACX,cAAc,CAACQ,OAAD,CAA9C,EAAyD;IACvDE,OAAO,GAAGG,SAAVH;IACAD,OAAO,GAAGD,OAAVC;IACAD,OAAO,GAAGK,SAAVL;EACD;;EAEDC,OAAO,GAAGA,OAAO,IAAI,EAArBA;EAIA,IAAMK,YAAY,GAAGN,OAArB;EACA,IAAMO,gBAAgB,GAAGX,qBAAqB,CAACU,YAAD,EAAeJ,OAAf,CAA9C;EACA,IAAMM,MAAM,GAAGjB,gBAAgB,CAACQ,IAAD,EAAOQ,gBAAP,EAAyBN,OAAzB,CAA/B;;EAEA,IAAI,CAACO,MAAL,EAAa;IACX,OAAO,IAAP;EACD;;EAGDP,OAAO,GAAGR,gBAAgB,CAACQ,OAAD,EAAUO,MAAV,EAAkBD,gBAAlB,CAA1BN;;EAGA,4BAAcJ,qBAAqB,CAACE,IAAD,CAAnC;EAAA,IAAOU,GAAP,yBAAOA,GAAP;;EAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;IAClB,MAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;EADF;;EAGAT,OAAO,GAAGP,gBAAgB,CAAC;IAACc,GAAD,EAACA,GAAD;IAAMX,SAAN,EAAMA,SAAN;IAAiBY,KAAjB,EAAiBA,KAAjB;IAAwBV,OAAO,EAAEA;EAAjC,CAAD,EAAwDC,OAAxD,CAA1BC;EAEA,OAAOU,mBAAmB,CAACJ,MAAD,EAA6BT,IAA7B,EAAmCE,OAAnC,EAA4CC,OAA5C,CAA1B;AACD;;AAGD,SAASU,mBAAT,CACEJ,MADF,EAEET,IAFF,EAGEE,OAHF,EAIEC,OAJF,EAKE;EACAH,IAAI,GAAGL,kCAAkC,CAACK,IAAD,EAAOS,MAAP,EAAeP,OAAf,CAAzCF;;EAEA,IAAIS,MAAM,CAACK,aAAPL,IAAwB,OAAOT,IAAP,KAAgB,QAA5C,EAAsD;IACpD,OAAOS,MAAM,CAACK,aAAPL,CAAqBT,IAArBS,EAA2BP,OAA3BO,CAAP;EACD;;EAED,IAAIA,MAAM,CAACV,SAAPU,IAAoBT,IAAI,YAAYe,WAAxC,EAAqD;IACnD,OAAON,MAAM,CAACV,SAAPU,CAAiBT,IAAjBS,EAAuBP,OAAvBO,EAAgCN,OAAhCM,CAAP;EACD;;EAGD,MAAM,IAAIG,KAAJ,WACDH,MAAM,CAACO,IADN,qFAEFb,OAAO,CAACO,GAARP,IAAe,EAFb,EAAN;AAKD","names":["assert","selectLoaderSync","isLoaderObject","normalizeOptions","getArrayBufferOrStringFromDataSync","getLoaderContext","getLoadersFromContext","getResourceUrlAndType","parseSync","data","loaders","options","context","Array","isArray","undefined","typedLoaders","candidateLoaders","loader","url","parse","Error","parseWithLoaderSync","parseTextSync","ArrayBuffer","name"],"sources":["../../../../src/lib/api/parse-sync.ts"],"sourcesContent":["import type {\n  SyncDataType,\n  Loader,\n  LoaderWithParser,\n  LoaderContext,\n  LoaderOptions\n} from '@loaders.gl/loader-utils';\nimport {assert} from '@loaders.gl/loader-utils';\nimport {selectLoaderSync} from './select-loader';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {normalizeOptions} from '../loader-utils/option-utils';\nimport {getArrayBufferOrStringFromDataSync} from '../loader-utils/get-data';\nimport {getLoaderContext, getLoadersFromContext} from '../loader-utils/loader-context';\nimport {getResourceUrlAndType} from '../utils/resource-utils';\n\n/**\n * Parses `data` synchronously using a specified loader\n * @param data\n * @param loaders\n * @param options\n * @param context\n */\nexport function parseSync(\n  data: SyncDataType,\n  loaders?: Loader | Loader[] | LoaderOptions,\n  options?: LoaderOptions,\n  context?: LoaderContext\n): any {\n  assert(!context || typeof context === 'object'); // parseSync no longer accepts final url\n\n  // Signature: parseSync(data, options)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined; // context not supported in short signature\n    options = loaders as LoaderOptions;\n    loaders = undefined;\n  }\n\n  options = options || {};\n\n  // Chooses a loader (and normalizes it)\n  // Also use any loaders in the context, new loaders take priority\n  const typedLoaders = loaders as Loader | Loader[] | undefined;\n  const candidateLoaders = getLoadersFromContext(typedLoaders, context);\n  const loader = selectLoaderSync(data, candidateLoaders, options);\n  // Note: if nothrow option was set, it is possible that no loader was found, if so just return null\n  if (!loader) {\n    return null;\n  }\n\n  // Normalize options\n  options = normalizeOptions(options, loader, candidateLoaders);\n\n  // Extract a url for auto detection\n  const {url} = getResourceUrlAndType(data);\n\n  const parse = () => {\n    throw new Error('parseSync called parse');\n  };\n  context = getLoaderContext({url, parseSync, parse, loaders: loaders as Loader[]}, options);\n\n  return parseWithLoaderSync(loader as LoaderWithParser, data, options, context);\n}\n\n// TODO - should accept loader.parseSync/parse and generate 1 chunk asyncIterator\nfunction parseWithLoaderSync(\n  loader: LoaderWithParser,\n  data: SyncDataType,\n  options: LoaderOptions,\n  context: LoaderContext\n) {\n  data = getArrayBufferOrStringFromDataSync(data, loader, options);\n\n  if (loader.parseTextSync && typeof data === 'string') {\n    return loader.parseTextSync(data, options); // , context, loader);\n  }\n\n  if (loader.parseSync && data instanceof ArrayBuffer) {\n    return loader.parseSync(data, options, context); // , loader);\n  }\n\n  // TBD - If synchronous parser not available, return null\n  throw new Error(\n    `${loader.name} loader: 'parseSync' not supported by this loader, use 'parse' instead. ${\n      context.url || ''\n    }`\n  );\n}\n"]},"metadata":{},"sourceType":"module"}