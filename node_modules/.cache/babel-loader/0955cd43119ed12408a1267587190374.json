{"ast":null,"code":"import { Layer, project32, picking, log } from '@deck.gl/core';\nimport { isWebGL2 } from '@luma.gl/core';\nimport { pbr } from '@luma.gl/shadertools';\nimport { ScenegraphNode, createGLTFObjects } from '@luma.gl/experimental';\nimport { GLTFLoader } from '@loaders.gl/gltf';\nimport { waitForGLTFAssets } from './gltf-utils';\nimport { MATRIX_ATTRIBUTES, shouldComposeModelMatrix } from '../utils/matrix';\nimport vs from './scenegraph-layer-vertex.glsl';\nimport fs from './scenegraph-layer-fragment.glsl';\nconst DEFAULT_COLOR = [255, 255, 255, 255];\nconst defaultProps = {\n  scenegraph: {\n    type: 'object',\n    value: null,\n    async: true\n  },\n  getScene: gltf => {\n    if (gltf && gltf.scenes) {\n      return typeof gltf.scene === 'object' ? gltf.scene : gltf.scenes[gltf.scene || 0];\n    }\n\n    return gltf;\n  },\n  getAnimator: scenegraph => scenegraph && scenegraph.animator,\n  _animations: null,\n  sizeScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  sizeMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  sizeMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  _lighting: 'flat',\n  _imageBasedLightingEnvironment: null,\n  getOrientation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getScale: {\n    type: 'accessor',\n    value: [1, 1, 1]\n  },\n  getTranslation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getTransformMatrix: {\n    type: 'accessor',\n    value: []\n  },\n  loaders: [GLTFLoader]\n};\nexport default class ScenegraphLayer extends Layer {\n  getShaders() {\n    const modules = [project32, picking];\n\n    if (this.props._lighting === 'pbr') {\n      modules.push(pbr);\n    }\n\n    return {\n      vs,\n      fs,\n      modules\n    };\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        accessor: 'getPosition',\n        transition: true\n      },\n      instanceColors: {\n        type: 5121,\n        size: this.props.colorFormat.length,\n        accessor: 'getColor',\n        normalized: true,\n        defaultValue: DEFAULT_COLOR,\n        transition: true\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n  }\n\n  updateState(params) {\n    super.updateState(params);\n    const {\n      props,\n      oldProps\n    } = params;\n\n    if (props.scenegraph !== oldProps.scenegraph) {\n      this._updateScenegraph(props);\n    } else if (props._animations !== oldProps._animations) {\n      this._applyAnimationsProp(this.state.scenegraph, this.state.animator, props._animations);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    this._deleteScenegraph();\n  }\n\n  _updateScenegraph(props) {\n    const {\n      gl\n    } = this.context;\n    let scenegraphData = null;\n\n    if (props.scenegraph instanceof ScenegraphNode) {\n      scenegraphData = {\n        scenes: [props.scenegraph]\n      };\n    } else if (props.scenegraph && !props.scenegraph.gltf) {\n      const gltf = props.scenegraph;\n      const gltfObjects = createGLTFObjects(gl, gltf, this._getModelOptions());\n      scenegraphData = {\n        gltf,\n        ...gltfObjects\n      };\n      waitForGLTFAssets(gltfObjects).then(() => this.setNeedsRedraw());\n    } else if (props.scenegraph) {\n      log.deprecated('ScenegraphLayer.props.scenegraph', 'Use GLTFLoader instead of GLTFScenegraphLoader')();\n      scenegraphData = props.scenegraph;\n    }\n\n    const options = {\n      layer: this,\n      gl\n    };\n    const scenegraph = props.getScene(scenegraphData, options);\n    const animator = props.getAnimator(scenegraphData, options);\n\n    if (scenegraph instanceof ScenegraphNode) {\n      this._deleteScenegraph();\n\n      this._applyAllAttributes(scenegraph);\n\n      this._applyAnimationsProp(scenegraph, animator, props._animations);\n\n      this.setState({\n        scenegraph,\n        animator\n      });\n    } else if (scenegraph !== null) {\n      log.warn('invalid scenegraph:', scenegraph)();\n    }\n  }\n\n  _applyAllAttributes(scenegraph) {\n    if (this.state.attributesAvailable) {\n      const allAttributes = this.getAttributeManager().getAttributes();\n      scenegraph.traverse(model => {\n        this._setModelAttributes(model.model, allAttributes);\n      });\n    }\n  }\n\n  _applyAnimationsProp(scenegraph, animator, animationsProp) {\n    if (!scenegraph || !animator || !animationsProp) {\n      return;\n    }\n\n    const animations = animator.getAnimations();\n    Object.keys(animationsProp).sort().forEach(key => {\n      const value = animationsProp[key];\n\n      if (key === '*') {\n        animations.forEach(animation => {\n          Object.assign(animation, value);\n        });\n      } else if (Number.isFinite(Number(key))) {\n        const number = Number(key);\n\n        if (number >= 0 && number < animations.length) {\n          Object.assign(animations[number], value);\n        } else {\n          log.warn(\"animation \".concat(key, \" not found\"))();\n        }\n      } else {\n        const findResult = animations.find(_ref => {\n          let {\n            name\n          } = _ref;\n          return name === key;\n        });\n\n        if (findResult) {\n          Object.assign(findResult, value);\n        } else {\n          log.warn(\"animation \".concat(key, \" not found\"))();\n        }\n      }\n    });\n  }\n\n  _deleteScenegraph() {\n    const {\n      scenegraph\n    } = this.state;\n\n    if (scenegraph instanceof ScenegraphNode) {\n      scenegraph.delete();\n    }\n  }\n\n  _getModelOptions() {\n    const {\n      _imageBasedLightingEnvironment\n    } = this.props;\n    let env = null;\n\n    if (_imageBasedLightingEnvironment) {\n      if (typeof _imageBasedLightingEnvironment === 'function') {\n        env = _imageBasedLightingEnvironment({\n          gl: this.context.gl,\n          layer: this\n        });\n      } else {\n        env = _imageBasedLightingEnvironment;\n      }\n    }\n\n    return {\n      gl: this.context.gl,\n      waitForFullLoad: true,\n      imageBasedLightingEnvironment: env,\n      modelOptions: {\n        isInstanced: true,\n        transpileToGLSL100: !isWebGL2(this.context.gl),\n        ...this.getShaders()\n      },\n      useTangents: false\n    };\n  }\n\n  updateAttributes(changedAttributes) {\n    this.setState({\n      attributesAvailable: true\n    });\n    if (!this.state.scenegraph) return;\n    this.state.scenegraph.traverse(model => {\n      this._setModelAttributes(model.model, changedAttributes);\n    });\n  }\n\n  draw(_ref2) {\n    let {\n      moduleParameters = null,\n      parameters = {},\n      context\n    } = _ref2;\n    if (!this.state.scenegraph) return;\n\n    if (this.props._animations && this.state.animator) {\n      this.state.animator.animate(context.timeline.getTime());\n      this.setNeedsRedraw();\n    }\n\n    const {\n      viewport\n    } = this.context;\n    const {\n      sizeScale,\n      sizeMinPixels,\n      sizeMaxPixels,\n      opacity,\n      coordinateSystem\n    } = this.props;\n    const numInstances = this.getNumInstances();\n    this.state.scenegraph.traverse((model, _ref3) => {\n      let {\n        worldMatrix\n      } = _ref3;\n      model.model.setInstanceCount(numInstances);\n      model.updateModuleSettings(moduleParameters);\n      model.draw({\n        parameters,\n        uniforms: {\n          sizeScale,\n          opacity,\n          sizeMinPixels,\n          sizeMaxPixels,\n          composeModelMatrix: shouldComposeModelMatrix(viewport, coordinateSystem),\n          sceneModelMatrix: worldMatrix,\n          u_Camera: model.model.getUniforms().project_uCameraPosition\n        }\n      });\n    });\n  }\n\n}\nScenegraphLayer.layerName = 'ScenegraphLayer';\nScenegraphLayer.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["Layer","project32","picking","log","isWebGL2","pbr","ScenegraphNode","createGLTFObjects","GLTFLoader","waitForGLTFAssets","MATRIX_ATTRIBUTES","shouldComposeModelMatrix","vs","fs","DEFAULT_COLOR","defaultProps","scenegraph","type","value","async","getScene","gltf","scenes","scene","getAnimator","animator","_animations","sizeScale","min","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","getPosition","x","position","getColor","_lighting","_imageBasedLightingEnvironment","getOrientation","getScale","getTranslation","getTransformMatrix","loaders","ScenegraphLayer","getShaders","modules","props","push","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","accessor","transition","instanceColors","colorFormat","length","normalized","defaultValue","instanceModelMatrix","updateState","params","oldProps","_updateScenegraph","_applyAnimationsProp","state","finalizeState","_deleteScenegraph","gl","context","scenegraphData","gltfObjects","_getModelOptions","then","setNeedsRedraw","deprecated","options","layer","_applyAllAttributes","setState","warn","attributesAvailable","allAttributes","getAttributes","traverse","model","_setModelAttributes","animationsProp","animations","getAnimations","Object","keys","sort","forEach","key","animation","assign","isFinite","number","findResult","find","name","delete","env","waitForFullLoad","imageBasedLightingEnvironment","modelOptions","isInstanced","transpileToGLSL100","useTangents","updateAttributes","changedAttributes","draw","moduleParameters","parameters","animate","timeline","getTime","viewport","opacity","coordinateSystem","numInstances","getNumInstances","worldMatrix","setInstanceCount","updateModuleSettings","uniforms","composeModelMatrix","sceneModelMatrix","u_Camera","getUniforms","project_uCameraPosition","layerName"],"sources":["../../../src/scenegraph-layer/scenegraph-layer.ts"],"sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, log} from '@deck.gl/core';\nimport {isWebGL2} from '@luma.gl/core';\nimport {pbr} from '@luma.gl/shadertools';\nimport {ScenegraphNode, createGLTFObjects} from '@luma.gl/experimental';\nimport GL from '@luma.gl/constants';\nimport {GLTFLoader} from '@loaders.gl/gltf';\nimport {waitForGLTFAssets} from './gltf-utils';\n\nimport {MATRIX_ATTRIBUTES, shouldComposeModelMatrix} from '../utils/matrix';\n\nimport vs from './scenegraph-layer-vertex.glsl';\nimport fs from './scenegraph-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [255, 255, 255, 255];\n\nconst defaultProps = {\n  scenegraph: {type: 'object', value: null, async: true},\n  getScene: gltf => {\n    if (gltf && gltf.scenes) {\n      // gltf post processor replaces `gltf.scene` number with the scene `object`\n      return typeof gltf.scene === 'object' ? gltf.scene : gltf.scenes[gltf.scene || 0];\n    }\n    return gltf;\n  },\n  getAnimator: scenegraph => scenegraph && scenegraph.animator,\n  _animations: null,\n\n  sizeScale: {type: 'number', value: 1, min: 0},\n  sizeMinPixels: {type: 'number', min: 0, value: 0},\n  sizeMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // flat or pbr\n  _lighting: 'flat',\n  // _lighting must be pbr for this to work\n  _imageBasedLightingEnvironment: null,\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {type: 'accessor', value: [0, 0, 0]},\n  getScale: {type: 'accessor', value: [1, 1, 1]},\n  getTranslation: {type: 'accessor', value: [0, 0, 0]},\n  // 4x4 matrix\n  getTransformMatrix: {type: 'accessor', value: []},\n\n  loaders: [GLTFLoader]\n};\n\nexport default class ScenegraphLayer extends Layer {\n  getShaders() {\n    const modules = [project32, picking];\n\n    if (this.props._lighting === 'pbr') {\n      modules.push(pbr);\n    }\n\n    return {vs, fs, modules};\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        accessor: 'getPosition',\n        transition: true\n      },\n      instanceColors: {\n        type: GL.UNSIGNED_BYTE,\n        size: this.props.colorFormat.length,\n        accessor: 'getColor',\n        normalized: true,\n        defaultValue: DEFAULT_COLOR,\n        transition: true\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n  }\n\n  updateState(params) {\n    super.updateState(params);\n    const {props, oldProps} = params;\n\n    if (props.scenegraph !== oldProps.scenegraph) {\n      this._updateScenegraph(props);\n    } else if (props._animations !== oldProps._animations) {\n      this._applyAnimationsProp(this.state.scenegraph, this.state.animator, props._animations);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    this._deleteScenegraph();\n  }\n\n  _updateScenegraph(props) {\n    const {gl} = this.context;\n    let scenegraphData = null;\n    if (props.scenegraph instanceof ScenegraphNode) {\n      // Signature 1: props.scenegraph is a proper luma.gl Scenegraph\n      scenegraphData = {scenes: [props.scenegraph]};\n    } else if (props.scenegraph && !props.scenegraph.gltf) {\n      // Converts loaders.gl gltf to luma.gl scenegraph using the undocumented @luma.gl/experimental function\n      const gltf = props.scenegraph;\n      const gltfObjects = createGLTFObjects(gl, gltf, this._getModelOptions());\n      scenegraphData = {gltf, ...gltfObjects};\n\n      waitForGLTFAssets(gltfObjects).then(() => this.setNeedsRedraw()); // eslint-disable-line @typescript-eslint/no-floating-promises\n    } else if (props.scenegraph) {\n      // DEPRECATED PATH: Assumes this data was loaded through GLTFScenegraphLoader\n      log.deprecated(\n        'ScenegraphLayer.props.scenegraph',\n        'Use GLTFLoader instead of GLTFScenegraphLoader'\n      )();\n      scenegraphData = props.scenegraph;\n    }\n\n    const options = {layer: this, gl};\n    const scenegraph = props.getScene(scenegraphData, options);\n    const animator = props.getAnimator(scenegraphData, options);\n\n    if (scenegraph instanceof ScenegraphNode) {\n      this._deleteScenegraph();\n      this._applyAllAttributes(scenegraph);\n      this._applyAnimationsProp(scenegraph, animator, props._animations);\n      this.setState({scenegraph, animator});\n    } else if (scenegraph !== null) {\n      log.warn('invalid scenegraph:', scenegraph)();\n    }\n  }\n\n  _applyAllAttributes(scenegraph) {\n    if (this.state.attributesAvailable) {\n      const allAttributes = this.getAttributeManager().getAttributes();\n      scenegraph.traverse(model => {\n        this._setModelAttributes(model.model, allAttributes);\n      });\n    }\n  }\n\n  _applyAnimationsProp(scenegraph, animator, animationsProp) {\n    if (!scenegraph || !animator || !animationsProp) {\n      return;\n    }\n\n    const animations = animator.getAnimations();\n\n    // sort() to ensure '*' comes first so that other values can override\n    Object.keys(animationsProp)\n      .sort()\n      .forEach(key => {\n        // Key can be:\n        //  - number for index number\n        //  - name for animation name\n        //  - * to affect all animations\n        const value = animationsProp[key];\n\n        if (key === '*') {\n          animations.forEach(animation => {\n            Object.assign(animation, value);\n          });\n        } else if (Number.isFinite(Number(key))) {\n          const number = Number(key);\n          if (number >= 0 && number < animations.length) {\n            Object.assign(animations[number], value);\n          } else {\n            log.warn(`animation ${key} not found`)();\n          }\n        } else {\n          const findResult = animations.find(({name}) => name === key);\n          if (findResult) {\n            Object.assign(findResult, value);\n          } else {\n            log.warn(`animation ${key} not found`)();\n          }\n        }\n      });\n  }\n\n  _deleteScenegraph() {\n    const {scenegraph} = this.state;\n    if (scenegraph instanceof ScenegraphNode) {\n      scenegraph.delete();\n    }\n  }\n\n  _getModelOptions() {\n    const {_imageBasedLightingEnvironment} = this.props;\n\n    let env = null;\n    if (_imageBasedLightingEnvironment) {\n      if (typeof _imageBasedLightingEnvironment === 'function') {\n        env = _imageBasedLightingEnvironment({gl: this.context.gl, layer: this});\n      } else {\n        env = _imageBasedLightingEnvironment;\n      }\n    }\n\n    return {\n      gl: this.context.gl,\n      waitForFullLoad: true,\n      imageBasedLightingEnvironment: env,\n      modelOptions: {\n        isInstanced: true,\n        transpileToGLSL100: !isWebGL2(this.context.gl),\n        ...this.getShaders()\n      },\n      // tangents are not supported\n      useTangents: false\n    };\n  }\n\n  updateAttributes(changedAttributes) {\n    this.setState({attributesAvailable: true});\n    if (!this.state.scenegraph) return;\n\n    this.state.scenegraph.traverse(model => {\n      this._setModelAttributes(model.model, changedAttributes);\n    });\n  }\n\n  draw({moduleParameters = null, parameters = {}, context}) {\n    if (!this.state.scenegraph) return;\n\n    if (this.props._animations && this.state.animator) {\n      this.state.animator.animate(context.timeline.getTime());\n      this.setNeedsRedraw();\n    }\n\n    const {viewport} = this.context;\n    const {sizeScale, sizeMinPixels, sizeMaxPixels, opacity, coordinateSystem} = this.props;\n    const numInstances = this.getNumInstances();\n    this.state.scenegraph.traverse((model, {worldMatrix}) => {\n      model.model.setInstanceCount(numInstances);\n      model.updateModuleSettings(moduleParameters);\n      model.draw({\n        parameters,\n        uniforms: {\n          sizeScale,\n          opacity,\n          sizeMinPixels,\n          sizeMaxPixels,\n          composeModelMatrix: shouldComposeModelMatrix(viewport, coordinateSystem),\n          sceneModelMatrix: worldMatrix,\n          // Needed for PBR (TODO: find better way to get it)\n          // eslint-disable-next-line camelcase\n          u_Camera: model.model.getUniforms().project_uCameraPosition\n        }\n      });\n    });\n  }\n}\n\nScenegraphLayer.layerName = 'ScenegraphLayer';\nScenegraphLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}