{"ast":null,"code":"import _asyncToGenerator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _asyncIterator from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport _regeneratorRuntime from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/regenerator/index.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { isAsyncIterable } from '../utils/iterable-utils';\nimport { ASYNC_ORIGINAL_SYMBOL, ASYNC_RESOLVED_SYMBOL, ASYNC_DEFAULTS_SYMBOL } from './constants';\nvar EMPTY_PROPS = Object.freeze({});\n\nvar ComponentState = /*#__PURE__*/function () {\n  function ComponentState(component) {\n    _classCallCheck(this, ComponentState);\n\n    _defineProperty(this, \"component\", void 0);\n\n    _defineProperty(this, \"onAsyncPropUpdated\", void 0);\n\n    _defineProperty(this, \"asyncProps\", void 0);\n\n    _defineProperty(this, \"oldProps\", void 0);\n\n    _defineProperty(this, \"oldAsyncProps\", void 0);\n\n    this.component = component;\n    this.asyncProps = {};\n\n    this.onAsyncPropUpdated = function () {};\n\n    this.oldProps = null;\n    this.oldAsyncProps = null;\n  }\n\n  _createClass(ComponentState, [{\n    key: \"finalize\",\n    value: function finalize() {\n      for (var propName in this.asyncProps) {\n        var asyncProp = this.asyncProps[propName];\n\n        if (asyncProp && asyncProp.type && asyncProp.type.release) {\n          asyncProp.type.release(asyncProp.resolvedValue, asyncProp.type, this.component);\n        }\n      }\n    }\n  }, {\n    key: \"getOldProps\",\n    value: function getOldProps() {\n      return this.oldAsyncProps || this.oldProps || EMPTY_PROPS;\n    }\n  }, {\n    key: \"resetOldProps\",\n    value: function resetOldProps() {\n      this.oldAsyncProps = null;\n      this.oldProps = this.component.props;\n    }\n  }, {\n    key: \"hasAsyncProp\",\n    value: function hasAsyncProp(propName) {\n      return propName in this.asyncProps;\n    }\n  }, {\n    key: \"getAsyncProp\",\n    value: function getAsyncProp(propName) {\n      var asyncProp = this.asyncProps[propName];\n      return asyncProp && asyncProp.resolvedValue;\n    }\n  }, {\n    key: \"isAsyncPropLoading\",\n    value: function isAsyncPropLoading(propName) {\n      if (propName) {\n        var asyncProp = this.asyncProps[propName];\n        return Boolean(asyncProp && asyncProp.pendingLoadCount > 0 && asyncProp.pendingLoadCount !== asyncProp.resolvedLoadCount);\n      }\n\n      for (var key in this.asyncProps) {\n        if (this.isAsyncPropLoading(key)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"reloadAsyncProp\",\n    value: function reloadAsyncProp(propName, value) {\n      this._watchPromise(propName, Promise.resolve(value));\n    }\n  }, {\n    key: \"setAsyncProps\",\n    value: function setAsyncProps(props) {\n      var resolvedValues = props[ASYNC_RESOLVED_SYMBOL] || {};\n      var originalValues = props[ASYNC_ORIGINAL_SYMBOL] || props;\n      var defaultValues = props[ASYNC_DEFAULTS_SYMBOL] || {};\n\n      for (var propName in resolvedValues) {\n        var value = resolvedValues[propName];\n\n        this._createAsyncPropData(propName, defaultValues[propName]);\n\n        this._updateAsyncProp(propName, value);\n\n        resolvedValues[propName] = this.getAsyncProp(propName);\n      }\n\n      for (var _propName in originalValues) {\n        var _value = originalValues[_propName];\n\n        this._createAsyncPropData(_propName, defaultValues[_propName]);\n\n        this._updateAsyncProp(_propName, _value);\n      }\n    }\n  }, {\n    key: \"_fetch\",\n    value: function _fetch(propName, url) {\n      return url;\n    }\n  }, {\n    key: \"_onResolve\",\n    value: function _onResolve(propName, value) {}\n  }, {\n    key: \"_onError\",\n    value: function _onError(propName, error) {}\n  }, {\n    key: \"_updateAsyncProp\",\n    value: function _updateAsyncProp(propName, value) {\n      if (!this._didAsyncInputValueChange(propName, value)) {\n        return;\n      }\n\n      if (typeof value === 'string') {\n        value = this._fetch(propName, value);\n      }\n\n      if (value instanceof Promise) {\n        this._watchPromise(propName, value);\n\n        return;\n      }\n\n      if (isAsyncIterable(value)) {\n        this._resolveAsyncIterable(propName, value);\n\n        return;\n      }\n\n      this._setPropValue(propName, value);\n    }\n  }, {\n    key: \"_freezeAsyncOldProps\",\n    value: function _freezeAsyncOldProps() {\n      if (!this.oldAsyncProps && this.oldProps) {\n        this.oldAsyncProps = Object.create(this.oldProps);\n\n        for (var propName in this.asyncProps) {\n          Object.defineProperty(this.oldAsyncProps, propName, {\n            enumerable: true,\n            value: this.oldProps[propName]\n          });\n        }\n      }\n    }\n  }, {\n    key: \"_didAsyncInputValueChange\",\n    value: function _didAsyncInputValueChange(propName, value) {\n      var asyncProp = this.asyncProps[propName];\n\n      if (value === asyncProp.resolvedValue || value === asyncProp.lastValue) {\n        return false;\n      }\n\n      asyncProp.lastValue = value;\n      return true;\n    }\n  }, {\n    key: \"_setPropValue\",\n    value: function _setPropValue(propName, value) {\n      this._freezeAsyncOldProps();\n\n      var asyncProp = this.asyncProps[propName];\n\n      if (asyncProp) {\n        value = this._postProcessValue(asyncProp, value);\n        asyncProp.resolvedValue = value;\n        asyncProp.pendingLoadCount++;\n        asyncProp.resolvedLoadCount = asyncProp.pendingLoadCount;\n      }\n    }\n  }, {\n    key: \"_setAsyncPropValue\",\n    value: function _setAsyncPropValue(propName, value, loadCount) {\n      var asyncProp = this.asyncProps[propName];\n\n      if (asyncProp && loadCount >= asyncProp.resolvedLoadCount && value !== undefined) {\n        this._freezeAsyncOldProps();\n\n        asyncProp.resolvedValue = value;\n        asyncProp.resolvedLoadCount = loadCount;\n        this.onAsyncPropUpdated(propName, value);\n      }\n    }\n  }, {\n    key: \"_watchPromise\",\n    value: function _watchPromise(propName, promise) {\n      var _this = this;\n\n      var asyncProp = this.asyncProps[propName];\n\n      if (asyncProp) {\n        asyncProp.pendingLoadCount++;\n        var loadCount = asyncProp.pendingLoadCount;\n        promise.then(function (data) {\n          data = _this._postProcessValue(asyncProp, data);\n\n          _this._setAsyncPropValue(propName, data, loadCount);\n\n          _this._onResolve(propName, data);\n        }).catch(function (error) {\n          _this._onError(propName, error);\n        });\n      }\n    }\n  }, {\n    key: \"_resolveAsyncIterable\",\n    value: function () {\n      var _resolveAsyncIterable2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(propName, iterable) {\n        var asyncProp, loadCount, data, count, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk, dataTransform;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(propName !== 'data')) {\n                  _context.next = 3;\n                  break;\n                }\n\n                this._setPropValue(propName, iterable);\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                asyncProp = this.asyncProps[propName];\n\n                if (asyncProp) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 6:\n                asyncProp.pendingLoadCount++;\n                loadCount = asyncProp.pendingLoadCount;\n                data = [];\n                count = 0;\n                _iteratorAbruptCompletion = false;\n                _didIteratorError = false;\n                _context.prev = 12;\n                _iterator = _asyncIterator(iterable);\n\n              case 14:\n                _context.next = 16;\n                return _iterator.next();\n\n              case 16:\n                if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                  _context.next = 26;\n                  break;\n                }\n\n                chunk = _step.value;\n                dataTransform = this.component.props.dataTransform;\n\n                if (dataTransform) {\n                  data = dataTransform(chunk, data);\n                } else {\n                  data = data.concat(chunk);\n                }\n\n                Object.defineProperty(data, '__diff', {\n                  enumerable: false,\n                  value: [{\n                    startRow: count,\n                    endRow: data.length\n                  }]\n                });\n                count = data.length;\n\n                this._setAsyncPropValue(propName, data, loadCount);\n\n              case 23:\n                _iteratorAbruptCompletion = false;\n                _context.next = 14;\n                break;\n\n              case 26:\n                _context.next = 32;\n                break;\n\n              case 28:\n                _context.prev = 28;\n                _context.t0 = _context[\"catch\"](12);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 32:\n                _context.prev = 32;\n                _context.prev = 33;\n\n                if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                  _context.next = 37;\n                  break;\n                }\n\n                _context.next = 37;\n                return _iterator.return();\n\n              case 37:\n                _context.prev = 37;\n\n                if (!_didIteratorError) {\n                  _context.next = 40;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 40:\n                return _context.finish(37);\n\n              case 41:\n                return _context.finish(32);\n\n              case 42:\n                this._onResolve(propName, data);\n\n              case 43:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[12, 28, 32, 42], [33,, 37, 41]]);\n      }));\n\n      function _resolveAsyncIterable(_x, _x2) {\n        return _resolveAsyncIterable2.apply(this, arguments);\n      }\n\n      return _resolveAsyncIterable;\n    }()\n  }, {\n    key: \"_postProcessValue\",\n    value: function _postProcessValue(asyncProp, value) {\n      var propType = asyncProp.type;\n\n      if (propType) {\n        if (propType.release) {\n          propType.release(asyncProp.resolvedValue, propType, this.component);\n        }\n\n        if (propType.transform) {\n          return propType.transform(value, propType, this.component);\n        }\n      }\n\n      return value;\n    }\n  }, {\n    key: \"_createAsyncPropData\",\n    value: function _createAsyncPropData(propName, defaultValue) {\n      var asyncProp = this.asyncProps[propName];\n\n      if (!asyncProp) {\n        var propTypes = this.component && this.component.constructor._propTypes;\n        this.asyncProps[propName] = {\n          type: propTypes && propTypes[propName],\n          lastValue: null,\n          resolvedValue: defaultValue,\n          pendingLoadCount: 0,\n          resolvedLoadCount: 0\n        };\n      }\n    }\n  }]);\n\n  return ComponentState;\n}();\n\nexport { ComponentState as default };","map":{"version":3,"mappings":"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","names":["isAsyncIterable","ASYNC_ORIGINAL_SYMBOL","ASYNC_RESOLVED_SYMBOL","ASYNC_DEFAULTS_SYMBOL","EMPTY_PROPS","Object","freeze","ComponentState","constructor","component","_defineProperty","asyncProps","onAsyncPropUpdated","oldProps","oldAsyncProps","finalize","propName","asyncProp","type","release","resolvedValue","getOldProps","resetOldProps","props","hasAsyncProp","getAsyncProp","isAsyncPropLoading","Boolean","pendingLoadCount","resolvedLoadCount","key","reloadAsyncProp","value","_watchPromise","Promise","resolve","setAsyncProps","resolvedValues","originalValues","defaultValues","_createAsyncPropData","_updateAsyncProp","_fetch","url","_onResolve","_onError","error","_didAsyncInputValueChange","_resolveAsyncIterable","_setPropValue","_freezeAsyncOldProps","create","defineProperty","enumerable","lastValue","_postProcessValue","_setAsyncPropValue","loadCount","undefined","promise","then","data","catch","iterable","count","chunk","dataTransform","concat","startRow","endRow","length","propType","transform","defaultValue","propTypes","_propTypes"],"sources":["../../../src/lifecycle/component-state.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {isAsyncIterable} from '../utils/iterable-utils';\nimport {ASYNC_ORIGINAL_SYMBOL, ASYNC_RESOLVED_SYMBOL, ASYNC_DEFAULTS_SYMBOL} from './constants';\nimport type Component from './component';\nimport {ComponentProps, StatefulComponentProps} from './component';\nimport {PropType} from './prop-types';\n\nconst EMPTY_PROPS = Object.freeze({});\n\ntype AsyncPropState = {\n  type: PropType;\n  lastValue: any;\n  resolvedValue: any;\n  pendingLoadCount: number;\n  resolvedLoadCount: number;\n};\n\nexport default class ComponentState<PropsT extends ComponentProps> {\n  component: Component<PropsT>;\n  onAsyncPropUpdated: (propName: keyof PropsT, value: any) => void;\n\n  private asyncProps: Partial<Record<keyof PropsT, AsyncPropState>>;\n  private oldProps: StatefulComponentProps<PropsT> | null;\n  private oldAsyncProps: StatefulComponentProps<PropsT> | null;\n\n  constructor(component: Component<PropsT>) {\n    this.component = component;\n    this.asyncProps = {}; // Prop values that the layer sees\n    this.onAsyncPropUpdated = () => {};\n    this.oldProps = null; // Last props before update\n    this.oldAsyncProps = null; // Last props before update, with async values copied.\n  }\n\n  finalize() {\n    for (const propName in this.asyncProps) {\n      const asyncProp = this.asyncProps[propName];\n      if (asyncProp && asyncProp.type && asyncProp.type.release) {\n        // Release any resources created by transforms\n        asyncProp.type.release(asyncProp.resolvedValue, asyncProp.type, this.component);\n      }\n    }\n  }\n\n  /* Layer-facing props API */\n\n  getOldProps(): StatefulComponentProps<PropsT> | typeof EMPTY_PROPS {\n    return this.oldAsyncProps || this.oldProps || EMPTY_PROPS;\n  }\n\n  resetOldProps() {\n    this.oldAsyncProps = null;\n    this.oldProps = this.component.props;\n  }\n\n  // Checks if a prop is overridden\n  hasAsyncProp(propName: keyof PropsT): boolean {\n    return propName in this.asyncProps;\n  }\n\n  // Returns value of an overriden prop\n  getAsyncProp(propName: keyof PropsT): any {\n    const asyncProp = this.asyncProps[propName];\n    return asyncProp && asyncProp.resolvedValue;\n  }\n\n  isAsyncPropLoading(propName: keyof PropsT): boolean {\n    if (propName) {\n      const asyncProp = this.asyncProps[propName];\n      return Boolean(\n        asyncProp &&\n          asyncProp.pendingLoadCount > 0 &&\n          asyncProp.pendingLoadCount !== asyncProp.resolvedLoadCount\n      );\n    }\n    for (const key in this.asyncProps) {\n      if (this.isAsyncPropLoading(key)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Without changing the original prop value, swap out the data resolution under the hood\n  reloadAsyncProp(propName: keyof PropsT, value: any) {\n    this._watchPromise(propName, Promise.resolve(value));\n  }\n\n  // Updates all async/overridden props (when new props come in)\n  // Checks if urls have changed, starts loading, or removes override\n  setAsyncProps(props: StatefulComponentProps<PropsT>) {\n    // NOTE: prop param and default values are only support for testing\n    const resolvedValues = props[ASYNC_RESOLVED_SYMBOL] || {};\n    const originalValues = props[ASYNC_ORIGINAL_SYMBOL] || props;\n    const defaultValues = props[ASYNC_DEFAULTS_SYMBOL] || {};\n\n    // TODO - use async props from the layer's prop types\n    for (const propName in resolvedValues) {\n      const value = resolvedValues[propName];\n      this._createAsyncPropData(propName, defaultValues[propName]);\n      this._updateAsyncProp(propName, value);\n      // Use transformed value\n      resolvedValues[propName] = this.getAsyncProp(propName);\n    }\n\n    for (const propName in originalValues) {\n      const value = originalValues[propName];\n      // Makes sure a record exists for this prop\n      this._createAsyncPropData(propName, defaultValues[propName]);\n      this._updateAsyncProp(propName, value);\n    }\n  }\n\n  /* Placeholder methods for subclassing */\n\n  protected _fetch(propName: keyof PropsT, url: string): any {\n    return url;\n  }\n\n  protected _onResolve(propName: keyof PropsT, value: any) {} // eslint-disable-line @typescript-eslint/no-empty-function\n\n  protected _onError(propName: keyof PropsT, error: Error) {} // eslint-disable-line @typescript-eslint/no-empty-function\n\n  // Intercept strings (URLs) and Promises and activates loading and prop rewriting\n  private _updateAsyncProp(propName: keyof PropsT, value: any) {\n    if (!this._didAsyncInputValueChange(propName, value)) {\n      return;\n    }\n\n    // interpret value string as url and start a new load tracked by a promise\n    if (typeof value === 'string') {\n      value = this._fetch(propName, value);\n    }\n\n    // interprets promise and track the \"loading\"\n    if (value instanceof Promise) {\n      this._watchPromise(propName, value);\n      return;\n    }\n\n    if (isAsyncIterable(value)) {\n      this._resolveAsyncIterable(propName, value); // eslint-disable-line @typescript-eslint/no-floating-promises\n      return;\n    }\n\n    // else, normal, non-async value. Just store value for now\n    this._setPropValue(propName, value);\n  }\n\n  // Whenever async props are changing, we need to make a copy of oldProps\n  // otherwise the prop rewriting will affect the value both in props and oldProps.\n  // While the copy is relatively expensive, this only happens on load completion.\n  private _freezeAsyncOldProps() {\n    if (!this.oldAsyncProps && this.oldProps) {\n      // 1. inherit all synchronous props from oldProps\n      // 2. reconfigure the async prop descriptors to fixed values\n      this.oldAsyncProps = Object.create(this.oldProps);\n      for (const propName in this.asyncProps) {\n        Object.defineProperty(this.oldAsyncProps, propName, {\n          enumerable: true,\n          value: this.oldProps[propName]\n        });\n      }\n    }\n  }\n\n  // Checks if an input value actually changed (to avoid reloading/rewatching promises/urls)\n  private _didAsyncInputValueChange(propName: keyof PropsT, value: any): boolean {\n    // @ts-ignore\n    const asyncProp: AsyncPropState = this.asyncProps[propName];\n    if (value === asyncProp.resolvedValue || value === asyncProp.lastValue) {\n      return false;\n    }\n    asyncProp.lastValue = value;\n    return true;\n  }\n\n  // Set normal, non-async value\n  private _setPropValue(propName: keyof PropsT, value: any) {\n    // Save the current value before overwriting so that diffProps can access both\n    this._freezeAsyncOldProps();\n\n    const asyncProp = this.asyncProps[propName];\n    if (asyncProp) {\n      value = this._postProcessValue(asyncProp, value);\n      asyncProp.resolvedValue = value;\n      asyncProp.pendingLoadCount++;\n      asyncProp.resolvedLoadCount = asyncProp.pendingLoadCount;\n    }\n  }\n\n  // Set a just resolved async value, calling onAsyncPropUpdates if value changes asynchronously\n  private _setAsyncPropValue(propName: keyof PropsT, value: any, loadCount: number) {\n    // Only update if loadCount is larger or equal to resolvedLoadCount\n    // otherwise a more recent load has already completed\n    const asyncProp = this.asyncProps[propName];\n    if (asyncProp && loadCount >= asyncProp.resolvedLoadCount && value !== undefined) {\n      // Save the current value before overwriting so that diffProps can access both\n      this._freezeAsyncOldProps();\n\n      asyncProp.resolvedValue = value;\n      asyncProp.resolvedLoadCount = loadCount;\n\n      // Call callback to inform listener\n      this.onAsyncPropUpdated(propName, value);\n    }\n  }\n\n  // Tracks a promise, sets the prop when loaded, handles load count\n  private _watchPromise(propName: keyof PropsT, promise: Promise<any>) {\n    const asyncProp = this.asyncProps[propName];\n    if (asyncProp) {\n      asyncProp.pendingLoadCount++;\n      const loadCount = asyncProp.pendingLoadCount;\n      promise\n        .then(data => {\n          data = this._postProcessValue(asyncProp, data);\n          this._setAsyncPropValue(propName, data, loadCount);\n          this._onResolve(propName, data);\n        })\n        .catch(error => {\n          this._onError(propName, error);\n        });\n    }\n  }\n\n  private async _resolveAsyncIterable(\n    propName: keyof PropsT,\n    iterable: AsyncIterable<any>\n  ): Promise<void> {\n    if (propName !== 'data') {\n      // we only support data as async iterable\n      this._setPropValue(propName, iterable);\n      return;\n    }\n\n    const asyncProp = this.asyncProps[propName];\n    if (!asyncProp) {\n      return;\n    }\n\n    asyncProp.pendingLoadCount++;\n    const loadCount = asyncProp.pendingLoadCount;\n    let data = [];\n    let count = 0;\n\n    for await (const chunk of iterable) {\n      // @ts-expect-error\n      const {dataTransform} = this.component.props;\n      if (dataTransform) {\n        data = dataTransform(chunk, data);\n      } else {\n        data = data.concat(chunk);\n      }\n\n      // Used by the default _dataDiff function\n      Object.defineProperty(data, '__diff', {\n        enumerable: false,\n        value: [{startRow: count, endRow: data.length}]\n      });\n\n      count = data.length;\n      this._setAsyncPropValue(propName, data, loadCount);\n    }\n\n    this._onResolve(propName, data);\n  }\n\n  // Give the app a chance to post process the loaded data\n  private _postProcessValue(asyncProp, value: any) {\n    const propType = asyncProp.type;\n    if (propType) {\n      if (propType.release) {\n        propType.release(asyncProp.resolvedValue, propType, this.component);\n      }\n      if (propType.transform) {\n        return propType.transform(value, propType, this.component);\n      }\n    }\n    return value;\n  }\n\n  // Creating an asyncProp record if needed\n  private _createAsyncPropData(propName, defaultValue) {\n    const asyncProp = this.asyncProps[propName];\n    if (!asyncProp) {\n      // @ts-expect-error\n      const propTypes = this.component && this.component.constructor._propTypes;\n      // assert(defaultValue !== undefined);\n      this.asyncProps[propName] = {\n        type: propTypes && propTypes[propName],\n        lastValue: null, // Supplied prop value (can be url/promise, not visible to layer)\n        resolvedValue: defaultValue, // Resolved prop value (valid data, can be \"shown\" to layer)\n        pendingLoadCount: 0, // How many loads have been issued\n        resolvedLoadCount: 0 // Latest resolved load, (earlier loads will be ignored)\n      };\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}