{"ast":null,"code":"import _slicedToArray from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar channelHandles = 1;\nvar animationHandles = 1;\nexport var Timeline = /*#__PURE__*/function () {\n  function Timeline() {\n    _classCallCheck(this, Timeline);\n\n    this.time = 0;\n    this.channels = new Map();\n    this.animations = new Map();\n    this.playing = false;\n    this.lastEngineTime = -1;\n  }\n\n  _createClass(Timeline, [{\n    key: \"addChannel\",\n    value: function addChannel(props) {\n      var _props$delay = props.delay,\n          delay = _props$delay === void 0 ? 0 : _props$delay,\n          _props$duration = props.duration,\n          duration = _props$duration === void 0 ? Number.POSITIVE_INFINITY : _props$duration,\n          _props$rate = props.rate,\n          rate = _props$rate === void 0 ? 1 : _props$rate,\n          _props$repeat = props.repeat,\n          repeat = _props$repeat === void 0 ? 1 : _props$repeat;\n      var handle = channelHandles++;\n      var channel = {\n        time: 0,\n        delay: delay,\n        duration: duration,\n        rate: rate,\n        repeat: repeat\n      };\n\n      this._setChannelTime(channel, this.time);\n\n      this.channels.set(handle, channel);\n      return handle;\n    }\n  }, {\n    key: \"removeChannel\",\n    value: function removeChannel(handle) {\n      this.channels.delete(handle);\n\n      var _iterator = _createForOfIteratorHelper(this.animations),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              animationHandle = _step$value[0],\n              animation = _step$value[1];\n\n          if (animation.channel === handle) {\n            this.detachAnimation(animationHandle);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"isFinished\",\n    value: function isFinished(handle) {\n      var channel = this.channels.get(handle);\n\n      if (channel === undefined) {\n        return false;\n      }\n\n      return this.time >= channel.delay + channel.duration * channel.repeat;\n    }\n  }, {\n    key: \"getTime\",\n    value: function getTime(handle) {\n      if (handle === undefined) {\n        return this.time;\n      }\n\n      var channel = this.channels.get(handle);\n\n      if (channel === undefined) {\n        return -1;\n      }\n\n      return channel.time;\n    }\n  }, {\n    key: \"setTime\",\n    value: function setTime(time) {\n      this.time = Math.max(0, time);\n      var channels = this.channels.values();\n\n      var _iterator2 = _createForOfIteratorHelper(channels),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var channel = _step2.value;\n\n          this._setChannelTime(channel, this.time);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var animations = this.animations.values();\n\n      var _iterator3 = _createForOfIteratorHelper(animations),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var animationData = _step3.value;\n          var animation = animationData.animation,\n              _channel = animationData.channel;\n          animation.setTime(this.getTime(_channel));\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      this.playing = true;\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.playing = false;\n      this.lastEngineTime = -1;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.setTime(0);\n    }\n  }, {\n    key: \"attachAnimation\",\n    value: function attachAnimation(animation, channelHandle) {\n      var animationHandle = animationHandles++;\n      this.animations.set(animationHandle, {\n        animation: animation,\n        channel: channelHandle\n      });\n      animation.setTime(this.getTime(channelHandle));\n      return animationHandle;\n    }\n  }, {\n    key: \"detachAnimation\",\n    value: function detachAnimation(handle) {\n      this.animations.delete(handle);\n    }\n  }, {\n    key: \"update\",\n    value: function update(engineTime) {\n      if (this.playing) {\n        if (this.lastEngineTime === -1) {\n          this.lastEngineTime = engineTime;\n        }\n\n        this.setTime(this.time + (engineTime - this.lastEngineTime));\n        this.lastEngineTime = engineTime;\n      }\n    }\n  }, {\n    key: \"_setChannelTime\",\n    value: function _setChannelTime(channel, time) {\n      var offsetTime = time - channel.delay;\n      var totalDuration = channel.duration * channel.repeat;\n\n      if (offsetTime >= totalDuration) {\n        channel.time = channel.duration * channel.rate;\n      } else {\n        channel.time = Math.max(0, offsetTime) % channel.duration;\n        channel.time *= channel.rate;\n      }\n    }\n  }]);\n\n  return Timeline;\n}();","map":{"version":3,"mappings":"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","names":["channelHandles","animationHandles","Timeline","constructor","time","channels","Map","animations","playing","lastEngineTime","addChannel","props","delay","duration","Number","POSITIVE_INFINITY","rate","repeat","handle","channel","_setChannelTime","set","removeChannel","delete","animationHandle","animation","detachAnimation","isFinished","get","undefined","getTime","setTime","Math","max","values","animationData","play","pause","reset","attachAnimation","channelHandle","update","engineTime","offsetTime","totalDuration"],"sources":["../../../src/animation/timeline.js"],"sourcesContent":["let channelHandles = 1;\nlet animationHandles = 1;\n\nexport class Timeline {\n  constructor() {\n    this.time = 0;\n    this.channels = new Map();\n    this.animations = new Map();\n    this.playing = false;\n    this.lastEngineTime = -1;\n  }\n\n  addChannel(props) {\n    const {delay = 0, duration = Number.POSITIVE_INFINITY, rate = 1, repeat = 1} = props;\n\n    const handle = channelHandles++;\n    const channel = {\n      time: 0,\n      delay,\n      duration,\n      rate,\n      repeat\n    };\n    this._setChannelTime(channel, this.time);\n    this.channels.set(handle, channel);\n\n    return handle;\n  }\n\n  removeChannel(handle) {\n    this.channels.delete(handle);\n\n    for (const [animationHandle, animation] of this.animations) {\n      if (animation.channel === handle) {\n        this.detachAnimation(animationHandle);\n      }\n    }\n  }\n\n  isFinished(handle) {\n    const channel = this.channels.get(handle);\n    if (channel === undefined) {\n      return false;\n    }\n\n    return this.time >= channel.delay + channel.duration * channel.repeat;\n  }\n\n  getTime(handle) {\n    if (handle === undefined) {\n      return this.time;\n    }\n\n    const channel = this.channels.get(handle);\n\n    if (channel === undefined) {\n      return -1;\n    }\n\n    return channel.time;\n  }\n\n  setTime(time) {\n    this.time = Math.max(0, time);\n\n    const channels = this.channels.values();\n    for (const channel of channels) {\n      this._setChannelTime(channel, this.time);\n    }\n\n    const animations = this.animations.values();\n    for (const animationData of animations) {\n      const {animation, channel} = animationData;\n      animation.setTime(this.getTime(channel));\n    }\n  }\n\n  play() {\n    this.playing = true;\n  }\n\n  pause() {\n    this.playing = false;\n    this.lastEngineTime = -1;\n  }\n\n  reset() {\n    this.setTime(0);\n  }\n\n  attachAnimation(animation, channelHandle) {\n    const animationHandle = animationHandles++;\n\n    this.animations.set(animationHandle, {\n      animation,\n      channel: channelHandle\n    });\n\n    animation.setTime(this.getTime(channelHandle));\n\n    return animationHandle;\n  }\n\n  detachAnimation(handle) {\n    this.animations.delete(handle);\n  }\n\n  update(engineTime) {\n    if (this.playing) {\n      if (this.lastEngineTime === -1) {\n        this.lastEngineTime = engineTime;\n      }\n      this.setTime(this.time + (engineTime - this.lastEngineTime));\n      this.lastEngineTime = engineTime;\n    }\n  }\n\n  _setChannelTime(channel, time) {\n    const offsetTime = time - channel.delay;\n    const totalDuration = channel.duration * channel.repeat;\n    // Note(Tarek): Don't loop on final repeat.\n    if (offsetTime >= totalDuration) {\n      channel.time = channel.duration * channel.rate;\n    } else {\n      channel.time = Math.max(0, offsetTime) % channel.duration;\n      channel.time *= channel.rate;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}