{"ast":null,"code":"import _classCallCheck from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasehrenfeld/projs/se-team/tomas/react-apps/custom_filter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport DoublyLinkedListNode from '../utils/doubly-linked-list-node';\n\nvar DoublyLinkedList = /*#__PURE__*/function () {\n  function DoublyLinkedList() {\n    _classCallCheck(this, DoublyLinkedList);\n\n    _defineProperty(this, \"head\", null);\n\n    _defineProperty(this, \"tail\", null);\n\n    _defineProperty(this, \"_length\", 0);\n  }\n\n  _createClass(DoublyLinkedList, [{\n    key: \"length\",\n    get: function get() {\n      return this._length;\n    }\n  }, {\n    key: \"add\",\n    value: function add(item) {\n      var node = new DoublyLinkedListNode(item, this.tail, null);\n\n      if (this.tail) {\n        this.tail.next = node;\n        this.tail = node;\n      } else {\n        this.head = node;\n        this.tail = node;\n      }\n\n      ++this._length;\n      return node;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(node) {\n      if (!node) {\n        return;\n      }\n\n      if (node.previous && node.next) {\n        node.previous.next = node.next;\n        node.next.previous = node.previous;\n      } else if (node.previous) {\n        node.previous.next = null;\n        this.tail = node.previous;\n      } else if (node.next) {\n        node.next.previous = null;\n        this.head = node.next;\n      } else {\n        this.head = null;\n        this.tail = null;\n      }\n\n      node.next = null;\n      node.previous = null;\n      --this._length;\n    }\n  }, {\n    key: \"splice\",\n    value: function splice(node, nextNode) {\n      if (node === nextNode) {\n        return;\n      }\n\n      this.remove(nextNode);\n\n      this._insert(node, nextNode);\n    }\n  }, {\n    key: \"_insert\",\n    value: function _insert(node, nextNode) {\n      var oldNodeNext = node.next;\n      node.next = nextNode;\n\n      if (this.tail === node) {\n        this.tail = nextNode;\n      } else {\n        oldNodeNext.previous = nextNode;\n      }\n\n      nextNode.next = oldNodeNext;\n      nextNode.previous = node;\n      ++this._length;\n    }\n  }]);\n\n  return DoublyLinkedList;\n}();\n\nexport { DoublyLinkedList as default };","map":{"version":3,"mappings":";;;AAGA,OAAOA,oBAAP,MAAiC,kCAAjC;;IAOqBC,gB;EAAiB;IAAA;;IAAAC,8BACA,IADA;;IAAAA,8BAEA,IAFA;;IAAAA,iCAG1B,CAH0B;EAAA;;;;SAK1B,eAAG;MACX,OAAO,KAAKC,OAAZ;IACD;;;WAODC,aAAIC,IAAJD,EAAU;MACR,IAAME,IAAI,GAAG,IAAIN,oBAAJ,CAAyBK,IAAzB,EAA+B,KAAKE,IAApC,EAA0C,IAA1C,CAAb;;MAEA,IAAI,KAAKA,IAAT,EAAe;QACb,KAAKA,IAAL,CAAUC,IAAV,GAAiBF,IAAjB;QACA,KAAKC,IAAL,GAAYD,IAAZ;MAFF,OAGO;QACL,KAAKG,IAAL,GAAYH,IAAZ;QACA,KAAKC,IAAL,GAAYD,IAAZ;MACD;;MAED,EAAE,KAAKH,OAAP;MAEA,OAAOG,IAAP;IACD;;;WAMDI,gBAAOJ,IAAPI,EAAa;MACX,IAAI,CAACJ,IAAL,EAAW;QACT;MACD;;MAED,IAAIA,IAAI,CAACK,QAALL,IAAiBA,IAAI,CAACE,IAA1B,EAAgC;QAC9BF,IAAI,CAACK,QAALL,CAAcE,IAAdF,GAAqBA,IAAI,CAACE,IAA1BF;QACAA,IAAI,CAACE,IAALF,CAAUK,QAAVL,GAAqBA,IAAI,CAACK,QAA1BL;MAFF,OAGO,IAAIA,IAAI,CAACK,QAAT,EAAmB;QAExBL,IAAI,CAACK,QAALL,CAAcE,IAAdF,GAAqB,IAArBA;QACA,KAAKC,IAAL,GAAYD,IAAI,CAACK,QAAjB;MAHK,OAIA,IAAIL,IAAI,CAACE,IAAT,EAAe;QAEpBF,IAAI,CAACE,IAALF,CAAUK,QAAVL,GAAqB,IAArBA;QACA,KAAKG,IAAL,GAAYH,IAAI,CAACE,IAAjB;MAHK,OAIA;QAEL,KAAKC,IAAL,GAAY,IAAZ;QACA,KAAKF,IAAL,GAAY,IAAZ;MACD;;MAEDD,IAAI,CAACE,IAALF,GAAY,IAAZA;MACAA,IAAI,CAACK,QAALL,GAAgB,IAAhBA;MAEA,EAAE,KAAKH,OAAP;IACD;;;WAODS,gBAAON,IAAPM,EAAaC,QAAbD,EAAuB;MACrB,IAAIN,IAAI,KAAKO,QAAb,EAAuB;QACrB;MACD;;MAGD,KAAKH,MAAL,CAAYG,QAAZ;;MACA,KAAKC,OAAL,CAAaR,IAAb,EAAmBO,QAAnB;IACD;;;WAEDC,iBAAQR,IAARQ,EAAcD,QAAdC,EAAwB;MACtB,IAAMC,WAAW,GAAGT,IAAI,CAACE,IAAzB;MACAF,IAAI,CAACE,IAALF,GAAYO,QAAZP;;MAGA,IAAI,KAAKC,IAAL,KAAcD,IAAlB,EAAwB;QACtB,KAAKC,IAAL,GAAYM,QAAZ;MADF,OAEO;QACLE,WAAW,CAACJ,QAAZI,GAAuBF,QAAvBE;MACD;;MAEDF,QAAQ,CAACL,IAATK,GAAgBE,WAAhBF;MACAA,QAAQ,CAACF,QAATE,GAAoBP,IAApBO;MAEA,EAAE,KAAKV,OAAP;IACD;;;;;;SA5FkBF,gB","names":["DoublyLinkedListNode","DoublyLinkedList","_defineProperty","_length","add","item","node","tail","next","head","remove","previous","splice","nextNode","_insert","oldNodeNext"],"sources":["../../../src/utils/doubly-linked-list.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport DoublyLinkedListNode from '../utils/doubly-linked-list-node';\n\n/**\n * Doubly linked list\n *\n * @private\n */\nexport default class DoublyLinkedList {\n  head: DoublyLinkedListNode | null = null;\n  tail: DoublyLinkedListNode | null = null;\n  _length = 0;\n\n  get length() {\n    return this._length;\n  }\n\n  /**\n   * Adds the item to the end of the list\n   * @param {*} [item]\n   * @return {DoublyLinkedListNode}\n   */\n  add(item) {\n    const node = new DoublyLinkedListNode(item, this.tail, null);\n\n    if (this.tail) {\n      this.tail.next = node;\n      this.tail = node;\n    } else {\n      this.head = node;\n      this.tail = node;\n    }\n\n    ++this._length;\n\n    return node;\n  }\n\n  /**\n   * Removes the given node from the list\n   * @param {DoublyLinkedListNode} node\n   */\n  remove(node) {\n    if (!node) {\n      return;\n    }\n\n    if (node.previous && node.next) {\n      node.previous.next = node.next;\n      node.next.previous = node.previous;\n    } else if (node.previous) {\n      // Remove last node\n      node.previous.next = null;\n      this.tail = node.previous;\n    } else if (node.next) {\n      // Remove first node\n      node.next.previous = null;\n      this.head = node.next;\n    } else {\n      // Remove last node in the linked list\n      this.head = null;\n      this.tail = null;\n    }\n\n    node.next = null;\n    node.previous = null;\n\n    --this._length;\n  }\n\n  /**\n   * Moves nextNode after node\n   * @param {DoublyLinkedListNode} node\n   * @param {DoublyLinkedListNode} nextNode\n   */\n  splice(node, nextNode) {\n    if (node === nextNode) {\n      return;\n    }\n\n    // Remove nextNode, then insert after node\n    this.remove(nextNode);\n    this._insert(node, nextNode);\n  }\n\n  _insert(node, nextNode) {\n    const oldNodeNext = node.next;\n    node.next = nextNode;\n\n    // nextNode is the new tail\n    if (this.tail === node) {\n      this.tail = nextNode;\n    } else {\n      oldNodeNext.previous = nextNode;\n    }\n\n    nextNode.next = oldNodeNext;\n    nextNode.previous = node;\n\n    ++this._length;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}